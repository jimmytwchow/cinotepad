(()=>{"use strict";const e={start(){this.decoder=new TextDecoder(this.encoding,this.options)},transform(e,t){this.decoder?t.enqueue(this.decoder.decode(e,{stream:!0})):t.enqueue(e)}};class t extends TransformStream{constructor(t="utf-8",n={}){var i=function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(i=Object.getOwnPropertySymbols(e);s<i.length;s++)t.indexOf(i[s])<0&&Object.prototype.propertyIsEnumerable.call(e,i[s])&&(n[i[s]]=e[i[s]])}return n}(n,[]);let s=Object.assign(Object.assign({},e),{encoding:t,options:i});super(s),this.tds=s}get encoding(){var e,t;return null!==(t=null===(e=this.tds.decoder)||void 0===e?void 0:e.encoding)&&void 0!==t?t:"utf-8"}get fatal(){var e,t;return null!==(t=null===(e=this.tds.decoder)||void 0===e?void 0:e.fatal)&&void 0!==t&&t}get ignoreBOM(){var e,t;return null!==(t=null===(e=this.tds.decoder)||void 0===e?void 0:e.ignoreBOM)&&void 0!==t&&t}}const n={transform(e,t){var n;let i,s=0;for(;;){if(i=e.indexOf("\n",s),!(i>-1)){let i=e.substring(s);i=i.replace(new RegExp("\\r","g"),""),0==i.length?this.remainChunk&&(i=this.remainChunk+i,t.enqueue(i),delete this.remainChunk):this.remainChunk=null!==(n=this.remainChunk)&&void 0!==n?n:""+i;break}{let n=e.substring(s,i);n=n.replace(new RegExp("\\r","g"),""),this.remainChunk&&(n=this.remainChunk+n,delete this.remainChunk),t.enqueue(n),s=i+1}}},flush(e){this.remainChunk&&(e.enqueue(this.remainChunk),delete this.remainChunk)}};class i extends TransformStream{constructor(e={}){var t=function(e,t){var n={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(n[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(i=Object.getOwnPropertySymbols(e);s<i.length;s++)t.indexOf(i[s])<0&&Object.prototype.propertyIsEnumerable.call(e,i[s])&&(n[i[s]]=e[i[s]])}return n}(e,[]);super(Object.assign(Object.assign({},n),{options:t}))}}var s,a=function(e,t,n,i){return new(n||(n=Promise))(function(s,a){function r(e){try{l(i.next(e))}catch(e){a(e)}}function o(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,o)}l((i=i.apply(e,t||[])).next())})};!function(e){e[e.INPUT=0]="INPUT",e[e.SELECT=1]="SELECT"}(s||(s={}));class r{constructor(){this.keyname={},this.candidateList=[],this.currentPage=0,this.maxNumOfKeys=1,this.ename="",this.cname="",this.prompt="",this.selkey="1234567890",this.dupsel=this.selkey.length,this.endkey="",this.spaceStyle=4,this.keepKeyCase=!1,this.symbolKbm=!1,this.phaseAutoSkipEndKey=!1,this.flagAutoSelectByPhase=!1,this.flagDispPartialMatch=!1,this.flagDispFullMatch=!1,this.flagVerticalSelection=!1,this.flagPressFullAutoSend=!1,this.flagUniqueAutoSend=!1,this._enable=!0,this._status=s.INPUT,this._keys=""}set enable(e){this._enable=e,this._enable||this.resetKeys()}get enable(){return this._enable}get totalPage(){if(this.candidateList){let e=this.dupsel;return 1==this.spaceStyle&&e++,Math.ceil(this.candidateList.length/e)}return 0}get currentCandidateList(){if(this.candidateList.length>0){let e=this.dupsel;return 1==this.spaceStyle&&e++,this.candidateList.slice((this.currentPage-1)*e,Math.min(this.currentPage*e,this.candidateList.length))}return this.candidateList}_fireCandidateChange(){0==this.totalPage?this.currentPage=0:this.currentPage=1,"function"==typeof this.onCurrentCandidatesChange&&this.onCurrentCandidatesChange(this.currentCandidateList),"function"==typeof this.onCandidatesChange&&this.onCandidatesChange(this.candidateList)}resetKeys(){this._keys="",this.candidateList=[],this._status=s.INPUT,"function"==typeof this.onKeynamesChange&&this.onKeynamesChange(""),this._fireCandidateChange()}deleteContentBackward(){if(this.enable){if(this._status==s.INPUT){if(this._keys.length>1){const e=this._keys.charAt(this._keys.length-2);return this._keys=this._keys.substring(0,this._keys.length-2),this.pushKey(e),!0}return 1==this._keys.length&&(this.resetKeys(),!0)}return this._status==s.SELECT&&(this.resetKeys(),!0)}return!1}pushKey(e){return a(this,void 0,void 0,function*(){const t=this,n=function(e){t._keys="",t.candidateList=[],t._status=s.INPUT,"function"==typeof t.onKeynamesChange&&t.onKeynamesChange(""),t._fireCandidateChange(),"function"==typeof t.onCommit&&t.onCommit(e)};if(!t.enable||!t.db)return n(e),void console.log(`Commit text:${e}`);console.log(`Push key:${e}`);const i=t.db.transaction(["quick","chardef"]),r=" "==e,o=t.endkey.indexOf(e)>-1,l=t.selkey.indexOf(e)>-1,d="string"==typeof t.keyname[e],c=function(e){return a(this,void 0,void 0,function*(){return new Promise(function(t,n){const s=[];i.objectStore("chardef").index("keycode").openCursor(IDBKeyRange.only(e)).onsuccess=function(e){const n=e.target.result;n?(s.push(n.value.candidate),n.continue()):t(s)}})})},u=t._keys,h=t.candidateList;switch(t._status){case s.INPUT:let f=[],g=[];if(t.candidateList=[],d?(t._keys+=e,(t.flagDispFullMatch||o||2==t.spaceStyle&&t._keys.length==t.maxNumOfKeys)&&(f=yield function(e){return a(this,void 0,void 0,function*(){return new Promise(function(t,n){let s=[];i.objectStore("quick").get(e).onsuccess=function(e){if(e.target.result){const t=e.target.result.candidates;"string"==typeof t&&t.length>0&&(s=s.concat(t.split("")))}t(s)}})})}(t._keys),f.length<1&&(g=yield c(t._keys)))):r&&(g=yield c(t._keys)),f.length>0?t.candidateList=f:t.candidateList=g,"function"!=typeof t.onKeynamesChange||l&&0!=h.length||t.onKeynamesChange(t._keys.split("").map(e=>t.keyname[e]).join("")),!t.flagDispFullMatch||0==t.candidateList.length&&0==h.length||t._fireCandidateChange(),o||r||2==t.spaceStyle&&t._keys.length==t.maxNumOfKeys){if(t.candidateList.length>1)return r&&1==t.spaceStyle?void n(t.candidateList[0]):(t._status=s.SELECT,t.flagDispFullMatch||t._fireCandidateChange(),void("function"==typeof t.onEndKey&&t.onEndKey(t.currentCandidateList)));if(1==t.candidateList.length)return void n(t.candidateList[0])}if(l&&u.length>0&&h.length>0){t._keys=u,t.candidateList=h,t._fireCandidateChange();let i=t.selkey.indexOf(e);return 1==t.spaceStyle&&i++,void(t.currentCandidateList.length>i&&n(t.currentCandidateList[i]))}if(!d)return void n(e);if(o&&1==t._keys.length)return void n(e);break;case s.SELECT:if(l){let i=t.selkey.indexOf(e);return 1==t.spaceStyle&&i++,void(t.currentCandidateList.length>i&&n(t.currentCandidateList[i]))}return r?t.totalPage>1?void t.nextCandidateList():void n(t.currentCandidateList[0]):(n(t.currentCandidateList[0]),void t.pushKey(e))}})}previousCandidateList(){return 0==this.totalPage?(this.currentPage=0,!1):(1==this.currentPage?this.currentPage=this.totalPage:this.currentPage--,"function"==typeof this.onCurrentCandidatesChange&&this.onCurrentCandidatesChange(this.currentCandidateList),!0)}nextCandidateList(){return 0==this.totalPage?(this.currentPage=0,!1):(this.currentPage==this.totalPage?this.currentPage=1:this.currentPage++,"function"==typeof this.onCurrentCandidatesChange&&this.onCurrentCandidatesChange(this.currentCandidateList),!0)}onKeynamesChange(e){}onCandidatesChange(e){}onCurrentCandidatesChange(e){}onEndKey(e){}onCommit(e){}}var o=function(e,t,n,i){return new(n||(n=Promise))(function(s,a){function r(e){try{l(i.next(e))}catch(e){a(e)}}function o(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(r,o)}l((i=i.apply(e,t||[])).next())})};function l(e){let t;const n=e.indexOf(" "),i=e.indexOf("\t");return t=-1==i||n>-1&&n<i?n:i,t}function d(e,t){return o(this,void 0,void 0,function*(){const{done:n,value:i}=yield e.read();if(n)return t;if(i){const e=i;if(e.length>0){if(e.startsWith("%keyname end"))return t;if(e.startsWith(" # ")&&e.length>3)t.keyname["#"]=e.substring(3);else{const n=l(e);n>0&&n<e.length-1&&(t.keyname[e.substring(0,n)]=e.substring(n+1).trim())}}}return yield d(e,t)})}function c(e,t){return o(this,void 0,void 0,function*(){const{done:n,value:i}=yield e.read();if(n)return t;if(i){const e=i;let n,s;if(e.length>0&&t.unwrittenQuickList){const i=t.unwrittenQuickList;if(e.startsWith("%quick end"))return t;if(e.startsWith(" # ")&&e.length>3)n="#",s=e.substring(3).trim(),i.push({keycode:n,candidates:s});else{const a=l(e);a>0&&a<e.length-1&&(n=e.substring(0,a),s=e.substring(a+1).trim(),i.push({keycode:n,candidates:s}),t.maxNumOfKeys=Math.max(t.maxNumOfKeys,n.length))}}}return yield c(e,t)})}function u(e,t){return o(this,void 0,void 0,function*(){const{done:n,value:i}=yield e.read();if(n)return t;if(i){const e=i;let n,s;if(e.length>0&&t.unwrittenCharDefList){const i=t.unwrittenCharDefList;if(e.startsWith("%chardef end"))return t;if(e.startsWith(" # ")&&e.length>3)n="#",s=e.substring(3).trim(),i.push({keycode:n,candidate:s});else{const a=l(e);a>0&&a<e.length-1&&(n=e.substring(0,a),s=e.substring(a+1).trim(),i.push({keycode:n,candidate:s}),t.maxNumOfKeys=Math.max(t.maxNumOfKeys,n.length))}}}return yield u(e,t)})}function h(e,t){return o(this,void 0,void 0,function*(){const{done:n,value:i}=yield e.read();if(n){if((t.dupsel<0||isNaN(t.dupsel))&&(t.dupsel=t.selkey.length),!t.keepKeyCase){const e=t.keyname;t.keyname={};for(let n in e)t.keyname[n.toLowerCase()]=e[n];if(t.unwrittenQuickList){const e=t.unwrittenQuickList;for(let t=0;t<e.length;t++)e[t].keycode=e[t].keycode.toLowerCase()}if(t.unwrittenCharDefList){const e=t.unwrittenCharDefList;for(let t=0;t<e.length;t++)e[t].keycode=e[t].keycode.toLowerCase()}}return t}if(i){let n=i;if(n=function(e){let t=e.indexOf("#");return t>-1&&(e=e.substring(0,t).trim()),e}(n),n.length>0)if(n.startsWith("%gen_inp"));else if(n.startsWith("%ename "))t.ename=n.substring(7);else if(n.startsWith("%cname "))t.cname=n.substring(7);else if(n.startsWith("%prompt "))t.prompt=n.substring(8);else if(n.startsWith("%selkey "))t.selkey=n.substring(8);else if(n.startsWith("%dupsel "))t.dupsel=parseInt(n.substring(8));else if(n.startsWith("%endkey "))t.endkey=n.substring(8);else if(n.startsWith("%space_style ")){let e=parseInt(n.substring(13));[1,2,4].indexOf(e)<0?t.spaceStyle=4:t.spaceStyle=e}else n.startsWith("%keep_key_case")?t.keepKeyCase=!0:n.startsWith("%symbol_kbm")?t.symbolKbm=!0:n.startsWith("%phase_auto_skip_endkey")?t.phaseAutoSkipEndKey=!0:n.startsWith("%flag_auto_select_by_phrase")?t.flagAutoSelectByPhase=!0:n.startsWith("%flag_disp_partial_match")?t.flagDispPartialMatch=!0:n.startsWith("%flag_disp_full_match")?t.flagDispFullMatch=!0:n.startsWith("%flag_vertical_selection")?t.flagVerticalSelection=!0:n.startsWith("%flag_press_full_auto_send")?t.flagPressFullAutoSend=!0:n.startsWith("%flag_unique_auto_send")?t.flagUniqueAutoSend=!0:n.startsWith("%keyname begin")?(t.keyname={},t=yield d(e,t)):n.startsWith("%quick begin")?(t.unwrittenQuickList=[],t=yield c(e,t)):n.startsWith("%chardef begin")&&(t.unwrittenCharDefList=[],t=yield u(e,t))}return yield h(e,t)})}if(document.getElementById("btn_load")&&document.getElementById("lbl_btn_load")&&document.getElementById("lbl_composing_text")&&document.getElementById("lbl_candidate")&&document.getElementById("ta_cinotepad")&&document.getElementById("checkbox_enable")&&document.getElementById("lbl_im_name")){const e=document.getElementById("btn_load"),n=document.getElementById("lbl_btn_load"),s=document.getElementById("lbl_composing_text"),a=document.getElementById("lbl_candidate"),l=document.getElementById("ta_cinotepad"),d=document.getElementById("checkbox_enable"),c=document.getElementById("lbl_im_name");e.onchange=u=>{if(e.files){const u=e.files;if(u.length>0){n.textContent="上傳中…",e.disabled=!0;const f=u[0],g=f.stream();(function(e,n){return o(this,void 0,void 0,function*(){const s=n.pipeThrough(new t).pipeThrough(new i).getReader(),a=`cin_${e}`;let l=new r;return l.dupsel=-1,l=yield h(s,l),l=yield function(e,t){return o(this,void 0,void 0,function*(){let n=yield new Promise((e,n)=>{let i=indexedDB.open(t);i.onsuccess=function(t){e(i.result)},i.onupgradeneeded=function(e){const t=i.result;let n=t.createObjectStore("settings",{keyPath:"name"});n=t.createObjectStore("keyname",{keyPath:"key"}),n=t.createObjectStore("quick",{keyPath:"keycode"}),n=t.createObjectStore("chardef",{autoIncrement:!0}),n.createIndex("keycode","keycode",{unique:!1})},i.onerror=function(){n(`Cannot open IndexedDB for the file ${t}`)}});e.db=n,e.dbName=t,yield new Promise((e,t)=>{let i=n.transaction(["settings","keyname","quick","chardef"],"readwrite");i.objectStore("settings").clear(),i.objectStore("keyname").clear(),i.objectStore("quick").clear(),i.objectStore("chardef").clear(),i.oncomplete=t=>{e()},i.onerror=e=>{t("Error when clearing old data...")}});let i=new Promise((t,i)=>{let s=n.transaction("settings","readwrite");s.objectStore("settings").add({name:"%ename",value:e.ename}),s.objectStore("settings").add({name:"%cname",value:e.cname}),s.objectStore("settings").add({name:"%prompt",value:e.prompt}),s.objectStore("settings").add({name:"%selkey",value:e.selkey}),s.objectStore("settings").add({name:"%dupsel",value:e.dupsel}),s.objectStore("settings").add({name:"%endkey",value:e.endkey}),s.objectStore("settings").add({name:"%space_style",value:e.spaceStyle}),s.objectStore("settings").add({name:"%keep_key_case",value:e.keepKeyCase}),s.objectStore("settings").add({name:"%symbol_kbm",value:e.symbolKbm}),s.objectStore("settings").add({name:"%phase_auto_skip_endkey",value:e.phaseAutoSkipEndKey}),s.objectStore("settings").add({name:"%flag_auto_select_by_phrase",value:e.flagAutoSelectByPhase}),s.objectStore("settings").add({name:"%flag_disp_partial_match",value:e.flagDispPartialMatch}),s.objectStore("settings").add({name:"%flag_disp_full_match",value:e.flagDispFullMatch}),s.objectStore("settings").add({name:"%flag_vertical_selection",value:e.flagVerticalSelection}),s.objectStore("settings").add({name:"%flag_press_full_auto_send",value:e.flagPressFullAutoSend}),s.objectStore("settings").add({name:"%flag_unique_auto_send",value:e.flagUniqueAutoSend}),s.oncomplete=e=>{t()},s.onerror=e=>{i("Cannot handle settings...")}}),s=new Promise((t,i)=>{if(0==Object.keys(e.keyname).length)t();else{let s=n.transaction("keyname","readwrite");for(let t in e.keyname)s.objectStore("keyname").add({key:t,keyname:e.keyname[t]});s.oncomplete=e=>{t()},s.onerror=e=>{i("Cannot handle keyname section...")}}}),a=new Promise((t,i)=>{if(e.unwrittenQuickList&&0!=e.unwrittenQuickList.length){let s=n.transaction("quick","readwrite");for(let t of e.unwrittenQuickList)s.objectStore("quick").add(t);s.oncomplete=e=>{t()},s.onerror=e=>{i("Cannot handle quick section...")}}else t()}),r=new Promise((t,i)=>{if(e.unwrittenCharDefList&&0!=e.unwrittenCharDefList.length){let s=n.transaction("chardef","readwrite");for(let t of e.unwrittenCharDefList)s.objectStore("chardef").add(t);s.oncomplete=e=>{t()},s.onerror=e=>{i("Cannot handle chardef section...")}}else t()});return yield Promise.all([i,s,a,r]),delete e.unwrittenQuickList,delete e.unwrittenCharDefList,e})}(l,a),l})})(f.name,g).then(e=>{n.textContent="完成",e.onKeynamesChange=function(e){s.textContent=e},e.onCurrentCandidatesChange=function(t){let n,i="";for(let s=0;s<t.length;s++)n=s,1==e.spaceStyle&&n--,i+=`<span style="display:inline-block; width:1em; text-align:right;">${n<0?" ":e.selkey.charAt(n)}</span><span>${t[s]}</span>`;a.innerHTML=i},e.onCommit=function(e){const t=l.selectionStart+e.length,n=l.value.substring(0,l.selectionStart),i=l.value.substring(l.selectionEnd);l.value=n+e+i,l.setSelectionRange(t,t)},c.textContent=e.cname+" ",l.onbeforeinput=function(t){"insertText"==t.inputType?(e.pushKey(t.data),t.preventDefault()):"deleteContentBackward"==t.inputType&&e.deleteContentBackward()&&t.preventDefault()},l.onkeydown=function(t){"Escape"==t.key?(e.resetKeys(),t.preventDefault()):"PageUp"==t.key?e.previousCandidateList()&&t.preventDefault():"PageDown"==t.key&&e.nextCandidateList()&&t.preventDefault()},e.enable=d.checked,d.onchange=function(t){e.enable=d.checked}}).catch(t=>{e.disabled=!1,Promise.reject(t)})}}}}else console.error("Some of HTML elements are not available.")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MEssRUFBbUIxQyxFQUFxQmxELE1BQU1qRixVQUNsRCxFQUNBbUksRUFBcUJ5QyxnQkFFakJFLEVBQW9CM0MsRUFBcUJsRCxNQUFNakYsVUFDbkRtSSxFQUFxQjRDLGNBRXZCNUMsRUFBcUJsRCxNQUFRNEYsRUFBV3RILEVBQU91SCxFQUMvQzNDLEVBQXFCNkMsa0JBQ25CTCxFQUNBQSxFQUVKLEVBRUF0QyxFQUFhSSxZQUFjcEYsRUFBSXZDLE1BQVEsSUFFdkNxSCxFQUFxQjhDLGNBQWdCLFNBQVUxQyxHQUMxQixjQUFmQSxFQUFFMkMsV0FDSjdILEVBQUlILFFBQVFxRixFQUFFNEMsTUFDZDVDLEVBQUU2QyxrQkFDc0IseUJBQWY3QyxFQUFFMkMsV0FDUDdILEVBQUlOLHlCQUNOd0YsRUFBRTZDLGdCQUdSLEVBQ0FqRCxFQUFxQmtELFVBQVksU0FBVTlDLEdBQzVCLFVBQVRBLEVBQUVuRixLQUNKQyxFQUFJbEIsWUFDSm9HLEVBQUU2QyxrQkFDZ0IsVUFBVDdDLEVBQUVuRixJQUNQQyxFQUFJOEMseUJBQ05vQyxFQUFFNkMsaUJBRWMsWUFBVDdDLEVBQUVuRixLQUNQQyxFQUFJNkMscUJBQ05xQyxFQUFFNkMsZ0JBR1IsRUFFQS9ILEVBQUlwQixPQUFTbUcsRUFBa0JrRCxRQUMvQmxELEVBQWtCRSxTQUFXLFNBQVVDLEdBQ3JDbEYsRUFBSXBCLE9BQVNtRyxFQUFrQmtELE9BQ2pDLElBRURDLE1BQU9DLElBQ056RCxFQUFXVyxVQUFXLEVBQ3RCdkUsUUFBUUUsT0FBT21ILElBRXJCLENBQ0YsRUFFSixNQUNFOUgsUUFBUThILE1BQU0sMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9zcmMvanN0ZXh0ZGVjb2RlcnN0cmVhbS50cyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9zcmMvanNsaW5lc3RyZWFtLnRzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL3NyYy9jaW4udHMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vc3JjL2NpbmxvYWRlci50cyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsidHlwZSBURFNUcmFuc2Zvcm1lciA9IHtcbiAgc3RhcnQoKTogdm9pZDtcbiAgdHJhbnNmb3JtKFxuICAgIGNodW5rOiBBbGxvd1NoYXJlZEJ1ZmZlclNvdXJjZSxcbiAgICBjb250cm9sbGVyOiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclxuICApOiB2b2lkO1xuICBkZWNvZGVyPzogVGV4dERlY29kZXI7XG4gIGVuY29kaW5nPzogc3RyaW5nO1xuICBvcHRpb25zPzogb2JqZWN0O1xufTtcblxuY29uc3QgdGRzOiBURFNUcmFuc2Zvcm1lciA9IHtcbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKHRoaXMuZW5jb2RpbmcsIHRoaXMub3B0aW9ucyk7XG4gIH0sXG4gIHRyYW5zZm9ybShcbiAgICBjaHVuazogQWxsb3dTaGFyZWRCdWZmZXJTb3VyY2UsXG4gICAgY29udHJvbGxlcjogVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJcbiAgKSB7XG4gICAgaWYgKHRoaXMuZGVjb2Rlcikge1xuICAgICAgY29udHJvbGxlci5lbnF1ZXVlKFxuICAgICAgICAodGhpcy5kZWNvZGVyIGFzIFRleHREZWNvZGVyKS5kZWNvZGUoY2h1bmssIHsgc3RyZWFtOiB0cnVlIH0pXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250cm9sbGVyLmVucXVldWUoY2h1bmspO1xuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEpTVGV4dERlY29kZXJTdHJlYW0gZXh0ZW5kcyBUcmFuc2Zvcm1TdHJlYW0ge1xuICBwdWJsaWMgY29uc3RydWN0b3IoZW5jb2RpbmcgPSBcInV0Zi04XCIsIHsgLi4ub3B0aW9ucyB9ID0ge30pIHtcbiAgICBsZXQgdDogVERTVHJhbnNmb3JtZXIgPSB7IC4uLnRkcywgZW5jb2RpbmcsIG9wdGlvbnMgfTtcblxuICAgIHN1cGVyKHQpO1xuICAgIHRoaXMudGRzID0gdDtcbiAgfVxuXG4gIHByaXZhdGUgdGRzOiBURFNUcmFuc2Zvcm1lcjtcblxuICBwdWJsaWMgZ2V0IGVuY29kaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudGRzLmRlY29kZXI/LmVuY29kaW5nID8/IFwidXRmLThcIjtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZmF0YWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGRzLmRlY29kZXI/LmZhdGFsID8/IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGdldCBpZ25vcmVCT00oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGRzLmRlY29kZXI/Lmlnbm9yZUJPTSA/PyBmYWxzZTtcbiAgfVxufVxuIiwidHlwZSBMU1RyYW5zZm9ybWVyID0ge1xuICB0cmFuc2Zvcm0oY2h1bms6IHN0cmluZywgY29udHJvbGxlcjogVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIpOiB2b2lkO1xuICBmbHVzaChjb250cm9sbGVyOiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcik6IHZvaWQ7XG4gIG9wdGlvbnM/OiBvYmplY3Q7XG4gIHJlbWFpbkNodW5rPzogc3RyaW5nO1xufTtcblxuY29uc3QgbHM6IExTVHJhbnNmb3JtZXIgPSB7XG4gIHRyYW5zZm9ybShjaHVuazogc3RyaW5nLCBjb250cm9sbGVyOiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcikge1xuICAgIGxldCBzdGFydEluZGV4OiBudW1iZXIgPSAwO1xuICAgIGxldCBlbmRJbmRleDogbnVtYmVyO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBlbmRJbmRleCA9IGNodW5rLmluZGV4T2YoXCJcXG5cIiwgc3RhcnRJbmRleCk7XG4gICAgICBpZiAoZW5kSW5kZXggPiAtMSkge1xuICAgICAgICBsZXQgbGluZTogc3RyaW5nID0gY2h1bmsuc3Vic3RyaW5nKHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZShuZXcgUmVnRXhwKFwiXFxcXHJcIiwgXCJnXCIpLCBcIlwiKTtcbiAgICAgICAgaWYgKHRoaXMucmVtYWluQ2h1bmspIHtcbiAgICAgICAgICBsaW5lID0gKHRoaXMucmVtYWluQ2h1bmsgYXMgc3RyaW5nKSArIGxpbmU7XG4gICAgICAgICAgZGVsZXRlIHRoaXMucmVtYWluQ2h1bms7XG4gICAgICAgIH1cbiAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGxpbmUpO1xuICAgICAgICBzdGFydEluZGV4ID0gZW5kSW5kZXggKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGxpbmU6IHN0cmluZyA9IGNodW5rLnN1YnN0cmluZyhzdGFydEluZGV4KTtcbiAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZShuZXcgUmVnRXhwKFwiXFxcXHJcIiwgXCJnXCIpLCBcIlwiKTtcbiAgICAgICAgaWYgKGxpbmUubGVuZ3RoID09IDApIHtcbiAgICAgICAgICBpZiAodGhpcy5yZW1haW5DaHVuaykge1xuICAgICAgICAgICAgbGluZSA9ICh0aGlzLnJlbWFpbkNodW5rIGFzIHN0cmluZykgKyBsaW5lO1xuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGxpbmUpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMucmVtYWluQ2h1bms7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVtYWluQ2h1bmsgPSB0aGlzLnJlbWFpbkNodW5rID8/IFwiXCIgKyBsaW5lO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZmx1c2goY29udHJvbGxlcjogVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIpIHtcbiAgICBpZiAodGhpcy5yZW1haW5DaHVuaykge1xuICAgICAgY29udHJvbGxlci5lbnF1ZXVlKHRoaXMucmVtYWluQ2h1bmsgYXMgc3RyaW5nKTtcbiAgICAgIGRlbGV0ZSB0aGlzLnJlbWFpbkNodW5rO1xuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEpTTGluZVN0cmVhbSBleHRlbmRzIFRyYW5zZm9ybVN0cmVhbSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcih7IC4uLm9wdGlvbnMgfSA9IHt9KSB7XG4gICAgbGV0IHQ6IExTVHJhbnNmb3JtZXIgPSB7IC4uLmxzLCBvcHRpb25zIH07XG5cbiAgICBzdXBlcih0KTtcbiAgfVxufVxuIiwiLy8gdHlwZSBkZWZpbml0aW9uXG50eXBlIFNwYWNlU3R5bGUgPSAxIHwgMiB8IDQ7XG50eXBlIEtleW5hbWVzID0ge1xuICBbaW5kZXg6IHN0cmluZ106IHN0cmluZztcbn07XG50eXBlIFF1aWNrUmVjb3JkID0geyBrZXljb2RlOiBzdHJpbmc7IGNhbmRpZGF0ZXM6IHN0cmluZyB9O1xudHlwZSBDaGFyRGVmUmVjb3JkID0geyBrZXljb2RlOiBzdHJpbmc7IGNhbmRpZGF0ZTogc3RyaW5nIH07XG4vLyBlbmQgb2YgdHlwZSBkZWZpbml0aW9uXG5cbi8vIGVudW1cbmVudW0gU3RhdHVzIHtcbiAgSU5QVVQsXG4gIFNFTEVDVCxcbn1cblxuLy8gYWN0dWFsIGNpbiBjbGFzcyBkZWZpbml0aW9uXG5jbGFzcyBDaW4ge1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jYW5kaWRhdGVMaXN0ID0gW107XG4gICAgdGhpcy5jdXJyZW50UGFnZSA9IDA7XG4gICAgdGhpcy5tYXhOdW1PZktleXMgPSAxO1xuXG4gICAgdGhpcy5lbmFtZSA9IFwiXCI7XG4gICAgdGhpcy5jbmFtZSA9IFwiXCI7XG4gICAgdGhpcy5wcm9tcHQgPSBcIlwiO1xuXG4gICAgLy8gaW5pdCBkZWZhdWx0IHNldHRpbmdcbiAgICB0aGlzLnNlbGtleSA9IFwiMTIzNDU2Nzg5MFwiO1xuICAgIHRoaXMuZHVwc2VsID0gdGhpcy5zZWxrZXkubGVuZ3RoO1xuICAgIHRoaXMuZW5ka2V5ID0gXCJcIjtcbiAgICB0aGlzLnNwYWNlU3R5bGUgPSA0O1xuICAgIHRoaXMua2VlcEtleUNhc2UgPSBmYWxzZTtcbiAgICB0aGlzLnN5bWJvbEtibSA9IGZhbHNlOyAvL05vdCBpbXBsZW1lbnQgeWV0LlxuICAgIHRoaXMucGhhc2VBdXRvU2tpcEVuZEtleSA9IGZhbHNlOyAvLyBVbnVzZWQ6IE5vIGltcGxlbWVudGF0aW9uIG9mIHBocmFzZSBpbnB1dFxuICAgIHRoaXMuZmxhZ0F1dG9TZWxlY3RCeVBoYXNlID0gZmFsc2U7IC8vIFVudXNlZDogTm8gaW1wbGVtZW50YXRpb24gb2YgcGhyYXNlIGlucHV0XG4gICAgdGhpcy5mbGFnRGlzcFBhcnRpYWxNYXRjaCA9IGZhbHNlOyAvL05vdCBpbXBsZW1lbnQgeWV0LlxuICAgIHRoaXMuZmxhZ0Rpc3BGdWxsTWF0Y2ggPSBmYWxzZTtcbiAgICB0aGlzLmZsYWdWZXJ0aWNhbFNlbGVjdGlvbiA9IGZhbHNlOyAvL05vdCBpbXBsZW1lbnQgeWV0LlxuICAgIHRoaXMuZmxhZ1ByZXNzRnVsbEF1dG9TZW5kID0gZmFsc2U7IC8vTm90IGltcGxlbWVudCB5ZXQuXG4gICAgdGhpcy5mbGFnVW5pcXVlQXV0b1NlbmQgPSBmYWxzZTsgLy9Ob3QgaW1wbGVtZW50IHlldC5cbiAgICAvLyBlbmQgb2YgaW5pdCBkZWZhdWx0IHNldHRpbmdcblxuICAgIHRoaXMuX2VuYWJsZSA9IHRydWU7XG4gICAgdGhpcy5fc3RhdHVzID0gU3RhdHVzLklOUFVUO1xuICAgIHRoaXMuX2tleXMgPSBcIlwiO1xuICB9XG5cbiAgLy8gUHJpdmF0ZSBtZW1iZXJzIGRlY2xhcmF0aW9uXG4gIHByaXZhdGUgX2VuYWJsZTogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfc3RhdHVzOiBTdGF0dXM7XG4gIHByaXZhdGUgX2tleXM6IHN0cmluZztcbiAgLy8gRW5kIG9mIHByaXZhdGUgbWVtYmVycyBkZWNsYXJhdGlvblxuXG4gIC8vIFB1YmxpYyBtZW1iZXJzIGRlY2xhcmF0aW9uXG4gIHB1YmxpYyBkYk5hbWU/OiBzdHJpbmc7XG4gIHB1YmxpYyBkYj86IElEQkRhdGFiYXNlO1xuXG4gIHB1YmxpYyBjYW5kaWRhdGVMaXN0OiBzdHJpbmdbXTtcbiAgcHVibGljIGN1cnJlbnRQYWdlOiBudW1iZXI7XG4gIHB1YmxpYyBtYXhOdW1PZktleXM6IG51bWJlcjtcblxuICAvLyBQdWJsaWMgbWVtYmVycyBkZWNsYXJhdGlvbiAoY2luIGZpbGUgZmllbGRzKVxuICBwdWJsaWMgZW5hbWU6IHN0cmluZztcbiAgcHVibGljIGNuYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyBwcm9tcHQ6IHN0cmluZztcbiAgcHVibGljIHNlbGtleTogc3RyaW5nO1xuICBwdWJsaWMgZHVwc2VsOiBudW1iZXI7XG4gIHB1YmxpYyBlbmRrZXk6IHN0cmluZztcbiAgLy8gc3BhY2Ugc3R5bGU6XG4gIC8vIDEgZm9yIGRheWksIG5vc2VlaW5nXG4gIC8vIDIgZm9yIHNpbXBsZXhcbiAgLy8gNCBmb3IgY2FuZ2ppZSwgYXJyYXkgKGRlZmF1bHQpXG4gIHB1YmxpYyBzcGFjZVN0eWxlOiBTcGFjZVN0eWxlO1xuICBwdWJsaWMga2VlcEtleUNhc2U6IGJvb2xlYW47XG4gIHB1YmxpYyBzeW1ib2xLYm06IGJvb2xlYW47IC8vTm90IGltcGxlbWVudCB5ZXQuXG4gIHB1YmxpYyBwaGFzZUF1dG9Ta2lwRW5kS2V5OiBib29sZWFuOyAvLyBVbnVzZWQ6IE5vIGltcGxlbWVudGF0aW9uIG9mIHBocmFzZSBpbnB1dFxuICBwdWJsaWMgZmxhZ0F1dG9TZWxlY3RCeVBoYXNlOiBib29sZWFuOyAvLyBVbnVzZWQ6IE5vIGltcGxlbWVudGF0aW9uIG9mIHBocmFzZSBpbnB1dFxuICBwdWJsaWMgZmxhZ0Rpc3BQYXJ0aWFsTWF0Y2g6IGJvb2xlYW47IC8vTm90IGltcGxlbWVudCB5ZXQuXG4gIHB1YmxpYyBmbGFnRGlzcEZ1bGxNYXRjaDogYm9vbGVhbjtcbiAgcHVibGljIGZsYWdWZXJ0aWNhbFNlbGVjdGlvbjogYm9vbGVhbjsgLy9Ob3QgaW1wbGVtZW50IHlldC5cbiAgcHVibGljIGZsYWdQcmVzc0Z1bGxBdXRvU2VuZDogYm9vbGVhbjsgLy9Ob3QgaW1wbGVtZW50IHlldC5cbiAgcHVibGljIGZsYWdVbmlxdWVBdXRvU2VuZDogYm9vbGVhbjsgLy9Ob3QgaW1wbGVtZW50IHlldC5cblxuICBwdWJsaWMga2V5bmFtZTogS2V5bmFtZXMgPSB7fTtcbiAgcHVibGljIHVud3JpdHRlblF1aWNrTGlzdD86IFF1aWNrUmVjb3JkW107XG4gIHB1YmxpYyB1bndyaXR0ZW5DaGFyRGVmTGlzdD86IENoYXJEZWZSZWNvcmRbXTtcbiAgLy8gRW5kIG9mIHB1YmxpYyBtZW1iZXJzIGRlY2xhcmF0aW9uIChjaW4gZmlsZSBmaWVsZHMpXG4gIC8vIEVuZCBvZiBwdWJsaWMgbWVtYmVycyBkZWNsYXJhdGlvblxuXG4gIC8vIFB1YmxpYyBnZXR0ZXJzL3NldHRlcnMgaW1wbGVtZW50YXRpb25cbiAgcHVibGljIHNldCBlbmFibGUodjogYm9vbGVhbikge1xuICAgIHRoaXMuX2VuYWJsZSA9IHY7XG4gICAgaWYgKCF0aGlzLl9lbmFibGUpIHtcbiAgICAgIHRoaXMucmVzZXRLZXlzKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCBlbmFibGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2VuYWJsZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdG90YWxQYWdlKCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmNhbmRpZGF0ZUxpc3QpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbGlzdFNpemUgPSB0aGlzLmR1cHNlbDtcbiAgICAgIGlmICh0aGlzLnNwYWNlU3R5bGUgPT0gMSkge1xuICAgICAgICBsaXN0U2l6ZSsrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmNhbmRpZGF0ZUxpc3QubGVuZ3RoIC8gbGlzdFNpemUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQgY3VycmVudENhbmRpZGF0ZUxpc3QoKTogc3RyaW5nW10ge1xuICAgIGlmICh0aGlzLmNhbmRpZGF0ZUxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IGxpc3RTaXplID0gdGhpcy5kdXBzZWw7XG4gICAgICBpZiAodGhpcy5zcGFjZVN0eWxlID09IDEpIHtcbiAgICAgICAgbGlzdFNpemUrKztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmNhbmRpZGF0ZUxpc3Quc2xpY2UoXG4gICAgICAgICh0aGlzLmN1cnJlbnRQYWdlIC0gMSkgKiBsaXN0U2l6ZSxcbiAgICAgICAgTWF0aC5taW4odGhpcy5jdXJyZW50UGFnZSAqIGxpc3RTaXplLCB0aGlzLmNhbmRpZGF0ZUxpc3QubGVuZ3RoKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY2FuZGlkYXRlTGlzdDtcbiAgICB9XG4gIH1cbiAgLy8gRW5kIG9mIHB1YmxpYyBnZXR0ZXJzL3NldHRlcnMgaW1wbGVtZW50YXRpb25cblxuICAvLyBQcml2YXRlIHVzZWQgbWV0aG9kXG4gIHByaXZhdGUgX2ZpcmVDYW5kaWRhdGVDaGFuZ2UoKSB7XG4gICAgaWYgKHRoaXMudG90YWxQYWdlID09IDApIHtcbiAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9uQ3VycmVudENhbmRpZGF0ZXNDaGFuZ2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLm9uQ3VycmVudENhbmRpZGF0ZXNDaGFuZ2UodGhpcy5jdXJyZW50Q2FuZGlkYXRlTGlzdCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5vbkNhbmRpZGF0ZXNDaGFuZ2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLm9uQ2FuZGlkYXRlc0NoYW5nZSh0aGlzLmNhbmRpZGF0ZUxpc3QpO1xuICAgIH1cbiAgfVxuICAvLyBFbmQgb2YgcHJpdmF0ZSB1c2VkIG1ldGhvZFxuXG4gIC8vIFB1YmxpYyBtZXRob2RzIGltcGxlbWVudGF0aW9uXG4gIHB1YmxpYyByZXNldEtleXMoKSB7XG4gICAgdGhpcy5fa2V5cyA9IFwiXCI7XG4gICAgdGhpcy5jYW5kaWRhdGVMaXN0ID0gW107XG4gICAgdGhpcy5fc3RhdHVzID0gU3RhdHVzLklOUFVUO1xuICAgIGlmICh0eXBlb2YgdGhpcy5vbktleW5hbWVzQ2hhbmdlID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhpcy5vbktleW5hbWVzQ2hhbmdlKFwiXCIpO1xuICAgIH1cbiAgICB0aGlzLl9maXJlQ2FuZGlkYXRlQ2hhbmdlKCk7XG4gIH1cblxuICBwdWJsaWMgZGVsZXRlQ29udGVudEJhY2t3YXJkKCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmVuYWJsZSkge1xuICAgICAgaWYgKHRoaXMuX3N0YXR1cyA9PSBTdGF0dXMuSU5QVVQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2tleXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIGNvbnN0IHRoZUxhc3RLZXk6IHN0cmluZyA9IHRoaXMuX2tleXMuY2hhckF0KHRoaXMuX2tleXMubGVuZ3RoIC0gMik7XG4gICAgICAgICAgdGhpcy5fa2V5cyA9IHRoaXMuX2tleXMuc3Vic3RyaW5nKDAsIHRoaXMuX2tleXMubGVuZ3RoIC0gMik7XG4gICAgICAgICAgdGhpcy5wdXNoS2V5KHRoZUxhc3RLZXkpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2tleXMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICB0aGlzLnJlc2V0S2V5cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0dXMgPT0gU3RhdHVzLlNFTEVDVCkge1xuICAgICAgICB0aGlzLnJlc2V0S2V5cygpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwdXNoS2V5KGtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgY2luOiBDaW4gPSB0aGlzO1xuXG4gICAgY29uc3QgY29tbWl0VGV4dCA9IGZ1bmN0aW9uICh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgIGNpbi5fa2V5cyA9IFwiXCI7XG4gICAgICBjaW4uY2FuZGlkYXRlTGlzdCA9IFtdO1xuICAgICAgY2luLl9zdGF0dXMgPSBTdGF0dXMuSU5QVVQ7XG4gICAgICBpZiAodHlwZW9mIGNpbi5vbktleW5hbWVzQ2hhbmdlID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjaW4ub25LZXluYW1lc0NoYW5nZShcIlwiKTtcbiAgICAgIH1cbiAgICAgIGNpbi5fZmlyZUNhbmRpZGF0ZUNoYW5nZSgpO1xuICAgICAgaWYgKHR5cGVvZiBjaW4ub25Db21taXQgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNpbi5vbkNvbW1pdCh0ZXh0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFjaW4uZW5hYmxlIHx8ICFjaW4uZGIpIHtcbiAgICAgIGNvbW1pdFRleHQoa2V5KTtcbiAgICAgIGNvbnNvbGUubG9nKGBDb21taXQgdGV4dDoke2tleX1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coYFB1c2gga2V5OiR7a2V5fWApO1xuICAgIH1cblxuICAgIC8vIGxvb2t1cCBjYW5kaWRhdGUgZnJvbSBpbmRleGVkREJcbiAgICBjb25zdCB0cmFuc2FjdGlvbjogSURCVHJhbnNhY3Rpb24gPSAoY2luLmRiIGFzIElEQkRhdGFiYXNlKS50cmFuc2FjdGlvbihbXG4gICAgICBcInF1aWNrXCIsXG4gICAgICBcImNoYXJkZWZcIixcbiAgICBdKTtcbiAgICBjb25zdCBpc1NwYWNlOiBib29sZWFuID0ga2V5ID09IFwiIFwiO1xuICAgIGNvbnN0IGlzRW5kS2V5OiBib29sZWFuID0gY2luLmVuZGtleS5pbmRleE9mKGtleSkgPiAtMTtcbiAgICBjb25zdCBpc1NlbEtleTogYm9vbGVhbiA9IGNpbi5zZWxrZXkuaW5kZXhPZihrZXkpID4gLTE7XG4gICAgY29uc3QgaXNLZXluYW1lOiBib29sZWFuID0gdHlwZW9mIGNpbi5rZXluYW1lW2tleV0gPT0gXCJzdHJpbmdcIjtcblxuICAgIGNvbnN0IGdldEtleW5hbWVzRnJvbUtleXMgPSBmdW5jdGlvbiAoa2V5czogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiBrZXlzXG4gICAgICAgIC5zcGxpdChcIlwiKVxuICAgICAgICAubWFwKCh2KSA9PiBjaW4ua2V5bmFtZVt2XSlcbiAgICAgICAgLmpvaW4oXCJcIik7XG4gICAgfTtcblxuICAgIGNvbnN0IGdldENhbmRpZGF0ZXNGcm9tUXVpY2sgPSBhc3luYyBmdW5jdGlvbiAoXG4gICAgICBrZXlzOiBzdHJpbmdcbiAgICApOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nW10+KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbGV0IGNhbmRpZGF0ZUxpc3Q6IHN0cmluZ1tdID0gW107XG4gICAgICAgIHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKFwicXVpY2tcIikuZ2V0KGtleXMpLm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChcbiAgICAgICAgICBldmVudDogRXZlbnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKChldmVudC50YXJnZXQgYXMgSURCUmVxdWVzdCkucmVzdWx0KSB7XG4gICAgICAgICAgICBjb25zdCBjYW5kaWRhdGVzU3RyID0gKGV2ZW50LnRhcmdldCBhcyBJREJSZXF1ZXN0KS5yZXN1bHRcbiAgICAgICAgICAgICAgLmNhbmRpZGF0ZXM7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbmRpZGF0ZXNTdHIgPT0gXCJzdHJpbmdcIiAmJiBjYW5kaWRhdGVzU3RyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgY2FuZGlkYXRlTGlzdCA9IGNhbmRpZGF0ZUxpc3QuY29uY2F0KGNhbmRpZGF0ZXNTdHIuc3BsaXQoXCJcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlKGNhbmRpZGF0ZUxpc3QpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGdldENhbmRpZGF0ZXNGcm9tQ2hhcmRlZiA9IGFzeW5jIGZ1bmN0aW9uIChcbiAgICAgIGtleXM6IHN0cmluZ1xuICAgICk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmdbXT4oZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGVMaXN0OiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICB0cmFuc2FjdGlvblxuICAgICAgICAgIC5vYmplY3RTdG9yZShcImNoYXJkZWZcIilcbiAgICAgICAgICAuaW5kZXgoXCJrZXljb2RlXCIpXG4gICAgICAgICAgLm9wZW5DdXJzb3IoSURCS2V5UmFuZ2Uub25seShrZXlzKSkub25zdWNjZXNzID0gZnVuY3Rpb24gKFxuICAgICAgICAgIGV2ZW50OiBFdmVudFxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBjdXJzb3IgPSAoZXZlbnQudGFyZ2V0IGFzIElEQlJlcXVlc3QpLnJlc3VsdDtcbiAgICAgICAgICBpZiAoY3Vyc29yKSB7XG4gICAgICAgICAgICBjYW5kaWRhdGVMaXN0LnB1c2goY3Vyc29yLnZhbHVlLmNhbmRpZGF0ZSk7XG4gICAgICAgICAgICBjdXJzb3IuY29udGludWUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShjYW5kaWRhdGVMaXN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gc3RhcnQgcHVzaCBrZXkgbG9naWNcbiAgICBjb25zdCBvcmlnaW5hbEtleXM6IHN0cmluZyA9IGNpbi5fa2V5cztcbiAgICBjb25zdCBvcmlnaW5hbENhbmRpZGF0ZUxpc3Q6IHN0cmluZ1tdID0gY2luLmNhbmRpZGF0ZUxpc3Q7XG4gICAgc3dpdGNoIChjaW4uX3N0YXR1cykge1xuICAgICAgY2FzZSBTdGF0dXMuSU5QVVQ6XG4gICAgICAgIGxldCBxdWlja0NhbmRpZGF0ZUxpc3Q6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGxldCBjaGFyZGVmQ2FuZGlkYXRlTGlzdDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgY2luLmNhbmRpZGF0ZUxpc3QgPSBbXTtcblxuICAgICAgICBpZiAoaXNLZXluYW1lKSB7XG4gICAgICAgICAgY2luLl9rZXlzICs9IGtleTtcblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNpbi5mbGFnRGlzcEZ1bGxNYXRjaCB8fFxuICAgICAgICAgICAgaXNFbmRLZXkgfHxcbiAgICAgICAgICAgIChjaW4uc3BhY2VTdHlsZSA9PSAyICYmIGNpbi5fa2V5cy5sZW5ndGggPT0gY2luLm1heE51bU9mS2V5cylcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHF1aWNrQ2FuZGlkYXRlTGlzdCA9IGF3YWl0IGdldENhbmRpZGF0ZXNGcm9tUXVpY2soY2luLl9rZXlzKTtcblxuICAgICAgICAgICAgaWYgKHF1aWNrQ2FuZGlkYXRlTGlzdC5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICAgIGNoYXJkZWZDYW5kaWRhdGVMaXN0ID0gYXdhaXQgZ2V0Q2FuZGlkYXRlc0Zyb21DaGFyZGVmKGNpbi5fa2V5cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzU3BhY2UpIHtcbiAgICAgICAgICBjaGFyZGVmQ2FuZGlkYXRlTGlzdCA9IGF3YWl0IGdldENhbmRpZGF0ZXNGcm9tQ2hhcmRlZihjaW4uX2tleXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHF1aWNrQ2FuZGlkYXRlTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY2luLmNhbmRpZGF0ZUxpc3QgPSBxdWlja0NhbmRpZGF0ZUxpc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2luLmNhbmRpZGF0ZUxpc3QgPSBjaGFyZGVmQ2FuZGlkYXRlTGlzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0eXBlb2YgY2luLm9uS2V5bmFtZXNDaGFuZ2UgPT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgKCFpc1NlbEtleSB8fCBvcmlnaW5hbENhbmRpZGF0ZUxpc3QubGVuZ3RoID09IDApXG4gICAgICAgICkge1xuICAgICAgICAgIGNpbi5vbktleW5hbWVzQ2hhbmdlKGdldEtleW5hbWVzRnJvbUtleXMoY2luLl9rZXlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgY2luLmZsYWdEaXNwRnVsbE1hdGNoICYmXG4gICAgICAgICAgIShjaW4uY2FuZGlkYXRlTGlzdC5sZW5ndGggPT0gMCAmJiBvcmlnaW5hbENhbmRpZGF0ZUxpc3QubGVuZ3RoID09IDApXG4gICAgICAgICkge1xuICAgICAgICAgIGNpbi5fZmlyZUNhbmRpZGF0ZUNoYW5nZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzRW5kS2V5IHx8XG4gICAgICAgICAgaXNTcGFjZSB8fFxuICAgICAgICAgIChjaW4uc3BhY2VTdHlsZSA9PSAyICYmIGNpbi5fa2V5cy5sZW5ndGggPT0gY2luLm1heE51bU9mS2V5cylcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGNpbi5jYW5kaWRhdGVMaXN0Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGlmIChpc1NwYWNlICYmIGNpbi5zcGFjZVN0eWxlID09IDEpIHtcbiAgICAgICAgICAgICAgY29tbWl0VGV4dChjaW4uY2FuZGlkYXRlTGlzdFswXSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNpbi5fc3RhdHVzID0gU3RhdHVzLlNFTEVDVDtcbiAgICAgICAgICAgICAgaWYgKCFjaW4uZmxhZ0Rpc3BGdWxsTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBjaW4uX2ZpcmVDYW5kaWRhdGVDaGFuZ2UoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGNpbi5vbkVuZEtleSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjaW4ub25FbmRLZXkoY2luLmN1cnJlbnRDYW5kaWRhdGVMaXN0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChjaW4uY2FuZGlkYXRlTGlzdC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgY29tbWl0VGV4dChjaW4uY2FuZGlkYXRlTGlzdFswXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzU2VsS2V5ICYmXG4gICAgICAgICAgb3JpZ2luYWxLZXlzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICBvcmlnaW5hbENhbmRpZGF0ZUxpc3QubGVuZ3RoID4gMFxuICAgICAgICApIHtcbiAgICAgICAgICBjaW4uX2tleXMgPSBvcmlnaW5hbEtleXM7XG4gICAgICAgICAgY2luLmNhbmRpZGF0ZUxpc3QgPSBvcmlnaW5hbENhbmRpZGF0ZUxpc3Q7XG4gICAgICAgICAgY2luLl9maXJlQ2FuZGlkYXRlQ2hhbmdlKCk7XG5cbiAgICAgICAgICBsZXQgc2VsZWN0SW5kZXg6IG51bWJlciA9IGNpbi5zZWxrZXkuaW5kZXhPZihrZXkpO1xuICAgICAgICAgIGlmIChjaW4uc3BhY2VTdHlsZSA9PSAxKSB7XG4gICAgICAgICAgICBzZWxlY3RJbmRleCsrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjaW4uY3VycmVudENhbmRpZGF0ZUxpc3QubGVuZ3RoID4gc2VsZWN0SW5kZXgpIHtcbiAgICAgICAgICAgIGNvbW1pdFRleHQoY2luLmN1cnJlbnRDYW5kaWRhdGVMaXN0W3NlbGVjdEluZGV4XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNLZXluYW1lKSB7XG4gICAgICAgICAgY29tbWl0VGV4dChrZXkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpcnR5IGhhbmRsaW5nIG9mIGVuZGtleVxuICAgICAgICAvLyBpZiB0aGUgbWFwcGluZyBpcyBub3QgZGVmaW5lZCBpbiBjaW4gZmlsZS5cbiAgICAgICAgLy8gSXQgc2hvdWxkIGJlIGhhbmRsZWQgaW4gY2luIGZpbGUuXG4gICAgICAgIGlmIChpc0VuZEtleSAmJiBjaW4uX2tleXMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICBjb21taXRUZXh0KGtleSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuZCBvZiBkaXJ0eSBoYW5kbGluZ1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFN0YXR1cy5TRUxFQ1Q6XG4gICAgICAgIGlmIChpc1NlbEtleSkge1xuICAgICAgICAgIGxldCBzZWxlY3RJbmRleDogbnVtYmVyID0gY2luLnNlbGtleS5pbmRleE9mKGtleSk7XG4gICAgICAgICAgaWYgKGNpbi5zcGFjZVN0eWxlID09IDEpIHtcbiAgICAgICAgICAgIHNlbGVjdEluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjaW4uY3VycmVudENhbmRpZGF0ZUxpc3QubGVuZ3RoID4gc2VsZWN0SW5kZXgpIHtcbiAgICAgICAgICAgIGNvbW1pdFRleHQoY2luLmN1cnJlbnRDYW5kaWRhdGVMaXN0W3NlbGVjdEluZGV4XSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChpc1NwYWNlKSB7XG4gICAgICAgICAgaWYgKGNpbi50b3RhbFBhZ2UgPiAxKSB7XG4gICAgICAgICAgICBjaW4ubmV4dENhbmRpZGF0ZUxpc3QoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVE9ETyBtYXkgYmUgYmFzZWQgb24gc3BhY2Ugc3R5bGUgKGUuZy4gY2FuZ2ppZSksIG5vIGFjdGlvblxuICAgICAgICAgICAgY29tbWl0VGV4dChjaW4uY3VycmVudENhbmRpZGF0ZUxpc3RbMF0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21taXRUZXh0KGNpbi5jdXJyZW50Q2FuZGlkYXRlTGlzdFswXSk7XG4gICAgICAgICAgY2luLnB1c2hLZXkoa2V5KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9lbmQgcHVzaCBrZXkgbG9naWNcbiAgfVxuXG4gIHB1YmxpYyBwcmV2aW91c0NhbmRpZGF0ZUxpc3QoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMudG90YWxQYWdlID09IDApIHtcbiAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAwO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50UGFnZSA9PSAxKSB7XG4gICAgICB0aGlzLmN1cnJlbnRQYWdlID0gdGhpcy50b3RhbFBhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudFBhZ2UtLTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9uQ3VycmVudENhbmRpZGF0ZXNDaGFuZ2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLm9uQ3VycmVudENhbmRpZGF0ZXNDaGFuZ2UodGhpcy5jdXJyZW50Q2FuZGlkYXRlTGlzdCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcHVibGljIG5leHRDYW5kaWRhdGVMaXN0KCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLnRvdGFsUGFnZSA9PSAwKSB7XG4gICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMDtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudFBhZ2UgPT0gdGhpcy50b3RhbFBhZ2UpIHtcbiAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnRQYWdlKys7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5vbkN1cnJlbnRDYW5kaWRhdGVzQ2hhbmdlID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhpcy5vbkN1cnJlbnRDYW5kaWRhdGVzQ2hhbmdlKHRoaXMuY3VycmVudENhbmRpZGF0ZUxpc3QpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBFbmQgb2YgcHVibGljIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cblxuICAvLyBPdmVycmlkZWQgbWV0aG9kc1xuICBwdWJsaWMgb25LZXluYW1lc0NoYW5nZShrZXluYW1lczogc3RyaW5nKSB7fVxuICBwdWJsaWMgb25DYW5kaWRhdGVzQ2hhbmdlKGNhbmRpZGF0ZXM6IHN0cmluZ1tdKSB7fVxuICBwdWJsaWMgb25DdXJyZW50Q2FuZGlkYXRlc0NoYW5nZShjYW5kaWRhdGVzOiBzdHJpbmdbXSkge31cbiAgcHVibGljIG9uRW5kS2V5KGNhbmRpZGF0ZXM6IHN0cmluZ1tdKSB7fVxuICBwdWJsaWMgb25Db21taXQodGV4dDogc3RyaW5nKSB7fVxuICAvLyBFbmQgb2Ygb3ZlcnJpZGVkIG1ldGhvZHNcbn1cblxuZXhwb3J0IHsgU3BhY2VTdHlsZSwgS2V5bmFtZXMsIFF1aWNrUmVjb3JkLCBDaGFyRGVmUmVjb3JkLCBDaW4gfTtcbiIsImltcG9ydCBKU1RleHREZWNvZGVyU3RyZWFtIGZyb20gXCIuL2pzdGV4dGRlY29kZXJzdHJlYW1cIjtcbmltcG9ydCBKU0xpbmVTdHJlYW0gZnJvbSBcIi4vanNsaW5lc3RyZWFtXCI7XG5pbXBvcnQgeyBTcGFjZVN0eWxlLCBLZXluYW1lcywgUXVpY2tSZWNvcmQsIENoYXJEZWZSZWNvcmQsIENpbiB9IGZyb20gXCIuL2NpblwiO1xuXG5mdW5jdGlvbiBpbmRleE9mV2hpdGVTcGFjZShsaW5lOiBzdHJpbmcpOiBudW1iZXIge1xuICBsZXQgd3NwSWR4OiBudW1iZXI7XG4gIGNvbnN0IHNwSWR4OiBudW1iZXIgPSBsaW5lLmluZGV4T2YoXCIgXCIpO1xuICBjb25zdCB0YWJJZHg6IG51bWJlciA9IGxpbmUuaW5kZXhPZihcIlxcdFwiKTtcbiAgaWYgKHRhYklkeCA9PSAtMSB8fCAoc3BJZHggPiAtMSAmJiBzcElkeCA8IHRhYklkeCkpIHtcbiAgICB3c3BJZHggPSBzcElkeDtcbiAgfSBlbHNlIHtcbiAgICB3c3BJZHggPSB0YWJJZHg7XG4gIH1cbiAgcmV0dXJuIHdzcElkeDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ29tbWVudChsaW5lOiBzdHJpbmcpOiBzdHJpbmcge1xuICBsZXQgaTogbnVtYmVyID0gbGluZS5pbmRleE9mKFwiI1wiKTtcbiAgaWYgKGkgPiAtMSkge1xuICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCk7XG4gIH1cbiAgcmV0dXJuIGxpbmU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUtleW5hbWVTZWN0aW9uKFxuICByZWFkZXI6IFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcixcbiAgY2luOiBDaW5cbik6IFByb21pc2U8Q2luPiB7XG4gIGNvbnN0IHsgZG9uZSwgdmFsdWUgfTogUmVhZGFibGVTdHJlYW1SZWFkUmVzdWx0PGFueT4gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICBpZiAoZG9uZSkge1xuICAgIHJldHVybiBjaW47XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCBsaW5lID0gdmFsdWUgYXMgc3RyaW5nO1xuICAgICAgaWYgKGxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAobGluZS5zdGFydHNXaXRoKFwiJWtleW5hbWUgZW5kXCIpKSB7XG4gICAgICAgICAgcmV0dXJuIGNpbjtcbiAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoXCIgIyBcIikgJiYgbGluZS5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgY2luLmtleW5hbWVbXCIjXCJdID0gbGluZS5zdWJzdHJpbmcoMyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgd2hpdGVzcGFjZUluZGV4OiBudW1iZXIgPSBpbmRleE9mV2hpdGVTcGFjZShsaW5lKTtcbiAgICAgICAgICBpZiAod2hpdGVzcGFjZUluZGV4ID4gMCAmJiB3aGl0ZXNwYWNlSW5kZXggPCBsaW5lLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGNpbi5rZXluYW1lW2xpbmUuc3Vic3RyaW5nKDAsIHdoaXRlc3BhY2VJbmRleCldID0gbGluZVxuICAgICAgICAgICAgICAuc3Vic3RyaW5nKHdoaXRlc3BhY2VJbmRleCArIDEpXG4gICAgICAgICAgICAgIC50cmltKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBoYW5kbGVLZXluYW1lU2VjdGlvbihyZWFkZXIsIGNpbik7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlUXVpY2tTZWN0aW9uKFxuICByZWFkZXI6IFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcixcbiAgY2luOiBDaW5cbik6IFByb21pc2U8Q2luPiB7XG4gIGNvbnN0IHsgZG9uZSwgdmFsdWUgfTogUmVhZGFibGVTdHJlYW1SZWFkUmVzdWx0PGFueT4gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICBpZiAoZG9uZSkge1xuICAgIHJldHVybiBjaW47XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCBsaW5lID0gdmFsdWUgYXMgc3RyaW5nO1xuICAgICAgbGV0IGtleWNvZGU6IHN0cmluZywgY2FuZGlkYXRlczogc3RyaW5nO1xuICAgICAgaWYgKGxpbmUubGVuZ3RoID4gMCAmJiBjaW4udW53cml0dGVuUXVpY2tMaXN0KSB7XG4gICAgICAgIGNvbnN0IHVud3JpdHRlblF1aWNrTGlzdCA9IGNpbi51bndyaXR0ZW5RdWlja0xpc3QgYXMgUXVpY2tSZWNvcmRbXTtcbiAgICAgICAgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVxdWljayBlbmRcIikpIHtcbiAgICAgICAgICByZXR1cm4gY2luO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiAjIFwiKSAmJiBsaW5lLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgICBrZXljb2RlID0gXCIjXCI7XG4gICAgICAgICAgY2FuZGlkYXRlcyA9IGxpbmUuc3Vic3RyaW5nKDMpLnRyaW0oKTtcbiAgICAgICAgICB1bndyaXR0ZW5RdWlja0xpc3QucHVzaCh7IGtleWNvZGUsIGNhbmRpZGF0ZXMgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgd2hpdGVzcGFjZUluZGV4OiBudW1iZXIgPSBpbmRleE9mV2hpdGVTcGFjZShsaW5lKTtcbiAgICAgICAgICBpZiAod2hpdGVzcGFjZUluZGV4ID4gMCAmJiB3aGl0ZXNwYWNlSW5kZXggPCBsaW5lLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGtleWNvZGUgPSBsaW5lLnN1YnN0cmluZygwLCB3aGl0ZXNwYWNlSW5kZXgpO1xuICAgICAgICAgICAgY2FuZGlkYXRlcyA9IGxpbmUuc3Vic3RyaW5nKHdoaXRlc3BhY2VJbmRleCArIDEpLnRyaW0oKTtcbiAgICAgICAgICAgIHVud3JpdHRlblF1aWNrTGlzdC5wdXNoKHsga2V5Y29kZSwgY2FuZGlkYXRlcyB9KTtcbiAgICAgICAgICAgIGNpbi5tYXhOdW1PZktleXMgPSBNYXRoLm1heChjaW4ubWF4TnVtT2ZLZXlzLCBrZXljb2RlLmxlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBoYW5kbGVRdWlja1NlY3Rpb24ocmVhZGVyLCBjaW4pO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUNoYXJEZWZTZWN0aW9uKFxuICByZWFkZXI6IFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcixcbiAgY2luOiBDaW5cbik6IFByb21pc2U8Q2luPiB7XG4gIGNvbnN0IHsgZG9uZSwgdmFsdWUgfTogUmVhZGFibGVTdHJlYW1SZWFkUmVzdWx0PGFueT4gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICBpZiAoZG9uZSkge1xuICAgIHJldHVybiBjaW47XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCBsaW5lID0gdmFsdWUgYXMgc3RyaW5nO1xuICAgICAgbGV0IGtleWNvZGU6IHN0cmluZywgY2FuZGlkYXRlOiBzdHJpbmc7XG4gICAgICBpZiAobGluZS5sZW5ndGggPiAwICYmIGNpbi51bndyaXR0ZW5DaGFyRGVmTGlzdCkge1xuICAgICAgICBjb25zdCB1bndyaXR0ZW5DaGFyRGVmTGlzdCA9XG4gICAgICAgICAgY2luLnVud3JpdHRlbkNoYXJEZWZMaXN0IGFzIENoYXJEZWZSZWNvcmRbXTtcbiAgICAgICAgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVjaGFyZGVmIGVuZFwiKSkge1xuICAgICAgICAgIHJldHVybiBjaW47XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiICMgXCIpICYmIGxpbmUubGVuZ3RoID4gMykge1xuICAgICAgICAgIGtleWNvZGUgPSBcIiNcIjtcbiAgICAgICAgICBjYW5kaWRhdGUgPSBsaW5lLnN1YnN0cmluZygzKS50cmltKCk7XG4gICAgICAgICAgdW53cml0dGVuQ2hhckRlZkxpc3QucHVzaCh7IGtleWNvZGUsIGNhbmRpZGF0ZSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB3aGl0ZXNwYWNlSW5kZXg6IG51bWJlciA9IGluZGV4T2ZXaGl0ZVNwYWNlKGxpbmUpO1xuICAgICAgICAgIGlmICh3aGl0ZXNwYWNlSW5kZXggPiAwICYmIHdoaXRlc3BhY2VJbmRleCA8IGxpbmUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAga2V5Y29kZSA9IGxpbmUuc3Vic3RyaW5nKDAsIHdoaXRlc3BhY2VJbmRleCk7XG4gICAgICAgICAgICBjYW5kaWRhdGUgPSBsaW5lLnN1YnN0cmluZyh3aGl0ZXNwYWNlSW5kZXggKyAxKS50cmltKCk7XG4gICAgICAgICAgICB1bndyaXR0ZW5DaGFyRGVmTGlzdC5wdXNoKHsga2V5Y29kZSwgY2FuZGlkYXRlIH0pO1xuICAgICAgICAgICAgY2luLm1heE51bU9mS2V5cyA9IE1hdGgubWF4KGNpbi5tYXhOdW1PZktleXMsIGtleWNvZGUubGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IGhhbmRsZUNoYXJEZWZTZWN0aW9uKHJlYWRlciwgY2luKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVTZWN0aW9uKFxuICByZWFkZXI6IFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcixcbiAgY2luOiBDaW5cbik6IFByb21pc2U8Q2luPiB7XG4gIGNvbnN0IHsgZG9uZSwgdmFsdWUgfTogUmVhZGFibGVTdHJlYW1SZWFkUmVzdWx0PGFueT4gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICBpZiAoZG9uZSkge1xuICAgIGlmIChjaW4uZHVwc2VsIDwgMCB8fCBpc05hTihjaW4uZHVwc2VsKSkge1xuICAgICAgY2luLmR1cHNlbCA9IGNpbi5zZWxrZXkubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAoIWNpbi5rZWVwS2V5Q2FzZSkge1xuICAgICAgY29uc3Qgb2xkS2V5bmFtZTogS2V5bmFtZXMgPSBjaW4ua2V5bmFtZTtcbiAgICAgIGNpbi5rZXluYW1lID0ge307XG4gICAgICBmb3IgKGxldCBrZXkgaW4gb2xkS2V5bmFtZSkge1xuICAgICAgICBjaW4ua2V5bmFtZVtrZXkudG9Mb3dlckNhc2UoKV0gPSBvbGRLZXluYW1lW2tleV07XG4gICAgICB9XG4gICAgICBpZiAoY2luLnVud3JpdHRlblF1aWNrTGlzdCkge1xuICAgICAgICBjb25zdCB1bndyaXR0ZW5RdWlja0xpc3QgPSBjaW4udW53cml0dGVuUXVpY2tMaXN0IGFzIFF1aWNrUmVjb3JkW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdW53cml0dGVuUXVpY2tMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdW53cml0dGVuUXVpY2tMaXN0W2ldLmtleWNvZGUgPVxuICAgICAgICAgICAgdW53cml0dGVuUXVpY2tMaXN0W2ldLmtleWNvZGUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNpbi51bndyaXR0ZW5DaGFyRGVmTGlzdCkge1xuICAgICAgICBjb25zdCB1bndyaXR0ZW5DaGFyRGVmTGlzdCA9XG4gICAgICAgICAgY2luLnVud3JpdHRlbkNoYXJEZWZMaXN0IGFzIENoYXJEZWZSZWNvcmRbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bndyaXR0ZW5DaGFyRGVmTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHVud3JpdHRlbkNoYXJEZWZMaXN0W2ldLmtleWNvZGUgPVxuICAgICAgICAgICAgdW53cml0dGVuQ2hhckRlZkxpc3RbaV0ua2V5Y29kZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaW47XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBsZXQgbGluZSA9IHZhbHVlIGFzIHN0cmluZztcbiAgICAgIGxpbmUgPSBoYW5kbGVDb21tZW50KGxpbmUpO1xuICAgICAgaWYgKGxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAobGluZS5zdGFydHNXaXRoKFwiJWdlbl9pbnBcIikpIHtcbiAgICAgICAgICAvLyB0ZW1wb3JhcmlseSB1bnVzZWQgKG1lYW5zIGdlbmVyYWwgaW5wdXQgbW9kdWxlKVxuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVlbmFtZSBcIikpIHtcbiAgICAgICAgICBjaW4uZW5hbWUgPSBsaW5lLnN1YnN0cmluZyhcIiVlbmFtZSBcIi5sZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVjbmFtZSBcIikpIHtcbiAgICAgICAgICBjaW4uY25hbWUgPSBsaW5lLnN1YnN0cmluZyhcIiVjbmFtZSBcIi5sZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVwcm9tcHQgXCIpKSB7XG4gICAgICAgICAgY2luLnByb21wdCA9IGxpbmUuc3Vic3RyaW5nKFwiJXByb21wdCBcIi5sZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVzZWxrZXkgXCIpKSB7XG4gICAgICAgICAgY2luLnNlbGtleSA9IGxpbmUuc3Vic3RyaW5nKFwiJXNlbGtleSBcIi5sZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVkdXBzZWwgXCIpKSB7XG4gICAgICAgICAgY2luLmR1cHNlbCA9IHBhcnNlSW50KGxpbmUuc3Vic3RyaW5nKFwiJWR1cHNlbCBcIi5sZW5ndGgpKTsgLy9lLmcuICVkdXBzZWwgOVxuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVlbmRrZXkgXCIpKSB7XG4gICAgICAgICAgY2luLmVuZGtleSA9IGxpbmUuc3Vic3RyaW5nKFwiJWVuZGtleSBcIi5sZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVzcGFjZV9zdHlsZSBcIikpIHtcbiAgICAgICAgICBsZXQgc3BhY2VTdHlsZSA9IHBhcnNlSW50KGxpbmUuc3Vic3RyaW5nKFwiJXNwYWNlX3N0eWxlIFwiLmxlbmd0aCkpO1xuICAgICAgICAgIGlmIChbMSwgMiwgNF0uaW5kZXhPZihzcGFjZVN0eWxlKSA8IDApIHtcbiAgICAgICAgICAgIGNpbi5zcGFjZVN0eWxlID0gNDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2luLnNwYWNlU3R5bGUgPSBzcGFjZVN0eWxlIGFzIFNwYWNlU3R5bGU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVrZWVwX2tleV9jYXNlXCIpKSB7XG4gICAgICAgICAgY2luLmtlZXBLZXlDYXNlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoXCIlc3ltYm9sX2tibVwiKSkge1xuICAgICAgICAgIGNpbi5zeW1ib2xLYm0gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVwaGFzZV9hdXRvX3NraXBfZW5ka2V5XCIpKSB7XG4gICAgICAgICAgY2luLnBoYXNlQXV0b1NraXBFbmRLZXkgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVmbGFnX2F1dG9fc2VsZWN0X2J5X3BocmFzZVwiKSkge1xuICAgICAgICAgIGNpbi5mbGFnQXV0b1NlbGVjdEJ5UGhhc2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVmbGFnX2Rpc3BfcGFydGlhbF9tYXRjaFwiKSkge1xuICAgICAgICAgIGNpbi5mbGFnRGlzcFBhcnRpYWxNYXRjaCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJWZsYWdfZGlzcF9mdWxsX21hdGNoXCIpKSB7XG4gICAgICAgICAgY2luLmZsYWdEaXNwRnVsbE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoXCIlZmxhZ192ZXJ0aWNhbF9zZWxlY3Rpb25cIikpIHtcbiAgICAgICAgICBjaW4uZmxhZ1ZlcnRpY2FsU2VsZWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoXCIlZmxhZ19wcmVzc19mdWxsX2F1dG9fc2VuZFwiKSkge1xuICAgICAgICAgIGNpbi5mbGFnUHJlc3NGdWxsQXV0b1NlbmQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVmbGFnX3VuaXF1ZV9hdXRvX3NlbmRcIikpIHtcbiAgICAgICAgICBjaW4uZmxhZ1VuaXF1ZUF1dG9TZW5kID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoXCIla2V5bmFtZSBiZWdpblwiKSkge1xuICAgICAgICAgIGNpbi5rZXluYW1lID0ge307XG4gICAgICAgICAgY2luID0gYXdhaXQgaGFuZGxlS2V5bmFtZVNlY3Rpb24ocmVhZGVyLCBjaW4pO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVxdWljayBiZWdpblwiKSkge1xuICAgICAgICAgIGNpbi51bndyaXR0ZW5RdWlja0xpc3QgPSBbXTtcbiAgICAgICAgICBjaW4gPSBhd2FpdCBoYW5kbGVRdWlja1NlY3Rpb24ocmVhZGVyLCBjaW4pO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVjaGFyZGVmIGJlZ2luXCIpKSB7XG4gICAgICAgICAgY2luLnVud3JpdHRlbkNoYXJEZWZMaXN0ID0gW107XG4gICAgICAgICAgY2luID0gYXdhaXQgaGFuZGxlQ2hhckRlZlNlY3Rpb24ocmVhZGVyLCBjaW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBoYW5kbGVTZWN0aW9uKHJlYWRlciwgY2luKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiB3cml0ZVRvREIoY2luOiBDaW4sIGRiTmFtZTogc3RyaW5nKTogUHJvbWlzZTxDaW4+IHtcbiAgLy8gT3BlbiBkYXRhYmFzZSBmaXJzdFxuICBsZXQgZGI6IElEQkRhdGFiYXNlID0gYXdhaXQgbmV3IFByb21pc2U8SURCRGF0YWJhc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgb3BlblJlcTogSURCT3BlbkRCUmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSk7XG4gICAgb3BlblJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJlc29sdmUob3BlblJlcS5yZXN1bHQgYXMgSURCRGF0YWJhc2UpO1xuICAgIH07XG4gICAgb3BlblJlcS5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIFRPRE8gb25seSBjcmVhdGUgc3RvcmUgd2hlbiBpdCBpcyBub3QgY3JlYXRlZC5cbiAgICAgIC8vIFRPRE8gbWF5IG5lZWQgdG8gY2hlY2sgdmVyc2lvbiBmb3IgZnVydGhlciB1cGRhdGVzLlxuICAgICAgY29uc3QgZGI6IElEQkRhdGFiYXNlID0gb3BlblJlcS5yZXN1bHQ7XG4gICAgICBsZXQgb2JqUzogSURCT2JqZWN0U3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZShcInNldHRpbmdzXCIsIHtcbiAgICAgICAga2V5UGF0aDogXCJuYW1lXCIsXG4gICAgICB9KTtcbiAgICAgIG9ialMgPSBkYi5jcmVhdGVPYmplY3RTdG9yZShcImtleW5hbWVcIiwgeyBrZXlQYXRoOiBcImtleVwiIH0pO1xuICAgICAgb2JqUyA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKFwicXVpY2tcIiwgeyBrZXlQYXRoOiBcImtleWNvZGVcIiB9KTtcbiAgICAgIG9ialMgPSBkYi5jcmVhdGVPYmplY3RTdG9yZShcImNoYXJkZWZcIiwgeyBhdXRvSW5jcmVtZW50OiB0cnVlIH0pO1xuICAgICAgb2JqUy5jcmVhdGVJbmRleChcImtleWNvZGVcIiwgXCJrZXljb2RlXCIsIHsgdW5pcXVlOiBmYWxzZSB9KTtcbiAgICB9O1xuICAgIG9wZW5SZXEub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlamVjdChgQ2Fubm90IG9wZW4gSW5kZXhlZERCIGZvciB0aGUgZmlsZSAke2RiTmFtZX1gKTtcbiAgICB9O1xuICB9KTtcblxuICBjaW4uZGIgPSBkYjtcbiAgY2luLmRiTmFtZSA9IGRiTmFtZTtcblxuICAvLyB0cnVuYyB0YWJsZXMgaWYgdGhleSBleGlzdFxuICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgbGV0IHRyYW5zYWN0aW9uOiBJREJUcmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKFxuICAgICAgW1wic2V0dGluZ3NcIiwgXCJrZXluYW1lXCIsIFwicXVpY2tcIiwgXCJjaGFyZGVmXCJdLFxuICAgICAgXCJyZWFkd3JpdGVcIlxuICAgICk7XG4gICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoXCJzZXR0aW5nc1wiKS5jbGVhcigpO1xuICAgIHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKFwia2V5bmFtZVwiKS5jbGVhcigpO1xuICAgIHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKFwicXVpY2tcIikuY2xlYXIoKTtcbiAgICB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShcImNoYXJkZWZcIikuY2xlYXIoKTtcbiAgICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH07XG4gICAgdHJhbnNhY3Rpb24ub25lcnJvciA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgIHJlamVjdChcIkVycm9yIHdoZW4gY2xlYXJpbmcgb2xkIGRhdGEuLi5cIik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gd3JpdGUgdG8gZGJcbiAgLy8gMS4gd3JpdGUgc2V0dGluZ3NcbiAgbGV0IHByb21pc2VTZXR0aW5ncyA9IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgdHJhbnNhY3Rpb246IElEQlRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oXCJzZXR0aW5nc1wiLCBcInJlYWR3cml0ZVwiKTtcbiAgICB0cmFuc2FjdGlvblxuICAgICAgLm9iamVjdFN0b3JlKFwic2V0dGluZ3NcIilcbiAgICAgIC5hZGQoeyBuYW1lOiBcIiVlbmFtZVwiLCB2YWx1ZTogY2luLmVuYW1lIH0pO1xuICAgIHRyYW5zYWN0aW9uXG4gICAgICAub2JqZWN0U3RvcmUoXCJzZXR0aW5nc1wiKVxuICAgICAgLmFkZCh7IG5hbWU6IFwiJWNuYW1lXCIsIHZhbHVlOiBjaW4uY25hbWUgfSk7XG4gICAgdHJhbnNhY3Rpb25cbiAgICAgIC5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpXG4gICAgICAuYWRkKHsgbmFtZTogXCIlcHJvbXB0XCIsIHZhbHVlOiBjaW4ucHJvbXB0IH0pO1xuICAgIHRyYW5zYWN0aW9uXG4gICAgICAub2JqZWN0U3RvcmUoXCJzZXR0aW5nc1wiKVxuICAgICAgLmFkZCh7IG5hbWU6IFwiJXNlbGtleVwiLCB2YWx1ZTogY2luLnNlbGtleSB9KTtcbiAgICB0cmFuc2FjdGlvblxuICAgICAgLm9iamVjdFN0b3JlKFwic2V0dGluZ3NcIilcbiAgICAgIC5hZGQoeyBuYW1lOiBcIiVkdXBzZWxcIiwgdmFsdWU6IGNpbi5kdXBzZWwgfSk7XG4gICAgdHJhbnNhY3Rpb25cbiAgICAgIC5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpXG4gICAgICAuYWRkKHsgbmFtZTogXCIlZW5ka2V5XCIsIHZhbHVlOiBjaW4uZW5ka2V5IH0pO1xuICAgIHRyYW5zYWN0aW9uXG4gICAgICAub2JqZWN0U3RvcmUoXCJzZXR0aW5nc1wiKVxuICAgICAgLmFkZCh7IG5hbWU6IFwiJXNwYWNlX3N0eWxlXCIsIHZhbHVlOiBjaW4uc3BhY2VTdHlsZSB9KTtcbiAgICB0cmFuc2FjdGlvblxuICAgICAgLm9iamVjdFN0b3JlKFwic2V0dGluZ3NcIilcbiAgICAgIC5hZGQoeyBuYW1lOiBcIiVrZWVwX2tleV9jYXNlXCIsIHZhbHVlOiBjaW4ua2VlcEtleUNhc2UgfSk7XG4gICAgdHJhbnNhY3Rpb25cbiAgICAgIC5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpXG4gICAgICAuYWRkKHsgbmFtZTogXCIlc3ltYm9sX2tibVwiLCB2YWx1ZTogY2luLnN5bWJvbEtibSB9KTtcbiAgICB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpLmFkZCh7XG4gICAgICBuYW1lOiBcIiVwaGFzZV9hdXRvX3NraXBfZW5ka2V5XCIsXG4gICAgICB2YWx1ZTogY2luLnBoYXNlQXV0b1NraXBFbmRLZXksXG4gICAgfSk7XG4gICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoXCJzZXR0aW5nc1wiKS5hZGQoe1xuICAgICAgbmFtZTogXCIlZmxhZ19hdXRvX3NlbGVjdF9ieV9waHJhc2VcIixcbiAgICAgIHZhbHVlOiBjaW4uZmxhZ0F1dG9TZWxlY3RCeVBoYXNlLFxuICAgIH0pO1xuICAgIHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKFwic2V0dGluZ3NcIikuYWRkKHtcbiAgICAgIG5hbWU6IFwiJWZsYWdfZGlzcF9wYXJ0aWFsX21hdGNoXCIsXG4gICAgICB2YWx1ZTogY2luLmZsYWdEaXNwUGFydGlhbE1hdGNoLFxuICAgIH0pO1xuICAgIHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKFwic2V0dGluZ3NcIikuYWRkKHtcbiAgICAgIG5hbWU6IFwiJWZsYWdfZGlzcF9mdWxsX21hdGNoXCIsXG4gICAgICB2YWx1ZTogY2luLmZsYWdEaXNwRnVsbE1hdGNoLFxuICAgIH0pO1xuICAgIHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKFwic2V0dGluZ3NcIikuYWRkKHtcbiAgICAgIG5hbWU6IFwiJWZsYWdfdmVydGljYWxfc2VsZWN0aW9uXCIsXG4gICAgICB2YWx1ZTogY2luLmZsYWdWZXJ0aWNhbFNlbGVjdGlvbixcbiAgICB9KTtcbiAgICB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpLmFkZCh7XG4gICAgICBuYW1lOiBcIiVmbGFnX3ByZXNzX2Z1bGxfYXV0b19zZW5kXCIsXG4gICAgICB2YWx1ZTogY2luLmZsYWdQcmVzc0Z1bGxBdXRvU2VuZCxcbiAgICB9KTtcbiAgICB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpLmFkZCh7XG4gICAgICBuYW1lOiBcIiVmbGFnX3VuaXF1ZV9hdXRvX3NlbmRcIixcbiAgICAgIHZhbHVlOiBjaW4uZmxhZ1VuaXF1ZUF1dG9TZW5kLFxuICAgIH0pO1xuICAgIHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfTtcbiAgICB0cmFuc2FjdGlvbi5vbmVycm9yID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgcmVqZWN0KFwiQ2Fubm90IGhhbmRsZSBzZXR0aW5ncy4uLlwiKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyAyLiB3cml0ZSBrZXluYW1lc1xuICBsZXQgcHJvbWlzZUtleW5hbWUgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKE9iamVjdC5rZXlzKGNpbi5rZXluYW1lKS5sZW5ndGggPT0gMCkge1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdHJhbnNhY3Rpb246IElEQlRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oXCJrZXluYW1lXCIsIFwicmVhZHdyaXRlXCIpO1xuICAgICAgZm9yIChsZXQga2V5IGluIGNpbi5rZXluYW1lKSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKFwia2V5bmFtZVwiKS5hZGQoe1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICBrZXluYW1lOiBjaW4ua2V5bmFtZVtrZXldLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICB0cmFuc2FjdGlvbi5vbmVycm9yID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICByZWplY3QoXCJDYW5ub3QgaGFuZGxlIGtleW5hbWUgc2VjdGlvbi4uLlwiKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbiAgLy8gMy4gd3JpdGUgcXVpY2tcbiAgbGV0IHByb21pc2VRdWljayA9IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAoXG4gICAgICAhY2luLnVud3JpdHRlblF1aWNrTGlzdCB8fFxuICAgICAgKGNpbi51bndyaXR0ZW5RdWlja0xpc3QgYXMgUXVpY2tSZWNvcmRbXSkubGVuZ3RoID09IDBcbiAgICApIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRyYW5zYWN0aW9uOiBJREJUcmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKFwicXVpY2tcIiwgXCJyZWFkd3JpdGVcIik7XG4gICAgICBmb3IgKGxldCB2YWx1ZSBvZiBjaW4udW53cml0dGVuUXVpY2tMaXN0IGFzIFF1aWNrUmVjb3JkW10pIHtcbiAgICAgICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoXCJxdWlja1wiKS5hZGQodmFsdWUpO1xuICAgICAgfVxuICAgICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIHRyYW5zYWN0aW9uLm9uZXJyb3IgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgIHJlamVjdChcIkNhbm5vdCBoYW5kbGUgcXVpY2sgc2VjdGlvbi4uLlwiKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbiAgLy8gNC4gd3JpdGUgY2hhcmRlZlxuICBsZXQgcHJvbWlzZUNoYXJEZWYgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKFxuICAgICAgIWNpbi51bndyaXR0ZW5DaGFyRGVmTGlzdCB8fFxuICAgICAgKGNpbi51bndyaXR0ZW5DaGFyRGVmTGlzdCBhcyBDaGFyRGVmUmVjb3JkW10pLmxlbmd0aCA9PSAwXG4gICAgKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB0cmFuc2FjdGlvbjogSURCVHJhbnNhY3Rpb24gPSBkYi50cmFuc2FjdGlvbihcImNoYXJkZWZcIiwgXCJyZWFkd3JpdGVcIik7XG4gICAgICBmb3IgKGxldCB2YWx1ZSBvZiBjaW4udW53cml0dGVuQ2hhckRlZkxpc3QgYXMgQ2hhckRlZlJlY29yZFtdKSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKFwiY2hhcmRlZlwiKS5hZGQodmFsdWUpO1xuICAgICAgfVxuICAgICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIHRyYW5zYWN0aW9uLm9uZXJyb3IgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgIHJlamVjdChcIkNhbm5vdCBoYW5kbGUgY2hhcmRlZiBzZWN0aW9uLi4uXCIpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuICAvLyA1LiBjbGVhciBxdWljayBhbmQgY2hhcmRlZiBhcnJheXNcbiAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIHByb21pc2VTZXR0aW5ncyxcbiAgICBwcm9taXNlS2V5bmFtZSxcbiAgICBwcm9taXNlUXVpY2ssXG4gICAgcHJvbWlzZUNoYXJEZWYsXG4gIF0pO1xuICBkZWxldGUgY2luLnVud3JpdHRlblF1aWNrTGlzdDtcbiAgZGVsZXRlIGNpbi51bndyaXR0ZW5DaGFyRGVmTGlzdDtcbiAgcmV0dXJuIGNpbjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZEZyb21TdHJlYW0oXG4gIGNpbklEOiBzdHJpbmcsXG4gIHJlYWRTdHJlYW06IFJlYWRhYmxlU3RyZWFtXG4pOiBQcm9taXNlPENpbj4ge1xuICBjb25zdCBsaW5lUmVhZFN0cmVhbTogUmVhZGFibGVTdHJlYW0gPSByZWFkU3RyZWFtXG4gICAgLnBpcGVUaHJvdWdoKG5ldyBKU1RleHREZWNvZGVyU3RyZWFtKCkpXG4gICAgLnBpcGVUaHJvdWdoKG5ldyBKU0xpbmVTdHJlYW0oKSk7XG4gIGNvbnN0IHJlYWRlciA9IGxpbmVSZWFkU3RyZWFtLmdldFJlYWRlcigpIGFzIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcjtcblxuICBjb25zdCBkYk5hbWU6IHN0cmluZyA9IGBjaW5fJHtjaW5JRH1gOyAvLyBUT0RPOiB1c2UgVVJMIHJlc291cmNlIG5hbWUgYXMgZmlsZW5hbWUgZm9yIHhociBzdHJlYW1cblxuICBsZXQgY2luID0gbmV3IENpbigpO1xuICBjaW4uZHVwc2VsID0gLTE7IC8vIFVuc2V0IGR1cHNlbCBiZWZvcmUgcmVhZGluZyBkYXRhIGZyb20gY2luIGZpbGUuXG4gIGNpbiA9IGF3YWl0IGhhbmRsZVNlY3Rpb24ocmVhZGVyLCBjaW4pO1xuICBjaW4gPSBhd2FpdCB3cml0ZVRvREIoY2luLCBkYk5hbWUpO1xuICByZXR1cm4gY2luO1xufVxuXG5leHBvcnQgeyBsb2FkRnJvbVN0cmVhbSB9O1xuIiwiaW1wb3J0IHsgQ2luIH0gZnJvbSBcIi4vY2luXCI7XG5pbXBvcnQgeyBsb2FkRnJvbVN0cmVhbSB9IGZyb20gXCIuL2NpbmxvYWRlclwiO1xuXG5pZiAoXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnRuX2xvYWRcIikgJiZcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsYmxfYnRuX2xvYWRcIikgJiZcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsYmxfY29tcG9zaW5nX3RleHRcIikgJiZcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsYmxfY2FuZGlkYXRlXCIpICYmXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGFfY2lub3RlcGFkXCIpICYmXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2hlY2tib3hfZW5hYmxlXCIpICYmXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGJsX2ltX25hbWVcIilcbikge1xuICBjb25zdCBidG5Mb2FkRWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidG5fbG9hZFwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICBjb25zdCBsYmxCdG5Mb2FkRWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsYmxfYnRuX2xvYWRcIikgYXMgSFRNTEVsZW1lbnQ7XG4gIGNvbnN0IGxibENvbXBvc2luZ1RleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcbiAgICBcImxibF9jb21wb3NpbmdfdGV4dFwiXG4gICkgYXMgSFRNTEVsZW1lbnQ7XG4gIGNvbnN0IGxibENhbmRpZGF0ZUVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxuICAgIFwibGJsX2NhbmRpZGF0ZVwiXG4gICkgYXMgSFRNTEVsZW1lbnQ7XG4gIGNvbnN0IHRleHRBcmVhQ2lub3RlcGFkRWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgXCJ0YV9jaW5vdGVwYWRcIlxuICApIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG4gIGNvbnN0IGNoZWNrYm94RW5hYmxlRWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgXCJjaGVja2JveF9lbmFibGVcIlxuICApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gIGNvbnN0IGxibElNTmFtZUVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibGJsX2ltX25hbWVcIikgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgYnRuTG9hZEVsZS5vbmNoYW5nZSA9IChlOiBFdmVudCkgPT4ge1xuICAgIGlmIChidG5Mb2FkRWxlLmZpbGVzKSB7XG4gICAgICBjb25zdCBmaWxlcyA9IGJ0bkxvYWRFbGUuZmlsZXMgYXMgRmlsZUxpc3Q7XG5cbiAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxibEJ0bkxvYWRFbGUudGV4dENvbnRlbnQgPSBcIuS4iuWCs+S4reKAplwiO1xuICAgICAgICBidG5Mb2FkRWxlLmRpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCBjaW5GaWxlOiBGaWxlID0gZmlsZXNbMF07XG4gICAgICAgIGNvbnN0IGZpbGVSZWFkU3RyZWFtOiBSZWFkYWJsZVN0cmVhbSA9IGNpbkZpbGUuc3RyZWFtKCk7XG5cbiAgICAgICAgbG9hZEZyb21TdHJlYW0oY2luRmlsZS5uYW1lLCBmaWxlUmVhZFN0cmVhbSlcbiAgICAgICAgICAudGhlbigoY2luKSA9PiB7XG4gICAgICAgICAgICBsYmxCdG5Mb2FkRWxlLnRleHRDb250ZW50ID0gXCLlrozmiJBcIjtcblxuICAgICAgICAgICAgY2luLm9uS2V5bmFtZXNDaGFuZ2UgPSBmdW5jdGlvbiAoa2V5bmFtZXM6IHN0cmluZykge1xuICAgICAgICAgICAgICBsYmxDb21wb3NpbmdUZXh0LnRleHRDb250ZW50ID0ga2V5bmFtZXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY2luLm9uQ3VycmVudENhbmRpZGF0ZXNDaGFuZ2UgPSBmdW5jdGlvbiAoY2FuZGlkYXRlczogc3RyaW5nW10pIHtcbiAgICAgICAgICAgICAgLy8gVE9ETzogbWF5IGhhdmUgc2VjdXJpdHkgcHJvYmxlbS4gSFRNTCBzY3JpcHQgaW5qZWN0aW9uXG4gICAgICAgICAgICAgIGxldCBpbm5lckhUTUw6IHN0cmluZyA9IFwiXCI7XG4gICAgICAgICAgICAgIGxldCBzZWxlY3RJbmRleDogbnVtYmVyO1xuICAgICAgICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgY2FuZGlkYXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHNlbGVjdEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpZiAoY2luLnNwYWNlU3R5bGUgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgc2VsZWN0SW5kZXgtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5uZXJIVE1MICs9XG4gICAgICAgICAgICAgICAgICBgPHNwYW4gc3R5bGU9XCJkaXNwbGF5OmlubGluZS1ibG9jazsgd2lkdGg6MWVtOyB0ZXh0LWFsaWduOnJpZ2h0O1wiPmAgK1xuICAgICAgICAgICAgICAgICAgYCR7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdEluZGV4IDwgMCA/IFwiIFwiIDogY2luLnNlbGtleS5jaGFyQXQoc2VsZWN0SW5kZXgpXG4gICAgICAgICAgICAgICAgICB9PC9zcGFuPjxzcGFuPiR7Y2FuZGlkYXRlc1tpXX08L3NwYW4+YDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYmxDYW5kaWRhdGVFbGUuaW5uZXJIVE1MID0gaW5uZXJIVE1MO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNpbi5vbkNvbW1pdCA9IGZ1bmN0aW9uICh0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgICAgICAgY29uc3QgbmV3U2VsZWN0aW9uUG9zOiBudW1iZXIgPVxuICAgICAgICAgICAgICAgIHRleHRBcmVhQ2lub3RlcGFkRWxlLnNlbGVjdGlvblN0YXJ0ICsgdGV4dC5sZW5ndGg7XG4gICAgICAgICAgICAgIGNvbnN0IGxlZnRUZXh0OiBzdHJpbmcgPSB0ZXh0QXJlYUNpbm90ZXBhZEVsZS52YWx1ZS5zdWJzdHJpbmcoXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICB0ZXh0QXJlYUNpbm90ZXBhZEVsZS5zZWxlY3Rpb25TdGFydFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBjb25zdCByaWdodFRleHQ6IHN0cmluZyA9IHRleHRBcmVhQ2lub3RlcGFkRWxlLnZhbHVlLnN1YnN0cmluZyhcbiAgICAgICAgICAgICAgICB0ZXh0QXJlYUNpbm90ZXBhZEVsZS5zZWxlY3Rpb25FbmRcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgdGV4dEFyZWFDaW5vdGVwYWRFbGUudmFsdWUgPSBsZWZ0VGV4dCArIHRleHQgKyByaWdodFRleHQ7XG4gICAgICAgICAgICAgIHRleHRBcmVhQ2lub3RlcGFkRWxlLnNldFNlbGVjdGlvblJhbmdlKFxuICAgICAgICAgICAgICAgIG5ld1NlbGVjdGlvblBvcyxcbiAgICAgICAgICAgICAgICBuZXdTZWxlY3Rpb25Qb3NcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxibElNTmFtZUVsZS50ZXh0Q29udGVudCA9IGNpbi5jbmFtZSArIFwiIFwiO1xuXG4gICAgICAgICAgICB0ZXh0QXJlYUNpbm90ZXBhZEVsZS5vbmJlZm9yZWlucHV0ID0gZnVuY3Rpb24gKGU6IElucHV0RXZlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKGUuaW5wdXRUeXBlID09IFwiaW5zZXJ0VGV4dFwiKSB7XG4gICAgICAgICAgICAgICAgY2luLnB1c2hLZXkoZS5kYXRhIGFzIHN0cmluZyk7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUuaW5wdXRUeXBlID09IFwiZGVsZXRlQ29udGVudEJhY2t3YXJkXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2luLmRlbGV0ZUNvbnRlbnRCYWNrd2FyZCgpKSB7XG4gICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGV4dEFyZWFDaW5vdGVwYWRFbGUub25rZXlkb3duID0gZnVuY3Rpb24gKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKGUua2V5ID09IFwiRXNjYXBlXCIpIHtcbiAgICAgICAgICAgICAgICBjaW4ucmVzZXRLZXlzKCk7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5ID09IFwiUGFnZVVwXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2luLnByZXZpb3VzQ2FuZGlkYXRlTGlzdCgpKSB7XG4gICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5ID09IFwiUGFnZURvd25cIikge1xuICAgICAgICAgICAgICAgIGlmIChjaW4ubmV4dENhbmRpZGF0ZUxpc3QoKSkge1xuICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY2luLmVuYWJsZSA9IGNoZWNrYm94RW5hYmxlRWxlLmNoZWNrZWQ7XG4gICAgICAgICAgICBjaGVja2JveEVuYWJsZUVsZS5vbmNoYW5nZSA9IGZ1bmN0aW9uIChlOiBFdmVudCkge1xuICAgICAgICAgICAgICBjaW4uZW5hYmxlID0gY2hlY2tib3hFbmFibGVFbGUuY2hlY2tlZDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycm9yOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgYnRuTG9hZEVsZS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIGNvbnNvbGUuZXJyb3IoXCJTb21lIG9mIEhUTUwgZWxlbWVudHMgYXJlIG5vdCBhdmFpbGFibGUuXCIpO1xufVxuIl0sIm5hbWVzIjpbInRkcyIsInN0YXJ0IiwidGhpcyIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsImVuY29kaW5nIiwib3B0aW9ucyIsInRyYW5zZm9ybSIsImNodW5rIiwiY29udHJvbGxlciIsImVucXVldWUiLCJkZWNvZGUiLCJzdHJlYW0iLCJKU1RleHREZWNvZGVyU3RyZWFtIiwiVHJhbnNmb3JtU3RyZWFtIiwidCIsInN1cGVyIiwiZmF0YWwiLCJpZ25vcmVCT00iLCJscyIsImVuZEluZGV4Iiwic3RhcnRJbmRleCIsImluZGV4T2YiLCJsaW5lIiwic3Vic3RyaW5nIiwicmVwbGFjZSIsIlJlZ0V4cCIsImxlbmd0aCIsInJlbWFpbkNodW5rIiwiZmx1c2giLCJKU0xpbmVTdHJlYW0iLCJTdGF0dXMiLCJDaW4iLCJrZXluYW1lIiwiY2FuZGlkYXRlTGlzdCIsImN1cnJlbnRQYWdlIiwibWF4TnVtT2ZLZXlzIiwiZW5hbWUiLCJjbmFtZSIsInByb21wdCIsInNlbGtleSIsImR1cHNlbCIsImVuZGtleSIsInNwYWNlU3R5bGUiLCJrZWVwS2V5Q2FzZSIsInN5bWJvbEtibSIsInBoYXNlQXV0b1NraXBFbmRLZXkiLCJmbGFnQXV0b1NlbGVjdEJ5UGhhc2UiLCJmbGFnRGlzcFBhcnRpYWxNYXRjaCIsImZsYWdEaXNwRnVsbE1hdGNoIiwiZmxhZ1ZlcnRpY2FsU2VsZWN0aW9uIiwiZmxhZ1ByZXNzRnVsbEF1dG9TZW5kIiwiZmxhZ1VuaXF1ZUF1dG9TZW5kIiwiX2VuYWJsZSIsIl9zdGF0dXMiLCJJTlBVVCIsIl9rZXlzIiwiZW5hYmxlIiwidiIsInJlc2V0S2V5cyIsInRvdGFsUGFnZSIsImxpc3RTaXplIiwiTWF0aCIsImNlaWwiLCJjdXJyZW50Q2FuZGlkYXRlTGlzdCIsInNsaWNlIiwibWluIiwiX2ZpcmVDYW5kaWRhdGVDaGFuZ2UiLCJvbkN1cnJlbnRDYW5kaWRhdGVzQ2hhbmdlIiwib25DYW5kaWRhdGVzQ2hhbmdlIiwib25LZXluYW1lc0NoYW5nZSIsImRlbGV0ZUNvbnRlbnRCYWNrd2FyZCIsInRoZUxhc3RLZXkiLCJjaGFyQXQiLCJwdXNoS2V5IiwiU0VMRUNUIiwia2V5IiwiY2luIiwiY29tbWl0VGV4dCIsInRleHQiLCJvbkNvbW1pdCIsImRiIiwiY29uc29sZSIsImxvZyIsInRyYW5zYWN0aW9uIiwiaXNTcGFjZSIsImlzRW5kS2V5IiwiaXNTZWxLZXkiLCJpc0tleW5hbWUiLCJnZXRDYW5kaWRhdGVzRnJvbUNoYXJkZWYiLCJrZXlzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvYmplY3RTdG9yZSIsImluZGV4Iiwib3BlbkN1cnNvciIsIklEQktleVJhbmdlIiwib25seSIsIm9uc3VjY2VzcyIsImV2ZW50IiwiY3Vyc29yIiwidGFyZ2V0IiwicmVzdWx0IiwicHVzaCIsInZhbHVlIiwiY2FuZGlkYXRlIiwiY29udGludWUiLCJvcmlnaW5hbEtleXMiLCJvcmlnaW5hbENhbmRpZGF0ZUxpc3QiLCJxdWlja0NhbmRpZGF0ZUxpc3QiLCJjaGFyZGVmQ2FuZGlkYXRlTGlzdCIsImdldCIsImNhbmRpZGF0ZXNTdHIiLCJjYW5kaWRhdGVzIiwiY29uY2F0Iiwic3BsaXQiLCJnZXRDYW5kaWRhdGVzRnJvbVF1aWNrIiwibWFwIiwiam9pbiIsIm9uRW5kS2V5Iiwic2VsZWN0SW5kZXgiLCJuZXh0Q2FuZGlkYXRlTGlzdCIsInByZXZpb3VzQ2FuZGlkYXRlTGlzdCIsImtleW5hbWVzIiwiaW5kZXhPZldoaXRlU3BhY2UiLCJ3c3BJZHgiLCJzcElkeCIsInRhYklkeCIsImhhbmRsZUtleW5hbWVTZWN0aW9uIiwicmVhZGVyIiwiZG9uZSIsInJlYWQiLCJzdGFydHNXaXRoIiwid2hpdGVzcGFjZUluZGV4IiwidHJpbSIsImhhbmRsZVF1aWNrU2VjdGlvbiIsImtleWNvZGUiLCJ1bndyaXR0ZW5RdWlja0xpc3QiLCJtYXgiLCJoYW5kbGVDaGFyRGVmU2VjdGlvbiIsInVud3JpdHRlbkNoYXJEZWZMaXN0IiwiaGFuZGxlU2VjdGlvbiIsImlzTmFOIiwib2xkS2V5bmFtZSIsInRvTG93ZXJDYXNlIiwiaSIsImhhbmRsZUNvbW1lbnQiLCJwYXJzZUludCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJidG5Mb2FkRWxlIiwibGJsQnRuTG9hZEVsZSIsImxibENvbXBvc2luZ1RleHQiLCJsYmxDYW5kaWRhdGVFbGUiLCJ0ZXh0QXJlYUNpbm90ZXBhZEVsZSIsImNoZWNrYm94RW5hYmxlRWxlIiwibGJsSU1OYW1lRWxlIiwib25jaGFuZ2UiLCJlIiwiZmlsZXMiLCJ0ZXh0Q29udGVudCIsImRpc2FibGVkIiwiY2luRmlsZSIsImZpbGVSZWFkU3RyZWFtIiwiY2luSUQiLCJyZWFkU3RyZWFtIiwicGlwZVRocm91Z2giLCJnZXRSZWFkZXIiLCJkYk5hbWUiLCJvcGVuUmVxIiwiaW5kZXhlZERCIiwib3BlbiIsIm9udXBncmFkZW5lZWRlZCIsIm9ialMiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJhdXRvSW5jcmVtZW50IiwiY3JlYXRlSW5kZXgiLCJ1bmlxdWUiLCJvbmVycm9yIiwiY2xlYXIiLCJvbmNvbXBsZXRlIiwicHJvbWlzZVNldHRpbmdzIiwiYWRkIiwibmFtZSIsInByb21pc2VLZXluYW1lIiwiT2JqZWN0IiwicHJvbWlzZVF1aWNrIiwicHJvbWlzZUNoYXJEZWYiLCJhbGwiLCJ3cml0ZVRvREIiLCJsb2FkRnJvbVN0cmVhbSIsInRoZW4iLCJpbm5lckhUTUwiLCJuZXdTZWxlY3Rpb25Qb3MiLCJzZWxlY3Rpb25TdGFydCIsImxlZnRUZXh0IiwicmlnaHRUZXh0Iiwic2VsZWN0aW9uRW5kIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJvbmJlZm9yZWlucHV0IiwiaW5wdXRUeXBlIiwiZGF0YSIsInByZXZlbnREZWZhdWx0Iiwib25rZXlkb3duIiwiY2hlY2tlZCIsImNhdGNoIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9