/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={37:e=>{!function(){var t=["direction","boxSizing","width","height","overflowX","overflowY","borderTopWidth","borderRightWidth","borderBottomWidth","borderLeftWidth","borderStyle","paddingTop","paddingRight","paddingBottom","paddingLeft","fontStyle","fontVariant","fontWeight","fontStretch","fontSize","fontSizeAdjust","lineHeight","fontFamily","textAlign","textTransform","textIndent","textDecoration","letterSpacing","wordSpacing","tabSize","MozTabSize"],n="undefined"!=typeof window,r=n&&null!=window.mozInnerScreenX;function o(e,o,i){if(!n)throw new Error("textarea-caret-position#getCaretCoordinates should only be called in a browser");var a=i&&i.debug||!1;if(a){var l=document.querySelector("#input-textarea-caret-position-mirror-div");l&&l.parentNode.removeChild(l)}var c=document.createElement("div");c.id="input-textarea-caret-position-mirror-div",document.body.appendChild(c);var s=c.style,d=window.getComputedStyle?window.getComputedStyle(e):e.currentStyle,u="INPUT"===e.nodeName;s.whiteSpace="pre-wrap",u||(s.wordWrap="break-word"),s.position="absolute",a||(s.visibility="hidden"),t.forEach(function(e){u&&"lineHeight"===e?s.lineHeight=d.height:s[e]=d[e]}),r?e.scrollHeight>parseInt(d.height)&&(s.overflowY="scroll"):s.overflow="hidden",c.textContent=e.value.substring(0,o),u&&(c.textContent=c.textContent.replace(/\s/g,"Â "));var _=document.createElement("span");_.textContent=e.value.substring(o)||".",c.appendChild(_);var p={top:_.offsetTop+parseInt(d.borderTopWidth),left:_.offsetLeft+parseInt(d.borderLeftWidth),height:parseInt(d.lineHeight)};return a?_.style.backgroundColor="#aaa":document.body.removeChild(c),p}void 0!==e.exports?e.exports=o:n&&(window.getCaretCoordinates=o)}()},88:(e,t,n)=>{"use strict";e.exports=n(147)("undefined"!=typeof window?window:null)},147:(e,t,n)=>{"use strict";var r=n(165),o=n(788),i=o.delayedRemoval,a=o.domFor;e.exports=function(){var e,t,n={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"};function o(e){return e.ownerDocument}function l(e){return e.attrs&&e.attrs.xmlns||n[e.tag]}function c(e,t){if(e.state!==t)throw new Error("'vnode.state' must not be modified.")}function s(e){var t=e.state;try{return this.apply(t,arguments)}finally{c(e,t)}}function d(e){try{return o(e).activeElement}catch(e){return null}}function u(e,t,n,r,o,i,a){for(var l=n;l<r;l++){var c=t[l];null!=c&&_(e,c,o,a,i)}}function _(e,t,n,i,a){var c=t.tag;if("string"==typeof c)switch(t.state={},null!=t.attrs&&D(t.attrs,t,n),c){case"#":!function(e,t,n){t.dom=o(e).createTextNode(t.children),w(e,t.dom,n)}(e,t,a);break;case"<":f(e,t,i,a);break;case"[":!function(e,t,n,r,i){var a=o(e).createDocumentFragment();if(null!=t.children){var l=t.children;u(a,l,0,l.length,n,null,r)}t.dom=a.firstChild,t.domSize=a.childNodes.length,w(e,a,i)}(e,t,n,i,a);break;default:!function(e,t,n,r,i){var a=t.tag,c=t.attrs,s=t.is,d=(r=l(t)||r)?s?o(e).createElementNS(r,a,{is:s}):o(e).createElementNS(r,a):s?o(e).createElement(a,{is:s}):o(e).createElement(a);if(t.dom=d,null!=c&&function(e,t,n){for(var r in t)T(e,r,null,t[r],n)}(t,c,r),w(e,d,i),!k(t)&&null!=t.children){var _=t.children;u(d,_,0,_.length,n,null,r),"select"===t.tag&&null!=c&&function(e,t){if("value"in t)if(null===t.value)-1!==e.dom.selectedIndex&&(e.dom.value=null);else{var n=""+t.value;e.dom.value===n&&-1!==e.dom.selectedIndex||(e.dom.value=n)}"selectedIndex"in t&&T(e,"selectedIndex",null,t.selectedIndex,void 0)}(t,c)}}(e,t,n,i,a)}else!function(e,t,n,o,i){(function(e,t){var n;if("function"==typeof e.tag.view){if(e.state=Object.create(e.tag),null!=(n=e.state.view).$$reentrantLock$$)return;n.$$reentrantLock$$=!0}else{if(e.state=void 0,null!=(n=e.tag).$$reentrantLock$$)return;n.$$reentrantLock$$=!0,e.state=null!=e.tag.prototype&&"function"==typeof e.tag.prototype.view?new e.tag(e):e.tag(e)}if(D(e.state,e,t),null!=e.attrs&&D(e.attrs,e,t),e.instance=r.normalize(s.call(e.state.view,e)),e.instance===e)throw Error("A view cannot return the vnode it received as argument");n.$$reentrantLock$$=null})(t,n),null!=t.instance?(_(e,t.instance,n,o,i),t.dom=t.instance.dom,t.domSize=null!=t.dom?t.instance.domSize:0):t.domSize=0}(e,t,n,i,a)}var p={caption:"table",thead:"table",tbody:"table",tfoot:"table",tr:"tbody",th:"tr",td:"tr",colgroup:"table",col:"colgroup"};function f(e,t,n,r){var i=t.children.match(/^\s*?<(\w+)/im)||[],a=o(e).createElement(p[i[1]]||"div");"http://www.w3.org/2000/svg"===n?(a.innerHTML='<svg xmlns="http://www.w3.org/2000/svg">'+t.children+"</svg>",a=a.firstChild):a.innerHTML=t.children,t.dom=a.firstChild,t.domSize=a.childNodes.length;for(var l,c=o(e).createDocumentFragment();l=a.firstChild;)c.appendChild(l);w(e,c,r)}function h(e,t,n,r,o,i){if(t!==n&&(null!=t||null!=n))if(null==t||0===t.length)u(e,n,0,n.length,r,o,i);else if(null==n||0===n.length)O(e,t,0,t.length);else{var a=null!=t[0]&&null!=t[0].key,l=null!=n[0]&&null!=n[0].key,c=0,s=0;if(!a)for(;s<t.length&&null==t[s];)s++;if(!l)for(;c<n.length&&null==n[c];)c++;if(a!==l)O(e,t,s,t.length),u(e,n,c,n.length,r,o,i);else if(l){for(var d,p,f,h,m,w=t.length-1,k=n.length-1;w>=s&&k>=c&&(f=t[w],h=n[k],f.key===h.key);)f!==h&&g(e,f,h,r,o,i),null!=h.dom&&(o=h.dom),w--,k--;for(;w>=s&&k>=c&&(d=t[s],p=n[c],d.key===p.key);)s++,c++,d!==p&&g(e,d,p,r,y(t,s,o),i);for(;w>=s&&k>=c&&c!==k&&d.key===h.key&&f.key===p.key;)x(e,f,m=y(t,s,o)),f!==p&&g(e,f,p,r,m,i),++c<=--k&&x(e,d,o),d!==h&&g(e,d,h,r,o,i),null!=h.dom&&(o=h.dom),s++,f=t[--w],h=n[k],d=t[s],p=n[c];for(;w>=s&&k>=c&&f.key===h.key;)f!==h&&g(e,f,h,r,o,i),null!=h.dom&&(o=h.dom),k--,f=t[--w],h=n[k];if(c>k)O(e,t,s,w+1);else if(s>w)u(e,n,c,k+1,r,o,i);else{var S,j,z=o,P=k-c+1,T=new Array(P),R=0,E=0,L=2147483647,I=0;for(E=0;E<P;E++)T[E]=-1;for(E=k;E>=c;E--){null==S&&(S=b(t,s,w+1));var N=S[(h=n[E]).key];null!=N&&(L=N<L?N:-1,T[E-c]=N,f=t[N],t[N]=null,f!==h&&g(e,f,h,r,o,i),null!=h.dom&&(o=h.dom),I++)}if(o=z,I!==w-s+1&&O(e,t,s,w+1),0===I)u(e,n,c,k+1,r,o,i);else if(-1===L)for(j=function(e){var t=[0],n=0,r=0,o=0,i=v.length=e.length;for(o=0;o<i;o++)v[o]=e[o];for(o=0;o<i;++o)if(-1!==e[o]){var a=t[t.length-1];if(e[a]<e[o])v[o]=a,t.push(o);else{for(n=0,r=t.length-1;n<r;){var l=(n>>>1)+(r>>>1)+(n&r&1);e[t[l]]<e[o]?n=l+1:r=l}e[o]<e[t[n]]&&(n>0&&(v[o]=t[n-1]),t[n]=o)}}for(r=t[(n=t.length)-1];n-- >0;)t[n]=r,r=v[r];return v.length=0,t}(T),R=j.length-1,E=k;E>=c;E--)p=n[E],-1===T[E-c]?_(e,p,r,i,o):j[R]===E-c?R--:x(e,p,o),null!=p.dom&&(o=n[E].dom);else for(E=k;E>=c;E--)p=n[E],-1===T[E-c]&&_(e,p,r,i,o),null!=p.dom&&(o=n[E].dom)}}else{var F=t.length<n.length?t.length:n.length;for(c=c<s?c:s;c<F;c++)(d=t[c])===(p=n[c])||null==d&&null==p||(null==d?_(e,p,r,i,y(t,c+1,o)):null==p?C(e,d):g(e,d,p,r,y(t,c+1,o),i));t.length>F&&O(e,t,c,t.length),n.length>F&&u(e,n,c,n.length,r,o,i)}}}function g(e,t,n,o,i,a){var c=t.tag;if(c===n.tag&&t.is===n.is){if(n.state=t.state,n.events=t.events,function(e,t){do{var n;if(null!=e.attrs&&"function"==typeof e.attrs.onbeforeupdate&&void 0!==(n=s.call(e.attrs.onbeforeupdate,e,t))&&!n)break;if("string"!=typeof e.tag&&"function"==typeof e.state.onbeforeupdate&&void 0!==(n=s.call(e.state.onbeforeupdate,e,t))&&!n)break;return!1}while(0);return e.dom=t.dom,e.domSize=t.domSize,e.instance=t.instance,e.attrs=t.attrs,e.children=t.children,e.text=t.text,!0}(n,t))return;if("string"==typeof c)switch(null!=n.attrs&&A(n.attrs,n,o),c){case"#":!function(e,t){e.children.toString()!==t.children.toString()&&(e.dom.nodeValue=t.children),t.dom=e.dom}(t,n);break;case"<":!function(e,t,n,r,o){t.children!==n.children?(z(e,t),f(e,n,r,o)):(n.dom=t.dom,n.domSize=t.domSize)}(e,t,n,a,i);break;case"[":!function(e,t,n,r,o,i){h(e,t.children,n.children,r,o,i);var a=0,l=n.children;if(n.dom=null,null!=l){for(var c=0;c<l.length;c++){var s=l[c];null!=s&&null!=s.dom&&(null==n.dom&&(n.dom=s.dom),a+=s.domSize||1)}1!==a&&(n.domSize=a)}}(e,t,n,o,i,a);break;default:!function(e,t,n,r){var o=t.dom=e.dom;r=l(t)||r,function(e,t,n,r){var o;if(null!=t)for(var i in t===n&&console.warn("Don't reuse attrs object, use new object for every redraw, this will throw in next major"),t)null==(o=t[i])||null!=n&&null!=n[i]||R(e,i,o,r);if(null!=n)for(var i in n)T(e,i,t&&t[i],n[i],r)}(t,e.attrs,t.attrs,r),k(t)||h(o,e.children,t.children,n,null,r)}(t,n,o,a)}else!function(e,t,n,o,i,a){if(n.instance=r.normalize(s.call(n.state.view,n)),n.instance===n)throw Error("A view cannot return the vnode it received as argument");A(n.state,n,o),null!=n.attrs&&A(n.attrs,n,o),null!=n.instance?(null==t.instance?_(e,n.instance,o,a,i):g(e,t.instance,n.instance,o,i,a),n.dom=n.instance.dom,n.domSize=n.instance.domSize):null!=t.instance?(C(e,t.instance),n.dom=void 0,n.domSize=0):(n.dom=t.dom,n.domSize=t.domSize)}(e,t,n,o,i,a)}else C(e,t),_(e,n,o,a,i)}function b(e,t,n){for(var r=Object.create(null);t<n;t++){var o=e[t];if(null!=o){var i=o.key;null!=i&&(r[i]=t)}}return r}var m,v=[];function y(e,t,n){for(;t<e.length;t++)if(null!=e[t]&&null!=e[t].dom)return e[t].dom;return n}function x(e,t,n){if(null!=t.dom){var r;if(null==t.domSize)r=t.dom;else for(var i of(r=o(e).createDocumentFragment(),a(t)))r.appendChild(i);w(e,r,n)}}function w(e,t,n){null!=n?e.insertBefore(t,n):e.appendChild(t)}function k(e){if(null==e.attrs||null==e.attrs.contenteditable&&null==e.attrs.contentEditable)return!1;var t=e.children;if(null!=t&&1===t.length&&"<"===t[0].tag){var n=t[0].children;e.dom.innerHTML!==n&&(e.dom.innerHTML=n)}else if(null!=t&&0!==t.length)throw new Error("Child node of a contenteditable must be trusted.");return!0}function O(e,t,n,r){for(var o=n;o<r;o++){var i=t[o];null!=i&&C(e,i)}}function S(e,n,r,o){var l=n.state,d=s.call(r.onbeforeremove,n);if(null!=d){var u=t;for(var _ of a(n))i.set(_,u);o.v++,Promise.resolve(d).finally(function(){c(n,l),j(e,n,o)})}}function j(e,t,n){0===--n.v&&(P(t),z(e,t))}function C(e,t){var n={v:1};"string"!=typeof t.tag&&"function"==typeof t.state.onbeforeremove&&S(e,t,t.state,n),t.attrs&&"function"==typeof t.attrs.onbeforeremove&&S(e,t,t.attrs,n),j(e,t,n)}function z(e,t){if(null!=t.dom)if(null==t.domSize)e.removeChild(t.dom);else for(var n of a(t))e.removeChild(n)}function P(e){if("string"!=typeof e.tag&&"function"==typeof e.state.onremove&&s.call(e.state.onremove,e),e.attrs&&"function"==typeof e.attrs.onremove&&s.call(e.attrs.onremove,e),"string"!=typeof e.tag)null!=e.instance&&P(e.instance);else{null!=e.events&&(e.events._=null);var t=e.children;if(Array.isArray(t))for(var n=0;n<t.length;n++){var r=t[n];null!=r&&P(r)}}}function T(e,t,n,r,o){if("key"!==t&&null!=r&&!E(t)&&(n!==r||function(e,t){return"value"===t||"checked"===t||"selectedIndex"===t||"selected"===t&&(e.dom===d(e.dom)||"option"===e.tag&&e.dom.parentNode===d(e.dom))}(e,t)||"object"==typeof r)){if("o"===t[0]&&"n"===t[1])return F(e,t,r);if("xlink:"===t.slice(0,6))e.dom.setAttributeNS("http://www.w3.org/1999/xlink",t.slice(6),r);else if("style"===t)I(e.dom,n,r);else if(L(e,t,o)){if("value"===t){if(("input"===e.tag||"textarea"===e.tag)&&e.dom.value===""+r)return;if("select"===e.tag&&null!==n&&e.dom.value===""+r)return;if("option"===e.tag&&null!==n&&e.dom.value===""+r)return;if("input"===e.tag&&"file"===e.attrs.type&&""+r!="")return void console.error("`value` is read-only on file inputs!")}"input"===e.tag&&"type"===t?e.dom.setAttribute(t,r):e.dom[t]=r}else"boolean"==typeof r?r?e.dom.setAttribute(t,""):e.dom.removeAttribute(t):e.dom.setAttribute("className"===t?"class":t,r)}}function R(e,t,n,r){if("key"!==t&&null!=n&&!E(t))if("o"===t[0]&&"n"===t[1])F(e,t,void 0);else if("style"===t)I(e.dom,n,null);else if(!L(e,t,r)||"className"===t||"title"===t||"value"===t&&("option"===e.tag||"select"===e.tag&&-1===e.dom.selectedIndex&&e.dom===d(e.dom))||"input"===e.tag&&"type"===t){var o=t.indexOf(":");-1!==o&&(t=t.slice(o+1)),!1!==n&&e.dom.removeAttribute("className"===t?"class":t)}else e.dom[t]=null}function E(e){return"oninit"===e||"oncreate"===e||"onupdate"===e||"onremove"===e||"onbeforeremove"===e||"onbeforeupdate"===e}function L(e,t,n){return void 0===n&&(e.tag.indexOf("-")>-1||e.is||"href"!==t&&"list"!==t&&"form"!==t&&"width"!==t&&"height"!==t)&&t in e.dom}function I(e,t,n){if(t===n);else if(null==n)e.style="";else if("object"!=typeof n)e.style=n;else if(null==t||"object"!=typeof t)for(var r in e.style="",n)null!=(o=n[r])&&(r.includes("-")?e.style.setProperty(r,String(o)):e.style[r]=String(o));else{for(var r in t)null!=t[r]&&null==n[r]&&(r.includes("-")?e.style.removeProperty(r):e.style[r]="");for(var r in n){var o;null!=(o=n[r])&&(o=String(o))!==String(t[r])&&(r.includes("-")?e.style.setProperty(r,o):e.style[r]=o)}}}function N(){this._=e}function F(t,n,r){if(null!=t.events){if(t.events._=e,t.events[n]===r)return;null==r||"function"!=typeof r&&"object"!=typeof r?(null!=t.events[n]&&t.dom.removeEventListener(n.slice(2),t.events,!1),t.events[n]=void 0):(null==t.events[n]&&t.dom.addEventListener(n.slice(2),t.events,!1),t.events[n]=r)}else null==r||"function"!=typeof r&&"object"!=typeof r||(t.events=new N,t.dom.addEventListener(n.slice(2),t.events,!1),t.events[n]=r)}function D(e,t,n){"function"==typeof e.oninit&&s.call(e.oninit,t),"function"==typeof e.oncreate&&n.push(s.bind(e.oncreate,t))}function A(e,t,n){"function"==typeof e.onupdate&&n.push(s.bind(e.onupdate,t))}return N.prototype=Object.create(null),N.prototype.handleEvent=function(e){var t,n=this["on"+e.type];"function"==typeof n?t=n.call(e.currentTarget,e):"function"==typeof n.handleEvent&&n.handleEvent(e);var r=this;null!=r._&&(!1!==e.redraw&&(0,r._)(),null!=t&&"function"==typeof t.then&&Promise.resolve(t).then(function(){null!=r._&&!1!==e.redraw&&(0,r._)()})),!1===t&&(e.preventDefault(),e.stopPropagation())},function(n,o,i){if(!n)throw new TypeError("DOM element being rendered to does not exist.");if(null!=m&&n.contains(m))throw new TypeError("Node is currently being rendered to and thus is locked.");var a=e,l=m,c=[],s=d(n),u=n.namespaceURI;m=n,e="function"==typeof i?i:void 0,t={};try{null==n.vnodes&&(n.textContent=""),o=r.normalizeChildren(Array.isArray(o)?o:[o]),h(n,n.vnodes,o,c,null,"http://www.w3.org/1999/xhtml"===u?void 0:u),n.vnodes=o,null!=s&&d(n)!==s&&"function"==typeof s.focus&&s.focus();for(var _=0;_<c.length;_++)c[_]()}finally{e=a,m=l}}}},165:e=>{"use strict";function t(e,t,n,r,o,i){return{tag:e,key:t,attrs:n,children:r,text:o,dom:i,is:void 0,domSize:void 0,state:void 0,events:void 0,instance:void 0}}t.normalize=function(e){return Array.isArray(e)?t("[",void 0,void 0,t.normalizeChildren(e),void 0,void 0):null==e||"boolean"==typeof e?null:"object"==typeof e?e:t("#",void 0,void 0,String(e),void 0,void 0)},t.normalizeChildren=function(e){var n=[];if(e.length){for(var r=null!=e[0]&&null!=e[0].key,o=1;o<e.length;o++)if((null!=e[o]&&null!=e[o].key)!==r)throw new TypeError(!r||null==e[o]&&"boolean"!=typeof e[o]?"In fragments, vnodes must either all have keys or none have keys.":"In fragments, vnodes must either all have keys or none have keys. You may wish to consider using an explicit keyed empty fragment, m.fragment({key: ...}), instead of a hole.");for(o=0;o<e.length;o++)n[o]=t.normalize(e[o])}return n},e.exports=t},178:(e,t,n)=>{"use strict";var r=n(165);e.exports=function(){var e,t=arguments[this],n=this+1;if(null==t?t={}:("object"!=typeof t||null!=t.tag||Array.isArray(t))&&(t={},n=this),arguments.length===n+1)e=arguments[n],Array.isArray(e)||(e=[e]);else for(e=[];n<arguments.length;)e.push(arguments[n++]);return r("",t.key,t,e)}},199:(e,t,n)=>{"use strict";var r=n(88);e.exports=n(674)(r,"undefined"!=typeof requestAnimationFrame?requestAnimationFrame:null,"undefined"!=typeof console?console:null)},224:e=>{"use strict";e.exports=function(e){if("[object Object]"!==Object.prototype.toString.call(e))return"";var t=[];for(var n in e)r(n,e[n]);return t.join("&");function r(e,n){if(Array.isArray(n))for(var o=0;o<n.length;o++)r(e+"["+o+"]",n[o]);else if("[object Object]"===Object.prototype.toString.call(n))for(var o in n)r(e+"["+o+"]",n[o]);else t.push(encodeURIComponent(e)+(null!=n&&""!==n?"="+encodeURIComponent(n):""))}}},280:(e,t,n)=>{var r=n(862);e.exports=r.trust('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"/></svg>')},333:(e,t,n)=>{"use strict";var r=n(795),o=new RegExp("^(?:key|oninit|oncreate|onbeforeupdate|onupdate|onbeforeremove|onremove)$");e.exports=function(e,t){var n={};if(null!=t)for(var i in e)r.call(e,i)&&!o.test(i)&&t.indexOf(i)<0&&(n[i]=e[i]);else for(var i in e)r.call(e,i)&&!o.test(i)&&(n[i]=e[i]);return n}},389:(e,t,n)=>{"use strict";var r=n(555),o=n(795);e.exports=function(e,t){function n(e){return new Promise(e)}function i(e,t){for(var n in e.headers)if(o.call(e.headers,n)&&n.toLowerCase()===t)return!0;return!1}return n.prototype=Promise.prototype,n.__proto__=Promise,{request:function(a,l){"string"!=typeof a?(l=a,a=a.url):null==l&&(l={});var c=function(t,n){return new Promise(function(a,l){t=r(t,n.params);var c,s=null!=n.method?n.method.toUpperCase():"GET",d=n.body,u=(null==n.serialize||n.serialize===JSON.serialize)&&!(d instanceof e.FormData||d instanceof e.URLSearchParams),_=n.responseType||("function"==typeof n.extract?"":"json"),p=new e.XMLHttpRequest,f=!1,h=!1,g=p,b=p.abort;for(var m in p.abort=function(){f=!0,b.call(this)},p.open(s,t,!1!==n.async,"string"==typeof n.user?n.user:void 0,"string"==typeof n.password?n.password:void 0),u&&null!=d&&!i(n,"content-type")&&p.setRequestHeader("Content-Type","application/json; charset=utf-8"),"function"==typeof n.deserialize||i(n,"accept")||p.setRequestHeader("Accept","application/json, text/*"),n.withCredentials&&(p.withCredentials=n.withCredentials),n.timeout&&(p.timeout=n.timeout),p.responseType=_,n.headers)o.call(n.headers,m)&&p.setRequestHeader(m,n.headers[m]);p.onreadystatechange=function(e){if(!f&&4===e.target.readyState)try{var r,o=e.target.status>=200&&e.target.status<300||304===e.target.status||/^file:\/\//i.test(t),i=e.target.response;if("json"===_){if(!e.target.responseType&&"function"!=typeof n.extract)try{i=JSON.parse(e.target.responseText)}catch(e){i=null}}else _&&"text"!==_||null==i&&(i=e.target.responseText);if("function"==typeof n.extract?(i=n.extract(e.target,n),o=!0):"function"==typeof n.deserialize&&(i=n.deserialize(i)),o){if("function"==typeof n.type)if(Array.isArray(i))for(var c=0;c<i.length;c++)i[c]=new n.type(i[c]);else i=new n.type(i);a(i)}else{var s=function(){try{r=e.target.responseText}catch(e){r=i}var t=new Error(r);t.code=e.target.status,t.response=i,l(t)};0===p.status?setTimeout(function(){h||s()}):s()}}catch(e){l(e)}},p.ontimeout=function(e){h=!0;var t=new Error("Request timed out");t.code=e.target.status,l(t)},"function"==typeof n.config&&(p=n.config(p,n,t)||p)!==g&&(c=p.abort,p.abort=function(){f=!0,c.call(this)}),null==d?p.send():"function"==typeof n.serialize?p.send(n.serialize(d)):d instanceof e.FormData||d instanceof e.URLSearchParams?p.send(d):p.send(JSON.stringify(d))})}(a,l);if(!0===l.background)return c;var s=0;function d(){0===--s&&"function"==typeof t&&t()}return function e(t){var r=t.then;return t.constructor=n,t.then=function(){s++;var n=r.apply(t,arguments);return n.then(d,function(e){if(d(),0===s)throw e}),e(n)},t}(c)}}}},419:(e,t,n)=>{"use strict";var r=n(726);r.trust=n(665),r.fragment=n(995),e.exports=r},428:e=>{"use strict";var t=[],n={},r=n.toString,o=r.call(t),i=r.call(n),a=r.call(""),l=r.call(r),c=n.hasOwnProperty,s=Object.freeze||function(e){return e};function d(e,t){for(var n in t)c.call(t,n)&&n.indexOf("$")&&!(n in e)&&(e[n]=t[n]);return e}function u(e,t){var n,r,o=[];for(r in t)if(c.call(t,r))for(n in e)c.call(e,n)&&o.push(e[n]+t[r]);return o}var _=/[(),]|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g;function p(e){for(var t,n=[],r=[],o=0;t=_.exec(e);)switch(t[0]){case"(":o++;break;case")":o--;break;case",":if(o)break;n.push(t.index)}for(t=n.length;t--;)r.unshift(e.slice(n[t]+1)),e=e.slice(0,n[t]);return r.unshift(e),r}var f=/&|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g;function h(e,t){for(var n,r,o=[],i=[];r=f.exec(e);)"&"==r[0]&&o.push(r.index);for(r=o.length;r--;)i.unshift(e.slice(o[r]+1)),e=e.slice(0,o[r]);for(i.unshift(e),1===i.length&&i.unshift(""),n=[i[0]],r=1;r<i.length;r++)n=u(n,u(t,[i[r]]));return n.join(",")}function g(e){return function t(n){if(r.call(n)===o)for(var i=0;i<n.length;i++)t(n[i]);else e(n)}}function b(e){return"-"+e.toLowerCase()}function m(e,t,n,a,l){var s,d,u;if(null!=a)switch(r.call(a=a.valueOf())){case o:for(s=0;s<a.length;s++)m(e,t,n,a[s],l);break;case i:for(s in n=n&&n+"-",a)if(c.call(a,s))if(d=a[s],/\$/.test(s))for(u in s=s.split("$"))c.call(s,u)&&m(e,t,n+s[u],d,l);else m(e,t,n+s,d,l);break;default:s=n.replace(/_/g,"-").replace(/[A-Z]/g,b),!l||"animation-name"!=s&&"animation"!=s&&"list-style"!=s||(a=a.split(",").map(function(t){return t.replace(/^\s*(?:(var\([^)]+\))|:?global\(\s*([_A-Za-z][-\w]*)\s*\)|()(-?[_A-Za-z][-\w]*))/,e.localizeReplacer)}).join(",")),t.decl(s,a)}}function v(e,t,n,r,o,i,a){for(var l=0;l<e.$atHandlers.length;l++)if(e.$atHandlers[l](e,t,n,r,o,i,a))return;if(!n[3]&&/^global$/.test(n[2]))y(e,t,o,r,0,a);else if(!n[3]&&/^local$/.test(n[2]))y(e,t,o,r,1,a);else if(n[3]&&/^adopt$/.test(n[2])){if(!i||a)return t.err("@adopt global or nested: "+n[0]);if(!/^\.?[_A-Za-z][-\w]*$/.test(n[3]))return t.err("bad adopter "+JSON.stringify(n[3])+" in "+n[0]);l=[],g(function(e,r){null!=e&&/^\.?[_A-Za-z][-\w]*(?:\s+\.?[_A-Za-z][-\w]*)*$/.test(r=e+"")?l.push(r.replace(/\./g,"")):t.err("bad adoptee "+JSON.stringify(e)+" in "+n[0])})(r),l.length&&(e.localize(n[3]=n[3].replace(/\./g,"")),e.names[n[3]]+=" "+l.join(" "))}else!n[3]&&/^(?:namespace|import|charset)$/.test(n[2])?g(function(e){t.atrule(n[1],n[2],e)})(r):!n[3]&&/^(?:font-face|viewport)$/.test(n[2])?g(function(r){t.atrule(n[1],n[2],n[3],1),m(e,t,"",r,i),t._atrule()})(r):n[3]&&/^(?:media|supports|page|keyframes)$/.test(n[2])?(i&&"keyframes"==n[2]&&(n[3]=n[3].replace(/(var\([^)]+\))|:?global\(\s*([_A-Za-z][-\w]*)\s*\)|()(-?[_A-Za-z][-\w]*)/,e.localizeReplacer)),t.atrule(n[1],n[2],n[3],1),"page"==n[2]?m(e,t,"",r,i):y(e,t,"keyframes"==n[2]?"":o,r,i,a+1),t._atrule()):t.err("Unsupported at-rule: "+n[0])}function y(e,t,n,l,s,d){var u,_,f,g;switch(r.call(l)){case i:for(u in l)if(c.call(l,u))if(_=l[u],n.length>0&&/^[-\w$]+$/.test(u))if(f||(f=1,t.rule(n)),/\$/.test(u))for(g in u=u.split("$"))c.call(u,g)&&m(e,t,u[g],_,s);else m(e,t,u,_,s);else/^@/.test(u)?(f=0,v(e,t,/^(.(?:-[\w]+-)?([_A-Za-z][-\w]*))\b\s*(.*?)\s*$/.exec(u)||[u,"@","",""],_,n,s,d)):(f=0,y(e,t,n.length>0&&(/,/.test(n)||/,/.test(u))?(g=p(n),p(s?u.replace(/("(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\/)|:global\(\s*(\.-?[_A-Za-z][-\w]*)\s*\)|(\.)(-?[_A-Za-z][-\w]*)/g,e.localizeReplacer):u).map(function(e){return/&/.test(e)?h(e,g):g.map(function(t){return t+e}).join(",")}).join(",")):/&/.test(u)?h(s?u.replace(/("(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\/)|:global\(\s*(\.-?[_A-Za-z][-\w]*)\s*\)|(\.)(-?[_A-Za-z][-\w]*)/g,e.localizeReplacer):u,[n]):n+(s?u.replace(/("(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\/)|:global\(\s*(\.-?[_A-Za-z][-\w]*)\s*\)|(\.)(-?[_A-Za-z][-\w]*)/g,e.localizeReplacer):u),_,s,d+1));break;case o:for(u=0;u<l.length;u++)y(e,t,n,l[u],s,d);break;case a:n.length||t.err("No selector"),t.rule(n||" "),m(e,t,"",l,s)}}function x(e,t){var n;return t?e:{init:function(){n=0,e.init()},done:function(t){return n&&(e._rule(),n=0),e.done(t)},atrule:function(t,r,o,i){n&&(e._rule(),n=0),e.atrule(t,r,o,i)},_atrule:function(t){n&&(e._rule(),n=0),e._atrule(t)},rule:function(t){t!==n&&(n&&e._rule(),e.rule(t),n=t)}}}function w(e){return":global("+e+")"}function k(e,t,n){return(n={})[e]=t,n}function O(e,t,n){if(arguments.length<3){var r=O.bind.apply(O,[null].concat([].slice.call(arguments,0)));return r.toString=function(){return"@"+e+" "+t},r}return k("@"+e+" "+t,n)}e.exports=function(){var e,o,i={init:function(){e=[],o=[]},done:function(t){if(0!=o.length)throw new Error("j2c error(s): "+JSON.stringify(o,null,2)+"in context:\n"+e.join(""));return t?e:e.join("")},err:function(t){o.push(t),e.push("/* +++ ERROR +++ "+t+" */\n")},atrule:function(t,n,r,o){e.push(t,r&&" ",r,o?" {":";",u.endline)},_atrule:function(){e.push("}",u.endline)},rule:function(t){e.push(t," {",u.endline)},_rule:function(){e.push("}",u.endline)},decl:function(t,n){e.push(t,t&&":",n,";",u.endline)}},a=[x],c=[],u={at:O,global:w,kv:k,names:{},endline:"\n",suffix:"__j2c-"+Math.floor(4294967296*Math.random()).toString(36)+"-"+Math.floor(4294967296*Math.random()).toString(36)+"-"+Math.floor(4294967296*Math.random()).toString(36)+"-"+Math.floor(4294967296*Math.random()).toString(36),$plugins:[],sheet:function(e){var t=h(0);return t.init(),y(_[0],t,"",e,1,0),t.done()},inline:function(e,t){var n=h(1);return n.init(),m(_[1],n,"",e,!(t&&t.global)),n.done()}},_=[{localizeReplacer:S,localize:b,names:u.names,$atHandlers:c,atrule:v,decl:m,rule:y},{localizeReplacer:S,localize:b,names:u.names,decl:m}],p=g(function(e){~u.$plugins.indexOf(e)||(u.$plugins.push(e),r.call(e)===l&&(e=e(u)),e&&(g(function(e){a.push(e)})(e.$filter||t),g(function(e){c.push(e)})(e.$at||t),d(u.names,e.$names||n),p(e.$plugins||t),i=e.$sink||i,d(u,e)))}),f=[];function h(e){if(!f.length){a.push(function(e,t){return t?{init:i.init,decl:i.decl,done:i.done,err:i.err}:i});for(var t=0;t<2;t++)for(var n=a.length;n--;)f[t]=s(d(a[n](f[t],!!t),f[t]))}return f[e]}function b(e){return u.names[e]||(u.names[e]=e+u.suffix),u.names[e].match(/^\S+/)}function S(e,t,n,r,o){return t||n||r+b(o)}return p(t.slice.call(arguments)),u}},462:(e,t,n)=>{"use strict";var r=n(755);e.exports=function(e){var t=e.indexOf("?"),n=e.indexOf("#"),o=n<0?e.length:n,i=t<0?o:t,a=e.slice(0,i).replace(/\/{2,}/g,"/");return a?"/"!==a[0]&&(a="/"+a):a="/",{path:a,params:t<0?{}:r(e.slice(t+1,o))}}},500:(e,t,n)=>{"use strict";var r=n(462);e.exports=function(e){var t=r(e),n=Object.keys(t.params),o=[],i=new RegExp("^"+t.path.replace(/:([^\/.-]+)(\.{3}|\.(?!\.)|-)?|[\\^$*+.()|\[\]{}]/g,function(e,t,n){return null==t?"\\"+e:(o.push({k:t,r:"..."===n}),"..."===n?"(.*)":"."===n?"([^/]+)\\.":"([^/]+)"+(n||""))})+"\\/?$");return function(e){for(var r=0;r<n.length;r++)if(t.params[n[r]]!==e.params[n[r]])return!1;if(!o.length)return i.test(e.path);var a=i.exec(e.path);if(null==a)return!1;for(r=0;r<o.length;r++)e.params[o[r].k]=o[r].r?a[r+1]:decodeURIComponent(a[r+1]);return!0}}},555:(e,t,n)=>{"use strict";var r=n(224);e.exports=function(e,t){if(/:([^\/\.-]+)(\.{3})?:/.test(e))throw new SyntaxError("Template parameter names must be separated by either a '/', '-', or '.'.");if(null==t)return e;var n=e.indexOf("?"),o=e.indexOf("#"),i=o<0?e.length:o,a=n<0?i:n,l=e.slice(0,a),c={};Object.assign(c,t);var s=l.replace(/:([^\/\.-]+)(\.{3})?/g,function(e,n,r){return delete c[n],null==t[n]?e:r?t[n]:encodeURIComponent(String(t[n]))}),d=s.indexOf("?"),u=s.indexOf("#"),_=u<0?s.length:u,p=d<0?_:d,f=s.slice(0,p);n>=0&&(f+=e.slice(n,i)),d>=0&&(f+=(n<0?"?":"&")+s.slice(d,_));var h=r(c);return h&&(f+=(n<0&&d<0?"?":"&")+h),o>=0&&(f+=e.slice(o)),u>=0&&(f+=(o<0?"":"&")+s.slice(u)),f}},619:(e,t,n)=>{var r=n(862);e.exports=r.trust('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/></svg>')},665:(e,t,n)=>{"use strict";var r=n(165);e.exports=function(e){return null==e&&(e=""),r("<",void 0,void 0,e,void 0,void 0)}},674:(e,t,n)=>{"use strict";var r=n(165);e.exports=function(e,t,n){var o=[],i=!1,a=-1;function l(){for(a=0;a<o.length;a+=2)try{e(o[a],r(o[a+1]),c)}catch(e){n.error(e)}a=-1}function c(){i||(i=!0,t(function(){i=!1,l()}))}return c.sync=l,{mount:function(t,n){if(null!=n&&null==n.view&&"function"!=typeof n)throw new TypeError("m.mount expects a component, not a vnode.");var i=o.indexOf(t);i>=0&&(o.splice(i,2),i<=a&&(a-=2),e(t,[])),null!=n&&(o.push(t,n),e(t,r(n),c))},redraw:c}}},685:(e,t,n)=>{var r=n(862);e.exports=r.trust('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z"/></svg>')},726:(e,t,n)=>{"use strict";var r=n(165),o=n(178),i=n(795),a=/(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g,l=Object.create(null);e.exports=function(e){if(null==e||"string"!=typeof e&&"function"!=typeof e&&"function"!=typeof e.view)throw Error("The selector must be either a string or a component.");var t=o.apply(1,arguments);return"string"==typeof e&&(t.children=r.normalizeChildren(t.children),"["!==e)?function(e,t){var n=t.attrs,r=i.call(n,"class"),o=r?n.class:n.className;return t.tag=e.tag,null!=e.attrs?(n=Object.assign({},e.attrs,n),null==o&&null==e.attrs.className||(n.className=null!=o?null!=e.attrs.className?String(e.attrs.className)+" "+String(o):o:null!=e.attrs.className?e.attrs.className:null)):null!=o&&(n.className=o),r&&(n.class=null),"input"===e.tag&&i.call(n,"type")&&(n=Object.assign({type:n.type},n)),t.is=n.is,t.attrs=n,t}(l[e]||function(e){for(var t,n="div",r=[],o={};t=a.exec(e);){var c=t[1],s=t[2];if(""===c&&""!==s)n=s;else if("#"===c)o.id=s;else if("."===c)r.push(s);else if("["===t[3][0]){var d=t[6];d&&(d=d.replace(/\\(["'])/g,"$1").replace(/\\\\/g,"\\")),"class"===t[4]?r.push(d):o[t[4]]=""===d?d:d||!0}}return r.length>0&&(o.className=r.join(" ")),function(e){for(var t in e)if(i.call(e,t))return!1;return!0}(o)&&(o=null),l[e]={tag:n,attrs:o}}(e),t):(t.tag=e,t)}},755:e=>{"use strict";function t(e){try{return decodeURIComponent(e)}catch(t){return e}}e.exports=function(e){if(""===e||null==e)return{};"?"===e.charAt(0)&&(e=e.slice(1));for(var n=e.split("&"),r={},o={},i=0;i<n.length;i++){var a=n[i].split("="),l=t(a[0]),c=2===a.length?t(a[1]):"";"true"===c?c=!0:"false"===c&&(c=!1);var s=l.split(/\]\[?|\[/),d=o;l.indexOf("[")>-1&&s.pop();for(var u=0;u<s.length;u++){var _=s[u],p=s[u+1],f=""==p||!isNaN(parseInt(p,10));if(""===_)null==r[l=s.slice(0,u).join()]&&(r[l]=Array.isArray(d)?d.length:0),_=r[l]++;else if("__proto__"===_)break;if(u===s.length-1)d[_]=c;else{var h=Object.getOwnPropertyDescriptor(d,_);null!=h&&(h=h.value),null==h&&(d[_]=h=f?[]:{}),d=h}}}return o}},788:e=>{"use strict";var t=new WeakMap;e.exports={delayedRemoval:t,domFor:function*(e){var n=e.dom,r=e.domSize,o=t.get(n);if(null!=n)do{var i=n.nextSibling;t.get(n)===o&&(yield n,r--),n=i}while(r)}}},795:e=>{"use strict";e.exports={}.hasOwnProperty},804:(e,t,n)=>{"use strict";var r=n(165),o=n(726),i=n(555),a=n(462),l=n(500),c=n(333);function s(e){try{return decodeURIComponent(e)}catch(t){return e}}e.exports=function(e,t){var n,d,u,_,p,f,h,g,b=null==e?null:"function"==typeof e.setImmediate?e.setImmediate:e.setTimeout,m=Promise.resolve(),v=!1,y=!1,x=!1,w={onremove:function(){y=x=!1,e.removeEventListener("popstate",S,!1)},view:function(){var e=r(p,f.key,f);return _?_.render(e):[e]}},k=j.SKIP={};function O(){v=!1;var r=e.location.hash;"#"!==j.prefix[0]&&(r=e.location.search+r,"?"!==j.prefix[0]&&"/"!==(r=e.location.pathname+r)[0]&&(r="/"+r));var o=r.concat().replace(/(?:%[a-f89][a-f0-9])+/gim,s).slice(j.prefix.length),i=a(o);function l(e){console.error(e),j.set(u,null,{replace:!0})}Object.assign(i.params,e.history.state),function e(r){for(;r<d.length;r++)if(d[r].check(i)){var a=d[r].component,c=d[r].route,s=a,b=g=function(l){if(b===g){if(l===k)return e(r+1);p=null==l||"function"!=typeof l.view&&"function"!=typeof l?"div":l,f=i.params,h=o,g=null,_=a.render?a:null,x?t.redraw():(x=!0,t.mount(n,w))}};return void(a.view||"function"==typeof a?(a={},b(s)):a.onmatch?m.then(function(){return a.onmatch(i.params,o,c)}).then(b,o===u?null:l):b())}if(o===u)throw new Error("Could not resolve default route "+u+".");j.set(u,null,{replace:!0})}(0)}function S(){v||(v=!0,b(O))}function j(t,r,o){if(!t)throw new TypeError("DOM element being rendered to does not exist.");if(d=Object.keys(o).map(function(e){if("/"!==e[0])throw new SyntaxError("Routes must start with a '/'.");if(/:([^\/\.-]+)(\.{3})?:/.test(e))throw new SyntaxError("Route parameter names must be separated with either '/', '.', or '-'.");return{route:e,component:o[e],check:l(e)}}),u=r,null!=r){var i=a(r);if(!d.some(function(e){return e.check(i)}))throw new ReferenceError("Default route doesn't match any known routes.")}n=t,e.addEventListener("popstate",S,!1),y=!0,O()}return j.set=function(t,n,r){if(null!=g&&((r=r||{}).replace=!0),g=null,t=i(t,n),y){S();var o=r?r.state:null,a=r?r.title:null;r&&r.replace?e.history.replaceState(o,a,j.prefix+t):e.history.pushState(o,a,j.prefix+t)}else e.location.href=j.prefix+t},j.get=function(){return h},j.prefix="#!",j.Link={view:function(e){var t,n,r,a=o(e.attrs.selector||"a",c(e.attrs,["options","params","selector","onclick"]),e.children);return(a.attrs.disabled=Boolean(a.attrs.disabled))?(a.attrs.href=null,a.attrs["aria-disabled"]="true"):(t=e.attrs.options,n=e.attrs.onclick,r=i(a.attrs.href,e.attrs.params),a.attrs.href=j.prefix+r,a.attrs.onclick=function(e){var o;"function"==typeof n?o=n.call(e.currentTarget,e):null==n||"object"!=typeof n||"function"==typeof n.handleEvent&&n.handleEvent(e),!1===o||e.defaultPrevented||0!==e.button&&0!==e.which&&1!==e.which||e.currentTarget.target&&"_self"!==e.currentTarget.target||e.ctrlKey||e.metaKey||e.shiftKey||e.altKey||(e.preventDefault(),e.redraw=!1,j.set(r,null,t))}),a}},j.param=function(e){return f&&null!=e?f[e]:f},j}},843:(e,t,n)=>{"use strict";var r=n(199);e.exports=n(804)("undefined"!=typeof window?window:null,r)},862:(e,t,n)=>{"use strict";var r=n(419),o=n(975),i=n(199),a=n(788),l=function(){return r.apply(this,arguments)};l.m=r,l.trust=r.trust,l.fragment=r.fragment,l.Fragment="[",l.mount=i.mount,l.route=n(843),l.render=n(88),l.redraw=i.redraw,l.request=o.request,l.parseQueryString=n(755),l.buildQueryString=n(224),l.parsePathname=n(462),l.buildPathname=n(555),l.vnode=n(165),l.censor=n(333),l.domFor=a.domFor,e.exports=l},975:(e,t,n)=>{"use strict";var r=n(199);e.exports=n(389)("undefined"!=typeof window?window:null,r.redraw)},995:(e,t,n)=>{"use strict";var r=n(165),o=n(178);e.exports=function(){var e=o.apply(0,arguments);return e.tag="[",e.children=r.normalizeChildren(e.children),e}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(428);function t(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function o(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(o,!0).forEach(function(n){t(e,n,o[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(o).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))})}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var l="hidden",c="visible",s="exposing",d="hiding",u=function(e){var t=e.h,n=e.useState,r=e.useEffect,u=i(e,["h","useState","useEffect"]),_=a(n(u.permanent||u.permanent||u.show?c:l),2),p=_[0],f=_[1];r(function(){var e=p;u.permanent?p===c&&u.show?e=s:p!==s||u.show||(e=d):p===l&&u.show?e=c:p!==c||u.show||(e=d),e!==p&&f(e)},[u]);var h=t("span",{className:u.placeholderClassName});return u.didHide?p!==l?t(u.instance,o({},u,{didHide:function(e){return u.didHide(e),f(u.permanent?c:l)}},p===d?{show:!0,hide:!0}:void 0)):h:u.permanent||u.inactive||u.show?t(u.instance,u):h},_=function(e,t){return e[t]=1,e},p=["key","style","href","id","data-index","tabIndex","tabindex","oninit","oncreate","onupdate","onbeforeremove","onremove","onbeforeupdate"],f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.add,r=t.remove,o=r?r.reduce(_,{}):{},i=(n?p.concat(n):p).filter(function(e){return!o[e]}).reduce(_,{});return Object.keys(e).reduce(function(t,n){return i[n]&&(t[n]=e[n]),t},{})},h=function(e){return"function"==typeof e?e():e},g=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"regular";return function(e){return{small:e.small,regular:e.regular,medium:e.medium,large:e.large,fab:e.fab}}(e)[t]},b="undefined"!=typeof document,m=!b,v={animation:"animationend",OAnimation:"oAnimationEnd",MozAnimation:"animationend",WebkitAnimation:"webkitAnimationEnd"},y=function(e){var t=e.element,n=e.selector,r=e.pseudoSelector,o=e.prop,i=e.equals,a=e.contains,l=n?t.querySelector(n):t;if(!l)return!1;var c=document.defaultView;if(c){if(void 0!==i)return i===c.getComputedStyle(l,r).getPropertyValue(o);if(void 0!==a)return-1!==c.getComputedStyle(l,r).getPropertyValue(o).indexOf(a)}return!1},x=function(e){var t=parseFloat(e)*(-1===e.indexOf("ms")?1e3:1);return isNaN(t)?0:t},w=!m&&"ontouchstart"in document.documentElement,k=w?["click","mouseup"]:["mouseup"],O=w?["touchend","mouseup"]:["mouseup"];if(b){var S=document.querySelector("html");S&&S.classList.add(w?"pe-touch":"pe-no-touch")}var j={},C=function(e,t,n){j[e]=j[e]||[],j[e].push(n?function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.05,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:b?window:{},r=!1;return function(){for(var o=arguments.length,i=new Array(o),a=0;a<o;a++)i[a]=arguments[a];r||(e.apply(n,i),r=!0,setTimeout(function(){return r=!1},t))}}(t,n):t)},z=function(e,t){if(j[e]){var n=j[e].indexOf(t);n>-1&&j[e].splice(n,1)}},P=function(e,t){j[e]&&j[e].forEach(function(e){return e(t)})};b&&(window.addEventListener("resize",function(e){return P("resize",e)}),window.addEventListener("scroll",function(e){return P("scroll",e)}),window.addEventListener("keydown",function(e){return P("keydown",e)}),k.forEach(function(e){return window.addEventListener(e,function(t){return P(e,t)})}));var T=function(e){var t=e.options,n=[],r=function(e){P(t.name,e)},l=function(e){var t=c(e);return n.indexOf(t)},c=function(e){for(var t=0;t<n.length;t++)if(n[t].instanceId===e)return n[t]},s=function(){n.length&&(n[0].show=!0),r({id:n.length?n[0].instanceId:null,name:"next"})},d=function(){var e,o,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.defaultId;t.queue?(n.shift(),s()):-1!==(o=l(e=i))&&(n.splice(o,1),r({id:e,name:"removeItem"}))},u=function(e,t){var n=c(t);n&&(n.pause=e,n.unpause=!e,r({id:t,name:e?"pause":"unpause"}))},_=function(){n.length=0,r({id:null,name:"removeAll"})};return{clear:_,count:function(){return n.length},hide:function(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).id||t.defaultId,o=t.queue&&n.length?n[0]:c(e);return o&&(o.hide=!0),r({id:e,name:"hide"}),o?o.hidePromise:Promise.resolve(e)},pause:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.defaultId;return u(!0,e)},remove:d,show:function(){var e,i,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},_=u.id||t.defaultId,p=function(e,n,i){var a,l,c=h(e),s=new Promise(function(e){return a=e}),u=new Promise(function(e){return l=e});return o({},t,{instanceId:n,spawn:i,props:e,show:!t.queue,showPromise:s,hidePromise:u,didShow:function(){return c.didShow&&c.didShow(n),r({id:n,name:"didShow"}),a(n)},didHide:function(){return c.didHide&&c.didHide(n),r({id:n,name:"didHide"}),d(n),l(n)}})}(a,_,u.spawn||t.defaultId);return r({id:_,name:"show"}),t.queue?(n.push(p),1===n.length&&s()):c(_)?(e=p,-1!==(i=l(_))&&(n[i]=e)):n.push(p),p.showPromise},unpause:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.defaultId;return u(!1,e)},render:function(e){var r=e.h,l=e.useState,c=e.useEffect,s=i(e,["h","useState","useEffect"]),d=a(l(),2)[1];c(function(){return C(t.name,d),function(){z(t.name,d)}},[]);var u=s.spawn||t.defaultId,p=n.filter(function(e){return e.show&&e.spawn===u});return t.htmlShowClass&&b&&document.documentElement&&document.documentElement.classList[p.length?"add":"remove"](t.htmlShowClass),p.length?r(t.holderSelector,{className:"container"===s.position?"pe-multiple--container":"pe-multiple--screen"},p.map(function(e){return r(t.instance,o({},h(s),{fromMultipleClear:_,spawnId:u,fromMultipleClassName:t.className,holderSelector:t.holderSelector,transitions:t.transitions,fromMultipleDidHide:e.didHide,fromMultipleDidShow:e.didShow,hide:e.hide,instanceId:e.instanceId,key:void 0!==e.key?e.key:e.keyId,pause:e.pause,show:e.show,unpause:e.unpause},h(e.props)))})):r(t.placeholder)}}};T.displayName="Multi";var R="show",E="hide",L="show-done",I="hide-done",N={isVisible:!1,isTransitioning:!1},F=function(e,t){switch(t){case R:return o({},e,{isTransitioning:!0,isVisible:!0});case E:return o({},e,{isTransitioning:!0});case L:return o({},e,{isTransitioning:!1,isVisible:!0});case I:return o({},e,{isTransitioning:!1,isVisible:!1});default:throw new Error("Unhandled action type: ".concat(t))}},D=function(e){return H(e,"show")},A=function(e){return H(e,"hide")},H=function(e,t){var n=e.el;return n?new Promise(function(r){var o=n.style,i=b?window.getComputedStyle(n):{},a=e.hasDuration&&void 0!==e.duration?1e3*e.duration:x(i.transitionDuration),l=e.hasDelay&&void 0!==e.delay?1e3*e.delay:x(i.transitionDelay),c=e.timingFunction||i.transitionTimingFunction;e.transitionClass&&n.classList.add(e.transitionClass);var s=e.before&&"show"===t||e.before&&"hide"===t?function(){o.transitionDuration="0ms",o.transitionDelay="0ms",e.before&&"function"==typeof e.before&&e.before()}:null,d=function(){e.after&&"function"==typeof e.after&&e.after()},u=function(){o.transitionDuration=a+"ms",o.transitionDelay=l+"ms",c&&(o.transitionTimingFunction=c),e.showClass&&(e.showClassElement||n).classList["show"===t?"add":"remove"](e.showClass),e.transition&&e.transition(),setTimeout(function(){d&&d(),e.transitionClass&&(n.classList.remove(e.transitionClass),n.offsetHeight),r()},a+l)},_=function(){0===a?u():setTimeout(u,0)};s?(s(),n.offsetHeight,setTimeout(function(){_()},0)):_()}):Promise.resolve()},W=function(e){var t=e.dispatchTransitionState,n=e.isTransitioning,r=e.instanceId,i=e.isShow,a=e.props,l=e.domElements,c=e.beforeTransition,s=e.afterTransition,d=e.showClass,u=e.transitionClass;if(e.referrer,n)return Promise.resolve();t(i?R:E),c&&c();var _=i?a.showDuration:a.hideDuration,p=i?a.showDelay:a.hideDelay,f=i?a.showTimingFunction:a.hideTimingFunction,h=a.transitions,g=i?D:A,b=o({},a,{},l,{showClass:d,transitionClass:u,duration:_,delay:p,timingFunction:f}),m=o({},b,{},h?(i?h.show:h.hide)(b):void 0);return g(o({},m,{},{duration:void 0!==m.duration?m.duration:.24,hasDuration:void 0!==m.duration,delay:void 0!==m.delay?m.delay:0,hasDelay:void 0!==m.delay})).then(function(){var e=r;s&&s(),(i?a.fromMultipleDidShow:a.fromMultipleDidHide)?(i?a.fromMultipleDidShow:a.fromMultipleDidHide)(e):(i?a.didShow:a.didHide)&&(i?a.didShow:a.didHide)(e),t(i?L:I)})},B=[{display:"-webkit-box"},{display:"-moz-box"},{display:"-ms-flexbox"},{display:"-webkit-flex"},{display:"flex"}],M=[B,{"-ms-flex-align":"center","-webkit-align-items":"center","align-items":"center"}],q=[B,{"-ms-flex-pack":"center","-webkit-justify-content":"center","justify-content":"center"}],V={flex:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return[{"-webkit-box-flex":e},{"-moz-box-flex":e},{"-webkit-flex":e},{"-ms-flex":e},{flex:e},1===e?{"-webkit-flex-basis":"0.000000001px"}:{},1===e?{"flex-basis":"0.000000001px"}:{}]},flexAuto:{"-ms-flex":"1 1 auto","-webkit-flex-basis":"auto","flex-basis":"auto"},flexAutoVertical:{"-ms-flex":"1 1 auto","-webkit-flex-basis":"auto","flex-basis":"auto"},flexIndex:function(e){return{"-ms-flex":e,"-webkit-flex":e,flex:e}},flexGrow:function(e){return{"-webkit-flex-grow":e,"flex-grow":e}},flexShrink:function(e){return{"-webkit-flex-shrink":e,"flex-shrink":e}},layout:B,layoutAroundJustified:[B,{"-ms-flex-pack":"distribute","-webkit-justify-content":"space-around","justify-content":"space-around"}],layoutCenter:M,layoutCenterCenter:[q,M],layoutCenterJustified:q,layoutEnd:[B,{"-ms-flex-align":"end","-webkit-align-items":"flex-end","align-items":"flex-end"}],layoutEndJustified:[B,{"-ms-flex-pack":"end","-webkit-justify-content":"flex-end","justify-content":"flex-end"}],layoutHorizontal:[B,{"-ms-flex-direction":"row","-webkit-flex-direction":"row","flex-direction":"row"}],layoutHorizontalReverse:[B,{"-ms-flex-direction":"row-reverse","-webkit-flex-direction":"row-reverse","flex-direction":"row-reverse"}],layoutInline:[B,{display:"-ms-inline-flexbox"},{display:"-webkit-inline-flex"},{display:"inline-flex"}],layoutJustified:[B,{"-ms-flex-pack":"justify","-webkit-justify-content":"space-between","justify-content":"space-between"}],layoutStart:[B,{"-ms-flex-align":"start","-webkit-align-items":"flex-start","align-items":"flex-start"}],layoutStartJustified:[B,{"-ms-flex-pack":"start","-webkit-justify-content":"flex-start","justify-content":"flex-start"}],layoutVertical:[B,{"-ms-flex-direction":"column","-webkit-flex-direction":"column","flex-direction":"column"}],layoutVerticalReverse:[B,{"-ms-flex-direction":"column-reverse","-webkit-flex-direction":"column-reverse","flex-direction":"column-reverse"}],layoutWrap:[B,{"-ms-flex-wrap":"wrap","-webkit-flex-wrap":"wrap","flex-wrap":"wrap"}],layoutWrapReverse:[B,{"-ms-flex-wrap":"wrap-reverse","-webkit-flex-wrap":"wrap-reverse","flex-wrap":"wrap-reverse"}],selfCenter:{"-ms-align-self":"center","-webkit-align-self":"center","align-self":"center"},selfEnd:{"-ms-align-self":"flex-end","-webkit-align-self":"flex-end","align-self":"flex-end"},selfStart:{"-ms-align-self":"flex-start","-webkit-align-self":"flex-start","align-self":"flex-start"},selfStretch:{"-ms-align-self":"stretch","-webkit-align-self":"stretch","align-self":"stretch"}};function $(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function K(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function U(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?K(n,!0).forEach(function(t){$(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):K(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}var J,Q,Z,X=function(){return{transitionDelay:"0ms",transitionDuration:arguments.length>1&&void 0!==arguments[1]?arguments[1]:".18s",transitionTimingFunction:arguments.length>2&&void 0!==arguments[2]?arguments[2]:"ease-out",transitionProperty:arguments.length>0&&void 0!==arguments[0]?arguments[0]:"all"}},Y=function(e,t){return"none"===e?{textOverflow:"initial",overflow:"initial",display:"block",height:"auto",maxHeight:"none",whiteSpace:"normal"}:[{"@supports (-webkit-line-clamp: 2)":void 0!==e?{"-webkit-line-clamp":e,"-webkit-box-orient":"vertical",display:"-webkit-box",wordBreak:"break-word"}:void 0},U({overflow:"hidden",textOverflow:"ellipsis",textRendering:"auto"},void 0!==t?{maxHeight:e*t+(arguments.length>2&&void 0!==arguments[2]?arguments[2]:"px")}:void 0,{},1===t?{wordWrap:"nowrap"}:void 0)]},G=function(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:0)+"px";return{position:"absolute",top:e,right:e,bottom:e,left:e}},ee=function(){return{position:"sticky",top:0,zIndex:arguments.length>0&&void 0!==arguments[0]?arguments[0]:1}},te=(J=function(e,t){var n,r,o,i,a;function l(e){return e.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()}).replace("-","")}function c(e){return e.replace(/[A-Z]/g,function(e){return"-"+e.toLowerCase()})}function s(e,t){return r[e]="",r[e]=t,!!r[e]}function d(e,t){return o.textContent="@media ("+e+":"+t+"){}",!!~o.sheet.cssRules[0].cssText.indexOf(t)}function u(e){return e in r}function _(e){return o.textContent=e+"{}",!!o.sheet.cssRules.length}Object.defineProperty(t,"__esModule",{value:!0});var p=[{props:["cursor"],values:["grab","grabbing","zoom-in","zoom-out"]},{props:["display"],values:["box","inline-box","flexbox","inline-flexbox","flex","inline-flex","grid","inline-grid"]},{props:["position"],values:["sticky"]},{props:["width","column-width","height","max-height","max-width","min-height","min-width"],values:["contain-floats","fill-available","fit-content","max-content","min-content"]}],f={"align-items":"box-align",flex:"box-flex","box-direction":"box-direction","box-orient":"box-orient","flex-grow":"box-flex","flex-wrap":"box-lines","justify-content":"box-pack",order:"box-ordinal-group"},h={"flex-end":"end","flex-start":"start",nowrap:"single","space-around":"justify","space-between":"justify",wrap:"multiple","wrap-reverse":"multiple"},g={"align-content":"-ms-flex-line-pack","align-items":"-ms-flex-align","align-self":"-ms-flex-item-align","flex-basis":"-ms-preferred-size","flex-grow":"-ms-flex-positive","flex-shrink":"-ms-flex-negative","justify-content":"-ms-flex-pack",order:"-ms-flex-order"},b={"flex-end":"end","flex-start":"start","space-around":"distribute","space-between":"justify"};var m,v,y={},x=/[(),]|\/\*[\s\S]*?\*\//g;function w(e,t,n){return new RegExp(e+"(?:"+t.join("|")+")"+n)}function k(e,t,n){return new RegExp("\"(?:\\\\[\\S\\s]|[^\"])*\"|'(?:\\\\[\\S\\s]|[^'])*'|\\/\\*[\\S\\s]*?\\*\\/|"+e+"((?:"+t.join("|")+"))"+n,"gi")}function O(e,t,n,r){if("string"!=typeof n||"-"===n.charAt(0))return t(n,r);if("string"!=typeof r&&"number"!=typeof r)return t(e.properties[n]||e.fixProperty(n),r);if(r+="",e.jsFlex){if("display"===n&&("flex"===r||"inline-flex"===r))return void t("-js-display",r)}else if(e.flexbox2009){if("flex-flow"===n)return void r.split(/\s+/).forEach(function(n){n.indexOf("wrap")>-1?O(e,t,"flex-wrap",n):""!==n&&O(e,t,"flex-direction",n)});if("flex-direction"===n)return t(e.properties["box-orient"],r.indexOf("column")>-1?"block-axis":"inline-axis"),void t(e.properties["box-direction"],r.indexOf("-reverse")>-1?"reverse":"normal")}e.WkBCTxt&&"background-clip"===n&&"text"===r?t("-webkit-background-clip",r):t(e.properties[n]||e.fixProperty(n),e.fixValue(r,n))}function S(e){var t=e.prefix;e.fixProperty=e.fixProperty||function(n){var r;return e.properties[n]=i(n)||!i(r=t+n)?n:r};var n=w("",e.selectorList,"(?:\\b|$|[^-])"),r=k("",e.selectorList,"(?:\\b|$|[^-])"),o=function(t,n){return null!=n?e.selectorMap[n]:t};e.fixSelector=function(e){return n.test(e)?e.replace(r,o):e};var a=e.functions.indexOf("linear-gradient")>-1,l=/\blinear-gradient\(/,c=/(^|\s|,|\()((?:repeating-)?linear-gradient\()\s*(-?\d*\.?\d*)deg/gi,s=function(e,t,n,r){return t+n+(90-r)+"deg"},d=!!e.functions.length,u=w("(?:^|\\s|,|\\()",e.functions,"\\s*\\("),_=k("(^|\\s|,|\\()",e.functions,"(?=\\s*\\()");function p(e,n,r){return n+t+r}var f=/^\s*([-\w]+)/gi,h=function(t,n){return e.properties[n]||e.fixProperty(n)};e.fixValue=function(t,n){var r;return null!=e.initial&&"initial"===t?e.initial:(e.hasKeywords&&(r=(e.keywords[n]||y)[t])||(r=t,e.valueProperties.hasOwnProperty(n)&&(r=-1===t.indexOf(",")?t.replace(f,h):function(e){for(var t,n=[],r=[],o=0;t=x.exec(e);)switch(t[0]){case"(":o++;break;case")":o--;break;case",":if(o)break;n.push(t.index)}for(t=n.length;t--;)r.unshift(e.slice(n[t]+1)),e=e.slice(0,n[t]);return r.unshift(e),r}(t).map(function(e){return e.replace(f,h)}).join(",")),d&&u.test(t)&&(a&&l.test(t)&&(r=r.replace(c,s)),r=r.replace(_,p))),r)};var g,b,m=/((?:min-|max-)?resolution)\s*:\s*((?:\d*\.)?\d+)dppx/g,v=e.hasPixelRatio?function(t,n,r){return e.properties[n]+":"+r}:e.hasPixelRatioFraction?function(t,n,r){return e.properties[n]+":"+Math.round(10*r)+"/10"}:function(e,t,n){return t+":"+Math.round(96*n)+"dpi"};e.fixAtMediaParams=!1!==e.hasDppx?function(e){return e}:function(e){return-1!==e.indexOf("reso")?e.replace(m,v):e};var S=function(e,t){g=e,b=t},j=/\(\s*([-\w]+)\s*:\s*((?:'(?:\\[\S\s]|[^'])*'|"(?:\\[\S\s]|[^"])*"|\/\*[\S\s]*?\*\/|\((?:'(?:\\[\S\s]|[^'])*'|"(?:\\[\S\s]|[^"])*"|\/\*[\S\s]*?\*\/|\((?:'(?:\\[\S\s]|[^'])*'|"(?:\\[\S\s]|[^"])*"|\/\*[\S\s]*?\*\/|\((?:'(?:\\[\S\s]|[^'])*'|"(?:\\[\S\s]|[^"])*"|\/\*[\S\s]*?\*\/|\((?:'(?:\\[\S\s]|[^'])*'|"(?:\\[\S\s]|[^"])*"|\/\*[\S\s]*?\*\/|\((?:'(?:\\[\S\s]|[^'])*'|"(?:\\[\S\s]|[^"])*"|\/\*[\S\s]*?\*\/|\((?:'(?:\\[\S\s]|[^'])*'|"(?:\\[\S\s]|[^"])*"|\/\*[\S\s]*?\*\/|[^\)])*\)|[^\)])*\)|[^\)])*\)|[^\)])*\)|[^\)])*\)|[^\)])*\)|[^\)])*)/g;function C(t,n,r){return O(e,S,n,r),"("+g+":"+b}e.fixAtSupportsParams=function(e){return e.replace(j,C)}}m={atrules:{},hasAtrules:!1,hasDppx:null,hasKeywords:!1,hasPixelRatio:!1,hasPixelRatioFraction:!1,hasSelectors:!1,hasValues:!1,fixAtMediaParams:null,fixAtSupportsParams:null,fixProperty:null,fixSelector:null,fixValue:null,flexbox2009:!1,flexbox2012:!1,functions:[],initial:null,jsFlex:!1,keywords:{},placeholder:null,prefix:"",prefixes:[],Prefix:"",properties:{},selectorList:[],selectorMap:{},valueProperties:{transition:1,"transition-property":1,"will-change":1},WkBCTxt:!1},"function"==typeof getComputedStyle&&(v=m,n=getComputedStyle(document.documentElement,null),r=document.createElement("div").style,o=document.documentElement.appendChild(document.createElement("style")),a=s,i=u,"zIndex"in r&&!("z-index"in r)&&(a=function(e,t){return s(l(e),t)},i=function(e){return u(l(e))}),function(e){var t={};function r(e){if("-"===e.charAt(0)){var n=e.split("-")[1];t[n]=++t[n]||1}}if(n&&n.length>0)for(var o=0;o<n.length;o++)r(n[o]);else for(var i in n)r(c(i));var a=[];for(var s in t)a.push(s);a.sort(function(e,n){return t[n]-t[e]}),e.prefixes=a.map(function(e){return"-"+e+"-"}),e.prefix=e.prefixes[0]||"",_("_:-ms-lang(x), _:-webkit-full-screen")&&e.prefixes.push("-ms-"),e.Prefix=l(e.prefix)}(v),function(e){var t,n;function r(t){return t.replace(/^::?/,function(t){return t+e.prefix})}if(""!==e.prefix){var o={":any-link":null,"::backdrop":null,":fullscreen":null,":full-screen":":fullscreen","::placeholder":null,":placeholder":"::placeholder","::input-placeholder":"::placeholder",":input-placeholder":"::placeholder",":read-only":null,":read-write":null,"::selection":null};for(t in o)n=r(t),!_(o[t]||t)&&_(n)&&(e.hasSelectors=!0,e.selectorList.push(o[t]||t),e.selectorMap[o[t]||t]=n)}}(v),function(e){if(""!==e.prefix){var t={keyframes:"name",viewport:null,document:'regexp(".")'};for(var n in t)for(var r=n+" "+(t[n]||""),o=e.prefixes.length;o--;)!_("@"+r)&&_("@"+e.prefixes[o]+r)&&(e.hasAtrules=!0,e.atrules["@"+n]="@"+e.prefixes[o]+n);e.hasDppx=d("resolution","1dppx"),e.hasPixelRatio=d(e.prefix+"device-pixel-ratio","1"),e.hasPixelRatioFraction=d(e.prefix+"device-pixel-ratio","1/1"),(e.hasPixelRatio||e.hasPixelRatioFraction)&&(e.properties.resolution=e.prefix+"device-pixel-ratio",e.properties["min-resolution"]=e.prefix+"min-device-pixel-ratio",e.properties["max-resolution"]=e.prefix+"max-device-pixel-ratio",d("min-"+e.prefix+"device-pixel-ratio","1")&&(e.properties["min-resolution"]="min-"+e.prefix+"device-pixel-ratio",e.properties["max-resolution"]="max-"+e.prefix+"device-pixel-ratio"))}}(v),function(e){if(0!==e.prefixes.length){for(var t=0;t<p.length;t++){for(var n,r={},o=p[t].props[0],i=0;n=p[t].values[i];i++)for(var l=e.prefixes.length;l--;)!a(o,n)&&a(o,e.prefixes[l]+n)&&(e.hasKeywords=!0,r[n]=e.prefixes[l]+n);for(i=0;o=p[t].props[i];i++)e.keywords[o]=r}if(e.keywords.display&&e.keywords.display.flexbox&&!a("display","flex"))for(l in e.keywords.display.flex=e.keywords.display.flexbox,e.keywords.display["inline-flex"]=e.keywords.display["inline-flexbox"],e.flexbox2012=!0,g)e.properties[l]=g[l],e.keywords[l]=b;else if(e.keywords.display&&e.keywords.display.box&&!a("display","flex")&&!a("display",e.prefix+"flex"))for(l in e.keywords.display.flex=e.keywords.display.box,e.keywords.display["inline-flex"]=e.keywords.display["inline-box"],e.flexbox2009=!0,f)e.properties[l]=e.prefix+f[l],e.keywords[l]=h;else!e.keywords.display||e.keywords.display.box||e.keywords.display.flex||e.keywords.display.flexbox||a("display","flex")||(e.jsFlex=!0);!a("color","initial")&&a("color",e.prefix+"initial")&&(e.initial=e.prefix+"initial")}}(v),function(e){if(""!==e.prefix){var t={"linear-gradient":{property:"background-image",params:"red, teal"},calc:{property:"width",params:"1px + 5%"},element:{property:"background-image",params:"#foo"},"cross-fade":{property:"backgroundImage",params:"url(a.png), url(b.png), 50%"}};for(var n in t["repeating-linear-gradient"]=t["repeating-radial-gradient"]=t["radial-gradient"]=t["linear-gradient"],t){var r=t[n],o=r.property,i=n+"("+r.params+")";!a(o,i)&&a(o,e.prefix+i)&&e.functions.push(n)}}}(v),function(e){!a("background-clip","text")&&a("-webkit-background-clip","text")&&(e.WkBCTxt=!0),["background-clip","text-fill-color","text-stroke-color","text-stroke-width","text-stroke"].forEach(function(t){!i(t)&&i("-webkit-"+t)&&(e.properties[t]="-webkit-"+t)})}(v),"undefined"!=typeof document&&document.documentElement.removeChild(o),n=o=null),S(m),t.prefixPlugin=function e(){var t=m,n=[];return{set:{setPrefixDb:function(r){return-1===n.indexOf(r)&&(S(r),n.push(r)),t=r,e}},filter:function(e){return{atrule:function(n,r,o,i){e.atrule(t.hasAtrules&&t.atrules[n]||n,r,"@media"===n?t.fixAtMediaParams(o):"@supports"===n?t.fixAtSupportsParams(o):o,i)},decl:function(n,r){O(t,e.decl,n,r)},rule:function(n){e.rule(t.hasSelectors?t.fixSelector(n):n)}}}}}},J(Q={exports:{}},Q.exports),Q.exports);(Z=te)&&Z.__esModule&&Object.prototype.hasOwnProperty.call(Z,"default")&&Z.default;var ne=new e(te.prefixPlugin),re=/[^a-z0-9\\-]/g,oe=function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return ae.apply(void 0,[{id:e}].concat(n))},ie=function(e){if(!m&&e){var t=document.getElementById(e);t&&t.parentNode&&t.parentNode.removeChild(t)}},ae=function(e){var t=e.id,n=e.document;if(!m){var r=t.replace(re,"_");ie(r);var o=n||window.document,i=o.createElement("style");r&&i.setAttribute("id",r);for(var a=arguments.length,l=new Array(a>1?a-1:0),c=1;c<a;c++)l[c-1]=arguments[c];l.forEach(function(e){Object.keys(e).length&&e.forEach(function(e){var t={"@global":e},n=ne.sheet(t);i.appendChild(o.createTextNode(n))})}),o.head.appendChild(i)}},le=function(e){var t=e.styles,n=e.scope;return n?[$({},n,t)]:t},ce=function(e){var t=e.selectors,n=e.fns,r=e.vars,o=e.customVars,i=e.mediaQuery,a=e.scope,l=e.identifier,c=(a?" ":"")+t.join(""),s=n.map(function(e){return e(c,r,o)}).filter(function(e){return e.length>0});if(0!==s.length){var d=l||c.trim().replace(/^[^a-z]?(.*)/,"$1");oe(d,le({styles:le({styles:s,scope:a}),scope:i}))}},se=function(e){var t=e.selectors,n=e.fns,r=e.vars,o=e.customVars,i=e.mediaQuery,a=e.scope,l=(a?" ":"")+t.join(""),c=n.map(function(e){return e(l,r,o)});return le({styles:le({styles:c,scope:a}),scope:i})},de=oe,ue=ce,_e=function(e,t,n){return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",o=arguments.length>1?arguments[1]:void 0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=i.mediaQuery,l=i.scope;return ce({selectors:[e,r],fns:t,vars:n,customVars:o,mediaQuery:a,scope:l})}},pe=function(e,t,n){return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",o=arguments.length>1?arguments[1]:void 0,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=i.mediaQuery,l=i.scope;return[se({selectors:[e,r],fns:t,vars:n,customVars:o,mediaQuery:a,scope:l})]}},fe=function(e,t){return $({},e,t)},he=function(e){return"*[dir=rtl] ".concat(e,", .pe-rtl ").concat(e)},ge=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;return"rgba(".concat(e,", ").concat(t,")")},be=function(e){var t=e.varFns,n=e.customVarFns,r=e.superStyle,o=e.varMixin,i=e.selector,a=e.scopedSelector,l=e.componentVars,c=void 0===l?{}:l,s=e.customVars,d=U({},c,{},s),u=s||d,_=(c.general_styles,function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(c,["general_styles"])),p=void 0!==r?void 0!==s?r(i,c,s):r(i,_):[],f=U({},s?n:{},{},t);return p.concat(Object.keys(o(u)).map(function(e){return f&&void 0!==f[e]?f[e](a,d):null}).filter(function(e){return e}))},me=function(e){var t=e.varFns,n=e.customVarFns,r=e.superLayout,o=e.varMixin,i=void 0===o?function(e){return e}:o;return function(e,o,a){return be({varFns:t,customVarFns:n,superStyle:r,varMixin:i,selector:e,scopedSelector:e,componentVars:o,customVars:a})}},ve=function(e){var t=e.scopes,n=e.selector,r=e.isNoTouch,o=void 0!==r&&r;return n.split(/\s*,\s*/).map(function(e){return function(e){var t=e.scopes,n=e.selector;return e.isNoTouch?t.map(function(e){return e+n+":hover"}).join(","):t.map(function(e){return e+n}).join(",")}({scopes:t,selector:e,isNoTouch:o})}).join("")},ye=[{scopes:[".pe-dark-tone",".pe-dark-tone "],varFnName:"darkTintFns",isNoTouch:!1},{scopes:["",".pe-light-tone",".pe-light-tone "],varFnName:"lightTintFns",isNoTouch:!1},{scopes:[".pe-no-touch .pe-dark-tone "],varFnName:"darkTintHoverFns",isNoTouch:!0},{scopes:[".pe-no-touch ",".pe-no-touch .pe-light-tone "],varFnName:"lightTintHoverFns",isNoTouch:!0}],xe=function(e){var t=e.varFns,n=void 0===t?{}:t,r=e.superColor,o=e.varMixin,i=void 0===o?function(e){return e}:o;return function(e,t,o){return ye.map(function(a){var l,c=a.scopes,s=a.varFnName,d=a.isNoTouch;return l={selector:e,scopedSelector:ve({scopes:c,selector:e,isNoTouch:d}),componentVars:t,customVars:o,varFns:n[s],superColor:r,varMixin:i},be({varFns:l.varFns,superStyle:l.superColor,varMixin:l.varMixin,selector:l.selector,scopedSelector:l.scopedSelector,componentVars:l.componentVars,customVars:l.customVars})})}},we=function(e,t){e||console.error("createMarker requires param `vars`");var n=function(e,t){var n=Object.keys(t).filter(function(t){return!0===e[t]}).join(".");return n?'"'.concat(n,'"'):void 0}(e,t);return n?{":before":{content:n,display:"none"}}:void 0},ke=[{".layout, .layout.horizontal":V.layout,".layout.horizontal.inline, .layout.vertical.inline":V.layoutInline,".layout.horizontal":V.layoutHorizontal,".layout.horizontal.reverse":V.layoutHorizontalReverse,".layout.vertical":V.layoutVertical,".layout.vertical.reverse":V.layoutVerticalReverse,".layout.wrap":V.layoutWrap,".layout.wrap.reverse":V.layoutWrapReverse,".flex":V.flex(1),".span.flex":{display:"block"},".flex.auto-vertical":V.flexAutoVertical,".flex.auto":V.flexAuto,".flex.none":V.flexIndex("none"),".flex.one":V.flexIndex(1),".flex.two":V.flexIndex(2),".flex.three":V.flexIndex(3),".flex.four":V.flexIndex(4),".flex.five":V.flexIndex(5),".flex.six":V.flexIndex(6),".flex.seven":V.flexIndex(7),".flex.eight":V.flexIndex(8),".flex.nine":V.flexIndex(9),".flex.ten":V.flexIndex(10),".flex.eleven":V.flexIndex(11),".flex.twelve":V.flexIndex(12),".layout.start":V.layoutStart,".layout.center, .layout.center-center":V.layoutCenter,".layout.end":V.layoutEnd,".layout.start-justified":V.layoutStartJustified,".layout.center-justified, .layout.center-center":V.layoutCenterJustified,".layout.end-justified":V.layoutEndJustified,".layout.around-justified":V.layoutAroundJustified,".layout.justified":V.layoutJustified,".self-start":V.selfStart,".self-center":V.selfCenter,".self-end":V.selfEnd,".self-stretch":V.selfStretch}];de("app_styles",[{body:{"background-color":"whitesmoke",padding:"0px",margin:"0px"},".cinotepad-candidates-button":{"vertical-align":"bottom"}}]);const Oe={start(){this.decoder=new TextDecoder(this.encoding,this.options)},transform(e,t){this.decoder?t.enqueue(this.decoder.decode(e,{stream:!0})):t.enqueue(e)}};class Se extends TransformStream{constructor(e="utf-8",t={}){var n=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(t,[]);let r=Object.assign(Object.assign({},Oe),{encoding:e,options:n});super(r),this.tds=r}get encoding(){var e,t;return null!==(t=null===(e=this.tds.decoder)||void 0===e?void 0:e.encoding)&&void 0!==t?t:"utf-8"}get fatal(){var e,t;return null!==(t=null===(e=this.tds.decoder)||void 0===e?void 0:e.fatal)&&void 0!==t&&t}get ignoreBOM(){var e,t;return null!==(t=null===(e=this.tds.decoder)||void 0===e?void 0:e.ignoreBOM)&&void 0!==t&&t}}const je={transform(e,t){var n;let r,o=0;for(;;){if(r=e.indexOf("\n",o),!(r>-1)){let r=e.substring(o);r=r.replace(new RegExp("\\r","g"),""),0==r.length?this.remainChunk&&(r=this.remainChunk+r,t.enqueue(r),delete this.remainChunk):this.remainChunk=null!==(n=this.remainChunk)&&void 0!==n?n:""+r;break}{let n=e.substring(o,r);n=n.replace(new RegExp("\\r","g"),""),this.remainChunk&&(n=this.remainChunk+n,delete this.remainChunk),t.enqueue(n),o=r+1}}},flush(e){this.remainChunk&&(e.enqueue(this.remainChunk),delete this.remainChunk)}};class Ce extends TransformStream{constructor(e={}){var t=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,[]);super(Object.assign(Object.assign({},je),{options:t}))}}var ze,Pe=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,l)}c((r=r.apply(e,t||[])).next())})};!function(e){e[e.INPUT=0]="INPUT",e[e.SELECT=1]="SELECT"}(ze||(ze={}));class Te{constructor(){this.keyname={},this.candidateList=[],this.currentPage=0,this.maxNumOfKeys=1,this.ename="",this.cname="",this.prompt="",this.selkey="1234567890",this.dupsel=this.selkey.length,this.endkey="",this.spaceStyle=4,this.keepKeyCase=!1,this.symbolKbm=!1,this.phaseAutoSkipEndKey=!1,this.flagAutoSelectByPhase=!1,this.flagDispPartialMatch=!1,this.flagDispFullMatch=!1,this.flagVerticalSelection=!1,this.flagPressFullAutoSend=!1,this.flagUniqueAutoSend=!1,this._enable=!0,this._status=ze.INPUT,this._keys=""}set enable(e){this._enable=e,this._enable||this.resetKeys()}get enable(){return this._enable}get totalPage(){if(this.candidateList){let e=this.dupsel;return 1==this.spaceStyle&&e++,Math.ceil(this.candidateList.length/e)}return 0}get currentCandidateList(){if(this.candidateList.length>0){let e=this.dupsel;return 1==this.spaceStyle&&e++,this.candidateList.slice((this.currentPage-1)*e,Math.min(this.currentPage*e,this.candidateList.length))}return this.candidateList}_fireCandidateChange(){0==this.totalPage?this.currentPage=0:this.currentPage=1,"function"==typeof this.onCurrentCandidatesChange&&this.onCurrentCandidatesChange(this.currentCandidateList),"function"==typeof this.onCandidatesChange&&this.onCandidatesChange(this.candidateList)}resetKeys(){this._keys="",this.candidateList=[],this._status=ze.INPUT,"function"==typeof this.onKeynamesChange&&this.onKeynamesChange(""),this._fireCandidateChange()}deleteContentBackward(){if(this.enable){if(this._status==ze.INPUT){if(this._keys.length>1){const e=this._keys.charAt(this._keys.length-2);return this._keys=this._keys.substring(0,this._keys.length-2),this.pushKey(e),!0}return 1==this._keys.length&&(this.resetKeys(),!0)}return this._status==ze.SELECT&&(this.resetKeys(),!0)}return!1}pushKey(e){return Pe(this,void 0,void 0,function*(){const t=this,n=function(e){t._keys="",t.candidateList=[],t._status=ze.INPUT,"function"==typeof t.onKeynamesChange&&t.onKeynamesChange(""),t._fireCandidateChange(),"function"==typeof t.onCommit&&t.onCommit(e)};if(!t.enable||!t.db)return n(e),void console.log(`Commit text:${e}`);console.log(`Push key:${e}`);const r=t.db.transaction(["quick","chardef"]),o=" "==e,i=t.endkey.indexOf(e)>-1,a=t.selkey.indexOf(e)>-1,l="string"==typeof t.keyname[e],c=function(e){return Pe(this,void 0,void 0,function*(){return new Promise(function(t,n){const o=[];r.objectStore("chardef").index("keycode").openCursor(IDBKeyRange.only(e)).onsuccess=function(e){const n=e.target.result;n?(o.push(n.value.candidate),n.continue()):t(o)}})})},s=t._keys,d=t.candidateList;switch(t._status){case ze.INPUT:let u=[],_=[];if(t.candidateList=[],l?(t._keys+=e,(t.flagDispFullMatch||i||2==t.spaceStyle&&t._keys.length==t.maxNumOfKeys)&&(u=yield function(e){return Pe(this,void 0,void 0,function*(){return new Promise(function(t,n){let o=[];r.objectStore("quick").get(e).onsuccess=function(e){if(e.target.result){const t=e.target.result.candidates;"string"==typeof t&&t.length>0&&(o=o.concat(t.split("")))}t(o)}})})}(t._keys),u.length<1&&(_=yield c(t._keys)))):o&&(_=yield c(t._keys)),u.length>0?t.candidateList=u:t.candidateList=_,"function"!=typeof t.onKeynamesChange||a&&0!=d.length||t.onKeynamesChange(t._keys.split("").map(e=>t.keyname[e]).join("")),!t.flagDispFullMatch||0==t.candidateList.length&&0==d.length||t._fireCandidateChange(),i||o||2==t.spaceStyle&&t._keys.length==t.maxNumOfKeys){if(t.candidateList.length>1)return o&&1==t.spaceStyle?void n(t.candidateList[0]):(t._status=ze.SELECT,t.flagDispFullMatch||t._fireCandidateChange(),void("function"==typeof t.onEndKey&&t.onEndKey(t.currentCandidateList)));if(1==t.candidateList.length)return void n(t.candidateList[0])}if(a&&s.length>0&&d.length>0){t._keys=s,t.candidateList=d,t._fireCandidateChange();let r=t.selkey.indexOf(e);return 1==t.spaceStyle&&r++,void(t.currentCandidateList.length>r&&n(t.currentCandidateList[r]))}if(!l)return void n(e);if(i&&1==t._keys.length)return void n(e);break;case ze.SELECT:if(a){let r=t.selkey.indexOf(e);return 1==t.spaceStyle&&r++,void(t.currentCandidateList.length>r&&n(t.currentCandidateList[r]))}return o?t.totalPage>1?void t.nextCandidateList():void n(t.currentCandidateList[0]):(n(t.currentCandidateList[0]),void t.pushKey(e))}})}previousCandidateList(){return 0==this.totalPage?(this.currentPage=0,!1):(1==this.currentPage?this.currentPage=this.totalPage:this.currentPage--,"function"==typeof this.onCurrentCandidatesChange&&this.onCurrentCandidatesChange(this.currentCandidateList),!0)}nextCandidateList(){return 0==this.totalPage?(this.currentPage=0,!1):(this.currentPage==this.totalPage?this.currentPage=1:this.currentPage++,"function"==typeof this.onCurrentCandidatesChange&&this.onCurrentCandidatesChange(this.currentCandidateList),!0)}onKeynamesChange(e){}onCandidatesChange(e){}onCurrentCandidatesChange(e){}onEndKey(e){}onCommit(e){}}var Re=function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function l(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(a,l)}c((r=r.apply(e,t||[])).next())})};function Ee(e){let t;const n=e.indexOf(" "),r=e.indexOf("\t");return t=-1==r||n>-1&&n<r?n:r,t}function Le(e,t){return Re(this,void 0,void 0,function*(){const{done:n,value:r}=yield e.read();if(n)return t;if(r){const e=r;if(e.length>0){if(e.startsWith("%keyname end"))return t;if(e.startsWith(" # ")&&e.length>3)t.keyname["#"]=e.substring(3);else{const n=Ee(e);n>0&&n<e.length-1&&(t.keyname[e.substring(0,n)]=e.substring(n+1).trim())}}}return yield Le(e,t)})}function Ie(e,t){return Re(this,void 0,void 0,function*(){const{done:n,value:r}=yield e.read();if(n)return t;if(r){const e=r;let n,o;if(e.length>0&&t.unwrittenQuickList){const r=t.unwrittenQuickList;if(e.startsWith("%quick end"))return t;if(e.startsWith(" # ")&&e.length>3)n="#",o=e.substring(3).trim(),r.push({keycode:n,candidates:o});else{const i=Ee(e);i>0&&i<e.length-1&&(n=e.substring(0,i),o=e.substring(i+1).trim(),r.push({keycode:n,candidates:o}),t.maxNumOfKeys=Math.max(t.maxNumOfKeys,n.length))}}}return yield Ie(e,t)})}function Ne(e,t){return Re(this,void 0,void 0,function*(){const{done:n,value:r}=yield e.read();if(n)return t;if(r){const e=r;let n,o;if(e.length>0&&t.unwrittenCharDefList){const r=t.unwrittenCharDefList;if(e.startsWith("%chardef end"))return t;if(e.startsWith(" # ")&&e.length>3)n="#",o=e.substring(3).trim(),r.push({keycode:n,candidate:o});else{const i=Ee(e);i>0&&i<e.length-1&&(n=e.substring(0,i),o=e.substring(i+1).trim(),r.push({keycode:n,candidate:o}),t.maxNumOfKeys=Math.max(t.maxNumOfKeys,n.length))}}}return yield Ne(e,t)})}function Fe(e,t){return Re(this,void 0,void 0,function*(){const{done:n,value:r}=yield e.read();if(n){if(0==t.cname.length&&(t.cname=t.ename),(t.dupsel<0||isNaN(t.dupsel))&&(t.dupsel=t.selkey.length),!t.keepKeyCase){const e=t.keyname;t.keyname={};for(let n in e)t.keyname[n.toLowerCase()]=e[n];if(t.unwrittenQuickList){const e=t.unwrittenQuickList;for(let t=0;t<e.length;t++)e[t].keycode=e[t].keycode.toLowerCase()}if(t.unwrittenCharDefList){const e=t.unwrittenCharDefList;for(let t=0;t<e.length;t++)e[t].keycode=e[t].keycode.toLowerCase()}}return t}if(r){let n=r;if(n=function(e){let t=e.indexOf("#");return t>-1&&(e=e.substring(0,t).trim()),e}(n),n.length>0)if(n.startsWith("%gen_inp"));else if(n.startsWith("%ename "))t.ename=n.substring(7);else if(n.startsWith("%cname "))t.cname=n.substring(7);else if(n.startsWith("%prompt "))t.prompt=n.substring(8);else if(n.startsWith("%selkey "))t.selkey=n.substring(8);else if(n.startsWith("%dupsel "))t.dupsel=parseInt(n.substring(8));else if(n.startsWith("%endkey "))t.endkey=n.substring(8);else if(n.startsWith("%space_style ")){let e=parseInt(n.substring(13));[1,2,4].indexOf(e)<0?t.spaceStyle=4:t.spaceStyle=e}else n.startsWith("%keep_key_case")?t.keepKeyCase=!0:n.startsWith("%symbol_kbm")?t.symbolKbm=!0:n.startsWith("%phase_auto_skip_endkey")?t.phaseAutoSkipEndKey=!0:n.startsWith("%flag_auto_select_by_phrase")?t.flagAutoSelectByPhase=!0:n.startsWith("%flag_disp_partial_match")?t.flagDispPartialMatch=!0:n.startsWith("%flag_disp_full_match")?t.flagDispFullMatch=!0:n.startsWith("%flag_vertical_selection")?t.flagVerticalSelection=!0:n.startsWith("%flag_press_full_auto_send")?t.flagPressFullAutoSend=!0:n.startsWith("%flag_unique_auto_send")?t.flagUniqueAutoSend=!0:n.startsWith("%keyname begin")?(t.keyname={},t=yield Le(e,t)):n.startsWith("%quick begin")?(t.unwrittenQuickList=[],t=yield Ie(e,t)):n.startsWith("%chardef begin")&&(t.unwrittenCharDefList=[],t=yield Ne(e,t))}return yield Fe(e,t)})}var De=n(862),Ae=n.n(De);function He(){return He=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},He.apply(this,arguments)}function We(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var Be={component:"pe-toolbar",compact:"pe-toolbar--compact",appBar:"pe-toolbar--app-bar",title:"pe-toolbar__title",centeredTitle:"pe-toolbar__title--center",indentedTitle:"pe-toolbar__title--indent",fullbleed:"pe-toolbar--fullbleed",border:"pe-toolbar--border"};function Me(){return Me=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Me.apply(this,arguments)}var qe={component:"pe-shadow",bottomShadow:"pe-shadow__bottom",topShadow:"pe-shadow__top",animated:"pe-shadow--animated",depth_n:"pe-shadow--depth-",with_active_shadow:"pe-with-active-shadow"},Ve=function(e){return void 0!==e?"".concat(qe.depth_n).concat(Math.min(5,e)):1};function $e(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Ke(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$e(Object(n),!0).forEach(function(t){Je(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$e(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function Ue(e){return Ue="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ue(e)}function Je(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Qe(){return Qe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Qe.apply(this,arguments)}function Ze(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Xe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Xe(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ye,Ge=JSON.stringify,et=String,tt="object",nt=function(e,t){return t},rt=function(e,t,n){var r=et(t.push(n)-1);return e.set(n,r),r},ot=function(e,t,n){for(var r=t&&Ue(t)===tt?function(e,n){return""===e||-1<t.indexOf(e)?n:void 0}:t||nt,o=new Map,i=[],a=[],l=+rt(o,i,r.call({"":e},"",e)),c=!l;l<i.length;)c=!0,a[l]=Ge(i[l++],s,n);return"["+a.join(",")+"]";function s(e,t){if(c)return c=!c,t;var n=r.call(this,e,t);switch(Ue(n)){case tt:if(null===n)return n;case"string":return o.get(n)||rt(o,i,n)}return n}},it=Function.prototype.call.bind(Function.prototype.call),at=function(){return Ae().redraw()},lt=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return function(t,n){var r=Ye;if(function(e){var t=Ye,n=t.depsIndex;t.depsIndex+=1;var r=t.depsStates[n]||[],o=void 0===e||!!Array.isArray(e)&&(e.length>0?!e.every(function(e,t){return e===r[t]}):!t.setup);return void 0!==e&&(t.depsStates[n]=e),o}(n)){var o=r.depsIndex,i=function(){var e=t();"function"==typeof e&&(r.teardowns.set(o,e),r.teardowns.set("_",at))},a=r.teardowns.get(o);try{"function"==typeof a&&a()}finally{r.teardowns.delete(o)}r.updates.push(e?function(){return new Promise(function(e){return requestAnimationFrame(e)}).then(i)}:i)}}},ct=function(e,t){var n=Ye,r=n.statesIndex;return n.statesIndex+=1,n.setup||(n.states[r]=e),[n.states[r],function(e){var o=n.states[r],i=t?t(e,r):e;n.states[r]=i,ot(i)!==ot(o)&&at()},r]},st=function(e){var t=Ye;return ct(e,function(e,n){return"function"==typeof e?e(t.states[n],n):e})},dt=lt(!0);function ut(e,t,n){var r,o,i,a,l=Ye,c=!l.setup&&n?n(t):t;return o=(r=Ze(ct(c),3))[0],i=r[1],a=r[2],[o,function(t){var n=l.states[a];return i(e(n,t))}]}lt();var _t=function(e){return Ze(ct({current:e}),1)[0]},pt={accept:"accept",acceptcharset:"acceptcharset",accesskey:"accesskey",action:"action",allowfullscreen:"allowfullscreen",allowtransparency:"allowtransparency",alt:"alt",async:"async",autocomplete:"autocomplete",autofocus:"autofocus",autoplay:"autoplay",capture:"capture",cellpadding:"cellpadding",cellspacing:"cellspacing",challenge:"challenge",charset:"charset",checked:"checked",class:"className",classid:"classid",classname:"className",className:"className",colspan:"colspan",cols:"cols",content:"content",contenteditable:"contenteditable",contextmenu:"contextmenu",controls:"controls",coords:"coords",crossorigin:"crossorigin",data:"data",datetime:"datetime",default:"default",defer:"defer",dir:"dir",disabled:"disabled",download:"download",draggable:"draggable",enctype:"enctype",for:"for",form:"form",formaction:"formaction",formenctype:"formenctype",formmethod:"formmethod",formnovalidate:"formnovalidate",formtarget:"formtarget",frameborder:"frameborder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hreflang",htmlfor:"htmlfor",httpequiv:"httpequiv",icon:"icon",id:"id",inputmode:"inputmode",integrity:"integrity",is:"is",keyparams:"keyparams",keytype:"keytype",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",low:"low",manifest:"manifest",marginheight:"marginheight",marginwidth:"marginwidth",max:"max",maxlength:"maxlength",media:"media",mediagroup:"mediagroup",method:"method",min:"min",minlength:"minlength",multiple:"multiple",muted:"muted",name:"name",novalidate:"novalidate",nonce:"nonce",onblur:"onblur",onchange:"onchange",onclick:"onclick",onfocus:"onfocus",oninput:"oninput",onkeydown:"onkeydown",onkeyup:"onkeyup",onmousedown:"onmousedown",onmouseout:"onmouseout",onmouseover:"onmouseover",onmouseup:"onmouseup",onscroll:"onscroll",onsubmit:"onsubmit",ontouchend:"ontouchend",ontouchmove:"ontouchmove",ontouchstart:"ontouchstart",open:"open",optimum:"optimum",pattern:"pattern",placeholder:"placeholder",poster:"poster",preload:"preload",radiogroup:"radiogroup",readonly:"readonly",rel:"rel",required:"required",reversed:"reversed",role:"role",rowspan:"rowspan",rows:"rows",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",span:"span",spellcheck:"spellcheck",src:"src",srcdoc:"srcdoc",srclang:"srclang",srcset:"srcset",start:"start",step:"step",style:"style",summary:"summary",tabindex:"tabindex",target:"target",title:"title",type:"type",usemap:"usemap",value:"value",width:"width",wmode:"wmode",wrap:"wrap"},ft=Ae()||{},ht=ft.trust;ft.trust=function(e,t){return t?Ae()(t,ht(e)):ht(e)},ft.displayName="mithril",ft.fragment=Ae().fragment;var gt=function(e){return{oncreate:function(t){return e(t.dom)}}},bt=function(e,t){var n=function(e){var t=Ye;Ye=e.state;try{e.state.updates.forEach(it)}finally{Qe(e.state,{setup:!0,updates:[],depsIndex:0,statesIndex:0}),Ye=t}};return{oninit:function(e){Qe(e.state,{setup:!1,states:[],statesIndex:0,depsStates:[],depsIndex:0,updates:[],cleanups:new Map,teardowns:new Map})},oncreate:n,onupdate:n,view:function(n){var r=Ye;Ye=n.state;try{return e(Ke(Ke(Ke({},t),n.attrs),{},{vnode:n,children:n.children}))}catch(e){console.error(e)}finally{Ye=r}},onremove:function(e){var t=Ye;Ye=e.state;try{e.state.teardowns.forEach(it)}finally{Ye=t}}}},mt=bt(function(e){var t=e.h,n=e.a,r=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a"]),o=Ve(r.shadowDepth),i=Me({},f(r),r.testId&&{"data-test-id":r.testId},{className:[qe.component,o,r.animated&&qe.animated,r.className||r[n.class]].join(" ")}),a=[r.before,r.content?r.content:r.children,r.after];return t(r.element||"div",i,[a,t("div",{className:[qe.bottomShadow].join(" ")}),t("div",{className:[qe.topShadow].join(" ")})])},{h:ft,a:pt});mt.displayName="Shadow";var vt=bt(function(e){var t=e.h,n=e.a,r=e.Shadow,o=We(e,["h","a","Shadow"]),i=He({},f(o),o.testId&&{"data-test-id":o.testId},{className:[Be.component,o.compact?Be.compact:null,o.fullbleed?Be.fullbleed:null,o.border?Be.border:null,"dark"===o.tone?"pe-dark-tone":null,"light"===o.tone?"pe-light-tone":null,o.className||o[n.class]].join(" ")},o.events),a=o.content||o.children,l=void 0!==o.shadowDepth?t(r,{shadowDepth:o.shadowDepth,animated:!0}):null,c=[o.before,a,o.after,l];return t(o.element||"div",i,c)},{h:ft,a:pt,Shadow:mt}),yt=bt(function(e){var t=e.h,n=e.a,r=We(e,["h","a"]);return t(r.element?r.element:r.url?"a":"div",He({},f(r),r.testId&&{"data-test-id":r.testId},{className:[Be.title,r.indent?Be.indentedTitle:null,r.center?Be.centeredTitle:null,"dark"===r.tone?"pe-dark-tone":null,"light"===r.tone?"pe-light-tone":null,r.className||r[n.class]].join(" ")},r.events,r.url),r.text?r.text:r.content?r.content:r.children)},{h:ft,a:pt});function xt(){return xt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},xt.apply(this,arguments)}function wt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var kt={component:"pe-dialog",placeholder:"pe-dialog__placeholder",holder:"pe-dialog__holder",content:"pe-dialog__content",backdrop:"pe-dialog__backdrop",touch:"pe-dialog__touch",fullScreen:"pe-dialog--full-screen",modal:"pe-dialog--modal",open:"pe-dialog--open",visible:"pe-dialog--visible",showBackdrop:"pe-dialog--backdrop",transition:"pe-dialog--transition",menuContent:"pe-menu__content"},Ot=".".concat(kt.component);function St(){return St=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},St.apply(this,arguments)}function jt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Ct={component:"pe-dialog-pane",actions:"pe-dialog-pane__actions",body:"pe-dialog-pane__body",content:"pe-dialog-pane__content",footer:"pe-dialog-pane__footer",header:"pe-dialog-pane__header",title:"pe-dialog-pane__title",withHeader:"pe-dialog-pane--header",withFooter:"pe-dialog-pane--footer",headerWithTitle:"pe-dialog-pane__header--title",footerWithButtons:"pe-dialog-pane__footer--buttons",footerHigh:"pe-dialog-pane__footer--high",borderBottom:"pe-dialog-pane--border-bottom",borderTop:"pe-dialog-pane--border-top",fullBleed:"pe-dialog-pane--body-full-bleed"},zt={component:"pe-text-button",super:"pe-button",row:"pe-button-row",content:"pe-button__content",label:"pe-button__label",textLabel:"pe-button__text-label",wash:"pe-button__wash",washColor:"pe-button__wash-color",dropdown:"pe-button__dropdown",border:"pe-button--border",contained:"pe-button--contained",disabled:"pe-button--disabled",dropdownClosed:"pe-button--dropdown-closed",dropdownOpen:"pe-button--dropdown-open",extraWide:"pe-button--extra-wide",hasDropdown:"pe-button--dropdown",highLabel:"pe-button--high-label",inactive:"pe-button--inactive",raised:"pe-button--raised",selected:"pe-button--selected",separatorAtStart:"pe-button--separator-start",hasHover:"pe-button--has-hover"},Pt=bt(function(e){var t=e.h,n=e.a,r=e.useState,o=e.useEffect,i=e.useRef,a=e.getRef,l=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a","useState","useEffect","useRef","getRef"]),c=h(l),s=jt(r(),2),d=s[0],u=s[1],_=jt(r(!1),2),p=_[0],g=_[1],b=jt(r(!1),2),m=b[0],v=b[1],y=jt(r(!1),2),x=y[0],w=y[1],k=i(),O=i(),S=i(),j=i(),P=function(){var e=S.current;e&&(v(e.scrollTop>0),w(e.scrollHeight-(e.scrollTop+e.getBoundingClientRect().height)>0))};o(function(){d&&(k.current=d.querySelector(".".concat(Ct.header)),O.current=d.querySelector(".".concat(Ct.footer)),S.current=d.querySelector(".".concat(Ct.body)))},[d]),o(function(){if(S.current){var e=function(){P()};return C("resize",e),function(){z("resize",e)}}},[S.current]),o(function(){P()},[S.current,p]);var T,R,E,L=void 0!==c.header||void 0!==c.title,I=void 0!==c.footer||void 0!==c.footerButtons,N=c.borders||"overflow",F="always"===N||L&&"overflow"===N&&m,D="always"===N||I&&"overflow"===N&&x,A=St({},f(c,{remove:["style"]}),c.testId&&{"data-test-id":c.testId},a(function(e){return e&&!d&&(u(e),c.ref&&c.ref(e))}),{className:[Ct.component,c.fullBleed?Ct.fullBleed:null,F?Ct.borderTop:null,D?Ct.borderBottom:null,L?Ct.withHeader:null,I?Ct.withFooter:null,"dark"===c.tone?"pe-dark-tone":null,"light"===c.tone?"pe-light-tone":null,c.className||c[n.class]].join(" ")},c.formOptions),H=t("div",{className:[Ct.content,c.menu?Ct.menuContent:null].join(" "),style:c.style},[c.header?c.header:c.title?t("div",{className:[Ct.header,Ct.headerWithTitle].join(" ")},t("div",{className:Ct.title},c.title)):null,t("div",(T={className:Ct.body},R=n.onscroll,E=function(){g(!0),clearTimeout(j.current),j.current=setTimeout(function(){g(!1)},50)},R in T?Object.defineProperty(T,R,{value:E,enumerable:!0,configurable:!0,writable:!0}):T[R]=E,T),c.content||c.body||c.menu),c.footer?t("div",{className:Ct.footer},c.footer):c.footerButtons?t("div",{className:[Ct.footer,Ct.footerWithButtons,zt.row].join(" ")},t("div",{className:Ct.actions},c.footerButtons)):null]),W=[c.before,H,c.after];return t(c.element||"form",A,W)},{h:ft,a:pt,useState:st,useEffect:dt,useRef:_t,getRef:gt});Pt.displayName="DialogPane";var Tt=bt(function(e){var t=e.h,n=e.a,r=e.useState,o=e.useEffect,i=e.useRef,a=e.getRef,l=e.useReducer,c=e.Pane,s=e.Shadow,d=e.openDialogsSelector,u=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a","useState","useEffect","useRef","getRef","useReducer","Pane","Shadow","openDialogsSelector"]),_=wt(l(F,N),2),p=_[0],h=_[1],g=wt(r(),2),b=g[0],m=g[1],v=i(),x=i(),w=i(),k=(p||N).isVisible,O=(p||N).isTransitioning,S=function(e){var t=e.isShow,n=e.hideDelay,r=void 0===n?u.hideDelay:n,o=e.referrer;return{transitionState:p,dispatchTransitionState:h,instanceId:u.instanceId,props:xt({},u,{hideDelay:r}),isShow:t,domElements:{el:b,contentEl:w.current,backdropEl:v.current},showClass:kt.visible,transitionClass:kt.transition,referrer:o}},j=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.hideDelay,n=e.referrer;return W(S({isShow:!1,hideDelay:t,referrer:n}))},P=function(){return u.modal||b&&b.classList.contains(kt.modal)||y({element:b,pseudoSelector:":before",prop:"content",contains:'"'.concat("modal",'"')})};o(function(){b&&(v.current=b.querySelector(".".concat(kt.backdrop)),x.current=b.querySelector(".".concat(kt.touch)),w.current=b.querySelector(".".concat(kt.content)))},[b]),o(function(){if(b&&!u.inactive){var e=function e(t){if(!(u.disableEscape&&(u.fullScreen||b&&b.classList.contains(kt.fullScreen)||y({element:b,pseudoSelector:":before",prop:"content",contains:'"'.concat("full_screen",'"')})||P())||"Escape"!==t.key&&"Esc"!==t.key)){var n=document.querySelectorAll(d);n[n.length-1]===b&&(j(),z("keydown",e))}};return C("keydown",e),function(){z("keydown",e)}}},[b,u.inactive]),o(function(){b&&!O&&(u.hide?k&&j():u.show&&(k||W(S({isShow:!0}))))},[b,O,k,u.hide,u.show]);var T,R,E,L=xt({},f(u,{remove:["style"]}),a(function(e){return e&&!b&&(m(e),u.ref&&u.ref(e))}),(T={className:[u.parentClassName||kt.component,u.fromMultipleClassName,u.fullScreen?kt.fullScreen:null,u.modal?kt.modal:null,u.backdrop?kt.showBackdrop:null,"dark"===u.tone?"pe-dark-tone":null,"light"===u.tone?"pe-light-tone":null,u.className||u[n.class]].join(" "),"data-spawn-id":u.spawnId,"data-instance-id":u.instanceId},E=function(e){e.target!==b&&e.target!==v.current&&e.target!==x.current||P()||j()},(R=n.onclick)in T?Object.defineProperty(T,R,{value:E,enumerable:!0,configurable:!0,writable:!0}):T[R]=E,T)),I=u.panesOptions&&u.panesOptions.length?t(c,u.panesOptions[0]):u.panes&&u.panes.length?u.panes[0]:function(e){var t=e.props;return(0,e.h)(e.Pane,{body:t.content||t.body||t.menu||t.children,element:t.element,borders:t.borders,className:t.className,footer:t.footer,footerButtons:t.footerButtons,formOptions:t.formOptions,fullBleed:t.fullBleed,header:t.header,style:t.style,title:t.title})}({h:t,Pane:c,props:u}),D=u.shadowDepth,A=[t("div",{className:kt.backdrop}),t("div",{className:kt.touch}),t("div",{className:[kt.content,u.menu?kt.menuContent:null].join(" ")},[u.fullScreen?null:t(s,{shadowDepth:void 0!==D?D:3,animated:!0}),u.before,I,u.after])];return t("div",L,A)},{h:ft,a:pt,useState:st,useEffect:dt,useRef:_t,getRef:gt,useReducer:ut,Shadow:mt,Pane:Pt,openDialogsSelector:Ot});Tt.displayName="DialogInstance";var Rt=T({options:{name:"dialog",htmlShowClass:"pe-dialog--open",defaultId:"default_dialog",holderSelector:"div.".concat("pe-dialog__holder"),instance:Tt,placeholder:"span.".concat("pe-dialog__placeholder")}}),Et=bt(Rt.render,{h:ft,useState:st,useEffect:dt});function Lt(e){return Lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Lt(e)}function It(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Nt(){return Nt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Nt.apply(this,arguments)}function Ft(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Dt(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}Object.getOwnPropertyNames(Rt).filter(function(e){return"render"!==e}).forEach(function(e){return Et[e]=Rt[e]}),Et.displayName="Dialog";var At={component:"pe-text-button",super:"pe-button",row:"pe-button-row",content:"pe-button__content",label:"pe-button__label",textLabel:"pe-button__text-label",wash:"pe-button__wash",washColor:"pe-button__wash-color",dropdown:"pe-button__dropdown",border:"pe-button--border",contained:"pe-button--contained",disabled:"pe-button--disabled",dropdownClosed:"pe-button--dropdown-closed",dropdownOpen:"pe-button--dropdown-open",extraWide:"pe-button--extra-wide",hasDropdown:"pe-button--dropdown",highLabel:"pe-button--high-label",inactive:"pe-button--inactive",raised:"pe-button--raised",selected:"pe-button--selected",separatorAtStart:"pe-button--separator-start",hasHover:"pe-button--has-hover"},Ht={grid_unit:4,grid_unit_component:8,increment:56,increment_large:64,grid_unit_menu:56,grid_unit_icon_button:48,unit_block_border_radius:4,unit_item_border_radius:4,unit_indent:72,unit_indent_large:80,unit_side_padding:16,unit_touch_height:48,unit_icon_size_small:16,unit_icon_size:24,unit_icon_size_medium:32,unit_icon_size_large:40,unit_screen_size_extra_large:1280,unit_screen_size_large:960,unit_screen_size_medium:480,unit_screen_size_small:320,animation_duration:".18s",animation_curve_slow_in_fast_out:"cubic-bezier(.4, 0, .2, 1)",animation_curve_slow_in_linear_out:"cubic-bezier(0, 0, .2, 1)",animation_curve_linear_in_fast_out:"cubic-bezier(.4, 0, 1, 1)",animation_curve_default:"ease-out",font_weight_light:300,font_weight_normal:400,font_weight_medium:500,font_weight_bold:700,font_size_title:20,line_height:1.5,color_primary:"33, 150, 243",color_primary_active:"30, 136, 229",color_primary_dark:"25, 118, 210",color_primary_faded:"100, 181, 249",color_primary_foreground:"255, 255, 255",color_light_background:"255, 255, 255",color_light_foreground:"0, 0, 0",color_dark_background:"34, 34, 34",color_dark_foreground:"255, 255, 255",blend_light_text_primary:.87,blend_light_text_regular:.73,blend_light_text_secondary:.54,blend_light_text_tertiary:.4,blend_light_text_disabled:.26,blend_light_border_medium:.24,blend_light_border_light:.11,blend_light_background_active:.14,blend_light_background_hover:.06,blend_light_background_hover_medium:.12,blend_light_background_disabled:.09,blend_light_overlay_background:.3,blend_dark_text_primary:1,blend_dark_text_regular:.87,blend_dark_text_secondary:.7,blend_dark_text_tertiary:.4,blend_dark_text_disabled:.26,blend_dark_border_medium:.22,blend_dark_border_light:.1,blend_dark_background_active:.14,blend_dark_background_hover:.08,blend_dark_background_hoverMedium:.12,blend_dark_background_disabled:.12,blend_dark_overlay_background:.3,breakpoint_for_phone_only:599,breakpoint_for_tablet_portrait_up:600,breakpoint_for_tablet_landscape_up:840,breakpoint_for_desktop_up:1280,breakpoint_for_big_desktop_up:1600,breakpoint_for_tv_up:1920,z_toolbar:100,z_menu:1e3,z_app_bar:2e3,z_drawer:3e3,z_notification:5e3,z_dialog:7e3};function Wt(){return Wt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Wt.apply(this,arguments)}var Bt=function(){if(b){var e=document.createElement("fakeelement");for(var t in v)if(void 0!==e.style[t])return v[t]}}(),Mt={component:"pe-ripple",mask:"pe-ripple__mask",waves:"pe-ripple__waves",unconstrained:"pe-ripple--unconstrained",wavesAnimating:"pe-ripple__waves--animating"},qt=bt(function(e){var t,n,r=e.h,o=e.a,i=e.getRef,a=e.useRef,l=e.useState,c=e.useEffect,s=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a","getRef","useRef","useState","useEffect"]),d=(t=l(),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()),u=d[0],_=d[1],p=a(),h=s.target||(u?u.parentElement:void 0),g=function(e){s.disabled||!u||!s.multi&&p.current>0||(s.start&&s.start(e),function(e){var t=e.e,n=e.id,r=e.el,o=e.props,i=e.classes;return new Promise(function(e){var a=document.createElement("div");a.setAttribute("class",i.mask),r.appendChild(a);var l=document.createElement("div");l.setAttribute("class",i.waves),a.appendChild(l);var c=r.getBoundingClientRect(),s=w&&t.touches?t.touches[0].pageX:t.clientX,d=w&&t.touches?t.touches[0].pageY:t.clientY,u=r.offsetWidth,_=r.offsetHeight,p=Math.sqrt(u*u+_*_),f=o.center?c.left+c.width/2:s,h=o.center?c.top+c.height/2:d,g=f-c.left-p/2,b=h-c.top-p/2,v=void 0!==o.startOpacity?o.startOpacity:.2,y=void 0!==o.opacityDecayVelocity?o.opacityDecayVelocity:.35,x=o.endOpacity||0,k=o.startScale||.1,O=o.endScale||2,S=o.duration?o.duration:1/y*.2,j=window.getComputedStyle(r).color,C=l.style;C.width=C.height=p+"px",C.top=b+"px",C.left=g+"px",C["animation-duration"]=C["-webkit-animation-duration"]=C["-moz-animation-duration"]=C["-o-animation-duration"]=S+"s",C.backgroundColor=j,C.opacity=v,C.animationName=n,C.animationTimingFunction=o.animationTimingFunction||Ht.animation_curve_default;var z="@keyframes ".concat(n," {\n      0% {\n        transform:scale(").concat(k,");\n        opacity: ").concat(v,"\n      }\n      100% {\n        transform:scale(").concat(O,");\n        opacity: ").concat(x,";\n      }\n    }");!function(e,t){if(!m){var n=window.document,r=n.createElement("style");r.setAttribute("id",e),r.appendChild(n.createTextNode(t)),n.head.appendChild(r)}}(n,z),l.addEventListener(Bt,function t(c){!function(e){if(!m){var t=document.getElementById(e);t&&t.parentNode&&t.parentNode.removeChild(t)}}(n),l.removeEventListener(Bt,t,!1),o.persistent?(C.opacity=x,C.transform="scale("+O+")"):(l.classList.remove(i.wavesAnimating),a.removeChild(l),r.removeChild(a)),e(c)},!1),l.classList.add(i.wavesAnimating)})}({e,id:"ripple_animation_".concat((new Date).getTime()),el:u,props:s,classes:Mt}).then(function(e){s.end&&s.end(e),p.current--}),p.current++)};c(function(){p.current=0},[]),c(function(){if(h&&h.addEventListener)return k.forEach(function(e){return h.addEventListener(e,g,!1)}),function(){k.forEach(function(e){return h.removeEventListener(e,g,!1)})}},[h]);var b=Wt({},f(s),i(function(e){return e&&!u&&_(e)}),s.testId&&{"data-test-id":s.testId},{className:[Mt.component,s.unconstrained?Mt.unconstrained:null,"dark"===s.tone?"pe-dark-tone":null,"light"===s.tone?"pe-light-tone":null,s.className||s[o.class]].join(" ")}),v=[s.before,s.after];return r(s.element||"div",b,v)},{h:ft,a:pt,getRef:gt,useRef:_t,useState:st,useEffect:dt});function Vt(){return Vt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Vt.apply(this,arguments)}qt.displayName="Ripple";var $t={component:"pe-icon",avatar:"pe-icon--avatar",large:"pe-icon--large",medium:"pe-icon--medium",regular:"pe-icon--regular",small:"pe-icon--small"};function Kt(){return Kt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Kt.apply(this,arguments)}var Ut={component:"pe-svg"},Jt=bt(function(e){var t,n,r=e.h,o=e.a,i=e.useEffect,a=e.useState,l=e.getRef,c=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a","useEffect","useState","getRef"]),s=(t=a(),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()),d=s[0],u=s[1];i(function(){if(d){var e=d.querySelector("svg");e&&e.setAttribute("focusable","false")}},[d]);var _=Kt({},f(c),l(function(e){return e&&!d&&(u(e),c.getRef&&c.getRef(e))}),c.testId&&{"data-test-id":c.testId},{className:[Ut.component,"dark"===c.tone?"pe-dark-tone":null,"light"===c.tone?"pe-light-tone":null,c.className||c[o.class]].join(" ")}),p=[c.before,c.content?c.content:c.children,c.after];return r(c.element||"div",_,p)},{h:ft,a:pt,useEffect:dt,useState:st,getRef:gt}),Qt=bt(function(e){var t=e.h,n=e.a,r=e.SVG,o=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a","SVG"]),i=Vt({},f(o),o.testId&&{"data-test-id":o.testId},{className:[$t.component,g($t,o.size),o.avatar?$t.avatar:null,"dark"===o.tone?"pe-dark-tone":null,"light"===o.tone?"pe-light-tone":null,o.className||o[n.class]].join(" ")},o.events),a=[o.before,o.content?o.content:o.svg?t(r,o.svg):o.src?t("img",{src:o.src}):o.children,o.after];return t(o.element||"div",i,a)},{h:ft,a:pt,SVG:Jt});Qt.displayName="Icon";var Zt=bt(function(e){var t,n=e.h,r=e.a,o=e.getRef,i=e.useState,a=(e.useEffect,e.useRef,e.Ripple),l=e.Shadow,c=e.Icon,s=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a","getRef","useState","useEffect","useRef","Ripple","Shadow","Icon"]),d=s.events||{},u=Dt(i(),2),_=u[0],p=u[1],h=Dt(i(s.inactive),2),g=h[0],b=h[1],m=s.disabled,v=s.inactive||g,y=d[r.onclick]||function(){},x=d[r.onkeyup]||y,w=s.raised?void 0!==s.shadowDepth?s.shadowDepth:1:0,k=!1!==s.animateOnTap,O=!m&&!s.selected&&(s.raised?s.wash:!1!==s.wash),S=function e(t){_.blur(),_.removeEventListener("mouseleave",e)},j=Nt({},f(s,{add:[r.formaction,"type"],remove:["style"]}),o(function(e){e&&!_&&(p(e),s.getRef&&s.getRef(e))}),s.testId&&{"data-test-id":s.testId},{className:[At.super,s.parentClassName||At.component,s.contained?At.contained:null,s.raised?At.contained:null,s.raised?At.raised:null,s.raised&&k?"pe-with-active-shadow":null,s.raised&&k?Ve(w+1):null,O?At.hasHover:null,s.selected?At.selected:null,s.highLabel?At.highLabel:null,s.extraWide?At.extraWide:null,m?At.disabled:null,v?At.inactive:null,s.separatorAtStart?At.separatorAtStart:null,s.border||s.borders?At.border:null,s.dropdown?At.hasDropdown:null,s.dropdown?s.dropdown.open?At.dropdownOpen:At.dropdownClosed:null,"dark"===s.tone?"pe-dark-tone":null,"light"===s.tone?"pe-light-tone":null,s.className||s[r.class]].join(" ")},v?null:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ft(n,!0).forEach(function(t){It(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ft(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}(It({},r.tabindex,m||v?-1:s[r.tabindex]||0),d,(It(t={},r.onmousedown,function(e){return _&&_.addEventListener&&_.addEventListener("mouseleave",S),s.events&&s.events[r.onmousedown]&&s.events[r.onmousedown](e)}),It(t,r.onclick,function(e){return document.activeElement===_&&document.activeElement.blur(),void 0!==s.inactivate&&(b(!0),setTimeout(function(){return b(!1)},1e3*s.inactivate)),y(e)}),It(t,r.onkeyup,function(e){13===e.keyCode&&document.activeElement===_&&(document.activeElement.blur(),x&&x(e)),s.events&&s.events[r.onkeyup]&&s.events[r.onkeyup](e)}),t)),s.url,m?{disabled:!0}:null),C=void 0!==s.ink&&!1===s.ink,z=s.content?s.content:void 0!==s.label?"object"===Lt(s.label)?s.label:n("div",{className:At.label},n("div",{className:At.textLabel,style:s.textStyle},s.label)):s.children,P=n("div",{className:At.content,style:s.style},[n(l,{shadowDepth:void 0!==w?w:0,animated:!0}),m||C?null:n(a,Nt({},{target:_},s.ripple)),n("div",{className:At.wash},n("div",{className:At.washColor})),z,s.dropdown?n(c,{className:At.dropdown,svg:{content:n.trust('<svg xmlns="http://www.w3.org/2000/svg" id="dd-down-svg" width="24" height="24" viewBox="0 0 24 24"><path d="M7 10l5 5 5-5z"/></svg>')}}):null]);return n(s.element||"a",j,[s.before,P,s.after])},{h:ft,a:pt,getRef:gt,useState:st,useEffect:dt,useRef:_t,Ripple:qt,Shadow:mt,Icon:Qt});function Xt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Yt(){return Yt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Yt.apply(this,arguments)}var Gt={general_styles:function(e){return[]}},en=function(e){return Xt({},"color_"+e+"_raised_background",function(t,n){return[fe(t,{".pe-spinner--raised":{backgroundColor:n["color_"+e+"_raised_background"]}})]})},tn=xe({varFns:{lightTintFns:Yt({},Gt,en("light")),darkTintFns:Yt({},Gt,en("dark"))}}),nn=function(e){return{width:e+"px",height:e+"px"}},rn=function(e){var t=Math.round(.25*e),n=e+2*t;return{width:n+"px",height:n+"px",padding:t+"px"}},on={general_styles:function(e){return[fe(e,{transitionProperty:"all",".pe-spinner--raised":{position:"relative",borderRadius:"50%"}})]},animation_show_css:function(e,t){return[fe(e,{".pe-spinner--visible, &.pe-spinner--permanent":[t.animation_show_css]})]},animation_hide_css:function(e,t){return Xt({},e,t.animation_hide_css)},animation_delay:function(e,t){return[fe(e,{transitionDelay:t.animation_delay})]},animation_duration:function(e,t){return[fe(e,{transitionDuration:t.animation_duration})]},animation_timing_function:function(e,t){return[fe(e,{transitionTimingFunction:t.animation_timing_function})]},size_small:function(e,t){return[fe(e,{".pe-spinner--small":nn(t.size_small),".pe-spinner--raised":{".pe-spinner--small":rn(t.size_small)}})]},size_regular:function(e,t){return[fe(e,{".pe-spinner--regular":nn(t.size_regular),".pe-spinner--raised":{".pe-spinner--regular":rn(t.size_regular)}})]},size_medium:function(e,t){return[fe(e,{".pe-spinner--medium":nn(t.size_medium),".pe-spinner--raised":{".pe-spinner--medium":rn(t.size_medium)}})]},size_large:function(e,t){return[fe(e,{".pe-spinner--large":nn(t.size_large),".pe-spinner--raised":{".pe-spinner--large":rn(t.size_large)}})]},size_fab:function(e,t){return[fe(e,{".pe-spinner--fab":nn(t.size_fab),".pe-spinner--raised":{".pe-spinner--fab":rn(t.size_fab)}})]}},an=me({varFns:on}),ln={general_styles:!0,animation_delay:"0s",animation_duration:".220s",animation_hide_css:"opacity: 0;",animation_show_css:"opacity: 1;",animation_timing_function:"ease-in-out",size_fab:7*Ht.grid_unit_component,size_large:6*Ht.grid_unit_component,size_medium:5*Ht.grid_unit_component,size_regular:4*Ht.grid_unit_component,size_small:3*Ht.grid_unit_component,color_light_raised_background:ge(Ht.color_light_background),color_dark_raised_background:ge(Ht.color_light_background)},cn=[an,tn],sn=".".concat("pe-spinner");function dn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function un(){return un=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},un.apply(this,arguments)}function _n(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}_e(sn,cn,ln),pe(sn,cn,ln);var pn=function(e,t){return function(n,r){return[fn(e,t,n,r),hn(e,t,n,r)]}},fn=function(e,t,n,r){return fe(n,dn({},".pe-shadow--depth-".concat(t," .pe-shadow__").concat(e),{boxShadow:r["shadow_".concat(e,"_depth_").concat(t)]}))},hn=function(e,t,n,r){if(5===t)return[];var o=t+1,i=".pe-with-active-shadow.pe-shadow--depth-".concat(o);return[fe("".concat(i,":focus ").concat(n,", ").concat(i,":active ").concat(n),dn({}," .pe-shadow__".concat(e),{boxShadow:r["shadow_".concat(e,"_depth_").concat(o)]}))]},gn=function(e,t){return fe(".pe-with-active-shadow ".concat(e),{" .pe-shadow__bottom, .pe-shadow__top":{transition:t.transition}})},bn=function(e,t,n,r){return fe(e,dn({}," .pe-shadow__".concat(r),{boxShadow:t["shadow_".concat(r,"_depth_").concat(n)]}))},mn=function(e,t,n){return[bn(e,t,n,"top"),bn(e,t,n,"bottom")]},vn=function(e,t){return void 0!==t.shadow_depth?mn(e,t,t.shadow_depth):null},yn={shadow_depth:vn},xn=un({},{general_styles:function(e,t){return[fe(e,[G(),mn(e,t,1),{borderRadius:"inherit",pointerEvents:"none"," .pe-shadow__bottom, .pe-shadow__top":[G(),{borderRadius:"inherit"}]}])]},transition:function(e,t){return[fe(e,{".pe-shadow--animated":{" .pe-shadow__bottom, .pe-shadow__top":{transition:t.transition}}}),gn(e,t)]},shadow_depth:vn},[0,1,2,3,4,5].reduce(function(e,t){return e["shadow_top_depth_".concat(t)]=pn("top",t),e["shadow_bottom_depth_".concat(t)]=pn("bottom",t),e},{})),wn=me({varFns:xn}),kn={shadow_top_depth_0:"none",shadow_bottom_depth_0:"none",shadow_top_depth_1:"none",shadow_bottom_depth_1:"0 1px 4px 0 rgba(0, 0, 0, 0.37)",shadow_top_depth_2:"0 2px 2px 0 rgba(0, 0, 0, 0.2)",shadow_bottom_depth_2:"0 6px 10px 0 rgba(0, 0, 0, 0.3)",shadow_top_depth_3:"0 11px 7px 0 rgba(0, 0, 0, 0.19)",shadow_bottom_depth_3:"0 13px 25px 0 rgba(0, 0, 0, 0.3)",shadow_top_depth_4:"0 14px 12px 0 rgba(0, 0, 0, 0.17)",shadow_bottom_depth_4:"0 20px 40px 0 rgba(0, 0, 0, 0.3)",shadow_top_depth_5:"0 17px 17px 0 rgba(0, 0, 0, 0.15)",shadow_bottom_depth_5:"0 27px 55px 0 rgba(0, 0, 0, 0.3)",shadow_depth:void 0},On=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?_n(n,!0).forEach(function(t){dn(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):_n(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({general_styles:!0,transition:"box-shadow ".concat(Ht.animation_duration," ease-out")},kn),Sn=[wn],jn=".".concat("pe-shadow"),Cn=(_e(jn,Sn,On),pe(jn,Sn,On),{component:"pe-text-button",super:"pe-button",row:"pe-button-row",content:"pe-button__content",label:"pe-button__label",textLabel:"pe-button__text-label",wash:"pe-button__wash",washColor:"pe-button__wash-color",dropdown:"pe-button__dropdown",border:"pe-button--border",contained:"pe-button--contained",disabled:"pe-button--disabled",dropdownClosed:"pe-button--dropdown-closed",dropdownOpen:"pe-button--dropdown-open",extraWide:"pe-button--extra-wide",hasDropdown:"pe-button--dropdown",highLabel:"pe-button--high-label",inactive:"pe-button--inactive",raised:"pe-button--raised",selected:"pe-button--selected",separatorAtStart:"pe-button--separator-start",hasHover:"pe-button--has-hover"});function zn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Pn(){return Pn=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Pn.apply(this,arguments)}function Tn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Rn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Tn(n,!0).forEach(function(t){zn(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Tn(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}var En={general_styles:function(e){return[fe(e,{userSelect:"none","-moz-user-select":"none",outline:"none",padding:0,textDecoration:"none",textAlign:"center",cursor:"pointer",".pe-button--selected, &.pe-button--disabled, &.pe-button--inactive":{cursor:"default",pointerEvents:"none"}," .pe-button__content":{position:"relative",borderRadius:"inherit"}," .pe-button__label":{position:"relative",display:"block",borderRadius:"inherit",pointerEvents:"none"}," .pe-button__wash, .pe-button__wash-color":[G(),{zIndex:0,borderRadius:"inherit",pointerEvents:"none"}]}),{".pe-button-row":{fontSize:0,lineHeight:0}}]},row_margin_h:function(e,t){return[{".pe-button-row":zn({margin:"0 -".concat(t.row_margin_h,"px")}," ".concat(e),{margin:"0 ".concat(t.row_margin_h,"px")})}]}},Ln=me({varFns:En}),In=function(e,t,n){return fe(e,{":not(.pe-button--disabled)":{" .pe-button__content":{borderColor:t["color_"+n+"_border"]}}})},Nn={general_styles:function(){return[]}},Fn=function(e){var t;return zn(t={},"color_"+e+"_text",function(t,n){return[fe(t,{":not(.pe-button--disabled)":{"&, &:link, &:visited":{color:n["color_"+e+"_text"]}}})]}),zn(t,"color_"+e+"_disabled_text",function(t,n){return[fe(t,{".pe-button--disabled":{color:n["color_"+e+"_disabled_text"]}})]}),zn(t,"color_"+e+"_background",function(t,n){return[fe(t,{":not(.pe-button--disabled):not(.pe-button--selected)":{" .pe-button__content":{backgroundColor:n["color_"+e+"_background"]}}})]}),zn(t,"color_"+e+"_active_background",function(t,n){return[fe(t,{":not(.pe-button--disabled)":{".pe-button--selected":{" .pe-button__content":{backgroundColor:n["color_"+e+"_active_background"]}}}})]}),zn(t,"color_"+e+"_disabled_background",function(t,n){return[fe(t,{".pe-button--disabled":{" .pe-button__content":{backgroundColor:n["color_"+e+"_disabled_background"]}}})]}),zn(t,"color_"+e+"_wash_background",function(t,n){return[fe(t,{" .pe-button__wash-color":{backgroundColor:n["color_"+e+"_wash_background"]}})]}),zn(t,"color_"+e+"_wash_opacity",function(t,n){return[fe(t,{" .pe-button__wash-color":{opacity:n["color_"+e+"_wash_opacity"]}})]}),zn(t,"color_"+e+"_border",function(t,n){return[In("".concat(t,".pe-button--border"),n,e)]}),zn(t,"border",function(t,n){return[In(t,n,e)]}),zn(t,"color_"+e+"_active_border",function(t,n){return[fe(t,{".pe-button--border.pe-button--selected":{" .pe-button__content":{borderColor:n["color_"+e+"_active_border"]}}})]}),zn(t,"color_"+e+"_disabled_border",function(t,n){return[fe(t,{".pe-button--border.pe-button--disabled":{" .pe-button__content":{borderColor:n["color_"+e+"_disabled_border"]}}})]}),zn(t,"color_"+e+"_icon",function(t,n){return[fe(t,{" .pe-button__dropdown":{color:n["color_"+e+"_icon"]}})]}),zn(t,"color_"+e+"_separator",function(t,n){return[fe(t,{".pe-button--separator-start":{" .pe-button__content":{borderColor:n["color_"+e+"_separator"]}}})]}),t},Dn=function(e){var t;return zn(t={},"color_"+e+"_hover",function(t,n){return[fe(t,{":not(.pe-button--disabled):not(.pe-button--selected)":{color:n["color_"+e+"_hover"]}})]}),zn(t,"color_"+e+"_hover_border",function(t,n){return[fe(t,{":not(.pe-button--disabled):not(.pe-button--selected)":{" .pe-button__content":{borderColor:n["color_"+e+"_hover_border"]}}})]}),zn(t,"color_"+e+"_hover_background",function(t,n){return[fe(t,{":not(.pe-button--disabled):not(.pe-button--selected)":{" .pe-button__content":{backgroundColor:n["color_"+e+"_hover_background"]}}})]}),zn(t,"color_"+e+"_hover_icon",function(t,n){return[fe(t,{" .pe-button__dropdown":{color:n["color_"+e+"_hover_icon"]}})]}),t},An=xe({varFns:{lightTintFns:Rn({},Nn,{},Fn("light")),darkTintFns:Rn({},Nn,{},Fn("dark")),lightTintHoverFns:Dn("light"),darkTintHoverFns:Dn("dark")}}),Hn=function(e){return function(){return{".pe-button--separator-start .pe-button__content":{borderStyle:e?"none solid none none":"none none none solid"}}}},Wn=Hn(!1),Bn=Hn(!0),Mn=function(e,t){return fe(e,{" .pe-button__dropdown":{minHeight:"calc((1em * ".concat(t.line_height,") + 2 * ").concat(t.label_padding_v,"px)")}})},qn=function(e,t){return fe(e,{".pe-button--high-label":{padding:0," .pe-button__label":{padding:t.outer_padding_v+t.label_padding_v+"px 0"}}})},Vn=function(e,t){return fe(e,{".pe-button--high-label":{" .pe-button__label, .pe-button__dropdown":{minHeight:"calc((1em * ".concat(t.line_height,") + 2 * ").concat(t.outer_padding_v+t.label_padding_v,"px)")}}})},$n=function(e,t,n){var r,o;return fe(e,{" .pe-button__content":{borderRadius:t.border_radius+"px"},":not(:first-child)":{" .pe-button__content":(r={},zn(r,n?"borderTopRightRadius":"borderTopLeftRadius",0),zn(r,n?"borderBottomRightRadius":"borderBottomLeftRadius",0),r)},":not(:last-child)":{" .pe-button__content":(o={},zn(o,n?"borderTopLeftRadius":"borderTopRightRadius",0),zn(o,n?"borderBottomLeftRadius":"borderBottomRightRadius",0),o)}})},Kn=function(e){return fe(e,{" .pe-button__wash, .pe-ripple":G(-1)," .pe-button__content":{borderStyle:"solid"}})},Un=function(e,t){return fe(e,{" .pe-button__content":{borderWidth:t.border_width+"px"}," .pe-button-group & + &":{marginLeft:-t.border_width+"px"}})},Jn=Rn({general_styles:function(e){return[fe(e,[Wn(),{display:"inline-block",background:"transparent",border:"none"," .pe-button__content":{position:"relative",borderWidth:"1px",display:"flex",alignItems:"center",justifyContent:"center",paddingTop:0,paddingBottom:0},".pe-button--border":Kn(e)," .pe-button__wash":{opacity:0},"&:focus:not(:active) .pe-button__wash":{opacity:1},".pe-button--has-hover:hover":{" .pe-button__wash":{opacity:1}}," .pe-button__label, .pe-button__dropdown":{whiteSpace:"pre",userSelect:"none","-moz-user-select":"none"}," .pe-button__text-label":{display:"inline-block",lineHeight:1},".pe-button--dropdown":{minWidth:"0"," .pe-button__dropdown":{position:"relative"}," .pe-svg":{position:"absolute",left:0,top:"50%"}," .pe-button__label + .pe-button__dropdown":{marginLeft:"6px",minWidth:0}}," .pe-button-group &":{minWidth:0}," .pe-button__dropdown .pe-svg":X("transform"),".pe-button--dropdown-open":{" .pe-button__dropdown .pe-svg":{transform:"rotate(-180deg)"}}}]),[fe(he(e),Bn())]]},border_radius:function(e,t){return[fe(e,{" .pe-button__content":{borderRadius:t.border_radius+"px"}}),$n(".pe-button-group ".concat(e),t,!1),$n(he(".pe-button-group ".concat(e)),t,!0)]},border_width:function(e,t){return[Un(e,t)]},min_width:function(e,t){return[fe(e,{minWidth:t.min_width+"px"})]},animation_duration:function(e,t){return[fe(e,{" .pe-button__content, .pe-button__wash":[X("all",t.animation_duration)]})]},padding_h:function(e,t){return[fe(e,{" .pe-button__content":{paddingLeft:t.padding_h+"px",paddingRight:t.padding_h+"px"," .pe-button__dropdown":{minWidth:"calc(36px - 2 * ".concat(t.padding_h,"px)")},".pe-button--dropdown":{" .pe-button__label + .pe-button__dropdown":{marginRight:"calc(7px - ".concat(t.padding_h,"px)")}}}})]},padding_h_extra_wide:function(e,t){return[fe(e,{".pe-button--extra-wide .pe-button__content":{padding:"0 "+t.padding_h_extra_wide+"px"}})]},label_padding_v:function(e,t){return[fe(e,{" .pe-button__label":{padding:t.label_padding_v+"px 0"},".pe-button--border":{" .pe-button__label":{padding:t.label_padding_v-1+"px 0"}}}),void 0!==t.line_height&&Mn(e,t),void 0!==t.outer_padding_v&&qn(e,t),void 0!==t.line_height&&void 0!==t.outer_padding_v&&void 0!==t.label_padding_v&&Vn(e,t)]},font_weight:function(e,t){return[fe(e,{" .pe-button__label":{fontWeight:t.font_weight}})]},text_transform:function(e,t){return[fe(e,{" .pe-button__label":{textTransform:t.text_transform}})]},font_size:function(e,t){return[fe(e,{" .pe-button__label, .pe-button__dropdown":{fontSize:t.font_size+"px"}})]},line_height:function(e,t){return[fe(e,{" .pe-button__label, .pe-button__dropdown":{lineHeight:t.line_height}}),void 0!==t.label_padding_v&&Mn(e,t),void 0!==t.outer_padding_v&&void 0!==t.label_padding_v&&Vn(e,t)]},dropdown_icon_size:function(e,t){return[fe(e,{".pe-button--dropdown":{" .pe-button__dropdown":{width:t.dropdown_icon_size+"px"}," .pe-svg":{width:t.dropdown_icon_size+"px",height:t.dropdown_icon_size+"px",marginTop:-t.dropdown_icon_size/2+"px"}}})]},outer_padding_v:function(e,t){return[fe(e,{padding:t.outer_padding_v+"px 0",".pe-button--high-label":{padding:0}}),void 0!==t.label_padding_v&&qn(e,t),void 0!==t.line_height&&void 0!==t.outer_padding_v&&void 0!==t.label_padding_v&&Vn(e,t)]},separator_width:function(e,t){return[fe(e,{".pe-button--separator-start":{" .pe-button__content":{borderWidth:t.separator_width+"px"}}})]},letter_spacing:function(e,t){return[fe(e,{letterSpacing:t.letter_spacing+"px"})]},border:function(e,t){return t.border&&Kn(e)},contained:function(e,t){return t.contained&&function(e){return fe(e,{})}(e)}},yn),Qn=me({varFns:Jn}),Zn=Ht.unit_touch_height,Xn=Pn({},{border:!1,contained:!1},kn),Yn={border_width:1,color_light_border:ge(Ht.color_light_foreground,Ht.blend_light_border_medium),color_light_disabled_border:ge(Ht.color_light_foreground,Ht.blend_light_text_disabled),color_dark_border:ge(Ht.color_dark_foreground,Ht.blend_dark_border_medium),color_dark_disabled_border:ge(Ht.color_dark_foreground,Ht.blend_dark_text_disabled)},Gn=Rn({general_styles:!0,animation_duration:Ht.animation_duration,border_radius:Ht.unit_item_border_radius,dropdown_icon_size:24,font_size:14,font_weight:500,label_padding_v:11,letter_spacing:.75,line_height:1,min_width:8*Ht.grid_unit_component,outer_padding_v:(Zn-36)/2,padding_h:2*Ht.grid_unit,padding_h_extra_wide:6*Ht.grid_unit,row_margin_h:Ht.grid_unit,separator_width:1,text_transform:"uppercase",color_light_background:"transparent",color_light_text:ge(Ht.color_light_foreground,Ht.blend_light_text_primary),color_light_wash_background:"currentColor",color_light_wash_opacity:.1,color_light_active_background:ge(Ht.color_light_foreground,Ht.blend_light_background_active),color_light_disabled_background:"transparent",color_light_disabled_text:ge(Ht.color_light_foreground,Ht.blend_light_text_disabled),color_light_icon:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_separator:ge(Ht.color_light_foreground,Ht.blend_light_border_light),color_dark_background:"transparent",color_dark_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_primary),color_dark_wash_background:"currentColor",color_dark_wash_opacity:.1,color_dark_active_background:ge(Ht.color_dark_foreground,Ht.blend_dark_background_active),color_dark_disabled_background:"transparent",color_dark_disabled_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_disabled),color_dark_icon:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_separator:ge(Ht.color_dark_foreground,Ht.blend_dark_border_light)},Yn,{},Xn),er=Rn({border:!1,contained:!0},kn),tr=Rn({general_styles:!0,padding_h:4*Ht.grid_unit,color_light_background:"#fff",color_light_disabled_background:ge(Ht.color_light_foreground,Ht.blend_light_background_disabled),color_dark_active_background:ge(Ht.color_primary_dark),color_dark_background:ge(Ht.color_primary),color_dark_disabled_background:ge(Ht.color_dark_foreground,Ht.blend_dark_background_disabled)},er),nr=[Qn,An],rr=[Ln],or=".".concat(Cn.super),ir=".".concat(Cn.component),ar=xe({superColor:An}),lr=[me({superLayout:Qn}),ar],cr=[Cn.component,Cn.contained].join(" "),sr=".".concat(cr.split(/\s/).join(".")),dr=(_e(sr,lr,tr),pe(sr,lr,tr),Gn),ur={general_styles:function(e){return[fe(e,{display:"flex"})]}},_r={general_styles:!0},pr=[me({varFns:ur})],fr=".".concat("pe-button-group"),hr=(_e(fr,pr,_r),pe(fr,pr,_r),"pe-card");function gr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function br(){return br=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},br.apply(this,arguments)}var mr={general_styles:function(e){return[]}},vr=function(e){return gr({},"color_"+e+"_main_background",function(t,n){return[fe(t,{backgroundColor:n["color_"+e+"_main_background"]})]})},yr=xe({varFns:{lightTintFns:br({},mr,vr("light")),darkTintFns:br({},mr,vr("dark"))}}),xr={general_styles:function(e){return[]}},wr=function(e){var t;return gr(t={},"color_"+e+"_title_text",function(t,n){return[fe(t,{" .pe-card__title":{color:n["color_"+e+"_title_text"]}})]}),gr(t,"color_"+e+"_subtitle_text",function(t,n){return[fe(t,{" .pe-card__subtitle":{color:n["color_"+e+"_subtitle_text"]}})]}),gr(t,"color_"+e+"_text",function(t,n){return[fe(t,{" .pe-card__text":{color:n["color_"+e+"_text"]}})]}),gr(t,"color_"+e+"_actions_border",function(t,n){return[fe(t,{" .pe-card__actions--border":{borderTop:"1px solid "+n["color_"+e+"_actions_border"]}})]}),t},kr=xe({varFns:{lightTintFns:br({},xr,wr("light")),darkTintFns:br({},xr,wr("dark"))}}),Or=function(e,t){return fe(e,{" .pe-card__primary":{".pe-card__primary--tight":{" .pe-card__title":{paddingBottom:t.tight_title_padding_bottom-t.subtitle_line_height_padding_bottom+"px"}}}})},Sr=function(e,t){return fe(e,{" .pe-card__title":{padding:[t.title_padding_v,t.title_padding_h,t.title_padding_v-t.subtitle_line_height_padding_bottom,t.title_padding_h].map(function(e){return e+"px"}).join(" ")}})},jr=function(e,t){return fe(e,{" .pe-card__text":{paddingTop:t.text_padding_v-t.text_line_height_padding_top+"px"}})},Cr=function(e,t){return fe(e,{" .pe-card__text":{"&:last-child":{paddingBottom:t.text_padding_bottom-t.text_line_height_padding_bottom+"px"}}})},zr=function(e,t){return fe(e,{" .pe-card__text":{paddingBottom:t.tight_text_padding_bottom-t.text_line_height_padding_bottom+"px",".pe-card__text--tight, &.pe-card__text--tight:last-child":{paddingBottom:t.tight_text_padding_bottom-t.text_line_height_padding_bottom+"px"}}})},Pr={general_styles:function(e,t){return[fe(e,[{},{display:"block",position:"relative","&, a:link, a:visited":{textDecoration:"none"}," .pe-card__content":{position:"relative",borderRadius:"inherit",overflow:"hidden",width:"inherit",height:"inherit"}," .pe-card__media":{position:"relative",overflow:"hidden",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit",backgroundSize:"cover",backgroundRepeat:"no-repeat",backgroundPosition:"center",".pe-card__media--landscape":{paddingBottom:"56.25%"},".pe-card__media--square":{paddingBottom:"100%"},".pe-card__media--crop-x":{width:"100%",height:"auto",display:"block",".pe-card__media--origin-start":{backgroundPositionY:"top"},".pe-card__media--origin-end":{backgroundPositionY:"bottom"}},".pe-card__media--crop-y":{height:"100%",width:"auto",display:"block",".pe-card__media--origin-start":{backgroundPositionX:"left"},".pe-card__media--origin-end":{backgroundPositionX:"right"}}," img, iframe":[G(),{width:"100%",height:"100%",maxWidth:"none"}]," img":{opacity:0}," .pe-card__header + .pe-card__media":{borderTopLeftRadius:0,borderTopRightRadius:0}}," .pe-card__primary-media":{margin:"16px"}," .pe-card__overlay":G()," .pe-card__media__dimmer":[G(),{zIndex:1,pointerEvents:"all"}]," .pe-card__overlay__content":{position:"absolute",bottom:0,top:"auto",right:0,left:0,zIndex:2}," .pe-card__header":{" .pe-list-tile__title":{fontSize:"14px",fontWeight:Ht.font_weight_normal,lineHeight:"20px",marginTop:"2px"}," .pe-list-tile__subtitle":{marginTop:"-1px"}}," .pe-card__primary":[V.layoutHorizontal,{position:"relative","& + .pe-card__text":{marginTop:"-16px"}}]," .pe-card__title":[V.flex(),{fontSize:"24px",lineHeight:"29px"}]," .pe-card__subtitle":{fontSize:"14px",lineHeight:"24px"}," .pe-card__actions":{".pe-card__actions--tight":{minHeight:0,paddingTop:0,paddingBottom:0,".pe-card__actions--vertical":{paddingLeft:0,paddingRight:0}},".pe-card__actions--horizontal":{minHeight:"52px",height:"52px"},".pe-card__actions--horizontal:not(.pe-card__actions--justified)":[V.layoutHorizontal,V.layoutCenter,{" .pe-button":{minWidth:0}}],".pe-card__actions--justified":[V.layoutJustified],".pe-card__actions--vertical":[V.layoutVertical,{" .pe-card__actions":[{minHeight:0}]," .pe-button":{height:"36px",padding:0}," .pe-list":{padding:0}}]}," .pe-card__primary.pe-card__primary--media + .pe-card__actions":{marginTop:"-16px"}," .pe-card__text":{fontSize:"14px",lineHeight:"24px"," .pe-card__actions + &":{marginTop:"8px"}}," .pe-card__text, .pe-card__primary":{"& + .pe-card__actions:not(:last-child)":{position:"relative",zIndex:1}}},{"*[dir=rtl], .pe-rtl ":gr({},e,{})}])]},border_radius:function(e,t){return[fe(e,{borderRadius:t.border_radius+"px"," .pe-card__content .pe-card__media":{borderTopLeftRadius:0,borderTopRightRadius:0,borderBottomLeftRadius:0,borderBottomRightRadius:0}," .pe-card__content .pe-card__media:not(.pe-card__media--square):not(.pe-card__media--landscape)":{":first-child":{borderTopLeftRadius:t.border_radius+"px",borderTopRightRadius:t.border_radius+"px"},":last-child":{borderBottomLeftRadius:t.border_radius+"px",borderBottomRightRadius:t.border_radius+"px"}}})]},image_size_small:function(e,t){return[fe(e,{" .pe-card__primary-media":{" .pe-card__media--small":{width:t.image_size_small+"px",height:t.image_size_small+"px"}}})]},image_size_regular:function(e,t){return[fe(e,{" .pe-card__primary-media":{" .pe-card__media--regular":{width:t.image_size_regular+"px"}}})]},image_size_medium:function(e,t){return[fe(e,{" .pe-card__primary-media":{" .pe-card__media--medium":{width:t.image_size_medium+"px"}}})]},image_size_large:function(e,t){return[fe(e,{" .pe-card__primary-media":{" .pe-card__media--large":{width:t.image_size_large+"px"}}})]},one_line_height_with_icon:function(e,t){return[fe(e,{" .pe-card__header":{height:t.one_line_height_with_icon+"px"}})]},tight_title_padding_bottom:function(e,t){return[fe(e,{}),Or(e,t)]},subtitle_line_height_padding_bottom:function(e,t){return[fe(e,{}),Or(e,t),Sr(e,t)]},title_padding_v:function(e,t){return[fe(e,{}),Sr(e,t)]},title_padding_h:function(e,t){return[fe(e,{}),Sr(e,t)]},actions_button_margin_h:function(e,t){return[fe(e,{" .pe-card__actions.pe-card__actions--horizontal":{margin:"0 -".concat(t.actions_button_margin_h,"px")," .pe-button":{margin:"0 ".concat(t.actions_button_margin_h,"px")}}})]},actions_padding_v:function(e,t){return[fe(e,{" .pe-card__actions":{paddingTop:t.actions_padding_v+"px",paddingBottom:t.actions_padding_v+"px"}})]},actions_padding_h:function(e,t){return[fe(e,{" .pe-card__actions":{paddingRight:t.actions_padding_h+"px",paddingLeft:t.actions_padding_h+"px"}})]},actions_button_margin_v:function(e,t){return[fe(e,{" .pe-card__actions":{".pe-card__actions--vertical":{" .pe-button":{marginTop:t.actions_button_margin_v+"px",marginBottom:t.actions_button_margin_v+"px"}}}})]},actions_vertical_padding_v:function(e,t){return[fe(e,{" .pe-card__actions":{".pe-card__actions--vertical":{":not(.pe-card__actions--tight)":{paddingTop:t.actions_vertical_padding_v+"px",paddingBottom:t.actions_vertical_padding_v+"px"}," .pe-card__actions":[{"&:first-child":{marginTop:-t.actions_vertical_padding_v+"px"},"&:last-child":{marginBottom:-t.actions_vertical_padding_v+"px"}}]}}})]},offset_small_padding_v:function(e,t){return[fe(e,{" .pe-card__text, .pe-card__primary":{"& + .pe-card__actions:not(:last-child)":{marginTop:-(t.offset_small_padding_v+3)+"px"}}})]},text_padding_h:function(e,t){return[fe(e,{" .pe-card__text":{paddingRight:t.text_padding_h+"px",paddingLeft:t.text_padding_h+"px"}})]},text_padding_v:function(e,t){return[fe(e,{}),jr(e,t)]},text_line_height_padding_top:function(e,t){return[fe(e,{}),jr(e,t)]},text_padding_bottom:function(e,t){return[fe(e,{}),Cr(e,t)]},tight_text_padding_bottom:function(e,t){return[fe(e,{}),zr(e,t)]},text_line_height_padding_bottom:function(e,t){return[fe(e,{}),Cr(e,t),zr(e,t)]}},Tr=me({varFns:Pr}),Rr={general_styles:function(e){return[]}},Er=function(e){return gr({},"color_"+e+"_overlay_background",function(t,n){return[fe(t,{" .pe-card__overlay__content":{backgroundColor:n["color_"+e+"_overlay_background"]}})]})},Lr=xe({varFns:{lightTintFns:br({},Rr,Er("light")),darkTintFns:br({},Rr,Er("dark"))}}),Ir={general_styles:!0,actions_button_margin_h:Ht.grid_unit,actions_button_margin_v:2,actions_padding_h:8,actions_padding_v:0,actions_vertical_padding_v:6,border_radius:Ht.unit_block_border_radius,icon_element_width:68,image_size_large:240,image_size_medium:160,image_size_regular:112,image_size_small:80,offset_small_padding_v:8,one_line_height_with_icon:72,one_line_padding_v:8,padding_h:16,subtitle_line_height_padding_bottom:7,text_line_height_padding_bottom:7,text_line_height_padding_top:6,text_padding_bottom:24,text_padding_h:16,text_padding_v:16,tight_text_padding_bottom:16,tight_title_padding_bottom:16,title_padding_h:16,title_padding_v:24,color_light_main_background:ge(Ht.color_light_background),color_light_title_text:ge(Ht.color_light_foreground,Ht.blend_light_text_primary),color_light_subtitle_text:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_text:ge(Ht.color_light_foreground,Ht.blend_light_text_regular),color_light_actions_border:ge(Ht.color_light_foreground,Ht.blend_light_border_light),color_light_overlay_background:ge(Ht.color_light_background,Ht.blend_light_overlay_background),color_dark_main_background:ge(Ht.color_dark_background),color_dark_title_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_primary),color_dark_subtitle_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_regular),color_dark_actions_border:ge(Ht.color_dark_foreground,Ht.blend_dark_border_light),color_dark_overlay_background:ge(Ht.color_dark_background,Ht.blend_dark_overlay_background)},Nr=".".concat(hr),Fr=".".concat("pe-card__content"),Dr=".".concat("pe-card__overlay--sheet"),Ar=".".concat("pe-card__overlay__content"),Hr=[Tr,yr],Wr=[Lr],Br=[kr];function Mr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function qr(){return qr=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},qr.apply(this,arguments)}var Vr={general_styles:function(e){return[fe(e,{" .pe-control__box":{" .pe-control__button":{color:"inherit"}," .pe-control__button--on":{color:"inherit"}}})]}},$r=function(e){var t;return Mr(t={},"color_"+e+"_on",function(t,n){return[fe(t,{color:n["color_"+e+"_on"]})]}),Mr(t,"color_"+e+"_off",function(t,n){return[fe(t,{" .pe-control__button--off":{color:n["color_"+e+"_off"]}})]}),Mr(t,"color_"+e+"_disabled",function(t,n){return[fe(t,{".pe-control--disabled":{" .pe-control__label":{color:n["color_"+e+"_disabled"]}," .pe-control__box":{" .pe-control__button--on, .pe-control__button--off":{color:n["color_"+e+"_disabled"]}}}})]}),Mr(t,"color_"+e+"_label",function(t,n){return[fe(t,{" .pe-control__label":{color:n["color_"+e+"_label"]}})]}),Mr(t,"color_"+e+"_on_icon",function(t,n){return[fe(t,{" .pe-control__box":{" .pe-control__button--on":{color:n["color_"+e+"_on_icon"]}}})]}),Mr(t,"color_"+e+"_off_icon",function(t,n){return[fe(t,{" .pe-control__box":{" .pe-control__button--off":{color:n["color_"+e+"_off_icon"]}}})]}),Mr(t,"color_"+e+"_on_label",function(t,n){return[fe(t,{".pe-control--on":{" .pe-control__label":{color:n["color_"+e+"_on_label"]}}})]}),Mr(t,"color_"+e+"_off_label",function(t,n){return[fe(t,{".pe-control--off":{" .pe-control__label":{color:n["color_"+e+"_off_label"]}}})]}),t},Kr=xe({varFns:{lightTintFns:qr({},Vr,$r("light")),darkTintFns:qr({},Vr,$r("dark"))}}),Ur=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ht.unit_icon_size,r=n+e.label_height;return{" .pe-control__form-label":{height:t+"px"}," .pe-control__box":{width:n+"px",height:n+"px"}," .pe-button__content":{width:r+"px",height:r+"px",flexShrink:0," .pe-icon":[G((r-n)/2)]}}},Jr=function(e,t,n){var r;return fe(e,{" .pe-button.pe-control__button":(r={top:-(t.button_size-t.icon_size)/2+"px"},Mr(r,n?"right":"left",-(t.button_size-t.icon_size)/2+"px"),Mr(r,n?"left":"right","auto"),r)})},Qr=function(e,t,n){return fe(e,{" .pe-control__label":Mr({},n?"paddingRight":"paddingLeft",t.label_padding_before+"px")})},Zr=function(e,t,n){return fe(e,{" .pe-control__label":Mr({},n?"paddingLeft":"paddingRight",t.label_padding_after+"px")})},Xr={general_styles:function(e,t){return[fe(e,[{},{display:"inline-block",boxSizing:"border-box",margin:0,padding:0," input[type=checkbox], input[type=radio]":{display:"none"}," .pe-control__form-label":[V.layoutHorizontal,V.layoutCenter,{position:"relative",cursor:"pointer",margin:0,color:"inherit",":focus":{outline:0}}],".pe-control--inactive":{" .pe-control__form-label":{cursor:"default"}}," .pe-control__box":{position:"relative",display:"inline-block",boxSizing:"border-box",color:"inherit",flexShrink:0,":focus":{outline:0}}," .pe-button.pe-control__button":{position:"absolute"},".pe-control--off":{" .pe-control__button--on":{opacity:0,zIndex:-1}," .pe-control__button--off":{opacity:1,zIndex:0}},".pe-control--on":{" .pe-control__button--on":{opacity:1,zIndex:0}," .pe-control__button--off":{opacity:0,zIndex:-1}}," .pe-control__label":{alignSelf:"center"},".pe-control--disabled":{" .pe-control__form-label":{cursor:"auto"}," .pe-control__button":{pointerEvents:"none"}}," .pe-button__content":{" .pe-icon":{position:"absolute"}}},Mr({},"*[dir=rtl] ".concat(e,", .pe-rtl ").concat(e),[{}])])]},label_font_size:function(e,t){return[fe(e,{" .pe-control__form-label":{fontSize:t.label_font_size+"px"}})]},label_height:function(e,t){return[fe(e,{" .pe-control__box":{width:t.label_height+"px",height:t.label_height+"px"},".pe-control--small":Ur(t,Ht.unit_icon_size_small,Ht.unit_icon_size_small),".pe-control--regular":Ur(t,t.label_height,Ht.unit_icon_size),".pe-control--medium":Ur(t,Ht.unit_icon_size_medium,Ht.unit_icon_size_medium),".pe-control--large":Ur(t,Ht.unit_icon_size_large,Ht.unit_icon_size_large)})]},animation_duration:function(e,t){return[fe(e,{" .pe-button.pe-control__button":[X("opacity",t.animation_duration)]," .pe-control__label":[X("all",t.animation_duration)]})]},button_size:function(e,t){return[fe(e,{}),Jr(e,t,!1),Jr(he(e),t,!0)]},icon_size:function(e,t){return[fe(e,{}),Jr(e,t,!1),Jr(he(e),t,!0)]},label_padding_after:function(e,t){return[fe(e,{}),Zr(e,t,!1),Zr(he(e),t,!0)]},label_padding_before:function(e,t){return[fe(e,{}),Qr(e,t,!1),Qr(he(e),t,!0)]}},Yr=me({varFns:Xr}),Gr={general_styles:!0,animation_duration:Ht.animation_duration,button_size:6*Ht.grid_unit_component,icon_size:3*Ht.grid_unit_component,label_font_size:2*Ht.grid_unit_component,label_height:3*Ht.grid_unit_component,label_padding_after:0,label_padding_before:4*Ht.grid_unit,color_light_on:ge(Ht.color_primary),color_light_off:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_label:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_disabled:ge(Ht.color_light_foreground,Ht.blend_light_text_disabled),color_light_on_icon:"inherit",color_light_off_icon:"inherit",color_light_on_label:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_off_label:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_dark_on:ge(Ht.color_primary),color_dark_off:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_label:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_disabled:ge(Ht.color_dark_foreground,Ht.blend_dark_text_disabled),color_dark_on_icon:"inherit",color_dark_off_icon:"inherit",color_dark_on_label:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_off_label:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary)},eo=[Yr,Kr],to=".".concat("pe-control"),no=(_e(to,eo,Gr),pe(to,eo,Gr),xe({superColor:Kr})),ro={general_styles:!0},oo=[me({superLayout:Yr}),no],io=".".concat("pe-checkbox-control");function ao(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function lo(){return lo=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},lo.apply(this,arguments)}_e(io,oo,ro),pe(io,oo,ro);var co={general_styles:function(){return[{" .pe-dialog-pane__body":{borderColor:"transparent"}}]}},so=function(e){var t;return ao(t={},"color_"+e+"_background",function(t,n){return[fe(t,{backgroundColor:n["color_"+e+"_background"]})]}),ao(t,"color_"+e+"_title_text",function(t,n){return[fe(t,{" .pe-dialog-pane__header .pe-dialog-pane__title":{color:n["color_"+e+"_title_text"]}})]}),ao(t,"color_"+e+"_body_text",function(t,n){return[fe(t,{" .pe-dialog-pane__body":{color:n["color_"+e+"_body_text"]}})]}),ao(t,"color_"+e+"_body_border",function(t,n){return[fe(t,{".pe-dialog-pane--border-top .pe-dialog-pane__body":{borderTopColor:n["color_"+e+"_body_border"]},".pe-dialog-pane--border-bottom .pe-dialog-pane__body":{borderBottomStyle:"solid",borderBottomColor:n["color_"+e+"_body_border"]}})]}),t},uo=xe({varFns:{lightTintFns:lo({},co,so("light")),darkTintFns:lo({},co,so("dark"))}}),_o=function(e,t){var n,r=t.max_width+2*t.side_padding_mobile;return ao(n={},"@media (max-width: "+r+"px)",ao({},e,{maxWidth:"calc(100vw - ".concat(2*t.side_padding_mobile,"px)")})),ao(n,"@media (min-width: "+(r+1)+"px)",ao({},e,{maxWidth:t.max_width+"px"})),n},po=function(e,t){return fe(e,{" .pe-dialog-pane__header--title":{paddingTop:t.padding-4+"px",paddingRight:t.padding+"px",paddingBottom:t.header_bottom-4+"px",paddingLeft:t.padding+"px"}})},fo=function(e,t){return fe(e,{" .pe-dialog-pane__body":{maxHeight:"calc(100vh - (".concat(t.header_height,"px + ").concat(t.footer_height,"px + 2 * ").concat(t.margin_vertical,"px))")}})},ho=function(e){return fe(e,{" .pe-dialog-pane":{borderRadius:0}," .pe-dialog-pane__content":{borderRadius:0,maxWidth:"none",height:"100vh",width:"100vw"," > *":{flexShrink:0}," > .pe-dialog-pane__body":{flexShrink:1,maxHeight:"none"}}," .pe-dialog-pane, .pe-dialog-pane__body":{height:"100vh",maxHeight:"100vh",borderTopStyle:"none",maxWidth:"none"}})},go={general_styles:function(e){return[fe(e,[V.layoutVertical,{position:"relative",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit",borderBottomLeftRadius:"inherit",borderBottomRightRadius:"inherit",margin:0," .pe-dialog-pane__content":{width:"100%",display:"flex",flexDirection:"column",borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit",borderBottomLeftRadius:"inherit",borderBottomRightRadius:"inherit"}," .pe-dialog-pane__title":{fontSize:Ht.font_size_title+"px",fontWeight:Ht.font_weight_medium,"& + div":{marginTop:"16px"}}," .pe-dialog-pane__header, .pe-dialog-pane__content > .pe-toolbar":{borderTopLeftRadius:"inherit",borderTopRightRadius:"inherit"," .pe-dialog-pane__title":{width:"100%",wordBreak:"break-all",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}}," .pe-dialog-pane__body":[{overflowY:"auto","-webkit-overflow-scrolling":"touch",borderTopStyle:"solid",borderBottomStyle:"solid"," p":{margin:0}," p + p":{marginTop:"16px"}}],".pe-dialog-pane--body-full-bleed .pe-dialog-pane__body":{padding:0,borderStyle:"none"}," .pe-dialog-pane__header--title + .pe-dialog-pane__body":{paddingTop:0}," .pe-dialog-pane__footer":{display:"flex",flexDirection:"column",flexGrow:1,justifyContent:"center","&, > .pe-toolbar":{borderBottomLeftRadius:"inherit",borderBottomRightRadius:"inherit"},".pe-dialog-pane__footer--high":{paddingBottom:"8px"},".pe-dialog-pane__footer--buttons":{padding:"0 8px",fontSize:0}}," .pe-dialog-pane__actions":[V.layoutHorizontal,V.layoutEndJustified,V.layoutWrap,{alignItems:"center"}]}]),{" .pe-dialog__content.pe-menu__content":ao({}," ".concat(e),{" .pe-dialog-pane__body":{padding:0,border:"none"}})}]},max_width:function(e,t){return[void 0!==t.side_padding_mobile&&_o(e,t)]},side_padding_mobile:function(e,t){return[void 0!==t.side_padding_mobile&&_o(e,t)]},min_width:function(e,t){return[fe(e,{minWidth:t.min_width+"px"})]},margin_vertical:function(e,t){return[fe(e,{maxHeight:"calc(100vh - 2 * ".concat(t.margin_vertical,"px)")}),void 0!==t.header_height&&void 0!==t.footer_height&&fo(e,t)]},line_height_title:function(e,t){return[fe(e,{" .pe-dialog-pane__title":{lineHeight:t.line_height_title+"px"}})]},header_height:function(e,t){return[fe(e,{" .pe-dialog-pane__header":{height:t.header_height+"px"}}),void 0!==t.footer_height&&void 0!==t.margin_vertical&&fo(e,t)]},footer_height:function(e,t){return[fe(e,{" .pe-dialog-pane__footer--buttons .pe-dialog-pane__actions":{minHeight:t.footer_height+"px"}}),void 0!==t.header_height&&void 0!==t.footer_height&&void 0!==t.margin_vertical&&fo(e,t)]},padding:function(e,t){return[fe(e,{" .pe-dialog-pane__body":{padding:t.padding+"px"},".pe-dialog-pane--footer":{" .pe-dialog-pane__body":{paddingBottom:t.padding-10+"px"}}}),void 0!==t.header_bottom&&po(e,t)]},header_bottom:function(e,t){return[po(e,t)]},border_width:function(e,t){return[fe(e,{" .pe-dialog-pane__body":{borderWidth:t.border_width+"px"}})]}},bo=me({varFns:go}),mo={general_styles:!0,border_width:1,footer_height:52,header_bottom:20,header_height:64,line_height_title:24,max_width:7*Ht.grid_unit_menu,min_width:5*Ht.grid_unit_menu,padding:3*Ht.grid_unit_component,side_padding_mobile:6*Ht.grid_unit,max_height:8*Ht.grid_unit_component,margin_vertical:8*Ht.grid_unit_component,color_light_title_text:"inherit",color_light_body_text:"inherit",color_light_body_border:ge(Ht.color_light_foreground,Ht.blend_light_border_light),color_light_background:"inherit",color_dark_title_text:"inherit",color_dark_body_text:"inherit",color_dark_body_border:ge(Ht.color_dark_foreground,Ht.blend_dark_border_light),color_dark_background:"inherit"},vo=[bo,uo],yo=".".concat("pe-dialog-pane"),xo=(_e(yo,vo,mo),pe(yo,vo,mo),"pe-dialog");function wo(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ko(){return ko=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ko.apply(this,arguments)}function Oo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function So(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Oo(n,!0).forEach(function(t){wo(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Oo(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}var jo={general_styles:function(e){return[]}},Co=function(e){var t;return wo(t={},"color_"+e+"_background",function(t,n){return[fe(t,{" .pe-dialog__content":{backgroundColor:n["color_"+e+"_background"]}})]}),wo(t,"color_"+e+"_text",function(t,n){return[fe(t,{" .pe-dialog__content":{color:n["color_"+e+"_text"]}})]}),wo(t,"color_"+e+"_backdrop_background",function(t,n){return[fe(t,{" .pe-dialog__backdrop":{backgroundColor:n["color_"+e+"_backdrop_background"]}})]}),t},zo=xe({varFns:{lightTintFns:ko({},jo,Co("light")),darkTintFns:ko({},jo,Co("dark"))}}),Po={full_screen:!1,modal:!1},To=ko({},{backdrop:!1,z_index:Ht.z_dialog},Po,kn),Ro=So({general_styles:!0,animation_delay:"0s",animation_duration:".220s",animation_hide_css:"opacity: 0;",animation_show_css:"opacity: 1;",animation_timing_function:"ease-in-out",border_radius:Ht.unit_block_border_radius,position:"fixed",color_light_backdrop_background:"rgba(0, 0, 0, .4)",color_dark_backdrop_background:"rgba(0, 0, 0, .5)",color_light_background:ge(Ht.color_light_background),color_dark_background:ge(Ht.color_dark_background),color_light_text:ge(Ht.color_light_foreground,Ht.blend_light_text_regular),color_dark_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_regular)},To),Eo=function(e,t){return fe(e,{".pe-dialog--visible .pe-dialog__backdrop":{display:"block",opacity:1}})},Lo=function(e,t){return fe(e,[we(t,Po),{padding:0," .pe-dialog__content":{width:"100%"}},ho(e)])},Io=function(e,t){return fe(e,[we(t,Po)])},No=So({general_styles:function(e,t){return[fe(e,[V.layoutCenterCenter,{top:0,left:0,right:0,bottom:0,zIndex:t.z_index,height:"100%",transitionProperty:"opacity,background-color,transform",".pe-dialog--full-screen":Lo(e,t),".pe-dialog--modal":Io(e,t)," .pe-dialog__content":{position:"relative",transitionProperty:"all"}," .pe-dialog__backdrop":[X("all"),{position:"absolute",opacity:0,top:0,left:0,right:0,bottom:0,pointerEvents:"none"}],".pe-dialog--backdrop":Eo(e)}]),{".pe-dialog__holder":{height:"100%",minWidth:"320px"}}]},animation_hide_css:function(e,t){return[fe(e,[t.animation_hide_css])]},position:function(e,t){return[fe(e,{position:t.position})]},animation_delay:function(e,t){return[fe(e,{"&, .pe-dialog__content":{transitionDelay:t.animation_delay}})]},animation_duration:function(e,t){return[fe(e,{"&, .pe-dialog__content":{transitionDuration:t.animation_duration}})]},animation_timing_function:function(e,t){return[fe(e,{"&, .pe-dialog__content":{transitionTimingFunction:t.animation_timing_function}})]},animation_show_css:function(e,t){return[fe(e,{".pe-dialog--visible":t.animation_show_css})]},border_radius:function(e,t){return[!t.full_screen&&fe(e,{" .pe-dialog__content":{borderTopLeftRadius:t.border_radius+"px",borderTopRightRadius:t.border_radius+"px",borderBottomLeftRadius:t.border_radius+"px",borderBottomRightRadius:t.border_radius+"px"}})]},backdrop:function(e,t){return t.backdrop&&Eo(e)},full_screen:function(e,t){return t.full_screen&&Lo(e,t)},modal:function(e,t){return t.modal&&Io(e,t)}},yn),Fo=[me({varFns:No}),zo],Do=".".concat(xo),Ao=(_e(Do,Fo,Ro),pe(Do,Fo,Ro),{component:"pe-dialog pe-drawer",cover:"pe-drawer--cover",push:"pe-drawer--push",mini:"pe-drawer--mini",permanent:"pe-drawer--permanent",border:"pe-drawer--border",floating:"pe-drawer--floating",fixed:"pe-drawer--fixed",anchorEnd:"pe-drawer--anchor-end",visible:"pe-dialog--visible"});function Ho(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Wo(){return Wo=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Wo.apply(this,arguments)}function Bo(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Mo(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Bo(n,!0).forEach(function(t){Ho(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Bo(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}var qo={general_styles:function(){return[{" .pe-dialog__content":{background:"none"}}]}},Vo=function(e){var t;return Ho(t={},"color_"+e+"_border",function(t,n){return[fe(t,{" .pe-dialog__content":{borderColor:n["color_"+e+"_border"]}})]}),Ho(t,"color_"+e+"_background",function(t,n){return[fe(t,{" .pe-dialog-pane":{backgroundColor:n["color_"+e+"_background"]}})]}),Ho(t,"color_"+e+"_backdrop_background",function(t,n){return[fe(t,{" .pe-dialog__backdrop":{backgroundColor:n["color_"+e+"_backdrop_background"]}})]}),t},$o=xe({varFns:{lightTintFns:Wo({},qo,Vo("light")),darkTintFns:Wo({},qo,Vo("dark"))}}),Ko=function(e,t,n){return fe(e,{" .pe-dialog__content":{borderWidth:"".concat(t.border?1:0,"px"),borderStyle:n?"none none none solid":"none solid none none"}})},Uo=function(e,t){return[Ko(e,t,!1),Ko(he(e),t,!0)]},Jo=function(e){return function(t,n){var r;return[{".pe-drawer--fixed":(r={},Ho(r,e?"right":"left",0),Ho(r,e?"left":"right","auto"),r)},Ko("".concat(t,".pe-drawer--border"),Wo({},n,{border:!0}),e)]}},Qo=Jo(!1),Zo=Jo(!0),Xo=function(e){return fe(e,{".pe-dialog--visible .pe-dialog__backdrop":{opacity:1}})},Yo=function(e){return"".concat(e,".pe-drawer--anchor-end")},Go=function(e,t){return fe(e,{":not(.pe-dialog--visible) .pe-dialog__content":{width:"".concat(t.content_width_mini_collapsed,"px")}})},ei=function(e,t,n){var r,o;return fe(e,{" .pe-dialog__content":(r={maxWidth:"".concat(t.content_max_width,"px")},Ho(r,n?"right":"left","".concat(-t.content_max_width-15,"px")),Ho(r,n?"left":"right","auto"),r),".pe-dialog--visible .pe-dialog__content":(o={},Ho(o,n?"right":"left",0),Ho(o,n?"left":"right","auto"),o)})},ti=function(e,t){return[ei(e,t,!1),ei(he(e),t,!0),ei(Yo(e),t,!0),ei(Yo(he(e)),t,!1)]},ni=function(e,t){return fe(e,{" .pe-dialog__content":{width:"".concat(t.content_width,"px")}})},ri=function(e,t,n){var r,o;return fe(e,{" .pe-dialog__content":(r={},Ho(r,n?"marginRight":"marginLeft","".concat(-t.content_width-15,"px")),Ho(r,n?"marginLeft":"marginRight","auto"),r),".pe-dialog--visible .pe-dialog__content":(o={width:"".concat(t.content_width,"px")},Ho(o,n?"marginRight":"marginLeft",0),Ho(o,n?"marginLeft":"marginRight","auto"),o)})},oi=function(e,t){return[ri(e,t,!1),ri(he(e),t,!0),ri(Yo(e),t,!0),ri(Yo(he(e)),t,!1)]},ii=function(e,t){return fe(e,{" .pe-dialog__content":{position:"absolute",top:0,zIndex:t.z_index},".pe-dialog--visible":{" .pe-dialog__touch":{display:"block"}}})},ai=function(e,t){return fe(e,{" .pe-dialog__content":{marginLeft:0,marginRight:0}})},li=function(e,t){return fe(e,{position:"static",display:"block",padding:0,overflow:"initial"," .pe-dialog__content":{overflow:"visible",maxHeight:"initial",marginLeft:0,marginRight:0}})},ci=function(e,t){return fe(e,{position:"static"})},si=function(e,t){return fe(e,{" .pe-dialog__content":{borderRadius:t.border_radius+"px"}})},di=function(e,t){return fe(e,{height:"auto"," .pe-dialog__content":{height:"auto"}})},ui=Mo({general_styles:function(e,t){return[fe(e,[Qo(e,t),{justifyContent:"flex-start",position:"absolute",top:0,left:0,right:0,bottom:0,zIndex:1,height:"100%",minWidth:0,padding:0,opacity:1,flexShrink:0,transitionProperty:"all",":not(.pe-dialog--transition)":{" .pe-dialog__content":{transitionDuration:"0s"}}," .pe-dialog__content":{position:"relative",height:"100%",overflow:"visible",minWidth:0,flexShrink:0}," .pe-dialog-pane__content":{height:"100%",overflowY:"auto",overflowX:"hidden"}," .pe-dialog-pane":{height:"100%",maxHeight:"none",minWidth:0}," .pe-dialog-pane__body":{overflow:"visible",maxHeight:"none",border:"none"},".pe-drawer--fixed":{position:"fixed",top:0,width:"100%",zIndex:Ht.z_drawer},".pe-drawer--mini":ai(e),".pe-drawer--permanent":li(e),".pe-drawer--floating":di(e),".pe-drawer--cover":ii(e,t),".pe-drawer--push":ci(e)," .pe-dialog__backdrop":{pointerEvents:"none",opacity:0,display:"block"}," .pe-dialog__touch":{display:"none",position:"absolute",top:0,left:0,right:0,bottom:0},".pe-dialog--backdrop":Xo(e)}]),[fe(he(e),Zo(e,t))]]},animation_delay:function(e,t){return[fe(e,{"&, .pe-dialog__content, .pe-dialog__backdrop":{transitionDelay:t.animation_delay}})]},animation_duration:function(e,t){return[fe(e,{"&, .pe-dialog__content, .pe-dialog__backdrop":{transitionDuration:t.animation_duration}})]},animation_timing_function:function(e,t){return[fe(e,{"&, .pe-dialog__content, .pe-dialog__backdrop":{transitionTimingFunction:t.animation_timing_function}})]},border_radius:function(e,t){return[si(e,t)]},content_max_width:function(e,t){return[ti("".concat(e,".pe-drawer--cover"),t)]},content_width:function(e,t){return[ni(e,t),ni("".concat(e,".pe-dialog--visible"),t),ni("".concat(e,".pe-drawer--permanent"),t),oi("".concat(e,".pe-drawer--push"),t)]},content_width_mini_collapsed:function(e,t){return[Go("".concat(e,".pe-drawer--mini"),t)]},cover:function(e,t){return t.cover&&[ii(e,t),ti(e,t)]},backdrop:function(e,t){return[t.backdrop&&Xo(e)]},border:function(e,t){return[Uo(e,t)]},mini:function(e,t){return t.mini&&[ai(e),Go(e,t)]},permanent:function(e,t){return[t.permanent&&li(e)]},floating:function(e,t){return[t.floating&&di(e)]},push:function(e,t){return t.push&&[ci(e),oi(e,t)]}},yn),_i=me({varFns:ui}),pi=Mo({backdrop:!1,border:void 0,cover:!1,floating:!1,mini:!1,permanent:!1,push:!1,z_index:Ht.z_drawer},kn),fi=Mo({general_styles:!0,animation_delay:"0s",animation_duration:".260s",animation_timing_function:"ease-in-out",border_radius:0,content_max_width:5*Ht.increment,content_width:240,content_width_mini_collapsed:Ht.increment,color_light_backdrop_background:"rgba(0, 0, 0, .4)",color_dark_backdrop_background:"rgba(0, 0, 0, .5)",color_light_background:ge(Ht.color_light_background),color_dark_background:ge(Ht.color_dark_background),color_light_border:ge(Ht.color_light_foreground,Ht.blend_light_border_light),color_dark_border:ge(Ht.color_dark_foreground,Ht.blend_dark_border_light)},pi),hi=[_i,$o],gi=".".concat(Ao.component.replace(/ /g,"."));function bi(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function mi(){return mi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},mi.apply(this,arguments)}_e(gi,hi,fi),pe(gi,hi,fi);var vi={general_styles:function(e){return[]}},yi=function(e){var t;return bi(t={},"color_"+e,function(t,n){return[fe(t,{" .pe-button__content":{color:n["color_"+e]}})]}),bi(t,"color_"+e+"_background",function(t,n){return[fe(t,{" .pe-button__content":{backgroundColor:n["color_"+e+"_background"]}})]}),bi(t,"color_"+e+"_wash_background",function(t,n){return[fe(t,{" .pe-button__wash-color":{backgroundColor:n["color_"+e+"_wash_background"]}})]}),bi(t,"color_"+e+"_wash_opacity",function(t,n){return[fe(t,{" .pe-button__wash-color":{opacity:n["color_"+e+"_wash_opacity"]}})]}),t},xi=xe({varFns:{lightTintFns:mi({},vi,yi("light")),darkTintFns:mi({},vi,yi("dark"))}}),wi={general_styles:function(e){return[fe(e,{userSelect:"none","-moz-user-select":"none",display:"inline-block",position:"relative",outline:"none",cursor:"pointer",padding:0,border:"none"," .pe-button__content":{position:"relative",borderRadius:"50%"}," .pe-fab__content":{display:"flex",width:"100%",height:"100%",alignItems:"center",justifyContent:"center"}," .pe-ripple":{borderRadius:"inherit"}," .pe-button__wash":[G(),{borderRadius:"inherit",transition:"background-color "+Ht.animation_duration+" ease-in-out",pointerEvents:"none",backgroundColor:"transparent"}]})]},size_regular:function(e,t){return[fe(e,{" .pe-button__content":{width:t.size_regular+"px",height:t.size_regular+"px"}})]},size_mini:function(e,t){return[fe(e,{".pe-fab--mini":{" .pe-button__content":{width:t.size_mini+"px",height:t.size_mini+"px",padding:(t.size_mini-Ht.unit_icon_size)/2+"px"}}})]}},ki=me({varFns:wi}),Oi={general_styles:!0,size_mini:5*Ht.grid_unit_component,size_regular:7*Ht.grid_unit_component,color_light:ge(Ht.color_primary_foreground),color_light_background:ge(Ht.color_primary),color_light_wash_background:"currentColor",color_light_wash_opacity:.1,color_dark:ge(Ht.color_primary_foreground),color_dark_background:ge(Ht.color_primary),color_dark_wash_background:"currentColor",color_dark_wash_opacity:.1},Si=[ki,xi],ji=".".concat("pe-fab");function Ci(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function zi(){return zi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},zi.apply(this,arguments)}_e(ji,Si,Oi),pe(ji,Si,Oi);var Pi={general_styles:function(e){return[fe(e,{color:"currentColor"})]}},Ti=function(e){var t;return Ci(t={},"color_"+e,function(t,n){return[fe(t,{color:n["color_"+e]})]}),Ci(t,"color_"+e+"_avatar_background",function(t,n){return[fe(t,{".pe-icon--avatar":{backgroundColor:n["color_"+e+"_avatar_background"]}})]}),t},Ri=xe({varFns:{lightTintFns:zi({},Pi,Ti("light")),darkTintFns:zi({},Pi,Ti("dark"))}}),Ei=zi({},{general_styles:function(e){return[fe(e,{display:"inline-block",verticalAlign:"middle",backgroundRepeat:"no-repeat",position:"relative",fontSize:0,lineHeight:0,".pe-icon--avatar":{borderRadius:"50%"},".pe-icon--avatar img":{border:"none",borderRadius:"50%",width:"inherit",height:"inherit"}," img":{height:"inherit"}," .pe-svg, .pe-svg > div":{width:"inherit",height:"inherit"}})]}},["small","regular","medium","large"].reduce(function(e,t){return e["size_".concat(t)]=function(e){return function(t,n){return fe(t,Ci({},".pe-icon--".concat(e),{width:n["size_".concat(e)]+"px",height:n["size_".concat(e)]+"px"}))}}(t),e},{})),Li=me({varFns:Ei}),Ii={general_styles:!0,size_small:Ht.unit_icon_size_small,size_regular:Ht.unit_icon_size,size_medium:Ht.unit_icon_size_medium,size_large:Ht.unit_icon_size_large,color_light_avatar_background:ge(Ht.color_light_foreground,Ht.blend_light_background_disabled),color_dark_avatar_background:ge(Ht.color_dark_foreground,Ht.blend_dark_background_disabled),color_light:"currentcolor",color_dark:"currentcolor"},Ni=[Li,Ri],Fi=".".concat("pe-icon");function Di(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ai(){return Ai=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ai.apply(this,arguments)}_e(Fi,Ni,Ii),pe(Fi,Ni,Ii);var Hi={general_styles:function(e){return[]}},Wi=function(e){var t;return Di(t={},"color_"+e,function(t,n){return[fe(t,{"&, .pe-icon-button__label":{color:n["color_"+e]}})]}),Di(t,"color_"+e+"_background",function(t,n){return[fe(t,{" .pe-icon-button__content":{backgroundColor:n["color_"+e+"_background"]}})]}),Di(t,"color_"+e+"_disabled",function(t,n){return[fe(t,{".pe-button--disabled":{" .pe-button__content, .pe-icon-button__label":{color:n["color_"+e+"_disabled"]}}})]}),Di(t,"color_"+e+"_wash_background",function(t,n){return[fe(t,{" .pe-button__wash-color":{backgroundColor:n["color_"+e+"_wash_background"]}})]}),Di(t,"color_"+e+"_wash_opacity",function(t,n){return[fe(t,{" .pe-button__wash-color":{opacity:n["color_"+e+"_wash_opacity"]}})]}),t},Bi=function(e){var t;return Di(t={},"color_"+e+"_hover",function(t,n){return[fe(t,{" .pe-icon-button__content":{color:n["color_"+e+"_hover"]}})]}),Di(t,"color_"+e+"_label_hover",function(t,n){return[fe(t,{" .pe-icon-button__label":{color:n["color_"+e+"_label_hover"]}})]}),Di(t,"color_"+e+"_background_hover",function(t,n){return[fe(t,{" .pe-icon-button__content":{backgroundColor:n["color_"+e+"_background_hover"]}})]}),t},Mi=xe({varFns:{lightTintFns:Ai({},Hi,Wi("light")),darkTintFns:Ai({},Hi,Wi("dark")),lightTintHoverFns:Bi("light"),darkTintHoverFns:Bi("dark")}}),qi=function(e,t,n){return fe(e,{" .pe-icon-button__label":Di({},n?"paddingRight":"paddingLeft",t.label_padding_before+"px")})},Vi=function(e,t,n){return fe(e,{" .pe-icon-button__label":Di({},n?"paddingLeft":"paddingRight",t.label_padding_after+"px")})},$i={general_styles:function(e,t){return[fe(e,[{},{display:"inline-flex",alignItems:"center",cursor:"pointer",border:"none"," .pe-button__content":{display:"flex",alignItems:"center",fontSize:"1rem",borderRadius:"50%",position:"relative"}," .pe-icon-button__content":{lineHeight:1,borderRadius:"50%",pointerEvents:"none"}," .pe-button__wash":[G(),{zIndex:0,borderRadius:"inherit",pointerEvents:"none",opacity:0}],"&:focus:not(:active)":{" .pe-button__wash":{opacity:1}},".pe-button--has-hover:hover":{" .pe-button__wash":{opacity:1}}},Di({},"*[dir=rtl] ".concat(e,", .pe-rtl ").concat(e),[{}])])]},padding:function(e,t){return[fe(e,{" .pe-icon-button__content":{padding:t.padding+"px"}})]},padding_compact:function(e,t){return[fe(e,{".pe-icon-button--compact":{" .pe-icon-button__content":{padding:t.padding_compact+"px"}}})]},animation_duration:function(e,t){return[fe(e,{" .pe-button__content, .pe-button__wash":[X("all",t.animation_duration)]})]},label_font_size:function(e,t){return[fe(e,{" .pe-icon-button__label":{fontSize:t.label_font_size+"px"}})]},label_line_height:function(e,t){return[fe(e,{" .pe-icon-button__label":{lineHeight:t.label_line_height+"px"}})]},label_font_weight:function(e,t){return[fe(e,{" .pe-icon-button__label":{fontWeight:t.label_font_weight}})]},label_text_transform:function(e,t){return[fe(e,{" .pe-icon-button__label":{textTransform:t.label_text_transform}})]},label_padding_after:function(e,t){return[fe(e,{}),Vi(e,t,!1),Vi(he(e),t,!0)]},label_padding_before:function(e,t){return[fe(e,{}),qi(e,t,!1),qi(he(e),t,!0)]}},Ki=me({varFns:$i}),Ui={general_styles:!0,animation_duration:Ht.animation_duration,label_font_size:16,label_font_weight:400,label_line_height:20,label_padding_after:0,label_padding_before:1*Ht.grid_unit,label_text_transform:"initial",label_top_margin_factor:1/12,padding:(Ht.grid_unit_icon_button-Ht.unit_icon_size)/2,padding_compact:(Ht.grid_unit_icon_button-Ht.unit_icon_size)/3,color_background:"transparent",color_light:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_label:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_disabled:ge(Ht.color_light_foreground,Ht.blend_light_text_disabled),color_light_wash_background:"currentColor",color_light_wash_opacity:.1,color_dark:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_label:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_disabled:ge(Ht.color_dark_foreground,Ht.blend_dark_text_disabled),color_dark_wash_background:"currentColor",color_dark_wash_opacity:.1},Ji=[Ki,Mi],Qi=".".concat("pe-button pe-icon-button".replace(/ /g,".")),Zi=_e(Qi,Ji,Ui);function Xi(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Yi(){return Yi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Yi.apply(this,arguments)}pe(Qi,Ji,Ui);var Gi={general_styles:function(e){return[fe(e,{" .pe-ios-spinner__blade":{background:"currentcolor"}})]}},ea=function(e){return Xi({},"color_"+e,function(t,n){return[fe(t,{color:n["color_"+e]})]})},ta=xe({varFns:{lightTintFns:Yi({},Gi,ea("light")),darkTintFns:Yi({},Gi,ea("dark"))},superColor:tn}),na=function(e){return[0,1,2,3,4,5,6,7,8,9,10,11].map(function(t){var n=-1/12*t*x(e.rotation_animation_duration);return Xi({}," .pe-ios-spinner__blade:nth-of-type("+(t+1)+")",{transform:"rotate("+(360-30*t)+"deg) translate3d(0,-140%,0)",animation:"iosSpinnerFade "+e.rotation_animation_duration+" "+n+"ms linear infinite"})})},ra={general_styles:function(e){return[fe(e,{" .pe-ios-spinner__blades":{transform:"translate3d(0,0,0)",position:"relative",width:"100%",height:"100%"}," .pe-ios-spinner__blade":{position:"absolute",width:"9%",height:"28%",left:"45.5%",top:"36%",opacity:0,borderRadius:"50px"},"@keyframes iosSpinnerFade":{" 0%":{opacity:.64}," 100%":{opacity:.035}}})]},rotation_animation_duration:function(e,t){return[fe(e,{" .pe-ios-spinner__blades":[na(t)]})]}},oa=me({varFns:ra,superLayout:an}),ia={general_styles:!0,rotation_animation_duration:"1s",color_light:ge(Ht.color_light_foreground),color_dark:ge(Ht.color_dark_foreground)},aa=[oa,ta],la=".".concat("pe-ios-spinner"),ca=(_e(la,aa,ia),pe(la,aa,ia),"pe-list");function sa(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function da(){return da=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},da.apply(this,arguments)}var ua={general_styles:function(){return[]}},_a=function(e){var t;return sa(t={},"color_"+e+"_background",function(t,n){return[fe(t,{backgroundColor:n["color_"+e+"_background"]})]}),sa(t,"color_"+e+"_border",function(t,n){var r;return[fe(t,(r={},sa(r,"& + .pe-list",{borderTopColor:n["color_"+e+"_border"]}),sa(r,".pe-list--border",{" .pe-list-tile":{":not(:last-child)":{borderColor:n["color_"+e+"_border"]}}}),sa(r,".pe-list--indented-border",{" .pe-list-tile":{" .pe-list-tile__content:not(.pe-list-tile__content-front)":{borderColor:n["color_"+e+"_border"]}}}),r))]}),t},pa=xe({varFns:{lightTintFns:da({},ua,_a("light")),darkTintFns:da({},ua,_a("dark"))}}),fa=function(e){return{borderStyle:"none none solid none",borderWidth:e.border_width_bordered+"px"}},ha={general_styles:function(e){return[fe(e,{flexGrow:1,".pe-list--header":{paddingTop:0},".pe-list--indented-border":{borderTop:"none"}})]},padding:function(e,t){return[fe(e,{".pe-list--padding":{padding:t.padding+"px 0"},".pe-list--padding-top":{paddingTop:t.padding+"px"},".pe-list--padding-bottom":{paddingBottom:t.padding+"px"}})]},padding_compact:function(e,t){return[fe(e,{".pe-list--compact":{padding:t.padding_compact+"px 0"}})]},border_width_stacked:function(e,t){return[fe(e,{"& + &":{borderStyle:"solid none none none",borderWidth:t.border_width_stacked+"px"}})]},border_width_bordered:function(e,t){return[fe(e,{".pe-list--border":{" .pe-list-tile":{":not(.pe-list-tile--header):not(:last-child)":{"&":fa(t)}}},".pe-list--indented-border":{" .pe-list-tile":{":not(.pe-list-tile--header):not(:last-child)":{" .pe-list-tile__content:not(.pe-list-tile__content-front)":fa(t)}}}})]}},ga=me({varFns:ha}),ba={general_styles:!0,border_width_bordered:1,border_width_stacked:1,padding:Ht.grid_unit_component,padding_compact:3*Ht.grid_unit_component/4,color_light_border:ge(Ht.color_light_foreground,Ht.blend_light_border_light),color_dark_border:ge(Ht.color_dark_foreground,Ht.blend_dark_border_light)},ma=[ga,pa],va=".".concat(ca);function ya(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function xa(){return xa=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},xa.apply(this,arguments)}function wa(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function ka(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?wa(n,!0).forEach(function(t){ya(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):wa(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}_e(va,ma,ba),pe(va,ma,ba);var Oa=function(e,t,n){var r=t["color_"+n+"_selected_text"];return fe(e,ka({},"inherit"!==r?{"&, .pe-list-tile__title, .pe-list-tile__content, .pe-list-tile__subtitle":{color:r}}:void 0,{" .pe-list-tile__primary, pe-list-tile__secondary":{backgroundColor:t["color_"+n+"_selected_background"]}}))},Sa={general_styles:function(e){return[fe(e,{".pe-list-tile--header":{" .pe-list-tile__primary, pe-list-tile__secondary":{backgroundColor:"inherit"}},":not(.pe-list-tile--disabled):not(.pe-list-tile--selected)":{" a.pe-list-tile__primary:focus, a.pe-list-tile__secondary:focus":{outline:"none",backgroundColor:"inherit"}},"&.pe-list-tile--sticky":{backgroundColor:"inherit"}})]}},ja=function(e){var t;return ya(t={},"color_"+e+"_title",function(t,n){return[fe(t,{color:n["color_"+e+"_title"]})]}),ya(t,"color_"+e+"_background",function(t,n){return[fe(t,{backgroundColor:n["color_"+e+"_background"],"&.pe-list-tile--sticky":{backgroundColor:n["color_"+e+"_background"]}})]}),ya(t,"color_"+e+"_list_header",function(t,n){return[fe(t,{".pe-list-tile--header":{color:n["color_"+e+"_list_header"]}})]}),ya(t,"color_"+e+"_subtitle",function(t,n){return[fe(t,{" .pe-list-tile__subtitle":{color:n["color_"+e+"_subtitle"]}})]}),ya(t,"color_"+e+"_secondary",function(t,n){return[fe(t,{" .pe-list-tile__secondary":{color:n["color_"+e+"_secondary"]}})]}),ya(t,"color_"+e+"_front",function(t,n){return[fe(t,{" .pe-list-tile__content-front":{color:n["color_"+e+"_front"]}})]}),ya(t,"color_"+e+"_text_disabled",function(t,n){return[fe(t,{".pe-list-tile--disabled":{"&, .pe-list-tile__title, .pe-list-tile__content, .pe-list-tile__subtitle":{color:n["color_"+e+"_text_disabled"]}}})]}),ya(t,"color_"+e+"_highlight_background",function(t,n){return[fe(t,{".pe-list-tile--highlight:not(.pe-list-tile--selected)":{" .pe-list-tile__primary, pe-list-tile__secondary":{backgroundColor:n["color_"+e+"_highlight_background"]}}})]}),ya(t,"color_"+e+"_focus_background",function(t,n){return[fe(t,{":not(.pe-list-tile--disabled):not(.pe-list-tile--selected)":{" a.pe-list-tile__primary:focus, a.pe-list-tile__secondary:focus":{backgroundColor:n["color_"+e+"_focus_background"]}}})]}),ya(t,"color_"+e+"_selected_text",function(t,n){return[fe(t,{".pe-list-tile--selected":Oa(t,n,e)})]}),ya(t,"color_"+e+"_selected_background",function(t,n){return[fe(t,{".pe-list-tile--selected":Oa(t,n,e)})]}),t},Ca=function(e){var t;return ya(t={},"color_"+e+"_hover",function(t,n){return[fe(t,{".pe-list-tile--hoverable:not(.pe-list-tile--selected)":{color:n["color_"+e+"_hover"]}})]}),ya(t,"color_"+e+"_hover_background",function(t,n){return[fe(t,{".pe-list-tile--hoverable:not(.pe-list-tile--selected)":{" .pe-list-tile__primary, .pe-list-tile__secondary":{backgroundColor:n["color_"+e+"_hover_background"]}}})]}),ya(t,"color_"+e+"_hover_front",function(t,n){return[fe(t,{".pe-list-tile--hoverable:not(.pe-list-tile--selected)":{" .pe-list-tile__primary .pe-list-tile__content-front":{color:n["color_"+e+"_hover_front"]}}})]}),t},za=function(e){return{selected:function(t,n){return n.selected&&Oa(t,n,e)}}},Pa=xe({varFns:{lightTintFns:xa({},Sa,ja("light"),za("light")),darkTintFns:xa({},Sa,ja("dark"),za("dark")),lightTintHoverFns:Ca("light"),darkTintHoverFns:Ca("dark")}}),Ta=function(e){return function(t){return{" .pe-list-tile__content-front + .pe-list-tile__content":ya({},e?"paddingRight":"paddingLeft",0)}}},Ra=Ta(!1),Ea=Ta(!0),La=function(e){return{"padding-left":e+"px","padding-right":(arguments.length>1&&void 0!==arguments[1]?arguments[1]:e)+"px"}},Ia=function(e){return{"padding-top":e+"px","padding-bottom":(arguments.length>1&&void 0!==arguments[1]?arguments[1]:e)+"px"}},Na=function(e,t){return fe(e,{lineHeight:t.single_line_height+"px",".pe-list-tile--navigation":{" .pe-list-tile__title":{minHeight:t.single_line_height+"px"}}," .pe-list-tile__title":[Y(t.title_line_count,t.single_line_height,"px")]})},Fa=function(e,t){return fe(e,{"&, a":{pointerEvents:"none"}})},Da=function(e,t){return Aa(e,t),Ha(e,t)},Aa=function(e,t){var n=t.inset_h_size;return fe(e,{marginLeft:n+"px",marginRight:n+"px"," .pe-list-tile__content":{marginLeft:-n+"px",marginRight:-n+"px"}})},Ha=function(e,t){var n=t.inset_v_size;return fe(e,{marginTop:n+"px",marginBottom:n+"px"})},Wa=function(e,t){return fe(e,{"&, .pe-list-tile__primary":{borderRadius:t.rounded_border_radius+"px"}})},Ba={general_styles:function(e,t){return[fe(e,[Ra(t),V.layout,{position:"relative",".pe-list-tile--navigation":{" .pe-list-tile__title":{whiteSpace:"pre-wrap"}},".pe-list-tile--sticky":ee(2),".pe-list-tile--inset-h":Aa(e,t),".pe-list-tile--inset-v":Ha(e,t)," .pe-list-tile__primary":{width:"100%"}," .pe-list-tile__primary, .pe-list-tile__secondary":[V.layoutHorizontal,X("background",".200s"),{textDecoration:"none",color:"inherit",border:"none"}],":not(.pe-list-tile--header) .pe-list-tile__primary":[V.flex(),{position:"relative"," .pe-list-tile__content:not(.pe-list-tile__content-front)":[V.flex()]}],":not(.pe-list-tile--disabled)":{outline:"none"}," .pe-list-tile__secondary":{textAlign:"right",position:"relative"}," .pe-list-tile__content":[V.layoutVertical,V.selfCenter,{width:"100%",".pe-list-tile__content-front":{flexShrink:0}}]," .pe-list-tile__title":{whiteSpace:"normal"}," .pe-list-tile__subtitle":[Y(t.subtitle_line_count,t.line_height_subtitle,"px"),{fontSize:t.font_size_subtitle+"px",fontWeight:t.font_weight_subtitle,lineHeight:t.line_height_subtitle+"px",".pe-list-tile__high-subtitle":[Y(t.high_subtitle_line_count,t.line_height_subtitle,"px"),{whiteSpace:"normal"}]}],".pe-list-tile--selected, &.pe-list-tile--disabled":Fa(e),".pe-list-tile--subtitle":{" .pe-list-tile__content":{" .pe-list-tile__title":{padding:0}}},".pe-list-tile--high-subtitle":{" .pe-list-tile--high-subtitle .pe-list-tile__secondary":[V.layoutHorizontal,V.layoutStart]," .pe-list-tile__content":[V.selfStart,{" .pe-list-tile__title":{padding:0}}]},".pe-list-tile--header":{pointerEvents:"none"," .pe-list-tile__content":{paddingTop:0,paddingBottom:0}," .pe-list-tile__title":{padding:0}},"@supports (-moz-appearance:none) and (display:contents)":{" .pe-list-tile__primary, .pe-list-tile__content":{overflow:"hidden"}},".pe-dialog .pe-menu__content &":{" .pe-list-tile__content":{paddingLeft:"24px",paddingRight:"24px"}," .pe-list-tile__content-front":{paddingRight:0,width:"64px",marginRight:"-7px"}," .pe-list-tile__title":Y("none")},".pe-menu__content &":{":not(.pe-list-tile--disabled)":{cursor:"default","&, .pe-list-tile__primary, .pe-list-tile__secondary":{" .pe-list-tile__title, .pe-list-tile__subtitle":{userSelect:"none","-moz-user-select":"none"}}}},"html.pe-no-touch &.pe-list-tile--hoverable,         html.pe-no-touch &.pe-list-tile--selectable":{":not(.pe-list-tile--header):not(.pe-list-tile--disabled):not(.pe-list-tile--selected):hover":{cursor:"pointer"}}}]),ya({},he(e),Ea(t))]},title_line_count:function(e,t){return[Na(e,t)]},single_line_height:function(e,t){return[Na(e,t)]},font_size_title:function(e,t){return[fe(e,{fontSize:t.font_size_title+"px"," .pe-list-tile__secondary":{fontSize:t.font_size_title+"px"}})]},font_weight_title:function(e,t){return[fe(e,{fontWeight:t.font_weight_title})]},font_size_navigation_title:function(e,t){return[fe(e,{".pe-list-tile--navigation":{fontSize:t.font_size_navigation_title+"px"}})]},font_weight_navigation_title:function(e,t){return[fe(e,{".pe-list-tile--navigation":{fontWeight:t.font_weight_navigation_title}})]},padding:function(e,t){return[fe(e,{":not(.pe-list-tile--header)":{" .pe-list-tile__content:not(.pe-list-tile__content-front)":[Ia(t.padding,t.padding+1)]}," .pe-list-tile__content":{".pe-list-tile__content-front":[Ia(t.padding-5)]}})]},side_padding:function(e,t){return[fe(e,{" .pe-list-tile__content":[La(t.side_padding)]})]},inset_size:function(e,t){return[fe(e,{".pe-list-tile--inset":Da(e,t)})]},rounded_border_radius:function(e,t){return[fe(e,{".pe-list-tile--rounded":Wa(e,t)})]},compact_front_item_width:function(e,t){return[fe(e,{" .pe-list-tile__content-front":{".pe-list-tile--compact-front":{width:t.compact_front_item_width+"px"}}})]},front_item_width:function(e,t){return[fe(e,{" .pe-list-tile__content-front":{":not(.pe-list-tile--compact-front)":{width:t.front_item_width+"px"}}})]},font_size_small:function(e,t){return[fe(e,{" .pe-list-tile__content":{" small":{fontSize:t.font_size_small+"px"}}})]},has_high_subtitle_padding:function(e,t){return[fe(e,{".pe-list-tile--high-subtitle":{" .pe-list-tile__content":[Ia(t.has_high_subtitle_padding,t.has_high_subtitle_padding+1)]}})]},has_subtitle_padding:function(e,t){return[fe(e,{".pe-list-tile--subtitle":{" .pe-list-tile__content":[Ia(t.has_subtitle_padding,t.has_subtitle_padding+1)]}})]},single_height:function(e,t){return[fe(e,{".pe-list-tile--header":{height:t.single_height+"px"," .pe-list-tile__title":[Y(1,t.single_height,"px"),{lineHeight:t.single_height+"px",padding:0}]}})]},font_size_list_header:function(e,t){return[fe(e,{".pe-list-tile--header":{" .pe-list-tile__title":{fontSize:t.font_size_list_header+"px"}}})]},font_weight_list_header:function(e,t){return[fe(e,{".pe-list-tile--header":{" .pe-list-tile__title":{fontWeight:t.font_weight_list_header}}})]},compact_padding:function(e,t){return[fe(e,{" .pe-list--compact &, &.pe-list-tile--compact":{":not(.pe-list-tile--header)":{" .pe-list-tile__content:not(.pe-list-tile__content-front)":Ia(t.compact_padding,t.compact_padding+1)}}})]},inset:function(e,t){return t.inset&&Da(e,t)},inset_h:function(e,t){return t.inset_h&&Aa(e,t)},inset_v:function(e,t){return t.inset_h&&Ha(e,t)},rounded:function(e,t){return t.rounded&&Wa(e,t)},selected:function(e,t){return t.selected&&Fa(e)}},Ma=me({varFns:Ba}),qa=ka({general_styles:!0,compact_front_item_width:64,compact_padding:9,compact_side_padding:1*Ht.grid_unit_component,font_size_list_header:14,font_size_navigation_title:14,font_size_small:12,font_size_subtitle:14,font_size_title:16,font_weight_list_header:Ht.font_weight_medium,font_weight_navigation_title:Ht.font_weight_medium,font_weight_subtitle:Ht.font_weight_normal,font_weight_title:Ht.font_weight_normal,front_item_width:72,has_high_subtitle_padding:13,has_subtitle_padding:15,high_subtitle_line_count:2,inset_h_size:1*Ht.grid_unit_component,inset_v_size:1*Ht.grid_unit_component,line_height_subtitle:20,padding:13,rounded_border_radius:Ht.unit_item_border_radius,side_padding:2*Ht.grid_unit_component,single_height:48,single_line_height:21,single_with_icon_height:56,single_with_icon_line_height:29,subtitle_line_count:1,title_line_count:1,color_light_title:ge(Ht.color_light_foreground,Ht.blend_light_text_primary),color_light_subtitle:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_info:ge(Ht.color_light_foreground,Ht.blend_light_text_tertiary),color_light_front:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_text_disabled:ge(Ht.color_light_foreground,Ht.blend_light_text_disabled),color_light_list_header:ge(Ht.color_light_foreground,Ht.blend_light_text_tertiary),color_light_secondary:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_hover:ge(Ht.color_light_foreground,Ht.blend_light_text_primary),color_light_hover_front:ge(Ht.color_light_foreground,Ht.blend_light_text_primary),color_light_hover_background:ge(Ht.color_light_foreground,Ht.blend_light_background_hover),color_light_focus_background:ge(Ht.color_light_foreground,Ht.blend_light_background_hover),color_light_selected_text:"inherit",color_light_selected_background:ge(Ht.color_light_foreground,Ht.blend_light_background_hover),color_light_highlight_background:ge(Ht.color_light_foreground,Ht.blend_light_background_hover),color_dark_title:ge(Ht.color_dark_foreground,Ht.blend_dark_text_primary),color_dark_subtitle:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_info:ge(Ht.color_dark_foreground,Ht.blend_dark_text_tertiary),color_dark_front:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_text_disabled:ge(Ht.color_dark_foreground,Ht.blend_dark_text_disabled),color_dark_list_header:ge(Ht.color_dark_foreground,Ht.blend_dark_text_tertiary),color_dark_secondary:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_hover:ge(Ht.color_dark_foreground,Ht.blend_dark_text_primary),color_dark_hover_front:ge(Ht.color_dark_foreground,Ht.blend_dark_text_primary),color_dark_hover_background:ge(Ht.color_dark_foreground,Ht.blend_dark_background_hover),color_dark_selected_text:"inherit",color_dark_selected_background:ge(Ht.color_dark_foreground,Ht.blend_dark_background_hover),color_dark_highlight_background:ge(Ht.color_dark_foreground,Ht.blend_dark_background_hover)},{inset:!1,inset_h:!1,inset_v:!1,selected:!1,rounded:!1}),Va=[Ma,Pa],$a=".".concat("pe-list-tile");function Ka(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ua(){return Ua=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ua.apply(this,arguments)}_e($a,Va,qa),pe($a,Va,qa);var Ja={general_styles:function(e){return[fe(e,{" .pe-md-spinner__layer":{borderColor:"currentcolor"}})]}},Qa=function(e){var t;return Ka(t={},"color_"+e+"_single",function(t,n){return[fe(t,{color:n["color_"+e+"_single"]})]}),Ka(t,"color_"+e+"_1",function(t,n){return[fe(t,{":not(.pe-spinner--single-color)":{" .pe-md-spinner__layer-1":{borderColor:n["color_"+e+"_1"]}}})]}),Ka(t,"color_"+e+"_2",function(t,n){return[fe(t,{":not(.pe-spinner--single-color)":{" .pe-md-spinner__layer-2":{borderColor:n["color_"+e+"_2"]}}})]}),Ka(t,"color_"+e+"_3",function(t,n){return[fe(t,{":not(.pe-spinner--single-color)":{" .pe-md-spinner__layer-3":{borderColor:n["color_"+e+"_3"]}}})]}),Ka(t,"color_"+e+"_4",function(t,n){return[fe(t,{":not(.pe-spinner--single-color)":{" .pe-md-spinner__layer-4":{borderColor:n["color_"+e+"_4"]}}})]}),t},Za=xe({varFns:{lightTintFns:Ua({},Ja,Qa("light")),darkTintFns:Ua({},Ja,Qa("dark"))},superColor:tn}),Xa=.99,Ya="cubic-bezier(0.4, 0.0, 0.2, 1) infinite both",Ga=function(e){return{" from":{transform:"rotate("+130*e+"deg)"}," 50%":{transform:"rotate("+-5*e+"deg)"}," to":{transform:"rotate("+130*e+"deg)"}}},el={general_styles:function(e,t){return[fe(e,{"@keyframes mdSpinnerRotate":{" to":{transform:"rotate(360deg)"}},"@keyframes mdSpinnerRightSpin":Ga(-1),"@keyframes mdSpinnerLeftSpin":Ga(1),"@keyframes mdSpinnerFadeOut":{" from":{opacity:Xa}," to":{opacity:0}},"@keyframes mdSpinnerLayer1FadeInOut":{" from":{opacity:Xa}," 25%":{opacity:Xa}," 26%":{opacity:0}," 89%":{opacity:0}," 90%":{opacity:Xa}," 100%":{opacity:Xa}},"@keyframes mdSpinnerLayer2FadeInOut":{" from":{opacity:0}," 15%":{opacity:0}," 25%":{opacity:Xa}," 50%":{opacity:Xa}," 51%":{opacity:0}},"@keyframes mdSpinnerLayer3FadeInOut":{" from":{opacity:0}," 40%":{opacity:0}," 50%":{opacity:Xa}," 75%":{opacity:Xa}," 76%":{opacity:0}},"@keyframes mdSpinnerLayer4FadeInOut":{" from":{opacity:0}," 65%":{opacity:0}," 75%":{opacity:Xa}," 90%":{opacity:Xa}," 100%":{opacity:0}}," .pe-md-spinner__animation":{position:"relative",width:"100%",height:"100%",direction:"ltr"}," .pe-md-spinner__gap-patch":{position:"absolute",boxSizing:"border-box",top:0,left:"45%",width:"10%",height:"100%",overflow:"hidden",borderColor:"inherit"}," .pe-md-spinner__gap-patch .pe-md-spinner__circle":{width:"1000%",left:"-450%"}," .pe-md-spinner__circle-clipper":{display:"inline-block",fontSize:0,lineHeight:0,position:"relative",width:"50%",height:"100%",overflow:"hidden",borderColor:"inherit"}," .pe-md-spinner__circle-clipper .pe-md-spinner__circle":{width:"200%"}," .pe-md-spinner__circle":[G(),{animation:"none",boxSizing:"border-box",height:"100%",borderStyle:"solid",borderColor:"inherit",borderRadius:"50%",borderBottomColor:"transparent !important"}]," .pe-md-spinner__circle-clipper-left .pe-md-spinner__circle":{transform:"rotate(129deg)",borderRightColor:"transparent !important"}," .pe-md-spinner__circle-clipper-right .pe-md-spinner__circle":{transform:"rotate(-129deg)",left:"-100%",borderLeftColor:"transparent !important"}," .pe-md-spinner__layer":[[1,2,3,4].map(function(e){return function(e,t){return Ka({},".pe-md-spinner__layer-"+t,{animation:"mdSpinnerFillUnfillRotate "+4*e.arc_time+"s "+Ya+",  mdSpinnerLayer"+t+"FadeInOut "+4*e.arc_time+"s "+Ya})}(t,e)}),{position:"absolute",width:"100%",height:"100%",whiteSpace:"nowrap"}]})]},rotation_duration:function(e,t){return[fe(e,{" .pe-md-spinner__animation":{animation:"mdSpinnerRotate "+t.rotation_duration+"s linear infinite"}})]},border_width_small:function(e,t){return[fe(e,{".pe-spinner--small":{" .pe-md-spinner__circle":{borderWidth:t.border_width_small+"px"}}})]},border_width_regular:function(e,t){return[fe(e,{".pe-spinner--regular":{" .pe-md-spinner__circle":{borderWidth:t.border_width_regular+"px"}}})]},border_width_medium:function(e,t){return[fe(e,{".pe-spinner--medium":{" .pe-md-spinner__circle":{borderWidth:t.border_width_medium+"px"}}})]},border_width_large:function(e,t){return[fe(e,{".pe-spinner--large":{" .pe-md-spinner__circle":{borderWidth:t.border_width_large+"px"}}})]},border_width_fab:function(e,t){return[fe(e,{".pe-spinner--fab":{" .pe-md-spinner__circle":{borderWidth:t.border_width_fab+"px"}}})]},arc_size:function(e,t){return[fe(e,{"@keyframes mdSpinnerFillUnfillRotate":(n=t.arc_size,{" 12.5%":{transform:"rotate("+.5*n+"deg)"}," 25%":{transform:"rotate("+1*n+"deg)"}," 37.5%":{transform:"rotate("+1.5*n+"deg)"}," 50%":{transform:"rotate("+2*n+"deg)"}," 62.5%":{transform:"rotate("+2.5*n+"deg)"}," 75%":{transform:"rotate("+3*n+"deg)"}," 87.5%":{transform:"rotate("+3.5*n+"deg)"}," to":{transform:"rotate("+4*n+"deg)"}})})];var n},arc_time:function(e,t){return[fe(e,{" .pe-md-spinner__circle-clipper-left .pe-md-spinner__circle":{animation:"mdSpinnerLeftSpin "+t.arc_time+"s "+Ya}," .pe-md-spinner__circle-clipper-right .pe-md-spinner__circle":{animation:"mdSpinnerRightSpin "+t.arc_time+"s "+Ya}," .pe-md-spinner__layer":{animation:"mdSpinnerFillUnfillRotate "+4*t.arc_time+"s "+Ya}})]}},tl=me({varFns:el,superLayout:an}),nl="#42a5f5",rl="#f44336",ol="#fdd835",il="#4caf50",al={general_styles:!0,arc_size:270,arc_start_degrees:216,arc_time:1.333,border_width_fab:ln.size_fab/ln.size_regular*3,border_width_large:ln.size_large/ln.size_regular*3,border_width_medium:ln.size_medium/ln.size_regular*3,border_width_regular:3,border_width_small:ln.size_small/ln.size_regular*3,rotation_duration:479.88/306,color_light_single:ge(Ht.color_primary),color_light_1:nl,color_light_2:rl,color_light_3:ol,color_light_4:il,color_dark_single:ge(Ht.color_primary),color_dark_1:nl,color_dark_2:rl,color_dark_3:ol,color_dark_4:il},ll=[tl,Za],cl=".".concat("pe-md-spinner");function sl(){return sl=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},sl.apply(this,arguments)}_e(cl,ll,al),pe(cl,ll,al);var dl={general_styles:function(e){return[fe(e,{" .pe-md-progress-spinner__circle":{borderColor:"currentcolor"}})]}},ul=function(e){return r=function(t,n){return[fe(t,{color:n["color_"+e]})]},(n="color_"+e)in(t={})?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t;var t,n,r},_l=xe({varFns:{lightTintFns:sl({},dl,ul("light")),darkTintFns:sl({},dl,ul("dark"))},superColor:Za}),pl={general_styles:function(e){return[fe(e,{position:"relative"," .pe-md-progress-spinner__animation":{position:"absolute",width:"100%",height:"100%"}," .pe-md-progress-spinner__circle":{position:"absolute",boxSizing:"border-box",width:"100%",height:"100%",borderStyle:"solid",borderRadius:"50%"}," .pe-md-progress-spinner__circle-left, .pe-md-progress-spinner__circle-right":{transform:"rotate(0)",clip:"rect(0, 0, 0, 0)"}})]},progress_animation_duration:function(e,t){return[fe(e,{" .pe-md-progress-spinner__animation":{animationDuration:t.progress_animation_duration}})]}},fl=me({varFns:pl,superLayout:tl}),hl={general_styles:!0,progress_animation_duration:".8s",color_light:ge(Ht.color_primary),color_dark:ge(Ht.color_primary)},gl=[fl,_l],bl=".".concat("pe-md-progress-spinner"),ml=(_e(bl,gl,hl),pe(bl,gl,hl),"pe-menu");function vl(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function yl(){return yl=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},yl.apply(this,arguments)}function xl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function wl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xl(n,!0).forEach(function(t){vl(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xl(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}var kl={general_styles:function(e){return[]}},Ol=function(e){var t;return vl(t={},"color_"+e+"_background",function(t,n){return[fe(t,{" .pe-menu__panel":{"background-color":n["color_"+e+"_background"]}})]}),vl(t,"color_"+e+"_backdrop_background",function(t,n){return[fe(t,{" .pe-menu__backdrop":{"background-color":n["color_"+e+"_backdrop_background"]}})]}),t},Sl=xe({varFns:{lightTintFns:yl({},kl,Ol("light")),darkTintFns:yl({},kl,Ol("dark"))}}),jl={top_menu:!1},Cl=wl({backdrop:void 0,z:Ht.z_menu},jl,{},kn),zl=wl({general_styles:!0,animation_delay:"0s",animation_duration:".180s",animation_hide_css:"opacity: 0;",animation_hide_origin_effect_css:"transform: scale(0.75);",animation_show_css:"opacity: 1;",animation_show_origin_effect_css:"transform: scale(1);",animation_timing_function:"ease-in-out",border_radius:Ht.unit_block_border_radius,height:void 0,min_width:1.5,width_factor:Ht.grid_unit_menu,widths:[1,1.5,2,3,4,5,6,7],color_light_background:ge(Ht.color_light_background),color_dark_background:ge(Ht.color_dark_background),color_light_backdrop_background:"rgba(0, 0, 0, .1)",color_dark_backdrop_background:"rgba(0, 0, 0, .5)"},Cl),Pl=function(e){return function(){return{textAlign:e?"right":"left"}}},Tl=Pl(!1),Rl=Pl(!0),El=function(e){var t=e.vars,n=e.width,r=e.value,o=function(e,t){return t<e.min_width?e.min_width:t}(t,n);return vl({},"."+function(e){return"pe-menu--width-"+e.toString().replace(".","-")}(o),{" .pe-menu__panel":{width:r||t.width_factor*o+"px"}})},Ll=function(e,t){return fe(e,[t.widths.map(function(e){return El({vars:t,width:e})}),{" .pe-menu__panel":{minWidth:Ht.grid_unit_menu*t.min_width+"px"}}])},Il=function(e,t){return fe(e,{" .pe-menu__backdrop":{display:"block"}})},Nl=function(e,t){return fe(e,[t.widths.map(function(e){return El({vars:t,width:e,value:"100vw"})}),we(t,jl),{" .pe-menu__panel":{position:"fixed",width:"100vw",top:0,left:0,right:0,bottom:"auto",borderTopLeftRadius:0,borderTopRightRadius:0}}])},Fl=function(e,t){return fe(e,{".pe-menu--floating":{" .pe-menu__panel, .pe-menu__backdrop":{zIndex:t.z}}})},Dl=wl({general_styles:function(e,t){return[fe(e,[Tl(),{position:"static",".pe-menu--width-auto":{width:"auto"},".pe-menu--permanent":{" .pe-menu__panel":{opacity:1,position:"relative"}},".pe-menu--floating":{" .pe-menu__panel":{transitionProperty:"opacity, transform"}}," .pe-menu__panel":{transitionProperty:"all",opacity:0,position:"absolute"}," .pe-menu__backdrop":{display:"none",transitionProperty:"all",position:"fixed",top:0,right:0,bottom:0,left:0,opacity:0},".pe-menu--backdrop":Il(e),".pe-menu--visible .pe-menu__backdrop":{opacity:1},".pe-menu--top-menu":Nl(e,t)," .pe-menu__content":{overflowX:"auto",overflowY:"auto",width:"100%",height:"100%"},".pe-menu--full-height":{height:"100%"," .pe-menu__panel":{height:"100%"}}}]),vl({},he(e),Rl())]},animation_delay:function(e,t){return[fe(e,{" .pe-menu__panel, .pe-menu__backdrop":{transitionDelay:t.animation_delay}})]},animation_duration:function(e,t){return[fe(e,{" .pe-menu__panel, .pe-menu__backdrop":{transitionDuration:t.animation_duration}})]},animation_timing_function:function(e,t){return[fe(e,{" .pe-menu__panel, .pe-menu__backdrop":{transitionTimingFunction:t.animation_timing_function}})]},animation_show_css:function(e,t){return[fe(e,{".pe-menu--visible":{" .pe-menu__panel":t.animation_show_css}})]},animation_hide_css:function(e,t){return[fe(e,{" .pe-menu__panel":t.animation_hide_css})]},animation_show_origin_effect_css:function(e,t){return[fe(e,{".pe-menu--origin.pe-menu--visible":{" .pe-menu__panel":t.animation_show_origin_effect_css}})]},animation_hide_origin_effect_css:function(e,t){return[fe(e,{".pe-menu--origin:not(.pe-menu--visible)":{" .pe-menu__panel":t.animation_hide_origin_effect_css}})]},height:function(e,t){return[void 0!==t.height&&fe(e,{" .pe-menu__panel":{height:t.height}})]},widths:function(e,t){return[Ll(e,t)]},min_width:function(e,t){return[Ll(e,t)]},width_factor:function(e,t){return[Ll(e,t)]},border_radius:function(e,t){return[fe(e,{" .pe-menu__panel":{borderRadius:t.border_radius+"px"}})]},backdrop:function(e,t){return[t.backdrop&&Il(e)]},top_menu:function(e,t){return[t.top_menu&&Nl(e,t)]},z:function(e,t){return[t.z&&Fl(e,t)]}},yn),Al=[me({varFns:Dl}),Sl],Hl=".".concat(ml),Wl=(_e(Hl,Al,zl),pe(Hl,Al,zl),"pe-notification");function Bl(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Ml(){return Ml=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ml.apply(this,arguments)}var ql={general_styles:function(e){return[]}},Vl=function(e){var t;return Bl(t={},"color_"+e+"_text",function(t,n){return[fe(t,{" .pe-notification__content":{color:n["color_"+e+"_text"]}})]}),Bl(t,"color_"+e+"_background",function(t,n){return[fe(t,{" .pe-notification__content":{background:n["color_"+e+"_background"]}})]}),t},$l=xe({varFns:{lightTintFns:Ml({},ql,Vl("light")),darkTintFns:Ml({},ql,Vl("dark"))}}),Kl={general_styles:function(e){return[fe(e,[V.layoutCenterCenter,{top:0,right:0,bottom:0,left:0,pointerEvents:"none",justifyContent:"flex-start",".pe-multiple--screen":{position:"fixed",zIndex:Ht.z_notification}}]),{":not(.pe-notification--container) .pe-multiple--container":{position:"absolute"}}]}},Ul=me({varFns:Kl}),Jl=function(e,t){return fe(e,{" .pe-notification__title":{padding:t.title_single_padding_v+"px "+t.title_padding_h+"px"}})},Ql={animation_hide_css:function(e,t){return[fe(e,t.animation_hide_css)]},animation_show_css:function(e,t){return[fe(e,{".pe-notification--visible":[t.animation_show_css]})]},width:function(e,t){return[fe(e,{" .pe-notification__content":{width:t.width+"px"}})]},animation_delay:function(e,t){return[fe(e,{transitionDelay:t.animation_delay})]},animation_duration:function(e,t){return[fe(e,{transitionDuration:t.animation_duration})]},animation_timing_function:function(e,t){return[fe(e,{transitionTimingFunction:t.animation_timing_function})]},side_padding:function(e,t){return[fe(e,{" .pe-notification__content":{padding:"0 "+t.side_padding+"px"}})]},border_radius:function(e,t){return[fe(e,{" .pe-notification__content":{borderRadius:t.border_radius+"px"}})]},title_single_padding_v:function(e,t){return[Jl(e,t)]},title_padding_h:function(e,t){return[Jl(e,t)]},font_size:function(e,t){return[fe(e,{" .pe-notification__title":{fontSize:t.font_size+"px"}})]},line_height:function(e,t){return[fe(e,{" .pe-notification__title":{lineHeight:t.line_height+"px"}})]},title_multi_padding_v:function(e,t){return[fe(e,{".pe-notification--horizontal":{" .pe-notification__title--multi-line":{paddingTop:t.title_multi_padding_v+"px",paddingBottom:t.title_multi_padding_v+"px"}},".pe-notification--vertical":{" .pe-notification__title--multi-line":{paddingTop:t.title_multi_padding_v+"px"}}})]}},Zl=Ml({},{general_styles:function(e){return[fe(e,[V.layoutCenter,{pointerEvents:"all",justifyContent:"center",margin:"0 auto",transitionProperty:"all",opacity:0," .pe-notification__title":{flex:"1 0 auto"}," .pe-notification__action":{" .pe-button":{margin:0}}," .pe-notification__content":{maxWidth:"100%"},".pe-notification--horizontal":{" .pe-notification__content":V.layoutHorizontal," .pe-notification__title":[V.flex(),{alignSelf:"center"}]," .pe-notification__action":V.layoutCenter},".pe-notification--vertical":{" .pe-notification__content":[V.layoutVertical]," .pe-notification__title":{paddingBottom:"6px"}," .pe-notification__action":[V.layoutEndJustified,{width:"100%"}]}}])]}},Ql),Xl=me({varFns:Zl}),Yl={general_styles:!0,animation_delay:"0s",animation_duration:".3s",animation_hide_css:"opacity: 0;",animation_show_css:"opacity: 1;",animation_timing_function:"ease-in-out",border_radius:Ht.unit_block_border_radius,font_size:14,line_height:20,min_height:80,side_padding:16,title_multi_padding_v:20,title_padding_h:8,title_single_padding_v:14,width:288,color_light_background:ge(Ht.color_light_background),color_light_text:ge(Ht.color_light_foreground,Ht.blend_light_dark_primary),color_dark_background:ge(Ht.color_dark_background),color_dark_text:ge(Ht.color_dark_foreground,Ht.blend_light_text_primary)},Gl=[Xl,$l],ec=".".concat(Wl),tc=[Ul],nc=".".concat("pe-notification__holder"),rc=xe({superColor:Kr}),oc={general_styles:!0},ic=[me({varFns:{general_styles:function(){return{" .pe-radio-group":{display:"flex"}}}},superLayout:Yr}),rc],ac=".".concat("pe-radio-control");function lc(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function cc(){return cc=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},cc.apply(this,arguments)}_e(ac,ic,oc),pe(ac,ic,oc);var sc={general_styles:function(e){return[fe(e,{color:"inherit"})]}},dc=function(e){var t;return lc(t={},"color",function(e,t){return[fe(e,{color:t.color})]}),lc(t,"color_"+e,function(t,n){return[fe(t,{color:n["color_"+e]})]}),t},uc=xe({varFns:{lightTintFns:cc({},sc,dc("light")),darkTintFns:cc({},sc,dc("dark"))}}),_c={general_styles:function(e){return[fe(e,[G(),{color:"inherit",borderRadius:"inherit",pointerEvents:"none",":not(.pe-ripple--unconstrained)":{borderRadius:"inherit"," .pe-ripple__mask":{overflow:"hidden",borderRadius:"inherit"}}," .pe-ripple__mask":[G(),{transform:"translate3d(0,0,0)"}]," .pe-ripple__waves":{outline:"1px solid transparent",position:"absolute",borderRadius:"50%",pointerEvents:"none",display:"none"}," .pe-ripple__waves--animating":{display:"block"}}])]}},pc={general_styles:!0,color:"inherit"},fc=[me({varFns:_c}),uc],hc=".".concat("pe-ripple");function gc(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function bc(){return bc=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},bc.apply(this,arguments)}_e(hc,fc,pc),pe(hc,fc,pc);var mc={general_styles:function(e){return[fe(e,{" .pe-textfield__input-area":{backgroundColor:"transparent"}})]}},vc=function(e){var t;return gc(t={},"color_"+e+"_background",function(t,n){return[fe(t,{backgroundColor:n["color_"+e+"_background"]})]}),gc(t,"color_"+e+"_label_text",function(t,n){return[fe(t,{" .pe-textfield":{" .pe-textfield__label":{color:n["color_"+e+"_label_text"]}}})]}),gc(t,"color_"+e+"_input_text",function(t,n){return[fe(t,{" .pe-textfield":{" .pe-textfield__input":{color:n["color_"+e+"_input_text"]}}})]}),t},yc=xe({varFns:{lightTintFns:bc({},mc,vc("light")),darkTintFns:bc({},mc,vc("dark"))}}),xc=function(e,t){var n=(t.inset_height-t.line_height_input)/2;return fe(e,{".pe-search--inset":{" .pe-textfield__input, .pe-textfield__label":{paddingTop:n+"px",paddingBottom:n+"px"}}})},wc=function(e,t){var n=(t.full_width_height-t.line_height_input)/2;return fe(e,{".pe-search--full-width":{" .pe-textfield__input, .pe-textfield__label":{paddingTop:n+"px",paddingBottom:n+"px"}}})},kc={general_styles:function(e){return[fe(e,[V.flex(),{position:"relative"," .pe-textfield":[V.flex(),{alignItems:"center",padding:0,position:"relative",zIndex:1," .pe-textfield__input-area":{padding:0,":after":{display:"none"}}," .pe-textfield__input":{border:"none"}," .pe-textfield__label":{top:0,bottom:0}}]," .pe-search__content":{"&, .pe-textfield":V.layoutHorizontal,"&, .pe-textfield__input-area":{flexGrow:1}}," .pe-search__content > *":[V.layoutVertical,V.selfCenter],".pe-search--inset":{"&, .pe-textfield__input-area, .pe-textfield__input, .pe-textfield__label":{padding:0}}}])]},font_size_input:function(e,t){return[fe(e,{" .pe-textfield":{" .pe-textfield__input, .pe-textfield__label":{fontSize:t.font_size_input+"px"}}})]},line_height_input:function(e,t){return[fe(e,{" .pe-textfield__input, .pe-textfield__label":{lineHeight:t.line_height_input+"px"}}),xc(e,t)]},inset_border_radius:function(e,t){return[fe(e,{".pe-search--inset":{"border-radius":t.inset_border_radius+"px"}})]},inset_side_padding:function(e,t){return[fe(e,{".pe-search--inset":{padding:"0 "+t.inset_side_padding+"px"}})]},inset_height:function(e,t){return[fe(e,{".pe-search--inset":{"&, .pe-textfield__input-area, .pe-textfield__input, .pe-textfield__label":{padding:0,height:t.inset_height+"px"}}}),xc(e,t)]},full_width_height:function(e,t){return[fe(e,{".pe-search--full-width":{"&, .pe-textfield__input-area, .pe-textfield__input, .pe-textfield__label":{height:t.full_width_height+"px"}}}),wc(e,t)]},inset_input_indent:function(e,t){return[fe(e,{".pe-search--inset":{" .pe-textfield__input, .pe-textfield__label":{paddingLeft:t.inset_input_indent+"px"}}})]},inset_input_right_padding:function(e,t){return[fe(e,{".pe-search--inset":{" .pe-textfield__input, .pe-textfield__label":{paddingRight:t.inset_input_right_padding+"px"}}})]},full_width_side_padding:function(e,t){var n=Ht.unit_indent-t.full_width_side_padding-Ht.grid_unit_icon_button;return fe(e,{".pe-search--full-width":{padding:"0 "+t.full_width_side_padding+"px"," .pe-textfield__input, .pe-textfield__label":{paddingLeft:n+"px"}},".pe-search--full-width + .pe-list .pe-list-tile":{"> :first-child":{paddingLeft:t.full_width_side_padding+"px"},"> :last-child":{paddingRight:t.full_width_side_padding+"px"}}})},full_width_border_radius:function(e,t){return[fe(e,{".pe-search--full-width":{borderRadius:t.full_width_border_radius+"px"}})]},full_width_input_right_padding:function(e,t){return[fe(e,{".pe-search--full-width":{" .pe-textfield__input, .pe-textfield__label":{paddingRight:t.full_width_input_right_padding+"px"}}})]}},Oc=me({varFns:kc}),Sc={general_styles:!0,font_size_input:20,full_width_border_radius:0,full_width_height:56,full_width_input_right_padding:0,full_width_side_margin:0,full_width_side_padding:8,inset_border_radius:Ht.unit_block_border_radius,inset_height:48,inset_input_indent:16,inset_input_right_padding:0,inset_side_padding:0,line_height_input:20,color_light_label_text:ge(Ht.color_light_foreground,Ht.blend_light_text_disabled),color_light_input_text:ge(Ht.color_light_foreground,Ht.blend_light_text_primary),color_light_background:ge(Ht.color_light_background),color_dark_label_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_disabled),color_dark_input_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_primary),color_dark_background:ge(Ht.color_dark_background)},jc=[Oc,yc],Cc=".".concat("pe-search");function zc(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Pc(){return Pc=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Pc.apply(this,arguments)}_e(Cc,jc,Sc),pe(Cc,jc,Sc);var Tc={general_styles:function(e){return[fe(e,{" .pe-slider__control":{":after":{borderColor:"transparent"}}," .pe-slider__pin":{backgroundColor:"currentcolor",":before":{backgroundColor:"inherit"}},":not(.pe-slider--disabled)":{" .pe-slider__control":{backgroundColor:"currentcolor"}," .pe-slider__track-value .pe-slider__track-bar-value":{background:"currentcolor"},".pe-slider--focus:not(.pe-slider--min):not(.pe-slider--pin) .pe-slider__control:before,        &:not(.pe-slider--min):not(.pe-slider--pin) .pe-slider__control:focus:before":{backgroundColor:"currentcolor"}},".pe-slider--min:not(.pe-slider--disabled):not(.pe-slider--ticks)":{" .pe-slider__control":{backgroundColor:"transparent"}," .pe-slider__thumb":{opacity:0},".pe-slider--ticks":{" .pe-slider__control:after":{borderColor:"transparent"}}}})]}},Rc=function(e){var t;return zc(t={},"color_"+e+"_icon",function(t,n){return[fe(t,{":not(.pe-slider--disabled)":{" .pe-icon":{color:n["color_"+e+"_icon"]}}})]}),zc(t,"color_"+e+"_label",function(t,n){return[fe(t,{":not(.pe-slider--disabled)":{" .pe-slider__label":{color:n["color_"+e+"_label"]}}})]}),zc(t,"color_"+e+"_thumb_on",function(t,n){return[fe(t,{color:n["color_"+e+"_thumb_on"]})]}),zc(t,"color_"+e+"_track_inactive",function(t,n){return[fe(t,{" .pe-slider__track-bar-value":{background:n["color_"+e+"_track_inactive"]},".pe-slider--min:not(.pe-slider--disabled):not(.pe-slider--ticks)":{" .pe-slider__control:after":{borderColor:n["color_"+e+"_track_inactive"]}}})]}),zc(t,"color_"+e+"_tick",function(t,n){return[fe(t,{" .pe-slider__tick":{background:n["color_"+e+"_tick"]},".pe-slider--min:not(.pe-slider--disabled)":{".pe-slider--tick":{backgroundColor:n["color_"+e+"_tick"]}}})]}),zc(t,"color_"+e+"_tick_value",function(t,n){return[fe(t,{" .pe-slider__tick--value":{background:n["color_"+e+"_tick_value"]},".pe-slider--min:not(.pe-slider--disabled)":{".pe-slider--tick--value":{backgroundColor:n["color_"+e+"_tick_value"]}}})]}),zc(t,"color_"+e+"_disabled_icon",function(t,n){return[fe(t,{" .pe-icon":{color:n["color_"+e+"_disabled_icon"]}})]}),zc(t,"color_"+e+"_disabled_label",function(t,n){return[fe(t,{" .pe-slider__label":{color:n["color_"+e+"_disabled_label"]}})]}),zc(t,"color_"+e+"_track_active",function(t,n){return[fe(t,{".pe-slider--active":{" .pe-slider__track-bar-value":{background:n["color_"+e+"_track_active"]}},".pe-slider--min:not(.pe-slider--disabled)":{".pe-slider--active .pe-slider__control:after":{borderColor:n["color_"+e+"_track_active"]}}})]}),zc(t,"color_"+e+"_thumb_inactive",function(t,n){return[fe(t,{".pe-slider--disabled":{" .pe-slider__control":{background:n["color_"+e+"_thumb_inactive"]}}})]}),zc(t,"color_"+e+"_thumb_background",function(t,n){return[fe(t,{":not(.pe-slider--disabled)":{" .pe-slider__control":{backgroundColor:n["color_"+e+"_thumb_background"]}}})]}),zc(t,"color_"+e+"_thumb_off_focus_opacity",function(t,n){return[fe(t,{":not(.pe-slider--disabled)":{" .pe-slider__control":{":before":{opacity:n["color_"+e+"_thumb_off_focus_opacity"]}}}})]}),zc(t,"color_"+e+"_thumb_off_focus",function(t,n){return[fe(t,{":not(.pe-slider--disabled)":{".pe-slider--focus.pe-slider--min:not(.pe-slider--pin) .pe-slider__control:before,        .pe-slider--min:not(.pe-slider--pin) .pe-slider__control:focus:before":{backgroundColor:n["color_"+e+"_thumb_off_focus"]}}})]}),zc(t,"color_"+e+"_thumb_on_focus_opacity",function(t,n){return[fe(t,{":not(.pe-slider--disabled)":{".pe-slider--focus:not(.pe-slider--min):not(.pe-slider--pin) .pe-slider__control:before,        &:not(.pe-slider--min):not(.pe-slider--pin) .pe-slider__control:focus:before":{opacity:n["color_"+e+"_thumb_on_focus_opacity"]}}})]}),zc(t,"color_"+e+"_pin_label",function(t,n){return[fe(t,{" .pe-slider__pin:after":{color:n["color_"+e+"_pin_label"]}})]}),zc(t,"color_"+e+"_pin_background",function(t,n){return[fe(t,{" .pe-slider__pin":{backgroundColor:n["color_"+e+"_pin_background"]}})]}),zc(t,"color_"+e+"_track_value",function(t,n){return[fe(t,{":not(.pe-slider--disabled)":{" .pe-slider__track-value .pe-slider__track-bar-value":{backgroundColor:n["color_"+e+"_track_value"]}}})]}),t},Ec=xe({varFns:{lightTintFns:Pc({},Tc,Rc("light")),darkTintFns:Pc({},Tc,Rc("dark"))}}),Lc=function(e){var t=Math.max(e.thumb_size,2*e.thumb_border_width),n=t/2,r=n-1;return{normalThumbSize:t,disabledThumbSize:t-2*e.thumb_border_width,barOffset:n,stepsOffset:r}},Ic=function(e){var t=e.thumb_border_width,n=Math.max(1,e.thumb_border_width/e.active_thumb_scale);return{normalBorderWidth:t,disabledBorderWidth:1/e.disabled_thumb_scale*e.thumb_border_width,scaledBorderWidth:n}},Nc=function(e,t){var n=Lc(t),r=n.normalThumbSize,o=n.disabledThumbSize,i=Ic(t),a=i.normalBorderWidth,l=i.disabledBorderWidth;return fe(e,{" .pe-slider__control:after":{borderWidth:a+"px",width:r+"px",height:r+"px",left:0,top:0},".pe-slider--disabled .pe-slider__control:after":{borderWidth:l+"px",width:o+"px",height:o+"px",left:r-o+"px",top:r-o+"px"},".pe-slider--ticks .pe-slider__control:after":{borderWidth:0}})},Fc=function(e,t){return fe(e,{marginTop:(t.height-t.track_height)/2+"px "})},Dc=function(e,t){return fe(e,{" .pe-slider__track-part":{margin:(t.track_height-t.bar_height)/2+"px 0"}})},Ac=function(e,t){var n=Lc(t).normalThumbSize;return fe(e,{" .pe-slider__control:before":{left:-t.thumb_touch_size/2+n/2+"px",top:-t.thumb_touch_size/2+n/2+"px"}})},Hc=function(e,t){var n=Lc(t).normalThumbSize,r=Ic(t).scaledBorderWidth,o=(t.active_thumb_scale-1)*n/2;return fe(e,{".pe-slider--active:not(.pe-slider--ticks)":{" .pe-slider__control":{borderWidth:r+"px"}," .pe-slider__track-value .pe-slider__track-bar-value":{transform:"translateX("+-o+"px)"}," .pe-slider__track-rest .pe-slider__track-bar-value":{transform:"translateX("+o+"px)"}},".pe-slider--active.pe-slider--ticks":{" .pe-slider__control:after":{borderWidth:0}}})},Wc=function(e,t){var n=Lc(t).stepsOffset;return fe(e,{" .pe-slider__pin":{margin:"0 "+n+"px 0 "+(n-t.pin_width/2+1)+"px"}})},Bc={general_styles:function(e){return[fe(e,[V.layoutHorizontal,V.flexGrow(1),{userSelect:"none","-moz-user-select":"none",alignItems:"center"," > .pe-icon":V.layoutCenter," .pe-slider__track":[V.layoutHorizontal,V.flexGrow(1),{userSelect:"none","-moz-user-select":"none",position:"relative",outline:0}]," .pe-slider__control":[V.selfCenter,X("transform, background",".200s"),{transform:"scale(1)",userSelect:"none","-moz-user-select":"none",lineHeight:0,borderRadius:"50%",outline:0,zIndex:1,position:"relative",":before":{content:'""',position:"absolute",borderRadius:"50%"},":after":{content:'""',position:"absolute",borderRadius:"50%",borderStyle:"solid"}}]," .pe-slider__thumb":[G(),{"&, .pe-icon":{width:"inherit",height:"inherit"}}]," .pe-slider__label":{minWidth:Ht.unit_icon_size+"px",textAlign:"center",fontSize:"16px",fontWeight:Ht.font_weight_medium}," .pe-slider__track-part":[V.flex(),{userSelect:"none","-moz-user-select":"none",overflow:"hidden"}]," .pe-slider__track-value, .pe-slider__track-rest":V.layoutHorizontal," .pe-slider__track-bar":[V.flex(),{position:"relative",overflow:"hidden"}]," .pe-slider__track-bar-value":V.flex()," .pe-slider__ticks":[V.layoutJustified,{userSelect:"none","-moz-user-select":"none",position:"absolute",left:0,pointerEvents:"none"}]," .pe-slider__pin":[X("transform",".11s"),{transform:"translateZ(0) scale(0) translate(0, 0)",transformOrigin:"bottom",position:"absolute",zIndex:1,height:0,left:0,top:0,pointerEvents:"none","&::before, &::after":{position:"absolute",top:0,left:0},"::before":{transform:"rotate(-45deg)",content:'""',borderRadius:"50% 50% 50% 0"},"::after":{content:"attr(value)",textAlign:"center"}}],".pe-slider--pin.pe-slider--active, &.pe-slider--pin.pe-slider--focus":{" .pe-slider__pin":{transform:"translateZ(0) scale(1) translate(0, -24px)"}},":not(.pe-slider--disabled)":{" .pe-slider__control":{cursor:"pointer"},".pe-slider--track":{" .pe-slider__track":{cursor:"pointer"}}},".pe-slider--disabled":{" .pe-slider__control":{borderWidth:0}}}])]},thumb_size:function(e,t){var n=Lc(t),r=n.normalThumbSize,o=n.barOffset,i=n.stepsOffset;return[fe(e,{" .pe-slider__control":{width:r+"px",height:r+"px"}," .pe-slider__track-value .pe-slider__track-bar":{marginLeft:o+"px"}," .pe-slider__track-rest .pe-slider__track-bar":{marginRight:o+"px"}," .pe-slider__ticks":{width:"calc(100% - "+2*i+"px)",margin:"0 "+i+"px"}}),Nc(e,t),Ac(e,t),Hc(e,t),Wc(e,t)]},active_thumb_scale:function(e,t){return[fe(e,{".pe-slider--active:not(.pe-slider--ticks)":{" .pe-slider__control":{transform:"scale("+t.active_thumb_scale+")"}}}),Hc(e,t)]},thumb_touch_size:function(e,t){return[fe(e,{" .pe-slider__control":{":before":{width:t.thumb_touch_size+"px",height:t.thumb_touch_size+"px"}}}),Ac(e,t)]},thumb_border_width:function(e,t){return[fe(e,{}),Nc(e,t)]},disabled_thumb_scale:function(e,t){return[fe(e,{".pe-slider--disabled":{" .pe-slider__control":{transform:"scale("+t.disabled_thumb_scale+")"}}}),Nc(e,t)]},active_pin_thumb_scale:function(e,t){return[fe(e,{".pe-slider--pin.pe-slider--active, &.pe-slider--pin.pe-slider--focus":{" .pe-slider__control":{transform:"scale("+t.active_pin_thumb_scale+")"}}})]},height:function(e,t){return[fe(e,{height:t.height+"px"," > .pe-icon":{height:t.height+"px"}," .pe-slider__label":{height:t.height+"px",lineHeight:t.height+"px"}," .pe-slider__ticks":{top:t.height/2-1+"px"}}),Fc(e,t)]},track_height:function(e,t){return[fe(e,{" .pe-slider__track":{height:t.track_height+"px"}}),Fc(e,t),Dc(e,t)]},animation_duration:function(e,t){return[fe(e,{" .pe-slider__track":X("transform",t.animation_duration)," .pe-slider__control:before":X("background-color",t.animation_duration)," .pe-slider__control:after":X("border",t.animation_duration)," .pe-slider__thumb":X("opacity",t.animation_duration)," .pe-slider__track-bar-value":X("transform, background-color",t.animation_duration)})]},side_spacing:function(e,t){return[fe(e,{" .pe-slider__track":{margin:"0 "+t.side_spacing+"px"}})]},horizontal_layout_side_spacing:function(e,t){return[fe(e,{" div + .pe-slider__track":{margin:"0 "+t.horizontal_layout_side_spacing+"px"}})]},bar_height:function(e,t){return[fe(e,{" .pe-slider__track-part,        .pe-slider__track-bar-value,        .pe-slider__ticks,        .pe-slider__tick":{height:t.bar_height+"px"}}),Dc(e,t)]},step_width:function(e,t){return[fe(e,{" .pe-slider__tick":{width:t.step_width+"px"}})]},pin_width:function(e,t){return[fe(e,{" .pe-slider__pin":{width:t.pin_width+"px","::before":{width:t.pin_width+"px",height:t.pin_width+"px"},"::after":{width:t.pin_width+"px",height:t.pin_height+"px",lineHeight:t.pin_width+"px"}}}),Wc(e,t)]},pin_font_size:function(e,t){return[fe(e,{" .pe-slider__pin::after":{fontSize:t.pin_font_size+"px"}})]}},Mc=me({varFns:Bc}),qc=Ht.color_light_foreground,Vc=Ht.color_dark_foreground,$c=Ht.color_primary,Kc=Math.max(40,12),Uc=Math.max(Kc,18),Jc=Math.max(52,18),Qc=Math.max(10,Uc/2-6),Zc={general_styles:!0,active_pin_thumb_scale:2/6,active_thumb_scale:1.5,animation_duration:Ht.animation_duration,bar_height:2,disabled_thumb_scale:.5,height:Jc,horizontal_layout_side_spacing:Qc+4,pin_font_size:10,pin_height:32,pin_width:26,side_spacing:Qc,step_width:2,thumb_border_width:2,thumb_size:12,thumb_touch_size:Kc,track_height:Jc,color_light_track_active:ge(qc,.38),color_light_track_inactive:ge(qc,.26),color_light_track_value:"currentColor",color_light_thumb_off:ge(qc,.26),color_light_thumb_off_focus:ge(qc),color_light_thumb_off_focus_opacity:.08,color_light_thumb_on:ge($c),color_light_thumb_on_focus_opacity:.11,color_light_thumb_inactive:ge(qc,.26),color_light_tick:ge(qc,1),color_light_tick_value:ge(qc,1),color_light_icon:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_disabled_icon:ge(Ht.color_light_foreground,Ht.blend_light_text_disabled),color_light_label:ge(Ht.color_light_foreground,Ht.blend_light_text_secondary),color_light_disabled_label:ge(Ht.color_light_foreground,Ht.blend_light_text_disabled),color_light_pin_label:"#fff",color_light_pin_background:"currentColor",color_dark_track_active:ge(Vc,.3),color_dark_track_inactive:ge(Vc,.2),color_dark_track_value:"currentColor",color_dark_thumb_off:ge(Vc,.2),color_dark_thumb_off_focus:ge(Vc),color_dark_thumb_off_focus_opacity:.08,color_dark_thumb_on:ge($c),color_dark_thumb_on_focus_opacity:.11,color_dark_thumb_inactive:ge(Vc,.2),color_dark_tick:ge(Vc,1),color_dark_tick_value:ge(Vc,1),color_dark_icon:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_disabled_icon:ge(Ht.color_dark_foreground,Ht.blend_dark_text_disabled),color_dark_label:ge(Ht.color_dark_foreground,Ht.blend_dark_text_secondary),color_dark_disabled_label:ge(Ht.color_dark_foreground,Ht.blend_dark_text_disabled),color_dark_pin_label:"#fff",color_dark_pin_background:"currentColor"},Xc=[Mc,Ec],Yc=".".concat("pe-slider");function Gc(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function es(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}_e(Yc,Xc,Zc),pe(Yc,Xc,Zc);var ts,ns=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?es(n,!0).forEach(function(t){Gc(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):es(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},{component:"pe-notification",action:"pe-notification__action",content:"pe-notification__content",holder:"pe-notification__holder",placeholder:"pe-notification__placeholder",title:"pe-notification__title",hasContainer:"pe-notification--container",horizontal:"pe-notification--horizontal",multilineTitle:"pe-notification__title--multi-line",vertical:"pe-notification--vertical",visible:"pe-notification--visible"},{component:"pe-notification pe-snackbar",holder:"pe-snackbar__holder",placeholder:"pe-snackbar__placeholder",open:"pe-snackbar--open"}),rs=xe({superColor:$l}),os={general_styles:function(e){return[fe(e,[V.layoutCenterCenter,{position:"fixed",top:"auto",right:0,bottom:0,left:0,zIndex:Ht.z_notification,pointerEvents:"none",justifyContent:"flex-start",width:"100%"}]),Gc({},".pe-notification--container ".concat(e),{position:"relative"})]}},is=me({varFns:os}),as=(ts="@media (min-width: ".concat(Ht.breakpoint_for_tablet_portrait_up,"px)"),function(e,t){return Gc({},ts,Gc({},e,t))}),ls={general_styles:function(e){return[fe(e,{width:"100%",opacity:1,display:"none"," .pe-notification__content":{width:"100%",margin:"0 auto",borderBottomLeftRadius:0,borderBottomRightRadius:0}}),as(e,{".pe-notification--horizontal":{" .pe-notification__title":{paddingRight:"30px"}}})]},min_width:function(e,t){return[as(e,{minWidth:t.min_width+"px"})]},max_width:function(e,t){return[as(e,{maxWidth:t.max_width+"px"})]},border_radius:function(e,t){return[fe(e,{" .pe-notification__content":{borderTopLeftRadius:t.border_radius+"px",borderTopRightRadius:t.border_radius+"px",borderBottomLeftRadius:0,borderBottomRightRadius:0}})]}},cs=me({varFns:ls,customVarFns:Ql}),ss={general_styles:!0,animation_hide_css:"",animation_show_css:"",border_radius:0,max_width:568,min_height:0,min_width:288,color_light_background:ge(Ht.color_light_background),color_dark_background:ge(Ht.color_dark_background)},ds=[cs,rs],us=".".concat(ns.component.replace(/ /g,".")),_s=[is],ps=".".concat(ns.holder.replace(/ /g,"."));function fs(){return fs=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},fs.apply(this,arguments)}var hs={general_styles:function(e){return[fe(e,{color:"inherit"," svg":{color:"inherit"," path, rect, circle, polygon":{"&:not([fill=none])":{fill:"currentcolor"}}}})]}},gs=function(e){return r=function(t,n){return[fe(t,{" svg":{" path, rect, circle, polygon":{"&:not([fill=none])":{fill:n["color_"+e]}}}})]},(n="color_"+e)in(t={})?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t;var t,n,r},bs=xe({varFns:{lightTintFns:fs({},hs,gs("light")),darkTintFns:fs({},hs,gs("dark"))}}),ms={general_styles:function(e){return[fe(e,{lineHeight:1," > div, svg":{width:"inherit",height:"inherit"}})]}},vs={general_styles:!0,color_light:"currentcolor",color_dark:"currentcolor"},ys=[me({varFns:ms}),bs],xs=".".concat("pe-svg");function ws(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function ks(){return ks=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ks.apply(this,arguments)}_e(xs,ys,vs),pe(xs,ys,vs);var Os={general_styles:function(e){return[fe(e,{})]}},Ss=function(e){var t;return ws(t={},"color_"+e+"_label",function(t,n){return[fe(t,{" .pe-control__label":{color:n["color_"+e+"_label"]}})]}),ws(t,"color_"+e+"_track_off",function(t,n){return[fe(t,{".pe-control--off":{" .pe-switch-control__track":{backgroundColor:n["color_"+e+"_track_off"]}}})]}),ws(t,"color_"+e+"_track_off_opacity",function(t,n){return[fe(t,{".pe-control--off":{" .pe-switch-control__track":{opacity:n["color_"+e+"_track_off_opacity"]}}})]}),ws(t,"color_"+e+"_thumb_off",function(t,n){return[fe(t,{".pe-control--off":{" .pe-switch-control__knob":{backgroundColor:n["color_"+e+"_thumb_off"]}}})]}),ws(t,"color_"+e+"_icon_off",function(t,n){return[fe(t,{".pe-control--off":{" .pe-icon":{color:n["color_"+e+"_icon_off"]}}})]}),ws(t,"color_"+e+"_off_label",function(t,n){return[fe(t,{".pe-control--off":{" .pe-control__label":{color:n["color_"+e+"_off_label"]}}})]}),ws(t,"color_"+e+"_track_on",function(t,n){return[fe(t,{".pe-control--on":{" .pe-switch-control__track":{backgroundColor:n["color_"+e+"_track_on"]}}})]}),ws(t,"color_"+e+"_track_on_opacity",function(t,n){return[fe(t,{".pe-control--on":{" .pe-switch-control__track":{opacity:n["color_"+e+"_track_on_opacity"]}}})]}),ws(t,"color_"+e+"_thumb_on",function(t,n){return[fe(t,{".pe-control--on":{" .pe-switch-control__knob":{backgroundColor:n["color_"+e+"_thumb_on"]}}})]}),ws(t,"color_"+e+"_icon_on",function(t,n){return[fe(t,{".pe-control--on":{" .pe-icon":{color:n["color_"+e+"_icon_on"]}}})]}),ws(t,"color_"+e+"_on_label",function(t,n){return[fe(t,{".pe-control--on":{" .pe-control__label":{color:n["color_"+e+"_on_label"]}}})]}),ws(t,"color_"+e+"_disabled",function(t,n){return[fe(t,{".pe-control--on.pe-control--disabled, &.pe-control--off.pe-control--disabled":{" .pe-control__label":{color:n["color_"+e+"_disabled"]}}})]}),ws(t,"color_"+e+"_track_disabled",function(t,n){return[fe(t,{".pe-control--on.pe-control--disabled, &.pe-control--off.pe-control--disabled":{" .pe-switch-control__track":{backgroundColor:n["color_"+e+"_track_disabled"]}}})]}),ws(t,"color_"+e+"_track_disabled_opacity",function(t,n){return[fe(t,{".pe-control--on.pe-control--disabled, &.pe-control--off.pe-control--disabled":{" .pe-switch-control__track":{opacity:n["color_"+e+"_track_disabled_opacity"]}}})]}),ws(t,"color_"+e+"_thumb_disabled",function(t,n){return[fe(t,{".pe-control--on.pe-control--disabled, &.pe-control--off.pe-control--disabled":{" .pe-switch-control__thumb, .pe-button__content":{color:n["color_"+e+"_thumb_disabled"]}}})]}),t},js=xe({varFns:{lightTintFns:ks({},Os,Ss("light")),darkTintFns:ks({},Os,Ss("dark")),lightTintHoverFns:{},darkTintHoverFns:{}}}),Cs=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.animation_duration;return X(t,n,"ease-out")},zs=function(e,t){var n=t/Ht.unit_icon_size,r=2*Math.floor(.5*e.thumb_size*n),o=2*Math.floor(.5*e.track_height*n),i=2*Math.floor(.5*e.track_length*n),a=2*Math.floor(.5*e.thumb_size*n),l=(e.label_height*n-o)/2,c=e.icon_button_padding,s=(t-a)/2,d=-(t+2*c)/2+r/2;return{factor:n,scaledThumbSize:a,scaledTrackHeight:o,scaledTrackWidth:i,size:t,thumbMargin:s,thumbOffsetMax:d+i-r,thumbOffsetMin:d,thumbOffsetY:d+s,thumbPadding:c,trackTop:l,trackVisualOffset:.3}},Ps=function(e,t){var n=t.scaledThumbSize,r=t.scaledTrackHeight,o=t.scaledTrackWidth,i=t.size,a=t.thumbMargin,l=t.thumbOffsetY,c=t.thumbPadding,s=t.trackTop;return{" .pe-control__form-label":{height:i+"px",minWidth:o+"px"}," .pe-switch-control__track":{height:r+"px",width:o-2*t.trackVisualOffset+"px",top:s+"px",borderRadius:r+"px"}," .pe-switch-control__thumb":{top:l+"px"}," .pe-switch-control__knob":{width:n+"px",height:n+"px",margin:a+"px"}," .pe-button__content":{padding:c+"px"}}},Ts=function(e,t,n){var r,o,i,a,l=t.factor,c=t.scaledTrackWidth,s=t.thumbOffsetMax,d=t.thumbOffsetMin,u=t.trackVisualOffset;return{" .pe-control__label":(r={},ws(r,n?"paddingRight":"paddingLeft",e.padding*l+8+c+"px"),ws(r,n?"paddingLeft":"paddingRight",0),r)," .pe-switch-control__track":(o={},ws(o,n?"right":"left",u+"px"),ws(o,n?"left":"right","auto"),o)," .pe-switch-control__thumb":(i={},ws(i,n?"right":"left",d+"px"),ws(i,n?"left":"right","auto"),i),".pe-control--on":{" .pe-switch-control__thumb":(a={},ws(a,n?"right":"left",s+"px"),ws(a,n?"left":"right","auto"),a)}}},Rs=function(e){return function(){var t;return{" .pe-switch-control__track":(t={},ws(t,e?"right":"left",0),ws(t,e?"left":"right","auto"),t)}}},Es=Rs(!1),Ls=Rs(!0),Is={general_styles:function(e){return[fe(e,[Es(),{" .pe-switch-control__track":[{position:"absolute"}]," .pe-switch-control__thumb":{position:"absolute",zIndex:1,color:"inherit",":focus":{outline:0}}," .pe-switch-control__knob":{position:"relative",borderRadius:"50%"}," .pe-icon-button .pe-button__content":{transition:"none"," .pe-switch-control__knob .pe-icon":[G(),{width:"100%",height:"100%"}]}}]),ws({},"_:-ms-fullscreen, :root ".concat(e),{" input":{position:"absolute",zIndex:1,width:"100%",height:"100%",left:0,top:0,right:0,bottom:0,display:"block",opacity:0,cursor:"pointer"}," label":{cursor:"auto"}})]},animation_duration:function(e,t){return[fe(e,{" .pe-switch-control__track, .pe-switch-control__thumb, .pe-control__label":Cs(t,"all")})]},createSize:function(e,t){var n={small:zs(t,Ht.unit_icon_size_small),regular:zs(t,Ht.unit_icon_size),medium:zs(t,Ht.unit_icon_size_medium),large:zs(t,Ht.unit_icon_size_large)};return[fe(e,{".pe-control--small":[Ps(0,n.small),Ts(t,n.small,!1)],".pe-control--regular":[Ps(0,n.regular),Ts(t,n.regular,!1)],".pe-control--medium":[Ps(0,n.medium),Ts(t,n.medium,!1)],".pe-control--large":[Ps(0,n.large),Ts(t,n.large,!1)]}),ws({},"*[dir=rtl] ".concat(e,", .pe-rtl ").concat(e),[Ls(),{".pe-control--small":[Ts(t,n.small,!0)],".pe-control--regular":[Ts(t,n.regular,!0)],".pe-control--medium":[Ts(t,n.medium,!0)],".pe-control--large":[Ts(t,n.large,!0)]}])]}},Ns=me({varFns:Is,superLayout:Yr,varMixin:function(e){return e.thumb_size||e.track_height||e.track_length||e.label_height||e.icon_button_padding?ks({},e,{createSize:!0}):e}}),Fs={general_styles:!0,animation_duration:Ht.animation_duration,hit_area_padding:(Ht.grid_unit_icon_button-Ht.unit_icon_size)/2,icon_button_padding:Ui.padding,padding:Ht.grid_unit_component,thumb_size:20,track_height:14,track_length:36,label_height:Gr.label_height,color_light_thumb_on:ge(Ht.color_primary),color_light_thumb_off:"#f1f1f1",color_light_thumb_disabled:"#eee",color_light_wash_on:ge(Ht.color_primary,Ht.blend_light_background_active),color_light_wash_off:Ui.color_light_wash_background,color_light_track_on:ge(Ht.color_primary_faded),color_light_track_on_opacity:.55,color_light_track_off:ge(Ht.color_light_foreground,Ht.blend_light_text_regular),color_light_track_off_opacity:.55,color_light_track_disabled:ge(Ht.color_light_foreground,Ht.blend_light_background_disabled),color_light_track_disabled_opacity:1,color_dark_thumb_on:ge(Ht.color_primary),color_dark_thumb_off:"#bdbdbd",color_dark_thumb_disabled:"#555",color_dark_wash_on:ge(Ht.color_primary,Ht.blend_dark_background_active),color_dark_wash_off:Ui.color_dark_wash_background,color_dark_track_on:ge(Ht.color_primary_faded,Ht.blend_dark_text_tertiary),color_dark_track_on_opacity:9,color_dark_track_off:"#717171",color_dark_track_off_opacity:.55,color_dark_track_disabled:"#717171",color_dark_track_disabled_opacity:.3},Ds=[Ns,js],As=".".concat("pe-switch-control"),Hs=(_e(As,Ds,Fs),pe(As,Ds,Fs),"pe-tabs");function Ws(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Bs(){return Bs=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Bs.apply(this,arguments)}var Ms={general_styles:function(e){return[fe(e,{".pe-button--selected":{" .pe-button__content":{background:"transparent"}}})]}},qs=function(e){var t;return Ws(t={},"color_"+e+"_selected",function(t,n){return[fe(t,{".pe-button--selected":{" .pe-button__content":{color:n["color_"+e+"_selected"]}}})]}),Ws(t,"color_"+e+"_selected_background",function(t,n){return[fe(t,{".pe-button--selected":{" .pe-button__content":{background:n["color_"+e+"_selected_background"]}}})]}),Ws(t,"color_"+e+"_icon",function(t,n){return[fe(t,{":not(.pe-button--selected) .pe-icon":{color:n["color_"+e+"_icon"]}})]}),t},Vs=xe({varFns:{lightTintFns:Bs({},Ms,qs("light")),darkTintFns:Bs({},Ms,qs("dark"))}}),$s=function(e,t){return fe(e,{" .pe-button__content":X(t.tab_label_transition_property,t.animation_duration)})},Ks={general_styles:function(e){return[fe(e,[V.flex(),V.flexIndex("none"),{userSelect:"none","-moz-user-select":"none",margin:0,borderRadius:0,padding:0," .pe-button__content":{lineHeight:Ht.line_height+"em",borderRadius:0,position:"relative"," .pe-button__label, .pe-icon":{overflow:"hidden",whiteSpace:"normal"}," .pe-button__label":{padding:0,width:"100%"}," .pe-icon":{marginLeft:"auto",marginRight:"auto"}},".pe-tabs__tab--icon":{"&, .pe-button__content":{" .pe-button__content, .pe-icon":{margin:"0 auto"}}},".pe-tabs--menu &":{"&, &.pe-tabs__tab--icon, &.pe-text-button":{minWidth:0," .pe-button__content":{" .pe-icon":{marginBottom:0}," .pe-button__content":{fontSize:"10px",lineHeight:"12px",textTransform:"none"}}}},".pe-tabs--compact &":{minWidth:"initial"}," .pe-tabs__tab-content":[V.layoutCenterCenter,V.layoutVertical,{height:"inherit"}],".pe-tabs--autofit &":[V.flex(),{minWidth:"initial",maxWidth:"none"}],".pe-tabs__active--selectable &":{".pe-button--selected":{cursor:"pointer",pointerEvents:"initial"}}}])]},tab_height:function(e,t){return[fe(e,{height:t.tab_height+"px"," .pe-button__content":{height:t.tab_height+"px"}})]},tab_min_width:function(e,t){return[fe(e,{minWidth:t.tab_min_width+"px"})]},tab_max_width:function(e,t){return[fe(e,{maxWidth:isNaN(t.tab_max_width)?t.tab_max_width:t.tab_max_width+"px"})]},tab_min_width_tablet:function(e,t){return Ws({},"@media (min-width: "+Ht.breakpoint_for_tablet_landscape_up+"px)",Ws({},".pe-tabs:not(.pe-tabs--small):not(.pe-tabs--menu):not(.pe-tabs--autofit):not(.pe-tabs--scrollable):not(.pe-tabs--compact) ".concat(e),{minWidth:t.tab_min_width_tablet+"px"}))},tab_icon_label_height:function(e,t){return[fe(e,{".pe-tabs__tab--icon":{"&, .pe-button__content":{height:t.tab_icon_label_height+"px"}}})]},tab_label_transition_property:function(e,t){return[$s(e,t)]},animation_duration:function(e,t){return[$s(e,t)]},tab_content_padding_v:function(e,t){return[fe(e,{" .pe-button__content":{padding:"0 "+t.tab_content_padding_v+"px"}})]},label_max_width:function(e,t){return[fe(e,{" .pe-button__content":{" .pe-button__label, .pe-icon":{maxWidth:t.label_max_width+"px"}}})]},tab_label_line_height:function(e,t){return[fe(e,{" .pe-button__content":{" .pe-button__label, .pe-icon":{lineHeight:t.tab_label_line_height+"px",maxHeight:2*t.tab_label_line_height+"px"}}})]},tab_label_vertical_offset:function(e,t){return[fe(e,{" .pe-button__content":{" .pe-button__label":{margin:t.tab_label_vertical_offset+"px 0 0 0"}}})]},tab_icon_label_icon_spacing:function(e,t){return[fe(e,{".pe-tabs__tab--icon":{"&, .pe-button__content":{" .pe-icon":{marginBottom:t.tab_icon_label_icon_spacing+"px"}}}})]},menu_tab_height:function(e,t){return[fe(e,{".pe-tabs--menu &":{height:t.menu_tab_height+"px","&, &.pe-tabs__tab--icon, &.pe-text-button":{" .pe-button__content":{height:t.menu_tab_height+"px"}}}})]},menu_tab_icon_label_height:function(e,t){return[fe(e,{".pe-tabs--menu &":{"&.pe-tabs__tab--icon":{height:t.menu_tab_icon_label_height+"px"}}})]},tab_menu_content_padding_v:function(e,t){return[fe(e,{".pe-tabs--menu &":{"&, &.pe-tabs__tab--icon, &.pe-text-button":{" .pe-button__content":{padding:"0 "+t.tab_menu_content_padding_v+"px"}}}})]}},Us=me({varFns:Ks}),Js={general_styles:function(e){return[fe(e,{" .pe-tabs__scroll-button":{color:"inherit"}," .pe-no-touch &":{".pe-tabs--scrollable":{backgroundColor:"inherit"}," .pe-tabs__scroll-button":{backgroundColor:"inherit"," .pe-button__content":{backgroundColor:"inherit"}}}})]}},Qs=function(e){return Ws({},"color_"+e+"_tab_indicator",function(t,n){return[fe(t,{" .pe-tabs__indicator":{backgroundColor:n["color_"+e+"_tab_indicator"]}})]})},Zs=xe({varFns:{lightTintFns:Bs({},Js,Qs("light")),darkTintFns:Bs({},Js,Qs("dark"))}}),Xs=function(e){return function(){return{" .pe-tabs__indicator":Ws({transformOrigin:e?"right 50%":"left 50%"},e?"right":"left",0)}}},Ys=Xs(!1),Gs=Xs(!0),ed=function(e,t,n){return fe(e,{" .pe-tabs__row":{".pe-tabs__row--indent":Ws({},n?"paddingRight":"paddingLeft",t.tabs_indent+"px")}})},td={general_styles:function(e){return[fe(e,[Ys(),{userSelect:"none","-moz-user-select":"none",transform:"translate3d(0,0,0)","-webkit-overflow-scrolling":"touch","& ::-webkit-scrollbar":{display:"none"},".pe-tabs--scrollable":{display:"flex","-ms-overflow-style":"none"," .pe-tabs__scroll-button":{display:"none"}," .pe-tabs__tab":{minWidth:0}}," .pe-no-touch &":{" .pe-tabs__scroll-button":{position:"relative",display:"block",zIndex:1,borderRadius:0," .pe-button__content":{borderRadius:0,transitionProperty:"all",transitionTimingFunction:"ease-in-out"}},".pe-tabs--start .pe-tabs__scroll-button-start":{pointerEvents:"none",cursor:"default",opacity:0},".pe-tabs--end .pe-tabs__scroll-button-end":{pointerEvents:"none",cursor:"default",opacity:0}}," .pe-tabs__row":[V.layoutHorizontal,{userSelect:"none","-moz-user-select":"none",position:"relative",whiteSpace:"nowrap",".pe-tabs__row--indent":{margin:0,overflow:"auto"},".pe-tabs__row--centered":V.layoutCenterJustified}]," .pe-tabs__scroll-button-offset":[V.flex(),V.flexIndex("none")]," .pe-tabs__indicator":{transform:"translate3d(0,0,0)",transitionProperty:"all",transitionTimingFunction:"ease-in-out",position:"absolute",zIndex:1,bottom:0,width:"100%",opacity:0}," .pe-toolbar--tabs .pe-toolbar__bar &":[G(),{width:"auto",margin:0,top:"auto"}]}]),Ws({},"*[dir=rtl] ".concat(e,", .pe-rtl ").concat(e),[Gs()])]},tabs_indent:function(e,t){return[ed(e,t,!1),ed(he(e),t,!0)]},tab_height:function(e,t){return[fe(e,{".pe-tabs--scrollable":{display:"flex","max-height":t.tab_height+"px"}})]},scrollbar_offset:function(e,t){return[fe(e,{".pe-tabs--scrollable":{" .pe-tabs__row":{marginBottom:-t.scrollbar_offset+"px"}}})]},scroll_button_size:function(e,t){return[fe(e,{" .pe-no-touch &":{" .pe-tabs__scroll-button":{width:t.scroll_button_size+"px",height:t.scroll_button_size+"px"}}})]},scroll_button_fade_duration:function(e,t){return[fe(e,{" .pe-no-touch &":{" .pe-tabs__scroll-button":{" .pe-button__content":{transitionDuration:t.scroll_button_fade_duration}}}})]},scroll_button_fade_delay:function(e,t){return[fe(e,{" .pe-no-touch &":{" .pe-tabs__scroll-button":{" .pe-button__content":{transitionDelay:t.scroll_button_fade_delay}}}})]},scroll_button_opacity:function(e,t){return[fe(e,{" .pe-no-touch &":{" .pe-tabs__scroll-button":{" .pe-button__content":{opacity:t.scroll_button_opacity}}}})]},tab_indicator_height:function(e,t){return[fe(e,{" .pe-tabs__indicator":{height:t.tab_indicator_height+"px"}})]}},nd=me({varFns:td}),rd=dr.font_size,od=1.1*rd,id={general_styles:!0,animation_duration:dr.animation_duration,indicator_slide_speed:600,label_max_width:264,menu_tab_height:44,menu_tab_icon_label_height:44,scroll_button_fade_delay:".25s",scroll_button_fade_duration:".2s",scroll_button_opacity:.7,scroll_button_size:48,scrollbar_offset:0,tab_content_padding_v:12,tab_height:48,tab_icon_label_height:72,tab_icon_label_icon_spacing:7,tab_indicator_height:2,tab_label_line_height:od,tab_label_transition_property:"opacity, color, backgroundColor",tab_label_vertical_offset:od-rd,tab_max_width:"initial",tab_menu_content_padding_v:6,tab_min_width:72,tab_min_width_tablet:160,tabs_indent:0,color_light_text:ge(Ht.color_light_foreground,Ht.blend_light_text_regular),color_light_selected:ge(Ht.color_primary),color_light_selected_background:"transparent",color_light_tab_indicator:ge(Ht.color_primary),color_light_icon:Ui.color_light,color_dark_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_regular),color_dark_selected:ge(Ht.color_primary),color_dark_selected_background:"transparent",color_dark_tab_indicator:ge(Ht.color_primary),color_dark_icon:Ui.color_dark},ad=[nd,Zs],ld=[Us,Vs],cd=".".concat(Hs),sd="".concat("pe-tab"," pe-text-button pe-button"),dd=" .".concat(sd.replace(/ /g,"."));function ud(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function _d(){return _d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},_d.apply(this,arguments)}var pd={general_styles:function(e){return[fe(e,{" .pe-textfield__input-area":{color:"inherit","&:after":{backgroundColor:"currentcolor"}},".pe-textfield--disabled, &.pe-textfield--readonly":{" .pe-textfield__input-area:after":{backgroundColor:"transparent"}},".pe-textfield--invalid:not(.pe-textfield--hide-validation)":{" .pe-textfield__input":{boxShadow:"none"}}})]}},fd=function(e){var t;return ud(t={},"color_"+e+"_focus_border",function(t,n){return[fe(t,{color:n["color_"+e+"_focus_border"]})]}),ud(t,"color_"+e+"_input_background",function(t,n){return[fe(t,{" .pe-textfield__input-area":{backgroundColor:n["color_"+e+"_input_background"]}," .pe-textfield__input:-webkit-autofill":{"-webkit-box-shadow":"0 0 0px 1000px "+n["color_"+e+"_input_background"]+" inset"}})]}),ud(t,"color_"+e+"_input_text",function(t,n){return[fe(t,{" .pe-textfield__input":{color:n["color_"+e+"_input_text"]}," .pe-textfield__input:-webkit-autofill":{color:n["color_"+e+"_input_text"]+" !important"}})]}),ud(t,"color_"+e+"_counter_ok_border",function(t,n){return[fe(t,{".pe-textfield--counter ":{" .pe-textfield__input-area:after":{backgroundColor:n["color_"+e+"_counter_ok_border"]}}})]}),ud(t,"color_"+e+"_input_bottom_border",function(t,n){return[fe(t,{" .pe-textfield__input":{borderColor:n["color_"+e+"_input_bottom_border"]}})]}),ud(t,"color_"+e+"_label_text",function(t,n){return[fe(t,{" .pe-textfield__label":{color:n["color_"+e+"_label_text"]}})]}),ud(t,"color_"+e+"_disabled_label_text",function(t,n){return[fe(t,{".pe-textfield--disabled, &.pe-textfield--readonly":{" .pe-textfield__input-area:after":{backgroundImage:"linear-gradient(to right, "+n["color_"+e+"_disabled_label_text"]+" 20%, rgba(255, 255, 255, 0) 0%)"}},".pe-textfield--disabled":{" .pe-textfield__input, .pe-textfield__label":{color:n["color_"+e+"_disabled_label_text"]}}})]}),ud(t,"color_"+e+"_readonly_label_text",function(t,n){return[fe(t,{".pe-textfield--readonly":{" .pe-textfield__input, .pe-textfield__label":{color:n["color_"+e+"_readonly_label_text"]}}})]}),ud(t,"color_"+e+"_highlight_text",function(t,n){return[fe(t,{".pe-textfield--focused":{".pe-textfield--floating-label .pe-textfield__label":{color:n["color_"+e+"_highlight_text"]}}})]}),ud(t,"color_"+e+"_required_symbol",function(t,n){return[fe(t,{".pe-textfield--focused":{".pe-textfield--required.pe-textfield--floating-label":{" .pe-textfield__required-indicator":{color:n["color_"+e+"_required_symbol"]}}}})]}),ud(t,"color_"+e+"_help_text",function(t,n){return[fe(t,{" .pe-textfield__help, .pe-textfield__counter":{color:n["color_"+e+"_help_text"]}})]}),ud(t,"color_"+e+"_input_error_border",function(t,n){return[fe(t,{".pe-textfield--invalid:not(.pe-textfield--hide-validation)":{" .pe-textfield__input":{borderColor:n["color_"+e+"_input_error_border"]},"&, &.pe-textfield--counter":{" .pe-textfield__input-area:after":{backgroundColor:n["color_"+e+"_input_error_border"]}}}})]}),ud(t,"color_"+e+"_input_error_text",function(t,n){return[fe(t,{".pe-textfield--invalid:not(.pe-textfield--hide-validation)":{" .pe-textfield__label":{color:n["color_"+e+"_input_error_text"]}," .pe-textfield__error, .pe-textfield__counter, .pe-textfield__help":{color:n["color_"+e+"_input_error_text"]},".pe-textfield--required .pe-textfield__label":{color:n["color_"+e+"_input_error_text"]}}})]}),t},hd=xe({varFns:{lightTintFns:_d({},pd,fd("light")),darkTintFns:_d({},pd,fd("dark"))}}),gd=function(e){return function(){return{" .pe-textfield__counter":{textAlign:e?"left":"right",float:e?"left":"right",padding:e?"0 16px 0 0":"0 0 0 16px"}}}},bd=gd(!1),md=gd(!0),vd=function(e,t){return fe(e,{" .pe-textfield__label":{top:t.vertical_spacing_top+t.input_padding_v+"px"}})},yd=function(e,t){return fe(e,{".pe-textfield--floating-label .pe-textfield__label":{top:t.floating_label_vertical_spacing_top+t.input_padding_v+"px"}})},xd=function(e,t){return fe(e,{".pe-textfield--floating-label.pe-textfield--dense .pe-textfield__label":{top:t.dense_floating_label_vertical_spacing_top+t.input_padding_v+"px"}})},wd=function(e,t){return fe(e,{" .pe-textfield__input":{padding:t.input_padding_v+"px "+t.input_padding_h+"px"}," textarea.pe-textfield__input":{margin:t.input_padding_v+"px "+t.input_padding_h+"px"}})},kd=function(e,t){return fe(e,{".pe-textfield--full-width":{" .pe-textfield__input":{padding:t.full_width_input_padding_v+"px "+t.full_width_input_padding_h+"px"}}})},Od=function(e,t){return fe(e,{".pe-textfield--full-width.pe-textfield--dense":{" .pe-textfield__input":{padding:t.dense_full_width_input_padding_v+"px "+t.dense_full_width_input_padding_h+"px"}}})},Sd={general_styles:function(e){return[fe(e,[bd(),{"&:after":{content:'""',display:"table",clear:"both"}},{position:"relative",lineHeight:Ht.line_height,display:"inline-block",boxSizing:"border-box",margin:0,overflow:"visible",width:"100%",maxWidth:"100%"," .pe-textfield__input-area":{position:"relative","&:after":{position:"absolute",content:'""',bottom:0,left:0,width:"100%",opacity:0}},".pe-textfield--focused .pe-textfield__input-area:after":{opacity:1}," .pe-textfield__input":{display:"block",width:"100%",background:"none",color:"inherit",borderStyle:"none none solid none",borderRadius:0,margin:0,"&:textfield--invalid":{boxShadow:"none"},":invalid":{boxShadow:"none"},"::-ms-clear":{width:0,height:0}}," textarea.pe-textfield__input":{padding:0,display:"block"},".pe-textfield--focused .pe-textfield__input":{outline:"none"}," .pe-textfield__label":{position:"absolute",display:"block",bottom:0,pointerEvents:"none",whiteSpace:"nowrap",cursor:"text"},".pe-textfield--dirty .pe-textfield__label":{visibility:"hidden"},"&:not(.pe-textfield--no-char)":{" .pe-textfield__required-indicator, .pe-textfield__optional-indicator":{padding:"0 0 0 .25em"}},".pe-textfield--floating-label":{".pe-textfield--focused, &.pe-textfield--dirty":{" .pe-textfield__label":{visibility:"visible"}}},".pe-textfield--disabled, &.pe-textfield--readonly":{" .pe-textfield__label":{cursor:"auto"}," .pe-textfield__input":{"border-bottom":"none"}," .pe-textfield__input-area:after":{opacity:1,height:"1px",bottom:"-1px",backgroundPosition:"top",backgroundSize:"4px 1px",backgroundRepeat:"repeat-x"}}," .pe-textfield__error, .pe-textfield__error-placeholder, .pe-textfield__help, .pe-textfield__counter":{lineHeight:Ht.line_height}," .pe-textfield__help-focus":[X("opacity"),{opacity:0}],".pe-textfield--focused .pe-textfield__help-focus, &.pe-textfield--dirty .pe-textfield__help-focus":{opacity:1},".pe-textfield--hide-clear":{" .pe-textfield__input::-ms-clear":{display:"none"}},".pe-textfield--hide-spinner":{" input[type=number]::-webkit-inner-spin-button, input[type=number]::-webkit-outer-spin-button":{"-webkit-appearance":"none",margin:0}," input[type=number]":{"-moz-appearance":"textfield"}},".pe-textfield--full-width":{width:"100%",padding:0," .pe-textfield__input-area":{padding:0}}}]),ud({},"*[dir=rtl] ".concat(e,", .pe-rtl ").concat(e),[md()])]},vertical_spacing_bottom:function(e,t){return[fe(e,{paddingBottom:t.vertical_spacing_bottom+"px"})]},floating_label_vertical_spacing_bottom:function(e,t){return[fe(e,{".pe-textfield--floating-label":{paddingBottom:t.floating_label_vertical_spacing_bottom+"px"},".pe-textfield--dense":{paddingBottom:t.dense_floating_label_vertical_spacing_bottom+"px"}})]},vertical_spacing_top:function(e,t){return[fe(e,{" .pe-textfield__input-area":{paddingTop:t.vertical_spacing_top+"px"}}),vd(e,t)]},input_padding_v:function(e,t){return[vd(e,t),yd(e,t),xd(e,t),wd(e,t)]},input_padding_h:function(e,t){return[fe(e,{" .pe-textfield__label":{left:t.input_padding_h+"px",right:t.input_padding_h+"px"}}),wd(e,t)]},floating_label_vertical_spacing_top:function(e,t){return[fe(e,{".pe-textfield--floating-label":{" .pe-textfield__input-area":{paddingTop:t.floating_label_vertical_spacing_top+"px"}}}),yd(e,t)]},dense_floating_label_vertical_spacing_top:function(e,t){return[fe(e,{".pe-textfield--floating-label.pe-textfield--dense":{" .pe-textfield__input-area":{paddingTop:t.dense_floating_label_vertical_spacing_top+"px"}}}),xd(e,t)]},input_focus_border_animation_duration:function(e,t){return[fe(e,{" .pe-textfield__input-area:after":X("opacity",t.input_focus_border_animation_duration)})]},input_focus_border_width:function(e,t){return[fe(e,{" .pe-textfield__input-area:after":{height:t.input_focus_border_width+"px"}})]},font_size_error:function(e,t){return[fe(e,{" .pe-textfield__error, .pe-textfield__error-placeholder, .pe-textfield__help, .pe-textfield__counter":{fontSize:t.font_size_error+"px",minHeight:t.font_size_error*Ht.line_height+"px"}})]},font_size_input:function(e,t){return[fe(e,{" .pe-textfield__input, .pe-textfield__label":{fontSize:t.font_size_input+"px"}})]},line_height_input:function(e,t){return[fe(e,{" .pe-textfield__input, .pe-textfield__label":{lineHeight:t.line_height_input+"px"}})]},input_border_width:function(e,t){return[fe(e,{" .pe-textfield__input":{borderWidth:t.input_border_width+"px"},".pe-textfield--focused .pe-textfield__input":{borderWidth:t.input_border_width+"px",outline:"none"}})]},full_width_input_padding_v:function(e,t){return[fe(e,{".pe-textfield--full-width":{" .pe-textfield__label":{top:t.full_width_input_padding_v+"px"}}}),kd(e,t)]},full_width_input_padding_h:function(e,t){return[fe(e,{".pe-textfield--full-width":{" .pe-textfield__error, .pe-textfield__help, .pe-textfield__counter":{paddingLeft:t.full_width_input_padding_h+"px",paddingRight:t.full_width_input_padding_h+"px"}," .pe-textfield__label":{left:t.full_width_input_padding_h+"px",right:t.full_width_input_padding_h+"px"}}}),kd(e,t)]},dense_font_size_input:function(e,t){return[fe(e,{".pe-textfield--dense":{"&, .pe-textfield__input, .pe-textfield__label":{fontSize:t.dense_font_size_input+"px"}}})]},dense_full_width_font_size_input:function(e,t){return[fe(e,{".pe-textfield--dense":{" .pe-textfield__input":{fontSize:t.dense_full_width_font_size_input+"px"}," .pe-textfield__label":{fontSize:t.dense_full_width_font_size_input+"px"}}})]},dense_full_width_input_padding_v:function(e,t){return[fe(e,{".pe-textfield--full-width":{".pe-textfield--dense":{" .pe-textfield__label":{top:t.dense_full_width_input_padding_v+"px"}}}}),Od(e,t)]},dense_full_width_input_padding_h:function(e,t){return[fe(e,{".pe-textfield--full-width":{".pe-textfield--dense":{" .pe-textfield__label":{left:t.dense_full_width_input_padding_h+"px",right:t.dense_full_width_input_padding_h+"px"}}}}),Od(e,t)]},margin_top_error_message:function(e,t){return[fe(e,{" .pe-textfield__error, .pe-textfield__error-placeholder, .pe-textfield__help, .pe-textfield__counter":{marginTop:t.margin_top_error_message+"px"}})]},floating_label_animation_duration:function(e,t){return[fe(e,{".pe-textfield--floating-label":{" .pe-textfield__label":X("all",t.floating_label_animation_duration)}})]},dense_font_size_floating_label:function(e,t){return[fe(e,{".pe-textfield--floating-label":{".pe-textfield--dense":{".pe-textfield--focused, &.pe-textfield--dirty":{fontSize:t.dense_font_size_floating_label+"px"}}}})]},dense_floating_label_top:function(e,t){return[fe(e,{".pe-textfield--floating-label":{".pe-textfield--dense":{".pe-textfield--focused, &.pe-textfield--dirty":{" .pe-textfield__label":{top:t.dense_floating_label_top+"px"}}}}})]},floating_label_top:function(e,t){return[fe(e,{".pe-textfield--floating-label":{".pe-textfield--focused, &.pe-textfield--dirty":{" .pe-textfield__label":{top:t.floating_label_top+"px"}}}})]},font_size_floating_label:function(e,t){return[fe(e,{".pe-textfield--floating-label":{".pe-textfield--focused, &.pe-textfield--dirty":{" .pe-textfield__label":{fontSize:t.font_size_floating_label+"px"}}}})]}},jd=me({varFns:Sd}),Cd={general_styles:!0,dense_floating_label_top:10,dense_floating_label_vertical_spacing_bottom:4,dense_floating_label_vertical_spacing_top:23,dense_font_size_floating_label:13,dense_font_size_input:13,dense_full_width_font_size_input:13,dense_full_width_input_padding_h:16,dense_full_width_input_padding_v:15,floating_label_animation_duration:".12s",floating_label_top:14,floating_label_vertical_spacing_bottom:7,floating_label_vertical_spacing_top:30,font_size_error:12,font_size_floating_label:12,font_size_input:16,full_width_input_padding_h:20,full_width_input_padding_v:18,input_border_width:1,input_focus_border_animation_duration:Ht.animation_duration,input_focus_border_width:2,input_padding_h:0,input_padding_v:7,line_height_input:20,margin_top_error_message:6,vertical_spacing_bottom:7,vertical_spacing_top:6,color_light_input_text:ge(Ht.color_light_foreground,Ht.blend_light_text_primary),color_light_input_background:"transparent",color_light_highlight_text:ge(Ht.color_primary,Ht.blend_light_text_primary),color_light_input_bottom_border:ge(Ht.color_light_foreground,Ht.blend_light_border_light),color_light_input_error_text:ge("221, 44, 0"),color_light_input_error_border:ge("221, 44, 0"),color_light_input_placeholder:ge(Ht.color_light_foreground,Ht.blend_light_text_tertiary),color_light_label_text:ge(Ht.color_light_foreground,Ht.blend_light_text_tertiary),color_light_disabled_label_text:ge(Ht.color_light_foreground,Ht.blend_light_text_disabled),color_light_readonly_label_text:ge(Ht.color_light_foreground,Ht.blend_light_text_tertiary),color_light_help_text:ge(Ht.color_light_foreground,Ht.blend_light_text_tertiary),color_light_required_symbol:ge("221, 44, 0"),color_light_focus_border:ge(Ht.color_primary),color_light_counter_ok_border:ge(Ht.color_primary),color_dark_input_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_primary),color_dark_input_background:"transparent",color_dark_highlight_text:ge(Ht.color_primary,Ht.blend_dark_text_primary),color_dark_input_bottom_border:ge(Ht.color_dark_foreground,Ht.blend_dark_border_light),color_dark_input_error_text:ge("222, 50, 38"),color_dark_input_error_border:ge("222, 50, 38"),color_dark_input_placeholder:ge(Ht.color_dark_foreground,Ht.blend_dark_text_tertiary),color_dark_label_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_tertiary),color_dark_disabled_label_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_disabled),color_dark_readonly_label_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_tertiary),color_dark_help_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_tertiary),color_dark_required_symbol:ge("221, 44, 0"),color_dark_focus_border:ge(Ht.color_primary),color_dark_counter_ok_border:ge(Ht.color_primary)},zd=[jd,hd],Pd=".".concat("pe-textfield");function Td(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Rd(){return Rd=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Rd.apply(this,arguments)}_e(Pd,zd,Cd),pe(Pd,zd,Cd);var Ed={general_styles:function(e){return[]}},Ld=function(e){var t;return Td(t={},"color_"+e+"_text",function(t,n){return[fe(t,{" .pe-toolbar__title":{"&, a:link, a:visited":{color:n["color_"+e+"_text"]}}})]}),Td(t,"color_"+e+"_background",function(t,n){return[fe(t,{backgroundColor:n["color_"+e+"_background"]})]}),Td(t,"color_"+e+"_border",function(t,n){return[fe(t,{".pe-toolbar--border":{borderColor:n["color_"+e+"_border"]}})]}),t},Id=xe({varFns:{lightTintFns:Rd({},Ed,Ld("light")),darkTintFns:Rd({},Ed,Ld("dark"))}}),Nd=function(e){return function(t,n){return Td({},e,Td({},t,n))}},Fd=function(e){var t,n=e.selector,r=e.vars,o=e.isRTL,i=e.isLarge,a=i?r.indent_large:r.indent;return(i?Wd:fe)(n,{" .pe-toolbar__title--indent, .pe-toolbar__title.pe-toolbar__title--indent":(t={},Td(t,o?"marginLeft":"marginRight",0),Td(t,o?"marginRight":"marginLeft",a+"px"),t)})},Dd=function(e){var t,n=e.selector,r=e.vars,o=e.isRTL,i=e.isLarge,a=i?r.title_padding_large:r.title_padding;return(i?Wd:fe)(n,{" > span, .pe-toolbar__title":(t={},Td(t,o?"marginLeft":"marginRight",0),Td(t,o?"marginRight":"marginLeft",a+"px"),t)," .pe-toolbar__title--center":{marginLeft:a+"px",marginRight:a+"px"}})},Ad=function(e){var t,n=e.selector,r=e.vars,o=e.isRTL,i=e.isLarge,a=i?r.title_after_icon_padding_large:r.title_after_icon_padding;return(i?Wd:fe)(n,{" > :not(.pe-toolbar__title):first-child:not(.pe-toolbar__title--indent):first-child":(t={},Td(t,o?"marginRight":"marginLeft",0),Td(t,o?"marginLeft":"marginRight",a+"px"),t)})},Hd=Nd("@media (min-width: ".concat(Ht.breakpoint_for_phone_only,"px) and (orientation: landscape)")),Wd=Nd("@media (min-width: ".concat(Ht.breakpoint_for_tablet_portrait_up,"px)")),Bd={general_styles:function(e){return[fe(e,[V.layout,V.layoutHorizontal,V.layoutCenter,{position:"relative",zIndex:Ht.z_toolbar," > a":{textDecoration:"none"},".pe-toolbar--fullbleed":{padding:0},".pe-toolbar--border":{borderWidth:"1px",borderStyle:"none none solid none"}," > *":{flexShrink:0}," > span, .pe-toolbar__title, .pe-toolbar__title--indent":{width:"100%",display:"block",wordBreak:"break-all",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap",flexShrink:1}," .pe-toolbar__title--center":{textAlign:"center",justifyContent:"center"}," > .pe-action":{paddingLeft:"12px",paddingRight:"12px"}," .pe-fit":[G(),{margin:0}]}])]},height:function(e,t){return[fe(e,{height:t.height+"px"})]},height_compact:function(e,t){return[fe(e,{".pe-toolbar--compact":{height:t.height_compact+"px"}}),Hd(e,{height:t.height+"px"})]},line_height:function(e,t){return[fe(e,{lineHeight:t.line_height+"em"," > span, .pe-toolbar__title, .pe-toolbar__title--indent":{lineHeight:t.line_height}})]},font_size:function(e,t){return[fe(e,{" > span, .pe-toolbar__title, .pe-toolbar__title--indent, .pe-action":{fontSize:t.font_size+"px"}})]},font_weight:function(e,t){return[fe(e,{" > span, .pe-toolbar__title, .pe-toolbar__title--indent":{fontWeight:t.font_weight}})]},padding_side:function(e,t){return[fe(e,{padding:"0 "+t.padding_side+"px"}),Fd({selector:e,vars:t}),Fd({selector:he(e),vars:t,isRTL:!0})]},indent:function(e,t){return[Fd({selector:e,vars:t}),Fd({selector:he(e),vars:t,isRTL:!0})]},indent_large:function(e,t){return[Fd({selector:e,vars:t,isLarge:!0}),Fd({selector:he(e),vars:t,isRTL:!0,isLarge:!0})]},title_padding:function(e,t){return[Dd({selector:e,vars:t}),Dd({selector:he(e),vars:t,isRTL:!0})]},title_padding_large:function(e,t){return[Dd({selector:e,vars:t,isLarge:!0}),Dd({selector:he(e),vars:t,isRTL:!0,isLarge:!0})]},title_after_icon_padding:function(e,t){return[Ad({selector:e,vars:t}),Ad({selector:he(e),vars:t,isRTL:!0})]},title_after_icon_padding_large:function(e,t){return[Ad({selector:e,vars:t,isLarge:!0}),Ad({selector:he(e),vars:t,isRTL:!0,isLarge:!0})]},height_large:function(e,t){return[Wd(e,{height:t.height_large+"px"})]},padding_side_large:function(e,t){return[Wd(e,{padding:"0 "+t.padding_side_large+"px"})]}},Md=me({varFns:Bd}),qd=2*Ht.grid_unit_component-12,Vd=3*Ht.grid_unit_component-12,$d={general_styles:!0,font_size:20,font_weight:400,height:7*Ht.grid_unit_component,height_compact:6*Ht.grid_unit_component,height_large:8*Ht.grid_unit_component,line_height:Ht.line_height,padding_side:qd,padding_side_large:Vd,indent:Ht.unit_indent-qd,indent_large:Ht.unit_indent_large-Vd,title_after_icon_padding:4,title_after_icon_padding_large:12,title_padding:16,title_padding_large:8,color_light_text:ge(Ht.color_light_foreground,Ht.blend_light_text_primary),color_light_border:ge(Ht.color_light_foreground,Ht.blend_light_border_light),color_light_background:ge(Ht.color_light_background),color_dark_text:ge(Ht.color_dark_foreground,Ht.blend_dark_text_primary),color_dark_border:ge(Ht.color_dark_foreground,Ht.blend_dark_border_light),color_dark_background:ge(Ht.color_dark_background)},Kd=[Md,Id],Ud=".".concat("pe-toolbar"),Jd=(_e(Ud,Kd,$d),pe(Ud,Kd,$d),[function(){return[{" html":{"box-sizing":"border-box"}," *, *:before, *:after":{"box-sizing":"inherit"}," *":[{"-webkit-tap-highlight-color":"rgba(0,0,0,0)"},{"-webkit-tap-highlight-color":"transparent"}]," a, a:active, a:focus, input:active, *:focus":{outline:0}," input:disabled":{opacity:1}}]}]),Qd={};function Zd(){return Zd=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Zd.apply(this,arguments)}_e("",Jd,Qd),pe("",Jd,Qd),m||window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame;var Xd=[function(){return[{"html, body, button, input, select, textarea":{fontFamily:"Roboto, Helvetica, Arial, sans-serif"}}]},function(){return[{" h1, h2, h3, h4, h5, h6, p":{margin:0,padding:0}},{" h1, h2, h3, h4, h5, h6":{" small":{"font-weight":Ht.font_weight_normal,"line-height":Ht.line_height,"letter-spacing":"-0.02em","font-size":"0.6em"}}},{" h1":{"font-size":"56px","font-weight":Ht.font_weight_normal,"line-height":Ht.line_height,"margin-top":"24px","margin-bottom":"24px"}},{" h2":{"font-size":"45px","font-weight":Ht.font_weight_normal,"line-height":Ht.line_height,"margin-top":"24px","margin-bottom":"24px"}},{" h3":{"font-size":"34px","font-weight":Ht.font_weight_normal,"line-height":Ht.line_height,"margin-top":"24px","margin-bottom":"24px"}},{" h4":{"font-size":"24px","font-weight":Ht.font_weight_normal,"line-height":Ht.line_height,"-moz-osx-font-smoothing":"grayscale","margin-top":"24px","margin-bottom":"16px"}},{" h5":{"font-size":"20px","font-weight":Ht.font_weight_medium,"line-height":Ht.line_height,"letter-spacing":"-0.02em","margin-top":"24px","margin-bottom":"16px"}},{" h6":{"font-size":"16px","font-weight":Ht.font_weight_normal,"line-height":Ht.line_height,"letter-spacing":"0.04em","margin-top":"24px","margin-bottom":"16px"}},{" html, body":{"font-size":"14px","line-height":Ht.line_height,"font-weight":Ht.font_weight_normal}," p":{"font-size":"14px","font-weight":Ht.font_weight_normal,"line-height":Ht.line_height,"letter-spacing":"0","margin-bottom":"16px"}," blockquote":{position:"relative","font-size":"24px","font-weight":Ht.font_weight_normal,"font-style":"italic","line-height":Ht.line_height,"letter-spacing":"0.08em","margin-top":"24px","margin-bottom":"16px"}," ul, ol":{"font-size":"14px","font-weight":Ht.font_weight_normal,"line-height":Ht.line_height,"letter-spacing":0}," b, strong":{"font-weight":Ht.font_weight_medium}}]}],Yd=(_e("",Xd,Ht),function(){!function(e,t){if(!m){if(!window.WebFontConfig){var n=function(n){var r=n.name,o=n.familyName,i=n.fvd;return P("webfontloader",{name:r,familyName:o,fvd:i,vendor:e,config:t})};window.WebFontConfig={loading:function(){return n({name:"loading"})},active:function(){return n({name:"active"})},inactive:function(){return n({name:"inactive"})},fontloading:function(e,t){return n({name:"fontloading",familyName:e,fvd:t})},fontactive:function(e,t){return n({name:"fontactive",familyName:e,fvd:t})},fontinactive:function(e,t){return n({name:"fontinactive",familyName:e,fvd:t})}},function(){var e=document.createElement("script");e.src=("https:"===document.location.protocol?"https":"http")+"://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js",e.type="text/javascript",e.async=!0;var t=document.getElementsByTagName("script")[0];t&&t.parentNode&&t.parentNode.insertBefore(e,t)}()}var r=window.WebFontConfig[e]||{};t&&Zd(r,t),window.WebFontConfig[e]=r}}("google",{families:["Roboto:400,500,700,400italic:latin"]})});ue({selectors:[sn],fns:cn,vars:ln}),ue({selectors:[sr],fns:lr,vars:tr}),ue({selectors:[or],fns:rr,vars:Gn}),ue({selectors:[ir],fns:nr,vars:Gn}),ue({selectors:[fr],fns:pr,vars:_r}),ue({selectors:[Nr],fns:Hr,vars:Ir}),ue({selectors:[Dr],fns:Wr,vars:Ir}),ue({selectors:[Fr],fns:Br,vars:Ir}),ue({selectors:[Ar],fns:Br,vars:Ir}),ue({selectors:[io],fns:oo,vars:ro}),ue({selectors:[Do],fns:Fo,vars:Ro}),ue({selectors:[yo],fns:vo,vars:mo}),ue({selectors:[gi],fns:hi,vars:fi}),ue({selectors:[ji],fns:Si,vars:Oi}),ue({selectors:[Fi],fns:Ni,vars:Ii}),ue({selectors:[Qi],fns:Ji,vars:Ui}),ue({selectors:[la],fns:aa,vars:ia}),ue({selectors:[va],fns:ma,vars:ba}),ue({selectors:[$a],fns:Va,vars:qa}),ue({selectors:[bl],fns:gl,vars:hl}),ue({selectors:[cl],fns:ll,vars:al}),ue({selectors:[Hl],fns:Al,vars:zl}),ue({selectors:[nc],fns:tc,vars:Yl}),ue({selectors:[ec],fns:Gl,vars:Yl}),ue({selectors:[ac],fns:ic,vars:oc}),ue({selectors:[hc],fns:fc,vars:pc}),ue({selectors:[Cc],fns:jc,vars:Sc}),ue({selectors:[to],fns:eo,vars:Gr}),ue({selectors:[jn],fns:Sn,vars:On}),ue({selectors:[Yc],fns:Xc,vars:Zc}),ue({selectors:[ps],fns:_s,vars:ss}),ue({selectors:[us],fns:ds,vars:ss}),ue({selectors:[xs],fns:ys,vars:vs}),ue({selectors:[As],fns:Ds,vars:Fs}),ue({selectors:[cd],fns:ad,vars:id}),ue({selectors:[dd],fns:ld,vars:id}),ue({selectors:[Pd],fns:zd,vars:Cd}),ue({selectors:[Ud],fns:Kd,vars:$d}),ue({identifier:"pe-core",selectors:[""],fns:Jd,vars:Qd});var Gd=n(619),eu=n.n(Gd);function tu(){return tu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},tu.apply(this,arguments)}function nu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var ru={component:"pe-menu",panel:"pe-menu__panel",content:"pe-menu__content",placeholder:"pe-menu__placeholder",backdrop:"pe-menu__backdrop",floating:"pe-menu--floating",origin:"pe-menu--origin",permanent:"pe-menu--permanent",showBackdrop:"pe-menu--backdrop",visible:"pe-menu--visible",width_auto:"pe-menu--width-auto",width_n:"pe-menu--width-",isTopMenu:"pe-menu--top-menu",listTile:"pe-list-tile",selectedListTile:"pe-list-tile--selected"};function ou(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function iu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}var au=bt(function(e){var t=e.h,n=e.a,r=e.useReducer,o=e.useState,i=e.useEffect,a=e.useRef,l=e.getRef,c=e.Shadow,s=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a","useReducer","useState","useEffect","useRef","getRef","Shadow"]),d=nu(r(F,N),2)[1],u=nu(o(),2),_=u[0],p=u[1],h=nu(o(!!s.permanent),2)[1],g=a(),b=a(),v=function(){w(),k()},x=function(e){var t=e.isShow,n=e.hideDelay,r=void 0===n?s.hideDelay:n;return{dispatchTransitionState:d,setIsVisible:h,props:tu({},s,{hideDelay:r}),isShow:t,beforeTransition:t?function(){return v()}:null,domElements:{el:g.current,showClassElement:_},showClass:ru.visible}},w=function(){if(!m&&s.target){var e=g.current,t=b.current,n=document.querySelector(s.target);if(n&&e){var r=y({element:e,prop:"position",equals:"fixed"});if(r&&!s.topMenu&&!y({element:_,pseudoSelector:":before",prop:"content",contains:'"'.concat("top_menu",'"')}))return tu(e.style,{}),void e.offsetHeight;var o=e.parentNode.getBoundingClientRect(),i=n.getBoundingClientRect(),a=void 0!==s.offsetH?s.offsetH:void 0!==s.offset?s.offset:0,l=void 0!==s.offsetV?s.offsetV:"79%",c=-1!==a.toString().indexOf("%")?Math.round(.01*parseFloat(a)*i.width):Math.round(parseFloat(a)),d=-1!==l.toString().indexOf("%")?Math.round(.01*parseFloat(l)*i.height):Math.round(parseFloat(l)),u=s.origin||"top",p=u.split(/\W+/).reduce(function(e,t){return e[t]=!0,e},{}),f=t.querySelectorAll("."+ru.listTile)[0];if(s.reposition){var h=t.querySelector("."+ru.selectedListTile);if(f&&h){var v=f.getBoundingClientRect(),x=h.getBoundingClientRect();d=v.top-x.top}var w=(h||f).getBoundingClientRect(),k=n.getBoundingClientRect().height-w.height;d+=Math.abs(k)/2}else s.origin&&!r&&(p.top?d+=i.top-o.top:p.bottom&&(d+=i.top-o.bottom));if(s.height){var O=f?f.clientHeight:48;if("max"===s.height){var S=d,j=O;e.style.height="calc(100% - ".concat(S+j,"px)")}else{var C=/^\d+$/.test(s.height.toString())?"".concat(s.height,"px"):s.height;e.style.height=C}}var z=e.style.transitionDuration;e.style.transitionDuration="0ms",e.parentNode&&!r&&(p.right?e.style.right=i.right-o.right+c+"px":e.style.left=i.left-o.left+c+"px",p.bottom?e.style.bottom=d+"px":e.style.top=d+"px",e.style.transformOrigin=u.split(/\W+/).join(" ")),e.offsetHeight,e.style.transitionDuration=z}}},k=function(){if(!m&&s.scrollTarget){var e=document.querySelector(s.scrollTarget);e&&(b.current.scrollTop=e.offsetTop)}},S=function(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).hideDelay;return W(x({isShow:!1,hideDelay:e}))};i(function(){if(_){g.current=_.querySelector(".".concat(ru.panel)),tu(g.current.style,s.style),b.current=_.querySelector(".".concat(ru.content));var e=function(e){"Escape"!==e.key&&"Esc"!==e.key||S({hideDelay:0})},t=function(e){e.target!==g.current&&S()};return s.permanent||(C("resize",v),C("keydown",e),setTimeout(function(){O.forEach(function(e){return document.addEventListener(e,t)}),W(x({isShow:!0}))},0)),function(){s.permanent||(z("resize",v),z("keydown",e),O.forEach(function(e){return document.removeEventListener(e,t)}))}}},[_]);var j,P,T=s.type||"floating",R=tu({},f(s,{remove:["style"]}),s.testId&&{"data-test-id":s.testId},l(function(e){return e&&!_&&(p(e),s.getRef&&s.getRef(e))}),{className:[ru.component,s.permanent?ru.permanent:null,s.origin?ru.origin:null,s.backdrop?ru.showBackdrop:null,s.topMenu?ru.isTopMenu:null,"floating"!==T||s.permanent?null:ru.floating,s.width||s.size?(P=s.width||s.size,j=P<1.5?1.5:P,ru.width_n+j.toString().replace(".","-")):null,"dark"===s.tone?"pe-dark-tone":null,"light"===s.tone?"pe-light-tone":null,s.className||s[n.class]].join(" ")}),E=void 0!==s.shadowDepth?s.shadowDepth:1,L=[t("div",{className:ru.backdrop}),t("div",{className:ru.panel},[t(c,{shadowDepth:E,animated:!0}),t("div",{className:ru.content},s.content||s.children)])],I=[s.before].concat(L,[s.after]);return t(s.element||"div",R,I)},{h:ft,a:pt,useReducer:ut,useState:st,useEffect:dt,useRef:_t,getRef:gt,Shadow:mt}),lu=bt(u,{h:ft,useState:st,useEffect:dt});lu.displayName="MenuToggle";var cu={view:function(e){return ft(lu,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?iu(n,!0).forEach(function(t){ou(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):iu(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},e.attrs,{placeholderClassName:"pe-menu__placeholder",instance:au}))}};function su(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function du(){return du=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},du.apply(this,arguments)}function uu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function _u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?uu(n,!0).forEach(function(t){su(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):uu(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function pu(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}cu.displayName="Menu";var fu={component:"pe-list",border:"pe-list--border",compact:"pe-list--compact",hasHeader:"pe-list--header",indentedBorder:"pe-list--indented-border",padding:"pe-list--padding",paddingTop:"pe-list--padding-top",paddingBottom:"pe-list--padding-bottom",header:"pe-list-tile--header"},hu={both:fu.padding,bottom:fu.paddingBottom,top:fu.paddingTop,none:null},gu=function(){return hu[arguments.length>0&&void 0!==arguments[0]?arguments[0]:"both"]};function bu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function mu(){return mu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},mu.apply(this,arguments)}var vu={component:"pe-list-tile",content:"pe-list-tile__content",highSubtitle:"pe-list-tile__high-subtitle",primary:"pe-list-tile__primary",secondary:"pe-list-tile__secondary",subtitle:"pe-list-tile__subtitle",title:"pe-list-tile__title",contentFront:"pe-list-tile__content-front",compact:"pe-list-tile--compact",compactFront:"pe-list-tile--compact-front",disabled:"pe-list-tile--disabled",hasFront:"pe-list-tile--front",hasHighSubtitle:"pe-list-tile--high-subtitle",hasSubtitle:"pe-list-tile--subtitle",header:"pe-list-tile--header",hoverable:"pe-list-tile--hoverable",insetH:"pe-list-tile--inset-h",insetV:"pe-list-tile--inset-v",selectable:"pe-list-tile--selectable",selected:"pe-list-tile--selected",rounded:"pe-list-tile--rounded",highlight:"pe-list-tile--highlight",sticky:"pe-list-tile--sticky",navigation:"pe-list-tile--navigation"},yu=function(e){var t=e.h,n=e.a,r=e.props,o=r.keyboardControl?null:r.url,i=r.element?r.element:o?"a":"div",a=[vu.content,vu.contentFront,r.compactFront?vu.compactFront:null].join(" "),l=r.front||r.indent?t("div",mu({},{className:a}),r.front):null,c=!r.header&&r.url,s=mu({},f(r),r.events,{className:vu.primary,style:null},c&&bu({},n.tabindex,r[n.tabindex]||0),o),d=r.content?r.content:[l,t("div",{className:vu.content,style:r.style},[r.title&&!r.content?t("div",mu({},{className:vu.title}),r.title):null,r.subtitle?t("div",mu({},{className:vu.subtitle}),r.subtitle):null,r.highSubtitle?t("div",mu({},{className:vu.subtitle+" "+vu.highSubtitle}),r.highSubtitle):null,r.subContent?t("div",mu({},{className:vu.subContent}),r.subContent):null,r.children])];return t(i,s,d)},xu=function(e){var t=e.h,n=e.a,r=e.Icon,o=e.props,i=void 0===o?{}:o,a=i.keyboardControl?null:i.url,l=i.element?i.element:a?"a":"div",c=i.url;return t(l,mu({},a,{className:vu.secondary},i.events,f(i),c&&bu({},n.tabindex,i[n.tabindex]||0)),t("div",{className:vu.content},[i.icon?t(r,i.icon):null,i.content?i.content:null]))},wu=bt(function(e){var t=e.h,n=e.a,r=e.Ripple,o=e.Icon,i=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a","Ripple","Icon"]);delete i.key;var a=!(i.header||i.url||i.secondary&&i.secondary.url),l=i.subtitle?vu.hasSubtitle:i.highSubtitle?vu.hasHighSubtitle:i.front||i.indent?vu.hasFront:null,c=mu({},f(i,{remove:["tabindex","tabIndex"]}),i.testId&&{"data-test-id":i.testId},{className:[vu.component,i.selected?vu.selected:null,i.disabled?vu.disabled:null,i.sticky?vu.sticky:null,i.compact?vu.compact:null,i.hoverable?vu.hoverable:null,i.selectable?vu.selectable:null,i.highlight?vu.highlight:null,i.rounded?vu.rounded:null,i.header?vu.header:null,i.inset||i.insetH?vu.insetH:null,i.inset||i.insetV?vu.insetV:null,i.navigation?vu.navigation:null,"dark"===i.tone?"pe-dark-tone":null,"light"===i.tone?"pe-light-tone":null,l,i.className||i[n.class]].join(" ")},a&&bu({},n.tabindex,i[n.tabindex]||0)),s=i;delete s.id,delete s[n.class];var d=[i.ink&&!i.disabled?t(r,mu({},i.ripple)):null,yu({h:t,a:n,props:s}),i.secondary?xu({h:t,a:n,Icon:o,props:i.secondary}):null];return t("div",c,[i.before].concat(d,[i.after]))},{h:ft,a:pt,Icon:Qt,Ripple:qt});wu.displayName="ListTile";var ku=bt(function(e){var t=e.h,n=e.a,r=e.ListTile,o=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a","ListTile"]);delete o.key;var i,a=du({},f(o),o.testId&&{"data-test-id":o.testId},{className:[fu.component,o.border||o.borders?fu.border:null,o.indentedBorder||o.indentedBorders?fu.indentedBorder:null,o.header?fu.hasHeader:null,o.compact?fu.compact:null,gu(o.padding),"dark"===o.tone?"pe-dark-tone":null,"light"===o.tone?"pe-light-tone":null,o.className||o[n.class]].join(" ")});o.header&&((i=du({},o.header))[n.class]=[fu.header,i[n.class]||null].join(" "));var l=o.tiles?o.tiles:o.content?o.content:o.children,c=[i?t(r,_u({},o.all,{},i,{header:!0})):void 0].concat(pu(o.all?l.map(function(e){return t(r,_u({},o.all,{},e))}):l)),s=[o.before].concat(pu(c),[o.after]);return t(o.element||"div",a,s)},{h:ft,a:pt,ListTile:wu});function Ou(){return Ou=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ou.apply(this,arguments)}ku.displayName="List";var Su=bt(function(e){var t=e.h,n=e.Icon,r=e.Button,o=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","Icon","Button"]),i=o.content?o.content:o.icon?t(n,o.icon):o.children,a=Ou({},{content:t("div",{className:"pe-icon-button__content"},i),after:o.label&&t("div",{className:"pe-icon-button__label"},o.label),parentClassName:[o.parentClassName||"pe-button pe-icon-button",o.compact?"pe-icon-button--compact":null].join(" "),wash:!1,animateOnTap:!1},o);return t(r,a)},{h:ft,a:pt,Icon:Qt,Button:Zt});const ju={view(e){var t,n,r,o;return Ae()(wu,{title:e.attrs.title,events:{onclick:e=>{const t=e.target.closest("div.pe-list-tile");if(t){const e=t.querySelector("input");e&&e instanceof HTMLInputElement&&e.click()}}},before:Ae()("input.pe-hidden",{type:"file",accept:".cin",onchange:null!==(n=null===(t=e.attrs.events)||void 0===t?void 0:t.onchange)&&void 0!==n?n:()=>{},oncancel:null!==(o=null===(r=e.attrs.events)||void 0===r?void 0:r.oncancel)&&void 0!==o?o:()=>{}})})}};function Cu(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function zu(){return zu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},zu.apply(this,arguments)}function Pu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Tu(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Pu(n,!0).forEach(function(t){Cu(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Pu(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function Ru(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Eu={component:"pe-textfield",counter:"pe-textfield__counter",error:"pe-textfield__error",errorPlaceholder:"pe-textfield__error-placeholder",focusHelp:"pe-textfield__help-focus",help:"pe-textfield__help",input:"pe-textfield__input",inputArea:"pe-textfield__input-area",label:"pe-textfield__label",optionalIndicator:"pe-textfield__optional-indicator",requiredIndicator:"pe-textfield__required-indicator",hasCounter:"pe-textfield--counter",hasFloatingLabel:"pe-textfield--floating-label",hasFullWidth:"pe-textfield--full-width",hideClear:"pe-textfield--hide-clear",hideSpinner:"pe-textfield--hide-spinner",hideValidation:"pe-textfield--hide-validation",isDense:"pe-textfield--dense",isRequired:"pe-textfield--required",stateDirty:"pe-textfield--dirty",stateDisabled:"pe-textfield--disabled",stateFocused:"pe-textfield--focused",stateInvalid:"pe-textfield--invalid",stateReadonly:"pe-textfield--readonly"},Lu={invalid:!1,message:void 0},Iu=function(e,t){return e.ignoreEvents&&-1!==e.ignoreEvents.indexOf(t)},Nu=bt(function(e){var t=e.h,n=e.a,r=e.useState,o=e.useEffect,i=e.useRef,a=e.getRef,l=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a","useState","useEffect","useRef","getRef"]),c=void 0!==l.defaultValue&&null!==l.defaultValue?l.defaultValue.toString():void 0!==l.value&&null!==l.value?l.value.toString():"",s=Ru(r(),2),d=s[0],u=s[1],_=Ru(r(!1),2),p=_[0],h=_[1],g=Ru(r(c),2),b=g[0],m=g[1],v=i(),y=i(),x=i(),w=i(),k=i(),O=i(),S=i(),j=l.multiLine?"textarea":"input",C=!!(void 0!==l.valid||l.validate||l.min||l.max||l[n.minlength]||l[n.maxlength]||l.required||l.pattern),z=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.type,n=e.focus,r=e.value;v.current&&(void 0!==r&&(v.current.value=r),void 0!==n&&(k.current=n,n?v.current.focus():v.current.blur()),"input"===t&&(l.validateOnInput||l.counter)&&(O.current=v.current.value!==c),"input"!==t&&(O.current=v.current.value!==c),"onblur"===t&&(O.current=!0),w.current=""!==v.current.value,T(),R(),y.current!==v.current.value&&m(v.current.value))},P=function(){var e=Lu;return O.current&&p&&0===v.current.value.length&&l.validateResetOnClear&&(O.current=!1,h(!1),S.current=void 0),l.counter&&(e={invalid:v.current.value.length>l.counter,message:l.error}),!e.invalid&&v.current.checkValidity&&(e={invalid:!v.current.checkValidity(),message:l.error}),!e.invalid&&l.validate&&(e=function(){if(!v.current)return Lu;var e=l.validate(v.current.value);return{invalid:e&&!e.valid,message:e&&e.error}}()),e},T=function(){var e=void 0!==l.valid?{invalid:!l.valid,message:l.error}:O.current||l.validateAtStart?P():Lu,t=p;S.current=e.message,e.invalid!==t&&h(e.invalid),e.invalid||(S.current=void 0)},R=function(){if(l.onChange){var e=P(),t={focus:k.current,dirty:w.current,invalid:e.invalid,error:e.error,value:v.current.value};JSON.stringify(t)!==JSON.stringify(x.current)&&(l.onChange(Tu({},t,{el:v.current,setInputState:function(e){var t=void 0!==e.value&&e.value!==v.current.value,n=void 0!==e.focus&&e.focus!==k.current;(t||n)&&z(e)}})),x.current=t)}};o(function(){w.current=""!==c,k.current=!1,O.current=!1,S.current=l.error},[]),o(function(){d&&(v.current=d.querySelector(j),v.current.value=c,z(),T(),R())},[d]),o(function(){if(v.current){var e=void 0!==l.value&&null!==l.value?l.value:v.current?v.current.value:y.current,t=null==e?"":e.toString();v.current&&y.current!==t&&(v.current.value=t,y.current=t,z({type:"input"}))}},[v.current,l.value]),o(function(){v.current&&(T(),R())},[l,v.current&&v.current.value]);var E=zu({},f(l),l.testId&&{"data-test-id":l.testId},a(function(e){return e&&!d&&(u(e),l.ref&&l.ref(e))}),{className:[Eu.component,p?Eu.stateInvalid:"",k.current?Eu.stateFocused:"",w.current?Eu.stateDirty:"",l.floatingLabel?Eu.hasFloatingLabel:"",l.disabled?Eu.stateDisabled:"",l.readonly?Eu.stateReadonly:"",l.dense?Eu.isDense:"",l.required?Eu.isRequired:"",l.fullWidth?Eu.hasFullWidth:"",l.counter?Eu.hasCounter:"",!1!==l.hideSpinner&&void 0!==l.hideSpinner?Eu.hideSpinner:"",!1!==l.hideClear&&void 0!==l.hideClear?Eu.hideClear:"",l.hideValidation?Eu.hideValidation:"","dark"===l.tone?"pe-dark-tone":null,"light"===l.tone?"pe-light-tone":null,l.className||l[n.class]].join(" ")}),L=Tu({},l,{},l.domAttributes),I=l.error||S.current,N=L.multiLine?null:L.type&&"submit"!==L.type&&"search"!==L.type?L.type:"text",F=p&&void 0!==I,D=L.disabled||L[n.readonly],A=L.required&&""!==L.requiredIndicator?t("span",{className:Eu.requiredIndicator},L.requiredIndicator||"*"):null,H=!L.required&&L.optionalIndicator?t("span",{className:Eu.optionalIndicator},L.optionalIndicator):null,W=L.label?[L.label,A,H]:null,B=L.events||{},M=[t("div",{className:Eu.inputArea},[W?t("label",{className:Eu.label},W):null,t(j,zu({},{className:Eu.input,disabled:L.disabled},N?{type:N}:null,L.name?{name:L.name}:null,B,Iu(L,n.onclick)?null:Cu({},n.onclick,function(e){D||(z({focus:!0}),B[n.onclick]&&B[n.onclick](e))}),Iu(L,n.onfocus)?null:Cu({},n.onfocus,function(e){D||(z({focus:!0}),d&&d.classList.add(Eu.stateFocused),B[n.onfocus]&&B[n.onfocus](e))}),Iu(L,n.onblur)?null:Cu({},n.onblur,function(e){z({type:"onblur",focus:!1}),d.classList.remove(Eu.stateFocused),B[n.onblur]&&B[n.onblur](e)}),Iu(L,n.oninput)?null:Cu({},n.oninput,function(e){z({type:"input"}),B[n.oninput]&&B[n.oninput](e)}),Iu(L,n.onkeydown)?null:Cu({},n.onkeydown,function(e){"Enter"===e.key?O.current=!0:"Escape"!==e.key&&"Esc"!==e.key||z({focus:!1}),B[n.onkeydown]&&B[n.onkeydown](e)}),void 0!==L.required&&L.required?{required:!0}:null,void 0!==L[n.readonly]&&L[n.readonly]?Cu({},n.readonly,!0):null,void 0!==L.pattern?{pattern:L.pattern}:null,void 0!==L[n.maxlength]?Cu({},n.maxlength,L[n.maxlength]):null,void 0!==L[n.minlength]?Cu({},n.minlength,L[n.minlength]):null,void 0!==L.max?{max:L.max}:null,void 0!==L.min?{min:L.min}:null,void 0!==L[n.autofocus]?Cu({},n.autofocus,L[n.autofocus]):null,void 0!==L[n.tabindex]?Cu({},n.tabindex,L[n.tabindex]):null,void 0!==L.rows?{rows:L.rows}:null,void 0!==L.placeholder?{placeholder:L.placeholder}:null,void 0!==L.domAttributes?Tu({},L.domAttributes):null))]),L.counter?t("div",{className:Eu.counter},(b.length||0)+" / "+L.counter):null,L.help&&!F?t("div",{className:[Eu.help,L.focusHelp?Eu.focusHelp:null].join(" ")},L.help):null,F?t("div",{className:Eu.error},I):C&&!L.help?t("div",{className:Eu.errorPlaceholder}):null],q=[l.before].concat(M,[l.after]);return t(l.element||"div",E,q)},{h:ft,a:pt,useEffect:dt,useState:st,useRef:_t,getRef:gt});Nu.displayName="TextField";const Fu={oninit(e){e.state.uploadURL={value:"",valid:!1}},view:e=>Ae()(wu,{title:e.attrs.title,events:{onclick:t=>{e.state.uploadURL={value:"",valid:!1},Et.show(()=>({backdrop:!0,body:Ae()(Nu,{label:e.attrs.textFieldLabel,floatingLabel:!0,required:!0,type:"url",pattern:e.attrs.pattern,error:e.attrs.error,onChange:t=>{e.state.uploadURL={value:t.value,valid:!t.invalid}}}),footerButtons:[Ae()(Zt,{label:"åæ¶",events:{onclick:t=>{Et.hide().then(()=>{var n,r;return(null!==(r=null===(n=e.attrs.events)||void 0===n?void 0:n.oncancel)&&void 0!==r?r:e=>{})(t)})}}}),Ae()(Zt,{label:"å¯å¥",disabled:!e.state.uploadURL.valid,events:{onclick:t=>{e.state.uploadURL.valid&&Et.hide().then(()=>{var n,r,o;if(null===(n=e.attrs.events)||void 0===n?void 0:n.onchange){let n=e.state.uploadURL.value;if(e.attrs.mappings)for(let t of null!==(r=e.attrs.mappings)&&void 0!==r?r:[])if(n=e.state.uploadURL.value.replace(new RegExp(t.pattern),t.replacement),n!=e.state.uploadURL.value)break;const i=Object.assign(Object.assign({},t),{url:n});null===(o=e.attrs.events)||void 0===o||o.onchange(i)}})}}})]}))}}})};function Du(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Au(){return Au=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Au.apply(this,arguments)}function Hu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function Wu(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Bu={component:"pe-spinner",animation:"pe-spinner__animation",placeholder:"pe-spinner__placeholder",animated:"pe-spinner--animated",fab:"pe-spinner--fab",large:"pe-spinner--large",medium:"pe-spinner--medium",permanent:"pe-spinner--permanent",raised:"pe-spinner--raised",regular:"pe-spinner--regular",singleColor:"pe-spinner--single-color",small:"pe-spinner--small",visible:"pe-spinner--visible"},Mu={isVisible:!1,isTransitioning:!1,isHiding:!1},qu=bt(function(e){var t=e.h,n=e.a,r=e.useReducer,o=e.useState,i=e.useEffect,a=e.getRef,l=e.Shadow,c=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","a","useReducer","useState","useEffect","getRef","Shadow"]),s=Wu(r(F,Mu),2),d=s[0],u=s[1],_=Wu(o(),2),p=_[0],h=_[1],b=(d||Mu).isVisible,m={dispatchTransitionState:u,props:c,domElements:{el:p},showClass:Bu.visible};i(function(){p&&(c.permanent||W(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Hu(n,!0).forEach(function(t){Du(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Hu(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},m,{isShow:!0})))},[p]);var v=Au({},f(c),a(function(e){return e&&!p&&(h(e),c.ref&&c.ref(e))}),c.testId&&{"data-test-id":c.testId},{className:[Bu.component,c.instanceClass,g(Bu,c.size),c.singleColor?Bu.singleColor:null,c.raised?Bu.raised:null,c.animated?Bu.animated:null,c.permanent?Bu.permanent:null,b?Bu.visible:null,c.className||c[n.class]].join(" ")},c.events),y=[c.before,c.content,c.after];return c.raised&&y.length>0&&y.push(t(l,{shadowDepth:c.shadowDepth})),t("div",v,y)},{h:ft,a:pt,useReducer:ut,useState:st,useEffect:dt,getRef:gt,Shadow:mt});function Vu(){return Vu=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Vu.apply(this,arguments)}qu.displayName="BaseSpinner",qu.classes={component:"pe-spinner",animation:"pe-spinner__animation",placeholder:"pe-spinner__placeholder",animated:"pe-spinner--animated",fab:"pe-spinner--fab",large:"pe-spinner--large",medium:"pe-spinner--medium",permanent:"pe-spinner--permanent",raised:"pe-spinner--raised",regular:"pe-spinner--regular",singleColor:"pe-spinner--single-color",small:"pe-spinner--small",visible:"pe-spinner--visible"};var $u={component:"pe-md-spinner",animation:"pe-md-spinner__animation",circle:"pe-md-spinner__circle",circleClipper:"pe-md-spinner__circle-clipper",circleClipperLeft:"pe-md-spinner__circle-clipper-left",circleClipperRight:"pe-md-spinner__circle-clipper-right",gapPatch:"pe-md-spinner__gap-patch",layer:"pe-md-spinner__layer",layerN:"pe-md-spinner__layer-"};function Ku(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Uu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}var Ju=bt(function(e){var t=e.h,n=e.BaseSpinner,r=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,["h","BaseSpinner"]),o=r.content||t("div",{className:$u.animation},[1,2,3,4].map(function(e){return function(e,t){return t("div",{key:e,className:[$u.layer,$u.layerN+e].join(" ")},[t("div",{className:[$u.circleClipper,$u.circleClipperLeft].join(" ")},t("div",{className:$u.circle})),t("div",{className:$u.gapPatch},t("div",{className:$u.circle})),t("div",{className:[$u.circleClipper,$u.circleClipperRight].join(" ")},t("div",{className:$u.circle}))])}(e,t)})),i=Vu({},r,{className:[$u.component,r.className].join(" "),content:o});return t(n,i)},{h:ft,BaseSpinner:qu}),Qu=bt(u,{h:ft,useState:st,useEffect:dt});Qu.displayName="MaterialDesignSpinnerToggle";var Zu={view:function(e){return ft(Qu,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Uu(n,!0).forEach(function(t){Ku(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Uu(n).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},e.attrs,{placeholderClassName:"pe-spinner__placeholder",instance:Ju}))}};function Xu(e){Et.show({backdrop:!0,body:e,footerButtons:Ae()(Zt,{label:"éé",events:{onclick:()=>Et.hide()}})})}function Yu(){Et.show({backdrop:!0,modal:!0,disableEscape:!0,title:"è¼å¥ä¸­ï¼è«ç­åâ¦",body:Ae()("div",{style:{height:"60px"}},Ae()(Zu,{style:{margin:"auto"},permanent:!0,size:"large"}))})}Zu.classes={component:"pe-md-spinner",animation:"pe-md-spinner__animation",circle:"pe-md-spinner__circle",circleClipper:"pe-md-spinner__circle-clipper",circleClipperLeft:"pe-md-spinner__circle-clipper-left",circleClipperRight:"pe-md-spinner__circle-clipper-right",gapPatch:"pe-md-spinner__gap-patch",layer:"pe-md-spinner__layer",layerN:"pe-md-spinner__layer-"},Zu.displayName="MaterialDesignSpinner";const Gu=[];Zi(".cinsdropdown-delete-button",{padding_compact:2});let e_=0;const t_={oninit(e){e.state.open=!1,e.state.buttonId="cins-drop-down-button-"+ ++e_},view(e){var t,n;return Ae()("div",{style:{position:"relative"}},[Ae()(cu,{target:`#${e.state.buttonId}`,show:e.state.open,didHide:t=>e.state.open=!1,origin:"top",width:3,content:Ae()(ku,{tiles:(()=>{var t;const n=(null!==(t=e.attrs.cins)&&void 0!==t?t:Gu).map(t=>Ae()(wu,{title:t.cname,events:{onclick:n=>{var r,o;if(null===(r=e.attrs.events)||void 0===r?void 0:r.oncinselected){const r=Object.assign(Object.assign({},n),{cin:t});null===(o=e.attrs.events)||void 0===o||o.oncinselected(r)}}},secondary:{content:Ae()(Su,{className:"cinsdropdown-delete-button",icon:{svg:{content:eu()},size:"small"},compact:!0,events:{onclick:n=>{var r,o;if(null===(r=e.attrs.events)||void 0===r?void 0:r.oncindeleted){const r=Object.assign(Object.assign({},n),{cin:t});null===(o=e.attrs.events)||void 0===o||o.oncindeleted(r)}}}})}}));return n.push(Ae()(ju,{title:"å¯å¥CINæªæ¡â¦",events:{onchange:t=>{var n,r;const o=t.target;if(o.files){const i=o.files;if(i.length>0){const o=i[0];if(o.size>2e6)return void Xu("ä¸è½ä¸å³è¶é2MBçæªæ¡");Yu();const a=o.stream();if(null===(n=e.attrs.events)||void 0===n?void 0:n.oncinimported){const n=Object.assign(Object.assign({},t),{cinID:o.name,stream:a});null===(r=e.attrs.events)||void 0===r||r.oncinimported(n)}}}}}})),n.push(Ae()(Fu,{title:"å¾URLå¯å¥â¦",textFieldLabel:"CINæªæ¡çURL",pattern:"https{0,1}://.+/.+\\.cin",error:"å¿é è¼¸å¥ææURL([http|https]://[ä¸»æ©]/[è·¯å¾]/*.cin)",mappings:[{pattern:"^https://github.com/(.+)/(.+)/blob/(.+/.+)\\.cin$",replacement:"https://cdn.jsdelivr.net/gh/$1/$2@$3.cin"}],events:{onchange:t=>{Yu(),fetch(t.url).then(n=>{var r,o;if(n.ok){if(null===(r=e.attrs.events)||void 0===r?void 0:r.oncinimported){const r=Object.assign(Object.assign({},t),{cinID:t.url,stream:n.body});null===(o=e.attrs.events)||void 0===o||o.oncinimported(r)}}else{const e=404==n.status?"è³æºä¸å­å¨":`ç¶²çµ¡åæé¯èª¤ãçæç¢¼: ${n.status}`;Et.hide().then(()=>Xu(e)),Ae().redraw()}}).catch(e=>Et.hide().then(()=>{console.error(e),Xu(e.message)}))}}})),n})()})}),Ae()(Zt,{id:e.state.buttonId,label:null!==(n=null===(t=e.attrs.activeCin)||void 0===t?void 0:t.cname)&&void 0!==n?n:"è«é¸æè¼¸å¥æ³â¦",dropdown:{open:e.state.open},events:{onclick:()=>{e.state.open=!0}}})])}};var n_=n(37),r_=n.n(n_),o_=n(685),i_=n.n(o_),a_=n(280),l_=n.n(a_);function c_(){return c_=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c_.apply(this,arguments)}function s_(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d_={component:"pe-card",actions:"pe-card__actions",any:"pe-card__any",content:"pe-card__content",header:"pe-card__header",headerTitle:"pe-card__header-title",media:"pe-card__media",mediaDimmer:"pe-card__media__dimmer",overlay:"pe-card__overlay",overlayContent:"pe-card__overlay__content",primary:"pe-card__primary",primaryMedia:"pe-card__primary-media",subtitle:"pe-card__subtitle",text:"pe-card__text",title:"pe-card__title",actionsBorder:"pe-card__actions--border",actionsHorizontal:"pe-card__actions--horizontal",actionsJustified:"pe-card__actions--justified",actionsTight:"pe-card__actions--tight",actionsVertical:"pe-card__actions--vertical",mediaCropX:"pe-card__media--crop-x",mediaCropY:"pe-card__media--crop-y",mediaOriginStart:"pe-card__media--origin-start",mediaOriginCenter:"pe-card__media--origin-center",mediaOriginEnd:"pe-card__media--origin-end",mediaLarge:"pe-card__media--large",mediaMedium:"pe-card__media--medium",mediaRatioLandscape:"pe-card__media--landscape",mediaRatioSquare:"pe-card__media--square",mediaRegular:"pe-card__media--regular",mediaSmall:"pe-card__media--small",overlaySheet:"pe-card__overlay--sheet",primaryHasMedia:"pe-card__primary--media",primaryTight:"pe-card__primary--tight",textTight:"pe-card__text--tight"},u_={landscape:16/9,square:1},__={small:d_.mediaSmall,regular:d_.mediaRegular,medium:d_.mediaMedium,large:d_.mediaLarge},p_=function(){return __[arguments.length>0&&void 0!==arguments[0]?arguments[0]:"regular"]},f_={horizontal:d_.actionsHorizontal,vertical:d_.actionsVertical,justified:d_.actionsJustified},h_=function(){return f_[arguments.length>0&&void 0!==arguments[0]?arguments[0]:"horizontal"]},g_=bt(function(e){var t=e.h,n=e.a,r=s_(e,["h","a"]),o=c_({},f(r),r.testId&&{"data-test-id":r.testId},{className:[d_.actions,"vertical"!==r.layout?"pe-button-row":null,h_(r.layout),r.border||r.bordered?d_.actionsBorder:null,r.tight?d_.actionsTight:null,r.className||r[n.class]].join(" ")},r.events),i=r.content||r.children;return t(r.element||"div",o,i)},{h:ft,a:pt});g_.displayName="CardActions";var b_=bt(function(e){var t,n,r=e.h,o=e.a,i=e.useEffect,a=e.useState,l=e.getRef,c=s_(e,["h","a","useEffect","useState","getRef"]),s=(t=a(),n=2,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,l=e[Symbol.iterator]();!(r=(a=l.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw i}}return n}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()),d=s[0],u=s[1],_=c.ratio||"landscape";i(function(){if(d){var e=c.ratio||"landscape",t=c.origin||"center",n=d.querySelector("img")||d.querySelector("iframe");!function(e){var t=e.dom,n=e.src,r=e.ratio,o=e.origin,i=new Image;i.onload=function(){"IMG"===i.tagName&&(t.style.backgroundImage="url(".concat(i.src,")"));var e=this.naturalWidth/this.naturalHeight<u_[r]?d_.mediaCropX:d_.mediaCropY;t.classList.add(e);var n="start"===o?d_.mediaOriginStart:"end"===o?d_.mediaOriginEnd:d_.mediaOriginCenter;t.classList.add(n)},i.src=n}({dom:d,src:n.src,ratio:e,origin:t})}},[d]);var p=c_({},f(c),l(function(e){return e&&!d&&u(e)}),c.testId&&{"data-test-id":c.testId},{className:[d_.media,p_(c.size),"landscape"===_?d_.mediaRatioLandscape:d_.mediaRatioSquare,c.className||c[o.class]].join(" ")},c.events),h=c.dispatcher,g=[c.content,c.overlay?h({overlay:c.overlay}):c.showDimmer&&r("div",{className:d_.mediaDimmer})];return r(c.element||"div",p,g)},{h:ft,a:pt,useState:st,useEffect:dt,getRef:gt});b_.displayName="CardMedia";var m_=bt(function(e){var t=e.h,n=e.a,r=s_(e,["h","a"]),o=Array.isArray(r.content)?r.content.reduce(function(e,t){return"media"===Object.keys(t)[0]||e},!1):r.media||!1,i=c_({},f(r),r.testId&&{"data-test-id":r.testId},{className:[d_.primary,r.tight?d_.primaryTight:null,o?d_.primaryHasMedia:null,r.className||r[n.class]].join(" ")},r.events),a=r.dispatcher,l={title:function(e){return e.attrs||e.props?e||e.props:t("div",{className:d_.title,style:e.style},[e.title,e.subtitle?t("div",{className:d_.subtitle},e.subtitle):null])},media:function(e){return t("div",{className:d_.primaryMedia,style:e.style},a({media:e}))},actions:function(e){return a({actions:e})}},c=Array.isArray(r.content)?r.content.map(function(e){var t=Object.keys(e)[0],n=e[t];return l[t]?l[t](n):e}):[r.title?l.title({title:r.title,subtitle:r.subtitle}):null,r.media?l.media(r.media):null,r.actions?l.actions(r.actions):null,r.content];return t(r.element||"div",i,c)},{h:ft,a:pt});m_.displayName="CardPrimary";var v_=bt(function(e){var t,n=e.h,r=e.a,o=e.CardActions,i=e.CardMedia,a=e.CardPrimary,l=e.Icon,c=e.ListTile,s=e.Shadow,d=s_(e,["h","a","CardActions","CardMedia","CardPrimary","Icon","ListTile","Shadow"]),u=c_({},f(d),d.testId&&{"data-test-id":d.testId},{className:[d_.component,"dark"===d.tone?"pe-dark-tone":null,"light"===d.tone?"pe-light-tone":null,d.className||d[r.class]].join(" ")},d.url,d.events),_=Array.isArray(d.content)?d.content.map(function e(t){var s=Object.keys(t)[0],d=c_({},t[s],{dispatcher:e,key:void 0});switch(s){case"actions":return n(o,d);case"header":return function(e){var t=e.props,n=e.h,r=e.a,o=e.Icon;return n(e.ListTile,c_({},t,{className:[d_.header,t.className||t[r.class]].join(" ")},t.icon?{front:n(o,t.icon)}:null))}({props:d,h:n,a:r,Icon:l,ListTile:c});case"media":return n(i,d);case"overlay":return function(e){var t=e.dispatcher,n=e.props,r=e.h,o=e.a,i=n.element||"div",a=n.content.map(t);return r("div",{style:n.style,className:[d_.overlay,n.sheet?d_.overlaySheet:null,"light"===n.tone?null:"pe-dark-tone","light"===n.tone?"pe-light-tone":null].join(" ")},[r(i,{className:[d_.overlayContent,n.className||n[o.class]].join(" ")},a),r("div",{className:d_.mediaDimmer})])}({dispatcher:e,props:d,h:n,a:r});case"primary":return n(a,d);case"text":return function(e){var t=e.props,n=e.a;return(0,e.h)(t.element||"div",c_({},f(t),{className:[d_.text,t.tight?d_.textTight:null,t.className||t[n.class]].join(" ")},t.events),t.content)}({props:d,h:n,a:r});case"any":return function(e){var t=e.props,n=e.a;return(0,e.h)(t.element||"div",c_({},f(t),{className:[d_.any,t.tight?d_.textTight:null,t.className||t[n.class]].join(" ")}),t.content)}({props:d,h:n,a:r});default:throw'Content type "'.concat(s,'" does not exist')}}):[d.content],p=[d.before].concat(function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(t=_)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}(),[d.after]),h=void 0!==d.shadowDepth?d.shadowDepth:d.z,g=[n(s,{shadowDepth:void 0!==h?h:1,animated:!0}),n("div",{className:d_.content},p),d.children],b=d.element||d.url?"a":"div";return n(b,u,g)},{h:ft,a:pt,CardActions:g_,CardMedia:b_,CardPrimary:m_,Icon:Qt,ListTile:wu,Shadow:mt});v_.displayName="Card",function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.mediaQuery,o=void 0===r?"":r,i=n.scope;!function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.mediaQuery,o=void 0===r?"":r,i=n.scope,a=void 0===i?"":i,l=t&&t.contained?tr:Gn;e&&ue({selectors:[or,e],fns:rr,vars:l,customVars:t,mediaQuery:o,scope:a}),e&&ue({selectors:[ir,e],fns:nr,vars:l,customVars:t,mediaQuery:o,scope:a})}(e,t,{mediaQuery:o,scope:void 0===i?"":i})}(".cinotepad-candidates-button",{min_width:2*Ht.grid_unit_component,padding_h:.5*Ht.grid_unit,text_transform:"none",outer_padding_v:1});const y_={view(e){var t,n,r,o,i;return Ae()(".pe-absolute"+(null!==(t=e.attrs.show)&&void 0!==t&&t?"":".pe-hidden"),{style:{"z-index":"999",top:null!==(n=e.attrs.offsetV)&&void 0!==n?n:"0px",left:null!==(r=e.attrs.offsetH)&&void 0!==r?r:"0px"}},Ae()(v_,{content:[{text:{content:Ae()("div",{style:{"min-height":"3em"}},[Ae()("div.layout",[Ae()("span",null!==(o=e.attrs.imeName)&&void 0!==o?o:""),Ae()("span.pe-inline-block",{style:{width:"1em"}}),Ae()("span.flex.one",null!==(i=e.attrs.keynames)&&void 0!==i?i:""),Ae()("span.pe-inline-block",{style:{width:"1em"}}),Ae()("span",e.attrs.totalPages>1?`(${e.attrs.currentPage}/${e.attrs.totalPages})`:"")]),Ae()("div",(()=>{var t,n,r,o,i;const a=e.attrs.candidates.map(t=>{var n;return Ae()(Zt,{className:"cinotepad-candidates-button "+(null!==(n=e.attrs.verticalSelection)&&void 0!==n&&n?"pe-block":"pe-inline"),events:{onclick:n=>{var r,o;if(null===(r=e.attrs.events)||void 0===r?void 0:r.oncandidateselected){const r=Object.assign(Object.assign({},n),{selkey:t.selkey,candidate:t.candidate});null===(o=e.attrs.events)||void 0===o||o.oncandidateselected(r)}}}},[Ae()("span.pe-inline-block",{style:{width:"1em","text-align":"right",color:"darkgrey"}},t.selkey),Ae()("span",{style:{width:e.attrs.verticalSelection?"1em":"auto"}}),Ae()("span.flex.one",{style:{"text-align":"left"}},t.candidate)])});return(null!==(t=e.attrs.totalPages)&&void 0!==t?t:1)>1&&(a.push(Ae()(Zt,{className:"cinotepad-candidates-button",events:{onclick:null!==(r=null===(n=e.attrs.events)||void 0===n?void 0:n.onprevpage)&&void 0!==r?r:()=>{}}},Ae()(Qt,{size:"small"},Ae()(Jt,i_())))),a.push(Ae()(Zt,{className:"cinotepad-candidates-button",events:{onclick:null!==(i=null===(o=e.attrs.events)||void 0===o?void 0:o.onnextpage)&&void 0!==i?i:()=>{}}},Ae()(Qt,{size:"small"},Ae()(Jt,l_()))))),a})())])}}]}))}},x_=[],w_={oninit(e){e.state.candidatesWidth=0,e.state.candidatesHeight=0,e.state.prevKeynames="",e.state.prevCandidates=[],e.state.prevCurrentPage=0,e.state.prevTotalPages=0,e.state.prevCandidatesOffsetH=0,e.state.prevCandidatesOffsetV=0},onupdate(e){if(e.attrs.needCandidatesSizeChecking){if(e.dom){const t=e.dom.querySelector(".candidates-template .pe-card");if(t&&t instanceof HTMLElement){const{width:n,height:r}=t.getBoundingClientRect();e.state.candidatesWidth=n,e.state.candidatesHeight=r}}Ae().redraw()}},view(e){var t,n,r,o;const{offsetH:i,offsetV:a}=function(e,t,n,r,o=!1){let i,a;if(!o&&n.length>0&&r&&r instanceof HTMLTextAreaElement){const n=r,{top:o,width:l}=n.getBoundingClientRect(),{top:c,left:s}=r_()(n,n.selectionEnd),{scrollTop:d,scrollLeft:u}=n;i=s-u,a=c+36-d,i-u+e>l-5&&(i=u+l-e-5),o+a+t>window.innerHeight+12&&(a=c-d-t+12)}else i=0,a=0;return{offsetH:i,offsetV:a}}(e.state.candidatesWidth,e.state.candidatesHeight,null!==(t=e.attrs.keynames)&&void 0!==t?t:"",null===(n=e.state.onChangeTextFieldState)||void 0===n?void 0:n.el,e.attrs.needCandidatesSizeChecking);let l={id:"ta_cinotepad",label:"è«è¼¸å¥â¦",multiLine:!0,rows:20,onChange:t=>{e.state.onChangeTextFieldState=t,e.attrs.onChange&&e.attrs.onChange(t)}},c=[Ae()(Nu,l)];if(e.attrs.activeCin){const t=e.attrs.activeCin,n=null!==(r=e.attrs.keynames)&&void 0!==r?r:"",_=null!==(o=e.attrs.candidates)&&void 0!==o?o:x_,p=t.currentPage,f=t.totalPage,h=e.attrs.needCandidatesSizeChecking?e.state.prevKeynames:n,g=e.attrs.needCandidatesSizeChecking?e.state.prevCandidates:_,b=e.attrs.needCandidatesSizeChecking?e.state.prevCurrentPage:p,m=e.attrs.needCandidatesSizeChecking?e.state.prevTotalPages:f,v=e.attrs.needCandidatesSizeChecking?e.state.prevCandidatesOffsetH:i,y=e.attrs.needCandidatesSizeChecking?e.state.prevCandidatesOffsetV:a;l.events={onbeforeinput:e=>{"insertText"==e.inputType?(t.pushKey(e.data),e.preventDefault()):"deleteContentBackward"==e.inputType&&t.deleteContentBackward()&&e.preventDefault()},onkeydown:e=>{"Escape"==e.key?(t.resetKeys(),e.preventDefault()):"PageUp"==e.key?t.previousCandidateList()&&e.preventDefault():"PageDown"==e.key&&t.nextCandidateList()&&e.preventDefault()}},c.push(Ae()(y_,{offsetH:String(v)+"px",offsetV:String(y)+"px",show:g.length>0||h.length>0,verticalSelection:t.flagVerticalSelection,imeName:t.cname,keynames:h,candidates:(s=t.selkey,d=g,u=1==t.spaceStyle,d.map((e,t)=>({selkey:u&&0==t?" ":s[u?t-1:t],candidate:e}))),currentPage:b,totalPages:m,events:{oncandidateselected:e=>t.pushKey(e.selkey),onprevpage:()=>t.previousCandidateList(),onnextpage:()=>t.nextCandidateList()}})),c.push(Ae()("div",{className:"candidates-template",style:{visibility:"hidden"}},Ae()(y_,{offsetH:"0px",offsetV:"0px",show:_.length>0||n.length>0,verticalSelection:t.flagVerticalSelection,imeName:t.cname,keynames:n,candidates:((e,t,n)=>t.map((t,r)=>({selkey:n&&0==r?" ":e[n?r-1:r],candidate:t})))(t.selkey,_,1==t.spaceStyle),currentPage:p,totalPages:f}))),e.state.prevKeynames=n,e.state.prevCandidates=_,e.state.prevCurrentPage=p,e.state.prevTotalPages=f,e.state.prevCandidatesOffsetH=i,e.state.prevCandidatesOffsetV=a}var s,d,u;return Ae()("div",{style:{position:"relative"}},c)}};function k_(e,t){e.onKeynamesChange=function(e){t.state.keynames=e,t.state.needCandidatesSizeChecking=!0,Ae().redraw()},e.onCurrentCandidatesChange=function(e){t.state.candidates=e,t.state.needCandidatesSizeChecking=!0,Ae().redraw()},e.onCommit=function(e){if(t.state.onChangeTextFieldState){const{setInputState:n,el:r}=t.state.onChangeTextFieldState,o=r,i=o.selectionStart+e.length;n({focus:!0,value:o.value.substring(0,o.selectionStart)+e+o.value.substring(o.selectionEnd)}),o.setSelectionRange(i,i)}Ae().redraw()}}function O_(e){if(e.state.onChangeTextFieldState){const{setInputState:t,value:n}=e.state.onChangeTextFieldState;t({focus:!0,value:n})}}de("pe-layout",ke,[{".pe-block":{display:"block"},".pe-inline-block":{display:"inline-block"},".pe-hidden":{display:"none !important"},".pe-relative":{position:"relative"},".pe-absolute":{position:"absolute"},".pe-fit":{position:"absolute",top:0,right:0,bottom:0,left:0},".pe-fullbleed":{margin:0,height:"100vh"},".pe-rtl":{direction:"rtl"},"*[dir=rtl], .pe-rtl ":{" .pe-rtl--flip":{transform:"scaleX(-1)"}}}]),Yd(),de("pe-material-design-typography",Xd.map(function(e){return e()}));const S_={oninit(e){e.state.cins=[],e.state.cinEnable=!0,e.state.keynames="",e.state.candidates=[],e.state.needCandidatesSizeChecking=!1,function(){return Re(this,void 0,void 0,function*(){let e=yield indexedDB.databases();return e=e.filter(e=>e.name.startsWith("cin_")&&e.name.endsWith(".cin")),Promise.all(e.map(e=>Re(this,void 0,void 0,function*(){return yield function(e){return Re(this,void 0,void 0,function*(){const t=yield new Promise((t,n)=>{const r=indexedDB.open(e);r.onsuccess=function(e){t(r.result)},r.onerror=function(){n(new Error(`Cannot open IndexedDB for the file ${e}`))}}),n=new Te;n.db=t,n.dbName=e;const r=new Promise((e,r)=>{t.transaction("settings").objectStore("settings").getAll().onsuccess=function(t){const r=event.target.result;for(let e of r)switch(e.name){case"%ename":n.ename=e.value;break;case"%cname":n.cname=e.value;break;case"%prompt":n.prompt=e.value;break;case"%selkey":n.selkey=e.value;break;case"%dupsel":n.dupsel=e.value;break;case"%endkey":n.endkey=e.value;break;case"%space_style":n.spaceStyle=e.value;break;case"%keep_key_case":n.keepKeyCase=e.value;break;case"%symbol_kbm":n.symbolKbm=e.value;break;case"%phase_auto_skip_endkey":n.phaseAutoSkipEndKey=e.value;break;case"%flag_auto_select_by_phrase":n.flagAutoSelectByPhase=e.value;break;case"%flag_disp_partial_match":n.flagDispPartialMatch=e.value;break;case"%flag_disp_full_match":n.flagDispFullMatch=e.value;break;case"%flag_vertical_selection":n.flagVerticalSelection=e.value;break;case"%flag_press_full_auto_send":n.flagPressFullAutoSend=e.value;break;case"%flag_unique_auto_send":n.flagUniqueAutoSend=e.value;break;case"%max_num_of_keys":n.maxNumOfKeys=e.value}e()}}),o=new Promise((e,r)=>{t.transaction("keyname").objectStore("keyname").getAll().onsuccess=function(t){const r=event.target.result;for(let e of r)n.keyname[e.key]=e.keyname;e()}});return yield Promise.all([r,o]),n})}(e.name)})))})}().then(t=>{e.state.cins=t;for(let n of t)k_(n,e),n.enable=e.state.cinEnable;Ae().redraw()})},view(e){let t=e.state.needCandidatesSizeChecking;return e.state.needCandidatesSizeChecking=!1,[Ae()(vt,{border:!0},[Ae()(yt,{text:"CINotepad"}),Ae()(t_,{activeCin:e.state.activeCin,cins:e.state.cins,events:{oncinselected:t=>{e.state.activeCin=t.cin,e.state.activeCin.enable=e.state.cinEnable,O_(e)},oncindeleted:t=>{(function(e){return Re(this,void 0,void 0,function*(){if(!e.db)throw new Error("CIN file was not loaded to IndexedDB before.");return e.db.close(),new Promise((t,n)=>{if(e.dbName){const r=indexedDB.deleteDatabase(e.dbName);r.onsuccess=function(){t()},r.onerror=function(){n(new Error(`Cannot delete IndexedDB for the file ${e.dbName}`))}}else n(new Error("CIN file was not loaded to IndexedDB before."))})})})(t.cin).catch(e=>{Xu(e.message),console.error(e)}),e.state.cins.splice(e.state.cins.indexOf(t.cin),1),e.state.activeCin==t.cin&&delete e.state.activeCin,O_(e)},oncinimported:t=>{(function(e,t){return Re(this,void 0,void 0,function*(){const n=t.pipeThrough(new Se).pipeThrough(new Ce).getReader(),r=`cin_${e}`;let o=new Te;return o.dupsel=-1,o=yield Fe(n,o),function(e){if(0==e.ename.length||0==Object.keys(e.keyname).length||!e.unwrittenCharDefList)throw new Error("ç¡æçCINæªæ¡")}(o),o=yield function(e,t){return Re(this,void 0,void 0,function*(){let n=yield new Promise((e,n)=>{let r=indexedDB.open(t);r.onsuccess=function(t){e(r.result)},r.onupgradeneeded=function(e){const t=r.result;let n=t.createObjectStore("settings",{keyPath:"name"});n=t.createObjectStore("keyname",{keyPath:"key"}),n=t.createObjectStore("quick",{keyPath:"keycode"}),n=t.createObjectStore("chardef",{autoIncrement:!0}),n.createIndex("keycode","keycode",{unique:!1})},r.onerror=function(){n(new Error(`Cannot open IndexedDB for the file ${t}`))}});e.db=n,e.dbName=t,yield new Promise((e,t)=>{let r=n.transaction(["settings","keyname","quick","chardef"],"readwrite");r.objectStore("settings").clear(),r.objectStore("keyname").clear(),r.objectStore("quick").clear(),r.objectStore("chardef").clear(),r.oncomplete=t=>{e()},r.onerror=e=>{t(new Error("Error when clearing old data..."))}});let r=new Promise((t,r)=>{let o=n.transaction("settings","readwrite");o.objectStore("settings").add({name:"%ename",value:e.ename}),o.objectStore("settings").add({name:"%cname",value:e.cname}),o.objectStore("settings").add({name:"%prompt",value:e.prompt}),o.objectStore("settings").add({name:"%selkey",value:e.selkey}),o.objectStore("settings").add({name:"%dupsel",value:e.dupsel}),o.objectStore("settings").add({name:"%endkey",value:e.endkey}),o.objectStore("settings").add({name:"%space_style",value:e.spaceStyle}),o.objectStore("settings").add({name:"%keep_key_case",value:e.keepKeyCase}),o.objectStore("settings").add({name:"%symbol_kbm",value:e.symbolKbm}),o.objectStore("settings").add({name:"%phase_auto_skip_endkey",value:e.phaseAutoSkipEndKey}),o.objectStore("settings").add({name:"%flag_auto_select_by_phrase",value:e.flagAutoSelectByPhase}),o.objectStore("settings").add({name:"%flag_disp_partial_match",value:e.flagDispPartialMatch}),o.objectStore("settings").add({name:"%flag_disp_full_match",value:e.flagDispFullMatch}),o.objectStore("settings").add({name:"%flag_vertical_selection",value:e.flagVerticalSelection}),o.objectStore("settings").add({name:"%flag_press_full_auto_send",value:e.flagPressFullAutoSend}),o.objectStore("settings").add({name:"%flag_unique_auto_send",value:e.flagUniqueAutoSend}),o.objectStore("settings").add({name:"%max_num_of_keys",value:e.maxNumOfKeys}),o.oncomplete=e=>{t()},o.onerror=e=>{r(new Error("Cannot handle settings..."))}}),o=new Promise((t,r)=>{if(0==Object.keys(e.keyname).length)t();else{let o=n.transaction("keyname","readwrite");for(let t in e.keyname)o.objectStore("keyname").add({key:t,keyname:e.keyname[t]});o.oncomplete=e=>{t()},o.onerror=e=>{r(new Error("Cannot handle keyname section..."))}}}),i=new Promise((t,r)=>{if(e.unwrittenQuickList&&0!=e.unwrittenQuickList.length){let o=n.transaction("quick","readwrite");for(let t of e.unwrittenQuickList)o.objectStore("quick").add(t);o.oncomplete=e=>{t()},o.onerror=e=>{r(new Error("Cannot handle quick section..."))}}else t()}),a=new Promise((t,r)=>{if(e.unwrittenCharDefList&&0!=e.unwrittenCharDefList.length){let o=n.transaction("chardef","readwrite");for(let t of e.unwrittenCharDefList)o.objectStore("chardef").add(t);o.oncomplete=e=>{t()},o.onerror=e=>{r(new Error("Cannot handle chardef section..."))}}else t()});return yield Promise.all([r,o,i,a]),delete e.unwrittenQuickList,delete e.unwrittenCharDefList,e})}(o,r),o})})(t.cinID,t.stream).then(t=>{Et.hide(),e.state.activeCin=t,e.state.cins.push(t),k_(t,e),t.enable=e.state.cinEnable,O_(e),Ae().redraw()}).catch(e=>{Et.hide().then(()=>{Xu(e.message),console.error(e)})})}}}),Ae()(Zt,{label:e.state.cinEnable?"ä¸­":"è±",events:{onclick:t=>{e.state.cinEnable=!e.state.cinEnable,e.state.activeCin&&(e.state.activeCin.enable=e.state.cinEnable),O_(e)}}})]),Ae()(w_,{activeCin:e.state.activeCin,keynames:e.state.keynames,candidates:e.state.candidates,needCandidatesSizeChecking:t,onChange:t=>{e.state.onChangeTextFieldState=t}}),Ae()(Et)]}};Ae().mount(document.getElementsByTagName("body")[0],S_),"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("./service-worker.js").then(e=>console.log("SW registered.")).catch(e=>console.error("SW registration failed: ",e))})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiO3FCQUVDLFdBTUQsSUFBSUEsRUFBYSxDQUNmLFlBQ0EsWUFDQSxRQUNBLFNBQ0EsWUFDQSxZQUVBLGlCQUNBLG1CQUNBLG9CQUNBLGtCQUNBLGNBRUEsYUFDQSxlQUNBLGdCQUNBLGNBR0EsWUFDQSxjQUNBLGFBQ0EsY0FDQSxXQUNBLGlCQUNBLGFBQ0EsYUFFQSxZQUNBLGdCQUNBLGFBQ0EsaUJBRUEsZ0JBQ0EsY0FFQSxVQUNBLGNBSUVDLEVBQStCLG9CQUFYQyxPQUNwQkMsRUFBYUYsR0FBdUMsTUFBMUJDLE9BQU9FLGdCQUVyQyxTQUFTQyxFQUFvQkMsRUFBU0MsRUFBVUMsR0FDOUMsSUFBS1AsRUFDSCxNQUFNLElBQUlRLE1BQU0sa0ZBR2xCLElBQUlDLEVBQVFGLEdBQVdBLEVBQVFFLFFBQVMsRUFDeEMsR0FBSUEsRUFBTyxDQUNULElBQUlDLEVBQUtDLFNBQVNDLGNBQWMsNkNBQzVCRixHQUFJQSxFQUFHRyxXQUFXQyxZQUFZSixFQUNwQyxDQUdBLElBQUlLLEVBQU1KLFNBQVNLLGNBQWMsT0FDakNELEVBQUlFLEdBQUssMkNBQ1ROLFNBQVNPLEtBQUtDLFlBQVlKLEdBRTFCLElBQUlLLEVBQVFMLEVBQUlLLE1BQ1pDLEVBQVdwQixPQUFPcUIsaUJBQW1CckIsT0FBT3FCLGlCQUFpQmpCLEdBQVdBLEVBQVFrQixhQUNoRkMsRUFBK0IsVUFBckJuQixFQUFRb0IsU0FHdEJMLEVBQU1NLFdBQWEsV0FDZEYsSUFDSEosRUFBTU8sU0FBVyxjQUduQlAsRUFBTWQsU0FBVyxXQUNaRyxJQUNIVyxFQUFNUSxXQUFhLFVBR3JCN0IsRUFBVzhCLFFBQVEsU0FBVUMsR0FDdkJOLEdBQW9CLGVBQVRNLEVBRWJWLEVBQU1XLFdBQWFWLEVBQVNXLE9BRTVCWixFQUFNVSxHQUFRVCxFQUFTUyxFQUUzQixHQUVJNUIsRUFFRUcsRUFBUTRCLGFBQWVDLFNBQVNiLEVBQVNXLFVBQzNDWixFQUFNZSxVQUFZLFVBRXBCZixFQUFNZ0IsU0FBVyxTQUduQnJCLEVBQUlzQixZQUFjaEMsRUFBUWlDLE1BQU1DLFVBQVUsRUFBR2pDLEdBR3pDa0IsSUFDRlQsRUFBSXNCLFlBQWN0QixFQUFJc0IsWUFBWUcsUUFBUSxNQUFPLE1BRW5ELElBQUlDLEVBQU85QixTQUFTSyxjQUFjLFFBTWxDeUIsRUFBS0osWUFBY2hDLEVBQVFpQyxNQUFNQyxVQUFVakMsSUFBYSxJQUN4RFMsRUFBSUksWUFBWXNCLEdBRWhCLElBQUlDLEVBQWMsQ0FDaEJDLElBQUtGLEVBQUtHLFVBQVlWLFNBQVNiLEVBQXlCLGdCQUN4RHdCLEtBQU1KLEVBQUtLLFdBQWFaLFNBQVNiLEVBQTBCLGlCQUMzRFcsT0FBUUUsU0FBU2IsRUFBcUIsYUFTeEMsT0FOSVosRUFDRmdDLEVBQUtyQixNQUFNMkIsZ0JBQWtCLE9BRTdCcEMsU0FBU08sS0FBS0osWUFBWUMsR0FHckIyQixDQUNULE1BRTZELElBQWxCTSxFQUFPQyxRQUNoREQsRUFBT0MsUUFBVTdDLEVBQ1RKLElBQ1JDLE9BQU9HLG9CQUFzQkEsRUFHL0IsQ0F2SUEsRSw0QkNBQTRDLEVBQU9DLFFBQVUsRUFBUSxJQUFSLENBQTZDLG9CQUFYaEQsT0FBeUJBLE9BQVMsSyw2QkNBckYsSUFBSWlELEVBQVEsRUFBUSxLQUNoQkMsRUFBSyxFQUFRLEtBQ2JDLEVBQWlCRCxFQUFHQyxlQUNwQkMsRUFBU0YsRUFBR0UsT0FFaEJMLEVBQU9DLFFBQVUsV0FDaEIsSUFLSUssRUFDQUMsRUFOQUMsRUFBWSxDQUNmQyxJQUFLLDZCQUNMQyxLQUFNLHNDQU1QLFNBQVNDLEVBQVlDLEdBQ3BCLE9BQU9BLEVBQUlDLGFBQ1osQ0FFQSxTQUFTQyxFQUFhQyxHQUNyQixPQUFPQSxFQUFNQyxPQUFTRCxFQUFNQyxNQUFNQyxPQUFTVCxFQUFVTyxFQUFNRyxJQUM1RCxDQUdBLFNBQVNDLEVBQVdKLEVBQU9LLEdBQzFCLEdBQUlMLEVBQU1NLFFBQVVELEVBQVUsTUFBTSxJQUFJNUQsTUFBTSxzQ0FDL0MsQ0FNQSxTQUFTOEQsRUFBU1AsR0FDakIsSUFBSUssRUFBV0wsRUFBTU0sTUFDckIsSUFDQyxPQUFPRSxLQUFLQyxNQUFNSixFQUFVSyxVQUM3QixDQUFFLFFBQ0ROLEVBQVdKLEVBQU9LLEVBQ25CLENBQ0QsQ0FJQSxTQUFTTSxFQUFjZCxHQUN0QixJQUNDLE9BQU9ELEVBQVlDLEdBQUtjLGFBQ3pCLENBQUUsTUFBT0MsR0FDUixPQUFPLElBQ1IsQ0FDRCxDQUVBLFNBQVNDLEVBQVlDLEVBQVFDLEVBQVFDLEVBQU9DLEVBQUtDLEVBQU9DLEVBQWFDLEdBQ3BFLElBQUssSUFBSUMsRUFBSUwsRUFBT0ssRUFBSUosRUFBS0ksSUFBSyxDQUNqQyxJQUFJckIsRUFBUWUsRUFBT00sR0FDTixNQUFUckIsR0FDSHNCLEVBQVdSLEVBQVFkLEVBQU9rQixFQUFPRSxFQUFJRCxFQUV2QyxDQUNELENBQ0EsU0FBU0csRUFBV1IsRUFBUWQsRUFBT2tCLEVBQU9FLEVBQUlELEdBQzdDLElBQUloQixFQUFNSCxFQUFNRyxJQUNoQixHQUFtQixpQkFBUkEsRUFHVixPQUZBSCxFQUFNTSxNQUFRLENBQUMsRUFDSSxNQUFmTixFQUFNQyxPQUFlc0IsRUFBY3ZCLEVBQU1DLE1BQU9ELEVBQU9rQixHQUNuRGYsR0FDUCxJQUFLLEtBUVIsU0FBb0JXLEVBQVFkLEVBQU9tQixHQUNsQ25CLEVBQU1ILElBQU1ELEVBQVlrQixHQUFRVSxlQUFleEIsRUFBTXlCLFVBQ3JEQyxFQUFVWixFQUFRZCxFQUFNSCxJQUFLc0IsRUFDOUIsQ0FYYVEsQ0FBV2IsRUFBUWQsRUFBT21CLEdBQWMsTUFDbEQsSUFBSyxJQUFLUyxFQUFXZCxFQUFRZCxFQUFPb0IsRUFBSUQsR0FBYyxNQUN0RCxJQUFLLEtBbUNSLFNBQXdCTCxFQUFRZCxFQUFPa0IsRUFBT0UsRUFBSUQsR0FDakQsSUFBSVUsRUFBV2pDLEVBQVlrQixHQUFRZ0IseUJBQ25DLEdBQXNCLE1BQWxCOUIsRUFBTXlCLFNBQWtCLENBQzNCLElBQUlBLEVBQVd6QixFQUFNeUIsU0FDckJaLEVBQVlnQixFQUFVSixFQUFVLEVBQUdBLEVBQVNNLE9BQVFiLEVBQU8sS0FBTUUsRUFDbEUsQ0FDQXBCLEVBQU1ILElBQU1nQyxFQUFTRyxXQUNyQmhDLEVBQU1pQyxRQUFVSixFQUFTSyxXQUFXSCxPQUNwQ0wsRUFBVVosRUFBUWUsRUFBVVYsRUFDN0IsQ0E1Q2FnQixDQUFlckIsRUFBUWQsRUFBT2tCLEVBQU9FLEVBQUlELEdBQWMsTUFDakUsU0E0Q0gsU0FBdUJMLEVBQVFkLEVBQU9rQixFQUFPRSxFQUFJRCxHQUNoRCxJQUFJaEIsRUFBTUgsRUFBTUcsSUFDWkYsRUFBUUQsRUFBTUMsTUFDZG1DLEVBQUtwQyxFQUFNb0MsR0FJWDlGLEdBRko4RSxFQUFLckIsRUFBYUMsSUFBVW9CLEdBRzNCZ0IsRUFBS3hDLEVBQVlrQixHQUFRdUIsZ0JBQWdCakIsRUFBSWpCLEVBQUssQ0FBQ2lDLEdBQUlBLElBQU94QyxFQUFZa0IsR0FBUXVCLGdCQUFnQmpCLEVBQUlqQixHQUN0R2lDLEVBQUt4QyxFQUFZa0IsR0FBUTdELGNBQWNrRCxFQUFLLENBQUNpQyxHQUFJQSxJQUFPeEMsRUFBWWtCLEdBQVE3RCxjQUFja0QsR0FTM0YsR0FSQUgsRUFBTUgsSUFBTXZELEVBRUMsTUFBVDJELEdBbWdCTCxTQUFrQkQsRUFBT0MsRUFBT21CLEdBQy9CLElBQUssSUFBSWtCLEtBQU9yQyxFQUNmc0MsRUFBUXZDLEVBQU9zQyxFQUFLLEtBQU1yQyxFQUFNcUMsR0FBTWxCLEVBRXhDLENBdGdCRW9CLENBQVN4QyxFQUFPQyxFQUFPbUIsR0FHeEJNLEVBQVVaLEVBQVF4RSxFQUFTNkUsSUFFdEJzQixFQUF3QnpDLElBQ04sTUFBbEJBLEVBQU15QixTQUFrQixDQUMzQixJQUFJQSxFQUFXekIsRUFBTXlCLFNBQ3JCWixFQUFZdkUsRUFBU21GLEVBQVUsRUFBR0EsRUFBU00sT0FBUWIsRUFBTyxLQUFNRSxHQUM5QyxXQUFkcEIsRUFBTUcsS0FBNkIsTUFBVEYsR0FvakJqQyxTQUE0QkQsRUFBT0MsR0FDbEMsR0FBSSxVQUFXQSxFQUNkLEdBQW1CLE9BQWhCQSxFQUFNMUIsT0FDeUIsSUFBN0J5QixFQUFNSCxJQUFJNkMsZ0JBQXNCMUMsRUFBTUgsSUFBSXRCLE1BQVEsVUFDaEQsQ0FDTixJQUFJb0UsRUFBYSxHQUFLMUMsRUFBTTFCLE1BQ3hCeUIsRUFBTUgsSUFBSXRCLFFBQVVvRSxJQUEyQyxJQUE3QjNDLEVBQU1ILElBQUk2QyxnQkFDL0MxQyxFQUFNSCxJQUFJdEIsTUFBUW9FLEVBRXBCLENBRUcsa0JBQW1CMUMsR0FBT3NDLEVBQVF2QyxFQUFPLGdCQUFpQixLQUFNQyxFQUFNeUMsbUJBQWVFLEVBQzFGLENBaGtCZ0RDLENBQW1CN0MsRUFBT0MsRUFDeEUsQ0FFRixDQXJFWWhELENBQWM2RCxFQUFRZCxFQUFPa0IsRUFBT0UsRUFBSUQsUUEwRnBELFNBQXlCTCxFQUFRZCxFQUFPa0IsRUFBT0UsRUFBSUQsSUFwQm5ELFNBQXVCbkIsRUFBT2tCLEdBQzdCLElBQUk0QixFQUNKLEdBQThCLG1CQUFuQjlDLEVBQU1HLElBQUk0QyxLQUFxQixDQUd6QyxHQUZBL0MsRUFBTU0sTUFBUTBDLE9BQU9DLE9BQU9qRCxFQUFNRyxLQUVBLE9BRGxDMkMsRUFBVzlDLEVBQU1NLE1BQU15QyxNQUNWRyxrQkFBMkIsT0FDeENKLEVBQVNJLG1CQUFvQixDQUM5QixLQUFPLENBR04sR0FGQWxELEVBQU1NLFdBQVEsRUFFb0IsT0FEbEN3QyxFQUFXOUMsRUFBTUcsS0FDSitDLGtCQUEyQixPQUN4Q0osRUFBU0ksbUJBQW9CLEVBQzdCbEQsRUFBTU0sTUFBZ0MsTUFBdkJOLEVBQU1HLElBQUlnRCxXQUF5RCxtQkFBN0JuRCxFQUFNRyxJQUFJZ0QsVUFBVUosS0FBdUIsSUFBSS9DLEVBQU1HLElBQUlILEdBQVNBLEVBQU1HLElBQUlILEVBQ2xJLENBSUEsR0FIQXVCLEVBQWN2QixFQUFNTSxNQUFPTixFQUFPa0IsR0FDZixNQUFmbEIsRUFBTUMsT0FBZXNCLEVBQWN2QixFQUFNQyxNQUFPRCxFQUFPa0IsR0FDM0RsQixFQUFNb0QsU0FBV2pFLEVBQU1rRSxVQUFVOUMsRUFBUytDLEtBQUt0RCxFQUFNTSxNQUFNeUMsS0FBTS9DLElBQzdEQSxFQUFNb0QsV0FBYXBELEVBQU8sTUFBTXZELE1BQU0sMERBQzFDcUcsRUFBU0ksa0JBQW9CLElBQzlCLEVBRUNLLENBQWN2RCxFQUFPa0IsR0FDQyxNQUFsQmxCLEVBQU1vRCxVQUNUOUIsRUFBV1IsRUFBUWQsRUFBTW9ELFNBQVVsQyxFQUFPRSxFQUFJRCxHQUM5Q25CLEVBQU1ILElBQU1HLEVBQU1vRCxTQUFTdkQsSUFDM0JHLEVBQU1pQyxRQUF1QixNQUFiakMsRUFBTUgsSUFBY0csRUFBTW9ELFNBQVNuQixRQUFVLEdBRzdEakMsRUFBTWlDLFFBQVUsQ0FFbEIsQ0FqR011QixDQUFnQjFDLEVBQVFkLEVBQU9rQixFQUFPRSxFQUFJRCxFQUNoRCxDQUtBLElBQUlzQyxFQUFrQixDQUFDQyxRQUFTLFFBQVNDLE1BQU8sUUFBU0MsTUFBTyxRQUFTQyxNQUFPLFFBQVNDLEdBQUksUUFBU0MsR0FBSSxLQUFNQyxHQUFJLEtBQU1DLFNBQVUsUUFBU0MsSUFBSyxZQUNsSixTQUFTdEMsRUFBV2QsRUFBUWQsRUFBT29CLEVBQUlELEdBQ3RDLElBQUlnRCxFQUFRbkUsRUFBTXlCLFNBQVMwQyxNQUFNLGtCQUFvQixHQU1qREMsRUFBT3hFLEVBQVlrQixHQUFRN0QsY0FBY3dHLEVBQWdCVSxFQUFNLEtBQU8sT0FDL0QsK0JBQVAvQyxHQUNIZ0QsRUFBS0MsVUFBWSwyQ0FBK0NyRSxFQUFNeUIsU0FBVyxTQUNqRjJDLEVBQU9BLEVBQUtwQyxZQUVab0MsRUFBS0MsVUFBWXJFLEVBQU15QixTQUV4QnpCLEVBQU1ILElBQU11RSxFQUFLcEMsV0FDakJoQyxFQUFNaUMsUUFBVW1DLEVBQUtsQyxXQUFXSCxPQUloQyxJQUZBLElBQ0l1QyxFQURBekMsRUFBV2pDLEVBQVlrQixHQUFRZ0IseUJBRTVCd0MsRUFBUUYsRUFBS3BDLFlBQ25CSCxFQUFTekUsWUFBWWtILEdBRXRCNUMsRUFBVVosRUFBUWUsRUFBVVYsRUFDN0IsQ0F3S0EsU0FBU29ELEVBQVl6RCxFQUFRMEQsRUFBS3pELEVBQVFHLEVBQU9DLEVBQWFDLEdBQzdELEdBQUlvRCxJQUFRekQsSUFBaUIsTUFBUHlELEdBQXlCLE1BQVZ6RCxHQUNoQyxHQUFXLE1BQVB5RCxHQUE4QixJQUFmQSxFQUFJekMsT0FBY2xCLEVBQVlDLEVBQVFDLEVBQVEsRUFBR0EsRUFBT2dCLE9BQVFiLEVBQU9DLEVBQWFDLFFBQ3ZHLEdBQWMsTUFBVkwsR0FBb0MsSUFBbEJBLEVBQU9nQixPQUFjMEMsRUFBWTNELEVBQVEwRCxFQUFLLEVBQUdBLEVBQUl6QyxZQUMzRSxDQUNKLElBQUkyQyxFQUF1QixNQUFWRixFQUFJLElBQTRCLE1BQWRBLEVBQUksR0FBR2xDLElBQ3RDcUMsRUFBdUIsTUFBYjVELEVBQU8sSUFBK0IsTUFBakJBLEVBQU8sR0FBR3VCLElBQ3pDdEIsRUFBUSxFQUFHNEQsRUFBVyxFQUMxQixJQUFLRixFQUFZLEtBQU9FLEVBQVdKLEVBQUl6QyxRQUEyQixNQUFqQnlDLEVBQUlJLElBQW1CQSxJQUN4RSxJQUFLRCxFQUFTLEtBQU8zRCxFQUFRRCxFQUFPZ0IsUUFBMkIsTUFBakJoQixFQUFPQyxJQUFnQkEsSUFDckUsR0FBSTBELElBQWVDLEVBQ2xCRixFQUFZM0QsRUFBUTBELEVBQUtJLEVBQVVKLEVBQUl6QyxRQUN2Q2xCLEVBQVlDLEVBQVFDLEVBQVFDLEVBQU9ELEVBQU9nQixPQUFRYixFQUFPQyxFQUFhQyxRQUNoRSxHQUFLdUQsRUFpQkwsQ0FLTixJQUhBLElBQTJERSxFQUFHQyxFQUFHQyxFQUFJQyxFQUFJQyxFQUFyRUMsRUFBU1YsRUFBSXpDLE9BQVMsRUFBR2QsRUFBTUYsRUFBT2dCLE9BQVMsRUFHNUNtRCxHQUFVTixHQUFZM0QsR0FBT0QsSUFDbkMrRCxFQUFLUCxFQUFJVSxHQUNURixFQUFLakUsRUFBT0UsR0FDUjhELEVBQUd6QyxNQUFRMEMsRUFBRzFDLE1BQ2R5QyxJQUFPQyxHQUFJRyxFQUFXckUsRUFBUWlFLEVBQUlDLEVBQUk5RCxFQUFPQyxFQUFhQyxHQUNoRCxNQUFWNEQsRUFBR25GLE1BQWFzQixFQUFjNkQsRUFBR25GLEtBQ3JDcUYsSUFBVWpFLElBR1gsS0FBT2lFLEdBQVVOLEdBQVkzRCxHQUFPRCxJQUNuQzZELEVBQUlMLEVBQUlJLEdBQ1JFLEVBQUkvRCxFQUFPQyxHQUNQNkQsRUFBRXZDLE1BQVF3QyxFQUFFeEMsTUFDaEJzQyxJQUFZNUQsSUFDUjZELElBQU1DLEdBQUdLLEVBQVdyRSxFQUFRK0QsRUFBR0MsRUFBRzVELEVBQU9rRSxFQUFlWixFQUFLSSxFQUFVekQsR0FBY0MsR0FHMUYsS0FBTzhELEdBQVVOLEdBQVkzRCxHQUFPRCxHQUMvQkEsSUFBVUMsR0FDVjRELEVBQUV2QyxNQUFRMEMsRUFBRzFDLEtBQU95QyxFQUFHekMsTUFBUXdDLEVBQUV4QyxLQUVyQytDLEVBQVF2RSxFQUFRaUUsRUFEaEJFLEVBQWFHLEVBQWVaLEVBQUtJLEVBQVV6RCxJQUV2QzRELElBQU9ELEdBQUdLLEVBQVdyRSxFQUFRaUUsRUFBSUQsRUFBRzVELEVBQU8rRCxFQUFZN0QsS0FDckRKLEtBQVdDLEdBQUtvRSxFQUFRdkUsRUFBUStELEVBQUcxRCxHQUNyQzBELElBQU1HLEdBQUlHLEVBQVdyRSxFQUFRK0QsRUFBR0csRUFBSTlELEVBQU9DLEVBQWFDLEdBQzlDLE1BQVY0RCxFQUFHbkYsTUFBYXNCLEVBQWM2RCxFQUFHbkYsS0FDckMrRSxJQUNBRyxFQUFLUCxJQURPVSxHQUVaRixFQUFLakUsRUFBT0UsR0FDWjRELEVBQUlMLEVBQUlJLEdBQ1JFLEVBQUkvRCxFQUFPQyxHQUdaLEtBQU9rRSxHQUFVTixHQUFZM0QsR0FBT0QsR0FDL0IrRCxFQUFHekMsTUFBUTBDLEVBQUcxQyxLQUNkeUMsSUFBT0MsR0FBSUcsRUFBV3JFLEVBQVFpRSxFQUFJQyxFQUFJOUQsRUFBT0MsRUFBYUMsR0FDaEQsTUFBVjRELEVBQUduRixNQUFhc0IsRUFBYzZELEVBQUduRixLQUMzQm9CLElBQ1Y4RCxFQUFLUCxJQURMVSxHQUVBRixFQUFLakUsRUFBT0UsR0FFYixHQUFJRCxFQUFRQyxFQUFLd0QsRUFBWTNELEVBQVEwRCxFQUFLSSxFQUFVTSxFQUFTLFFBQ3hELEdBQUlOLEVBQVdNLEVBQVFyRSxFQUFZQyxFQUFRQyxFQUFRQyxFQUFPQyxFQUFNLEVBQUdDLEVBQU9DLEVBQWFDLE9BQ3ZGLENBRUosSUFBdUprRSxFQUFLQyxFQUF4SkMsRUFBc0JyRSxFQUFhc0UsRUFBZXhFLEVBQU1ELEVBQVEsRUFBRzBFLEVBQWEsSUFBSUMsTUFBTUYsR0FBZUcsRUFBRyxFQUFHdkUsRUFBRSxFQUFHd0UsRUFBTSxXQUFZQyxFQUFVLEVBQ3BKLElBQUt6RSxFQUFJLEVBQUdBLEVBQUlvRSxFQUFjcEUsSUFBS3FFLEVBQVdyRSxJQUFNLEVBQ3BELElBQUtBLEVBQUlKLEVBQUtJLEdBQUtMLEVBQU9LLElBQUssQ0FDbkIsTUFBUGlFLElBQWFBLEVBQU1TLEVBQVV2QixFQUFLSSxFQUFVTSxFQUFTLElBRXpELElBQUljLEVBQVdWLEdBRGZOLEVBQUtqRSxFQUFPTSxJQUNVaUIsS0FDTixNQUFaMEQsSUFDSEgsRUFBT0csRUFBV0gsRUFBT0csR0FBWSxFQUNyQ04sRUFBV3JFLEVBQUVMLEdBQVNnRixFQUN0QmpCLEVBQUtQLEVBQUl3QixHQUNUeEIsRUFBSXdCLEdBQVksS0FDWmpCLElBQU9DLEdBQUlHLEVBQVdyRSxFQUFRaUUsRUFBSUMsRUFBSTlELEVBQU9DLEVBQWFDLEdBQ2hELE1BQVY0RCxFQUFHbkYsTUFBYXNCLEVBQWM2RCxFQUFHbkYsS0FDckNpRyxJQUVGLENBR0EsR0FGQTNFLEVBQWNxRSxFQUNWTSxJQUFZWixFQUFTTixFQUFXLEdBQUdILEVBQVkzRCxFQUFRMEQsRUFBS0ksRUFBVU0sRUFBUyxHQUNuRSxJQUFaWSxFQUFlakYsRUFBWUMsRUFBUUMsRUFBUUMsRUFBT0MsRUFBTSxFQUFHQyxFQUFPQyxFQUFhQyxRQUVsRixJQUFhLElBQVR5RSxFQUtILElBRkFOLEVBNkhOLFNBQXdCVSxHQUN2QixJQUFJQyxFQUFTLENBQUMsR0FDVkMsRUFBSSxFQUFHckIsRUFBSSxFQUFHekQsRUFBSSxFQUNsQitFLEVBQUtDLEVBQVF0RSxPQUFTa0UsRUFBRWxFLE9BQzVCLElBQVNWLEVBQUksRUFBR0EsRUFBSStFLEVBQUkvRSxJQUFLZ0YsRUFBUWhGLEdBQUs0RSxFQUFFNUUsR0FDNUMsSUFBU0EsRUFBSSxFQUFHQSxFQUFJK0UsSUFBTS9FLEVBQ3pCLElBQWMsSUFBVjRFLEVBQUU1RSxHQUFOLENBQ0EsSUFBSWlGLEVBQUlKLEVBQU9BLEVBQU9uRSxPQUFTLEdBQy9CLEdBQUlrRSxFQUFFSyxHQUFLTCxFQUFFNUUsR0FDWmdGLEVBQVFoRixHQUFLaUYsRUFDYkosRUFBT0ssS0FBS2xGLE9BRmIsQ0FPQSxJQUZBOEUsRUFBSSxFQUNKckIsRUFBSW9CLEVBQU9uRSxPQUFTLEVBQ2JvRSxFQUFJckIsR0FBRyxDQUdiLElBQUkwQixHQUFLTCxJQUFNLElBQU1yQixJQUFNLElBQU1xQixFQUFJckIsRUFBSSxHQUNyQ21CLEVBQUVDLEVBQU9NLElBQU1QLEVBQUU1RSxHQUNwQjhFLEVBQUlLLEVBQUksRUFHUjFCLEVBQUkwQixDQUVOLENBQ0lQLEVBQUU1RSxHQUFLNEUsRUFBRUMsRUFBT0MsTUFDZkEsRUFBSSxJQUFHRSxFQUFRaEYsR0FBSzZFLEVBQU9DLEVBQUksSUFDbkNELEVBQU9DLEdBQUs5RSxFQWhCYixDQU5pQixDQTJCbEIsSUFEQXlELEVBQUlvQixHQURKQyxFQUFJRCxFQUFPbkUsUUFDSSxHQUNSb0UsS0FBTSxHQUNaRCxFQUFPQyxHQUFLckIsRUFDWkEsRUFBSXVCLEVBQVF2QixHQUdiLE9BREF1QixFQUFRdEUsT0FBUyxFQUNWbUUsQ0FDUixDQXBLbUJPLENBQWVmLEdBQzVCRSxFQUFLTCxFQUFXeEQsT0FBUyxFQUNwQlYsRUFBSUosRUFBS0ksR0FBS0wsRUFBT0ssSUFDekJ5RCxFQUFJL0QsRUFBT00sSUFDa0IsSUFBekJxRSxFQUFXckUsRUFBRUwsR0FBZU0sRUFBV1IsRUFBUWdFLEVBQUc1RCxFQUFPRSxFQUFJRCxHQUU1RG9FLEVBQVdLLEtBQVF2RSxFQUFJTCxFQUFPNEUsSUFDN0JQLEVBQVF2RSxFQUFRZ0UsRUFBRzNELEdBRVosTUFBVDJELEVBQUVqRixNQUFhc0IsRUFBY0osRUFBT00sR0FBR3hCLFVBRzVDLElBQUt3QixFQUFJSixFQUFLSSxHQUFLTCxFQUFPSyxJQUN6QnlELEVBQUkvRCxFQUFPTSxJQUNrQixJQUF6QnFFLEVBQVdyRSxFQUFFTCxJQUFlTSxFQUFXUixFQUFRZ0UsRUFBRzVELEVBQU9FLEVBQUlELEdBQ3BELE1BQVQyRCxFQUFFakYsTUFBYXNCLEVBQWNKLEVBQU9NLEdBQUd4QixJQUkvQyxDQUNELEtBOUdxQixDQUVwQixJQUFJNkcsRUFBZWxDLEVBQUl6QyxPQUFTaEIsRUFBT2dCLE9BQVN5QyxFQUFJekMsT0FBU2hCLEVBQU9nQixPQUtwRSxJQURBZixFQUFRQSxFQUFRNEQsRUFBVzVELEVBQVE0RCxFQUM1QjVELEVBQVEwRixFQUFjMUYsS0FDNUI2RCxFQUFJTCxFQUFJeEQsT0FDUjhELEVBQUkvRCxFQUFPQyxLQUNTLE1BQUw2RCxHQUFrQixNQUFMQyxJQUNkLE1BQUxELEVBQVd2RCxFQUFXUixFQUFRZ0UsRUFBRzVELEVBQU9FLEVBQUlnRSxFQUFlWixFQUFLeEQsRUFBUSxFQUFHRyxJQUN0RSxNQUFMMkQsRUFBVzZCLEVBQVc3RixFQUFRK0QsR0FDbENNLEVBQVdyRSxFQUFRK0QsRUFBR0MsRUFBRzVELEVBQU9rRSxFQUFlWixFQUFLeEQsRUFBUSxFQUFHRyxHQUFjQyxJQUUvRW9ELEVBQUl6QyxPQUFTMkUsR0FBY2pDLEVBQVkzRCxFQUFRMEQsRUFBS3hELEVBQU93RCxFQUFJekMsUUFDL0RoQixFQUFPZ0IsT0FBUzJFLEdBQWM3RixFQUFZQyxFQUFRQyxFQUFRQyxFQUFPRCxFQUFPZ0IsT0FBUWIsRUFBT0MsRUFBYUMsRUFDekcsQ0E4RkQsQ0FDRCxDQUNBLFNBQVMrRCxFQUFXckUsRUFBUTBELEVBQUt4RSxFQUFPa0IsRUFBT0MsRUFBYUMsR0FDM0QsSUFBSXdGLEVBQVNwQyxFQUFJckUsSUFDakIsR0FBSXlHLElBRHdCNUcsRUFBTUcsS0FDWnFFLEVBQUlwQyxLQUFPcEMsRUFBTW9DLEdBQUksQ0FHMUMsR0FGQXBDLEVBQU1NLE1BQVFrRSxFQUFJbEUsTUFDbEJOLEVBQU02RyxPQUFTckMsRUFBSXFDLE9BdWNyQixTQUF5QjdHLEVBQU93RSxHQUMvQixFQUFHLENBRUQsSUFJSXNDLEVBTEwsR0FBbUIsTUFBZjlHLEVBQU1DLE9BQXVELG1CQUEvQkQsRUFBTUMsTUFBTThHLHFCQUUvQm5FLEtBRFZrRSxFQUFRdkcsRUFBUytDLEtBQUt0RCxFQUFNQyxNQUFNOEcsZUFBZ0IvRyxFQUFPd0UsTUFDakNzQyxFQUFPLE1BRXBDLEdBQXlCLGlCQUFkOUcsRUFBTUcsS0FBMEQsbUJBQS9CSCxFQUFNTSxNQUFNeUcscUJBRXpDbkUsS0FEVmtFLEVBQVF2RyxFQUFTK0MsS0FBS3RELEVBQU1NLE1BQU15RyxlQUFnQi9HLEVBQU93RSxNQUNqQ3NDLEVBQU8sTUFFcEMsT0FBTyxDQUNSLE9BQVMsR0FjVCxPQWJBOUcsRUFBTUgsSUFBTTJFLEVBQUkzRSxJQUNoQkcsRUFBTWlDLFFBQVV1QyxFQUFJdkMsUUFDcEJqQyxFQUFNb0QsU0FBV29CLEVBQUlwQixTQVFyQnBELEVBQU1DLE1BQVF1RSxFQUFJdkUsTUFDbEJELEVBQU15QixTQUFXK0MsRUFBSS9DLFNBQ3JCekIsRUFBTWdILEtBQU94QyxFQUFJd0MsTUFDVixDQUNSLENBaGVNQyxDQUFnQmpILEVBQU93RSxHQUFNLE9BQ2pDLEdBQXNCLGlCQUFYb0MsRUFJVixPQUhtQixNQUFmNUcsRUFBTUMsT0FDVGlILEVBQWdCbEgsRUFBTUMsTUFBT0QsRUFBT2tCLEdBRTdCMEYsR0FDUCxJQUFLLEtBYVQsU0FBb0JwQyxFQUFLeEUsR0FDcEJ3RSxFQUFJL0MsU0FBUzBGLGFBQWVuSCxFQUFNeUIsU0FBUzBGLGFBQzlDM0MsRUFBSTNFLElBQUl1SCxVQUFZcEgsRUFBTXlCLFVBRTNCekIsRUFBTUgsSUFBTTJFLEVBQUkzRSxHQUNqQixDQWxCY3dILENBQVc3QyxFQUFLeEUsR0FBUSxNQUNsQyxJQUFLLEtBa0JULFNBQW9CYyxFQUFRMEQsRUFBS3hFLEVBQU9vQixFQUFJRCxHQUN2Q3FELEVBQUkvQyxXQUFhekIsRUFBTXlCLFVBQzFCNkYsRUFBVXhHLEVBQVEwRCxHQUNsQjVDLEVBQVdkLEVBQVFkLEVBQU9vQixFQUFJRCxLQUc5Qm5CLEVBQU1ILElBQU0yRSxFQUFJM0UsSUFDaEJHLEVBQU1pQyxRQUFVdUMsRUFBSXZDLFFBRXRCLENBM0Jjc0YsQ0FBV3pHLEVBQVEwRCxFQUFLeEUsRUFBT29CLEVBQUlELEdBQWMsTUFDM0QsSUFBSyxLQTJCVCxTQUF3QkwsRUFBUTBELEVBQUt4RSxFQUFPa0IsRUFBT0MsRUFBYUMsR0FDL0RtRCxFQUFZekQsRUFBUTBELEVBQUkvQyxTQUFVekIsRUFBTXlCLFNBQVVQLEVBQU9DLEVBQWFDLEdBQ3RFLElBQUlhLEVBQVUsRUFBR1IsRUFBV3pCLEVBQU15QixTQUVsQyxHQURBekIsRUFBTUgsSUFBTSxLQUNJLE1BQVo0QixFQUFrQixDQUNyQixJQUFLLElBQUlKLEVBQUksRUFBR0EsRUFBSUksRUFBU00sT0FBUVYsSUFBSyxDQUN6QyxJQUFJaUQsRUFBUTdDLEVBQVNKLEdBQ1IsTUFBVGlELEdBQThCLE1BQWJBLEVBQU16RSxNQUNULE1BQWJHLEVBQU1ILE1BQWFHLEVBQU1ILElBQU15RSxFQUFNekUsS0FDekNvQyxHQUFXcUMsRUFBTXJDLFNBQVcsRUFFOUIsQ0FDZ0IsSUFBWkEsSUFBZWpDLEVBQU1pQyxRQUFVQSxFQUNwQyxDQUNELENBekNjdUYsQ0FBZTFHLEVBQVEwRCxFQUFLeEUsRUFBT2tCLEVBQU9DLEVBQWFDLEdBQUssTUFDdEUsU0F5Q0osU0FBdUJvRCxFQUFLeEUsRUFBT2tCLEVBQU9FLEdBQ3pDLElBQUk5RSxFQUFVMEQsRUFBTUgsSUFBTTJFLEVBQUkzRSxJQUM5QnVCLEVBQUtyQixFQUFhQyxJQUFVb0IsRUFtUTdCLFNBQXFCcEIsRUFBT3dFLEVBQUt2RSxFQUFPbUIsR0FHdkMsSUFBSXFHLEVBQ0osR0FBVyxNQUFQakQsRUFJSCxJQUFLLElBQUlsQyxLQUhMa0MsSUFBUXZFLEdBQ1h5SCxRQUFRQyxLQUFLLDRGQUVFbkQsRUFDVSxPQUFuQmlELEVBQU1qRCxFQUFJbEMsS0FBNEIsTUFBVHJDLEdBQStCLE1BQWRBLEVBQU1xQyxJQUN6RHNGLEVBQVc1SCxFQUFPc0MsRUFBS21GLEVBQUtyRyxHQUkvQixHQUFhLE1BQVRuQixFQUNILElBQUssSUFBSXFDLEtBQU9yQyxFQUNmc0MsRUFBUXZDLEVBQU9zQyxFQUFLa0MsR0FBT0EsRUFBSWxDLEdBQU1yQyxFQUFNcUMsR0FBTWxCLEVBR3BELENBcFJDeUcsQ0FBWTdILEVBQU93RSxFQUFJdkUsTUFBT0QsRUFBTUMsTUFBT21CLEdBQ3RDcUIsRUFBd0J6QyxJQUM1QnVFLEVBQVlqSSxFQUFTa0ksRUFBSS9DLFNBQVV6QixFQUFNeUIsU0FBVVAsRUFBTyxLQUFNRSxFQUVsRSxDQWpEYTBHLENBQWN0RCxFQUFLeEUsRUFBT2tCLEVBQU9FLFFBa0Q5QyxTQUF5Qk4sRUFBUTBELEVBQUt4RSxFQUFPa0IsRUFBT0MsRUFBYUMsR0FFaEUsR0FEQXBCLEVBQU1vRCxTQUFXakUsRUFBTWtFLFVBQVU5QyxFQUFTK0MsS0FBS3RELEVBQU1NLE1BQU15QyxLQUFNL0MsSUFDN0RBLEVBQU1vRCxXQUFhcEQsRUFBTyxNQUFNdkQsTUFBTSwwREFDMUN5SyxFQUFnQmxILEVBQU1NLE1BQU9OLEVBQU9rQixHQUNqQixNQUFmbEIsRUFBTUMsT0FBZWlILEVBQWdCbEgsRUFBTUMsTUFBT0QsRUFBT2tCLEdBQ3ZDLE1BQWxCbEIsRUFBTW9ELFVBQ1csTUFBaEJvQixFQUFJcEIsU0FBa0I5QixFQUFXUixFQUFRZCxFQUFNb0QsU0FBVWxDLEVBQU9FLEVBQUlELEdBQ25FZ0UsRUFBV3JFLEVBQVEwRCxFQUFJcEIsU0FBVXBELEVBQU1vRCxTQUFVbEMsRUFBT0MsRUFBYUMsR0FDMUVwQixFQUFNSCxJQUFNRyxFQUFNb0QsU0FBU3ZELElBQzNCRyxFQUFNaUMsUUFBVWpDLEVBQU1vRCxTQUFTbkIsU0FFUCxNQUFoQnVDLEVBQUlwQixVQUNadUQsRUFBVzdGLEVBQVEwRCxFQUFJcEIsVUFDdkJwRCxFQUFNSCxTQUFNK0MsRUFDWjVDLEVBQU1pQyxRQUFVLElBR2hCakMsRUFBTUgsSUFBTTJFLEVBQUkzRSxJQUNoQkcsRUFBTWlDLFFBQVV1QyxFQUFJdkMsUUFFdEIsQ0FuRU84RixDQUFnQmpILEVBQVEwRCxFQUFLeEUsRUFBT2tCLEVBQU9DLEVBQWFDLEVBQzlELE1BRUN1RixFQUFXN0YsRUFBUTBELEdBQ25CbEQsRUFBV1IsRUFBUWQsRUFBT2tCLEVBQU9FLEVBQUlELEVBRXZDLENBOERBLFNBQVM0RSxFQUFVaEYsRUFBUUMsRUFBT0MsR0FFakMsSUFEQSxJQUFJcUUsRUFBTXRDLE9BQU9DLE9BQU8sTUFDakJqQyxFQUFRQyxFQUFLRCxJQUFTLENBQzVCLElBQUloQixFQUFRZSxFQUFPQyxHQUNuQixHQUFhLE1BQVRoQixFQUFlLENBQ2xCLElBQUlzQyxFQUFNdEMsRUFBTXNDLElBQ0wsTUFBUEEsSUFBYWdELEVBQUloRCxHQUFPdEIsRUFDN0IsQ0FDRCxDQUNBLE9BQU9zRSxDQUNSLENBTUEsSUFrWUkwQyxFQWxZQTNCLEVBQVUsR0EwQ2QsU0FBU2pCLEVBQWVyRSxFQUFRTSxFQUFHRixHQUNsQyxLQUFPRSxFQUFJTixFQUFPZ0IsT0FBUVYsSUFDekIsR0FBaUIsTUFBYk4sRUFBT00sSUFBK0IsTUFBakJOLEVBQU9NLEdBQUd4QixJQUFhLE9BQU9rQixFQUFPTSxHQUFHeEIsSUFFbEUsT0FBT3NCLENBQ1IsQ0FHQSxTQUFTa0UsRUFBUXZFLEVBQVFkLEVBQU9tQixHQUMvQixHQUFpQixNQUFibkIsRUFBTUgsSUFBYSxDQUN0QixJQUFJb0ksRUFDSixHQUFxQixNQUFqQmpJLEVBQU1pQyxRQUVUZ0csRUFBU2pJLEVBQU1ILFNBR2YsSUFBSyxJQUFJQSxLQURUb0ksRUFBU3JJLEVBQVlrQixHQUFRZ0IseUJBQ2J4QyxFQUFPVSxJQUFRaUksRUFBTzdLLFlBQVl5QyxHQUVuRDZCLEVBQVVaLEVBQVFtSCxFQUFROUcsRUFDM0IsQ0FDRCxDQUVBLFNBQVNPLEVBQVVaLEVBQVFqQixFQUFLc0IsR0FDWixNQUFmQSxFQUFxQkwsRUFBT29ILGFBQWFySSxFQUFLc0IsR0FDN0NMLEVBQU8xRCxZQUFZeUMsRUFDekIsQ0FFQSxTQUFTNEMsRUFBd0J6QyxHQUNoQyxHQUFtQixNQUFmQSxFQUFNQyxPQUNzQixNQUEvQkQsRUFBTUMsTUFBTWtJLGlCQUNtQixNQUEvQm5JLEVBQU1DLE1BQU1tSSxnQkFDVixPQUFPLEVBQ1YsSUFBSTNHLEVBQVd6QixFQUFNeUIsU0FDckIsR0FBZ0IsTUFBWkEsR0FBd0MsSUFBcEJBLEVBQVNNLFFBQW9DLE1BQXBCTixFQUFTLEdBQUd0QixJQUFhLENBQ3pFLElBQUlrSSxFQUFVNUcsRUFBUyxHQUFHQSxTQUN0QnpCLEVBQU1ILElBQUl3RSxZQUFjZ0UsSUFBU3JJLEVBQU1ILElBQUl3RSxVQUFZZ0UsRUFDNUQsTUFDSyxHQUFnQixNQUFaNUcsR0FBd0MsSUFBcEJBLEVBQVNNLE9BQWMsTUFBTSxJQUFJdEYsTUFBTSxvREFDcEUsT0FBTyxDQUNSLENBR0EsU0FBU2dJLEVBQVkzRCxFQUFRQyxFQUFRQyxFQUFPQyxHQUMzQyxJQUFLLElBQUlJLEVBQUlMLEVBQU9LLEVBQUlKLEVBQUtJLElBQUssQ0FDakMsSUFBSXJCLEVBQVFlLEVBQU9NLEdBQ04sTUFBVHJCLEdBQWUyRyxFQUFXN0YsRUFBUWQsRUFDdkMsQ0FDRCxDQUNBLFNBQVNzSSxFQUFleEgsRUFBUWQsRUFBT3VJLEVBQVFDLEdBQzlDLElBQUluSSxFQUFXTCxFQUFNTSxNQUNqQjRGLEVBQVMzRixFQUFTK0MsS0FBS2lGLEVBQU9FLGVBQWdCekksR0FDbEQsR0FBYyxNQUFWa0csRUFBSixDQUVBLElBQUl3QyxFQUFhbEosRUFDakIsSUFBSyxJQUFJSyxLQUFPUCxFQUFPVSxHQUFRWCxFQUFlc0osSUFBSTlJLEVBQUs2SSxHQUN2REYsRUFBUTFELElBRVI4RCxRQUFRQyxRQUFRM0MsR0FBUTRDLFFBQVEsV0FDL0IxSSxFQUFXSixFQUFPSyxHQUNsQjBJLEVBQWdCakksRUFBUWQsRUFBT3dJLEVBQ2hDLEVBVG9CLENBVXJCLENBQ0EsU0FBU08sRUFBZ0JqSSxFQUFRZCxFQUFPd0ksR0FDbkIsTUFBZEEsRUFBUTFELElBQ2JrRSxFQUFTaEosR0FDVHNILEVBQVV4RyxFQUFRZCxHQUVwQixDQUNBLFNBQVMyRyxFQUFXN0YsRUFBUWQsR0FDM0IsSUFBSXdJLEVBQVUsQ0FBQzFELEVBQUcsR0FDTyxpQkFBZDlFLEVBQU1HLEtBQTBELG1CQUEvQkgsRUFBTU0sTUFBTW1JLGdCQUErQkgsRUFBZXhILEVBQVFkLEVBQU9BLEVBQU1NLE1BQU9rSSxHQUM5SHhJLEVBQU1DLE9BQStDLG1CQUEvQkQsRUFBTUMsTUFBTXdJLGdCQUErQkgsRUFBZXhILEVBQVFkLEVBQU9BLEVBQU1DLE1BQU91SSxHQUNoSE8sRUFBZ0JqSSxFQUFRZCxFQUFPd0ksRUFDaEMsQ0FDQSxTQUFTbEIsRUFBVXhHLEVBQVFkLEdBQzFCLEdBQWlCLE1BQWJBLEVBQU1ILElBQ1YsR0FBcUIsTUFBakJHLEVBQU1pQyxRQUNUbkIsRUFBTy9ELFlBQVlpRCxFQUFNSCxVQUV6QixJQUFLLElBQUlBLEtBQU9QLEVBQU9VLEdBQVFjLEVBQU8vRCxZQUFZOEMsRUFFcEQsQ0FFQSxTQUFTbUosRUFBU2hKLEdBR2pCLEdBRnlCLGlCQUFkQSxFQUFNRyxLQUFvRCxtQkFBekJILEVBQU1NLE1BQU0wSSxVQUF5QnpJLEVBQVMrQyxLQUFLdEQsRUFBTU0sTUFBTTBJLFNBQVVoSixHQUNqSEEsRUFBTUMsT0FBeUMsbUJBQXpCRCxFQUFNQyxNQUFNK0ksVUFBeUJ6SSxFQUFTK0MsS0FBS3RELEVBQU1DLE1BQU0rSSxTQUFVaEosR0FDMUUsaUJBQWRBLEVBQU1HLElBQ00sTUFBbEJILEVBQU1vRCxVQUFrQjRGLEVBQVNoSixFQUFNb0QsY0FDckMsQ0FDYyxNQUFoQnBELEVBQU02RyxTQUFnQjdHLEVBQU02RyxPQUFPb0MsRUFBSSxNQUMzQyxJQUFJeEgsRUFBV3pCLEVBQU15QixTQUNyQixHQUFJa0UsTUFBTXVELFFBQVF6SCxHQUNqQixJQUFLLElBQUlKLEVBQUksRUFBR0EsRUFBSUksRUFBU00sT0FBUVYsSUFBSyxDQUN6QyxJQUFJaUQsRUFBUTdDLEVBQVNKLEdBQ1IsTUFBVGlELEdBQWUwRSxFQUFTMUUsRUFDN0IsQ0FFRixDQUNELENBUUEsU0FBUy9CLEVBQVF2QyxFQUFPc0MsRUFBS2tDLEVBQUtqRyxFQUFPNkMsR0FDeEMsR0FBWSxRQUFSa0IsR0FBMEIsTUFBVC9ELElBQWlCNEssRUFBa0I3RyxLQUFTa0MsSUFBUWpHLEdBc0YxRSxTQUF5QnlCLEVBQU9vSixHQUMvQixNQUFnQixVQUFUQSxHQUE2QixZQUFUQSxHQUErQixrQkFBVEEsR0FBcUMsYUFBVEEsSUFBd0JwSixFQUFNSCxNQUFRYyxFQUFjWCxFQUFNSCxNQUFzQixXQUFkRyxFQUFNRyxLQUFvQkgsRUFBTUgsSUFBSS9DLGFBQWU2RCxFQUFjWCxFQUFNSCxLQUN2TixDQXhGb0Z3SixDQUFnQnJKLEVBQU9zQyxJQUEwQixpQkFBVi9ELEdBQTFILENBQ0EsR0FBZSxNQUFYK0QsRUFBSSxJQUF5QixNQUFYQSxFQUFJLEdBQVksT0FBT2dILEVBQVl0SixFQUFPc0MsRUFBSy9ELEdBQ3JFLEdBQXdCLFdBQXBCK0QsRUFBSWlILE1BQU0sRUFBRyxHQUFpQnZKLEVBQU1ILElBQUkySixlQUFlLCtCQUFnQ2xILEVBQUlpSCxNQUFNLEdBQUloTCxRQUNwRyxHQUFZLFVBQVIrRCxFQUFpQm1ILEVBQVl6SixFQUFNSCxJQUFLMkUsRUFBS2pHLFFBQ2pELEdBQUltTCxFQUFlMUosRUFBT3NDLEVBQUtsQixHQUFLLENBQ3hDLEdBQVksVUFBUmtCLEVBQWlCLENBTXBCLElBQW1CLFVBQWR0QyxFQUFNRyxLQUFpQyxhQUFkSCxFQUFNRyxNQUF1QkgsRUFBTUgsSUFBSXRCLFFBQVUsR0FBS0EsRUFBTyxPQUUzRixHQUFrQixXQUFkeUIsRUFBTUcsS0FBNEIsT0FBUnFFLEdBQWdCeEUsRUFBTUgsSUFBSXRCLFFBQVUsR0FBS0EsRUFBTyxPQUU5RSxHQUFrQixXQUFkeUIsRUFBTUcsS0FBNEIsT0FBUnFFLEdBQWdCeEUsRUFBTUgsSUFBSXRCLFFBQVUsR0FBS0EsRUFBTyxPQUc5RSxHQUFrQixVQUFkeUIsRUFBTUcsS0FBd0MsU0FBckJILEVBQU1DLE1BQU0wSixNQUFtQixHQUFLcEwsR0FBVSxHQUE2RCxZQUF2RG1KLFFBQVFrQyxNQUFNLHVDQUVoRyxDQUVrQixVQUFkNUosRUFBTUcsS0FBMkIsU0FBUm1DLEVBQWdCdEMsRUFBTUgsSUFBSWdLLGFBQWF2SCxFQUFLL0QsR0FDcEV5QixFQUFNSCxJQUFJeUMsR0FBTy9ELENBQ3ZCLEtBQ3NCLGtCQUFWQSxFQUNOQSxFQUFPeUIsRUFBTUgsSUFBSWdLLGFBQWF2SCxFQUFLLElBQ2xDdEMsRUFBTUgsSUFBSWlLLGdCQUFnQnhILEdBRTNCdEMsRUFBTUgsSUFBSWdLLGFBQXFCLGNBQVJ2SCxFQUFzQixRQUFVQSxFQUFLL0QsRUE3QjRFLENBK0IvSSxDQUNBLFNBQVNxSixFQUFXNUgsRUFBT3NDLEVBQUtrQyxFQUFLcEQsR0FDcEMsR0FBWSxRQUFSa0IsR0FBd0IsTUFBUGtDLElBQWUyRSxFQUFrQjdHLEdBQ3RELEdBQWUsTUFBWEEsRUFBSSxJQUF5QixNQUFYQSxFQUFJLEdBQVlnSCxFQUFZdEosRUFBT3NDLE9BQUtNLFFBQ3pELEdBQVksVUFBUk4sRUFBaUJtSCxFQUFZekosRUFBTUgsSUFBSzJFLEVBQUssV0FDakQsSUFDSmtGLEVBQWUxSixFQUFPc0MsRUFBS2xCLElBQ2hCLGNBQVJrQixHQUNRLFVBQVJBLEdBQ1UsVUFBUkEsSUFDVSxXQUFkdEMsRUFBTUcsS0FDVyxXQUFkSCxFQUFNRyxNQUFpRCxJQUE3QkgsRUFBTUgsSUFBSTZDLGVBQXdCMUMsRUFBTUgsTUFBUWMsRUFBY1gsRUFBTUgsT0FFL0UsVUFBZEcsRUFBTUcsS0FBMkIsU0FBUm1DLEVBR3hCLENBQ04sSUFBSXlILEVBQWN6SCxFQUFJMEgsUUFBUSxNQUNULElBQWpCRCxJQUFvQnpILEVBQU1BLEVBQUlpSCxNQUFNUSxFQUFjLEtBQzFDLElBQVJ2RixHQUFleEUsRUFBTUgsSUFBSWlLLGdCQUF3QixjQUFSeEgsRUFBc0IsUUFBVUEsRUFDOUUsTUFMQ3RDLEVBQU1ILElBQUl5QyxHQUFPLElBTW5CLENBcUNBLFNBQVM2RyxFQUFrQkMsR0FDMUIsTUFBZ0IsV0FBVEEsR0FBOEIsYUFBVEEsR0FBZ0MsYUFBVEEsR0FBZ0MsYUFBVEEsR0FBZ0MsbUJBQVRBLEdBQXNDLG1CQUFUQSxDQUMvSCxDQUNBLFNBQVNNLEVBQWUxSixFQUFPc0MsRUFBS2xCLEdBRW5DLFlBQWN3QixJQUFQeEIsSUFFTnBCLEVBQU1HLElBQUk2SixRQUFRLE1BQVEsR0FBS2hLLEVBQU1vQyxJQUU3QixTQUFSRSxHQUEwQixTQUFSQSxHQUEwQixTQUFSQSxHQUEwQixVQUFSQSxHQUEyQixXQUFSQSxJQUVyRUEsS0FBT3RDLEVBQU1ILEdBQ25CLENBR0EsU0FBUzRKLEVBQVluTixFQUFTa0ksRUFBS25ILEdBQ2xDLEdBQUltSCxJQUFRbkgsUUFFTCxHQUFhLE1BQVRBLEVBRVZmLEVBQVFlLE1BQVEsUUFDVixHQUFxQixpQkFBVkEsRUFFakJmLEVBQVFlLE1BQVFBLE9BQ1YsR0FBVyxNQUFQbUgsR0FBOEIsaUJBQVJBLEVBSWhDLElBQUssSUFBSWxDLEtBRlRoRyxFQUFRZSxNQUFRLEdBRUFBLEVBRUYsT0FEVGtCLEVBQVFsQixFQUFNaUYsTUFFYkEsRUFBSTJILFNBQVMsS0FBTTNOLEVBQVFlLE1BQU02TSxZQUFZNUgsRUFBSzZILE9BQU81TCxJQUN4RGpDLEVBQVFlLE1BQU1pRixHQUFPNkgsT0FBTzVMLFFBRzdCLENBS04sSUFBSyxJQUFJK0QsS0FBT2tDLEVBQ0MsTUFBWkEsRUFBSWxDLElBQThCLE1BQWRqRixFQUFNaUYsS0FDekJBLEVBQUkySCxTQUFTLEtBQU0zTixFQUFRZSxNQUFNK00sZUFBZTlILEdBQy9DaEcsRUFBUWUsTUFBTWlGLEdBQU8sSUFJNUIsSUFBSyxJQUFJQSxLQUFPakYsRUFBTyxDQUN0QixJQUFJa0IsRUFDUyxPQURUQSxFQUFRbEIsRUFBTWlGLE1BQ0kvRCxFQUFRNEwsT0FBTzVMLE1BQVk0TCxPQUFPM0YsRUFBSWxDLE1BQ3ZEQSxFQUFJMkgsU0FBUyxLQUFNM04sRUFBUWUsTUFBTTZNLFlBQVk1SCxFQUFLL0QsR0FDakRqQyxFQUFRZSxNQUFNaUYsR0FBTy9ELEVBRTVCLENBQ0QsQ0FDRCxDQWFBLFNBQVM4TCxJQUVSN0osS0FBS3lJLEVBQUkxSixDQUNWLENBdUJBLFNBQVMrSixFQUFZdEosRUFBT3NDLEVBQUsvRCxHQUNoQyxHQUFvQixNQUFoQnlCLEVBQU02RyxPQUFnQixDQUV6QixHQURBN0csRUFBTTZHLE9BQU9vQyxFQUFJMUosRUFDYlMsRUFBTTZHLE9BQU92RSxLQUFTL0QsRUFBTyxPQUNwQixNQUFUQSxHQUFtQyxtQkFBVkEsR0FBeUMsaUJBQVZBLEdBSWxDLE1BQXJCeUIsRUFBTTZHLE9BQU92RSxJQUFjdEMsRUFBTUgsSUFBSXlLLG9CQUFvQmhJLEVBQUlpSCxNQUFNLEdBQUl2SixFQUFNNkcsUUFBUSxHQUN6RjdHLEVBQU02RyxPQUFPdkUsUUFBT00sSUFKSyxNQUFyQjVDLEVBQU02RyxPQUFPdkUsSUFBY3RDLEVBQU1ILElBQUkwSyxpQkFBaUJqSSxFQUFJaUgsTUFBTSxHQUFJdkosRUFBTTZHLFFBQVEsR0FDdEY3RyxFQUFNNkcsT0FBT3ZFLEdBQU8vRCxFQUt0QixNQUFvQixNQUFUQSxHQUFtQyxtQkFBVkEsR0FBeUMsaUJBQVZBLElBQ2xFeUIsRUFBTTZHLE9BQVMsSUFBSXdELEVBQ25CckssRUFBTUgsSUFBSTBLLGlCQUFpQmpJLEVBQUlpSCxNQUFNLEdBQUl2SixFQUFNNkcsUUFBUSxHQUN2RDdHLEVBQU02RyxPQUFPdkUsR0FBTy9ELEVBRXRCLENBR0EsU0FBU2dELEVBQWNnSCxFQUFRdkksRUFBT2tCLEdBQ1IsbUJBQWxCcUgsRUFBT2lDLFFBQXVCakssRUFBUytDLEtBQUtpRixFQUFPaUMsT0FBUXhLLEdBQ3ZDLG1CQUFwQnVJLEVBQU9rQyxVQUF5QnZKLEVBQU1xRixLQUFLaEcsRUFBU21LLEtBQUtuQyxFQUFPa0MsU0FBVXpLLEdBQ3RGLENBQ0EsU0FBU2tILEVBQWdCcUIsRUFBUXZJLEVBQU9rQixHQUNSLG1CQUFwQnFILEVBQU9vQyxVQUF5QnpKLEVBQU1xRixLQUFLaEcsRUFBU21LLEtBQUtuQyxFQUFPb0MsU0FBVTNLLEdBQ3RGLENBK0JBLE9BOUVBcUssRUFBVWxILFVBQVlILE9BQU9DLE9BQU8sTUFDcENvSCxFQUFVbEgsVUFBVXlILFlBQWMsU0FBVUMsR0FDM0MsSUFDSTNFLEVBREE0RSxFQUFVdEssS0FBSyxLQUFPcUssRUFBR2xCLE1BRU4sbUJBQVptQixFQUF3QjVFLEVBQVM0RSxFQUFReEgsS0FBS3VILEVBQUdFLGNBQWVGLEdBQ25DLG1CQUF4QkMsRUFBUUYsYUFBNEJFLEVBQVFGLFlBQVlDLEdBQ3hFLElBQUlHLEVBQU94SyxLQUNHLE1BQVZ3SyxFQUFLL0IsS0FDVSxJQUFkNEIsRUFBR0ksU0FBa0IsRUFBSUQsRUFBSy9CLEtBQ3BCLE1BQVYvQyxHQUF5QyxtQkFBaEJBLEVBQU9nRixNQUNuQ3RDLFFBQVFDLFFBQVEzQyxHQUFRZ0YsS0FBSyxXQUNkLE1BQVZGLEVBQUsvQixJQUEyQixJQUFkNEIsRUFBR0ksU0FBa0IsRUFBSUQsRUFBSy9CLElBQ3JELEtBR2EsSUFBWC9DLElBQ0gyRSxFQUFHTSxpQkFDSE4sRUFBR08sa0JBRUwsRUEyRE8sU0FBU3ZMLEVBQUtrQixFQUFRa0ssR0FDNUIsSUFBS3BMLEVBQUssTUFBTSxJQUFJd0wsVUFBVSxpREFDOUIsR0FBa0IsTUFBZHJELEdBQXNCbkksRUFBSXlMLFNBQVN0RCxHQUN0QyxNQUFNLElBQUlxRCxVQUFVLDJEQUVyQixJQUFJRSxFQUFhaE0sRUFDYmlNLEVBQVV4RCxFQUNWOUcsRUFBUSxHQUNSdUssRUFBUzlLLEVBQWNkLEdBQ3ZCNkwsRUFBWTdMLEVBQUk4TCxhQUVwQjNELEVBQWFuSSxFQUNiTixFQUFrQyxtQkFBWDBMLEVBQXdCQSxPQUFTckksRUFDeERwRCxFQUFnQixDQUFDLEVBQ2pCLElBRW1CLE1BQWRLLEVBQUlrQixTQUFnQmxCLEVBQUl2QixZQUFjLElBQzFDeUMsRUFBUzVCLEVBQU15TSxrQkFBa0JqRyxNQUFNdUQsUUFBUW5JLEdBQVVBLEVBQVMsQ0FBQ0EsSUFDbkV3RCxFQUFZMUUsRUFBS0EsRUFBSWtCLE9BQVFBLEVBQVFHLEVBQU8sS0FBb0IsaUNBQWR3SyxPQUErQzlJLEVBQVk4SSxHQUM3RzdMLEVBQUlrQixPQUFTQSxFQUVDLE1BQVYwSyxHQUFrQjlLLEVBQWNkLEtBQVM0TCxHQUFrQyxtQkFBakJBLEVBQU9JLE9BQXNCSixFQUFPSSxRQUNsRyxJQUFLLElBQUl4SyxFQUFJLEVBQUdBLEVBQUlILEVBQU1hLE9BQVFWLElBQUtILEVBQU1HLElBQzlDLENBQUUsUUFDRDlCLEVBQWdCZ00sRUFDaEJ2RCxFQUFhd0QsQ0FDZCxDQUNELENBQ0QsQyx1QkMvNEJBLFNBQVNyTSxFQUFNZ0IsRUFBS21DLEVBQUtyQyxFQUFPd0IsRUFBVXVGLEVBQU1uSCxHQUMvQyxNQUFPLENBQUNNLElBQUtBLEVBQUttQyxJQUFLQSxFQUFLckMsTUFBT0EsRUFBT3dCLFNBQVVBLEVBQVV1RixLQUFNQSxFQUFNbkgsSUFBS0EsRUFBS3VDLFFBQUlRLEVBQVdYLGFBQVNXLEVBQVd0QyxXQUFPc0MsRUFBV2lFLFlBQVFqRSxFQUFXUSxjQUFVUixFQUN2SyxDQUNBekQsRUFBTWtFLFVBQVksU0FBU3lJLEdBQzFCLE9BQUluRyxNQUFNdUQsUUFBUTRDLEdBQWMzTSxFQUFNLFNBQUt5RCxPQUFXQSxFQUFXekQsRUFBTXlNLGtCQUFrQkUsUUFBT2xKLE9BQVdBLEdBQy9GLE1BQVJrSixHQUFnQyxrQkFBVEEsRUFBMkIsS0FDbEMsaUJBQVRBLEVBQTBCQSxFQUM5QjNNLEVBQU0sU0FBS3lELE9BQVdBLEVBQVd1SCxPQUFPMkIsUUFBT2xKLE9BQVdBLEVBQ2xFLEVBQ0F6RCxFQUFNeU0sa0JBQW9CLFNBQVNHLEdBQ2xDLElBQUl0SyxFQUFXLEdBQ2YsR0FBSXNLLEVBQU1oSyxPQUFRLENBS2pCLElBSkEsSUFBSTRDLEVBQXNCLE1BQVpvSCxFQUFNLElBQThCLE1BQWhCQSxFQUFNLEdBQUd6SixJQUlsQ2pCLEVBQUksRUFBR0EsRUFBSTBLLEVBQU1oSyxPQUFRVixJQUNqQyxJQUFpQixNQUFaMEssRUFBTTFLLElBQThCLE1BQWhCMEssRUFBTTFLLEdBQUdpQixPQUFpQnFDLEVBQ2xELE1BQU0sSUFBSTBHLFdBQ1QxRyxHQUF3QixNQUFab0gsRUFBTTFLLElBQWtDLGtCQUFiMEssRUFBTTFLLEdBRTFDLG9FQURBLGlMQUtOLElBQVNBLEVBQUksRUFBR0EsRUFBSTBLLEVBQU1oSyxPQUFRVixJQUNqQ0ksRUFBU0osR0FBS2xDLEVBQU1rRSxVQUFVMEksRUFBTTFLLEdBRXRDLENBQ0EsT0FBT0ksQ0FDUixFQUVBeEMsRUFBT0MsUUFBVUMsQyw2QkNoQ2pCLElBQUlBLEVBQVEsRUFBUSxLQStCcEJGLEVBQU9DLFFBQVUsV0FDaEIsSUFBK0N1QyxFQUEzQ3hCLEVBQVFTLFVBQVVGLE1BQU9RLEVBQVFSLEtBQU8sRUFTNUMsR0FQYSxNQUFUUCxFQUNIQSxFQUFRLENBQUMsR0FDa0IsaUJBQVZBLEdBQW1DLE1BQWJBLEVBQU1FLEtBQWV3RixNQUFNdUQsUUFBUWpKLE1BQzFFQSxFQUFRLENBQUMsRUFDVGUsRUFBUVIsTUFHTEUsVUFBVXFCLFNBQVdmLEVBQVEsRUFDaENTLEVBQVdmLFVBQVVNLEdBQ2hCMkUsTUFBTXVELFFBQVF6SCxLQUFXQSxFQUFXLENBQUNBLFNBRzFDLElBREFBLEVBQVcsR0FDSlQsRUFBUU4sVUFBVXFCLFFBQVFOLEVBQVM4RSxLQUFLN0YsVUFBVU0sTUFHMUQsT0FBTzdCLEVBQU0sR0FBSWMsRUFBTXFDLElBQUtyQyxFQUFPd0IsRUFDcEMsQyw2QkNsREEsSUFBSXVLLEVBQVMsRUFBUSxJQUVyQi9NLEVBQU9DLFFBQVUsRUFBUSxJQUFSLENBQThCOE0sRUFBeUMsb0JBQTFCQyxzQkFBd0NBLHNCQUF3QixLQUF5QixvQkFBWnZFLFFBQTBCQSxRQUFVLEssdUJDRi9LekksRUFBT0MsUUFBVSxTQUFTZ04sR0FDekIsR0FBK0Msb0JBQTNDbEosT0FBT0csVUFBVWdFLFNBQVM3RCxLQUFLNEksR0FBK0IsTUFBTyxHQUV6RSxJQUFJQyxFQUFPLEdBQ1gsSUFBSyxJQUFJN0osS0FBTzRKLEVBQ2ZFLEVBQVk5SixFQUFLNEosRUFBTzVKLElBR3pCLE9BQU82SixFQUFLRSxLQUFLLEtBRWpCLFNBQVNELEVBQVk5SixFQUFLL0QsR0FDekIsR0FBSW9ILE1BQU11RCxRQUFRM0ssR0FDakIsSUFBSyxJQUFJOEMsRUFBSSxFQUFHQSxFQUFJOUMsRUFBTXdELE9BQVFWLElBQ2pDK0ssRUFBWTlKLEVBQU0sSUFBTWpCLEVBQUksSUFBSzlDLEVBQU04QyxTQUdwQyxHQUE4QyxvQkFBMUMyQixPQUFPRyxVQUFVZ0UsU0FBUzdELEtBQUsvRSxHQUN2QyxJQUFLLElBQUk4QyxLQUFLOUMsRUFDYjZOLEVBQVk5SixFQUFNLElBQU1qQixFQUFJLElBQUs5QyxFQUFNOEMsU0FHcEM4SyxFQUFLNUYsS0FBSytGLG1CQUFtQmhLLElBQWlCLE1BQVQvRCxHQUEyQixLQUFWQSxFQUFlLElBQU0rTixtQkFBbUIvTixHQUFTLElBQzdHLENBQ0QsQyxnQkN6QkEsSUFBSWdPLEVBQUksRUFBUSxLQUNoQnROLEVBQU9DLFFBQVVxTixFQUFFQyxNQUFNLHVKLDZCQ3dCekIsSUFBSUMsRUFBUyxFQUFRLEtBRWpCQyxFQUFRLElBQUlDLE9BQU8sNkVBRXZCMU4sRUFBT0MsUUFBVSxTQUFTZSxFQUFPMk0sR0FDaEMsSUFBSTFHLEVBQVMsQ0FBQyxFQUVkLEdBQWMsTUFBVjBHLEVBQ0gsSUFBSyxJQUFJdEssS0FBT3JDLEVBQ1h3TSxFQUFPbkosS0FBS3JELEVBQU9xQyxLQUFTb0ssRUFBTUcsS0FBS3ZLLElBQVFzSyxFQUFPNUMsUUFBUTFILEdBQU8sSUFDeEU0RCxFQUFPNUQsR0FBT3JDLEVBQU1xQyxTQUl0QixJQUFLLElBQUlBLEtBQU9yQyxFQUNYd00sRUFBT25KLEtBQUtyRCxFQUFPcUMsS0FBU29LLEVBQU1HLEtBQUt2SyxLQUMxQzRELEVBQU81RCxHQUFPckMsRUFBTXFDLElBS3ZCLE9BQU80RCxDQUNSLEMsNkJDN0NBLElBQUk0RyxFQUFnQixFQUFRLEtBQ3hCTCxFQUFTLEVBQVEsS0FFckJ4TixFQUFPQyxRQUFVLFNBQVM2TixFQUFTQyxHQUNsQyxTQUFTQyxFQUFhQyxHQUNyQixPQUFPLElBQUl0RSxRQUFRc0UsRUFDcEIsQ0FtSkEsU0FBU0MsRUFBVWhCLEVBQU1pQixHQUN4QixJQUFLLElBQUk5SyxLQUFPNkosRUFBS2tCLFFBQ3BCLEdBQUlaLEVBQU9uSixLQUFLNkksRUFBS2tCLFFBQVMvSyxJQUFRQSxFQUFJZ0wsZ0JBQWtCRixFQUFNLE9BQU8sRUFFMUUsT0FBTyxDQUNSLENBRUEsT0FWQUgsRUFBYTlKLFVBQVl5RixRQUFRekYsVUFDakM4SixFQUFhTSxVQUFZM0UsUUFTbEIsQ0FDTjRFLFFBQVMsU0FBU0MsRUFBS3RCLEdBQ0gsaUJBQVJzQixHQUFvQnRCLEVBQU9zQixFQUFLQSxFQUFNQSxFQUFJQSxLQUNwQyxNQUFSdEIsSUFBY0EsRUFBTyxDQUFDLEdBQy9CLElBQUl1QixFQTVKTixTQUFxQkQsRUFBS3RCLEdBQ3pCLE9BQU8sSUFBSXZELFFBQVEsU0FBU0MsRUFBUzhFLEdBQ3BDRixFQUFNWCxFQUFjVyxFQUFLdEIsRUFBS3lCLFFBQzlCLElBTW9CQyxFQU5oQkMsRUFBd0IsTUFBZjNCLEVBQUsyQixPQUFpQjNCLEVBQUsyQixPQUFPQyxjQUFnQixNQUMzRDVRLEVBQU9nUCxFQUFLaFAsS0FDWjZRLEdBQWdDLE1BQWxCN0IsRUFBSzhCLFdBQXFCOUIsRUFBSzhCLFlBQWNDLEtBQUtELGNBQWdCOVEsYUFBZ0I0UCxFQUFRb0IsVUFBWWhSLGFBQWdCNFAsRUFBUXFCLGlCQUM1SUMsRUFBZWxDLEVBQUtrQyxlQUF5QyxtQkFBakJsQyxFQUFLbUMsUUFBeUIsR0FBSyxRQUUvRUMsRUFBTSxJQUFJeEIsRUFBUXlCLGVBQWtCQyxHQUFVLEVBQU9DLEdBQVksRUFDakVyTyxFQUFXa08sRUFDWEksRUFBUUosRUFBSUksTUFtQmhCLElBQUssSUFBSXJNLEtBakJUaU0sRUFBSUksTUFBUSxXQUNYRixHQUFVLEVBQ1ZFLEVBQU1yTCxLQUFLOUMsS0FDWixFQUVBK04sRUFBSUssS0FBS2QsRUFBUUwsR0FBb0IsSUFBZnRCLEVBQUswQyxNQUFzQyxpQkFBZDFDLEVBQUsyQyxLQUFvQjNDLEVBQUsyQyxVQUFPbE0sRUFBb0MsaUJBQWxCdUosRUFBSzRDLFNBQXdCNUMsRUFBSzRDLGNBQVduTSxHQUVuSm9MLEdBQXNCLE1BQVI3USxJQUFpQmdRLEVBQVVoQixFQUFNLGlCQUNsRG9DLEVBQUlTLGlCQUFpQixlQUFnQixtQ0FFTixtQkFBckI3QyxFQUFLOEMsYUFBK0I5QixFQUFVaEIsRUFBTSxXQUM5RG9DLEVBQUlTLGlCQUFpQixTQUFVLDRCQUU1QjdDLEVBQUsrQyxrQkFBaUJYLEVBQUlXLGdCQUFrQi9DLEVBQUsrQyxpQkFDakQvQyxFQUFLZ0QsVUFBU1osRUFBSVksUUFBVWhELEVBQUtnRCxTQUNyQ1osRUFBSUYsYUFBZUEsRUFFSGxDLEVBQUtrQixRQUNoQlosRUFBT25KLEtBQUs2SSxFQUFLa0IsUUFBUy9LLElBQzdCaU0sRUFBSVMsaUJBQWlCMU0sRUFBSzZKLEVBQUtrQixRQUFRL0ssSUFJekNpTSxFQUFJYSxtQkFBcUIsU0FBU3ZFLEdBRWpDLElBQUk0RCxHQUV5QixJQUF6QjVELEVBQUc1QyxPQUFPb0gsV0FDYixJQUNDLElBTW1DQyxFQU4vQkMsRUFBVzFFLEVBQUc1QyxPQUFPdUgsUUFBVSxLQUFPM0UsRUFBRzVDLE9BQU91SCxPQUFTLEtBQTZCLE1BQXJCM0UsRUFBRzVDLE9BQU91SCxRQUFrQixjQUFnQjNDLEtBQUtZLEdBTWxIZ0MsRUFBVzVFLEVBQUc1QyxPQUFPd0gsU0FFekIsR0FBcUIsU0FBakJwQixHQUdILElBQUt4RCxFQUFHNUMsT0FBT29HLGNBQXdDLG1CQUFqQmxDLEVBQUttQyxRQUUxQyxJQUFNbUIsRUFBV3ZCLEtBQUt3QixNQUFNN0UsRUFBRzVDLE9BQU8wSCxhQUFjLENBQ3BELE1BQU8vTyxHQUFLNk8sRUFBVyxJQUFLLE9BRWxCcEIsR0FBaUMsU0FBakJBLEdBTVgsTUFBWm9CLElBQWtCQSxFQUFXNUUsRUFBRzVDLE9BQU8wSCxjQVU1QyxHQVA0QixtQkFBakJ4RCxFQUFLbUMsU0FDZm1CLEVBQVd0RCxFQUFLbUMsUUFBUXpELEVBQUc1QyxPQUFRa0UsR0FDbkNvRCxHQUFVLEdBQzRCLG1CQUFyQnBELEVBQUs4QyxjQUN0QlEsRUFBV3RELEVBQUs4QyxZQUFZUSxJQUd6QkYsRUFBUyxDQUNaLEdBQXlCLG1CQUFkcEQsRUFBS3hDLEtBQ2YsR0FBSWhFLE1BQU11RCxRQUFRdUcsR0FDakIsSUFBSyxJQUFJcE8sRUFBSSxFQUFHQSxFQUFJb08sRUFBUzFOLE9BQVFWLElBQ3BDb08sRUFBU3BPLEdBQUssSUFBSThLLEVBQUt4QyxLQUFLOEYsRUFBU3BPLFNBR2xDb08sRUFBVyxJQUFJdEQsRUFBS3hDLEtBQUs4RixHQUUvQjVHLEVBQVE0RyxFQUNULEtBQ0ssQ0FDSixJQUFJRyxFQUF3QixXQUMzQixJQUFNTixFQUFVekUsRUFBRzVDLE9BQU8wSCxZQUFhLENBQ3ZDLE1BQU8vTyxHQUFLME8sRUFBVUcsQ0FBUyxDQUMvQixJQUFJN0YsRUFBUSxJQUFJbk4sTUFBTTZTLEdBQ3RCMUYsRUFBTWlHLEtBQU9oRixFQUFHNUMsT0FBT3VILE9BQ3ZCNUYsRUFBTTZGLFNBQVdBLEVBQ2pCOUIsRUFBTy9ELEVBQ1IsRUFFbUIsSUFBZjJFLEVBQUlpQixPQUtQTSxXQUFXLFdBQ05wQixHQUNKa0IsR0FDRCxHQUNNQSxHQUNSLENBQ0QsQ0FDQSxNQUFPaFAsR0FDTitNLEVBQU8vTSxFQUNSLENBRUYsRUFFQTJOLEVBQUl3QixVQUFZLFNBQVVsRixHQUN6QjZELEdBQVksRUFDWixJQUFJOUUsRUFBUSxJQUFJbk4sTUFBTSxxQkFDdEJtTixFQUFNaUcsS0FBT2hGLEVBQUc1QyxPQUFPdUgsT0FDdkI3QixFQUFPL0QsRUFDUixFQUUyQixtQkFBaEJ1QyxFQUFLNkQsU0FDZnpCLEVBQU1wQyxFQUFLNkQsT0FBT3pCLEVBQUtwQyxFQUFNc0IsSUFBUWMsS0FHekJsTyxJQUNYd04sRUFBZ0JVLEVBQUlJLE1BQ3BCSixFQUFJSSxNQUFRLFdBQ1hGLEdBQVUsRUFDVlosRUFBY3ZLLEtBQUs5QyxLQUNwQixHQUlVLE1BQVJyRCxFQUFjb1IsRUFBSTBCLE9BQ2EsbUJBQW5COUQsRUFBSzhCLFVBQTBCTSxFQUFJMEIsS0FBSzlELEVBQUs4QixVQUFVOVEsSUFDOURBLGFBQWdCNFAsRUFBUW9CLFVBQVloUixhQUFnQjRQLEVBQVFxQixnQkFBaUJHLEVBQUkwQixLQUFLOVMsR0FDMUZvUixFQUFJMEIsS0FBSy9CLEtBQUtnQyxVQUFVL1MsR0FDOUIsRUFDRCxDQW1CZ0JnVCxDQUFZMUMsRUFBS3RCLEdBQy9CLElBQXdCLElBQXBCQSxFQUFLaUUsV0FBcUIsT0FBTzFDLEVBQ3JDLElBQUkyQyxFQUFRLEVBQ1osU0FBU0MsSUFDUSxNQUFWRCxHQUF1QyxtQkFBakJyRCxHQUE2QkEsR0FDMUQsQ0FFQSxPQUVBLFNBQVN1RCxFQUFLN0MsR0FDYixJQUFJeEMsRUFBT3dDLEVBQVF4QyxLQWtCbkIsT0FWQXdDLEVBQVE4QyxZQUFjdkQsRUFDdEJTLEVBQVF4QyxLQUFPLFdBQ2RtRixJQUNBLElBQUlJLEVBQU92RixFQUFLekssTUFBTWlOLEVBQVNoTixXQUsvQixPQUpBK1AsRUFBS3ZGLEtBQUtvRixFQUFVLFNBQVMxUCxHQUU1QixHQURBMFAsSUFDYyxJQUFWRCxFQUFhLE1BQU16UCxDQUN4QixHQUNPMlAsRUFBS0UsRUFDYixFQUNPL0MsQ0FDUixDQXRCTzZDLENBQUs3QyxFQXVCYixFQUVGLEMsNkJDcE1BLElBQUlnRCxFQUFjLEVBQVEsS0FFMUJBLEVBQVlsRSxNQUFRLEVBQVEsS0FDNUJrRSxFQUFZN08sU0FBVyxFQUFRLEtBRS9CNUMsRUFBT0MsUUFBVXdSLEMsdUJDTGpCLElBQUlDLEVBQWEsR0FDYkMsRUFBYyxDQUFDLEVBQ2ZqSCxFQUFPaUgsRUFBWXpKLFNBQ25CMEosRUFBU2xILEVBQUtyRyxLQUFLcU4sR0FDbkJHLEVBQVNuSCxFQUFLckcsS0FBS3NOLEdBQ25CRyxFQUFTcEgsRUFBS3JHLEtBQUssSUFDbkIwTixFQUFXckgsRUFBS3JHLEtBQUtxRyxHQUNyQnNILEVBQU9MLEVBQVlNLGVBQ25CQyxFQUFTbk8sT0FBT21PLFFBQVUsU0FBU3RNLEdBQUksT0FBT0EsQ0FBQyxFQUduRCxTQUFTdU0sRUFBU25KLEVBQVFNLEdBQ3hCLElBQUssSUFBSThJLEtBQUs5SSxFQUFZMEksRUFBSTNOLEtBQUtpRixFQUFROEksSUFDckNBLEVBQUVySCxRQUFRLFFBQVVxSCxLQUFLcEosS0FBU0EsRUFBT29KLEdBQUs5SSxFQUFPOEksSUFFM0QsT0FBT3BKLENBQ1QsQ0FFQSxTQUFTcUosRUFBVXJMLEVBQUVzTCxHQUNuQixJQUFjbFEsRUFBR2lGLEVBQWJrTCxFQUFNLEdBQ1YsSUFBS2xMLEtBQUtpTCxFQUFHLEdBQUdOLEVBQUkzTixLQUFLaU8sRUFBR2pMLEdBQzFCLElBQUtqRixLQUFLNEUsRUFBTWdMLEVBQUkzTixLQUFLMkMsRUFBRzVFLElBQzFCbVEsRUFBSWpMLEtBQUtOLEVBQUU1RSxHQUFLa1EsRUFBRWpMLElBQ3RCLE9BQU9rTCxDQUNULENBT0EsSUFBSUMsRUFBb0IsOERBV3hCLFNBQVNDLEVBQWNDLEdBR3JCLElBRkEsSUFBeUM5TSxFQUFyQytNLEVBQVUsR0FBSUosRUFBTSxHQUFJSyxFQUFVLEVBRS9CaE4sRUFBSTRNLEVBQWtCSyxLQUFLSCxJQUVoQyxPQUFROU0sRUFBRSxJQUNWLElBQUssSUFBS2dOLElBQVcsTUFDckIsSUFBSyxJQUFLQSxJQUFXLE1BQ3JCLElBQUssSUFBSyxHQUFJQSxFQUFTLE1BQU9ELEVBQVFyTCxLQUFLMUIsRUFBRWtOLE9BRy9DLElBQUtsTixFQUFJK00sRUFBUTdQLE9BQVE4QyxLQUN2QjJNLEVBQUlRLFFBQVFMLEVBQVNwSSxNQUFNcUksRUFBUS9NLEdBQUssSUFDeEM4TSxFQUFXQSxFQUFTcEksTUFBTSxFQUFHcUksRUFBUS9NLElBR3ZDLE9BREEyTSxFQUFJUSxRQUFRTCxHQUNMSCxDQUNULENBR0EsSUFBSVMsRUFBcUIsMERBRXpCLFNBQVNDLEVBQVdQLEVBQVVRLEdBRzVCLElBRkEsSUFBOEJYLEVBQUszTSxFQUEvQitNLEVBQVUsR0FBSVEsRUFBUSxHQUVuQnZOLEVBQUlvTixFQUFtQkgsS0FBS0gsSUFFckIsS0FBUjlNLEVBQUUsSUFBVytNLEVBQVFyTCxLQUFLMUIsRUFBRWtOLE9BRWxDLElBQUtsTixFQUFJK00sRUFBUTdQLE9BQVE4QyxLQUN2QnVOLEVBQU1KLFFBQVFMLEVBQVNwSSxNQUFNcUksRUFBUS9NLEdBQUssSUFDMUM4TSxFQUFXQSxFQUFTcEksTUFBTSxFQUFHcUksRUFBUS9NLElBS3ZDLElBSEF1TixFQUFNSixRQUFRTCxHQUNPLElBQWpCUyxFQUFNclEsUUFBY3FRLEVBQU1KLFFBQVEsSUFDdENSLEVBQU0sQ0FBQ1ksRUFBTSxJQUNSdk4sRUFBSSxFQUFHQSxFQUFJdU4sRUFBTXJRLE9BQVE4QyxJQUM1QjJNLEVBQU1GLEVBQVVFLEVBQUtGLEVBQVVhLEVBQVMsQ0FBQ0MsRUFBTXZOLE1BRWpELE9BQU8yTSxFQUFJbkYsS0FBSyxJQUNsQixDQUVBLFNBQVNnRyxFQUFVQyxHQUNqQixPQUFPLFNBQVNDLEVBQUtDLEdBQ25CLEdBQUk3SSxFQUFLckcsS0FBS2tQLEtBQVMzQixFQUFPLElBQUssSUFBSXhQLEVBQUcsRUFBSUEsRUFBSW1SLEVBQUl6USxPQUFRVixJQUFNa1IsRUFBS0MsRUFBSW5SLFNBQ3hFaVIsRUFBRUUsRUFDVCxDQUNGLENBRUEsU0FBU0MsRUFBV3RPLEdBQ2xCLE1BQU8sSUFBTUEsRUFBTW1KLGFBQ3JCLENBY0EsU0FBU29GLEVBQWFwUyxFQUFPcVMsRUFBTUMsRUFBUS9OLEVBQUdnTyxHQUM1QyxJQUFJeEIsRUFBR3ZNLEVBQUdnTyxFQUNWLEdBQU8sTUFBSGpPLEVBRUosT0FBUzhFLEVBQUtyRyxLQUFLdUIsRUFBSUEsRUFBRWtPLFlBQ3pCLEtBQUtsQyxFQUNILElBQUtRLEVBQUksRUFBR0EsRUFBSXhNLEVBQUU5QyxPQUFRc1AsSUFFeEJxQixFQUFhcFMsRUFBT3FTLEVBQU1DLEVBQVEvTixFQUFFd00sR0FBSXdCLEdBRTFDLE1BQ0YsS0FBSy9CLEVBSUgsSUFBS08sS0FETHVCLEVBQVVBLEdBQVVBLEVBQVMsSUFDbkIvTixFQUFHLEdBQUlvTSxFQUFJM04sS0FBS3VCLEVBQUd3TSxHQUUzQixHQURBdk0sRUFBSUQsRUFBRXdNLEdBQ0YsS0FBS3hFLEtBQUt3RSxHQUNaLElBQUt5QixLQUFPekIsRUFBSUEsRUFBRWUsTUFBTSxLQUFXbkIsRUFBSTNOLEtBQUsrTixFQUFHeUIsSUFFN0NKLEVBQWFwUyxFQUFPcVMsRUFBTUMsRUFBU3ZCLEVBQUV5QixHQUFLaE8sRUFBRytOLFFBSy9DSCxFQUFhcFMsRUFBT3FTLEVBQU1DLEVBQVN2QixFQUFHdk0sRUFBRytOLEdBSTdDLE1BQ0YsUUFTRXhCLEVBQUl1QixFQUFPblUsUUFBUSxLQUFNLEtBQUtBLFFBQVEsU0FBVWdVLElBRTVDSSxHQUFlLGtCQUFMeEIsR0FBOEIsYUFBTEEsR0FBeUIsY0FBTEEsSUFHekR4TSxFQUFJQSxFQUFFdU4sTUFBTSxLQUFLOU0sSUFBSSxTQUFVVCxHQUU3QixPQUFPQSxFQUFFcEcsUUFBUSxtRkFBb0Y2QixFQUFNMFMsaUJBRTdHLEdBQUczRyxLQUFLLE1BR1ZzRyxFQUFLTSxLQUFLNUIsRUFBR3hNLEdBR2pCLENBMEJBLFNBQVNxTyxFQUFRNVMsRUFBT3FTLEVBQU10QixFQUFHdk0sRUFBRzhOLEVBQVFDLEVBQU9NLEdBR2pELElBQUssSUFBSTlSLEVBQUksRUFBR0EsRUFBSWYsRUFBTThTLFlBQVlyUixPQUFRVixJQUU1QyxHQUFJZixFQUFNOFMsWUFBWS9SLEdBQUdmLEVBQU9xUyxFQUFNdEIsRUFBR3ZNLEVBQUc4TixFQUFRQyxFQUFPTSxHQUFlLE9BUTVFLElBQUs5QixFQUFFLElBQU0sV0FBV3hFLEtBQUt3RSxFQUFFLElBRTdCZ0MsRUFBTS9TLEVBQU9xUyxFQUFNQyxFQUFROU4sRUFBRyxFQUFHcU8sUUFHNUIsSUFBSzlCLEVBQUUsSUFBTSxVQUFVeEUsS0FBS3dFLEVBQUUsSUFFbkNnQyxFQUFNL1MsRUFBT3FTLEVBQU1DLEVBQVE5TixFQUFHLEVBQUdxTyxRQUc1QixHQUFJOUIsRUFBRSxJQUFNLFVBQVV4RSxLQUFLd0UsRUFBRSxJQUFLLENBRXZDLElBQUt3QixHQUFTTSxFQUFjLE9BQU9SLEVBQUtXLElBQUksNEJBQThCakMsRUFBRSxJQUU1RSxJQUFLLHVCQUF1QnhFLEtBQUt3RSxFQUFFLElBQUssT0FBT3NCLEVBQUtXLElBQUksZUFBaUJwRixLQUFLZ0MsVUFBVW1CLEVBQUUsSUFBTSxPQUFTQSxFQUFFLElBRTNHaFEsRUFBSSxHQUNKZ1IsRUFBUyxTQUFTa0IsRUFBU0MsR0FFWCxNQUFYRCxHQUFvQixpREFBaUQxRyxLQUFLMkcsRUFBV0QsRUFBVSxJQUU3RmxTLEVBQUVrRixLQUFLaU4sRUFBUy9VLFFBQVEsTUFBTyxLQUZtRWtVLEVBQUtXLElBQUksZUFBZ0JwRixLQUFLZ0MsVUFBVXFELEdBQVcsT0FBU2xDLEVBQUUsR0FJdkssRUFOQWdCLENBTUd2TixHQUdDekQsRUFBRVUsU0FDSnpCLEVBQU1tVCxTQUFTcEMsRUFBRSxHQUFLQSxFQUFFLEdBQUc1UyxRQUFRLE1BQU8sS0FDMUM2QixFQUFNb1QsTUFBTXJDLEVBQUUsS0FBUSxJQUFNaFEsRUFBRWdMLEtBQUssS0FJdkMsTUFBWWdGLEVBQUUsSUFBTSxpQ0FBaUN4RSxLQUFLd0UsRUFBRSxJQUMxRGdCLEVBQVMsU0FBU3ZOLEdBRWhCNk4sRUFBS2dCLE9BQU90QyxFQUFFLEdBQUlBLEVBQUUsR0FBSXZNLEVBRTFCLEVBSkF1TixDQUlHdk4sSUFHT3VNLEVBQUUsSUFBTSwyQkFBMkJ4RSxLQUFLd0UsRUFBRSxJQUNwRGdCLEVBQVMsU0FBU3ZOLEdBRWhCNk4sRUFBS2dCLE9BQU90QyxFQUFFLEdBQUlBLEVBQUUsR0FBSUEsRUFBRSxHQUFJLEdBRTlCcUIsRUFBYXBTLEVBQU9xUyxFQUFNLEdBQUk3TixFQUFHK04sR0FFakNGLEVBQUtpQixTQUVQLEVBUkF2QixDQVFHdk4sR0FFTXVNLEVBQUUsSUFBTSxzQ0FBc0N4RSxLQUFLd0UsRUFBRSxLQUUxRHdCLEdBQVMsYUFBZXhCLEVBQUUsS0FDNUJBLEVBQUUsR0FBS0EsRUFBRSxHQUFHNVMsUUFFViwyRUFDQTZCLEVBQU0wUyxtQkFLVkwsRUFBS2dCLE9BQU90QyxFQUFFLEdBQUlBLEVBQUUsR0FBSUEsRUFBRSxHQUFJLEdBRTFCLFFBQVVBLEVBQUUsR0FFZHFCLEVBQWFwUyxFQUFPcVMsRUFBTSxHQUFJN04sRUFBRytOLEdBSWpDUSxFQUNFL1MsRUFBT3FTLEVBQ1AsYUFBZXRCLEVBQUUsR0FBSyxHQUFLdUIsRUFDM0I5TixFQUFHK04sRUFBT00sRUFBZSxHQUs3QlIsRUFBS2lCLFdBSUxqQixFQUFLVyxJQUFJLHdCQUEwQmpDLEVBQUUsR0FHekMsQ0FhQSxTQUFTZ0MsRUFBTS9TLEVBQU9xUyxFQUFNQyxFQUFRaUIsRUFBTWhCLEVBQU9NLEdBQy9DLElBQUk5QixFQUFHdk0sRUFBR2dQLEVBQWVoQixFQUV6QixPQUFRbkosRUFBS3JHLEtBQUt1USxJQUVsQixLQUFLL0MsRUFDSCxJQUFLTyxLQUFLd0MsRUFBTSxHQUFJNUMsRUFBSTNOLEtBQUt1USxFQUFNeEMsR0FHakMsR0FGQXZNLEVBQUkrTyxFQUFLeEMsR0FFTHVCLEVBQU83USxPQUFTLEdBQUssWUFBWThLLEtBQUt3RSxHQU94QyxHQU5LeUMsSUFDSEEsRUFBZ0IsRUFFaEJuQixFQUFLb0IsS0FBS25CLElBR1IsS0FBSy9GLEtBQUt3RSxHQUNaLElBQUt5QixLQUFPekIsRUFBSUEsRUFBRWUsTUFBTSxLQUFXbkIsRUFBSTNOLEtBQUsrTixFQUFHeUIsSUFFN0NKLEVBQWFwUyxFQUFPcVMsRUFBTXRCLEVBQUV5QixHQUFLaE8sRUFBRytOLFFBS3RDSCxFQUFhcFMsRUFBT3FTLEVBQU10QixFQUFHdk0sRUFBRytOLE9BSXpCLEtBQUtoRyxLQUFLd0UsSUFFbkJ5QyxFQUFnQixFQUVoQlosRUFBUTVTLEVBQU9xUyxFQUNiLGtEQUFrRGIsS0FBS1QsSUFBTSxDQUFDQSxFQUFFLElBQUksR0FBRyxJQUN2RXZNLEVBQUc4TixFQUFRQyxFQUFPTSxLQUtwQlcsRUFBZ0IsRUFFaEJULEVBQ0UvUyxFQUFPcVMsRUFHRUMsRUFBTzdRLE9BQVMsSUFBTSxJQUFJOEssS0FBSytGLElBQVcsSUFBSS9GLEtBQUt3RSxLQUU5Q3lCLEVBQUtwQixFQUFja0IsR0FBU2xCLEVBQ3RDbUIsRUFFRXhCLEVBQUU1UyxRQUNBLHlIQUNBNkIsRUFBTTBTLGtCQUdSM0IsR0FDRi9MLElBQUksU0FBVStMLEdBQ2QsTUFBTyxJQUFJeEUsS0FBS3dFLEdBQUthLEVBQVViLEVBQUd5QixHQUFNQSxFQUFHeE4sSUFBSSxTQUFTd04sR0FDdEQsT0FBT0EsRUFBS3pCLENBQ2QsR0FBR2hGLEtBQUssSUFDVixHQUFHQSxLQUFLLE1BRVksSUFBSVEsS0FBS3dFLEdBRWhCYSxFQUNUVyxFQUVFeEIsRUFBRTVTLFFBQ0EseUhBQ0E2QixFQUFNMFMsa0JBR1IzQixFQUNGLENBQUN1QixJQUdRQSxHQUNUQyxFQUVFeEIsRUFBRTVTLFFBQ0EseUhBQ0E2QixFQUFNMFMsa0JBR1IzQixHQUVQdk0sRUFBRytOLEVBQU9NLEVBQWUsSUFNaEMsTUFFRixLQUFLdEMsRUFDSCxJQUFLUSxFQUFJLEVBQUdBLEVBQUl3QyxFQUFLOVIsT0FBUXNQLElBRTNCZ0MsRUFBTS9TLEVBQU9xUyxFQUFNQyxFQUFRaUIsRUFBS3hDLEdBQUl3QixFQUFPTSxHQUc3QyxNQUVGLEtBQUtwQyxFQUVFNkIsRUFBTzdRLFFBQVE0USxFQUFLVyxJQUFJLGVBQzdCWCxFQUFLb0IsS0FBS25CLEdBQVUsS0FFcEJGLEVBQWFwUyxFQUFPcVMsRUFBTSxHQUFJa0IsRUFBTWhCLEdBR3hDLENBV0EsU0FBU21CLEVBQWV2RCxFQUFNd0QsR0FDNUIsSUFBSUMsRUFDSixPQUFPRCxFQUFTeEQsRUFBTyxDQUNyQjBELEtBQU0sV0FBV0QsRUFBZSxFQUFHekQsRUFBSzBELE1BQU8sRUFDL0NDLEtBQU0sU0FBVUMsR0FFZCxPQURJSCxJQUFlekQsRUFBSzZELFFBQVNKLEVBQWUsR0FDekN6RCxFQUFLMkQsS0FBS0MsRUFDbkIsRUFDQVYsT0FBUSxTQUFVSSxFQUFNUSxFQUFNQyxFQUFPQyxHQUMvQlAsSUFBZXpELEVBQUs2RCxRQUFTSixFQUFlLEdBQ2hEekQsRUFBS2tELE9BQU9JLEVBQU1RLEVBQU1DLEVBQU9DLEVBQ2pDLEVBQ0FiLFFBQVMsU0FBVUcsR0FDYkcsSUFBZXpELEVBQUs2RCxRQUFTSixFQUFlLEdBQ2hEekQsRUFBS21ELFFBQVFHLEVBQ2YsRUFDQUEsS0FBTSxTQUFVcEMsR0FDVkEsSUFBYXVDLElBQ1hBLEdBQWN6RCxFQUFLNkQsUUFDdkI3RCxFQUFLc0QsS0FBS3BDLEdBQ1Z1QyxFQUFldkMsRUFFbkIsRUFFSixDQUVBLFNBQVMrQyxFQUFPQyxHQUNkLE1BQU8sV0FBYUEsRUFBSSxHQUMxQixDQUVBLFNBQVNDLEVBQUl2RCxFQUFHdk0sRUFBR0QsR0FHakIsT0FGQUEsRUFBSSxDQUFDLEdBQ0h3TSxHQUFLdk0sRUFDQUQsQ0FDVCxDQUVBLFNBQVNnUSxFQUFJZCxFQUFNbkcsRUFBUWtILEdBQ3pCLEdBQ0VwVSxVQUFVcUIsT0FBUyxFQUNuQixDQUVBLElBQUlnVCxFQUFNRixFQUFHbkssS0FBS2pLLE1BQU1vVSxFQUFJLENBQUMsTUFBTUcsT0FBTyxHQUFHekwsTUFBTWpHLEtBQUs1QyxVQUFVLEtBR2xFLE9BREFxVSxFQUFJNU4sU0FBVyxXQUFXLE1BQU8sSUFBTTRNLEVBQU8sSUFBTW5HLENBQU0sRUFDbkRtSCxDQUNULENBQ0ssT0FBT0gsRUFBRyxJQUFNYixFQUFNLElBQU1uRyxFQUFRa0gsRUFDM0MsQ0EyTEE3VixFQUFPQyxRQXpMUCxXQUdFLElBQUkrVixFQUFLM0IsRUFHTDRCLEVBQVEsQ0FDVmYsS0FBTSxXQUFXYyxFQUFJLEdBQUkzQixFQUFJLEVBQUcsRUFDaENjLEtBQU0sU0FBVUMsR0FDZCxHQUFrQixHQUFkZixFQUFJdlIsT0FBYSxNQUFNLElBQUl0RixNQUFNLGlCQUFtQnlSLEtBQUtnQyxVQUFVb0QsRUFBSSxLQUFLLEdBQUssZ0JBQWtCMkIsRUFBSTVJLEtBQUssS0FDaEgsT0FBT2dJLEVBQU1ZLEVBQU1BLEVBQUk1SSxLQUFLLEdBQzlCLEVBQ0FpSCxJQUFLLFNBQVM2QixHQUNaN0IsRUFBSS9NLEtBQUs0TyxHQUNURixFQUFJMU8sS0FBSyxvQkFBc0I0TyxFQUFNLFFBQ3ZDLEVBQ0F4QixPQUFRLFNBQVVJLEVBQU1RLEVBQU1DLEVBQU9DLEdBQ25DUSxFQUFJMU8sS0FBS3dOLEVBQU1TLEdBQVMsSUFBS0EsRUFBT0MsRUFBYSxLQUFPLElBQUtXLEVBQVVDLFFBQ3pFLEVBRUF6QixRQUFTLFdBQWFxQixFQUFJMU8sS0FBSyxJQUFLNk8sRUFBVUMsUUFBUyxFQUN2RHRCLEtBQU0sU0FBVXBDLEdBQVdzRCxFQUFJMU8sS0FBS29MLEVBQVUsS0FBTXlELEVBQVVDLFFBQVMsRUFFdkVmLE1BQU8sV0FBYVcsRUFBSTFPLEtBQUssSUFBSzZPLEVBQVVDLFFBQVMsRUFDckRwQyxLQUFNLFNBQVVsVixFQUFNUSxHQUFRMFcsRUFBSTFPLEtBQUt4SSxFQUFNQSxHQUFRLElBQUtRLEVBQU8sSUFBSzZXLEVBQVVDLFFBQVMsR0FJdkZDLEVBQVcsQ0FBQ3RCLEdBQ1paLEVBQWMsR0FHZGdDLEVBQVksQ0FDZFAsR0FBSUEsRUFDSkgsT0FBUUEsRUFDUkUsR0FBSUEsRUFDSmxCLE1BQU8sQ0FBQyxFQUNSMkIsUUFBUyxLQUNURSxPQUFRLFNBRU5DLEtBQUtDLE1BQXNCLFdBQWhCRCxLQUFLRSxVQUF3QnZPLFNBQVMsSUFBTSxJQUN2RHFPLEtBQUtDLE1BQXNCLFdBQWhCRCxLQUFLRSxVQUF3QnZPLFNBQVMsSUFBTSxJQUN2RHFPLEtBQUtDLE1BQXNCLFdBQWhCRCxLQUFLRSxVQUF3QnZPLFNBQVMsSUFBTSxJQUN2RHFPLEtBQUtDLE1BQXNCLFdBQWhCRCxLQUFLRSxVQUF3QnZPLFNBQVMsSUFDbkR3TyxTQUFVLEdBQ1ZDLE1BQU8sU0FBUy9CLEdBQ2QsSUFBSWxCLEVBQU9rRCxFQUF3QixHQVduQyxPQVZBbEQsRUFBS3dCLE9BQ0xkLEVBQ0V5QyxFQUFTLEdBQ1RuRCxFQUNBLEdBQ0FrQixFQUNBLEVBQ0EsR0FHS2xCLEVBQUt5QixNQUNkLEVBQ0FILE9BQVEsU0FBVUosRUFBTXJYLEdBQ3RCLElBQUltVyxFQUFPa0QsRUFBd0IsR0FTbkMsT0FSQWxELEVBQUt3QixPQUNMekIsRUFDRW9ELEVBQVMsR0FDVG5ELEVBQ0EsR0FDQWtCLElBQ0VyWCxHQUFXQSxFQUFRa1ksU0FFaEIvQixFQUFLeUIsTUFDZCxHQUlFMEIsRUFBVyxDQUViLENBRUU5QyxpQkFBa0IrQyxFQUNsQnRDLFNBQVV1QyxFQUNWdEMsTUFBTzBCLEVBQVUxQixNQUNqQk4sWUFBYUEsRUFFYk8sT0FBUVQsRUFDUkQsS0FBTVAsRUFDTnFCLEtBQU1WLEdBR1IsQ0FDRUwsaUJBQWtCK0MsRUFDbEJ0QyxTQUFVdUMsRUFDVnRDLE1BQU8wQixFQUFVMUIsTUFDakJULEtBQU1QLElBT051RCxFQUFPNUQsRUFBUyxTQUFTNkQsSUFLdEJkLEVBQVVPLFNBQVMzTCxRQUFRa00sS0FFaENkLEVBQVVPLFNBQVNwUCxLQUFLMlAsR0FFcEJ2TSxFQUFLckcsS0FBSzRTLEtBQVlsRixJQUFVa0YsRUFBU0EsRUFBT2QsSUFFL0NjLElBRUw3RCxFQUFTLFNBQVM4RCxHQUNoQmIsRUFBUy9PLEtBQUs0UCxFQUNoQixFQUZBOUQsQ0FFRzZELEVBQU9FLFNBQVd6RixHQUVyQjBCLEVBQVMsU0FBU3ZILEdBQ2hCc0ksRUFBWTdNLEtBQUt1RSxFQUNuQixFQUZBdUgsQ0FFRzZELEVBQU9HLEtBQU8xRixHQUVqQlMsRUFBU2dFLEVBQVUxQixNQUFPd0MsRUFBT0ksUUFBVTFGLEdBRTNDcUYsRUFBS0MsRUFBT1AsVUFBWWhGLEdBRXhCdUUsRUFBUWdCLEVBQU9oQixPQUFTQSxFQUV4QjlELEVBQVNnRSxFQUFXYyxJQUN0QixHQUdJSyxFQUFXLEdBS2YsU0FBU1YsRUFBd0I1QixHQUUvQixJQUFLc0MsRUFBU3hVLE9BQVEsQ0FFcEJ1VCxFQUFTL08sS0FBSyxTQUFTMEMsRUFBR2dMLEdBQVMsT0FBT0EsRUFBUyxDQUFDRSxLQUFLZSxFQUFNZixLQUFNbEIsS0FBS2lDLEVBQU1qQyxLQUFNbUIsS0FBS2MsRUFBTWQsS0FBTWQsSUFBSzRCLEVBQU01QixLQUFPNEIsQ0FBSyxHQUM5SCxJQUFJLElBQUk3VCxFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFDcEIsSUFBSyxJQUFJaUYsRUFBSWdQLEVBQVN2VCxPQUFRdUUsS0FDNUJpUSxFQUFTbFYsR0FBSzhQLEVBQ1pDLEVBQ0VrRSxFQUFTaFAsR0FBR2lRLEVBQVNsVixLQUFNQSxHQUMzQmtWLEVBQVNsVixJQUtuQixDQUNBLE9BQU9rVixFQUFTdEMsRUFDbEIsQ0FTQSxTQUFTK0IsRUFBVTVJLEdBRWpCLE9BREtnSSxFQUFVMUIsTUFBTXRHLEtBQU9nSSxFQUFVMUIsTUFBTXRHLEdBQVFBLEVBQU9nSSxFQUFVRyxRQUM5REgsRUFBVTFCLE1BQU10RyxHQUFNakosTUFBTSxPQUNyQyxDQWFBLFNBQVM0UixFQUFrQjVSLEVBQU9xUyxFQUFRQyxFQUFXQyxFQUFLdEosR0FDeEQsT0FBT29KLEdBQVVDLEdBQWFDLEVBQU1WLEVBQVU1SSxFQUNoRCxDQUdBLE9BREE2SSxFQUFLdEYsRUFBV3BILE1BQU1qRyxLQUFLNUMsWUFDcEIwVSxDQUNULEMsNkJDM29CQSxJQUFJdUIsRUFBbUIsRUFBUSxLQUcvQjFYLEVBQU9DLFFBQVUsU0FBU3VPLEdBQ3pCLElBQUltSixFQUFhbkosRUFBSXpELFFBQVEsS0FDekI2TSxFQUFZcEosRUFBSXpELFFBQVEsS0FDeEI4TSxFQUFXRCxFQUFZLEVBQUlwSixFQUFJMUwsT0FBUzhVLEVBQ3hDRSxFQUFVSCxFQUFhLEVBQUlFLEVBQVdGLEVBQ3RDSSxFQUFPdkosRUFBSWxFLE1BQU0sRUFBR3dOLEdBQVN0WSxRQUFRLFVBQVcsS0FNcEQsT0FKS3VZLEVBRVksTUFBWkEsRUFBSyxLQUFZQSxFQUFPLElBQU1BLEdBRnhCQSxFQUFPLElBSVgsQ0FDTkEsS0FBTUEsRUFDTnBKLE9BQVFnSixFQUFhLEVBQ2xCLENBQUMsRUFDREQsRUFBaUJsSixFQUFJbEUsTUFBTXFOLEVBQWEsRUFBR0UsSUFFaEQsQyw2QkNwQkEsSUFBSUcsRUFBZ0IsRUFBUSxLQU81QmhZLEVBQU9DLFFBQVUsU0FBU2dZLEdBQ3pCLElBQUlDLEVBQWVGLEVBQWNDLEdBQzdCRSxFQUFlcFUsT0FBT3FVLEtBQUtGLEVBQWF2SixRQUN4Q3lKLEVBQU8sR0FDUEMsRUFBUyxJQUFJM0ssT0FBTyxJQUFNd0ssRUFBYUgsS0FBS3ZZLFFBSy9DLHFEQUNBLFNBQVM4TixFQUFHakssRUFBS2lWLEdBQ2hCLE9BQVcsTUFBUGpWLEVBQW9CLEtBQU9pSyxHQUMvQjhLLEVBQUs5USxLQUFLLENBQUM4SyxFQUFHL08sRUFBS2tWLEVBQWEsUUFBVkQsSUFDUixRQUFWQSxFQUF3QixPQUNkLE1BQVZBLEVBQXNCLGFBQ25CLFdBQWFBLEdBQVMsSUFDOUIsR0FDRyxTQUNKLE9BQU8sU0FBU0UsR0FHZixJQUFLLElBQUlwVyxFQUFJLEVBQUdBLEVBQUkrVixFQUFhclYsT0FBUVYsSUFDeEMsR0FBSThWLEVBQWF2SixPQUFPd0osRUFBYS9WLE1BQVFvVyxFQUFLN0osT0FBT3dKLEVBQWEvVixJQUFLLE9BQU8sRUFHbkYsSUFBS2dXLEVBQUt0VixPQUFRLE9BQU91VixFQUFPekssS0FBSzRLLEVBQUtULE1BQzFDLElBQUlVLEVBQVNKLEVBQU94RixLQUFLMkYsRUFBS1QsTUFDOUIsR0FBYyxNQUFWVSxFQUFnQixPQUFPLEVBQzNCLElBQVNyVyxFQUFJLEVBQUdBLEVBQUlnVyxFQUFLdFYsT0FBUVYsSUFDaENvVyxFQUFLN0osT0FBT3lKLEVBQUtoVyxHQUFHZ1EsR0FBS2dHLEVBQUtoVyxHQUFHbVcsRUFBSUUsRUFBT3JXLEVBQUksR0FBS3NXLG1CQUFtQkQsRUFBT3JXLEVBQUksSUFFcEYsT0FBTyxDQUNSLENBQ0QsQyw2QkN4Q0EsSUFBSXVXLEVBQW1CLEVBQVEsS0FHL0IzWSxFQUFPQyxRQUFVLFNBQVNnWSxFQUFVdEosR0FDbkMsR0FBSSx3QkFBMEJmLEtBQUtxSyxHQUNsQyxNQUFNLElBQUlXLFlBQVksNEVBRXZCLEdBQWMsTUFBVmpLLEVBQWdCLE9BQU9zSixFQUMzQixJQUFJTixFQUFhTSxFQUFTbE4sUUFBUSxLQUM5QjZNLEVBQVlLLEVBQVNsTixRQUFRLEtBQzdCOE0sRUFBV0QsRUFBWSxFQUFJSyxFQUFTblYsT0FBUzhVLEVBQzdDRSxFQUFVSCxFQUFhLEVBQUlFLEVBQVdGLEVBQ3RDSSxFQUFPRSxFQUFTM04sTUFBTSxFQUFHd04sR0FDekJlLEVBQVEsQ0FBQyxFQUViOVUsT0FBTytVLE9BQU9ELEVBQU9sSyxHQUVyQixJQUFJb0ssRUFBV2hCLEVBQUt2WSxRQUFRLHdCQUF5QixTQUFTOE4sRUFBR2pLLEVBQUsyVixHQUdyRSxjQUZPSCxFQUFNeFYsR0FFTSxNQUFmc0wsRUFBT3RMLEdBQXFCaUssRUFFekIwTCxFQUFXckssRUFBT3RMLEdBQU9nSyxtQkFBbUJuQyxPQUFPeUQsRUFBT3RMLElBQ2xFLEdBR0k0VixFQUFnQkYsRUFBU2hPLFFBQVEsS0FDakNtTyxFQUFlSCxFQUFTaE8sUUFBUSxLQUNoQ29PLEVBQWNELEVBQWUsRUFBSUgsRUFBU2pXLE9BQVNvVyxFQUNuREUsRUFBYUgsRUFBZ0IsRUFBSUUsRUFBY0YsRUFDL0NoUyxFQUFTOFIsRUFBU3pPLE1BQU0sRUFBRzhPLEdBRTNCekIsR0FBYyxJQUFHMVEsR0FBVWdSLEVBQVMzTixNQUFNcU4sRUFBWUUsSUFDdERvQixHQUFpQixJQUFHaFMsSUFBVzBRLEVBQWEsRUFBSSxJQUFNLEtBQU9vQixFQUFTek8sTUFBTTJPLEVBQWVFLElBQy9GLElBQUlFLEVBQWNWLEVBQWlCRSxHQUluQyxPQUhJUSxJQUFhcFMsSUFBVzBRLEVBQWEsR0FBS3NCLEVBQWdCLEVBQUksSUFBTSxLQUFPSSxHQUMzRXpCLEdBQWEsSUFBRzNRLEdBQVVnUixFQUFTM04sTUFBTXNOLElBQ3pDc0IsR0FBZ0IsSUFBR2pTLElBQVcyUSxFQUFZLEVBQUksR0FBSyxLQUFPbUIsRUFBU3pPLE1BQU00TyxJQUN0RWpTLENBQ1IsQyxnQkN6Q0EsSUFBSXFHLEVBQUksRUFBUSxLQUNoQnROLEVBQU9DLFFBQVVxTixFQUFFQyxNQUFNLHFMLDZCQ0N6QixJQUFJck4sRUFBUSxFQUFRLEtBRXBCRixFQUFPQyxRQUFVLFNBQVNxWixHQUV6QixPQURZLE1BQVJBLElBQWNBLEVBQU8sSUFDbEJwWixFQUFNLFNBQUt5RCxPQUFXQSxFQUFXMlYsT0FBTTNWLE9BQVdBLEVBQzFELEMsNkJDTEEsSUFBSXpELEVBQVEsRUFBUSxLQUVwQkYsRUFBT0MsUUFBVSxTQUFTOE0sRUFBUXdNLEVBQVU5USxHQUMzQyxJQUFJK1EsRUFBZ0IsR0FDaEJDLEdBQVUsRUFDVkMsR0FBVSxFQUVkLFNBQVNDLElBQ1IsSUFBS0QsRUFBUyxFQUFHQSxFQUFTRixFQUFjMVcsT0FBUTRXLEdBQVUsRUFDekQsSUFBTTNNLEVBQU95TSxFQUFjRSxHQUFTeFosRUFBTXNaLEVBQWNFLEVBQVMsSUFBSzFOLEVBQVEsQ0FDOUUsTUFBT3JLLEdBQUs4RyxFQUFRa0MsTUFBTWhKLEVBQUcsQ0FFOUIrWCxHQUFVLENBQ1gsQ0FFQSxTQUFTMU4sSUFDSHlOLElBQ0pBLEdBQVUsRUFDVkYsRUFBUyxXQUNSRSxHQUFVLEVBQ1ZFLEdBQ0QsR0FFRixDQXNCQSxPQXBCQTNOLEVBQU8yTixLQUFPQSxFQW9CUCxDQUFDQyxNQWxCUixTQUFlQyxFQUFNQyxHQUNwQixHQUFpQixNQUFiQSxHQUF1QyxNQUFsQkEsRUFBVWhXLE1BQXFDLG1CQUFkZ1csRUFDekQsTUFBTSxJQUFJMU4sVUFBVSw2Q0FHckIsSUFBSTBHLEVBQVEwRyxFQUFjek8sUUFBUThPLEdBQzlCL0csR0FBUyxJQUNaMEcsRUFBY08sT0FBT2pILEVBQU8sR0FDeEJBLEdBQVM0RyxJQUFRQSxHQUFVLEdBQy9CM00sRUFBTzhNLEVBQU0sS0FHRyxNQUFiQyxJQUNITixFQUFjbFMsS0FBS3VTLEVBQU1DLEdBQ3pCL00sRUFBTzhNLEVBQU0zWixFQUFNNFosR0FBWTlOLEdBRWpDLEVBRXNCQSxPQUFRQSxFQUMvQixDLGdCQ2hEQSxJQUFJc0IsRUFBSSxFQUFRLEtBQ2hCdE4sRUFBT0MsUUFBVXFOLEVBQUVDLE1BQU0sc0osNkJDQ3pCLElBQUlyTixFQUFRLEVBQVEsS0FDaEI4WixFQUFtQixFQUFRLEtBQzNCeE0sRUFBUyxFQUFRLEtBRWpCeU0sRUFBaUIsK0VBQ2pCQyxFQUFnQm5XLE9BQU9DLE9BQU8sTUFpRmxDaEUsRUFBT0MsUUFoQlAsU0FBcUJ5UyxHQUNwQixHQUFnQixNQUFaQSxHQUF3QyxpQkFBYkEsR0FBNkMsbUJBQWJBLEdBQW9ELG1CQUFsQkEsRUFBUzVPLEtBQ3pHLE1BQU10RyxNQUFNLHdEQUdiLElBQUl1RCxFQUFRaVosRUFBaUJ4WSxNQUFNLEVBQUdDLFdBRXRDLE1BQXdCLGlCQUFiaVIsSUFDVjNSLEVBQU15QixTQUFXdEMsRUFBTXlNLGtCQUFrQjVMLEVBQU15QixVQUM5QixNQUFia1EsR0FoRE4sU0FBc0JyUixFQUFPTixHQUM1QixJQUFJQyxFQUFRRCxFQUFNQyxNQUNkbVosRUFBVzNNLEVBQU9uSixLQUFLckQsRUFBTyxTQUM5Qm9aLEVBQVlELEVBQVduWixFQUFNcVosTUFBUXJaLEVBQU1vWixVQWlDL0MsT0EvQkFyWixFQUFNRyxJQUFNRyxFQUFNSCxJQUVDLE1BQWZHLEVBQU1MLE9BQ1RBLEVBQVErQyxPQUFPK1UsT0FBTyxDQUFDLEVBQUd6WCxFQUFNTCxNQUFPQSxHQUV0QixNQUFib1osR0FBOEMsTUFBekIvWSxFQUFNTCxNQUFNb1osWUFBbUJwWixFQUFNb1osVUFDaEQsTUFBYkEsRUFDNEIsTUFBekIvWSxFQUFNTCxNQUFNb1osVUFDWGxQLE9BQU83SixFQUFNTCxNQUFNb1osV0FBYSxJQUFNbFAsT0FBT2tQLEdBQzdDQSxFQUN3QixNQUF6Qi9ZLEVBQU1MLE1BQU1vWixVQUNYL1ksRUFBTUwsTUFBTW9aLFVBQ1osT0FFWSxNQUFiQSxJQUFtQnBaLEVBQU1vWixVQUFZQSxHQUd0Q0QsSUFBVW5aLEVBQU1xWixNQUFRLE1BS1YsVUFBZGhaLEVBQU1ILEtBQW1Cc00sRUFBT25KLEtBQUtyRCxFQUFPLFVBQy9DQSxFQUFRK0MsT0FBTytVLE9BQU8sQ0FBQ3BPLEtBQU0xSixFQUFNMEosTUFBTzFKLElBSTNDRCxFQUFNb0MsR0FBS25DLEVBQU1tQyxHQUVqQnBDLEVBQU1DLE1BQVFBLEVBRVBELENBQ1IsQ0FXK0J1WixDQUFhSixFQUFjeEgsSUFuRTFELFNBQXlCQSxHQUV4QixJQURBLElBQUl4TixFQUFPaEUsRUFBTSxNQUFPcVosRUFBVSxHQUFJdlosRUFBUSxDQUFDLEVBQ3hDa0UsRUFBUStVLEVBQWVwSCxLQUFLSCxJQUFXLENBQzdDLElBQUloSSxFQUFPeEYsRUFBTSxHQUFJNUYsRUFBUTRGLEVBQU0sR0FDbkMsR0FBYSxLQUFUd0YsR0FBeUIsS0FBVnBMLEVBQWM0QixFQUFNNUIsT0FDbEMsR0FBYSxNQUFUb0wsRUFBYzFKLEVBQU0vQyxHQUFLcUIsT0FDN0IsR0FBYSxNQUFUb0wsRUFBYzZQLEVBQVFqVCxLQUFLaEksUUFDL0IsR0FBb0IsTUFBaEI0RixFQUFNLEdBQUcsR0FBWSxDQUM3QixJQUFJc1YsRUFBWXRWLEVBQU0sR0FDbEJzVixJQUFXQSxFQUFZQSxFQUFVaGIsUUFBUSxZQUFhLE1BQU1BLFFBQVEsUUFBUyxPQUNoRSxVQUFiMEYsRUFBTSxHQUFnQnFWLEVBQVFqVCxLQUFLa1QsR0FDbEN4WixFQUFNa0UsRUFBTSxJQUFvQixLQUFkc1YsRUFBbUJBLEVBQVlBLElBQWEsQ0FDcEUsQ0FDRCxDQUdBLE9BRklELEVBQVF6WCxPQUFTLElBQUc5QixFQUFNb1osVUFBWUcsRUFBUW5OLEtBQUssTUFuQnhELFNBQWlCSCxHQUNoQixJQUFLLElBQUk1SixLQUFPNEosRUFBUSxHQUFJTyxFQUFPbkosS0FBSzRJLEVBQVE1SixHQUFNLE9BQU8sRUFDN0QsT0FBTyxDQUNSLENBaUJLb1gsQ0FBUXpaLEtBQVFBLEVBQVEsTUFDckJrWixFQUFjeEgsR0FBWSxDQUFDeFIsSUFBS0EsRUFBS0YsTUFBT0EsRUFDcEQsQ0FrRHVFMFosQ0FBZ0JoSSxHQUFXM1IsSUFHakdBLEVBQU1HLElBQU13UixFQUNMM1IsRUFDUixDLHVCQ3BGQSxTQUFTNFosRUFBdUJDLEdBQy9CLElBQ0MsT0FBT2xDLG1CQUFtQmtDLEVBQzNCLENBQUUsTUFBTXZHLEdBQ1AsT0FBT3VHLENBQ1IsQ0FDRCxDQUVBNWEsRUFBT0MsUUFBVSxTQUFTNGEsR0FDekIsR0FBZSxLQUFYQSxHQUEyQixNQUFWQSxFQUFnQixNQUFPLENBQUMsRUFDcEIsTUFBckJBLEVBQU9DLE9BQU8sS0FBWUQsRUFBU0EsRUFBT3ZRLE1BQU0sSUFHcEQsSUFEQSxJQUFJeVEsRUFBVUYsRUFBTzFILE1BQU0sS0FBTTZILEVBQVcsQ0FBQyxFQUFHeEMsRUFBTyxDQUFDLEVBQy9DcFcsRUFBSSxFQUFHQSxFQUFJMlksRUFBUWpZLE9BQVFWLElBQUssQ0FDeEMsSUFBSTZZLEVBQVFGLEVBQVEzWSxHQUFHK1EsTUFBTSxLQUN6QjlQLEVBQU1zWCxFQUF1Qk0sRUFBTSxJQUNuQzNiLEVBQXlCLElBQWpCMmIsRUFBTW5ZLE9BQWU2WCxFQUF1Qk0sRUFBTSxJQUFNLEdBRXRELFNBQVYzYixFQUFrQkEsR0FBUSxFQUNYLFVBQVZBLElBQW1CQSxHQUFRLEdBRXBDLElBQUk0YixFQUFTN1gsRUFBSThQLE1BQU0sWUFDbkJnSSxFQUFTM0MsRUFDVG5WLEVBQUkwSCxRQUFRLE1BQVEsR0FBR21RLEVBQU9FLE1BQ2xDLElBQUssSUFBSS9ULEVBQUksRUFBR0EsRUFBSTZULEVBQU9wWSxPQUFRdUUsSUFBSyxDQUN2QyxJQUFJZ1UsRUFBUUgsRUFBTzdULEdBQUlpVSxFQUFZSixFQUFPN1QsRUFBSSxHQUMxQ2tVLEVBQXdCLElBQWJELElBQW9CRSxNQUFNdGMsU0FBU29jLEVBQVcsS0FDN0QsR0FBYyxLQUFWRCxFQUVrQixNQUFqQkwsRUFEQTNYLEVBQU02WCxFQUFPNVEsTUFBTSxFQUFHakQsR0FBRytGLFVBRTVCNE4sRUFBUzNYLEdBQU9xRCxNQUFNdUQsUUFBUWtSLEdBQVVBLEVBQU9yWSxPQUFTLEdBRXpEdVksRUFBUUwsRUFBUzNYLFVBR2IsR0FBYyxjQUFWZ1ksRUFBdUIsTUFDaEMsR0FBSWhVLElBQU02VCxFQUFPcFksT0FBUyxFQUFHcVksRUFBT0UsR0FBUy9iLE1BQ3hDLENBR0osSUFBSW1jLEVBQU8xWCxPQUFPMlgseUJBQXlCUCxFQUFRRSxHQUN2QyxNQUFSSSxJQUFjQSxFQUFPQSxFQUFLbmMsT0FDbEIsTUFBUm1jLElBQWNOLEVBQU9FLEdBQVNJLEVBQU9GLEVBQVcsR0FBSyxDQUFDLEdBQzFESixFQUFTTSxDQUNWLENBQ0QsQ0FDRCxDQUNBLE9BQU9qRCxDQUNSLEMsdUJDaERBLElBQUlwWSxFQUFpQixJQUFJdWIsUUFxQnpCM2IsRUFBT0MsUUFBVSxDQUNoQkcsZUFBZ0JBLEVBQ2hCQyxPQXJCRCxVQUFpQlUsR0FHaEIsSUFBSUgsRUFBTUcsRUFBTUgsSUFDWm9DLEVBQVVqQyxFQUFNaUMsUUFDaEJ5RyxFQUFhckosRUFBZXdiLElBQUloYixHQUNwQyxHQUFXLE1BQVBBLEVBQWEsRUFBRyxDQUNuQixJQUFJc0IsRUFBY3RCLEVBQUlzQixZQUVsQjlCLEVBQWV3YixJQUFJaGIsS0FBUzZJLFVBQ3pCN0ksRUFDTm9DLEtBR0RwQyxFQUFNc0IsQ0FDUCxPQUNPYyxFQUNSLEUsdUJDbEJBaEQsRUFBT0MsUUFBVSxDQUFDLEVBQUVnUyxjLDZCQ0RwQixJQUFJL1IsRUFBUSxFQUFRLEtBQ2hCb04sRUFBSSxFQUFRLEtBRVpPLEVBQWdCLEVBQVEsS0FDeEJtSyxFQUFnQixFQUFRLEtBQ3hCNkQsRUFBa0IsRUFBUSxLQUMxQkMsRUFBUyxFQUFRLEtBRXJCLFNBQVNuQixFQUF1QmIsR0FDL0IsSUFDQyxPQUFPcEIsbUJBQW1Cb0IsRUFDM0IsQ0FBRSxNQUFNblksR0FDUCxPQUFPbVksQ0FDUixDQUNELENBRUE5WixFQUFPQyxRQUFVLFNBQVM2TixFQUFTaU8sR0FDbEMsSUFXSW5iLEVBQUtvYixFQUFVQyxFQUVmQyxFQUFpQnBDLEVBQVc5WSxFQUFPbWIsRUFBYUMsRUFiaERDLEVBQXVCLE1BQVh2TyxFQUViLEtBQ2dDLG1CQUF6QkEsRUFBUXdPLGFBQThCeE8sRUFBUXdPLGFBQWV4TyxFQUFRK0MsV0FDM0UwTCxFQUFJNVMsUUFBUUMsVUFFWjRTLEdBQVksRUFFWkMsR0FBUSxFQUNSQyxHQUFrQixFQU1sQkMsRUFBYSxDQUNoQjVTLFNBQVUsV0FDVDBTLEVBQVFDLEdBQWtCLEVBQzFCNU8sRUFBUXpDLG9CQUFvQixXQUFZdVIsR0FBVyxFQUNwRCxFQUNBOVksS0FBTSxXQUtMLElBQUkvQyxFQUFRYixFQUFNNFosRUFBVzlZLEVBQU1xQyxJQUFLckMsR0FDeEMsT0FBSWtiLEVBQXdCQSxFQUFnQm5QLE9BQU9oTSxHQUU1QyxDQUFDQSxFQUNULEdBR0c4YixFQUFPQyxFQUFNRCxLQUFPLENBQUMsRUFFekIsU0FBU0UsSUFDUlAsR0FBWSxFQUdaLElBQUk3SSxFQUFTN0YsRUFBUWtQLFNBQVNDLEtBQ04sTUFBcEJILEVBQU1uSixPQUFPLEtBQ2hCQSxFQUFTN0YsRUFBUWtQLFNBQVNFLE9BQVN2SixFQUNYLE1BQXBCbUosRUFBTW5KLE9BQU8sSUFFRSxPQURsQkEsRUFBUzdGLEVBQVFrUCxTQUFTRyxTQUFXeEosR0FDMUIsS0FBWUEsRUFBUyxJQUFNQSxJQU14QyxJQUFJb0UsRUFBT3BFLEVBQU9vQyxTQUNoQnZXLFFBQVEsMkJBQTRCbWIsR0FDcENyUSxNQUFNd1MsRUFBTW5KLE9BQU83USxRQUNqQjBWLEVBQU9SLEVBQWNELEdBSXpCLFNBQVNySixFQUFPL00sR0FDZjhHLFFBQVFrQyxNQUFNaEosR0FDZG1iLEVBQU1wVCxJQUFJdVMsRUFBZSxLQUFNLENBQUN6YyxTQUFTLEdBQzFDLENBTEF1RSxPQUFPK1UsT0FBT04sRUFBSzdKLE9BQVFiLEVBQVFzUCxRQUFRL2IsT0FRM0MsU0FBU2djLEVBQUtqYixHQUNiLEtBQU9BLEVBQUk0WixFQUFTbFosT0FBUVYsSUFDM0IsR0FBSTRaLEVBQVM1WixHQUFHa2IsTUFBTTlFLEdBQU8sQ0FDNUIsSUFBSStFLEVBQVV2QixFQUFTNVosR0FBRzBYLFVBQ3RCMEQsRUFBZXhCLEVBQVM1WixHQUFHMGEsTUFDM0JXLEVBQVlGLEVBQ1pHLEVBQVN0QixFQUFhLFNBQVN1QixHQUNsQyxHQUFJRCxJQUFXdEIsRUFBZixDQUNBLEdBQUl1QixJQUFTZCxFQUFNLE9BQU9RLEVBQUtqYixFQUFJLEdBQ25DMFgsRUFBb0IsTUFBUjZELEdBQXNDLG1CQUFkQSxFQUFLN1osTUFBdUMsbUJBQVQ2WixFQUE2QixNQUFQQSxFQUM3RjNjLEVBQVF3WCxFQUFLN0osT0FBUXdOLEVBQWNwRSxFQUFNcUUsRUFBYSxLQUN0REYsRUFBa0JxQixFQUFReFEsT0FBU3dRLEVBQVUsS0FDekNiLEVBQWlCWCxFQUFZL1AsVUFFaEMwUSxHQUFrQixFQUNsQlgsRUFBWW5DLE1BQU1oWixFQUFLK2IsR0FSRyxDQVU1QixFQWFBLFlBVklZLEVBQVF6WixNQUEyQixtQkFBWnlaLEdBQzFCQSxFQUFVLENBQUMsRUFDWEcsRUFBT0QsSUFFQ0YsRUFBUUssUUFDaEJyQixFQUFFdFEsS0FBSyxXQUNOLE9BQU9zUixFQUFRSyxRQUFRcEYsRUFBSzdKLE9BQVFvSixFQUFNeUYsRUFDM0MsR0FBR3ZSLEtBQUt5UixFQUFRM0YsSUFBU2tFLEVBQWdCLEtBQU92TixHQUU1Q2dQLElBRU4sQ0FHRCxHQUFJM0YsSUFBU2tFLEVBQ1osTUFBTSxJQUFJemUsTUFBTSxtQ0FBcUN5ZSxFQUFnQixLQUV0RWEsRUFBTXBULElBQUl1UyxFQUFlLEtBQU0sQ0FBQ3pjLFNBQVMsR0FDMUMsQ0F2Q0E2ZCxDQUFLLEVBd0NOLENBRUEsU0FBU1QsSUFDSEosSUFDSkEsR0FBWSxFQUlaSCxFQUFVVSxHQUVaLENBRUEsU0FBU0QsRUFBTWpELEVBQU1nRSxFQUFjQyxHQUNsQyxJQUFLakUsRUFBTSxNQUFNLElBQUl6TixVQUFVLGlEQWMvQixHQVpBNFAsRUFBV2pZLE9BQU9xVSxLQUFLMEYsR0FBUXpYLElBQUksU0FBU3lXLEdBQzNDLEdBQWlCLE1BQWJBLEVBQU0sR0FBWSxNQUFNLElBQUlsRSxZQUFZLGlDQUM1QyxHQUFJLHdCQUEwQmhMLEtBQUtrUCxHQUNsQyxNQUFNLElBQUlsRSxZQUFZLHlFQUV2QixNQUFPLENBQ05rRSxNQUFPQSxFQUNQaEQsVUFBV2dFLEVBQU9oQixHQUNsQlEsTUFBT3pCLEVBQWdCaUIsR0FFekIsR0FDQWIsRUFBZ0I0QixFQUNJLE1BQWhCQSxFQUFzQixDQUN6QixJQUFJRSxFQUFjL0YsRUFBYzZGLEdBRWhDLElBQUs3QixFQUFTZ0MsS0FBSyxTQUFVNWIsR0FBSyxPQUFPQSxFQUFFa2IsTUFBTVMsRUFBYSxHQUM3RCxNQUFNLElBQUlFLGVBQWUsZ0RBRTNCLENBQ0FyZCxFQUFNaVosRUFFTi9MLEVBQVF4QyxpQkFBaUIsV0FBWXNSLEdBQVcsR0FFaERILEdBQVEsRUFHUk0sR0FDRCxDQStGQSxPQTlGQUQsRUFBTXBULElBQU0sU0FBU3FPLEVBQU1TLEVBQU1qYixHQVFoQyxHQVBrQixNQUFkNmUsS0FDSDdlLEVBQVVBLEdBQVcsQ0FBQyxHQUNkaUMsU0FBVSxHQUVuQjRjLEVBQWEsS0FFYnJFLEVBQU9sSyxFQUFja0ssRUFBTVMsR0FDdkJpRSxFQUFPLENBQ1ZHLElBQ0EsSUFBSXZiLEVBQVE5RCxFQUFVQSxFQUFROEQsTUFBUSxLQUNsQzZjLEVBQVEzZ0IsRUFBVUEsRUFBUTJnQixNQUFRLEtBQ2xDM2dCLEdBQVdBLEVBQVFpQyxRQUFTc08sRUFBUXNQLFFBQVFlLGFBQWE5YyxFQUFPNmMsRUFBT3BCLEVBQU1uSixPQUFTb0UsR0FDckZqSyxFQUFRc1AsUUFBUWdCLFVBQVUvYyxFQUFPNmMsRUFBT3BCLEVBQU1uSixPQUFTb0UsRUFDN0QsTUFFQ2pLLEVBQVFrUCxTQUFTcUIsS0FBT3ZCLEVBQU1uSixPQUFTb0UsQ0FFekMsRUFDQStFLEVBQU1sQixJQUFNLFdBQVksT0FBT08sQ0FBVyxFQUMxQ1csRUFBTW5KLE9BQVMsS0FDZm1KLEVBQU13QixLQUFPLENBQ1p4YSxLQUFNLFNBQVMvQyxHQU1kLElBS0l4RCxFQUFTZ2hCLEVBQVNGLEVBTGxCaFosRUFBUWlJLEVBQ1h2TSxFQUFNQyxNQUFNMFIsVUFBWSxJQUN4Qm9KLEVBQU8vYSxFQUFNQyxNQUFPLENBQUMsVUFBVyxTQUFVLFdBQVksWUFDdERELEVBQU15QixVQXdEUCxPQTlDSTZDLEVBQU1yRSxNQUFNd2QsU0FBV0MsUUFBUXBaLEVBQU1yRSxNQUFNd2QsWUFDOUNuWixFQUFNckUsTUFBTXFkLEtBQU8sS0FDbkJoWixFQUFNckUsTUFBTSxpQkFBbUIsU0FJL0J6RCxFQUFVd0QsRUFBTUMsTUFBTXpELFFBQ3RCZ2hCLEVBQVV4ZCxFQUFNQyxNQUFNdWQsUUFFdEJGLEVBQU94USxFQUFjeEksRUFBTXJFLE1BQU1xZCxLQUFNdGQsRUFBTUMsTUFBTTJOLFFBQ25EdEosRUFBTXJFLE1BQU1xZCxLQUFPdkIsRUFBTW5KLE9BQVMwSyxFQUNsQ2haLEVBQU1yRSxNQUFNdWQsUUFBVSxTQUFTNWMsR0FDOUIsSUFBSXNGLEVBQ21CLG1CQUFac1gsRUFDVnRYLEVBQVNzWCxFQUFRbGEsS0FBSzFDLEVBQUVtSyxjQUFlbkssR0FDbEIsTUFBWDRjLEdBQXNDLGlCQUFaQSxHQUVLLG1CQUF4QkEsRUFBUTVTLGFBQ3pCNFMsRUFBUTVTLFlBQVloSyxJQWNULElBQVhzRixHQUFxQnRGLEVBQUUrYyxrQkFFVCxJQUFiL2MsRUFBRWdkLFFBQTRCLElBQVpoZCxFQUFFaWQsT0FBMkIsSUFBWmpkLEVBQUVpZCxPQUVwQ2pkLEVBQUVtSyxjQUFjOUMsUUFBcUMsVUFBM0JySCxFQUFFbUssY0FBYzlDLFFBRTNDckgsRUFBRWtkLFNBQVlsZCxFQUFFbWQsU0FBWW5kLEVBQUVvZCxVQUFhcGQsRUFBRXFkLFNBRTlDcmQsRUFBRXVLLGlCQUNGdkssRUFBRXFLLFFBQVMsRUFDWDhRLEVBQU1wVCxJQUFJMlUsRUFBTSxLQUFNOWdCLEdBRXhCLEdBRU04SCxDQUNSLEdBRUR5WCxFQUFNdkgsTUFBUSxTQUFTbFMsR0FDdEIsT0FBT3JDLEdBQWdCLE1BQVBxQyxFQUFjckMsRUFBTXFDLEdBQU9yQyxDQUM1QyxFQUVPOGIsQ0FDUixDLDZCQ2hRQSxJQUFJZixFQUFjLEVBQVEsS0FFMUIvYixFQUFPQyxRQUFVLEVBQVEsSUFBUixDQUEwQyxvQkFBWGhELE9BQXlCQSxPQUFTLEtBQU04ZSxFLDZCQ0Z4RixJQUFJdEssRUFBYyxFQUFRLEtBQ3RCbEQsRUFBVSxFQUFRLEtBQ2xCd04sRUFBYyxFQUFRLEtBQ3RCMWIsRUFBUyxFQUFRLEtBRWpCaU4sRUFBSSxXQUFlLE9BQU9tRSxFQUFZalEsTUFBTUQsS0FBTUUsVUFBVyxFQUNqRTZMLEVBQUVBLEVBQUltRSxFQUNObkUsRUFBRUMsTUFBUWtFLEVBQVlsRSxNQUN0QkQsRUFBRTFLLFNBQVc2TyxFQUFZN08sU0FDekIwSyxFQUFFMlIsU0FBVyxJQUNiM1IsRUFBRXNNLE1BQVFtQyxFQUFZbkMsTUFDdEJ0TSxFQUFFd1AsTUFBUSxFQUFRLEtBQ2xCeFAsRUFBRVAsT0FBUyxFQUFRLElBQ25CTyxFQUFFdEIsT0FBUytQLEVBQVkvUCxPQUN2QnNCLEVBQUVpQixRQUFVQSxFQUFRQSxRQUNwQmpCLEVBQUVvSyxpQkFBbUIsRUFBUSxLQUM3QnBLLEVBQUVxTCxpQkFBbUIsRUFBUSxLQUM3QnJMLEVBQUUwSyxjQUFnQixFQUFRLEtBQzFCMUssRUFBRU8sY0FBZ0IsRUFBUSxLQUMxQlAsRUFBRXZNLE1BQVEsRUFBUSxLQUNsQnVNLEVBQUV3TyxPQUFTLEVBQVEsS0FDbkJ4TyxFQUFFak4sT0FBU0EsRUFBT0EsT0FFbEJMLEVBQU9DLFFBQVVxTixDLDZCQ3ZCakIsSUFBSXlPLEVBQWMsRUFBUSxLQUUxQi9iLEVBQU9DLFFBQVUsRUFBUSxJQUFSLENBQStDLG9CQUFYaEQsT0FBeUJBLE9BQVMsS0FBTThlLEVBQVkvUCxPLDZCQ0Z6RyxJQUFJOUwsRUFBUSxFQUFRLEtBQ2hCOFosRUFBbUIsRUFBUSxLQUUvQmhhLEVBQU9DLFFBQVUsV0FDaEIsSUFBSWMsRUFBUWlaLEVBQWlCeFksTUFBTSxFQUFHQyxXQUl0QyxPQUZBVixFQUFNRyxJQUFNLElBQ1pILEVBQU15QixTQUFXdEMsRUFBTXlNLGtCQUFrQjVMLEVBQU15QixVQUN4Q3pCLENBQ1IsQyxHQ1ZJbWUsRUFBMkIsQ0FBQyxFQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCemIsSUFBakIwYixFQUNILE9BQU9BLEVBQWFwZixRQUdyQixJQUFJRCxFQUFTa2YsRUFBeUJFLEdBQVksQ0FHakRuZixRQUFTLENBQUMsR0FPWCxPQUhBcWYsRUFBb0JGLEdBQVVwZixFQUFRQSxFQUFPQyxRQUFTa2YsR0FHL0NuZixFQUFPQyxPQUNmLENDckJBa2YsRUFBb0JJLEVBQUt2ZixJQUN4QixJQUFJd2YsRUFBU3hmLEdBQVVBLEVBQU95ZixXQUM3QixJQUFPemYsRUFBaUIsUUFDeEIsSUFBTSxFQUVQLE9BREFtZixFQUFvQk8sRUFBRUYsRUFBUSxDQUFFeFksRUFBR3dZLElBQzVCQSxHQ0xSTCxFQUFvQk8sRUFBSSxDQUFDemYsRUFBUzBmLEtBQ2pDLElBQUksSUFBSXRjLEtBQU9zYyxFQUNYUixFQUFvQnZaLEVBQUUrWixFQUFZdGMsS0FBUzhiLEVBQW9CdlosRUFBRTNGLEVBQVNvRCxJQUM1RVUsT0FBTzZiLGVBQWUzZixFQUFTb0QsRUFBSyxDQUFFd2MsWUFBWSxFQUFNakUsSUFBSytELEVBQVd0YyxNQ0ozRThiLEVBQW9CdlosRUFBSSxDQUFDa2EsRUFBS2hoQixJQUFVaUYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLeWIsRUFBS2hoQixHLGdDQ0FsRixTQUFTaWhCLEVBQWdCRCxFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTSSxFQUFRalQsRUFBUWtULEdBQ3ZCLElBQUkvSCxFQUFPclUsT0FBT3FVLEtBQUtuTCxHQUV2QixHQUFJbEosT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJQyxFQUFVdGMsT0FBT3FjLHNCQUFzQm5ULEdBQ3ZDa1QsSUFBZ0JFLEVBQVVBLEVBQVFuSixPQUFPLFNBQVVvSixHQUNyRCxPQUFPdmMsT0FBTzJYLHlCQUF5QnpPLEVBQVFxVCxHQUFLVCxVQUN0RCxJQUNBekgsRUFBSzlRLEtBQUs5RixNQUFNNFcsRUFBTWlJLEVBQ3hCLENBRUEsT0FBT2pJLENBQ1QsQ0FFQSxTQUFTbUksRUFBZXZYLEdBQ3RCLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQXlCLE1BQWhCN0gsVUFBVVcsR0FBYVgsVUFBVVcsR0FBSyxDQUFDLEVBRWhEQSxFQUFJLEVBQ044ZCxFQUFRNVcsR0FBUSxHQUFNekssUUFBUSxTQUFVd0UsR0FDdEMwYyxFQUFnQi9XLEVBQVEzRixFQUFLaUcsRUFBT2pHLEdBQ3RDLEdBQ1NVLE9BQU95YywwQkFDaEJ6YyxPQUFPMGMsaUJBQWlCelgsRUFBUWpGLE9BQU95YywwQkFBMEJsWCxJQUVqRTRXLEVBQVE1VyxHQUFRekssUUFBUSxTQUFVd0UsR0FDaENVLE9BQU82YixlQUFlNVcsRUFBUTNGLEVBQUtVLE9BQU8yWCx5QkFBeUJwUyxFQUFRakcsR0FDN0UsRUFFSixDQUVBLE9BQU8yRixDQUNULENBaUJBLFNBQVMwWCxFQUF5QnBYLEVBQVFxWCxHQUN4QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFFNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFsQk4sU0FBdUNNLEVBQVFxWCxHQUM3QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFDNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFBUyxDQUFDLEVBQ1Y0WCxFQUFhN2MsT0FBT3FVLEtBQUs5TyxHQUc3QixJQUFLbEgsRUFBSSxFQUFHQSxFQUFJd2UsRUFBVzlkLE9BQVFWLElBQ2pDaUIsRUFBTXVkLEVBQVd4ZSxHQUNidWUsRUFBUzVWLFFBQVExSCxJQUFRLElBQzdCMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsSUFHdkIsT0FBTzJGLENBQ1QsQ0FLZTZYLENBQThCdlgsRUFBUXFYLEdBSW5ELEdBQUk1YyxPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlVLEVBQW1CL2MsT0FBT3FjLHNCQUFzQjlXLEdBRXBELElBQUtsSCxFQUFJLEVBQUdBLEVBQUkwZSxFQUFpQmhlLE9BQVFWLElBQ3ZDaUIsRUFBTXlkLEVBQWlCMWUsR0FDbkJ1ZSxFQUFTNVYsUUFBUTFILElBQVEsR0FDeEJVLE9BQU9HLFVBQVU2YyxxQkFBcUIxYyxLQUFLaUYsRUFBUWpHLEtBQ3hEMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FFekIsQ0FFQSxPQUFPMkYsQ0FDVCxDQUVBLFNBQVNnWSxFQUFlQyxFQUFLN2UsR0FDM0IsT0FHRixTQUF5QjZlLEdBQ3ZCLEdBQUl2YSxNQUFNdUQsUUFBUWdYLEdBQU0sT0FBT0EsQ0FDakMsQ0FMU0MsQ0FBZ0JELElBT3pCLFNBQStCQSxFQUFLN2UsR0FDbEMsSUFBSStlLEVBQU8sR0FDUEMsR0FBSyxFQUNMQyxHQUFLLEVBQ0xDLE9BQUszZCxFQUVULElBQ0UsSUFBSyxJQUFpQzRkLEVBQTdCQyxFQUFLUCxFQUFJUSxPQUFPQyxjQUFtQk4sR0FBTUcsRUFBS0MsRUFBR2hRLFFBQVEyRCxRQUNoRWdNLEVBQUs3WixLQUFLaWEsRUFBR2ppQixRQUVUOEMsR0FBSytlLEVBQUtyZSxTQUFXVixHQUg4Q2dmLEdBQUssR0FLaEYsQ0FBRSxNQUFPL00sR0FDUGdOLEdBQUssRUFDTEMsRUFBS2pOLENBQ1AsQ0FBRSxRQUNBLElBQ08rTSxHQUFzQixNQUFoQkksRUFBVyxRQUFXQSxFQUFXLFFBQzlDLENBQUUsUUFDQSxHQUFJSCxFQUFJLE1BQU1DLENBQ2hCLENBQ0YsQ0FFQSxPQUFPSCxDQUNULENBL0JpQ1EsQ0FBc0JWLEVBQUs3ZSxJQWlDNUQsV0FDRSxNQUFNLElBQUlnSyxVQUFVLHVEQUN0QixDQW5Da0V3VixFQUNsRSxDQXFDQSxJQUFJQyxFQUNNLFNBRE5BLEVBRU8sVUFGUEEsRUFHUSxXQUhSQSxFQUlNLFNBRU5DLEVBQWUsU0FBc0JDLEdBQ3ZDLElBQUlDLEVBQUlELEVBQUtDLEVBQ1RDLEVBQVdGLEVBQUtFLFNBQ2hCQyxFQUFZSCxFQUFLRyxVQUNqQkMsRUFBUXpCLEVBQXlCcUIsRUFBTSxDQUFDLElBQUssV0FBWSxjQUt6REssRUFBYXBCLEVBRERpQixFQUZFRSxFQUFNRSxXQUE0QkYsRUFBTUUsV0FBYUYsRUFBTUcsS0FBekNULEVBQWdFQSxHQUd6RCxHQUN2Q1UsRUFBT0gsRUFBVyxHQUNsQkksRUFBVUosRUFBVyxHQUV6QkYsRUFBVSxXQUNSLElBQUlPLEVBQVVGLEVBRVZKLEVBQU1FLFVBQ0pFLElBQVNWLEdBQWlCTSxFQUFNRyxLQUNsQ0csRUFBVVosRUFDRFUsSUFBU1YsR0FBbUJNLEVBQU1HLE9BQzNDRyxFQUFVWixHQUlSVSxJQUFTVixHQUFnQk0sRUFBTUcsS0FDakNHLEVBQVVaLEVBQ0RVLElBQVNWLEdBQWtCTSxFQUFNRyxPQUMxQ0csRUFBVVosR0FJVlksSUFBWUYsR0FDZEMsRUFBUUMsRUFFWixFQUFHLENBQUNOLElBQ0osSUFBSU8sRUFBY1YsRUFBRSxPQUFRLENBQzFCNUgsVUFBVytILEVBQU1RLHVCQUduQixPQUFLUixFQUFNUyxRQUlHTCxJQUFTVixFQUNORyxFQUFFRyxFQUFNaGUsU0FBVW9jLEVBQWUsQ0FBQyxFQUFHNEIsRUFBTyxDQUMzRFMsUUFJQSxTQUFpQjFWLEdBQ2YsT0FBT2lWLEVBQU1TLFFBQVExVixHQUFPc1YsRUFBUUwsRUFBTUUsVUFBWVIsRUFBZ0JBLEVBQ3hFLEdBQ0NVLElBQVNWLEVBQWUsQ0FDekJTLE1BQU0sRUFDTk8sTUFBTSxRQUNKbGYsSUFBYytlLEVBZlRQLEVBQU1FLFdBQWFGLEVBQU1XLFVBQVlYLEVBQU1HLEtBQU9OLEVBQUVHLEVBQU1oZSxTQUFVZ2UsR0FBU08sQ0FnQnhGLEVBa0NJbkssRUFBSSxTQUFXd0ssRUFBS3hHLEdBQ3RCLE9BQU93RyxFQUFJeEcsR0FBSyxFQUFHd0csQ0FDckIsRUFVSUMsRUFBZSxDQUNuQixNQUFPLFFBQVMsT0FBUSxLQUFNLGFBQzlCLFdBQ0EsV0FBWSxTQUFVLFdBQVksV0FBWSxpQkFBa0IsV0FBWSxrQkFVeEVDLEVBQTRCLFNBQW1DamlCLEdBQ2pFLElBQUkrZ0IsRUFBT3RnQixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUM1RXloQixFQUFNbkIsRUFBS21CLElBQ1hDLEVBQVNwQixFQUFLb0IsT0FLZEMsRUFBZUQsRUFBU0EsRUFBT0UsT0FBTzlLLEVBQUcsQ0FBQyxHQUFLLENBQUMsRUFNaEQrSyxHQURZSixFQUFNRixFQUFhak4sT0FBT21OLEdBQU9GLEdBQ3ZCOUwsT0FBTyxTQUFVcU0sR0FDekMsT0FBUUgsRUFBYUcsRUFDdkIsR0FBR0YsT0FBTzlLLEVBQUcsQ0FBQyxHQUNkLE9BQU94VSxPQUFPcVUsS0FBS3BYLEdBQU9xaUIsT0FLMUIsU0FBVU4sRUFBSzFmLEdBQ2IsT0FBT2lnQixFQUFVamdCLEtBQU8wZixFQUFJMWYsR0FBT3JDLEVBQU1xQyxJQUFhMGYsQ0FDeEQsRUFBRyxDQUFDLEVBQ04sRUFPSVMsRUFBYyxTQUFxQnhpQixHQUNyQyxNQUF3QixtQkFBVkEsRUFBdUJBLElBQVVBLENBQ2pELEVBd0JJeWlCLEVBQWUsU0FBc0JsSixHQUN2QyxJQUFJbUosRUFBT2ppQixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssVUFDL0UsT0FuQmdCLFNBQXFCOFksR0FDckMsTUFBTyxDQUNMb0osTUFBT3BKLEVBQVFvSixNQUNmQyxRQUFTckosRUFBUXFKLFFBQ2pCQyxPQUFRdEosRUFBUXNKLE9BQ2hCQyxNQUFPdkosRUFBUXVKLE1BQ2ZDLElBQUt4SixFQUFRd0osSUFFakIsQ0FXU0MsQ0FBWXpKLEdBQVNtSixFQUM5QixFQUVJLEVBQStCLG9CQUFiL2xCLFNBQ2xCLEdBQVksRUFPWnNtQixFQUFPLENBQ1QsVUFBYSxlQUNiLFdBQWMsZ0JBQ2QsYUFBZ0IsZUFDaEIsZ0JBQW1CLHNCQXlFakJDLEVBQW1CLFNBQTBCQyxHQUMvQyxJQUFJOW1CLEVBQVU4bUIsRUFBTTltQixRQUNoQnFWLEVBQVd5UixFQUFNelIsU0FDakIwUixFQUFpQkQsRUFBTUMsZUFDdkJ0bEIsRUFBT3FsQixFQUFNcmxCLEtBQ2J1bEIsRUFBU0YsRUFBTUUsT0FDZmhZLEVBQVc4WCxFQUFNOVgsU0FDakIzTyxFQUFLZ1YsRUFBV3JWLEVBQVFPLGNBQWM4VSxHQUFZclYsRUFFdEQsSUFBS0ssRUFDSCxPQUFPLEVBR1QsSUFBSTRtQixFQUFjM21CLFNBQVMybUIsWUFFM0IsR0FBSUEsRUFBYSxDQUNmLFFBQWUzZ0IsSUFBWDBnQixFQUNGLE9BQU9BLElBQVdDLEVBQVlobUIsaUJBQWlCWixFQUFJMG1CLEdBQWdCRyxpQkFBaUJ6bEIsR0FHdEYsUUFBaUI2RSxJQUFiMEksRUFDRixPQUFzRyxJQUEvRmlZLEVBQVlobUIsaUJBQWlCWixFQUFJMG1CLEdBQWdCRyxpQkFBaUJ6bEIsR0FBTWlNLFFBQVFzQixFQUUzRixDQUVBLE9BQU8sQ0FDVCxFQTBCSW1ZLEVBQW9CLFNBQTJCQyxHQUNqRCxJQUFJQyxFQUFTQyxXQUFXRixLQUErQyxJQUEvQkEsRUFBWTFaLFFBQVEsTUFBZSxJQUFPLEdBQ2xGLE9BQU95USxNQUFNa0osR0FBVSxFQUFJQSxDQUM3QixFQU1JRSxHQUFVLEdBQW1CLGlCQUFrQmpuQixTQUFTa25CLGdCQUV4REMsRUFBa0JGLEVBQVUsQ0FBQyxRQUFTLFdBQWEsQ0FBQyxXQUdwREcsRUFBc0JILEVBQVUsQ0FBQyxXQUFZLFdBQWEsQ0FBQyxXQUUvRCxHQUFJLEVBQVUsQ0FDWixJQUFJSSxFQUFjcm5CLFNBQVNDLGNBQWMsUUFFckNvbkIsR0FDRkEsRUFBWUMsVUFBVS9CLElBQUkwQixFQUFVLFdBQWEsY0FFckQsQ0FPQSxJQUFJTSxFQUFZLENBQUMsRUFzQ2JDLEVBQVksU0FBbUJDLEVBQVdDLEVBQVVDLEdBQ3RESixFQUFVRSxHQUFhRixFQUFVRSxJQUFjLEdBQy9DRixFQUFVRSxHQUFXOWQsS0FBS2dlLEVBL0JiLFNBQWtCQyxHQUMvQixJQUFJQyxFQUFJL2pCLFVBQVVxQixPQUFTLFFBQXNCYSxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxJQUN4RWdrQixFQUFVaGtCLFVBQVVxQixPQUFTLFFBQXNCYSxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUFXeEUsT0FBUyxDQUFDLEVBQ25HeW9CLEdBQU8sRUFDWCxPQUFPLFdBQ0wsSUFBSyxJQUFJQyxFQUFPbGtCLFVBQVVxQixPQUFRb0ssRUFBTyxJQUFJeEcsTUFBTWlmLEdBQU9DLEVBQU8sRUFBR0EsRUFBT0QsRUFBTUMsSUFDL0UxWSxFQUFLMFksR0FBUW5rQixVQUFVbWtCLEdBT3BCRixJQUhJSCxFQUFLL2pCLE1BQU1pa0IsRUFBU3ZZLEdBSzNCd1ksR0FBTyxFQUNQN1UsV0FBVyxXQUNULE9BQU82VSxHQUFPLENBQ2hCLEVBQUdGLEdBRVAsQ0FDRixDQVVvQ0ssQ0FBU1IsRUFBVUMsR0FBU0QsRUFDaEUsRUFPSVMsRUFBYyxTQUFxQlYsRUFBV0MsR0FDaEQsR0FBS0gsRUFBVUUsR0FBZixDQUlBLElBQUl0UyxFQUFRb1MsRUFBVUUsR0FBV3JhLFFBQVFzYSxHQUVyQ3ZTLEdBQVMsR0FDWG9TLEVBQVVFLEdBQVdyTCxPQUFPakgsRUFBTyxFQUxyQyxDQU9GLEVBT0lZLEVBQU8sU0FBYzBSLEVBQVdXLEdBQzdCYixFQUFVRSxJQUlmRixFQUFVRSxHQUFXdm1CLFFBQVEsU0FBVXdtQixHQUNyQyxPQUFPQSxFQUFTVSxFQUNsQixFQUNGLEVBRUksSUFDRjlvQixPQUFPcU8saUJBQWlCLFNBQVUsU0FBVTNKLEdBQzFDLE9BQU8rUixFQUFLLFNBQVUvUixFQUN4QixHQUNBMUUsT0FBT3FPLGlCQUFpQixTQUFVLFNBQVUzSixHQUMxQyxPQUFPK1IsRUFBSyxTQUFVL1IsRUFDeEIsR0FDQTFFLE9BQU9xTyxpQkFBaUIsVUFBVyxTQUFVM0osR0FDM0MsT0FBTytSLEVBQUssVUFBVy9SLEVBQ3pCLEdBQ0FtakIsRUFBZ0JqbUIsUUFBUSxTQUFVdW1CLEdBQ2hDLE9BQU9ub0IsT0FBT3FPLGlCQUFpQjhaLEVBQVcsU0FBVXpqQixHQUNsRCxPQUFPK1IsRUFBSzBSLEVBQVd6akIsRUFDekIsRUFDRixJQWFGLElBQUlxa0IsRUFBUSxTQUFlakUsR0FDekIsSUFBSWtFLEVBQVdsRSxFQUFLeGtCLFFBS2hCMm9CLEVBQVEsR0FNUkMsRUFBVyxTQUFrQnhrQixHQUMvQitSLEVBQUt1UyxFQUFTOVgsS0FBTXhNLEVBQ3RCLEVBRUl5a0IsRUFBWSxTQUFtQm5vQixHQUNqQyxJQUFJc2xCLEVBQU84QyxFQUFTcG9CLEdBQ3BCLE9BQU9pb0IsRUFBTW5iLFFBQVF3WSxFQUN2QixFQXNCSThDLEVBQVcsU0FBa0Jwb0IsR0FFL0IsSUFBSyxJQUFJbUUsRUFBSSxFQUFHQSxFQUFJOGpCLEVBQU1wakIsT0FBUVYsSUFDaEMsR0FBSThqQixFQUFNOWpCLEdBQUdra0IsYUFBZXJvQixFQUMxQixPQUFPaW9CLEVBQU05akIsRUFHbkIsRUFFSW9QLEVBQU8sV0FDTDBVLEVBQU1wakIsU0FDUm9qQixFQUFNLEdBQUc1RCxNQUFPLEdBR2xCNkQsRUFBUyxDQUNQbG9CLEdBQUlpb0IsRUFBTXBqQixPQUFTb2pCLEVBQU0sR0FBR0ksV0FBYSxLQUN6Q25ZLEtBQU0sUUFFVixFQUVJZ1YsRUFBUyxXQUNYLElBekNtQ2xsQixFQUMvQjZVLEVBd0NBd1QsRUFBYTdrQixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUt3a0IsRUFBU00sVUFFMUZOLEVBQVNPLE9BQ1hOLEVBQU1PLFFBQ05qVixNQTFDYSxLQUZYc0IsRUFBUXNULEVBRHVCbm9CLEVBK0N0QnFvQixNQTNDWEosRUFBTW5NLE9BQU9qSCxFQUFPLEdBQ3BCcVQsRUFBUyxDQUNQbG9CLEdBQUlBLEVBQ0prUSxLQUFNLGVBMENaLEVBVUl1WSxFQUFnQixTQUF1QkMsRUFBT0wsR0FDaEQsSUFBSS9DLEVBQU84QyxFQUFTQyxHQUVoQi9DLElBQ0ZBLEVBQUtvRCxNQUFRQSxFQUNicEQsRUFBS3FELFNBQVdELEVBQ2hCUixFQUFTLENBQ1Bsb0IsR0FBSXFvQixFQUNKblksS0FBTXdZLEVBQVEsUUFBVSxZQUc5QixFQWdISUUsRUFuSVksV0FDZFgsRUFBTXBqQixPQUFTLEVBQ2ZxakIsRUFBUyxDQUNQbG9CLEdBQUksS0FDSmtRLEtBQU0sYUFFVixFQWdMQSxNQUFPLENBQ0wwWSxNQUFPQSxFQUNQelYsTUFqSFUsV0FDVixPQUFPOFUsRUFBTXBqQixNQUNmLEVBZ0hFK2YsS0F0RVMsV0FDVCxJQUNJeUQsR0FEWTdrQixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxHQUMxRHhELElBQU1nb0IsRUFBU00sVUFDdENoRCxFQUFPMEMsRUFBU08sT0FBU04sRUFBTXBqQixPQUFTb2pCLEVBQU0sR0FBS0csRUFBU0MsR0FVaEUsT0FSSS9DLElBQ0ZBLEVBQUtWLE1BQU8sR0FHZHNELEVBQVMsQ0FDUGxvQixHQUFJcW9CLEVBQ0puWSxLQUFNLFNBRURvVixFQUFPQSxFQUFLdUQsWUFBY25kLFFBQVFDLFFBQVEwYyxFQUNuRCxFQXlERUssTUEvR1UsV0FDVixJQUFJTCxFQUFhN2tCLFVBQVVxQixPQUFTLFFBQXNCYSxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBS3drQixFQUFTTSxVQUM5RixPQUFPRyxHQUFjLEVBQU1KLEVBQzdCLEVBNkdFbkQsT0FBUUEsRUFDUmIsS0F2R1MsV0FDVCxJQTdIeUN5RSxFQUNyQ2pVLEVBNEhBcVAsRUFBUTFnQixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUM3RXVsQixFQUFZdmxCLFVBQVVxQixPQUFTLFFBQXNCYSxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxDQUFDLEVBQ2pGNmtCLEVBQWFVLEVBQVUvb0IsSUFBTWdvQixFQUFTTSxVQUV0Q2hELEVBckVXLFNBQW9CMEQsRUFBV1gsRUFBWVksR0FDMUQsSUFBSUMsRUFDQUMsRUFDQWpGLEVBQVFxQixFQUFZeUQsR0FjcEJJLEVBQWMsSUFBSTFkLFFBQVEsU0FBVUMsR0FDdEMsT0FBT3VkLEVBQWN2ZCxDQUN2QixHQUNJa2QsRUFBYyxJQUFJbmQsUUFBUSxTQUFVQyxHQUN0QyxPQUFPd2QsRUFBY3hkLENBQ3ZCLEdBZUEsT0FBTzJXLEVBQWUsQ0FBQyxFQUFHMEYsRUFBVSxDQUVsQ0ssV0FBWUEsRUFDWlksTUFBT0EsRUFDUC9FLE1BQU84RSxFQUNQM0UsTUFBTTJELEVBQVNPLE1BQ2ZhLFlBQWFBLEVBQ2JQLFlBQWFBLEVBQ2JRLFFBeENZLFdBU1osT0FSSW5GLEVBQU1tRixTQUNSbkYsRUFBTW1GLFFBQVFoQixHQUdoQkgsRUFBUyxDQUNQbG9CLEdBQUlxb0IsRUFDSm5ZLEtBQU0sWUFFRGdaLEVBQVliLEVBQ3JCLEVBK0JFMUQsUUF0QlksV0FVWixPQVRJVCxFQUFNUyxTQUNSVCxFQUFNUyxRQUFRMEQsR0FHaEJILEVBQVMsQ0FDUGxvQixHQUFJcW9CLEVBQ0puWSxLQUFNLFlBRVJnVixFQUFPbUQsR0FDQWMsRUFBWWQsRUFDckIsR0FhRixDQXFCYWlCLENBQVdwRixFQUFPbUUsRUFEakJVLEVBQVVFLE9BQVNqQixFQUFTTSxXQXVCeEMsT0FyQkFKLEVBQVMsQ0FDUGxvQixHQUFJcW9CLEVBQ0puWSxLQUFNLFNBR0o4WCxFQUFTTyxPQUNYTixFQUFNNWUsS0FBS2ljLEdBRVUsSUFBakIyQyxFQUFNcGpCLFFBQ1IwTyxLQUdlNlUsRUFBU0MsSUE5SWFTLEVBbUpieEQsR0FoSmIsS0FGWHpRLEVBQVFzVCxFQWtKSUUsTUEvSWRKLEVBQU1wVCxHQUFTaVUsSUE2SWJiLEVBQU01ZSxLQUFLaWMsR0FNUkEsRUFBSzhELFdBQ2QsRUE0RUVULFFBN0dZLFdBQ1osSUFBSU4sRUFBYTdrQixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUt3a0IsRUFBU00sVUFDOUYsT0FBT0csR0FBYyxFQUFPSixFQUM5QixFQTJHRXZaLE9BekRXLFNBQWdCb1gsR0FDM0IsSUFBSW5DLEVBQUltQyxFQUFNbkMsRUFDVkMsRUFBV2tDLEVBQU1sQyxTQUNqQkMsRUFBWWlDLEVBQU1qQyxVQUNsQkMsRUFBUXpCLEVBQXlCeUQsRUFBTyxDQUFDLElBQUssV0FBWSxjQUkxRHFELEVBRGF4RyxFQUREaUIsSUFDMkIsR0FDZixHQUU1QkMsRUFBVSxXQUVSLE9BREFpRCxFQUFVYyxFQUFTOVgsS0FBTXFaLEdBQ2xCLFdBQ0wxQixFQUFZRyxFQUFTOVgsS0FBTXFaLEVBQzdCLENBQ0YsRUFBRyxJQUNILElBQUlOLEVBQVEvRSxFQUFNK0UsT0FBU2pCLEVBQVNNLFVBQ2hDa0IsRUFBYXZCLEVBQU1oUCxPQUFPLFNBQVVxTSxHQUN0QyxPQUFPQSxFQUFLakIsTUFBUWlCLEVBQUsyRCxRQUFVQSxDQUNyQyxHQU1BLE9BSklqQixFQUFTeUIsZUFBaUIsR0FBWS9wQixTQUFTa25CLGlCQUNqRGxuQixTQUFTa25CLGdCQUFnQkksVUFBVXdDLEVBQVcza0IsT0FBUyxNQUFRLFVBQVVtakIsRUFBU3lCLGVBRzVFRCxFQUFXM2tCLE9BQ2pCa2YsRUFBRWlFLEVBQVMwQixlQUFnQixDQUMzQnZOLFVBQThCLGNBQW5CK0gsRUFBTTdrQixTQUEyQix5QkFBMkIsdUJBQ3RFbXFCLEVBQVdwaEIsSUFBSSxTQUFVdWhCLEdBQzFCLE9BQU81RixFQUFFaUUsRUFBUzloQixTQUFVb2MsRUFBZSxDQUFDLEVBQUdpRCxFQUFZckIsR0FBUSxDQUNqRTBGLGtCQUFtQmhCLEVBQ25CaUIsUUFBU1osRUFFVGEsc0JBQXVCOUIsRUFBUzdMLFVBQ2hDdU4sZUFBZ0IxQixFQUFTMEIsZUFDekJLLFlBQWEvQixFQUFTK0IsWUFFdEJDLG9CQUFxQkwsRUFBU2hGLFFBQzlCc0Ysb0JBQXFCTixFQUFTTixRQUM5QnpFLEtBQU0rRSxFQUFTL0UsS0FDZnlELFdBQVlzQixFQUFTdEIsV0FDckJqakIsU0FBc0JNLElBQWpCaWtCLEVBQVN2a0IsSUFBb0J1a0IsRUFBU3ZrQixJQUFNdWtCLEVBQVNPLE1BQzFEeEIsTUFBT2lCLEVBQVNqQixNQUNoQnJFLEtBQU1zRixFQUFTdEYsS0FDZnNFLFFBQVNnQixFQUFTaEIsU0FDakJwRCxFQUFZb0UsRUFBU3pGLFFBQzFCLElBckI0QkgsRUFBRWlFLEVBQVN2RCxZQXNCekMsRUFZRixFQUNBc0QsRUFBbUIsWUFBSSxRQUV2QixJQUFJb0MsRUFDSSxPQURKQSxFQUVJLE9BRkpBLEVBR1MsWUFIVEEsRUFJUyxZQUVUQyxFQUF5QixDQUMzQkMsV0FBVyxFQUNYQyxpQkFBaUIsR0FFZkMsRUFBeUIsU0FBZ0NubkIsRUFBT3FKLEdBQ2xFLE9BQVFBLEdBQ04sS0FBSzBkLEVBQ0gsT0FBTzdILEVBQWUsQ0FBQyxFQUFHbGYsRUFBTyxDQUMvQmtuQixpQkFBaUIsRUFDakJELFdBQVcsSUFHZixLQUFLRixFQUNILE9BQU83SCxFQUFlLENBQUMsRUFBR2xmLEVBQU8sQ0FDL0JrbkIsaUJBQWlCLElBR3JCLEtBQUtILEVBQ0gsT0FBTzdILEVBQWUsQ0FBQyxFQUFHbGYsRUFBTyxDQUMvQmtuQixpQkFBaUIsRUFDakJELFdBQVcsSUFHZixLQUFLRixFQUNILE9BQU83SCxFQUFlLENBQUMsRUFBR2xmLEVBQU8sQ0FDL0JrbkIsaUJBQWlCLEVBQ2pCRCxXQUFXLElBR2YsUUFDRSxNQUFNLElBQUk5cUIsTUFBTSwwQkFBMEJ1WSxPQUFPckwsSUFFdkQsRUFjSTRYLEVBQU8sU0FBY21HLEdBQ3ZCLE9BQU9DLEVBQVdELEVBQU0sT0FDMUIsRUFPSTVGLEVBQU8sU0FBYzRGLEdBQ3ZCLE9BQU9DLEVBQVdELEVBQU0sT0FDMUIsRUFRSUMsRUFBYSxTQUFvQkQsRUFBTXBuQixHQUN6QyxJQUFJM0QsRUFBSytxQixFQUFLL3FCLEdBRWQsT0FBS0EsRUFHSSxJQUFJaU0sUUFBUSxTQUFVQyxHQUMzQixJQUFJeEwsRUFBUVYsRUFBR1UsTUFLWHVxQixFQUFnQixFQUFXMXJCLE9BQU9xQixpQkFBaUJaLEdBQU0sQ0FBQyxFQUMxRGtyQixFQUFXSCxFQUFLSSxrQkFBaUNsbEIsSUFBbEI4a0IsRUFBS0csU0FBeUMsSUFBaEJILEVBQUtHLFNBQW9CcEUsRUFBa0JtRSxFQUFjRyxvQkFDdEh4RCxFQUFRbUQsRUFBS00sZUFBMkJwbEIsSUFBZjhrQixFQUFLbkQsTUFBbUMsSUFBYm1ELEVBQUtuRCxNQUFpQmQsRUFBa0JtRSxFQUFjSyxpQkFDMUdDLEVBQWlCUixFQUFLUSxnQkFBa0JOLEVBQWNPLHlCQUV0RFQsRUFBS1UsaUJBQ1B6ckIsRUFBR3VuQixVQUFVL0IsSUFBSXVGLEVBQUtVLGlCQUd4QixJQVNJQyxFQUFjWCxFQUFLWSxRQUFvQixTQUFWaG9CLEdBQTRCb25CLEVBQUtZLFFBQW9CLFNBQVZob0IsRUFUL0QsV0FDWGpELEVBQU0wcUIsbUJBQXFCLE1BQzNCMXFCLEVBQU00cUIsZ0JBQWtCLE1BRXBCUCxFQUFLWSxRQUFpQyxtQkFBaEJaLEVBQUtZLFFBQzdCWixFQUFLWSxRQUVULEVBRXdHLEtBRXBHQyxFQUFRLFdBQ05iLEVBQUthLE9BQStCLG1CQUFmYixFQUFLYSxPQUM1QmIsRUFBS2EsT0FFVCxFQW9CSUMsRUFBZSxXQWpCakJuckIsRUFBTTBxQixtQkFBcUJGLEVBQVcsS0FDdEN4cUIsRUFBTTRxQixnQkFBa0IxRCxFQUFRLEtBRTVCMkQsSUFDRjdxQixFQUFNOHFCLHlCQUEyQkQsR0FHL0JSLEVBQUtlLFlBQ2dCZixFQUFLZ0Isa0JBQW9CL3JCLEdBQy9CdW5CLFVBQW9CLFNBQVY1akIsRUFBbUIsTUFBUSxVQUFVb25CLEVBQUtlLFdBR25FZixFQUFLQyxZQUNQRCxFQUFLQyxhQU1QN1gsV0FBVyxXQUNMeVksR0FDRkEsSUFHRWIsRUFBS1Usa0JBQ1B6ckIsRUFBR3VuQixVQUFVOUIsT0FBT3NGLEVBQUtVLGlCQUN6QnpyQixFQUFHZ3NCLGNBR0w5ZixHQUNGLEVBQUdnZixFQUFXdEQsRUFDaEIsRUFFSXFFLEVBQXVCLFdBQ1IsSUFBYmYsRUFDRlcsSUFFQTFZLFdBQVcwWSxFQUFjLEVBRTdCLEVBRUlILEdBQ0ZBLElBQ0ExckIsRUFBR2dzQixhQUVIN1ksV0FBVyxXQUNUOFksR0FDRixFQUFHLElBRUhBLEdBRUosR0F0Rk9oZ0IsUUFBUUMsU0F3Rm5CLEVBcUJJZ2dCLEVBQXNCLFNBQTZCN0gsR0FDckQsSUFBSThILEVBQTBCOUgsRUFBSzhILHdCQUMvQnRCLEVBQWtCeEcsRUFBS3dHLGdCQUN2QmpDLEVBQWF2RSxFQUFLdUUsV0FDbEJ3RCxFQUFTL0gsRUFBSytILE9BQ2QzSCxFQUFRSixFQUFLSSxNQUNiNEgsRUFBY2hJLEVBQUtnSSxZQUNuQkMsRUFBbUJqSSxFQUFLaUksaUJBQ3hCQyxFQUFrQmxJLEVBQUtrSSxnQkFDdkJULEVBQVl6SCxFQUFLeUgsVUFDakJMLEVBQWtCcEgsRUFBS29ILGdCQUczQixHQUZlcEgsRUFBS21JLFNBRWhCM0IsRUFDRixPQUFPNWUsUUFBUUMsVUFHakJpZ0IsRUFBd0JDLEVBQVMxQixFQUF3QkEsR0FFckQ0QixHQUNGQSxJQUdGLElBQUlwQixFQUFXa0IsRUFBUzNILEVBQU1nSSxhQUFlaEksRUFBTWlJLGFBQy9DOUUsRUFBUXdFLEVBQVMzSCxFQUFNa0ksVUFBWWxJLEVBQU1tSSxVQUN6Q3JCLEVBQWlCYSxFQUFTM0gsRUFBTW9JLG1CQUFxQnBJLEVBQU1xSSxtQkFDM0R4QyxFQUFjN0YsRUFBTTZGLFlBQ3BCeUMsRUFBS1gsRUFBU3hILEVBQU9PLEVBRXJCNkgsRUFBUW5LLEVBQWUsQ0FBQyxFQUFHNEIsRUFBTyxDQUFDLEVBQUc0SCxFQUFhLENBQ3JEUCxVQUFXQSxFQUNYTCxnQkFBaUJBLEVBQ2pCUCxTQUFVQSxFQUNWdEQsTUFBT0EsRUFDUDJELGVBQWdCQSxJQUdkMEIsRUFBUXBLLEVBQWUsQ0FBQyxFQUFHbUssRUFBTyxDQUFDLEVBQUcxQyxHQUFlOEIsRUFBUzlCLEVBQVkxRixLQUFPMEYsRUFBWW5GLE1BQU02SCxRQUFTL21CLEdBU2hILE9BQU84bUIsRUFQS2xLLEVBQWUsQ0FBQyxFQUFHb0ssRUFBTyxDQUFDLEVBQUcsQ0FDeEMvQixjQUE2QmpsQixJQUFuQmduQixFQUFNL0IsU0FBeUIrQixFQUFNL0IsU0FwTDVCLElBcUxuQkMsaUJBQWdDbGxCLElBQW5CZ25CLEVBQU0vQixTQUNuQnRELFdBQXVCM2hCLElBQWhCZ25CLEVBQU1yRixNQUFzQnFGLEVBQU1yRixNQXJMekIsRUFzTGhCeUQsY0FBMEJwbEIsSUFBaEJnbkIsRUFBTXJGLFNBR0RyWixLQUFLLFdBQ3BCLElBQUloTyxFQUFLcW9CLEVBRUwyRCxHQUNGQSxLQUlFSCxFQUFTM0gsRUFBTStGLG9CQUFzQi9GLEVBQU04RixzQkFDNUM2QixFQUFTM0gsRUFBTStGLG9CQUFzQi9GLEVBQU04RixxQkFBcUJocUIsSUFDeEQ2ckIsRUFBUzNILEVBQU1tRixRQUFVbkYsRUFBTVMsV0FDdkNrSCxFQUFTM0gsRUFBTW1GLFFBQVVuRixFQUFNUyxTQUFTM2tCLEdBRzNDNHJCLEVBQXdCQyxFQUFTMUIsRUFBNkJBLEVBQ2hFLEVBQ0YsRUNwakNJd0MsRUFBUyxDQUFDLENBQ1osUUFBVyxlQUNWLENBQ0QsUUFBVyxZQUNWLENBQ0QsUUFBVyxlQUNWLENBQ0QsUUFBVyxnQkFDVixDQUNELFFBQVcsU0FnRlRDLEVBQWUsQ0FBQ0QsRUFBUSxDQUMxQixpQkFBa0IsU0FDbEIsc0JBQXVCLFNBQ3ZCLGNBQWUsV0FpQ2JFLEVBQXdCLENBQUNGLEVBQVEsQ0FDbkMsZ0JBQWlCLFNBQ2pCLDBCQUEyQixTQUMzQixrQkFBbUIsV0ErSWpCRyxFQUFTLENBQ1hDLEtBbEhTLFdBQ1QsSUFBSUMsRUFBTXhwQixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDOUUsTUFBTyxDQUFDLENBQ04sbUJBQW9Cd3BCLEdBQ25CLENBQ0QsZ0JBQWlCQSxHQUNoQixDQUNELGVBQWdCQSxHQUNmLENBQ0QsV0FBWUEsR0FDWCxDQUNELEtBQVFBLEdBQ0MsSUFBUkEsRUFBWSxDQUNiLHFCQUFzQixpQkFDcEIsQ0FBQyxFQUFXLElBQVJBLEVBQVksQ0FDbEIsYUFBYyxpQkFDWixDQUFDLEVBQ1AsRUFrR0VDLFNBNUZhLENBQ2IsV0FBWSxXQUNaLHFCQUFzQixPQUN0QixhQUFjLFFBMEZkQyxpQkFwRnFCLENBQ3JCLFdBQVksV0FDWixxQkFBc0IsT0FDdEIsYUFBYyxRQWtGZEMsVUExRWMsU0FBbUJ0WSxHQUNqQyxNQUFPLENBQ0wsV0FBWUEsRUFDWixlQUFnQkEsRUFDaEIsS0FBUUEsRUFFWixFQXFFRXVZLFNBN0RhLFNBQWtCL3JCLEdBQy9CLE1BQU8sQ0FDTCxvQkFBcUJBLEVBQ3JCLFlBQWFBLEVBRWpCLEVBeURFZ3NCLFdBakRlLFNBQW9CaHNCLEdBQ25DLE1BQU8sQ0FDTCxzQkFBdUJBLEVBQ3ZCLGNBQWVBLEVBRW5CLEVBNkNFc3JCLE9BQVFBLEVBQ1JXLHNCQW5JMEIsQ0FBQ1gsRUFBUSxDQUNuQyxnQkFBaUIsYUFDakIsMEJBQTJCLGVBQzNCLGtCQUFtQixpQkFpSW5CQyxhQUFjQSxFQUNkVyxtQkExSXVCLENBQUNWLEVBQXVCRCxHQTJJL0NDLHNCQUF1QkEsRUFDdkJXLFVBekxjLENBQUNiLEVBQVEsQ0FDdkIsaUJBQWtCLE1BQ2xCLHNCQUF1QixXQUN2QixjQUFlLGFBdUxmYyxtQkF0SnVCLENBQUNkLEVBQVEsQ0FDaEMsZ0JBQWlCLE1BQ2pCLDBCQUEyQixXQUMzQixrQkFBbUIsYUFvSm5CZSxpQkFuUXFCLENBQUNmLEVBQVEsQ0FDOUIscUJBQXNCLE1BQ3RCLHlCQUEwQixNQUMxQixpQkFBa0IsUUFpUWxCZ0Isd0JBM1A0QixDQUFDaEIsRUFBUSxDQUNyQyxxQkFBc0IsY0FDdEIseUJBQTBCLGNBQzFCLGlCQUFrQixnQkF5UGxCaUIsYUFoUmlCLENBQUNqQixFQUFRLENBQzFCLFFBQVcsc0JBQ1YsQ0FDRCxRQUFXLHVCQUNWLENBQ0QsUUFBVyxnQkE0UVhrQixnQkFyTG9CLENBQUNsQixFQUFRLENBQzdCLGdCQUFpQixVQUNqQiwwQkFBMkIsZ0JBQzNCLGtCQUFtQixrQkFtTG5CbUIsWUFqTmdCLENBQUNuQixFQUFRLENBQ3pCLGlCQUFrQixRQUNsQixzQkFBdUIsYUFDdkIsY0FBZSxlQStNZm9CLHFCQTlLeUIsQ0FBQ3BCLEVBQVEsQ0FDbEMsZ0JBQWlCLFFBQ2pCLDBCQUEyQixhQUMzQixrQkFBbUIsZUE0S25CcUIsZUF2UG1CLENBQUNyQixFQUFRLENBQzVCLHFCQUFzQixTQUN0Qix5QkFBMEIsU0FDMUIsaUJBQWtCLFdBcVBsQnNCLHNCQS9PMEIsQ0FBQ3RCLEVBQVEsQ0FDbkMscUJBQXNCLGlCQUN0Qix5QkFBMEIsaUJBQzFCLGlCQUFrQixtQkE2T2xCdUIsV0F2T2UsQ0FBQ3ZCLEVBQVEsQ0FDeEIsZ0JBQWlCLE9BQ2pCLG9CQUFxQixPQUNyQixZQUFhLFNBcU9id0Isa0JBL05zQixDQUFDeEIsRUFBUSxDQUMvQixnQkFBaUIsZUFDakIsb0JBQXFCLGVBQ3JCLFlBQWEsaUJBNk5ieUIsV0EvQ2UsQ0FDZixpQkFBa0IsU0FDbEIscUJBQXNCLFNBQ3RCLGFBQWMsVUE2Q2RDLFFBdkNZLENBQ1osaUJBQWtCLFdBQ2xCLHFCQUFzQixXQUN0QixhQUFjLFlBcUNkQyxVQTFEYyxDQUNkLGlCQUFrQixhQUNsQixxQkFBc0IsYUFDdEIsYUFBYyxjQXdEZEMsWUFoQ2dCLENBQ2hCLGlCQUFrQixVQUNsQixxQkFBc0IsVUFDdEIsYUFBYyxZQWdDaEIsU0FBUyxFQUFnQjFNLEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsRUFBUTdTLEVBQVFrVCxHQUN2QixJQUFJL0gsRUFBT3JVLE9BQU9xVSxLQUFLbkwsR0FFdkIsR0FBSWxKLE9BQU9xYyxzQkFBdUIsQ0FDaEMsSUFBSUMsRUFBVXRjLE9BQU9xYyxzQkFBc0JuVCxHQUN2Q2tULElBQWdCRSxFQUFVQSxFQUFRbkosT0FBTyxTQUFVb0osR0FDckQsT0FBT3ZjLE9BQU8yWCx5QkFBeUJ6TyxFQUFRcVQsR0FBS1QsVUFDdEQsSUFDQXpILEVBQUs5USxLQUFLOUYsTUFBTTRXLEVBQU1pSSxFQUN4QixDQUVBLE9BQU9qSSxDQUNULENBRUEsU0FBUyxFQUFlcFAsR0FDdEIsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBeUIsTUFBaEI3SCxVQUFVVyxHQUFhWCxVQUFVVyxHQUFLLENBQUMsRUFFaERBLEVBQUksRUFDTixFQUFRa0gsR0FBUSxHQUFNekssUUFBUSxTQUFVd0UsR0FDdEMsRUFBZ0IyRixFQUFRM0YsRUFBS2lHLEVBQU9qRyxHQUN0QyxHQUNTVSxPQUFPeWMsMEJBQ2hCemMsT0FBTzBjLGlCQUFpQnpYLEVBQVFqRixPQUFPeWMsMEJBQTBCbFgsSUFFakUsRUFBUUEsR0FBUXpLLFFBQVEsU0FBVXdFLEdBQ2hDVSxPQUFPNmIsZUFBZTVXLEVBQVEzRixFQUFLVSxPQUFPMlgseUJBQXlCcFMsRUFBUWpHLEdBQzdFLEVBRUosQ0FFQSxPQUFPMkYsQ0FDVCxDQWlEQSxJQTJIOEJ5aEIsRUFBSXpxQixFQUpWMFYsRUFScEIrVyxFQVpvQixXQUl0QixNQUFPLENBQ0x6RCxnQkFBaUIsTUFDakJGLG1CQUphcm5CLFVBQVVxQixPQUFTLFFBQXNCYSxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxPQUtqRnluQix5QkFKVXpuQixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssV0FLOUVpckIsbUJBUGVqckIsVUFBVXFCLE9BQVMsUUFBc0JhLElBQWpCbEMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLE1BU3ZGLEVBRUlnckIsRUFyRlcsU0FBa0JFLEVBQU81dEIsR0FHdEMsTUFBYyxTQUFWNHRCLEVBQ0ssQ0FDTEMsYUFBYyxVQUNkeHRCLFNBQVUsVUFDVnl0QixRQUFTLFFBQ1Q3dEIsT0FBUSxPQUNSOHRCLFVBQVcsT0FDWHB1QixXQUFZLFVBSVQsQ0FBQyxDQUNOLHlDQUErQ2lGLElBQVZncEIsRUFBc0IsQ0FDekQscUJBQXNCQSxFQUN0QixxQkFBc0IsV0FDdEJFLFFBQVMsY0FDVEUsVUFBVyxtQkFDVHBwQixHQUNILEVBQWUsQ0FDaEJ2RSxTQUFVLFNBQ1Z3dEIsYUFBYyxXQUNkSSxjQUFlLGFBQ0NycEIsSUFBZjVFLEVBQTJCLENBQzVCK3RCLFVBQVdILEVBQVE1dEIsR0F6QlYwQyxVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssWUEwQjNFa0MsRUFBVyxDQUFDLEVBQWtCLElBQWY1RSxFQUFtQixDQUNwQ0osU0FBVSxlQUNSZ0YsR0FDTixFQXVESThvQixFQS9HTSxXQUNSLElBQ0lRLEdBRFN4ckIsVUFBVXFCLE9BQVMsUUFBc0JhLElBQWpCbEMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQ3pELEtBQ3hCLE1BQU8sQ0FDTG5FLFNBQVUsV0FDVnFDLElBQUtzdEIsRUFDTEMsTUFBT0QsRUFDUEUsT0FBUUYsRUFDUnB0QixLQUFNb3RCLEVBRVYsRUFxR0lSLEdBL0JTLFdBRVgsTUFBTyxDQUNMbnZCLFNBQVUsU0FDVnFDLElBQUssRUFDTHl0QixPQUpXM3JCLFVBQVVxQixPQUFTLFFBQXNCYSxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQU1uRixFQXdDSTRyQixJQUowQjVDLEVBSTZCLFNBQVV6cUIsRUFBUUMsR0FNN0UsSUFBSXF0QixFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQXdCSixTQUFTQyxFQUFVL1MsR0FDakIsT0FBT0EsRUFBSXBiLFFBQVEsWUFBYSxTQUFTb3VCLEVBQUlDLEdBQU0sT0FBT0EsRUFBRy9lLGFBQWMsR0FBR3RQLFFBQVEsSUFBSSxHQUM1RixDQUNBLFNBQVNzdUIsRUFBWWxULEdBQ25CLE9BQU9BLEVBQUlwYixRQUFRLFNBQVUsU0FBU291QixHQUFNLE1BQU8sSUFBTUEsRUFBR3ZmLGFBQWMsRUFDNUUsQ0FDQSxTQUFTMGYsRUFBZUMsRUFBVTF1QixHQUdoQyxPQUZBaXVCLEVBQVVTLEdBQVksR0FDdEJULEVBQVVTLEdBQVkxdUIsSUFDYml1QixFQUFVUyxFQUNyQixDQUNBLFNBQVNDLEVBQWVELEVBQVUxdUIsR0FHaEMsT0FGQWt1QixFQUFhbnVCLFlBQWMsV0FBYTJ1QixFQUFXLElBQU0xdUIsRUFBTyxTQUV0RGt1QixFQUFhN1csTUFBTXVYLFNBQVMsR0FBR0MsUUFBUXBqQixRQUFRekwsRUFDM0QsQ0FDQSxTQUFTOHVCLEVBQW1CSixHQUMxQixPQUFPQSxLQUFZVCxDQUNyQixDQUNBLFNBQVNjLEVBQWMzYixHQUVyQixPQURBOGEsRUFBYW51QixZQUFjcVQsRUFBVyxPQUM3QjhhLEVBQWE3VyxNQUFNdVgsU0FBU3ByQixNQUN2QyxDQXREQWlCLE9BQU82YixlQUFlM2YsRUFBUyxhQUFjLENBQUVYLE9BQU8sSUFrSnRELElBQUlndkIsRUFBVyxDQUdiLENBQ0VuTSxNQUFPLENBQUMsVUFDUjFKLE9BQVEsQ0FBRSxPQUFRLFdBQVksVUFBVyxhQUUzQyxDQUNFMEosTUFBTyxDQUFDLFdBQ1IxSixPQUFPLENBQUMsTUFBTyxhQUFjLFVBQVcsaUJBQWtCLE9BQVEsY0FBZSxPQUFRLGdCQUUzRixDQUNFMEosTUFBTyxDQUFDLFlBQ1IxSixPQUFRLENBQUUsV0FFWixDQUNFMEosTUFBTyxDQUFDLFFBQVMsZUFBZ0IsU0FBVSxhQUFjLFlBQWEsYUFBYyxhQUNwRjFKLE9BQVEsQ0FBQyxpQkFBa0IsaUJBQWtCLGNBQWUsY0FBZSxpQkFTM0U4VixFQUFnQixDQUdsQixjQUFlLFlBQ2YsS0FBUSxXQUdSLGdCQUFrQixnQkFDbEIsYUFBYyxhQUVkLFlBQWEsV0FFYixZQUFhLFlBQ2Isa0JBQW1CLFdBQ25CLE1BQVMscUJBRVBDLEVBQWlCLENBRW5CLFdBQVksTUFDWixhQUFjLFFBRWQsT0FBVSxTQUNWLGVBQWdCLFVBQ2hCLGdCQUFpQixVQUNqQixLQUFRLFdBQ1IsZUFBZ0IsWUFFZEMsRUFBZ0IsQ0FDbEIsZ0JBQWlCLHFCQUNqQixjQUFlLGlCQUNmLGFBQWMsc0JBRWQsYUFBYyxxQkFHZCxZQUFhLG9CQUNiLGNBQWUsb0JBRWYsa0JBQW1CLGdCQUNuQixNQUFTLGtCQUVQQyxFQUFpQixDQUVuQixXQUFZLE1BQ1osYUFBYyxRQUdkLGVBQWdCLGFBQ2hCLGdCQUFpQixXQTBNbkIsSUE4TklDLEVBMU9xQkMsRUFZckJDLEVBQVcsQ0FBQyxFQUVaQyxFQUFpQiwwQkE4QnJCLFNBQVNDLEVBQWMxRixFQUFRMkYsRUFBUzFGLEdBQ3RDLE9BQU8sSUFBSTViLE9BQU8yYixFQUFTLE1BQVEyRixFQUFRNWhCLEtBQUssS0FBTyxJQUFNa2MsRUFDL0QsQ0FFQSxTQUFTMkYsRUFBVzVGLEVBQVEyRixFQUFTMUYsR0FDbkMsT0FBTyxJQUFJNWIsT0FDTCwrRUFDSTJiLEVBQVMsT0FDVDJGLEVBQVE1aEIsS0FBSyxLQUNiLEtBQU9rYyxFQUNYLEtBRVIsQ0FRQSxTQUFTNEYsRUFBUU4sRUFBUWxiLEVBQU1zYSxFQUFVMXVCLEdBQ3ZDLEdBQXdCLGlCQUFiMHVCLEdBQWdELE1BQXZCQSxFQUFTbFQsT0FBTyxHQUFZLE9BQU9wSCxFQUFLc2EsRUFBVTF1QixHQUV0RixHQUF1QixpQkFBVkEsR0FBdUMsaUJBQVZBLEVBQ3hDLE9BQU9vVSxFQUFLa2IsRUFBTzd4QixXQUFXaXhCLElBQWFZLEVBQU9PLFlBQVluQixHQUFXMXVCLEdBSTNFLEdBREFBLEdBQWdCLEdBQ1pzdkIsRUFBT1EsUUFDVCxHQUFpQixZQUFicEIsSUFBcUMsU0FBVjF1QixHQUE4QixnQkFBVkEsR0FFakQsWUFEQW9VLEVBQUssY0FBZXBVLFFBR2pCLEdBQUlzdkIsRUFBT1MsWUFBYSxDQVM3QixHQUFpQixjQUFickIsRUFNRixZQUxBMXVCLEVBQU02VCxNQUFNLE9BQU90VSxRQUFRLFNBQVNnSCxHQUU5QkEsRUFBRWtGLFFBQVEsU0FBVyxFQUFHbWtCLEVBQVFOLEVBQVFsYixFQUFNLFlBQWE3TixHQUNqRCxLQUFOQSxHQUFVcXBCLEVBQVFOLEVBQVFsYixFQUFNLGlCQUFrQjdOLEVBQzVELEdBRUssR0FBaUIsbUJBQWJtb0IsRUFHVCxPQUZBdGEsRUFBS2tiLEVBQU83eEIsV0FBVyxjQUFldUMsRUFBTXlMLFFBQVEsV0FBYSxFQUFJLGFBQWUsb0JBQ3BGMkksRUFBS2tiLEVBQU83eEIsV0FBVyxpQkFBa0J1QyxFQUFNeUwsUUFBUSxhQUFlLEVBQUksVUFBWSxTQUcxRixDQU1HNmpCLEVBQU9VLFNBQXdCLG9CQUFidEIsR0FBNEMsU0FBVjF1QixFQUNyRG9VLEVBQUssMEJBQTJCcFUsR0FFaENvVSxFQUNFa2IsRUFBTzd4QixXQUFXaXhCLElBQWFZLEVBQU9PLFlBQVluQixHQUNsRFksRUFBT1csU0FBU2p3QixFQUFPMHVCLEdBRzdCLENBR0EsU0FBU3dCLEVBQWVaLEdBQ3RCLElBQUlqYixFQUFTaWIsRUFBT2piLE9BTXBCaWIsRUFBT08sWUFBY1AsRUFBT08sYUFBZSxTQUFTcndCLEdBQ2xELElBQUkyd0IsRUFDSixPQUFPYixFQUFPN3hCLFdBQVcrQixHQUN2QjJ1QixFQUFrQjN1QixLQUNqQjJ1QixFQUFrQmdDLEVBQVc5YixFQUFTN1UsR0FDckNBLEVBQU8yd0IsQ0FDYixFQU1BLElBQUlDLEVBQW1CWCxFQUFhLEdBQUlILEVBQU9lLGFBQWMsa0JBQ3pEQyxFQUFrQlgsRUFBVSxHQUFJTCxFQUFPZSxhQUFjLGtCQUNyREUsRUFBbUIsU0FBUzNxQixFQUFPd04sR0FDckMsT0FBbUIsTUFBWkEsRUFBbUJrYyxFQUFPa0IsWUFBWXBkLEdBQVl4TixDQUMzRCxFQUNBMHBCLEVBQU9tQixZQUFjLFNBQVNyZCxHQUM1QixPQUFPZ2QsRUFBaUI5aEIsS0FBSzhFLEdBQVlBLEVBQVNsVCxRQUFRb3dCLEVBQWlCQyxHQUFvQm5kLENBQ2pHLEVBUUEsSUFBSXNkLEVBQWVwQixFQUFPcUIsVUFBVWxsQixRQUFRLG9CQUFzQixFQUM5RG1sQixFQUFtQixzQkFDbkJDLEVBQWtCLHFFQUNsQkMsRUFBbUIsU0FBVWxyQixFQUFPbXJCLEVBQU9DLEVBQVVDLEdBQ3ZELE9BQU9GLEVBQVFDLEdBQVksR0FBR0MsR0FBTyxLQUN2QyxFQUdJQyxJQUFpQjVCLEVBQU9xQixVQUFVbnRCLE9BQ2xDMnRCLEVBQW9CMUIsRUFBYSxrQkFBbUJILEVBQU9xQixVQUFXLFdBQ3RFUyxFQUFtQnpCLEVBQVUsZ0JBQWlCTCxFQUFPcUIsVUFBVyxlQUNwRSxTQUFTVSxFQUFrQnpyQixFQUFPMm9CLEVBQUkrQyxHQUNwQyxPQUFPL0MsRUFBS2xhLEVBQVNpZCxDQUN2QixDQUlBLElBQUlDLEVBQXlCLGlCQUN6QkMsRUFBMEIsU0FBUzVyQixFQUFPcEcsR0FDNUMsT0FBTzh2QixFQUFPN3hCLFdBQVcrQixJQUFTOHZCLEVBQU9PLFlBQVlyd0IsRUFDdkQsRUFFQTh2QixFQUFPVyxTQUFXLFNBQVVqd0IsRUFBTzB1QixHQUNqQyxJQUFJemIsRUFDSixPQUFzQixNQUFsQnFjLEVBQU9tQyxTQUE2QixZQUFWenhCLEVBQTRCc3ZCLEVBQU9tQyxTQUU3RG5DLEVBQU9vQyxjQUFnQnplLEdBQU9xYyxFQUFPTixTQUFTTixJQUFhYSxHQUFVdnZCLE1BRXpFaVQsRUFBTWpULEVBRUZzdkIsRUFBT3FDLGdCQUFnQmhmLGVBQWUrYixLQUN4Q3piLEdBQStCLElBQXhCalQsRUFBTXlMLFFBQVEsS0FDbkJ6TCxFQUFNRSxRQUFRcXhCLEVBQXdCQyxHQTVKOUMsU0FBb0J4eEIsR0FHbEIsSUFGQSxJQUF5Q3NHLEVBQXJDK00sRUFBVSxHQUFJSixFQUFNLEdBQUlLLEVBQVUsRUFFL0JoTixFQUFJa3BCLEVBQWVqYyxLQUFLdlQsSUFFN0IsT0FBUXNHLEVBQUUsSUFDVixJQUFLLElBQUtnTixJQUFXLE1BQ3JCLElBQUssSUFBS0EsSUFBVyxNQUNyQixJQUFLLElBQUssR0FBSUEsRUFBUyxNQUFPRCxFQUFRckwsS0FBSzFCLEVBQUVrTixPQUcvQyxJQUFLbE4sRUFBSStNLEVBQVE3UCxPQUFROEMsS0FDdkIyTSxFQUFJUSxRQUFRelQsRUFBTWdMLE1BQU1xSSxFQUFRL00sR0FBSyxJQUNyQ3RHLEVBQVFBLEVBQU1nTCxNQUFNLEVBQUdxSSxFQUFRL00sSUFHakMsT0FEQTJNLEVBQUlRLFFBQVF6VCxHQUNMaVQsQ0FDVCxDQTRJUTJlLENBQVc1eEIsR0FBTytHLElBQUksU0FBU1IsR0FDN0IsT0FBT0EsRUFBRXJHLFFBQVFxeEIsRUFBd0JDLEVBQzNDLEdBQUcxakIsS0FBSyxNQUdSb2pCLEdBQWdCQyxFQUFrQjdpQixLQUFLdE8sS0FDckMwd0IsR0FBZ0JFLEVBQWlCdGlCLEtBQUt0TyxLQUN4Q2lULEVBQU1BLEVBQUkvUyxRQUFRMndCLEVBQWlCQyxJQUVyQzdkLEVBQU1BLEVBQUkvUyxRQUFRa3hCLEVBQWtCQyxLQWhCbURwZSxFQW1CM0YsRUFLQSxJQW1CSTRlLEVBQWNDLEVBbkJkQyxFQUFvQix3REFDcEJDLEVBQ0YxQyxFQUFPMkMsY0FBZ0IsU0FBU3ZuQixFQUFHbEwsRUFBTXlXLEdBQU8sT0FBT3FaLEVBQU83eEIsV0FBVytCLEdBQVEsSUFBTXlXLENBQUssRUFDNUZxWixFQUFPNEMsc0JBQXdCLFNBQVN4bkIsRUFBR2xMLEVBQU15VyxHQUFPLE9BQU9xWixFQUFPN3hCLFdBQVcrQixHQUFRLElBQU15WCxLQUFLa2IsTUFBWSxHQUFObGMsR0FBWSxLQUFLLEVBQzNILFNBQVN2TCxFQUFHbEwsRUFBTXlXLEdBQU8sT0FBT3pXLEVBQU8sSUFBTXlYLEtBQUtrYixNQUFjLEdBQVJsYyxHQUFhLEtBQUssRUFHNUVxWixFQUFPOEMsa0JBQXNDLElBQW5COUMsRUFBTytDLFFBQy9CLFNBQVNwVixHQUFJLE9BQU9BLENBQUMsRUFDckIsU0FBVTVOLEdBQ1IsT0FBb0MsSUFBNUJBLEVBQU81RCxRQUFRLFFBQ3JCNEQsRUFBT25QLFFBQVE2eEIsRUFBbUJDLEdBQ2xDM2lCLENBQ0osRUFPRixJQUFJaWpCLEVBQXdCLFNBQVU1RCxFQUFVMXVCLEdBQzlDNnhCLEVBQWVuRCxFQUNmb0QsRUFBZ0I5eEIsQ0FDbEIsRUFFSXV5QixFQUEyQiwyaEJBQy9CLFNBQVNDLEVBQXlCNXNCLEVBQU9wRyxFQUFNUSxHQUU3QyxPQURBNHZCLEVBQVFOLEVBQVFnRCxFQUF1Qjl5QixFQUFNUSxHQUN0QyxJQUFNNnhCLEVBQWUsSUFBTUMsQ0FDcEMsQ0FDQXhDLEVBQU9tRCxvQkFBc0IsU0FBU3BqQixHQUNwQyxPQUFPQSxFQUFPblAsUUFBUXF5QixFQUF5QkMsRUFDakQsQ0FDRixDQUtFbkQsRUFsUk8sQ0FDTHFELFFBQVMsQ0FBQyxFQUNWQyxZQUFZLEVBQ1pOLFFBQVMsS0FDVFgsYUFBYSxFQUNiTyxlQUFlLEVBQ2ZDLHVCQUF1QixFQUN2QlUsY0FBYyxFQUNkQyxXQUFXLEVBQ1hULGlCQUFrQixLQUNsQkssb0JBQXFCLEtBQ3JCNUMsWUFBYSxLQUNiWSxZQUFhLEtBQ2JSLFNBQVUsS0FDVkYsYUFBYSxFQUNiK0MsYUFBYSxFQUNibkMsVUFBVyxHQUNYYyxRQUFTLEtBQ1QzQixRQUFRLEVBQ1JkLFNBQVUsQ0FBQyxFQUNYNUwsWUFBYSxLQUNiL08sT0FBUSxHQUNSMGUsU0FBVSxHQUNWQyxPQUFRLEdBQ1J2MUIsV0FBWSxDQUFDLEVBQ2I0eUIsYUFBYyxHQUNkRyxZQUFhLENBQUMsRUFDZG1CLGdCQUFpQixDQUNmLFdBQWMsRUFDZCxzQkFBdUIsRUFDdkIsY0FBZSxHQUVqQjNCLFNBQVMsR0FtUHFCLG1CQUFyQmh4QixtQkE5T1lzd0IsRUE4T3FDRCxFQTduQjVEckIsRUFBWWh2QixpQkFBaUJYLFNBQVNrbkIsZ0JBQWlCLE1BQ3ZEMEksRUFBWTV2QixTQUFTSyxjQUFjLE9BQU9JLE1BQzFDb3ZCLEVBQWU3dkIsU0FBU2tuQixnQkFBZ0IxbUIsWUFBWVIsU0FBU0ssY0FBYyxVQUMzRTB2QixFQUFnQkssRUFDaEJOLEVBQW9CVyxFQUNoQixXQUFZYixLQUFlLFlBQWFBLEtBRTFDRyxFQUFnQixTQUFTTSxFQUFVMXVCLEdBQVEsT0FBT3l1QixFQUFlSixFQUFVSyxHQUFXMXVCLEVBQU0sRUFDNUZtdUIsRUFBb0IsU0FBU08sR0FBVyxPQUFPSSxFQUFtQlQsRUFBVUssR0FBVSxHQWdSMUYsU0FBc0JZLEdBQ3BCLElBQUkyRCxFQUFpQixDQUFDLEVBTXRCLFNBQVNDLEVBQVV4RSxHQUNqQixHQUEwQixNQUF2QkEsRUFBU2xULE9BQU8sR0FBWSxDQUM3QixJQUFJbkgsRUFBU3FhLEVBQVM3YSxNQUFNLEtBQUssR0FHakNvZixFQUFlNWUsS0FBWTRlLEVBQWU1ZSxJQUFXLENBQ3ZELENBQ0YsQ0FHQSxHQUFHMlosR0FBYUEsRUFBVXhxQixPQUFTLEVBQ2pDLElBQUksSUFBSVYsRUFBRSxFQUFHQSxFQUFFa3JCLEVBQVV4cUIsT0FBUVYsSUFDL0Jvd0IsRUFBVWxGLEVBQVVsckIsU0FHdEIsSUFBSSxJQUFJNHJCLEtBQVlWLEVBQ2xCa0YsRUFBVTFFLEVBQVlFLElBSTFCLElBQUlxRSxFQUFXLEdBQ2YsSUFBSyxJQUFJOVYsS0FBS2dXLEVBQWdCRixFQUFTL3FCLEtBQUtpVixHQUM1QzhWLEVBQVNJLEtBQUssU0FBU3pyQixFQUFFc0wsR0FBSSxPQUFPaWdCLEVBQWVqZ0IsR0FBS2lnQixFQUFldnJCLEVBQUUsR0FFekU0bkIsRUFBT3lELFNBQVdBLEVBQVNoc0IsSUFBSSxTQUFTa1csR0FBRyxNQUFPLElBQU1BLEVBQUksR0FBRyxHQUMvRHFTLEVBQU9qYixPQUFTaWIsRUFBT3lELFNBQVMsSUFBTSxHQUdsQ2hFLEVBQWMseUNBQXlDTyxFQUFPeUQsU0FBUy9xQixLQUFLLFFBQ2hGc25CLEVBQU8wRCxPQUFTM0UsRUFBVWlCLEVBQU9qYixPQUNuQyxDQXFGRStlLENBQWE5RCxHQWpGZixTQUF5QkEsR0FDdkIsSUFBSWxjLEVBQVUrYyxFQUNkLFNBQVNrRCxFQUFlamdCLEdBQ3RCLE9BQU9BLEVBQVNsVCxRQUFRLE9BQVEsU0FBU291QixHQUFNLE9BQU9BLEVBQUtnQixFQUFPamIsTUFBTyxFQUMzRSxDQUVBLEdBQXNCLEtBQWxCaWIsRUFBT2piLE9BQVgsQ0FDQSxJQUFJaWYsRUFBWSxDQUNkLFlBQWEsS0FDYixhQUFjLEtBQ2QsY0FBZSxLQUNmLGVBQWdCLGNBRWhCLGdCQUFpQixLQUNqQixlQUFnQixnQkFDaEIsc0JBQXVCLGdCQUN2QixxQkFBc0IsZ0JBQ3RCLGFBQWMsS0FDZCxjQUFlLEtBQ2YsY0FBZSxNQUlqQixJQUFLbGdCLEtBQVlrZ0IsRUFDZm5ELEVBQVdrRCxFQUFlamdCLElBQ3RCMmIsRUFBY3VFLEVBQVVsZ0IsSUFBYUEsSUFBYTJiLEVBQWNvQixLQUNsRWIsRUFBT3NELGNBQWUsRUFDdEJ0RCxFQUFPZSxhQUFhcm9CLEtBQUtzckIsRUFBVWxnQixJQUFhQSxHQUNoRGtjLEVBQU9rQixZQUFZOEMsRUFBVWxnQixJQUFhQSxHQUFZK2MsRUF0QmhDLENBeUI1QixDQW1ERW9ELENBQWdCakUsR0FsV2xCLFNBQXVCQSxHQUNyQixHQUFzQixLQUFsQkEsRUFBT2piLE9BQVgsQ0FDQSxJQUFJcWUsRUFBVSxDQUNaLFVBQWEsT0FDYixTQUFZLEtBQ1osU0FBWSxlQUlkLElBQUksSUFBSXRkLEtBQVVzZCxFQUVoQixJQURBLElBQUlwa0IsRUFBTzhHLEVBQVMsS0FBT3NkLEVBQVF0ZCxJQUFXLElBQ3JDdFMsRUFBSXdzQixFQUFPeUQsU0FBU3Z2QixPQUFRVixNQUM5QmlzQixFQUFjLElBQU16Z0IsSUFBU3lnQixFQUFjLElBQU1PLEVBQU95RCxTQUFTandCLEdBQUt3TCxLQUV6RWdoQixFQUFPcUQsWUFBYSxFQUNwQnJELEVBQU9vRCxRQUFRLElBQU10ZCxHQUFVLElBQU1rYSxFQUFPeUQsU0FBU2p3QixHQUFLc1MsR0FNaEVrYSxFQUFPK0MsUUFBVTFELEVBQWUsYUFBYyxTQUU5Q1csRUFBTzJDLGNBQWdCdEQsRUFBZVcsRUFBT2piLE9BQVMscUJBQXNCLEtBRTVFaWIsRUFBTzRDLHNCQUF3QnZELEVBQWVXLEVBQU9qYixPQUFTLHFCQUFzQixRQUVoRmliLEVBQU8yQyxlQUFpQjNDLEVBQU80Qyx5QkFDakM1QyxFQUFPN3hCLFdBQXVCLFdBQUk2eEIsRUFBT2piLE9BQVMscUJBQ2xEaWIsRUFBTzd4QixXQUFXLGtCQUFvQjZ4QixFQUFPamIsT0FBUyx5QkFDdERpYixFQUFPN3hCLFdBQVcsa0JBQW9CNnhCLEVBQU9qYixPQUFTLHlCQUNsRHNhLEVBQWUsT0FBU1csRUFBT2piLE9BQVMscUJBQXNCLE9BRWhFaWIsRUFBTzd4QixXQUFXLGtCQUFvQixPQUFTNnhCLEVBQU9qYixPQUFTLHFCQUMvRGliLEVBQU83eEIsV0FBVyxrQkFBb0IsT0FBUzZ4QixFQUFPamIsT0FBUyxzQkFqQ3pDLENBb0M1QixDQThURW1mLENBQWNsRSxHQTlMaEIsU0FBd0JBLEdBQ3RCLEdBQStCLElBQTNCQSxFQUFPeUQsU0FBU3Z2QixPQUFwQixDQUdBLElBQUssSUFBSVYsRUFBSSxFQUFHQSxFQUFJa3NCLEVBQVN4ckIsT0FBUVYsSUFBSyxDQUd4QyxJQUZBLElBRWdCMndCLEVBRloxc0IsRUFBTSxDQUFDLEVBQUcybkIsRUFBV00sRUFBU2xzQixHQUFHK2YsTUFBTSxHQUVsQzlhLEVBQUksRUFBWTByQixFQUFVekUsRUFBU2xzQixHQUFHcVcsT0FBT3BSLEdBQUlBLElBQ3hELElBQUssSUFBSStLLEVBQUl3YyxFQUFPeUQsU0FBU3Z2QixPQUFRc1AsTUFFaENzYixFQUFjTSxFQUFVK0UsSUFDekJyRixFQUFjTSxFQUFVWSxFQUFPeUQsU0FBU2pnQixHQUFLMmdCLEtBRTdDbkUsRUFBT29DLGFBQWMsRUFDckIzcUIsRUFBSTBzQixHQUFXbkUsRUFBT3lELFNBQVNqZ0IsR0FBSzJnQixHQUsxQyxJQUFLMXJCLEVBQUksRUFBRzJtQixFQUFXTSxFQUFTbHNCLEdBQUcrZixNQUFNOWEsR0FBSUEsSUFDM0N1bkIsRUFBT04sU0FBU04sR0FBWTNuQixDQUVoQyxDQUNBLEdBQUl1b0IsRUFBT04sU0FBU3pCLFNBQVcrQixFQUFPTixTQUFTekIsUUFBUW1HLFVBQVl0RixFQUFjLFVBQVcsUUFLMUYsSUFBS3RiLEtBSEx3YyxFQUFPTixTQUFTekIsUUFBUTdCLEtBQU80RCxFQUFPTixTQUFTekIsUUFBUW1HLFFBQ3ZEcEUsRUFBT04sU0FBU3pCLFFBQVEsZUFBaUIrQixFQUFPTixTQUFTekIsUUFBUSxrQkFDakUrQixFQUFPd0QsYUFBYyxFQUNYM0QsRUFDUkcsRUFBTzd4QixXQUFXcVYsR0FBS3FjLEVBQWNyYyxHQUNyQ3djLEVBQU9OLFNBQVNsYyxHQUFLc2MsT0FFbEIsR0FDTEUsRUFBT04sU0FBU3pCLFNBQ2hCK0IsRUFBT04sU0FBU3pCLFFBQVFvRyxNQUN2QnZGLEVBQWMsVUFBVyxVQUN6QkEsRUFBYyxVQUFXa0IsRUFBT2piLE9BQVMsUUFNMUMsSUFBS3ZCLEtBSEx3YyxFQUFPTixTQUFTekIsUUFBUTdCLEtBQU80RCxFQUFPTixTQUFTekIsUUFBUW9HLElBQ3ZEckUsRUFBT04sU0FBU3pCLFFBQVEsZUFBaUIrQixFQUFPTixTQUFTekIsUUFBUSxjQUNqRStCLEVBQU9TLGFBQWMsRUFDWGQsRUFDUkssRUFBTzd4QixXQUFXcVYsR0FBS3djLEVBQU9qYixPQUFTNGEsRUFBY25jLEdBQ3JEd2MsRUFBT04sU0FBU2xjLEdBQUtvYyxPQUd2QkksRUFBT04sU0FBU3pCLFNBQ2YrQixFQUFPTixTQUFTekIsUUFBUW9HLEtBQ3hCckUsRUFBT04sU0FBU3pCLFFBQVE3QixNQUN4QjRELEVBQU9OLFNBQVN6QixRQUFRbUcsU0FDeEJ0RixFQUFjLFVBQVcsVUFFMUJrQixFQUFPUSxRQUFTLElBR2YxQixFQUFjLFFBQVMsWUFDeEJBLEVBQWMsUUFBU2tCLEVBQU9qYixPQUFTLGFBR3ZDaWIsRUFBT21DLFFBQVVuQyxFQUFPamIsT0FBUyxVQTNERCxDQTZEcEMsQ0FpSUV1ZixDQUFldEUsR0EzVGpCLFNBQXlCQSxHQUV2QixHQUFzQixLQUFsQkEsRUFBT2piLE9BQVgsQ0FDQSxJQUFJc2MsRUFBWSxDQUNkLGtCQUFtQixDQUNqQmpDLFNBQVUsbUJBQ1ZyZixPQUFRLGFBRVYsS0FBUSxDQUNOcWYsU0FBVSxRQUNWcmYsT0FBUSxZQUVWLFFBQVcsQ0FDVHFmLFNBQVUsbUJBQ1ZyZixPQUFRLFFBRVYsYUFBYyxDQUNacWYsU0FBVSxrQkFDVnJmLE9BQVEsZ0NBU1osSUFBSyxJQUFJNFcsS0FOVDBLLEVBQVUsNkJBQ1ZBLEVBQVUsNkJBQ1ZBLEVBQVUsbUJBQ1ZBLEVBQVUsbUJBR09BLEVBQVcsQ0FDMUIsSUFBSXJpQixFQUFPcWlCLEVBQVUxSyxHQUNuQnlJLEVBQVdwZ0IsRUFBS29nQixTQUNoQjF1QixFQUFRaW1CLEVBQU8sSUFBTTNYLEVBQUtlLE9BQVMsS0FFaEMrZSxFQUFjTSxFQUFVMXVCLElBQVVvdUIsRUFBY00sRUFBVVksRUFBT2piLE9BQVNyVSxJQUU3RXN2QixFQUFPcUIsVUFBVTNvQixLQUFLaWUsRUFFMUIsQ0FsQzBCLENBbUM1QixDQXVSRTROLENBQWdCdkUsR0FwRGxCLFNBQTRCQSxJQUNyQmxCLEVBQWMsa0JBQW1CLFNBQVdBLEVBQWMsMEJBQTJCLFVBQVNrQixFQUFPVSxTQUFVLEdBQ25ILENBQUMsa0JBQW1CLGtCQUFtQixvQkFBcUIsb0JBQXFCLGVBQWV6d0IsUUFBUSxTQUFTQyxJQUM1RzJ1QixFQUFrQjN1QixJQUFTMnVCLEVBQWtCLFdBQWEzdUIsS0FBTzh2QixFQUFPN3hCLFdBQVcrQixHQUFRLFdBQWFBLEVBQzlHLEVBQ0YsQ0FnREVzMEIsQ0FBbUJ4RSxHQTNZSyxvQkFBYmp4QixVQUEwQkEsU0FBU2tuQixnQkFBZ0IvbUIsWUFBWTB2QixHQUcxRUYsRUFBWUUsRUFBZSxNQSttQjNCZ0MsRUFBZWIsR0E2Q2pCMXVCLEVBQVFvekIsYUF6Q1IsU0FBU0EsSUFDUCxJQUFJekUsRUFBU0QsRUFDVDJFLEVBQVEsR0FDWixNQUFPLENBQ0w1cEIsSUFBSyxDQUNINnBCLFlBQWEsU0FBU2xnQixHQU1wQixPQUwwQixJQUF0QmlnQixFQUFNdm9CLFFBQVFzSSxLQUNoQm1jLEVBQWVuYyxHQUNmaWdCLEVBQU1oc0IsS0FBSytMLElBRWJ1YixFQUFTdmIsRUFDRmdnQixDQUNULEdBRUZuYyxPQUFRLFNBQVMxRixHQUNmLE1BQU8sQ0FDTGtELE9BQVEsU0FBU0ksRUFBTVEsRUFBTTNHLEVBQVE2a0IsR0FDbkNoaUIsRUFBS2tELE9BQ0hrYSxFQUFPcUQsWUFBY3JELEVBQU9vRCxRQUFRbGQsSUFBU0EsRUFDN0NRLEVBRVcsV0FBVFIsRUFBdUI4WixFQUFPOEMsaUJBQWlCL2lCLEdBQ3RDLGNBQVRtRyxFQUF1QjhaLEVBQU9tRCxvQkFBb0JwakIsR0FDbERBLEVBRUY2a0IsRUFFSixFQUNBeGYsS0FBTSxTQUFTZ2EsRUFBVTF1QixHQUN2QjR2QixFQUFRTixFQUFRcGQsRUFBS3dDLEtBQU1nYSxFQUFVMXVCLEVBQ3ZDLEVBQ0F3VixLQUFNLFNBQVNwQyxHQUNibEIsRUFBS3NELEtBQ0g4WixFQUFPc0QsYUFBZXRELEVBQU9tQixZQUFZcmQsR0FBWUEsRUFFekQsRUFFSixFQUVKLENBR0EsRUE1ckJrQytYLEVBQTFCenFCLEVBQVMsQ0FBRUMsUUFBUyxDQUFDLEdBQWdCRCxFQUFPQyxTQUFVRCxFQUFPQyxVQUw3Q3lWLEVBbXNCVjJYLEtBbHNCRDNYLEVBQUUrSixZQUFjMWIsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLcVIsRUFBRyxZQUFhQSxFQUFXLFFBbXNCN0YsSUFHSStkLEdBQU0sSUFBSSxFQUgwQnBHLEdBQWdDZ0csY0FLcEVLLEdBQVcsZ0JBYVh4USxHQUFNLFNBQWFqbEIsR0FDckIsSUFBSyxJQUFJMG5CLEVBQU9sa0IsVUFBVXFCLE9BQVE2d0IsRUFBUyxJQUFJanRCLE1BQU1pZixFQUFPLEVBQUlBLEVBQU8sRUFBSSxHQUFJQyxFQUFPLEVBQUdBLEVBQU9ELEVBQU1DLElBQ3BHK04sRUFBTy9OLEVBQU8sR0FBS25rQixVQUFVbWtCLEdBRy9CLE9BQU9nTyxHQUFjcHlCLFdBQU0sRUFBUSxDQUFDLENBQ2xDdkQsR0FBSUEsSUFDSDhYLE9BQU80ZCxHQUNaLEVBUUl4USxHQUFTLFNBQWdCbGxCLEdBQzNCLElBQUksR0FFQUEsRUFBSSxDQUNOLElBQUlzSCxFQUFNNUgsU0FBU2syQixlQUFlNTFCLEdBRTlCc0gsR0FBT0EsRUFBSTFILFlBQ2IwSCxFQUFJMUgsV0FBV0MsWUFBWXlILEVBRS9CLENBQ0YsRUFXSXF1QixHQUFnQixTQUF1QjdSLEdBQ3pDLElBQUk5akIsRUFBSzhqQixFQUFLOWpCLEdBQ1ZOLEVBQVdva0IsRUFBS3BrQixTQUNwQixJQUFJLEVBQUosQ0FDQSxJQUFJbTJCLEVBQVM3MUIsRUFBR3VCLFFBQVFrMEIsR0FBVSxLQUNsQ3ZRLEdBQU8yUSxHQUNQLElBQUlDLEVBQWNwMkIsR0FBWVYsT0FBT1UsU0FDakNxMkIsRUFBVUQsRUFBWS8xQixjQUFjLFNBRXBDODFCLEdBQ0ZFLEVBQVFwcEIsYUFBYSxLQUFNa3BCLEdBRzdCLElBQUssSUFBSUcsRUFBUXh5QixVQUFVcUIsT0FBUTZ3QixFQUFTLElBQUlqdEIsTUFBTXV0QixFQUFRLEVBQUlBLEVBQVEsRUFBSSxHQUFJQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQzFHUCxFQUFPTyxFQUFRLEdBQUt6eUIsVUFBVXl5QixHQUdoQ1AsRUFBTzkwQixRQUFRLFNBQVU4MEIsR0FFbkI1dkIsT0FBT3FVLEtBQUt1YixHQUFRN3dCLFFBQ3RCNndCLEVBQU85MEIsUUFBUSxTQUFVVCxHQUN2QixJQUFJKzFCLEVBQVMsQ0FDWCxVQUFXLzFCLEdBRVR1WSxFQUFROGMsR0FBSTljLE1BQU13ZCxHQUN0QkgsRUFBUTcxQixZQUFZNDFCLEVBQVl4eEIsZUFBZW9VLEdBQ2pELEVBRUosR0FDQW9kLEVBQVlLLEtBQUtqMkIsWUFBWTYxQixFQTFCVCxDQTJCdEIsRUFVSUssR0FBYyxTQUFxQmxRLEdBQ3JDLElBQUl3UCxFQUFTeFAsRUFBTXdQLE9BQ2ZXLEVBQVFuUSxFQUFNbVEsTUFDbEIsT0FBT0EsRUFBUSxDQUFDLEVBQWdCLENBQUMsRUFBR0EsRUFBT1gsSUFBV0EsQ0FDeEQsRUFlSVksR0FBVyxTQUFrQkMsR0FDL0IsSUFBSTVCLEVBQVk0QixFQUFNNUIsVUFDbEI2QixFQUFXRCxFQUFNRSxJQUNqQkMsRUFBT0gsRUFBTUcsS0FDYkMsRUFBYUosRUFBTUksV0FDbkJDLEVBQWFMLEVBQU1LLFdBQ25CUCxFQUFRRSxFQUFNRixNQUNkUSxFQUFhTixFQUFNTSxXQUVuQnBpQixHQURTNGhCLEVBQVEsSUFBTSxJQUNIMUIsRUFBVXhsQixLQUFLLElBQ25DdW1CLEVBQVNjLEVBQVNwdUIsSUFBSSxTQUFVb2tCLEdBQ2xDLE9BQU9BLEVBQUcvWCxFQUFVaWlCLEVBQU1DLEVBQzVCLEdBQUcxZCxPQUFPLFNBQVU2ZCxHQUNsQixPQUFPQSxFQUFLanlCLE9BQVMsQ0FDdkIsR0FFQSxHQUFzQixJQUFsQjZ3QixFQUFPN3dCLE9BQVgsQ0FJQSxJQUFJN0UsRUFBSzYyQixHQUFjcGlCLEVBQVNzaUIsT0FBT3gxQixRQUFRLGVBQWdCLE1BQy9EMGpCLEdBQUlqbEIsRUFBSW8yQixHQUFZLENBQ2xCVixPQUFRVSxHQUFZLENBQ2xCVixPQUFRQSxFQUNSVyxNQUFPQSxJQUVUQSxNQUFPTyxJQVJULENBVUYsRUFjSSxHQUFXLFNBQWtCSSxHQUMvQixJQUFJckMsRUFBWXFDLEVBQU1yQyxVQUNsQjZCLEVBQVdRLEVBQU1QLElBQ2pCQyxFQUFPTSxFQUFNTixLQUNiQyxFQUFhSyxFQUFNTCxXQUNuQkMsRUFBYUksRUFBTUosV0FDbkJQLEVBQVFXLEVBQU1YLE1BRWQ1aEIsR0FEUzRoQixFQUFRLElBQU0sSUFDSDFCLEVBQVV4bEIsS0FBSyxJQUNuQ3VtQixFQUFTYyxFQUFTcHVCLElBQUksU0FBVW9rQixHQUNsQyxPQUFPQSxFQUFHL1gsRUFBVWlpQixFQUFNQyxFQUM1QixHQUNBLE9BQU9QLEdBQVksQ0FDakJWLE9BQVFVLEdBQVksQ0FDbEJWLE9BQVFBLEVBQ1JXLE1BQU9BLElBRVRBLE1BQU9PLEdBRVgsRUE0RUksR0FDRzNSLEdBREgsR0FFUXFSLEdBRlIsR0FuRWlCLFNBQXdCN2hCLEVBQVVnaUIsRUFBS0MsR0FDMUQsT0FBTyxXQVVILElBQUlPLEVBQWlCenpCLFVBQVVxQixPQUFTLFFBQXNCYSxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUNyRm16QixFQUFhbnpCLFVBQVVxQixPQUFTLEVBQUlyQixVQUFVLFFBQUtrQyxFQUVuRHd4QixFQUFRMXpCLFVBQVVxQixPQUFTLFFBQXNCYSxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxDQUFDLEVBQzdFb3pCLEVBQWFNLEVBQU1OLFdBQ25CUCxFQUFRYSxFQUFNYixNQUVsQixPQUFPQyxHQUFTLENBQ2QzQixVQUFXLENBQUNsZ0IsRUFBVXdpQixHQUN0QlIsSUFBS0EsRUFDTEMsS0FBTUEsRUFDTkMsV0FBWUEsRUFDWkMsV0FBWUEsRUFDWlAsTUFBT0EsR0FHYixDQUNGLEVBdUNJLEdBOUJpQixTQUF3QjVoQixFQUFVZ2lCLEVBQUtDLEdBQzFELE9BQU8sV0FVSCxJQUFJTyxFQUFpQnp6QixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssR0FDckZtekIsRUFBYW56QixVQUFVcUIsT0FBUyxFQUFJckIsVUFBVSxRQUFLa0MsRUFFbkR5eEIsRUFBUTN6QixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUM3RW96QixFQUFhTyxFQUFNUCxXQUNuQlAsRUFBUWMsRUFBTWQsTUFFbEIsTUFBTyxDQUFDLEdBQVMsQ0FDZjFCLFVBQVcsQ0FBQ2xnQixFQUFVd2lCLEdBQ3RCUixJQUFLQSxFQUNMQyxLQUFNQSxFQUNOQyxXQUFZQSxFQUNaQyxXQUFZQSxFQUNaUCxNQUFPQSxJQUdiLENBQ0YsRUF5QkllLEdBQU0sU0FBYTNpQixFQUFVOU0sR0FDL0IsT0FBTyxFQUFnQixDQUFDLEVBQUc4TSxFQUFVOU0sRUFDdkMsRUFPSTB2QixHQUFjLFNBQXFCNWlCLEdBQ3JDLE1BQU8sY0FBY3FELE9BQU9yRCxFQUFVLGNBQWNxRCxPQUFPckQsRUFDN0QsRUFRSTZpQixHQUFPLFNBQWNDLEdBQ3ZCLElBQUlDLEVBQVVoMEIsVUFBVXFCLE9BQVMsUUFBc0JhLElBQWpCbEMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEVBQ2xGLE1BQU8sUUFBUXNVLE9BQU95ZixFQUFVLE1BQU16ZixPQUFPMGYsRUFBUyxJQUN4RCxFQWNJQyxHQUFjLFNBQXFCdlIsR0FDckMsSUFBSXdSLEVBQVN4UixFQUFNd1IsT0FDZkMsRUFBZXpSLEVBQU15UixhQUNyQkMsRUFBYTFSLEVBQU0wUixXQUNuQkMsRUFBVzNSLEVBQU0yUixTQUNqQnBqQixFQUFXeVIsRUFBTXpSLFNBQ2pCcWpCLEVBQWlCNVIsRUFBTTRSLGVBQ3ZCQyxFQUFzQjdSLEVBQU04UixjQUM1QkEsT0FBd0MsSUFBeEJELEVBQWlDLENBQUMsRUFBSUEsRUFDdERwQixFQUFhelEsRUFBTXlRLFdBRW5Cc0IsRUFBVSxFQUFlLENBQUMsRUFBR0QsRUFBZSxDQUFDLEVBQUdyQixHQUVoRHVCLEVBQWN2QixHQUEwQnNCLEVBR3hDRSxHQURpQkgsRUFBY0ksZUFocUNyQyxTQUFrQy9zQixFQUFRcVgsR0FDeEMsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBRTVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBbEJOLFNBQXVDTSxFQUFRcVgsR0FDN0MsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBQzVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBQVMsQ0FBQyxFQUNWNFgsRUFBYTdjLE9BQU9xVSxLQUFLOU8sR0FHN0IsSUFBS2xILEVBQUksRUFBR0EsRUFBSXdlLEVBQVc5ZCxPQUFRVixJQUNqQ2lCLEVBQU11ZCxFQUFXeGUsR0FDYnVlLEVBQVM1VixRQUFRMUgsSUFBUSxJQUM3QjJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLElBR3ZCLE9BQU8yRixDQUNULENBS2UsQ0FBOEJNLEVBQVFxWCxHQUluRCxHQUFJNWMsT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJVSxFQUFtQi9jLE9BQU9xYyxzQkFBc0I5VyxHQUVwRCxJQUFLbEgsRUFBSSxFQUFHQSxFQUFJMGUsRUFBaUJoZSxPQUFRVixJQUN2Q2lCLEVBQU15ZCxFQUFpQjFlLEdBQ25CdWUsRUFBUzVWLFFBQVExSCxJQUFRLEdBQ3hCVSxPQUFPRyxVQUFVNmMscUJBQXFCMWMsS0FBS2lGLEVBQVFqRyxLQUN4RDJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRXpCLENBRUEsT0FBTzJGLENBQ1QsQ0E4b0NrQixDQUF5Qml0QixFQUFlLENBQUMsb0JBRXJESyxPQUE0QjN5QixJQUFma3lCLE9BQTBDbHlCLElBQWZpeEIsRUFBMkJpQixFQUFXbmpCLEVBQVV1akIsRUFBZXJCLEdBQWNpQixFQUFXbmpCLEVBQVUwakIsR0FBYSxHQUV2SjFCLEVBQU0sRUFBZSxDQUFDLEVBQUdFLEVBQWFnQixFQUFlLENBQUMsRUFBRyxDQUFDLEVBQUdELEdBRWpFLE9BQU9XLEVBQVd2Z0IsT0FBT2hTLE9BQU9xVSxLQUFLMGQsRUFBU0ssSUFBYzl2QixJQUFJLFNBQVVSLEdBQ3hFLE9BQU82dUIsUUFBa0Ivd0IsSUFBWCt3QixFQUFJN3VCLEdBQW1CNnVCLEVBQUk3dUIsR0FBR2t3QixFQUFnQkcsR0FBVyxJQUN6RSxHQUFHaGYsT0FBTyxTQUFVc08sR0FDbEIsT0FBT0EsQ0FDVCxHQUNGLEVBWUkrUSxHQUFlLFNBQXNCQyxHQUN2QyxJQUFJYixFQUFTYSxFQUFNYixPQUNmQyxFQUFlWSxFQUFNWixhQUNyQmEsRUFBY0QsRUFBTUMsWUFDcEJDLEVBQWlCRixFQUFNVixTQUN2QkEsT0FBOEIsSUFBbkJZLEVBQTRCLFNBQVU5d0IsR0FDbkQsT0FBT0EsQ0FDVCxFQUFJOHdCLEVBQ0osT0FBTyxTQU9LaGtCLEVBQVV1akIsRUFBZXJCLEdBQ2pDLE9BQU9jLEdBQVksQ0FDakJDLE9BQVFBLEVBQ1JDLGFBQWNBLEVBQ2RDLFdBQVlZLEVBQ1pYLFNBQVVBLEVBQ1ZwakIsU0FBVUEsRUFDVnFqQixlQUFnQnJqQixFQUNoQnVqQixjQUFlQSxFQUNmckIsV0FBWUEsR0FHbEIsQ0FDRixFQTZESStCLEdBQXVCLFNBQThCeEIsR0FDdkQsSUFBSXlCLEVBQVN6QixFQUFNeUIsT0FDZmxrQixFQUFXeWlCLEVBQU16aUIsU0FDakJta0IsRUFBa0IxQixFQUFNMkIsVUFDeEJBLE9BQWdDLElBQXBCRCxHQUFxQ0EsRUFDckQsT0FBT25rQixFQUFTUyxNQUFNLFdBQVc5TSxJQUFJLFNBQVVtZixHQUM3QyxPQTFCb0IsU0FBMkJ5UCxHQUNqRCxJQUFJMkIsRUFBUzNCLEVBQU0yQixPQUNmbGtCLEVBQVd1aUIsRUFBTXZpQixTQUVyQixPQURnQnVpQixFQUFNNkIsVUFDSEYsRUFBT3Z3QixJQUFJLFNBQVVtZixHQUN0QyxPQUFPQSxFQUFJOVMsRUFBVyxRQUN4QixHQUFHdEYsS0FBSyxLQUFPd3BCLEVBQU92d0IsSUFBSSxTQUFVbWYsR0FDbEMsT0FBT0EsRUFBSTlTLENBQ2IsR0FBR3RGLEtBQUssSUFDVixDQWlCVzJwQixDQUFrQixDQUN2QkgsT0FBUUEsRUFDUmxrQixTQUFVOFMsRUFDVnNSLFVBQVdBLEdBRWYsR0FBRzFwQixLQUFLLEdBQ1YsRUFhSTRwQixHQUFjLENBQUMsQ0FFakJKLE9BQVEsQ0FBQyxnQkFBaUIsa0JBQzFCSyxVQUFXLGNBQ1hILFdBQVcsR0FDVixDQUVERixPQUFRLENBQUMsR0FBSSxpQkFBa0IsbUJBQy9CSyxVQUFXLGVBQ1hILFdBQVcsR0FDVixDQUVERixPQUFRLENBQUMsK0JBQ1RLLFVBQVcsbUJBQ1hILFdBQVcsR0FDVixDQUVERixPQUFRLENBQUMsZ0JBQWlCLGdDQUMxQkssVUFBVyxvQkFDWEgsV0FBVyxJQVdUSSxHQUFjLFNBQXFCOUIsR0FDckMsSUFBSStCLEVBQWUvQixFQUFNTyxPQUNyQkEsT0FBMEIsSUFBakJ3QixFQUEwQixDQUFDLEVBQUlBLEVBQ3hDQyxFQUFhaEMsRUFBTWdDLFdBQ25CQyxFQUFpQmpDLEVBQU1VLFNBQ3ZCQSxPQUE4QixJQUFuQnVCLEVBQTRCLFNBQVV6eEIsR0FDbkQsT0FBT0EsQ0FDVCxFQUFJeXhCLEVBQ0osT0FBTyxTQU9LM2tCLEVBQVV1akIsRUFBZXJCLEdBQ2pDLE9BQU9vQyxHQUFZM3dCLElBQUksU0FBVWl4QixHQUMvQixJQXZIeUM5QyxFQXVIckNvQyxFQUFTVSxFQUFNVixPQUNmSyxFQUFZSyxFQUFNTCxVQUNsQkgsRUFBWVEsRUFBTVIsVUFDdEIsT0ExSHlDdEMsRUEwSGpCLENBQ3RCOWhCLFNBQVVBLEVBQ1ZxakIsZUFBZ0JZLEdBQXFCLENBQ25DQyxPQUFRQSxFQUNSbGtCLFNBQVVBLEVBQ1Zva0IsVUFBV0EsSUFFYmIsY0FBZUEsRUFDZnJCLFdBQVlBLEVBQ1plLE9BQVFBLEVBQU9zQixHQUNmRyxXQUFZQSxFQUNadEIsU0FBVUEsR0E3SFhKLEdBQVksQ0FDakJDLE9BSlduQixFQUFNbUIsT0FLakJFLFdBSmVyQixFQUFNNEMsV0FLckJ0QixTQUphdEIsRUFBTXNCLFNBS25CcGpCLFNBWGE4aEIsRUFBTTloQixTQVluQnFqQixlQVhtQnZCLEVBQU11QixlQVl6QkUsY0FYa0J6QixFQUFNeUIsY0FZeEJyQixXQVhlSixFQUFNSSxZQW1JbkIsRUFFSixDQUNGLEVBcUJJMkMsR0FBZSxTQUFzQjVDLEVBQU02QyxHQUN4QzdDLEdBQ0hsc0IsUUFBUWtDLE1BQU0sc0NBR2hCLElBQUlyTCxFQW5Ca0IsU0FBMkJxMUIsRUFBTTZDLEdBQ3ZELElBQUlDLEVBQVMxekIsT0FBT3FVLEtBQUtvZixHQUFjdGdCLE9BQU8sU0FBVXdnQixHQUN0RCxPQUFzQixJQUFmL0MsRUFBSytDLEVBQ2QsR0FBR3RxQixLQUFLLEtBQ1IsT0FBT3FxQixFQUFTLElBQUsxaEIsT0FBTzBoQixFQUFRLFVBQVE5ekIsQ0FDOUMsQ0FjY2cwQixDQUFrQmhELEVBQU02QyxHQUNwQyxPQUFPbDRCLEVBQVEsQ0FDYixVQUFXLENBQ1Q4SixRQUFTOUosRUFDVHV0QixRQUFTLGNBRVRscEIsQ0FDTixFQVdJNFcsR0FBVSxDQUFDLENBQ2IsOEJBQStCd1EsRUFBT0gsT0FDdEMscURBQXNERyxFQUFPYyxhQUM3RCxxQkFBc0JkLEVBQU9ZLGlCQUM3Qiw2QkFBOEJaLEVBQU9hLHdCQUNyQyxtQkFBb0JiLEVBQU9rQixlQUMzQiwyQkFBNEJsQixFQUFPbUIsc0JBQ25DLGVBQWdCbkIsRUFBT29CLFdBQ3ZCLHVCQUF3QnBCLEVBQU9xQixrQkFDL0IsUUFBU3JCLEVBQU9DLEtBQUssR0FDckIsYUFBYyxDQUNaLFFBQVcsU0FHYixzQkFBdUJELEVBQU9JLGlCQUM5QixhQUFjSixFQUFPRyxTQUNyQixhQUFjSCxFQUFPSyxVQUFVLFFBQy9CLFlBQWFMLEVBQU9LLFVBQVUsR0FDOUIsWUFBYUwsRUFBT0ssVUFBVSxHQUM5QixjQUFlTCxFQUFPSyxVQUFVLEdBQ2hDLGFBQWNMLEVBQU9LLFVBQVUsR0FDL0IsYUFBY0wsRUFBT0ssVUFBVSxHQUMvQixZQUFhTCxFQUFPSyxVQUFVLEdBQzlCLGNBQWVMLEVBQU9LLFVBQVUsR0FDaEMsY0FBZUwsRUFBT0ssVUFBVSxHQUNoQyxhQUFjTCxFQUFPSyxVQUFVLEdBQy9CLFlBQWFMLEVBQU9LLFVBQVUsSUFDOUIsZUFBZ0JMLEVBQU9LLFVBQVUsSUFDakMsZUFBZ0JMLEVBQU9LLFVBQVUsSUFFakMsZ0JBQWlCTCxFQUFPZ0IsWUFDeEIsd0NBQXlDaEIsRUFBT0YsYUFDaEQsY0FBZUUsRUFBT1UsVUFFdEIsMEJBQTJCVixFQUFPaUIscUJBQ2xDLGtEQUFtRGpCLEVBQU9ELHNCQUMxRCx3QkFBeUJDLEVBQU9XLG1CQUNoQywyQkFBNEJYLEVBQU9RLHNCQUNuQyxvQkFBcUJSLEVBQU9lLGdCQUU1QixjQUFlZixFQUFPd0IsVUFDdEIsZUFBZ0J4QixFQUFPc0IsV0FDdkIsWUFBYXRCLEVBQU91QixRQUNwQixnQkFBaUJ2QixFQUFPeUIsY0M5eUQxQixHQUFXLGFBYkksQ0FDYixDQUNFdHVCLEtBQU0sQ0FDSixtQkFBb0IsYUFDcEIwNUIsUUFBUyxNQUNUQyxPQUFRLE9BRVYsK0JBQWdDLENBQzlCLGlCQUFrQixhQ0N4QixNQUFNQyxHQUFzQixDQUMxQixLQUFBLzFCLEdBQ0VSLEtBQUt3MkIsUUFBVSxJQUFJQyxZQUFZejJCLEtBQUswMkIsU0FBVTEyQixLQUFLaEUsUUFDckQsRUFDQSxTQUFBMjZCLENBQ0VDLEVBQ0FDLEdBRUk3MkIsS0FBS3cyQixRQUNQSyxFQUFXQyxRQUNSOTJCLEtBQUt3MkIsUUFBd0JPLE9BQU9ILEVBQU8sQ0FBRUksUUFBUSxLQUd4REgsRUFBV0MsUUFBUUYsRUFFdkIsR0FHYSxNQUFNSyxXQUE0QkMsZ0JBQy9DLFlBQW1CUixFQUFXLFFBQVMsRUFBaUIsQ0FBQyxHLElBQWIxNkIsRSx5VUFBTyxHQUFaLElBQ3JDLElBQUltN0IsRUFBQywrQkFBd0JaLElBQUcsQ0FBRUcsV0FBVTE2QixZQUU1Q283QixNQUFNRCxHQUNObjNCLEtBQUt1MkIsSUFBTVksQ0FDYixDQUlBLFlBQVdULEcsUUFDVCxPQUFpQyxRQUExQixFQUFnQixRQUFoQixFQUFBMTJCLEtBQUt1MkIsSUFBSUMsZUFBTyxlQUFFRSxnQkFBUSxRQUFJLE9BQ3ZDLENBRUEsU0FBV1csRyxRQUNULE9BQThCLFFBQXZCLEVBQWdCLFFBQWhCLEVBQUFyM0IsS0FBS3UyQixJQUFJQyxlQUFPLGVBQUVhLGFBQUssUUFDaEMsQ0FFQSxhQUFXQyxHLFFBQ1QsT0FBa0MsUUFBM0IsRUFBZ0IsUUFBaEIsRUFBQXQzQixLQUFLdTJCLElBQUlDLGVBQU8sZUFBRWMsaUJBQVMsUUFDcEMsRUMxQ0YsTUFBTUMsR0FBb0IsQ0FDeEIsU0FBQVosQ0FBVUMsRUFBZUMsRyxNQUN2QixJQUNJVyxFQURBQyxFQUFxQixFQUV6QixPQUFhLENBRVgsR0FEQUQsRUFBV1osRUFBTXB0QixRQUFRLEtBQU1pdUIsS0FDM0JELEdBQVksR0FTVCxDQUNMLElBQUlFLEVBQWVkLEVBQU01NEIsVUFBVXk1QixHQUNuQ0MsRUFBT0EsRUFBS3o1QixRQUFRLElBQUlrTyxPQUFPLE1BQU8sS0FBTSxJQUN6QixHQUFmdXJCLEVBQUtuMkIsT0FDSHZCLEtBQUsyM0IsY0FDUEQsRUFBUTEzQixLQUFLMjNCLFlBQXlCRCxFQUN0Q2IsRUFBV0MsUUFBUVksVUFDWjEzQixLQUFLMjNCLGFBR2QzM0IsS0FBSzIzQixZQUE4QixRQUFoQixFQUFBMzNCLEtBQUsyM0IsbUJBQVcsUUFBSSxHQUFLRCxFQUU5QyxLQUNGLENBdEJtQixDQUNqQixJQUFJQSxFQUFlZCxFQUFNNTRCLFVBQVV5NUIsRUFBWUQsR0FDL0NFLEVBQU9BLEVBQUt6NUIsUUFBUSxJQUFJa08sT0FBTyxNQUFPLEtBQU0sSUFDeENuTSxLQUFLMjNCLGNBQ1BELEVBQVExM0IsS0FBSzIzQixZQUF5QkQsU0FDL0IxM0IsS0FBSzIzQixhQUVkZCxFQUFXQyxRQUFRWSxHQUNuQkQsRUFBYUQsRUFBVyxDQUMxQixDQWNGLENBQ0YsRUFDQSxLQUFBSSxDQUFNZixHQUNBNzJCLEtBQUsyM0IsY0FDUGQsRUFBV0MsUUFBUTkyQixLQUFLMjNCLG9CQUNqQjMzQixLQUFLMjNCLFlBRWhCLEdBR2EsTUFBTUUsV0FBcUJYLGdCQUN4QyxZQUFtQixFQUFpQixDQUFDLEcsSUFBYmw3QixFLHlVQUFPLEdBQVosSUFHakJvN0IsTUFGSywrQkFBdUJHLElBQUUsQ0FBRXY3QixZQUdsQyxFLElDekNHODdCLEcsb1NBQUwsU0FBS0EsR0FDSCxxQkFDQSxzQkFDRCxDQUhELENBQUtBLEtBQUFBLEdBQU0sS0FNWCxNQUFNQyxHQUNKLGNBa0VPLEtBQUFDLFFBQW9CLENBQUMsRUFqRTFCaDRCLEtBQUtpNEIsY0FBZ0IsR0FDckJqNEIsS0FBS2s0QixZQUFjLEVBQ25CbDRCLEtBQUttNEIsYUFBZSxFQUVwQm40QixLQUFLbzRCLE1BQVEsR0FDYnA0QixLQUFLcTRCLE1BQVEsR0FDYnI0QixLQUFLczRCLE9BQVMsR0FHZHQ0QixLQUFLdTRCLE9BQVMsYUFDZHY0QixLQUFLdzRCLE9BQVN4NEIsS0FBS3U0QixPQUFPaDNCLE9BQzFCdkIsS0FBS3k0QixPQUFTLEdBQ2R6NEIsS0FBSzA0QixXQUFhLEVBQ2xCMTRCLEtBQUsyNEIsYUFBYyxFQUNuQjM0QixLQUFLNDRCLFdBQVksRUFDakI1NEIsS0FBSzY0QixxQkFBc0IsRUFDM0I3NEIsS0FBSzg0Qix1QkFBd0IsRUFDN0I5NEIsS0FBSys0QixzQkFBdUIsRUFDNUIvNEIsS0FBS2c1QixtQkFBb0IsRUFDekJoNUIsS0FBS2k1Qix1QkFBd0IsRUFDN0JqNUIsS0FBS2s1Qix1QkFBd0IsRUFDN0JsNUIsS0FBS201QixvQkFBcUIsRUFHMUJuNUIsS0FBS281QixTQUFVLEVBQ2ZwNUIsS0FBS3E1QixRQUFVdkIsR0FBT3dCLE1BQ3RCdDVCLEtBQUt1NUIsTUFBUSxFQUNmLENBNkNBLFVBQVdDLENBQU9sMUIsR0FDaEJ0RSxLQUFLbzVCLFFBQVU5MEIsRUFDVnRFLEtBQUtvNUIsU0FDUnA1QixLQUFLeTVCLFdBRVQsQ0FFQSxVQUFXRCxHQUNULE9BQU94NUIsS0FBS281QixPQUNkLENBRUEsYUFBV00sR0FDVCxHQUFLMTVCLEtBQUtpNEIsY0FFSCxDQUNMLElBQUkwQixFQUFXMzVCLEtBQUt3NEIsT0FJcEIsT0FIdUIsR0FBbkJ4NEIsS0FBSzA0QixZQUNQaUIsSUFFSzNrQixLQUFLNGtCLEtBQUs1NUIsS0FBS2k0QixjQUFjMTJCLE9BQVNvNEIsRUFDL0MsQ0FQRSxPQUFPLENBUVgsQ0FFQSx3QkFBV0UsR0FDVCxHQUFJNzVCLEtBQUtpNEIsY0FBYzEyQixPQUFTLEVBQUcsQ0FDakMsSUFBSW80QixFQUFXMzVCLEtBQUt3NEIsT0FJcEIsT0FIdUIsR0FBbkJ4NEIsS0FBSzA0QixZQUNQaUIsSUFFSzM1QixLQUFLaTRCLGNBQWNsdkIsT0FDdkIvSSxLQUFLazRCLFlBQWMsR0FBS3lCLEVBQ3pCM2tCLEtBQUs4a0IsSUFBSTk1QixLQUFLazRCLFlBQWN5QixFQUFVMzVCLEtBQUtpNEIsY0FBYzEyQixRQUU3RCxDQUNFLE9BQU92QixLQUFLaTRCLGFBRWhCLENBSVEsb0JBQUE4QixHQUNnQixHQUFsQi81QixLQUFLMDVCLFVBQ1AxNUIsS0FBS2s0QixZQUFjLEVBRW5CbDRCLEtBQUtrNEIsWUFBYyxFQUV3QixtQkFBbENsNEIsS0FBS2c2QiwyQkFDZGg2QixLQUFLZzZCLDBCQUEwQmg2QixLQUFLNjVCLHNCQUVBLG1CQUEzQjc1QixLQUFLaTZCLG9CQUNkajZCLEtBQUtpNkIsbUJBQW1CajZCLEtBQUtpNEIsY0FFakMsQ0FJTyxTQUFBd0IsR0FDTHo1QixLQUFLdTVCLE1BQVEsR0FDYnY1QixLQUFLaTRCLGNBQWdCLEdBQ3JCajRCLEtBQUtxNUIsUUFBVXZCLEdBQU93QixNQUNjLG1CQUF6QnQ1QixLQUFLazZCLGtCQUNkbDZCLEtBQUtrNkIsaUJBQWlCLElBRXhCbDZCLEtBQUsrNUIsc0JBQ1AsQ0FFTyxxQkFBQUksR0FDTCxHQUFJbjZCLEtBQUt3NUIsT0FBUSxDQUNmLEdBQUl4NUIsS0FBS3E1QixTQUFXdkIsR0FBT3dCLE1BQU8sQ0FDaEMsR0FBSXQ1QixLQUFLdTVCLE1BQU1oNEIsT0FBUyxFQUFHLENBQ3pCLE1BQU02NEIsRUFBcUJwNkIsS0FBS3U1QixNQUFNaGdCLE9BQU92WixLQUFLdTVCLE1BQU1oNEIsT0FBUyxHQUdqRSxPQUZBdkIsS0FBS3U1QixNQUFRdjVCLEtBQUt1NUIsTUFBTXY3QixVQUFVLEVBQUdnQyxLQUFLdTVCLE1BQU1oNEIsT0FBUyxHQUN6RHZCLEtBQUtxNkIsUUFBUUQsSUFDTixDQUNULENBQU8sT0FBeUIsR0FBckJwNkIsS0FBS3U1QixNQUFNaDRCLFNBQ3BCdkIsS0FBS3k1QixhQUNFLEVBSVgsQ0FBTyxPQUFJejVCLEtBQUtxNUIsU0FBV3ZCLEdBQU93QyxTQUNoQ3Q2QixLQUFLeTVCLGFBQ0UsRUFJWCxDQUNFLE9BQU8sQ0FFWCxDQUVhLE9BQUFZLENBQVF2NEIsRyx5Q0FDbkIsTUFBTXk0QixFQUFXdjZCLEtBRVh3NkIsRUFBYSxTQUFVaDBCLEdBQzNCK3pCLEVBQUloQixNQUFRLEdBQ1pnQixFQUFJdEMsY0FBZ0IsR0FDcEJzQyxFQUFJbEIsUUFBVXZCLEdBQU93QixNQUNjLG1CQUF4QmlCLEVBQUlMLGtCQUNiSyxFQUFJTCxpQkFBaUIsSUFFdkJLLEVBQUlSLHVCQUN1QixtQkFBaEJRLEVBQUlFLFVBQ2JGLEVBQUlFLFNBQVNqMEIsRUFFakIsRUFFQSxJQUFLK3pCLEVBQUlmLFNBQVdlLEVBQUlHLEdBR3RCLE9BRkFGLEVBQVcxNEIsUUFDWG9GLFFBQVF5ekIsSUFBSSxlQUFlNzRCLEtBRzNCb0YsUUFBUXl6QixJQUFJLFlBQVk3NEIsS0FJMUIsTUFBTTg0QixFQUErQkwsRUFBSUcsR0FBbUJFLFlBQVksQ0FDdEUsUUFDQSxZQUVJQyxFQUEwQixLQUFQLzRCLEVBQ25CZzVCLEVBQW9CUCxFQUFJOUIsT0FBT2p2QixRQUFRMUgsSUFBUSxFQUMvQ2k1QixFQUFvQlIsRUFBSWhDLE9BQU8vdUIsUUFBUTFILElBQVEsRUFDL0NrNUIsRUFBZ0QsaUJBQXBCVCxFQUFJdkMsUUFBUWwyQixHQTZCeENtNUIsRUFBMkIsU0FDL0Jwa0IsRyx5Q0FFQSxPQUFPLElBQUl6TyxRQUFrQixTQUFVQyxFQUFTOEUsR0FDOUMsTUFBTThxQixFQUEwQixHQUNoQzJDLEVBQ0dNLFlBQVksV0FDWjNwQixNQUFNLFdBQ040cEIsV0FBV0MsWUFBWUMsS0FBS3hrQixJQUFPeWtCLFVBQVksU0FDaEQ5VyxHQUVBLE1BQU01SyxFQUFVNEssRUFBTS9jLE9BQXNCL0IsT0FDeENrVSxHQUNGcWUsRUFBY2x5QixLQUFLNlQsRUFBTzdiLE1BQU13OUIsV0FDaEMzaEIsRUFBTzRoQixZQUVQbnpCLEVBQVE0dkIsRUFFWixDQUNGLEVBQ0YsRSxFQUdNd0QsRUFBdUJsQixFQUFJaEIsTUFDM0JtQyxFQUFrQ25CLEVBQUl0QyxjQUM1QyxPQUFRc0MsRUFBSWxCLFNBQ1YsS0FBS3ZCLEdBQU93QixNQUNWLElBQUlxQyxFQUErQixHQUMvQkMsRUFBaUMsR0F5Q3JDLEdBeENBckIsRUFBSXRDLGNBQWdCLEdBRWhCK0MsR0FDRlQsRUFBSWhCLE9BQVN6M0IsR0FHWHk0QixFQUFJdkIsbUJBQ0o4QixHQUNtQixHQUFsQlAsRUFBSTdCLFlBQW1CNkIsRUFBSWhCLE1BQU1oNEIsUUFBVWc1QixFQUFJcEMsZ0JBRWhEd0QsUUEzRHVCLFNBQzdCOWtCLEcseUNBRUEsT0FBTyxJQUFJek8sUUFBa0IsU0FBVUMsRUFBUzhFLEdBQzlDLElBQUk4cUIsRUFBMEIsR0FDOUIyQyxFQUFZTSxZQUFZLFNBQVM3Z0IsSUFBSXhELEdBQU15a0IsVUFBWSxTQUNyRDlXLEdBRUEsR0FBS0EsRUFBTS9jLE9BQXNCL0IsT0FBUSxDQUN2QyxNQUFNbTJCLEVBQWlCclgsRUFBTS9jLE9BQXNCL0IsT0FDaER3Z0IsV0FDeUIsaUJBQWpCMlYsR0FBNkJBLEVBQWN0NkIsT0FBUyxJQUM3RDAyQixFQUFnQkEsRUFBY3pqQixPQUFPcW5CLEVBQWNqcUIsTUFBTSxLQUU3RCxDQUNBdkosRUFBUTR2QixFQUNWLENBQ0YsRUFDRixFLENBeUNtQzZELENBQXVCdkIsRUFBSWhCLE9BRWxEb0MsRUFBbUJwNkIsT0FBUyxJQUM5QnE2QixRQUE2QlgsRUFBeUJWLEVBQUloQixVQUdyRHNCLElBQ1RlLFFBQTZCWCxFQUF5QlYsRUFBSWhCLFFBR3hEb0MsRUFBbUJwNkIsT0FBUyxFQUM5Qmc1QixFQUFJdEMsY0FBZ0IwRCxFQUVwQnBCLEVBQUl0QyxjQUFnQjJELEVBSVcsbUJBQXhCckIsRUFBSUwsa0JBQ1RhLEdBQTRDLEdBQWhDVyxFQUFzQm42QixRQUVwQ2c1QixFQUFJTCxpQkFBcUNLLEVBQUloQixNQXBGOUMzbkIsTUFBTSxJQUNOOU0sSUFBS1IsR0FBTWkyQixFQUFJdkMsUUFBUTF6QixJQUN2QnVILEtBQUssTUFzRkowdUIsRUFBSXZCLG1CQUMwQixHQUE1QnVCLEVBQUl0QyxjQUFjMTJCLFFBQStDLEdBQWhDbTZCLEVBQXNCbjZCLFFBRXpEZzVCLEVBQUlSLHVCQUlKZSxHQUNBRCxHQUNtQixHQUFsQk4sRUFBSTdCLFlBQW1CNkIsRUFBSWhCLE1BQU1oNEIsUUFBVWc1QixFQUFJcEMsYUFDaEQsQ0FDQSxHQUFJb0MsRUFBSXRDLGNBQWMxMkIsT0FBUyxFQUM3QixPQUFJczVCLEdBQTZCLEdBQWxCTixFQUFJN0IsZ0JBQ2pCOEIsRUFBV0QsRUFBSXRDLGNBQWMsS0FHN0JzQyxFQUFJbEIsUUFBVXZCLEdBQU93QyxPQUNoQkMsRUFBSXZCLG1CQUNQdUIsRUFBSVIsNEJBRXFCLG1CQUFoQlEsRUFBSXdCLFVBQ2J4QixFQUFJd0IsU0FBU3hCLEVBQUlWLHdCQUloQixHQUFnQyxHQUE1QlUsRUFBSXRDLGNBQWMxMkIsT0FFM0IsWUFEQWk1QixFQUFXRCxFQUFJdEMsY0FBYyxHQUdqQyxDQUVBLEdBQ0U4QyxHQUNBVSxFQUFhbDZCLE9BQVMsR0FDdEJtNkIsRUFBc0JuNkIsT0FBUyxFQUMvQixDQUNBZzVCLEVBQUloQixNQUFRa0MsRUFDWmxCLEVBQUl0QyxjQUFnQnlELEVBQ3BCbkIsRUFBSVIsdUJBRUosSUFBSWlDLEVBQXNCekIsRUFBSWhDLE9BQU8vdUIsUUFBUTFILEdBUTdDLE9BUHNCLEdBQWxCeTRCLEVBQUk3QixZQUNOc0QsU0FHRXpCLEVBQUlWLHFCQUFxQnQ0QixPQUFTeTZCLEdBQ3BDeEIsRUFBV0QsRUFBSVYscUJBQXFCbUMsSUFHeEMsQ0FFQSxJQUFLaEIsRUFFSCxZQURBUixFQUFXMTRCLEdBT2IsR0FBSWc1QixHQUFnQyxHQUFwQlAsRUFBSWhCLE1BQU1oNEIsT0FFeEIsWUFEQWk1QixFQUFXMTRCLEdBS2IsTUFFRixLQUFLZzJCLEdBQU93QyxPQUNWLEdBQUlTLEVBQVUsQ0FDWixJQUFJaUIsRUFBc0J6QixFQUFJaEMsT0FBTy91QixRQUFRMUgsR0FPN0MsT0FOc0IsR0FBbEJ5NEIsRUFBSTdCLFlBQ05zRCxTQUVFekIsRUFBSVYscUJBQXFCdDRCLE9BQVN5NkIsR0FDcEN4QixFQUFXRCxFQUFJVixxQkFBcUJtQyxJQUd4QyxDQUFPLE9BQUluQixFQUNMTixFQUFJYixVQUFZLE9BQ2xCYSxFQUFJMEIseUJBSUp6QixFQUFXRCxFQUFJVixxQkFBcUIsS0FJdENXLEVBQVdELEVBQUlWLHFCQUFxQixTQUNwQ1UsRUFBSUYsUUFBUXY0QixJQUtwQixFLENBRU8scUJBQUFvNkIsR0FDTCxPQUFzQixHQUFsQmw4QixLQUFLMDVCLFdBQ1AxNUIsS0FBS2s0QixZQUFjLEdBQ1osSUFDc0IsR0FBcEJsNEIsS0FBS2s0QixZQUNkbDRCLEtBQUtrNEIsWUFBY2w0QixLQUFLMDVCLFVBRXhCMTVCLEtBQUtrNEIsY0FFc0MsbUJBQWxDbDRCLEtBQUtnNkIsMkJBQ2RoNkIsS0FBS2c2QiwwQkFBMEJoNkIsS0FBSzY1Qix1QkFFL0IsRUFDVCxDQUVPLGlCQUFBb0MsR0FDTCxPQUFzQixHQUFsQmo4QixLQUFLMDVCLFdBQ1AxNUIsS0FBS2s0QixZQUFjLEdBQ1osSUFDRWw0QixLQUFLazRCLGFBQWVsNEIsS0FBSzA1QixVQUNsQzE1QixLQUFLazRCLFlBQWMsRUFFbkJsNEIsS0FBS2s0QixjQUVzQyxtQkFBbENsNEIsS0FBS2c2QiwyQkFDZGg2QixLQUFLZzZCLDBCQUEwQmg2QixLQUFLNjVCLHVCQUUvQixFQUNULENBSU8sZ0JBQUFLLENBQWlCaUMsR0FBbUIsQ0FDcEMsa0JBQUFsQyxDQUFtQi9ULEdBQXVCLENBQzFDLHlCQUFBOFQsQ0FBMEI5VCxHQUF1QixDQUNqRCxRQUFBNlYsQ0FBUzdWLEdBQXVCLENBQ2hDLFFBQUF1VSxDQUFTajBCLEdBQWUsRSx1U0NoYmpDLFNBQVM0MUIsR0FBa0IxRSxHQUN6QixJQUFJMkUsRUFDSixNQUFNQyxFQUFnQjVFLEVBQUtsdUIsUUFBUSxLQUM3Qit5QixFQUFpQjdFLEVBQUtsdUIsUUFBUSxNQU1wQyxPQUpFNnlCLEdBRGEsR0FBWEUsR0FBaUJELEdBQVMsR0FBS0EsRUFBUUMsRUFDaENELEVBRUFDLEVBRUpGLENBQ1QsQ0FVQSxTQUFlRyxHQUNiQyxFQUNBbEMsRyx5Q0FFQSxNQUFNLEtBQUUzbUIsRUFBSSxNQUFFN1YsU0FBK0MwK0IsRUFBT0MsT0FDcEUsR0FBSTlvQixFQUNGLE9BQU8ybUIsRUFFUCxHQUFJeDhCLEVBQU8sQ0FDVCxNQUFNMjVCLEVBQU8zNUIsRUFDYixHQUFJMjVCLEVBQUtuMkIsT0FBUyxFQUFHLENBQ25CLEdBQUltMkIsRUFBS2lGLFdBQVcsZ0JBQ2xCLE9BQU9wQyxFQUNGLEdBQUk3QyxFQUFLaUYsV0FBVyxRQUFVakYsRUFBS24yQixPQUFTLEVBQ2pEZzVCLEVBQUl2QyxRQUFRLEtBQU9OLEVBQUsxNUIsVUFBVSxPQUM3QixDQUNMLE1BQU00K0IsRUFBMEJSLEdBQWtCMUUsR0FDOUNrRixFQUFrQixHQUFLQSxFQUFrQmxGLEVBQUtuMkIsT0FBUyxJQUN6RGc1QixFQUFJdkMsUUFBUU4sRUFBSzE1QixVQUFVLEVBQUc0K0IsSUFBb0JsRixFQUMvQzE1QixVQUFVNCtCLEVBQWtCLEdBQzVCbkosT0FFUCxDQUNGLENBQ0YsQ0FDQSxhQUFhK0ksR0FBcUJDLEVBQVFsQyxFQUU5QyxFLENBRUEsU0FBZXNDLEdBQ2JKLEVBQ0FsQyxHLHlDQUVBLE1BQU0sS0FBRTNtQixFQUFJLE1BQUU3VixTQUErQzArQixFQUFPQyxPQUNwRSxHQUFJOW9CLEVBQ0YsT0FBTzJtQixFQUVQLEdBQUl4OEIsRUFBTyxDQUNULE1BQU0yNUIsRUFBTzM1QixFQUNiLElBQUkrK0IsRUFBaUI1VyxFQUNyQixHQUFJd1IsRUFBS24yQixPQUFTLEdBQUtnNUIsRUFBSXdDLG1CQUFvQixDQUM3QyxNQUFNQSxFQUFxQnhDLEVBQUl3QyxtQkFDL0IsR0FBSXJGLEVBQUtpRixXQUFXLGNBQ2xCLE9BQU9wQyxFQUNGLEdBQUk3QyxFQUFLaUYsV0FBVyxRQUFVakYsRUFBS24yQixPQUFTLEVBQ2pEdTdCLEVBQVUsSUFDVjVXLEVBQWF3UixFQUFLMTVCLFVBQVUsR0FBR3kxQixPQUMvQnNKLEVBQW1CaDNCLEtBQUssQ0FBRSsyQixVQUFTNVcsbUJBQzlCLENBQ0wsTUFBTTBXLEVBQTBCUixHQUFrQjFFLEdBQzlDa0YsRUFBa0IsR0FBS0EsRUFBa0JsRixFQUFLbjJCLE9BQVMsSUFDekR1N0IsRUFBVXBGLEVBQUsxNUIsVUFBVSxFQUFHNCtCLEdBQzVCMVcsRUFBYXdSLEVBQUsxNUIsVUFBVTQrQixFQUFrQixHQUFHbkosT0FDakRzSixFQUFtQmgzQixLQUFLLENBQUUrMkIsVUFBUzVXLGVBQ25DcVUsRUFBSXBDLGFBQWVuakIsS0FBS2dvQixJQUFJekMsRUFBSXBDLGFBQWMyRSxFQUFRdjdCLFFBRTFELENBQ0YsQ0FDRixDQUNBLGFBQWFzN0IsR0FBbUJKLEVBQVFsQyxFQUU1QyxFLENBRUEsU0FBZTBDLEdBQ2JSLEVBQ0FsQyxHLHlDQUVBLE1BQU0sS0FBRTNtQixFQUFJLE1BQUU3VixTQUErQzArQixFQUFPQyxPQUNwRSxHQUFJOW9CLEVBQ0YsT0FBTzJtQixFQUVQLEdBQUl4OEIsRUFBTyxDQUNULE1BQU0yNUIsRUFBTzM1QixFQUNiLElBQUkrK0IsRUFBaUJ2QixFQUNyQixHQUFJN0QsRUFBS24yQixPQUFTLEdBQUtnNUIsRUFBSTJDLHFCQUFzQixDQUMvQyxNQUFNQSxFQUNKM0MsRUFBSTJDLHFCQUNOLEdBQUl4RixFQUFLaUYsV0FBVyxnQkFDbEIsT0FBT3BDLEVBQ0YsR0FBSTdDLEVBQUtpRixXQUFXLFFBQVVqRixFQUFLbjJCLE9BQVMsRUFDakR1N0IsRUFBVSxJQUNWdkIsRUFBWTdELEVBQUsxNUIsVUFBVSxHQUFHeTFCLE9BQzlCeUosRUFBcUJuM0IsS0FBSyxDQUFFKzJCLFVBQVN2QixrQkFDaEMsQ0FDTCxNQUFNcUIsRUFBMEJSLEdBQWtCMUUsR0FDOUNrRixFQUFrQixHQUFLQSxFQUFrQmxGLEVBQUtuMkIsT0FBUyxJQUN6RHU3QixFQUFVcEYsRUFBSzE1QixVQUFVLEVBQUc0K0IsR0FDNUJyQixFQUFZN0QsRUFBSzE1QixVQUFVNCtCLEVBQWtCLEdBQUduSixPQUNoRHlKLEVBQXFCbjNCLEtBQUssQ0FBRSsyQixVQUFTdkIsY0FDckNoQixFQUFJcEMsYUFBZW5qQixLQUFLZ29CLElBQUl6QyxFQUFJcEMsYUFBYzJFLEVBQVF2N0IsUUFFMUQsQ0FDRixDQUNGLENBQ0EsYUFBYTA3QixHQUFxQlIsRUFBUWxDLEVBRTlDLEUsQ0FFQSxTQUFlNEMsR0FDYlYsRUFDQWxDLEcseUNBRUEsTUFBTSxLQUFFM21CLEVBQUksTUFBRTdWLFNBQStDMCtCLEVBQU9DLE9BQ3BFLEdBQUk5b0IsRUFBTSxDQU9SLEdBTndCLEdBQXBCMm1CLEVBQUlsQyxNQUFNOTJCLFNBQ1pnNUIsRUFBSWxDLE1BQVFrQyxFQUFJbkMsUUFFZG1DLEVBQUkvQixPQUFTLEdBQUt2ZSxNQUFNc2dCLEVBQUkvQixXQUM5QitCLEVBQUkvQixPQUFTK0IsRUFBSWhDLE9BQU9oM0IsU0FFckJnNUIsRUFBSTVCLFlBQWEsQ0FDcEIsTUFBTXlFLEVBQXVCN0MsRUFBSXZDLFFBQ2pDdUMsRUFBSXZDLFFBQVUsQ0FBQyxFQUNmLElBQUssSUFBSWwyQixLQUFPczdCLEVBQ2Q3QyxFQUFJdkMsUUFBUWwyQixFQUFJZ0wsZUFBaUJzd0IsRUFBV3Q3QixHQUU5QyxHQUFJeTRCLEVBQUl3QyxtQkFBb0IsQ0FDMUIsTUFBTUEsRUFBcUJ4QyxFQUFJd0MsbUJBQy9CLElBQUssSUFBSWw4QixFQUFJLEVBQUdBLEVBQUlrOEIsRUFBbUJ4N0IsT0FBUVYsSUFDN0NrOEIsRUFBbUJsOEIsR0FBR2k4QixRQUNwQkMsRUFBbUJsOEIsR0FBR2k4QixRQUFRaHdCLGFBRXBDLENBQ0EsR0FBSXl0QixFQUFJMkMscUJBQXNCLENBQzVCLE1BQU1BLEVBQ0ozQyxFQUFJMkMscUJBQ04sSUFBSyxJQUFJcjhCLEVBQUksRUFBR0EsRUFBSXE4QixFQUFxQjM3QixPQUFRVixJQUMvQ3E4QixFQUFxQnI4QixHQUFHaThCLFFBQ3RCSSxFQUFxQnI4QixHQUFHaThCLFFBQVFod0IsYUFFdEMsQ0FDRixDQUNBLE9BQU95dEIsQ0FDVCxDQUNFLEdBQUl4OEIsRUFBTyxDQUNULElBQUkyNUIsRUFBTzM1QixFQUVYLEdBREEyNUIsRUFoSk4sU0FBdUJBLEdBQ3JCLElBQUk3MkIsRUFBWTYyQixFQUFLbHVCLFFBQVEsS0FJN0IsT0FISTNJLEdBQUssSUFDUDYyQixFQUFPQSxFQUFLMTVCLFVBQVUsRUFBRzZDLEdBQUc0eUIsUUFFdkJpRSxDQUNULENBMElhMkYsQ0FBYzNGLEdBQ2pCQSxFQUFLbjJCLE9BQVMsRUFDaEIsR0FBSW0yQixFQUFLaUYsV0FBVyxrQkFFYixHQUFJakYsRUFBS2lGLFdBQVcsV0FDekJwQyxFQUFJbkMsTUFBUVYsRUFBSzE1QixVQUFVLFFBQ3RCLEdBQUkwNUIsRUFBS2lGLFdBQVcsV0FDekJwQyxFQUFJbEMsTUFBUVgsRUFBSzE1QixVQUFVLFFBQ3RCLEdBQUkwNUIsRUFBS2lGLFdBQVcsWUFDekJwQyxFQUFJakMsT0FBU1osRUFBSzE1QixVQUFVLFFBQ3ZCLEdBQUkwNUIsRUFBS2lGLFdBQVcsWUFDekJwQyxFQUFJaEMsT0FBU2IsRUFBSzE1QixVQUFVLFFBQ3ZCLEdBQUkwNUIsRUFBS2lGLFdBQVcsWUFDekJwQyxFQUFJL0IsT0FBUzc2QixTQUFTKzVCLEVBQUsxNUIsVUFBVSxTQUNoQyxHQUFJMDVCLEVBQUtpRixXQUFXLFlBQ3pCcEMsRUFBSTlCLE9BQVNmLEVBQUsxNUIsVUFBVSxRQUN2QixHQUFJMDVCLEVBQUtpRixXQUFXLGlCQUFrQixDQUMzQyxJQUFJakUsRUFBYS82QixTQUFTKzVCLEVBQUsxNUIsVUFBVSxLQUNyQyxDQUFDLEVBQUcsRUFBRyxHQUFHd0wsUUFBUWt2QixHQUFjLEVBQ2xDNkIsRUFBSTdCLFdBQWEsRUFFakI2QixFQUFJN0IsV0FBYUEsQ0FFckIsTUFBV2hCLEVBQUtpRixXQUFXLGtCQUN6QnBDLEVBQUk1QixhQUFjLEVBQ1RqQixFQUFLaUYsV0FBVyxlQUN6QnBDLEVBQUkzQixXQUFZLEVBQ1BsQixFQUFLaUYsV0FBVywyQkFDekJwQyxFQUFJMUIscUJBQXNCLEVBQ2pCbkIsRUFBS2lGLFdBQVcsK0JBQ3pCcEMsRUFBSXpCLHVCQUF3QixFQUNuQnBCLEVBQUtpRixXQUFXLDRCQUN6QnBDLEVBQUl4QixzQkFBdUIsRUFDbEJyQixFQUFLaUYsV0FBVyx5QkFDekJwQyxFQUFJdkIsbUJBQW9CLEVBQ2Z0QixFQUFLaUYsV0FBVyw0QkFDekJwQyxFQUFJdEIsdUJBQXdCLEVBQ25CdkIsRUFBS2lGLFdBQVcsOEJBQ3pCcEMsRUFBSXJCLHVCQUF3QixFQUNuQnhCLEVBQUtpRixXQUFXLDBCQUN6QnBDLEVBQUlwQixvQkFBcUIsRUFDaEJ6QixFQUFLaUYsV0FBVyxtQkFDekJwQyxFQUFJdkMsUUFBVSxDQUFDLEVBQ2Z1QyxRQUFZaUMsR0FBcUJDLEVBQVFsQyxJQUNoQzdDLEVBQUtpRixXQUFXLGlCQUN6QnBDLEVBQUl3QyxtQkFBcUIsR0FDekJ4QyxRQUFZc0MsR0FBbUJKLEVBQVFsQyxJQUM5QjdDLEVBQUtpRixXQUFXLG9CQUN6QnBDLEVBQUkyQyxxQkFBdUIsR0FDM0IzQyxRQUFZMEMsR0FBcUJSLEVBQVFsQyxHQUcvQyxDQUNBLGFBQWE0QyxHQUFjVixFQUFRbEMsRUFFdkMsRSwwQkNyTkEsU0FBUytDLEtBZVAsT0FkQUEsR0FBVzk2QixPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPNjFCLEdBQVNyOUIsTUFBTUQsS0FBTUUsVUFDOUIsQ0FpQkEsU0FBUyxHQUF5QjZILEVBQVFxWCxHQUN4QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFFNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFsQk4sU0FBdUNNLEVBQVFxWCxHQUM3QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFDNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFBUyxDQUFDLEVBQ1Y0WCxFQUFhN2MsT0FBT3FVLEtBQUs5TyxHQUc3QixJQUFLbEgsRUFBSSxFQUFHQSxFQUFJd2UsRUFBVzlkLE9BQVFWLElBQ2pDaUIsRUFBTXVkLEVBQVd4ZSxHQUNidWUsRUFBUzVWLFFBQVExSCxJQUFRLElBQzdCMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsSUFHdkIsT0FBTzJGLENBQ1QsQ0FLZSxDQUE4Qk0sRUFBUXFYLEdBSW5ELEdBQUk1YyxPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlVLEVBQW1CL2MsT0FBT3FjLHNCQUFzQjlXLEdBRXBELElBQUtsSCxFQUFJLEVBQUdBLEVBQUkwZSxFQUFpQmhlLE9BQVFWLElBQ3ZDaUIsRUFBTXlkLEVBQWlCMWUsR0FDbkJ1ZSxFQUFTNVYsUUFBUTFILElBQVEsR0FDeEJVLE9BQU9HLFVBQVU2YyxxQkFBcUIxYyxLQUFLaUYsRUFBUWpHLEtBQ3hEMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FFekIsQ0FFQSxPQUFPMkYsQ0FDVCxDQUVBLElBQUksR0FBVSxDQUVaOFEsVUFBVyxhQUVYZ2xCLFFBQVMsc0JBQ1RDLE9BQVEsc0JBR1I3Z0IsTUFBTyxvQkFFUDhnQixjQUFlLDRCQUNmQyxjQUFlLDRCQUNmQyxVQUFXLHdCQUNYQyxPQUFRLHNCQ25FVixTQUFTLEtBZVAsT0FkQSxHQUFXcDdCLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENBc0NBLElBQUksR0FBVSxDQUNacVksVUFBVyxZQUVYc2xCLGFBQWMsb0JBQ2RDLFVBQVcsaUJBRVhDLFNBQVUsc0JBQ1ZDLFFBQVMsb0JBQ1RDLG1CQUFvQix5QkFJbEJDLEdBQWdCLFNBQXVCQyxHQUN6QyxZQUF1Qi83QixJQUFoQis3QixFQUE0QixHQUFHM3BCLE9BQU8sR0FBUXdwQixTQUFTeHBCLE9BQU9RLEtBQUs4a0IsSUFBSSxFQUFHcUUsSUFGeEQsQ0FHM0IsRUNwRUEsU0FBUyxHQUFRenlCLEVBQVFrVCxHQUN2QixJQUFJL0gsRUFBT3JVLE9BQU9xVSxLQUFLbkwsR0FFdkIsR0FBSWxKLE9BQU9xYyxzQkFBdUIsQ0FDaEMsSUFBSUMsRUFBVXRjLE9BQU9xYyxzQkFBc0JuVCxHQUV2Q2tULElBQ0ZFLEVBQVVBLEVBQVFuSixPQUFPLFNBQVVvSixHQUNqQyxPQUFPdmMsT0FBTzJYLHlCQUF5QnpPLEVBQVFxVCxHQUFLVCxVQUN0RCxJQUdGekgsRUFBSzlRLEtBQUs5RixNQUFNNFcsRUFBTWlJLEVBQ3hCLENBRUEsT0FBT2pJLENBQ1QsQ0FFQSxTQUFTLEdBQWVwUCxHQUN0QixJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUF5QixNQUFoQjdILFVBQVVXLEdBQWFYLFVBQVVXLEdBQUssQ0FBQyxFQUVoREEsRUFBSSxFQUNOLEdBQVEyQixPQUFPdUYsSUFBUyxHQUFNekssUUFBUSxTQUFVd0UsR0FDOUMsR0FBZ0IyRixFQUFRM0YsRUFBS2lHLEVBQU9qRyxHQUN0QyxHQUNTVSxPQUFPeWMsMEJBQ2hCemMsT0FBTzBjLGlCQUFpQnpYLEVBQVFqRixPQUFPeWMsMEJBQTBCbFgsSUFFakUsR0FBUXZGLE9BQU91RixJQUFTekssUUFBUSxTQUFVd0UsR0FDeENVLE9BQU82YixlQUFlNVcsRUFBUTNGLEVBQUtVLE9BQU8yWCx5QkFBeUJwUyxFQUFRakcsR0FDN0UsRUFFSixDQUVBLE9BQU8yRixDQUNULENBRUEsU0FBUzIyQixHQUFRN2YsR0FhZixPQVRFNmYsR0FEb0IsbUJBQVhsZSxRQUFvRCxpQkFBcEJBLE9BQU9DLFNBQ3RDLFNBQVU1QixHQUNsQixjQUFjQSxDQUNoQixFQUVVLFNBQVVBLEdBQ2xCLE9BQU9BLEdBQXlCLG1CQUFYMkIsUUFBeUIzQixFQUFJdk8sY0FBZ0JrUSxRQUFVM0IsSUFBUTJCLE9BQU92ZCxVQUFZLGdCQUFrQjRiLENBQzNILEVBR0s2ZixHQUFRN2YsRUFDakIsQ0FFQSxTQUFTLEdBQWdCQSxFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0FFQSxTQUFTLEdBQWV3ZixFQUFLN2UsR0FDM0IsT0FHRixTQUF5QjZlLEdBQ3ZCLEdBQUl2YSxNQUFNdUQsUUFBUWdYLEdBQU0sT0FBT0EsQ0FDakMsQ0FMUyxDQUFnQkEsSUFPekIsU0FBK0JBLEVBQUs3ZSxHQUNsQyxJQUFJb2YsRUFBS1AsSUFBMEIsb0JBQVhRLFFBQTBCUixFQUFJUSxPQUFPQyxXQUFhVCxFQUFJLGVBRTlFLEdBQVUsTUFBTk8sRUFBSixDQUNBLElBSUlELEVBQUlELEVBSkpILEVBQU8sR0FDUEMsR0FBSyxFQUNMQyxHQUFLLEVBSVQsSUFDRSxJQUFLRyxFQUFLQSxFQUFHbmQsS0FBSzRjLEtBQVFHLEdBQU1HLEVBQUtDLEVBQUdoUSxRQUFRMkQsUUFDOUNnTSxFQUFLN1osS0FBS2lhLEVBQUdqaUIsUUFFVDhDLEdBQUsrZSxFQUFLcmUsU0FBV1YsR0FINEJnZixHQUFLLEdBSzlELENBQUUsTUFBTy9NLEdBQ1BnTixHQUFLLEVBQ0xDLEVBQUtqTixDQUNQLENBQUUsUUFDQSxJQUNPK00sR0FBc0IsTUFBaEJJLEVBQVcsUUFBV0EsRUFBVyxRQUM5QyxDQUFFLFFBQ0EsR0FBSUgsRUFBSSxNQUFNQyxDQUNoQixDQUNGLENBRUEsT0FBT0gsQ0F4QmUsQ0F5QnhCLENBbkNpQyxDQUFzQkYsRUFBSzdlLElBcUM1RCxTQUFxQ3dELEVBQUdnNkIsR0FDdEMsR0FBS2g2QixFQUFMLENBQ0EsR0FBaUIsaUJBQU5BLEVBQWdCLE9BQU9pNkIsR0FBa0JqNkIsRUFBR2c2QixHQUN2RCxJQUFJcmdCLEVBQUl4YixPQUFPRyxVQUFVZ0UsU0FBUzdELEtBQUt1QixHQUFHMEUsTUFBTSxHQUFJLEdBRXBELE1BRFUsV0FBTmlWLEdBQWtCM1osRUFBRTJMLGNBQWFnTyxFQUFJM1osRUFBRTJMLFlBQVlwRCxNQUM3QyxRQUFOb1IsR0FBcUIsUUFBTkEsRUFBb0I3WSxNQUFNbzVCLEtBQUtsNkIsR0FDeEMsY0FBTjJaLEdBQXFCLDJDQUEyQzNSLEtBQUsyUixHQUFXc2dCLEdBQWtCajZCLEVBQUdnNkIsUUFBekcsQ0FMYyxDQU1oQixDQTVDa0VHLENBQTRCOWUsRUFBSzdlLElBc0RuRyxXQUNFLE1BQU0sSUFBSWdLLFVBQVUsNElBQ3RCLENBeER5RyxFQUN6RyxDQTZDQSxTQUFTeXpCLEdBQWtCNWUsRUFBSytlLElBQ25CLE1BQVBBLEdBQWVBLEVBQU0vZSxFQUFJbmUsVUFBUWs5QixFQUFNL2UsRUFBSW5lLFFBRS9DLElBQUssSUFBSVYsRUFBSSxFQUFHNjlCLEVBQU8sSUFBSXY1QixNQUFNczVCLEdBQU01OUIsRUFBSTQ5QixFQUFLNTlCLElBQUs2OUIsRUFBSzc5QixHQUFLNmUsRUFBSTdlLEdBRW5FLE9BQU82OUIsQ0FDVCxDQU9BLElBc0RJQyxHQXREQUMsR0FBYWx4QixLQUFLZ0MsVUFDbEJtdkIsR0FBWWwxQixPQUdaK0IsR0FBUyxTQUVUb3pCLEdBQU8sU0FBY3IyQixFQUFHMUssR0FDMUIsT0FBT0EsQ0FDVCxFQUVJb0ssR0FBTSxTQUFhNDJCLEVBQU94ekIsRUFBT3hOLEdBQ25DLElBQUl3VCxFQUFRc3RCLEdBQVV0ekIsRUFBTXhGLEtBQUtoSSxHQUFTLEdBRTFDLE9BREFnaEMsRUFBTTUyQixJQUFJcEssRUFBT3dULEdBQ1ZBLENBQ1QsRUFDSTdCLEdBQVksU0FBbUIzUixFQUFPaWhDLEVBQVVDLEdBWWxELElBWEEsSUFBSUMsRUFBSUYsR0FBWVosR0FBUVksS0FBY3R6QixHQUFTLFNBQVVtRixFQUFHdk0sR0FDOUQsTUFBYSxLQUFOdU0sSUFBYSxFQUFJbXVCLEVBQVN4MUIsUUFBUXFILEdBQUt2TSxPQUFJLENBQ3BELEVBQUkwNkIsR0FBWUYsR0FDWkMsRUFBUSxJQUFJSSxJQUNaNXpCLEVBQVEsR0FDUjZ6QixFQUFTLEdBQ1R2K0IsR0FBS3NILEdBQUk0MkIsRUFBT3h6QixFQUFPMnpCLEVBQUVwOEIsS0FBSyxDQUNoQyxHQUFJL0UsR0FDSCxHQUFJQSxJQUNIc2hDLEdBQVl4K0IsRUFFVEEsRUFBSTBLLEVBQU1oSyxRQUNmODlCLEdBQVcsRUFDWEQsRUFBT3YrQixHQUFLKzlCLEdBQVdyekIsRUFBTTFLLEtBQU01QyxFQUFTZ2hDLEdBRzlDLE1BQU8sSUFBTUcsRUFBT3Z6QixLQUFLLEtBQU8sSUFFaEMsU0FBUzVOLEVBQVE2RCxFQUFLL0QsR0FDcEIsR0FBSXNoQyxFQUVGLE9BREFBLEdBQVlBLEVBQ0x0aEMsRUFHVCxJQUFJZ3FCLEVBQVFtWCxFQUFFcDhCLEtBQUs5QyxLQUFNOEIsRUFBSy9ELEdBRTlCLE9BQVFxZ0MsR0FBUXJXLElBQ2QsS0FBS3JjLEdBQ0gsR0FBYyxPQUFWcWMsRUFBZ0IsT0FBT0EsRUFFN0IsSUEzQ1UsU0E0Q1IsT0FBT2dYLEVBQU0xa0IsSUFBSTBOLElBQVU1ZixHQUFJNDJCLEVBQU94ekIsRUFBT3djLEdBR2pELE9BQU9BLENBQ1QsQ0FDRixFQUdJamxCLEdBQU93OEIsU0FBUzM4QixVQUFVRyxLQUFLb0gsS0FBS28xQixTQUFTMzhCLFVBQVVHLE1BRXZEeThCLEdBQWlCLFdBQ25CLE9BQ0UsYUFFSixFQXFCSUMsR0FBUyxXQUNYLElBQUlDLEVBQVV2L0IsVUFBVXFCLE9BQVMsUUFBc0JhLElBQWpCbEMsVUFBVSxJQUFtQkEsVUFBVSxHQUM3RSxPQUFPLFNBQVVncEIsRUFBSXdXLEdBQ25CLElBQUk1L0IsRUFBUTYrQixHQUdaLEdBekJhLFNBQW9CZSxHQUNuQyxJQUFJNS9CLEVBQVE2K0IsR0FDUmdCLEVBQVk3L0IsRUFBTTYvQixVQUN0QjcvQixFQUFNNi9CLFdBQWEsRUFDbkIsSUFBSUMsRUFBVzkvQixFQUFNKy9CLFdBQVdGLElBQWMsR0FDMUNHLE9BQTJCMTlCLElBQVRzOUIsS0FDcEJ2NkIsTUFBTXVELFFBQVFnM0IsS0FBUUEsRUFBS24rQixPQUFTLEdBQUttK0IsRUFBS0ssTUFBTSxTQUFVNXJCLEVBQUd0VCxHQUNqRSxPQUFPc1QsSUFBTXlyQixFQUFTLytCLEVBQ3hCLElBQ0dmLEVBQU1rZ0MsT0FPVCxZQUphNTlCLElBQVRzOUIsSUFDRjUvQixFQUFNKy9CLFdBQVdGLEdBQWFELEdBR3pCSSxDQUNULENBTTBCRyxDQUFXUCxHQUVaLENBQ25CLElBQUlDLEVBQVk3L0IsRUFBTTYvQixVQUVsQk8sRUFBZ0IsV0FDbEIsSUFBSUMsRUFBV2pYLElBRVMsbUJBQWJpWCxJQUVUcmdDLEVBQU1zZ0MsVUFBVWo0QixJQUFJdzNCLEVBQVdRLEdBRS9CcmdDLEVBQU1zZ0MsVUFBVWo0QixJQUFJLElBQUtvM0IsSUFFN0IsRUFHSVksRUFBV3JnQyxFQUFNc2dDLFVBQVUvbEIsSUFBSXNsQixHQUVuQyxJQUMwQixtQkFBYlEsR0FDVEEsR0FFSixDQUFFLFFBQ0FyZ0MsRUFBTXNnQyxVQUFrQixPQUFFVCxFQUM1QixDQUVBNy9CLEVBQU11Z0MsUUFBUXQ2QixLQUFLMDVCLEVBQVUsV0FDM0IsT0FBTyxJQUFJcjNCLFFBQVEsU0FBVUMsR0FDM0IsT0FBT29ELHNCQUFzQnBELEVBQy9CLEdBQUdxQyxLQUFLdzFCLEVBQ1YsRUFBSUEsRUFDTixDQUNGLENBQ0YsRUFFSUksR0FBYyxTQUFxQkMsRUFBY0MsR0FDbkQsSUFBSTFnQyxFQUFRNitCLEdBQ1JwdEIsRUFBUXpSLEVBQU0yZ0MsWUFPbEIsT0FOQTNnQyxFQUFNMmdDLGFBQWUsRUFFaEIzZ0MsRUFBTWtnQyxRQUNUbGdDLEVBQU00Z0MsT0FBT252QixHQUFTZ3ZCLEdBR2pCLENBQUN6Z0MsRUFBTTRnQyxPQUFPbnZCLEdBQVEsU0FBVXhULEdBQ3JDLElBQUk0aUMsRUFBZ0I3Z0MsRUFBTTRnQyxPQUFPbnZCLEdBQzdCcXZCLEVBQVdKLEVBQWFBLEVBQVd6aUMsRUFBT3dULEdBQVN4VCxFQUN2RCtCLEVBQU00Z0MsT0FBT252QixHQUFTcXZCLEVBRWxCbHhCLEdBQVVreEIsS0FBY2x4QixHQUFVaXhCLElBQ3BDcEIsSUFFSixFQUFHaHVCLEVBQ0wsRUFFSW1QLEdBQVcsU0FBa0I2ZixHQUMvQixJQUFJemdDLEVBQVE2K0IsR0FNWixPQUFPMkIsR0FBWUMsRUFKRixTQUFvQnhpQyxFQUFPd1QsR0FDMUMsTUFBd0IsbUJBQVZ4VCxFQUF1QkEsRUFBTStCLEVBQU00Z0MsT0FBT252QixHQUFRQSxHQUFTeFQsQ0FDM0UsRUFHRixFQUVJNGlCLEdBQVk2ZSxJQUFPLEdBR3ZCLFNBQVNxQixHQUFXQyxFQUFTUCxFQUFjUSxHQUN6QyxJQU1NQyxFQUNBampDLEVBQ0FrakMsRUFDQTF2QixFQVRGelIsRUFBUTYrQixHQUVSdUMsR0FBYXBoQyxFQUFNa2dDLE9BQVNlLEVBQVNBLEVBQU9SLEdBQWdCQSxFQWtCaEUsT0FiTXhpQyxHQURBaWpDLEVBQWdCLEdBRERWLEdBQVlZLEdBQ2tCLElBQ3ZCLEdBQ3RCRCxFQUFXRCxFQUFjLEdBQ3pCenZCLEVBQVF5dkIsRUFBYyxHQVFuQixDQUFDampDLEVBTk8sU0FBa0JvakMsR0FDL0IsSUFBSVIsRUFBZ0I3Z0MsRUFBTTRnQyxPQUFPbnZCLEdBQ2pDLE9BQU8wdkIsRUFDUEgsRUFBUUgsRUFBZVEsR0FDekIsRUFNSixDQXhCc0IzQixLQTBCdEIsSUFBSTRCLEdBQVMsU0FBZ0JDLEdBUTNCLE9BSG9CLEdBSEFmLEdBQVksQ0FDOUJnQixRQUFTRCxJQUV1QyxHQUN4QixFQUc1QixFQThPSTU3QixHQWhKaUIsQ0FDbkI4N0IsT0FBUSxTQUNSQyxjQUFlLGdCQUNmQyxVQUFXLFlBQ1hOLE9BQVEsU0FDUk8sZ0JBQWlCLGtCQUNqQkMsa0JBQW1CLG9CQUNuQkMsSUFBSyxNQUNMdnpCLE1BQU8sUUFDUHd6QixhQUFjLGVBQ2RDLFVBQVcsWUFDWEMsU0FBVSxXQUNWQyxRQUFTLFVBQ1RDLFlBQWEsY0FDYkMsWUFBYSxjQUNiQyxVQUFXLFlBQ1hDLFFBQVMsVUFDVEMsUUFBUyxVQUNULE1BQVMsWUFDVEMsUUFBUyxVQUNUQyxVQUFXLFlBRVgxcEIsVUFBVyxZQUNYMnBCLFFBQVMsVUFDVEMsS0FBTSxPQUNONTZCLFFBQVMsVUFDVEYsZ0JBQWlCLGtCQUNqQis2QixZQUFhLGNBQ2JDLFNBQVUsV0FDVkMsT0FBUSxTQUNSQyxZQUFhLGNBQ2I1ckIsS0FBTSxPQUNONnJCLFNBQVUsV0FDVixRQUFXLFVBQ1hDLE1BQU8sUUFDUEMsSUFBSyxNQUNML2xCLFNBQVUsV0FDVmdtQixTQUFVLFdBQ1ZDLFVBQVcsWUFDWEMsUUFBUyxVQUNULElBQU8sTUFDUEMsS0FBTSxPQUNOQyxXQUFZLGFBQ1pDLFlBQWEsY0FDYkMsV0FBWSxhQUNaQyxlQUFnQixpQkFDaEJDLFdBQVksYUFDWkMsWUFBYSxjQUNiNzJCLFFBQVMsVUFDVHBQLE9BQVEsU0FDUmttQyxPQUFRLFNBQ1JDLEtBQU0sT0FDTjltQixLQUFNLE9BQ04rbUIsU0FBVSxXQUNWQyxRQUFTLFVBQ1RDLFVBQVcsWUFDWEMsS0FBTSxPQUNOdG5DLEdBQUksS0FDSnVuQyxVQUFXLFlBQ1hDLFVBQVcsWUFDWHRpQyxHQUFJLEtBQ0p1aUMsVUFBVyxZQUNYQyxRQUFTLFVBQ1Ryd0IsS0FBTSxPQUNOc3dCLE1BQU8sUUFDUEMsS0FBTSxPQUNOOVEsS0FBTSxPQUNOMVgsS0FBTSxPQUNOeW9CLElBQUssTUFDTEMsU0FBVSxXQUNWQyxhQUFjLGVBQ2RDLFlBQWEsY0FDYjFILElBQUssTUFDTDJILFVBQVcsWUFDWEMsTUFBTyxRQUNQQyxXQUFZLGFBQ1p2M0IsT0FBUSxTQUNSd3NCLElBQUssTUFDTGdMLFVBQVcsWUFDWEMsU0FBVSxXQUNWQyxNQUFPLFFBQ1BwNEIsS0FBTSxPQUNOcTRCLFdBQVksYUFDWkMsTUFBTyxRQUNQQyxPQUFRLFNBQ1JDLFNBQVUsV0FDVnBvQixRQUFTLFVBQ1Rxb0IsUUFBUyxVQUNUQyxRQUFTLFVBQ1RDLFVBQVcsWUFDWEMsUUFBUyxVQUNUQyxZQUFhLGNBQ2JDLFdBQVksYUFDWkMsWUFBYSxjQUNiQyxVQUFXLFlBQ1hDLFNBQVUsV0FDVkMsU0FBVSxXQUNWQyxXQUFZLGFBQ1pDLFlBQWEsY0FDYkMsYUFBYyxlQUNkNzNCLEtBQU0sT0FDTjgzQixRQUFTLFVBQ1RDLFFBQVMsVUFDVGhsQixZQUFhLGNBQ2JpbEIsT0FBUSxTQUNSQyxRQUFTLFVBQ1RDLFdBQVksYUFDWkMsU0FBVSxXQUNWQyxJQUFLLE1BQ0xDLFNBQVUsV0FDVkMsU0FBVSxXQUNWQyxLQUFNLE9BQ05DLFFBQVMsVUFDVEMsS0FBTSxPQUNOQyxRQUFTLFVBQ1QvVCxNQUFPLFFBQ1BILE9BQVEsU0FDUm1VLFVBQVcsWUFDWEMsU0FBVSxXQUNWQyxTQUFVLFdBQ1ZDLE1BQU8sUUFDUC9rQixLQUFNLE9BQ05nbEIsTUFBTyxRQUNQanBDLEtBQU0sT0FDTmtwQyxXQUFZLGFBQ1pDLElBQUssTUFDTEMsT0FBUSxTQUNSQyxRQUFTLFVBQ1RDLE9BQVEsU0FDUmhuQyxNQUFPLFFBQ1BpbkMsS0FBTSxPQUNONXFDLE1BQU8sUUFDUDZxQyxRQUFTLFVBQ1RDLFNBQVUsV0FDVmxnQyxPQUFRLFNBQ1JrVixNQUFPLFFBQ1B4VCxLQUFNLE9BQ055K0IsT0FBUSxTQUNSN3BDLE1BQU8sUUFDUDhwQyxNQUFPLFFBQ1BDLE1BQU8sUUFDUC8zQixLQUFNLFFBSUowUSxHQUFJLE1BQUssQ0FBQyxFQUNWelUsR0FBUXlVLEdBQUV6VSxNQUVkeVUsR0FBRXpVLE1BQVEsU0FBVStMLEVBQU1nd0IsR0FDeEIsT0FBT0EsRUFBVSxLQUFFQSxFQUFTLzdCLEdBQU0rTCxJQUFTL0wsR0FBTStMLEVBQ25ELEVBRUEwSSxHQUFFdW5CLFlBQWMsVUFDaEJ2bkIsR0FBRXBmLFNBQVcsY0FDYixJQUNJNG1DLEdBQVMsU0FBZ0IvZSxHQUMzQixNQUFPLENBQ0xqZixTQUFVLFNBQWtCekssR0FDMUIsT0FBTzBwQixFQUFHMXBCLEVBQU1ILElBQ2xCLEVBRUosRUFDSTZvQyxHQXhPWSxTQUFtQkMsRUFBZ0JDLEdBQ2pELElBY0lqc0IsRUFBUyxTQUFnQjNjLEdBQzNCLElBQUk2b0MsRUFBWTFKLEdBQ2hCQSxHQUFlbi9CLEVBQU1NLE1BRXJCLElBQ0VOLEVBQU1NLE1BQU11Z0MsUUFBUS9pQyxRQUFRd0YsR0FDOUIsQ0FBRSxRQUNBLEdBQVN0RCxFQUFNTSxNQUFPLENBQ3BCa2dDLE9BQU8sRUFDUEssUUFBUyxHQUNUVixVQUFXLEVBQ1hjLFlBQWEsSUFHZjlCLEdBQWUwSixDQUNqQixDQUNGLEVBOEJBLE1BQU8sQ0FDTHIrQixPQTdEUyxTQUFjeEssR0FDdkIsR0FBU0EsRUFBTU0sTUFBTyxDQUNwQmtnQyxPQUFPLEVBQ1BVLE9BQVEsR0FDUkQsWUFBYSxFQUNiWixXQUFZLEdBQ1pGLFVBQVcsRUFDWFUsUUFBUyxHQUNUaUksU0FBVSxJQUFJbkosSUFDZGlCLFVBQVcsSUFBSWpCLEtBR25CLEVBa0RFbDFCLFNBQVVrUyxFQUNWaFMsU0FBVWdTLEVBQ1Y1WixLQS9CVyxTQUFnQi9DLEdBQzNCLElBQUk2b0MsRUFBWTFKLEdBQ2hCQSxHQUFlbi9CLEVBQU1NLE1BRXJCLElBQ0UsT0FBT3FvQyxFQUFlLEdBQWUsR0FBZSxHQUFlLENBQUMsRUFBR0MsR0FBZTVvQyxFQUFNQyxPQUFRLENBQUMsRUFBRyxDQUN0R0QsTUFBT0EsRUFDUHlCLFNBQVV6QixFQUFNeUIsV0FFcEIsQ0FBRSxNQUFPYixHQUNQOEcsUUFBUWtDLE1BQU1oSixFQUNoQixDQUFFLFFBQ0F1K0IsR0FBZTBKLENBQ2pCLENBQ0YsRUFrQkU3L0IsU0FoQmEsU0FBa0JoSixHQUMvQixJQUFJNm9DLEVBQVkxSixHQUNoQkEsR0FBZW4vQixFQUFNTSxNQUVyQixJQUNFTixFQUFNTSxNQUFNc2dDLFVBQVU5aUMsUUFBUXdGLEdBQ2hDLENBQUUsUUFDQTY3QixHQUFlMEosQ0FDakIsQ0FDRixFQVNGLEVDMWFJRSxHQUFTTCxHRm9FQyxTQUFpQjFuQixHQUM3QixJQUFJQyxFQUFJRCxFQUFLQyxFQUNUaGIsRUFBSSthLEVBQUsvYSxFQUNUbWIsRUF2Q04sU0FBa0M3WSxFQUFRcVgsR0FDeEMsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBRTVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBbEJOLFNBQXVDTSxFQUFRcVgsR0FDN0MsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBQzVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBQVMsQ0FBQyxFQUNWNFgsRUFBYTdjLE9BQU9xVSxLQUFLOU8sR0FHN0IsSUFBS2xILEVBQUksRUFBR0EsRUFBSXdlLEVBQVc5ZCxPQUFRVixJQUNqQ2lCLEVBQU11ZCxFQUFXeGUsR0FDYnVlLEVBQVM1VixRQUFRMUgsSUFBUSxJQUM3QjJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLElBR3ZCLE9BQU8yRixDQUNULENBS2UsQ0FBOEJNLEVBQVFxWCxHQUluRCxHQUFJNWMsT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJVSxFQUFtQi9jLE9BQU9xYyxzQkFBc0I5VyxHQUVwRCxJQUFLbEgsRUFBSSxFQUFHQSxFQUFJMGUsRUFBaUJoZSxPQUFRVixJQUN2Q2lCLEVBQU15ZCxFQUFpQjFlLEdBQ25CdWUsRUFBUzVWLFFBQVExSCxJQUFRLEdBQ3hCVSxPQUFPRyxVQUFVNmMscUJBQXFCMWMsS0FBS2lGLEVBQVFqRyxLQUN4RDJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRXpCLENBRUEsT0FBTzJGLENBQ1QsQ0FvQmMsQ0FBeUIrWSxFQUFNLENBQUMsSUFBSyxNQUU3Q2dvQixFQUFhdEssR0FBY3RkLEVBQU11ZCxhQUVqQ3NLLEVBQWlCLEdBQVMsQ0FBQyxFQUFHL21CLEVBQTBCZCxHQUFRQSxFQUFNOG5CLFFBQVUsQ0FDbEYsZUFBZ0I5bkIsRUFBTThuQixRQUNyQixDQUNEN3ZCLFVBQVcsQ0FBQyxHQUFRTixVQUFXaXdCLEVBQVk1bkIsRUFBTW1kLFVBQVksR0FBUUEsU0FBVW5kLEVBQU0vSCxXQUFhK0gsRUFBTW5iLEVBQVMsUUFBSW9HLEtBQUssT0FHeEhoRSxFQUFVLENBQUMrWSxFQUFNa0gsT0FBUWxILEVBQU0vWSxRQUFVK1ksRUFBTS9ZLFFBQVUrWSxFQUFNM2YsU0FBVTJmLEVBQU1tSCxPQUNuRixPQUFPdEgsRUFBRUcsRUFBTTlrQixTQUFXLE1BQU8yc0MsRUFBZ0IsQ0FBQzVnQyxFQUFTNFksRUFBRSxNQUFPLENBQ2xFNUgsVUFBVyxDQUFDLEdBQVFnbEIsY0FBY2h5QixLQUFLLE9BQ3JDNFUsRUFBRSxNQUFPLENBQ1g1SCxVQUFXLENBQUMsR0FBUWlsQixXQUFXanlCLEtBQUssUUFFeEMsRUV2RjJCLENBQ3pCNFUsRUFBR0EsR0FDSGhiLEVBQUdBLEtBRUw4aUMsR0FBb0IsWUFBSSxTQ0h4QixJQUFJSSxHQUFVVCxHSm9FQyxTQUFrQjFuQixHQUMvQixJQUFJQyxFQUFJRCxFQUFLQyxFQUNUaGIsRUFBSSthLEVBQUsvYSxFQUNUOGlDLEVBQVMvbkIsRUFBSytuQixPQUNkM25CLEVBQVEsR0FBeUJKLEVBQU0sQ0FBQyxJQUFLLElBQUssV0FFbERpb0IsRUFBaUJuTCxHQUFTLENBQUMsRUFBRzViLEVBQTBCZCxHQUFRQSxFQUFNOG5CLFFBQVUsQ0FDbEYsZUFBZ0I5bkIsRUFBTThuQixRQUNyQixDQUNEN3ZCLFVBQVcsQ0FBQyxHQUFRTixVQUFXcUksRUFBTTJjLFFBQVUsR0FBUUEsUUFBVSxLQUFNM2MsRUFBTStjLFVBQVksR0FBUUEsVUFBWSxLQUFNL2MsRUFBTWdkLE9BQVMsR0FBUUEsT0FBUyxLQUFxQixTQUFmaGQsRUFBTWdvQixLQUFrQixlQUFpQixLQUFxQixVQUFmaG9CLEVBQU1nb0IsS0FBbUIsZ0JBQWtCLEtBQU1ob0IsRUFBTS9ILFdBQWErSCxFQUFNbmIsRUFBUyxRQUFJb0csS0FBSyxNQUNuUytVLEVBQU12YSxRQUVMd2lDLEVBQW1Cam9CLEVBQU0vWSxTQUFXK1ksRUFBTTNmLFNBQzFDNm5DLE9BQStCMW1DLElBQXRCd2UsRUFBTXVkLFlBQTRCMWQsRUFBRThuQixFQUFRLENBQ3ZEcEssWUFBYXZkLEVBQU11ZCxZQUNuQkosVUFBVSxJQUNQLEtBQ0RsMkIsRUFBVSxDQUFDK1ksRUFBTWtILE9BQVErZ0IsRUFBa0Jqb0IsRUFBTW1ILE1BQU8rZ0IsR0FDNUQsT0FBT3JvQixFQUFFRyxFQUFNOWtCLFNBQVcsTUFBTzJzQyxFQUFnQjVnQyxFQUNuRCxFSXZGNkIsQ0FDM0I0WSxFQUFHQSxHQUNIaGIsRUFBR0EsR0FDSDhpQyxPQUFRQSxLQUdOUSxHQUFlYixHSm1GQyxTQUF1QjFuQixHQUN6QyxJQUFJQyxFQUFJRCxFQUFLQyxFQUNUaGIsRUFBSSthLEVBQUsvYSxFQUNUbWIsRUFBUSxHQUF5QkosRUFBTSxDQUFDLElBQUssTUFXakQsT0FBT0MsRUFUT0csRUFBTTlrQixRQUFVOGtCLEVBQU05a0IsUUFBVThrQixFQUFNM1QsSUFBTSxJQUFNLE1BRTNDcXdCLEdBQVMsQ0FBQyxFQUFHNWIsRUFBMEJkLEdBQVFBLEVBQU04bkIsUUFBVSxDQUNsRixlQUFnQjluQixFQUFNOG5CLFFBQ3JCLENBQ0Q3dkIsVUFBVyxDQUFDLEdBQVE4RCxNQUFPaUUsRUFBTW9vQixPQUFTLEdBQVF0TCxjQUFnQixLQUFNOWMsRUFBTXFvQixPQUFTLEdBQVF4TCxjQUFnQixLQUFxQixTQUFmN2MsRUFBTWdvQixLQUFrQixlQUFpQixLQUFxQixVQUFmaG9CLEVBQU1nb0IsS0FBbUIsZ0JBQWtCLEtBQU1ob0IsRUFBTS9ILFdBQWErSCxFQUFNbmIsRUFBUyxRQUFJb0csS0FBSyxNQUMvUCtVLEVBQU12YSxPQUFRdWEsRUFBTTNULEtBRVQyVCxFQUFNcGEsS0FBT29hLEVBQU1wYSxLQUFPb2EsRUFBTS9ZLFFBQVUrWSxFQUFNL1ksUUFBVStZLEVBQU0zZixTQUVoRixFSWxHdUMsQ0FDckN3ZixFQUFHQSxHQUNIaGIsRUFBR0EsS0NLTCxTQUFTLEtBZVAsT0FkQSxHQUFXakQsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0FzQ0EsU0FBUyxHQUFld2YsRUFBSzdlLEdBQzNCLE9BR0YsU0FBeUI2ZSxHQUN2QixHQUFJdmEsTUFBTXVELFFBQVFnWCxHQUFNLE9BQU9BLENBQ2pDLENBTFMsQ0FBZ0JBLElBT3pCLFNBQStCQSxFQUFLN2UsR0FDbEMsSUFBSStlLEVBQU8sR0FDUEMsR0FBSyxFQUNMQyxHQUFLLEVBQ0xDLE9BQUszZCxFQUVULElBQ0UsSUFBSyxJQUFpQzRkLEVBQTdCQyxFQUFLUCxFQUFJUSxPQUFPQyxjQUFtQk4sR0FBTUcsRUFBS0MsRUFBR2hRLFFBQVEyRCxRQUNoRWdNLEVBQUs3WixLQUFLaWEsRUFBR2ppQixRQUVUOEMsR0FBSytlLEVBQUtyZSxTQUFXVixHQUg4Q2dmLEdBQUssR0FLaEYsQ0FBRSxNQUFPL00sR0FDUGdOLEdBQUssRUFDTEMsRUFBS2pOLENBQ1AsQ0FBRSxRQUNBLElBQ08rTSxHQUFzQixNQUFoQkksRUFBVyxRQUFXQSxFQUFXLFFBQzlDLENBQUUsUUFDQSxHQUFJSCxFQUFJLE1BQU1DLENBQ2hCLENBQ0YsQ0FFQSxPQUFPSCxDQUNULENBL0JpQyxDQUFzQkYsRUFBSzdlLElBaUM1RCxXQUNFLE1BQU0sSUFBSWdLLFVBQVUsdURBQ3RCLENBbkNrRSxFQUNsRSxDQW9DQSxJQWtESSxHQUFVLENBQ1owTixVQUFXLFlBRVg0SSxZQUFhLHlCQUNiK25CLE9BQVEsb0JBQ1JyaEMsUUFBUyxxQkFDVHNoQyxTQUFVLHNCQUNWQyxNQUFPLG1CQUVQQyxXQUFZLHlCQUNaQyxNQUFPLG1CQUNQbDdCLEtBQU0sa0JBRU5tN0IsUUFBUyxxQkFFVEMsYUFBYyxzQkFDZHJpQixXQUFZLHdCQUVac2lCLFlBbkNTLG9CQXVDUEMsR0FBc0IsSUFBSWwxQixPQUFPLEdBQVErRCxXQ3BLN0MsU0FBUyxLQWVQLE9BZEEsR0FBVy9WLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENBc0NBLFNBQVMsR0FBZXdmLEVBQUs3ZSxHQUMzQixPQUdGLFNBQXlCNmUsR0FDdkIsR0FBSXZhLE1BQU11RCxRQUFRZ1gsR0FBTSxPQUFPQSxDQUNqQyxDQUxTLENBQWdCQSxJQU96QixTQUErQkEsRUFBSzdlLEdBQ2xDLElBQUkrZSxFQUFPLEdBQ1BDLEdBQUssRUFDTEMsR0FBSyxFQUNMQyxPQUFLM2QsRUFFVCxJQUNFLElBQUssSUFBaUM0ZCxFQUE3QkMsRUFBS1AsRUFBSVEsT0FBT0MsY0FBbUJOLEdBQU1HLEVBQUtDLEVBQUdoUSxRQUFRMkQsUUFDaEVnTSxFQUFLN1osS0FBS2lhLEVBQUdqaUIsUUFFVDhDLEdBQUsrZSxFQUFLcmUsU0FBV1YsR0FIOENnZixHQUFLLEdBS2hGLENBQUUsTUFBTy9NLEdBQ1BnTixHQUFLLEVBQ0xDLEVBQUtqTixDQUNQLENBQUUsUUFDQSxJQUNPK00sR0FBc0IsTUFBaEJJLEVBQVcsUUFBV0EsRUFBVyxRQUM5QyxDQUFFLFFBQ0EsR0FBSUgsRUFBSSxNQUFNQyxDQUNoQixDQUNGLENBRUEsT0FBT0gsQ0FDVCxDQS9CaUMsQ0FBc0JGLEVBQUs3ZSxJQWlDNUQsV0FDRSxNQUFNLElBQUlnSyxVQUFVLHVEQUN0QixDQW5Da0UsRUFDbEUsQ0FvQ0EsSUFBSSxHQUFVLENBQ1owTixVQUFXLGlCQUVYb3hCLFFBQVMsMEJBQ1RodEMsS0FBTSx1QkFDTmtMLFFBQVMsMEJBQ1QraEMsT0FBUSx5QkFDUkMsT0FBUSx5QkFDUmx0QixNQUFPLHdCQUVQbXRCLFdBQVkseUJBQ1pDLFdBQVkseUJBQ1pDLGdCQUFpQixnQ0FDakJDLGtCQUFtQixrQ0FDbkJDLFdBQVksK0JBQ1pDLGFBQWMsZ0NBQ2RDLFVBQVcsNkJBQ1hDLFVBQVcsbUNBR1RDLEdBQWdCLENBQ2xCL3hCLFVBQVcsaUJBQ1gsTUFBUyxZQUNUZ3lCLElBQUssZ0JBRUwxaUMsUUFBUyxxQkFDVHc4QixNQUFPLG1CQUNQbUcsVUFBVyx3QkFDWEMsS0FBTSxrQkFDTkMsVUFBVyx3QkFDWEMsU0FBVSxzQkFFVi9NLE9BQVEsb0JBQ1JnTixVQUFXLHVCQUNYM3RCLFNBQVUsc0JBQ1Y0dEIsZUFBZ0IsNkJBQ2hCQyxhQUFjLDJCQUNkQyxVQUFXLHdCQUNYQyxZQUFhLHNCQUNiQyxVQUFXLHdCQUNYMXBCLFNBQVUsc0JBQ1YycEIsT0FBUSxvQkFDUmpFLFNBQVUsc0JBQ1ZrRSxpQkFBa0IsNkJBQ2xCQyxTQUFVLHdCQ3RKUkMsR0FBYW5ELEdEMEpDLFNBQXFCMW5CLEdBQ3JDLElBQUlDLEVBQUlELEVBQUtDLEVBQ1RoYixFQUFJK2EsRUFBSy9hLEVBQ1RpYixFQUFXRixFQUFLRSxTQUNoQkMsRUFBWUgsRUFBS0csVUFDakJ5Z0IsRUFBUzVnQixFQUFLNGdCLE9BQ2Q2RyxFQUFTem5CLEVBQUt5bkIsT0FDZHFELEVBbEhOLFNBQWtDdmpDLEVBQVFxWCxHQUN4QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFFNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFsQk4sU0FBdUNNLEVBQVFxWCxHQUM3QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFDNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFBUyxDQUFDLEVBQ1Y0WCxFQUFhN2MsT0FBT3FVLEtBQUs5TyxHQUc3QixJQUFLbEgsRUFBSSxFQUFHQSxFQUFJd2UsRUFBVzlkLE9BQVFWLElBQ2pDaUIsRUFBTXVkLEVBQVd4ZSxHQUNidWUsRUFBUzVWLFFBQVExSCxJQUFRLElBQzdCMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsSUFHdkIsT0FBTzJGLENBQ1QsQ0FLZSxDQUE4Qk0sRUFBUXFYLEdBSW5ELEdBQUk1YyxPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlVLEVBQW1CL2MsT0FBT3FjLHNCQUFzQjlXLEdBRXBELElBQUtsSCxFQUFJLEVBQUdBLEVBQUkwZSxFQUFpQmhlLE9BQVFWLElBQ3ZDaUIsRUFBTXlkLEVBQWlCMWUsR0FDbkJ1ZSxFQUFTNVYsUUFBUTFILElBQVEsR0FDeEJVLE9BQU9HLFVBQVU2YyxxQkFBcUIxYyxLQUFLaUYsRUFBUWpHLEtBQ3hEMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FFekIsQ0FFQSxPQUFPMkYsQ0FDVCxDQStGc0IsQ0FBeUIrWSxFQUFNLENBQUMsSUFBSyxJQUFLLFdBQVksWUFBYSxTQUFVLFdBRTdGSSxFQUFRcUIsRUFBWXFwQixHQUdwQnpxQixFQUFhLEdBRERILElBQzJCLEdBQ3ZDNnFCLEVBQWExcUIsRUFBVyxHQUN4QjJxQixFQUFnQjNxQixFQUFXLEdBRzNCNHFCLEVBQWEsR0FEQS9xQixHQUFTLEdBQ2tCLEdBQ3hDZ3JCLEVBQWNELEVBQVcsR0FDekJFLEVBQWlCRixFQUFXLEdBRzVCRyxFQUFhLEdBREFsckIsR0FBUyxHQUNrQixHQUN4Q21yQixFQUFpQkQsRUFBVyxHQUM1QkUsRUFBb0JGLEVBQVcsR0FHL0JHLEVBQWEsR0FEQXJyQixHQUFTLEdBQ2tCLEdBQ3hDc3JCLEVBQW9CRCxFQUFXLEdBQy9CRSxFQUF1QkYsRUFBVyxHQUVsQ0csRUFBYzlLLElBQ2QrSyxFQUFjL0ssSUFDZGdMLEVBQWNoTCxJQUNkaUwsRUFBbUJqTCxJQUVuQmtMLEVBQTRCLFdBQzlCLElBQUlDLEVBQVdILEVBQVk5SyxRQUV0QmlMLElBSUxULEVBQWtCUyxFQUFTQyxVQUFZLEdBQ3ZDUCxFQUFxQk0sRUFBUzd1QyxjQUFnQjZ1QyxFQUFTQyxVQUFZRCxFQUFTRSx3QkFBd0JodkMsUUFBVSxHQUNoSCxFQUVBa2pCLEVBQVUsV0FDSDRxQixJQUlMVyxFQUFZNUssUUFBVWlLLEVBQVdsdkMsY0FBYyxJQUFJbVksT0FBTyxHQUFRcTFCLFNBQ2xFc0MsRUFBWTdLLFFBQVVpSyxFQUFXbHZDLGNBQWMsSUFBSW1ZLE9BQU8sR0FBUW8xQixTQUNsRXdDLEVBQVk5SyxRQUFVaUssRUFBV2x2QyxjQUFjLElBQUltWSxPQUFPLEdBQVE3WCxPQUNwRSxFQUFHLENBQUM0dUMsSUFDSjVxQixFQUFVLFdBQ1IsR0FBS3lyQixFQUFZOUssUUFBakIsQ0FJQSxJQUFJbmxCLEVBQVMsV0FDWG13QixHQUNGLEVBR0EsT0FEQTFvQixFQUFVLFNBQVV6SCxHQUNiLFdBQ0xvSSxFQUFZLFNBQVVwSSxFQUN4QixDQVRBLENBVUYsRUFBRyxDQUFDaXdCLEVBQVk5SyxVQUNoQjNnQixFQUFVLFdBQ1IyckIsR0FDRixFQUFHLENBQUNGLEVBQVk5SyxRQUFTb0ssSUFDekIsSUFwT3VCbnRCLEVBQUt6YyxFQUFLL0QsRUFvTzdCK3JDLE9BQThCMW5DLElBQWpCd2UsRUFBTWlwQixhQUF3Q3puQyxJQUFoQndlLEVBQU1qRSxNQUNqRG90QixPQUE4QjNuQyxJQUFqQndlLEVBQU1ncEIsYUFBZ0R4bkMsSUFBeEJ3ZSxFQUFNOHJCLGNBQ2pEQyxFQUFVL3JCLEVBQU0rckIsU0FBVyxXQUMzQkMsRUFBNEIsV0FBWkQsR0FBd0I3QyxHQUEwQixhQUFaNkMsR0FBMEJkLEVBQ2hGZ0IsRUFBK0IsV0FBWkYsR0FBd0I1QyxHQUEwQixhQUFaNEMsR0FBMEJYLEVBRW5GdkQsRUFBaUIsR0FBUyxDQUFDLEVBQUcvbUIsRUFBMEJkLEVBQU8sQ0FDakVnQixPQUFRLENBQUMsV0FFWGhCLEVBQU04bkIsUUFBVSxDQUNkLGVBQWdCOW5CLEVBQU04bkIsUUFDckJULEVBQU8sU0FBVTVvQyxHQUNsQixPQUFPQSxJQUFRa3NDLElBQWVDLEVBQWNuc0MsR0FBTXVoQixFQUFNa3NCLEtBQU9sc0IsRUFBTWtzQixJQUFJenRDLEdBQzNFLEdBQUksQ0FDRndaLFVBQVcsQ0FBQyxHQUFRTixVQUFXcUksRUFBTXlwQixVQUFZLEdBQVFBLFVBQVksS0FBTXVDLEVBQWdCLEdBQVF4QyxVQUFZLEtBQU15QyxFQUFtQixHQUFRMUMsYUFBZSxLQUFNTCxFQUFhLEdBQVFBLFdBQWEsS0FBTUMsRUFBYSxHQUFRQSxXQUFhLEtBQXFCLFNBQWZucEIsRUFBTWdvQixLQUFrQixlQUFpQixLQUFxQixVQUFmaG9CLEVBQU1nb0IsS0FBbUIsZ0JBQWtCLEtBQU1ob0IsRUFBTS9ILFdBQWErSCxFQUFNbmIsRUFBUyxRQUFJb0csS0FBSyxNQUMvWCtVLEVBQU1tc0IsYUFFTGxFLEVBQW1CcG9CLEVBQUUsTUFBTyxDQUM5QjVILFVBQVcsQ0FBQyxHQUFRaFIsUUFBUytZLEVBQU1vc0IsS0FBTyxHQUFRdkQsWUFBYyxNQUFNNTlCLEtBQUssS0FDM0VoUCxNQUFPK2pCLEVBQU0vakIsT0FDWixDQUFDK2pCLEVBQU1pcEIsT0FBU2pwQixFQUFNaXBCLE9BQVNqcEIsRUFBTWpFLE1BQVE4RCxFQUFFLE1BQU8sQ0FDdkQ1SCxVQUFXLENBQUMsR0FBUWd4QixPQUFRLEdBQVFHLGlCQUFpQm4rQixLQUFLLE1BQ3pENFUsRUFBRSxNQUFPLENBQ1Y1SCxVQUFXLEdBQVE4RCxPQUNsQmlFLEVBQU1qRSxRQUFVLEtBQU04RCxFQUFFLE9BNVBKbEMsRUE0UDJCLENBQ2hEMUYsVUFBVyxHQUFRbGMsTUE3UE9tRixFQThQekIyRCxFQUFFb2dDLFNBOVA0QjluQyxFQThQbEIsV0FDYjR0QyxHQUFlLEdBQ2ZzQixhQUFhWixFQUFpQi9LLFNBQzlCK0ssRUFBaUIvSyxRQUFVaHlCLFdBQVcsV0FDcENxOEIsR0FBZSxFQUNqQixFQXpHeUIsR0EwRzNCLEVBblFJN3BDLEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsR0F3UEhxQyxFQUFNL1ksU0FBVytZLEVBQU1qa0IsTUFBUWlrQixFQUFNb3NCLE1BQU9wc0IsRUFBTWdwQixPQUFTbnBCLEVBQUUsTUFBTyxDQUN0RTVILFVBQVcsR0FBUSt3QixRQUNsQmhwQixFQUFNZ3BCLFFBQVVocEIsRUFBTThyQixjQUFnQmpzQixFQUFFLE1BQU8sQ0FDaEQ1SCxVQUFXLENBQUMsR0FBUSt3QixPQUFRLEdBQVFLLGtCQUFtQkssR0FBY0MsS0FBSzErQixLQUFLLE1BQzlFNFUsRUFBRSxNQUFPLENBQ1Y1SCxVQUFXLEdBQVE4d0IsU0FDbEIvb0IsRUFBTThyQixnQkFBa0IsT0FDdkI3a0MsRUFBVSxDQUFDK1ksRUFBTWtILE9BQVErZ0IsRUFBa0Jqb0IsRUFBTW1ILE9BQ3JELE9BQU90SCxFQUFFRyxFQUFNOWtCLFNBQVcsT0FBUTJzQyxFQUFnQjVnQyxFQUNwRCxFQzVRbUMsQ0FDakM0WSxFQUFHQSxHQUNIaGIsRUFBR0EsR0FDSGliLFNBQVVBLEdBQ1ZDLFVBQVdBLEdBQ1h5Z0IsT0FBUUEsR0FDUjZHLE9BQVFBLEtBRVZvRCxHQUF3QixZQUFJLGFDTDVCLElBdUVJNkIsR0FBaUJoRixHSDZIUCxTQUFpQnRsQixHQUM3QixJQUFJbkMsRUFBSW1DLEVBQU1uQyxFQUNWaGIsRUFBSW1kLEVBQU1uZCxFQUNWaWIsRUFBV2tDLEVBQU1sQyxTQUNqQkMsRUFBWWlDLEVBQU1qQyxVQUNsQnlnQixFQUFTeGUsRUFBTXdlLE9BQ2Y2RyxFQUFTcmxCLEVBQU1xbEIsT0FDZnBILEVBQWFqZSxFQUFNaWUsV0FDbkJzTSxFQUFPdnFCLEVBQU11cUIsS0FDYjVFLEVBQVMzbEIsRUFBTTJsQixPQUNmbUIsRUFBc0I5bUIsRUFBTThtQixvQkFDNUI5b0IsRUFuS04sU0FBa0M3WSxFQUFRcVgsR0FDeEMsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBRTVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBbEJOLFNBQXVDTSxFQUFRcVgsR0FDN0MsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBQzVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBQVMsQ0FBQyxFQUNWNFgsRUFBYTdjLE9BQU9xVSxLQUFLOU8sR0FHN0IsSUFBS2xILEVBQUksRUFBR0EsRUFBSXdlLEVBQVc5ZCxPQUFRVixJQUNqQ2lCLEVBQU11ZCxFQUFXeGUsR0FDYnVlLEVBQVM1VixRQUFRMUgsSUFBUSxJQUM3QjJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLElBR3ZCLE9BQU8yRixDQUNULENBS2UsQ0FBOEJNLEVBQVFxWCxHQUluRCxHQUFJNWMsT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJVSxFQUFtQi9jLE9BQU9xYyxzQkFBc0I5VyxHQUVwRCxJQUFLbEgsRUFBSSxFQUFHQSxFQUFJMGUsRUFBaUJoZSxPQUFRVixJQUN2Q2lCLEVBQU15ZCxFQUFpQjFlLEdBQ25CdWUsRUFBUzVWLFFBQVExSCxJQUFRLEdBQ3hCVSxPQUFPRyxVQUFVNmMscUJBQXFCMWMsS0FBS2lGLEVBQVFqRyxLQUN4RDJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRXpCLENBRUEsT0FBTzJGLENBQ1QsQ0FnSmMsQ0FBeUJtYixFQUFPLENBQUMsSUFBSyxJQUFLLFdBQVksWUFBYSxTQUFVLFNBQVUsYUFBYyxPQUFRLFNBQVUsd0JBR2hJd3FCLEVBQWUsR0FERHZNLEVBQVc1WixFQUF3QkgsR0FDTixHQUMzQ3VtQixFQUFrQkQsRUFBYSxHQUMvQjlrQixFQUEwQjhrQixFQUFhLEdBR3ZDdnNCLEVBQWEsR0FEREgsSUFDMkIsR0FDdkM2cUIsRUFBYTFxQixFQUFXLEdBQ3hCMnFCLEVBQWdCM3FCLEVBQVcsR0FFM0J5c0IsRUFBZ0JsTSxJQUNoQm1NLEVBQWFuTSxJQUNib00sRUFBZXBNLElBQ2ZyYSxHQUFhc21CLEdBQW1Cdm1CLEdBQXdCQyxVQUN4REMsR0FBbUJxbUIsR0FBbUJ2bUIsR0FBd0JFLGdCQUU5RHltQixFQUFvQixTQUEyQnhZLEdBQ2pELElBQUkxTSxFQUFTME0sRUFBTTFNLE9BQ2ZtbEIsRUFBa0J6WSxFQUFNbE0sVUFDeEJBLE9BQWdDLElBQXBCMmtCLEVBQTZCOXNCLEVBQU1tSSxVQUFZMmtCLEVBQzNEL2tCLEVBQVdzTSxFQUFNdE0sU0FDckIsTUFBTyxDQUNMMGtCLGdCQUFpQkEsRUFDakIva0Isd0JBQXlCQSxFQUN6QnZELFdBQVluRSxFQUFNbUUsV0FDbEJuRSxNQUFPLEdBQVMsQ0FBQyxFQUFHQSxFQUFPLENBQ3pCbUksVUFBV0EsSUFFYlIsT0FBUUEsRUFDUkMsWUFBYSxDQUNYcnNCLEdBQUlvdkMsRUFDSm9DLFVBQVdILEVBQWFsTSxRQUN4QnNNLFdBQVlOLEVBQWNoTSxTQUU1QnJaLFVBQVcsR0FBUXNoQixRQUNuQjNoQixnQkFBaUIsR0FBUVQsV0FDekJ3QixTQUFVQSxFQUVkLEVBUUlrbEIsRUFBYSxXQUNmLElBQUk1YSxFQUFRL3lCLFVBQVVxQixPQUFTLFFBQXNCYSxJQUFqQmxDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxDQUFDLEVBQzdFNm9CLEVBQVlrSyxFQUFNbEssVUFDbEJKLEVBQVdzSyxFQUFNdEssU0FFckIsT0FBT04sRUFBb0JvbEIsRUFBa0IsQ0FDM0NsbEIsUUFBUSxFQUNSUSxVQUFXQSxFQUNYSixTQUFVQSxJQUVkLEVBRUltbEIsRUFBVSxXQUNaLE9BQU9sdEIsRUFBTTBvQixPQUFTaUMsR0FBY0EsRUFBVzduQixVQUFVNVksU0FBUyxHQUFRdytCLFFBQVUzbUIsRUFBaUIsQ0FDbkc3bUIsUUFBU3l2QyxFQUNUMW9CLGVBQWdCLFVBQ2hCdGxCLEtBQU0sVUFDTnVOLFNBQVUsSUFBSzBKLE9BQU8sUUFBUyxNQUVuQyxFQVlBbU0sRUFBVSxXQUNINHFCLElBSUwrQixFQUFjaE0sUUFBVWlLLEVBQVdsdkMsY0FBYyxJQUFJbVksT0FBTyxHQUFRMjBCLFdBQ3BFb0UsRUFBV2pNLFFBQVVpSyxFQUFXbHZDLGNBQWMsSUFBSW1ZLE9BQU8sR0FBUTQwQixRQUNqRW9FLEVBQWFsTSxRQUFVaUssRUFBV2x2QyxjQUFjLElBQUltWSxPQUFPLEdBQVEzTSxVQUNyRSxFQUFHLENBQUMwakMsSUFFSjVxQixFQUFVLFdBQ1IsR0FBSzRxQixJQUFjM3FCLEVBQU1XLFNBQXpCLENBSUEsSUFBSXdzQixFQUFlLFNBQVNBLEVBQWEzdEMsR0FDdkMsS0FBSXdnQixFQUFNb3RCLGdCQXpCTHB0QixFQUFNeW9CLFlBQWNrQyxHQUFjQSxFQUFXN25CLFVBQVU1WSxTQUFTLEdBQVF1K0IsYUFBZTFtQixFQUFpQixDQUM3RzdtQixRQUFTeXZDLEVBQ1Qxb0IsZUFBZ0IsVUFDaEJ0bEIsS0FBTSxVQUNOdU4sU0FBVSxJQUFLMEosT0FBTyxjQUFlLFFBcUJTczVCLE1BRWhDLFdBQVYxdEMsRUFBRTBCLEtBQThCLFFBQVYxQixFQUFFMEIsS0FBZSxDQUV6QyxJQUFJbXNDLEVBQWM3eEMsU0FBUzh4QyxpQkFBaUJ4RSxHQUV4Q3VFLEVBQVlBLEVBQVkxc0MsT0FBUyxLQUFPZ3FDLElBQzFDc0MsSUFDQXRwQixFQUFZLFVBQVd3cEIsR0FFM0IsQ0FDRixFQUdBLE9BREFucUIsRUFBVSxVQUFXbXFCLEdBQ2QsV0FDTHhwQixFQUFZLFVBQVd3cEIsRUFDekIsQ0FuQkEsQ0FvQkYsRUFBRyxDQUFDeEMsRUFBWTNxQixFQUFNVyxXQUV0QlosRUFBVSxXQUNINHFCLElBQWN2a0IsSUFJZnBHLEVBQU1VLEtBQ0p5RixHQUNGOG1CLElBRU9qdEIsRUFBTUcsT0FDVmdHLEdBakZBc0IsRUFBb0JvbEIsRUFBa0IsQ0FDM0NsbEIsUUFBUSxNQW9GWixFQUFHLENBQUNnakIsRUFBWXZrQixFQUFpQkQsRUFBV25HLEVBQU1VLEtBQU1WLEVBQU1HLE9BRTlELElBclZ1QnhDLEVBQUt6YyxFQUFLL0QsRUFxVjdCMHFDLEVBQWlCLEdBQVMsQ0FBQyxFQUFHL21CLEVBQTBCZCxFQUFPLENBQ2pFZ0IsT0FBUSxDQUFDLFdBRVhxbUIsRUFBTyxTQUFVNW9DLEdBQ2YsT0FBT0EsSUFBUWtzQyxJQUFlQyxFQUFjbnNDLEdBQU11aEIsRUFBTWtzQixLQUFPbHNCLEVBQU1rc0IsSUFBSXp0QyxHQUMzRSxJQTFWdUJrZixFQTBWSCxDQUNsQjFGLFVBQVcsQ0FBQytILEVBQU11dEIsaUJBQW1CLEdBQVE1MUIsVUFBV3FJLEVBQU00RixzQkFBdUI1RixFQUFNeW9CLFdBQWEsR0FBUUEsV0FBYSxLQUFNem9CLEVBQU0wb0IsTUFBUSxHQUFRQSxNQUFRLEtBQU0xb0IsRUFBTXVvQixTQUFXLEdBQVFLLGFBQWUsS0FDaE0sU0FBZjVvQixFQUFNZ29CLEtBQWtCLGVBQWlCLEtBQXFCLFVBQWZob0IsRUFBTWdvQixLQUFtQixnQkFBa0IsS0FBTWhvQixFQUFNL0gsV0FBYStILEVBQU1uYixFQUFTLFFBQUlvRyxLQUFLLEtBQzNJLGdCQUFpQitVLEVBQU0yRixRQUV2QixtQkFBb0IzRixFQUFNbUUsWUEvVktobkIsRUFnV25CLFNBQVVxQyxHQUNsQkEsRUFBRXFILFNBQVc4akMsR0FBY25yQyxFQUFFcUgsU0FBVzZsQyxFQUFjaE0sU0FBV2xoQyxFQUFFcUgsU0FBVzhsQyxFQUFXak0sU0FJekZ3TSxLQUtKRCxHQUNGLEdBM1c0Qi9yQyxFQWdXekIyRCxFQUFFdVgsV0EvVk11QixFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsSUFpV0g2dkIsRUFBT3h0QixFQUFNeXRCLGNBQWdCenRCLEVBQU15dEIsYUFBYTlzQyxPQUFTa2YsRUFBRTBzQixFQUFNdnNCLEVBQU15dEIsYUFBYSxJQUFNenRCLEVBQU0wdEIsT0FBUzF0QixFQUFNMHRCLE1BQU0vc0MsT0FBU3FmLEVBQU0wdEIsTUFBTSxHQXhML0gsU0FBb0I5dEIsR0FDbkMsSUFFSUksRUFBUUosRUFBS0ksTUFDakIsT0FBT0gsRUFIQ0QsRUFBS0MsR0FDRkQsRUFBSzJzQixLQUVELENBQ2J4d0MsS0FBTWlrQixFQUFNL1ksU0FBVytZLEVBQU1qa0IsTUFBUWlrQixFQUFNb3NCLE1BQVFwc0IsRUFBTTNmLFNBQ3pEbkYsUUFBUzhrQixFQUFNOWtCLFFBQ2Y2d0MsUUFBUy9yQixFQUFNK3JCLFFBQ2Y5ekIsVUFBVytILEVBQU0vSCxVQUNqQit3QixPQUFRaHBCLEVBQU1ncEIsT0FDZDhDLGNBQWU5ckIsRUFBTThyQixjQUNyQkssWUFBYW5zQixFQUFNbXNCLFlBQ25CMUMsVUFBV3pwQixFQUFNeXBCLFVBQ2pCUixPQUFRanBCLEVBQU1pcEIsT0FDZGh0QyxNQUFPK2pCLEVBQU0vakIsTUFDYjhmLE1BQU9pRSxFQUFNakUsT0FFakIsQ0F1S3FKNHhCLENBQVcsQ0FDNUo5dEIsRUFBR0EsRUFDSDBzQixLQUFNQSxFQUNOdnNCLE1BQU9BLElBRUx1ZCxFQUFjdmQsRUFBTXVkLFlBQ3BCdDJCLEVBQVUsQ0FBQzRZLEVBQUUsTUFBTyxDQUN0QjVILFVBQVcsR0FBUXN3QixXQUNqQjFvQixFQUFFLE1BQU8sQ0FDWDVILFVBQVcsR0FBUXV3QixRQUNqQjNvQixFQUFFLE1BQU8sQ0FDWDVILFVBQVcsQ0FBQyxHQUFRaFIsUUFBUytZLEVBQU1vc0IsS0FBTyxHQUFRdkQsWUFBYyxNQUFNNTlCLEtBQUssTUFDMUUsQ0FBQytVLEVBQU15b0IsV0FBYSxLQUFPNW9CLEVBQUU4bkIsRUFBUSxDQUN0Q3BLLGlCQUE2Qi83QixJQUFoQis3QixFQUE0QkEsRUF4TWxCLEVBeU12QkosVUFBVSxJQUNSbmQsRUFBTWtILE9BQVFzbUIsRUFBTXh0QixFQUFNbUgsU0FDOUIsT0FBT3RILEVBQUUsTUFBT2dvQixFQUFnQjVnQyxFQUNsQyxFR25UbUMsQ0FDakM0WSxFQUFHQSxHQUNIaGIsRUFBR0EsR0FDSGliLFNBQVVBLEdBQ1ZDLFVBQVdBLEdBQ1h5Z0IsT0FBUUEsR0FDUjZHLE9BQVFBLEdBQ1JwSCxXQUFZQSxHQUNaMEgsT0FBUUEsR0FDUjRFLEtBQU05QixHQUNOM0Isb0JBQXFCQSxLQUV2QndELEdBQTRCLFlBQUksaUJBQ2hDLElBUUlzQixHQUFtQi9wQixFQUFNLENBQzNCem9CLFFBVFksQ0FDWjRRLEtBQU0sU0FDTnVaLGNBekJNLGtCQTBCTm5CLFVBQVcsaUJBQ1hvQixlQUFnQixPQUFPNVIsT0FsQ2YscUJBbUNSNVIsU0FBVXNxQyxHQUNWL3JCLFlBQWEsUUFBUTNNLE9BckNSLDZCQTBDWGk2QixHQUFTdkcsR0FBS3NHLEdBQWlCaGpDLE9BQVEsQ0FDekNpVixFQUFHQSxHQUNIQyxTQUFVQSxHQUNWQyxVQUFXQSxLQ3JHYixTQUFTLEdBQVFwQyxHQVdmLE9BVEUsR0FEb0IsbUJBQVgyQixRQUFvRCxpQkFBcEJBLE9BQU9DLFNBQ3RDLFNBQVU1QixHQUNsQixjQUFjQSxDQUNoQixFQUVVLFNBQVVBLEdBQ2xCLE9BQU9BLEdBQXlCLG1CQUFYMkIsUUFBeUIzQixFQUFJdk8sY0FBZ0JrUSxRQUFVM0IsSUFBUTJCLE9BQU92ZCxVQUFZLGdCQUFrQjRiLENBQzNILEVBR0ssR0FBUUEsRUFDakIsQ0FFQSxTQUFTLEdBQWdCQSxFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0FFQSxTQUFTLEdBQVF3TCxFQUFRa1QsR0FDdkIsSUFBSS9ILEVBQU9yVSxPQUFPcVUsS0FBS25MLEdBRXZCLEdBQUlsSixPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlDLEVBQVV0YyxPQUFPcWMsc0JBQXNCblQsR0FDdkNrVCxJQUFnQkUsRUFBVUEsRUFBUW5KLE9BQU8sU0FBVW9KLEdBQ3JELE9BQU92YyxPQUFPMlgseUJBQXlCek8sRUFBUXFULEdBQUtULFVBQ3RELElBQ0F6SCxFQUFLOVEsS0FBSzlGLE1BQU00VyxFQUFNaUksRUFDeEIsQ0FFQSxPQUFPakksQ0FDVCxDQTBEQSxTQUFTLEdBQWU2SSxFQUFLN2UsR0FDM0IsT0FHRixTQUF5QjZlLEdBQ3ZCLEdBQUl2YSxNQUFNdUQsUUFBUWdYLEdBQU0sT0FBT0EsQ0FDakMsQ0FMUyxDQUFnQkEsSUFPekIsU0FBK0JBLEVBQUs3ZSxHQUNsQyxJQUFJK2UsRUFBTyxHQUNQQyxHQUFLLEVBQ0xDLEdBQUssRUFDTEMsT0FBSzNkLEVBRVQsSUFDRSxJQUFLLElBQWlDNGQsRUFBN0JDLEVBQUtQLEVBQUlRLE9BQU9DLGNBQW1CTixHQUFNRyxFQUFLQyxFQUFHaFEsUUFBUTJELFFBQ2hFZ00sRUFBSzdaLEtBQUtpYSxFQUFHamlCLFFBRVQ4QyxHQUFLK2UsRUFBS3JlLFNBQVdWLEdBSDhDZ2YsR0FBSyxHQUtoRixDQUFFLE1BQU8vTSxHQUNQZ04sR0FBSyxFQUNMQyxFQUFLak4sQ0FDUCxDQUFFLFFBQ0EsSUFDTytNLEdBQXNCLE1BQWhCSSxFQUFXLFFBQVdBLEVBQVcsUUFDOUMsQ0FBRSxRQUNBLEdBQUlILEVBQUksTUFBTUMsQ0FDaEIsQ0FDRixDQUVBLE9BQU9ILENBQ1QsQ0EvQmlDLENBQXNCRixFQUFLN2UsSUFpQzVELFdBQ0UsTUFBTSxJQUFJZ0ssVUFBVSx1REFDdEIsQ0FuQ2tFLEVBQ2xFLENEaEJBckksT0FBT2tzQyxvQkFBb0JGLElBQWtCNzRCLE9BQU8sU0FBVXFGLEdBQzVELE1BQWEsV0FBTkEsQ0FDVCxHQUFHMWQsUUFBUSxTQUFVMGQsR0FDbkIsT0FBT3l6QixHQUFPenpCLEdBQUt3ekIsR0FBaUJ4ekIsRUFDdEMsR0FDQXl6QixHQUFvQixZQUFJLFNDK0N4QixJQUFJLEdBQVUsQ0FDWmwyQixVQUFXLGlCQUNYLE1BQVMsWUFDVGd5QixJQUFLLGdCQUVMMWlDLFFBQVMscUJBQ1R3OEIsTUFBTyxtQkFDUG1HLFVBQVcsd0JBQ1hDLEtBQU0sa0JBQ05DLFVBQVcsd0JBQ1hDLFNBQVUsc0JBRVYvTSxPQUFRLG9CQUNSZ04sVUFBVyx1QkFDWDN0QixTQUFVLHNCQUNWNHRCLGVBQWdCLDZCQUNoQkMsYUFBYywyQkFDZEMsVUFBVyx3QkFDWEMsWUFBYSxzQkFDYkMsVUFBVyx3QkFDWDFwQixTQUFVLHNCQUNWMnBCLE9BQVEsb0JBQ1JqRSxTQUFVLHNCQUNWa0UsaUJBQWtCLDZCQUNsQkMsU0FBVSx3QkM5S1IsR0FBTyxDQUVUdUQsVUFSYyxFQVNkQyxvQkFSd0IsRUFTeEJDLFVBUmMsR0FTZEMsZ0JBUG9CLEdBUXBCQyxlQUFnQixHQUNoQkMsc0JBQXVCLEdBR3ZCQyx5QkFBMEIsRUFDMUJDLHdCQUF5QixFQUN6QkMsWUFBYSxHQUNiQyxrQkFBbUIsR0FDbkJDLGtCQUFtQixHQUVuQkMsa0JBQW1CLEdBQ25CQyxxQkFBc0IsR0FFdEJDLGVBQWdCLEdBRWhCQyxzQkFBdUIsR0FFdkJDLHFCQUFzQixHQUd0QkMsNkJBQThCLEtBQzlCQyx1QkFBd0IsSUFDeEJDLHdCQUF5QixJQUN6QkMsdUJBQXdCLElBRXhCQyxtQkFBb0IsT0FDcEJDLGlDQUFrQyw2QkFDbENDLG1DQUFvQyw0QkFDcENDLG1DQUFvQyw0QkFDcENDLHdCQUF5QixXQUV6QkMsa0JBQW1CLElBQ25CQyxtQkFBb0IsSUFDcEJDLG1CQUFvQixJQUNwQkMsaUJBQWtCLElBQ2xCQyxnQkFBaUIsR0FDakJDLFlBQWEsSUFFYkMsY0FBZSxlQUVmQyxxQkFBc0IsZUFFdEJDLG1CQUFvQixlQUVwQkMsb0JBQXFCLGdCQUVyQkMseUJBQTBCLGdCQUMxQkMsdUJBQXdCLGdCQUN4QkMsdUJBQXdCLFVBQ3hCQyxzQkFBdUIsYUFDdkJDLHNCQUF1QixnQkFFdkJDLHlCQUEwQixJQUMxQkMseUJBQTBCLElBQzFCQywyQkFBNEIsSUFDNUJDLDBCQUEyQixHQUMzQkMsMEJBQTJCLElBQzNCQywwQkFBMkIsSUFDM0JDLHlCQUEwQixJQUMxQkMsOEJBQStCLElBQy9CQyw2QkFBOEIsSUFDOUJDLG9DQUFxQyxJQUVyQ0MsZ0NBQWlDLElBQ2pDQywrQkFBZ0MsR0FDaENDLHdCQUF5QixFQUN6QkMsd0JBQXlCLElBQ3pCQywwQkFBMkIsR0FDM0JDLHlCQUEwQixHQUMxQkMseUJBQTBCLElBQzFCQyx5QkFBMEIsSUFDMUJDLHdCQUF5QixHQUN6QkMsNkJBQThCLElBQzlCQyw0QkFBNkIsSUFDN0JDLGtDQUFtQyxJQUVuQ0MsK0JBQWdDLElBQ2hDQyw4QkFBK0IsR0FRL0JDLDBCQUEyQixJQUUzQkMsa0NBQW1DLElBRW5DQyxtQ0FBb0MsSUFFcENDLDBCQUEyQixLQUMzQkMsOEJBQStCLEtBQy9CQyxxQkFBc0IsS0FFdEJDLFVBQVcsSUFDWEMsT0FBUSxJQUNSQyxVQUFXLElBQ1hDLFNBQVUsSUFDVkMsZUFBZ0IsSUFDaEJDLFNBQVUsS0MvR1osU0FBUyxLQWVQLE9BZEEsR0FBVzl3QyxPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDQTRFQSxJQUFJcXpDLEdsQm1PdUIsV0FDekIsR0FBSSxFQUFVLENBQ1osSUFBSXAzQyxFQUFLQyxTQUFTSyxjQUFjLGVBS2hDLElBQUssSUFBSWdKLEtBQUtpZCxFQU1aLFFBQWlCdGdCLElBRkxqRyxFQUFHVSxNQUVMNEksR0FDUixPQUFPaWQsRUFBS2pkLEVBR2xCLENBQ0YsQ2tCclAwQit0QyxHQXdGdEIsR0FBVSxDQUNaajdCLFVBQVcsWUFFWGs3QixLQUFNLGtCQUNOQyxNQUFPLG1CQUVQQyxjQUFlLDJCQUNmQyxlQUFnQiwrQkMzTGRDLEdBQVMzTCxHRDhMQyxTQUFpQjFuQixHQUM3QixJQXpJc0JkLEVBQUs3ZSxFQXlJdkI0ZixFQUFJRCxFQUFLQyxFQUNUaGIsRUFBSSthLEVBQUsvYSxFQUNUd2lDLEVBQVN6bkIsRUFBS3luQixPQUNkN0csRUFBUzVnQixFQUFLNGdCLE9BQ2QxZ0IsRUFBV0YsRUFBS0UsU0FDaEJDLEVBQVlILEVBQUtHLFVBQ2pCQyxFQXBLTixTQUFrQzdZLEVBQVFxWCxHQUN4QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFFNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFsQk4sU0FBdUNNLEVBQVFxWCxHQUM3QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFDNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFBUyxDQUFDLEVBQ1Y0WCxFQUFhN2MsT0FBT3FVLEtBQUs5TyxHQUc3QixJQUFLbEgsRUFBSSxFQUFHQSxFQUFJd2UsRUFBVzlkLE9BQVFWLElBQ2pDaUIsRUFBTXVkLEVBQVd4ZSxHQUNidWUsRUFBUzVWLFFBQVExSCxJQUFRLElBQzdCMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsSUFHdkIsT0FBTzJGLENBQ1QsQ0FLZSxDQUE4Qk0sRUFBUXFYLEdBSW5ELEdBQUk1YyxPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlVLEVBQW1CL2MsT0FBT3FjLHNCQUFzQjlXLEdBRXBELElBQUtsSCxFQUFJLEVBQUdBLEVBQUkwZSxFQUFpQmhlLE9BQVFWLElBQ3ZDaUIsRUFBTXlkLEVBQWlCMWUsR0FDbkJ1ZSxFQUFTNVYsUUFBUTFILElBQVEsR0FDeEJVLE9BQU9HLFVBQVU2YyxxQkFBcUIxYyxLQUFLaUYsRUFBUWpHLEtBQ3hEMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FFekIsQ0FFQSxPQUFPMkYsQ0FDVCxDQWlKYyxDQUF5QitZLEVBQU0sQ0FBQyxJQUFLLElBQUssU0FBVSxTQUFVLFdBQVksY0FHbEZLLEdBbEprQm5CLEVBaUpOZ0IsSUFqSlc3ZixFQWtKZ0IsRUE5STdDLFNBQXlCNmUsR0FDdkIsR0FBSXZhLE1BQU11RCxRQUFRZ1gsR0FBTSxPQUFPQSxDQUNqQyxDQUxTLENBQWdCQSxJQU96QixTQUErQkEsRUFBSzdlLEdBQ2xDLElBQUkrZSxFQUFPLEdBQ1BDLEdBQUssRUFDTEMsR0FBSyxFQUNMQyxPQUFLM2QsRUFFVCxJQUNFLElBQUssSUFBaUM0ZCxFQUE3QkMsRUFBS1AsRUFBSVEsT0FBT0MsY0FBbUJOLEdBQU1HLEVBQUtDLEVBQUdoUSxRQUFRMkQsUUFDaEVnTSxFQUFLN1osS0FBS2lhLEVBQUdqaUIsUUFFVDhDLEdBQUsrZSxFQUFLcmUsU0FBV1YsR0FIOENnZixHQUFLLEdBS2hGLENBQUUsTUFBTy9NLEdBQ1BnTixHQUFLLEVBQ0xDLEVBQUtqTixDQUNQLENBQUUsUUFDQSxJQUNPK00sR0FBc0IsTUFBaEJJLEVBQVcsUUFBV0EsRUFBVyxRQUM5QyxDQUFFLFFBQ0EsR0FBSUgsRUFBSSxNQUFNQyxDQUNoQixDQUNGLENBRUEsT0FBT0gsQ0FDVCxDQS9CaUMsQ0FBc0JGLEVBQUs3ZSxJQWlDNUQsV0FDRSxNQUFNLElBQUlnSyxVQUFVLHVEQUN0QixDQW5Da0UsSUFrSjVEMGdDLEVBQWExcUIsRUFBVyxHQUN4QjJxQixFQUFnQjNxQixFQUFXLEdBRTNCaXpCLEVBQW9CMVMsSUFDcEIyUyxFQUFZbnpCLEVBQU1uWixTQUFXOGpDLEVBQWFBLEVBQVd5SSxtQkFBZ0I1eEMsR0FFckU2eEMsRUFBTSxTQUFhN3pDLEdBQ2pCd2dCLEVBQU0zRCxXQUFhc3VCLElBQWUzcUIsRUFBTXN6QixPQUFTSixFQUFrQnhTLFFBQVUsSUFJN0UxZ0IsRUFBTXBnQixPQUNSb2dCLEVBQU1wZ0IsTUFBTUosR0FoR0ksU0FBV29nQixHQUMvQixJQUFJcGdCLEVBQUlvZ0IsRUFBS3BnQixFQUNUMUQsRUFBSzhqQixFQUFLOWpCLEdBQ1ZQLEVBQUtxa0IsRUFBS3JrQixHQUNWeWtCLEVBQVFKLEVBQUtJLE1BQ2I1SCxFQUFVd0gsRUFBS3hILFFBQ25CLE9BQU8sSUFBSTVRLFFBQVEsU0FBVUMsR0FDM0IsSUFBSThyQyxFQUFZLzNDLFNBQVNLLGNBQWMsT0FDdkMwM0MsRUFBVTlxQyxhQUFhLFFBQVMyUCxFQUFReTZCLE1BQ3hDdDNDLEVBQUdTLFlBQVl1M0MsR0FDZixJQUFJVCxFQUFRdDNDLFNBQVNLLGNBQWMsT0FDbkNpM0MsRUFBTXJxQyxhQUFhLFFBQVMyUCxFQUFRMDZCLE9BQ3BDUyxFQUFVdjNDLFlBQVk4MkMsR0FDdEIsSUFBSVUsRUFBT2o0QyxFQUFHc3dDLHdCQUNWdDRCLEVBQUlrUCxHQUFXampCLEVBQUVpMEMsUUFBVWowQyxFQUFFaTBDLFFBQVEsR0FBR0MsTUFBUWwwQyxFQUFFbTBDLFFBQ2xEQyxFQUFJbnhCLEdBQVdqakIsRUFBRWkwQyxRQUFVajBDLEVBQUVpMEMsUUFBUSxHQUFHSSxNQUFRcjBDLEVBQUVzMEMsUUFDbERDLEVBQUl4NEMsRUFBR3k0QyxZQUNQbjBCLEVBQUl0a0IsRUFBR2dzQixhQUNQMHNCLEVBQWE3L0IsS0FBSzgvQixLQUFLSCxFQUFJQSxFQUFJbDBCLEVBQUlBLEdBQ25DczBCLEVBQUtuMEIsRUFBTXFvQixPQUFTbUwsRUFBSzkxQyxLQUFPODFDLEVBQUt2TSxNQUFRLEVBQUkxekIsRUFDakQ2Z0MsRUFBS3AwQixFQUFNcW9CLE9BQVNtTCxFQUFLaDJDLElBQU1nMkMsRUFBSzMyQyxPQUFTLEVBQUkrMkMsRUFDakRTLEVBQUtGLEVBQUtYLEVBQUs5MUMsS0FBT3UyQyxFQUFhLEVBQ25DSyxFQUFLRixFQUFLWixFQUFLaDJDLElBQU15MkMsRUFBYSxFQUNsQ00sT0FBc0MveUMsSUFBdkJ3ZSxFQUFNdTBCLGFBQTZCdjBCLEVBQU11MEIsYUEvQ3BDLEdBZ0RwQkMsT0FBc0RoekMsSUFBL0J3ZSxFQUFNdzBCLHFCQUFxQ3gwQixFQUFNdzBCLHFCQTVDbkQsSUE2Q3JCQyxFQUFhejBCLEVBQU15MEIsWUFoREQsRUFpRGxCQyxFQUFhMTBCLEVBQU0wMEIsWUFoREQsR0FpRGxCQyxFQUFXMzBCLEVBQU0yMEIsVUFoREQsRUFpRGhCbHVCLEVBQVd6RyxFQUFNeUcsU0FBV3pHLEVBQU15RyxTQUFXLEVBQUkrdEIsRUFBdUIsR0FDeEVJLEVBQVE5NUMsT0FBT3FCLGlCQUFpQlosR0FBSXE1QyxNQUNwQzM0QyxFQUFRNjJDLEVBQU03MkMsTUFDbEJBLEVBQU1nckMsTUFBUWhyQyxFQUFNWSxPQUFTbzNDLEVBQWEsS0FDMUNoNEMsRUFBTXVCLElBQU04MkMsRUFBSyxLQUNqQnI0QyxFQUFNeUIsS0FBTzIyQyxFQUFLLEtBQ2xCcDRDLEVBQU0sc0JBQXdCQSxFQUFNLDhCQUFnQ0EsRUFBTSwyQkFBNkJBLEVBQU0seUJBQTJCd3FCLEVBQVcsSUFDbkp4cUIsRUFBTTJCLGdCQUFrQmczQyxFQUN4QjM0QyxFQUFNcTNCLFFBQVVpaEIsRUFDaEJ0NEMsRUFBTTQ0QyxjQUFnQi80QyxFQUN0QkcsRUFBTTY0Qyx3QkFBMEI5MEIsRUFBTTgwQix5QkFBMkIsR0FBS3ZGLHdCQUN0RSxJQUFJd0YsRUFBbUIsY0FBY25oQyxPQUFPOVgsRUFBSSw0Q0FBNEM4WCxPQUFPOGdDLEVBQVkseUJBQXlCOWdDLE9BQU8yZ0MsRUFBYyxxREFBcUQzZ0MsT0FBTytnQyxFQUFVLHlCQUF5Qi9nQyxPQUFPNmdDLEVBQVksc0JBekQ5UCxTQUF3QjM0QyxFQUFJazVDLEdBQy9DLElBQUksRUFBSixDQUNBLElBQUlwakIsRUFBYzkyQixPQUFPVSxTQUNyQnEyQixFQUFVRCxFQUFZLzFCLGNBQWMsU0FDeENnMkIsRUFBUXBwQixhQUFhLEtBQU0zTSxHQUMzQisxQixFQUFRNzFCLFlBQVk0MUIsRUFBWXh4QixlQUFlNDBDLElBQy9DcGpCLEVBQVlLLEtBQUtqMkIsWUFBWTYxQixFQUxULENBTXRCLENBbURJb2pCLENBQWVuNUMsRUFBSWk1QyxHQWtCbkJqQyxFQUFNM3BDLGlCQUFpQndwQyxHQWhCSCxTQUFTdUMsRUFBY0MsSUFuRHJCLFNBQTZCcjVDLEdBQ3JELElBQUksRUFBSixDQUNBLElBQUlQLEVBQUtDLFNBQVNrMkIsZUFBZTUxQixHQUU3QlAsR0FBTUEsRUFBR0csWUFDWEgsRUFBR0csV0FBV0MsWUFBWUosRUFKUixDQU10QixDQTZDTTY1QyxDQUFvQnQ1QyxHQUNwQmczQyxFQUFNNXBDLG9CQUFvQnlwQyxHQUFxQnVDLEdBQWUsR0FFMURsMUIsRUFBTXExQixZQUNScDVDLEVBQU1xM0IsUUFBVW1oQixFQUNoQng0QyxFQUFNODVCLFVBQVksU0FBVzRlLEVBQVcsTUFFeEM3QixFQUFNaHdCLFVBQVU5QixPQUFPNUksRUFBUTQ2QixnQkFDL0JPLEVBQVU1M0MsWUFBWW0zQyxHQUN0QnYzQyxFQUFHSSxZQUFZNDNDLElBR2pCOXJDLEVBQVEwdEMsRUFDVixHQUUyRCxHQUMzRHJDLEVBQU1od0IsVUFBVS9CLElBQUkzSSxFQUFRNDZCLGVBQzlCLEVBQ0QsQ0F1Q0dzQyxDQUFnQixDQUNkOTFDLEVBQ0ExRCxHQUhPLG9CQUFvQjhYLFFBQU8sSUFBSTJoQyxNQUFPQyxXQUk3Q2o2QyxHQUFJb3ZDLEVBQ0ozcUIsTUFBT0EsRUFDUDVILFFBQVMsS0FDUnRPLEtBQUssU0FBVXFyQyxHQUNabjFCLEVBQU1uZ0IsS0FDUm1nQixFQUFNbmdCLElBQUlzMUMsR0FHWmpDLEVBQWtCeFMsU0FDcEIsR0FDQXdTLEVBQWtCeFMsVUFDcEIsRUFHQTNnQixFQUFVLFdBQ1JtekIsRUFBa0J4UyxRQUFVLENBQzlCLEVBQUcsSUFFSDNnQixFQUFVLFdBQ1IsR0FBSW96QixHQUFhQSxFQUFVaHFDLGlCQUl6QixPQUhBd1osRUFBZ0JqbUIsUUFBUSxTQUFVeTRDLEdBQ2hDLE9BQU9oQyxFQUFVaHFDLGlCQUFpQmdzQyxFQUFLOUIsR0FBSyxFQUM5QyxHQUNPLFdBQ0wxd0IsRUFBZ0JqbUIsUUFBUSxTQUFVeTRDLEdBQ2hDLE9BQU9oQyxFQUFVanFDLG9CQUFvQmlzQyxFQUFLOUIsR0FBSyxFQUNqRCxFQUNGLENBRUosRUFBRyxDQUFDRixJQUVKLElBQUl0TCxFQUFpQixHQUFTLENBQUMsRUFBRy9tQixFQUEwQmQsR0FBUXFuQixFQUFPLFNBQVU1b0MsR0FDbkYsT0FBT0EsSUFBUWtzQyxHQUFjQyxFQUFjbnNDLEVBQzdDLEdBQUl1aEIsRUFBTThuQixRQUFVLENBQ2xCLGVBQWdCOW5CLEVBQU04bkIsUUFDckIsQ0FDRDd2QixVQUFXLENBQUMsR0FBUU4sVUFBV3FJLEVBQU0reUIsY0FBZ0IsR0FBUUEsY0FBZ0IsS0FBcUIsU0FBZi95QixFQUFNZ29CLEtBQWtCLGVBQWlCLEtBQXFCLFVBQWZob0IsRUFBTWdvQixLQUFtQixnQkFBa0IsS0FBTWhvQixFQUFNL0gsV0FBYStILEVBQU1uYixFQUFTLFFBQUlvRyxLQUFLLE9BRzVOaEUsRUFBVSxDQUFDK1ksRUFBTWtILE9BQVFsSCxFQUFNbUgsT0FDbkMsT0FBT3RILEVBQUVHLEVBQU05a0IsU0FBVyxNQUFPMnNDLEVBQWdCNWdDLEVBQ25ELEVDclEyQixDQUN6QjRZLEVBQUdBLEdBQ0hoYixFQUFHQSxHQUNId2lDLE9BQVFBLEdBQ1I3RyxPQUFRQSxHQUNSMWdCLFNBQVVBLEdBQ1ZDLFVBQVdBLEtDUGIsU0FBUyxLQWVQLE9BZEEsR0FBV25lLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENEUEEyekMsR0FBb0IsWUFBSSxTQzZDeEIsSUFBSSxHQUFVLENBQ1p0N0IsVUFBVyxVQUVYODlCLE9BQVEsa0JBQ1I5ekIsTUFBTyxpQkFDUEQsT0FBUSxrQkFDUkQsUUFBUyxtQkFDVEQsTUFBTyxrQkM3RFQsU0FBUyxLQWVQLE9BZEEsR0FBVzVmLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENBNEVBLElBQUksR0FBVSxDQUNacVksVUFBVyxVQzVGVCs5QixHQUFNcE8sR0QrRkMsU0FBYzFuQixHQUN2QixJQTNDc0JkLEVBQUs3ZSxFQTJDdkI0ZixFQUFJRCxFQUFLQyxFQUNUaGIsRUFBSSthLEVBQUsvYSxFQUNUa2IsRUFBWUgsRUFBS0csVUFDakJELEVBQVdGLEVBQUtFLFNBQ2hCdW5CLEVBQVN6bkIsRUFBS3luQixPQUNkcm5CLEVBckVOLFNBQWtDN1ksRUFBUXFYLEdBQ3hDLEdBQWMsTUFBVnJYLEVBQWdCLE1BQU8sQ0FBQyxFQUU1QixJQUVJakcsRUFBS2pCLEVBRkw0RyxFQWxCTixTQUF1Q00sRUFBUXFYLEdBQzdDLEdBQWMsTUFBVnJYLEVBQWdCLE1BQU8sQ0FBQyxFQUM1QixJQUVJakcsRUFBS2pCLEVBRkw0RyxFQUFTLENBQUMsRUFDVjRYLEVBQWE3YyxPQUFPcVUsS0FBSzlPLEdBRzdCLElBQUtsSCxFQUFJLEVBQUdBLEVBQUl3ZSxFQUFXOWQsT0FBUVYsSUFDakNpQixFQUFNdWQsRUFBV3hlLEdBQ2J1ZSxFQUFTNVYsUUFBUTFILElBQVEsSUFDN0IyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxJQUd2QixPQUFPMkYsQ0FDVCxDQUtlLENBQThCTSxFQUFRcVgsR0FJbkQsR0FBSTVjLE9BQU9xYyxzQkFBdUIsQ0FDaEMsSUFBSVUsRUFBbUIvYyxPQUFPcWMsc0JBQXNCOVcsR0FFcEQsSUFBS2xILEVBQUksRUFBR0EsRUFBSTBlLEVBQWlCaGUsT0FBUVYsSUFDdkNpQixFQUFNeWQsRUFBaUIxZSxHQUNuQnVlLEVBQVM1VixRQUFRMUgsSUFBUSxHQUN4QlUsT0FBT0csVUFBVTZjLHFCQUFxQjFjLEtBQUtpRixFQUFRakcsS0FDeEQyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUV6QixDQUVBLE9BQU8yRixDQUNULENBa0RjLENBQXlCK1ksRUFBTSxDQUFDLElBQUssSUFBSyxZQUFhLFdBQVksV0FHM0VLLEdBbkRrQm5CLEVBa0ROZ0IsSUFsRFc3ZixFQW1EZ0IsRUEvQzdDLFNBQXlCNmUsR0FDdkIsR0FBSXZhLE1BQU11RCxRQUFRZ1gsR0FBTSxPQUFPQSxDQUNqQyxDQUxTLENBQWdCQSxJQU96QixTQUErQkEsRUFBSzdlLEdBQ2xDLElBQUkrZSxFQUFPLEdBQ1BDLEdBQUssRUFDTEMsR0FBSyxFQUNMQyxPQUFLM2QsRUFFVCxJQUNFLElBQUssSUFBaUM0ZCxFQUE3QkMsRUFBS1AsRUFBSVEsT0FBT0MsY0FBbUJOLEdBQU1HLEVBQUtDLEVBQUdoUSxRQUFRMkQsUUFDaEVnTSxFQUFLN1osS0FBS2lhLEVBQUdqaUIsUUFFVDhDLEdBQUsrZSxFQUFLcmUsU0FBV1YsR0FIOENnZixHQUFLLEdBS2hGLENBQUUsTUFBTy9NLEdBQ1BnTixHQUFLLEVBQ0xDLEVBQUtqTixDQUNQLENBQUUsUUFDQSxJQUNPK00sR0FBc0IsTUFBaEJJLEVBQVcsUUFBV0EsRUFBVyxRQUM5QyxDQUFFLFFBQ0EsR0FBSUgsRUFBSSxNQUFNQyxDQUNoQixDQUNGLENBRUEsT0FBT0gsQ0FDVCxDQS9CaUMsQ0FBc0JGLEVBQUs3ZSxJQWlDNUQsV0FDRSxNQUFNLElBQUlnSyxVQUFVLHVEQUN0QixDQW5Da0UsSUFtRDVEMGdDLEVBQWExcUIsRUFBVyxHQUN4QjJxQixFQUFnQjNxQixFQUFXLEdBRS9CRixFQUFVLFdBQ1IsR0FBSzRxQixFQUFMLENBS0EsSUFBSWdMLEVBQWFoTCxFQUFXbHZDLGNBQWMsT0FFdENrNkMsR0FDRkEsRUFBV2x0QyxhQUFhLFlBQWEsUUFOdkMsQ0FRRixFQUFHLENBQUNraUMsSUFFSixJQUFJOUMsRUFBaUIsR0FBUyxDQUFDLEVBQUcvbUIsRUFBMEJkLEdBQVFxbkIsRUFBTyxTQUFVNW9DLEdBQ25GLE9BQU9BLElBQVFrc0MsSUFBZUMsRUFBY25zQyxHQUFNdWhCLEVBQU1xbkIsUUFBVXJuQixFQUFNcW5CLE9BQU81b0MsR0FDakYsR0FBSXVoQixFQUFNOG5CLFFBQVUsQ0FDbEIsZUFBZ0I5bkIsRUFBTThuQixRQUNyQixDQUNEN3ZCLFVBQVcsQ0FBQyxHQUFRTixVQUEwQixTQUFmcUksRUFBTWdvQixLQUFrQixlQUFpQixLQUFxQixVQUFmaG9CLEVBQU1nb0IsS0FBbUIsZ0JBQWtCLEtBQU1ob0IsRUFBTS9ILFdBQWErSCxFQUFNbmIsRUFBUyxRQUFJb0csS0FBSyxPQUd4S2hFLEVBQVUsQ0FBQytZLEVBQU1rSCxPQUFRbEgsRUFBTS9ZLFFBQVUrWSxFQUFNL1ksUUFBVStZLEVBQU0zZixTQUFVMmYsRUFBTW1ILE9BQ25GLE9BQU90SCxFQUFFRyxFQUFNOWtCLFNBQVcsTUFBTzJzQyxFQUFnQjVnQyxFQUNuRCxFQ25JcUIsQ0FDbkI0WSxFQUFHQSxHQUNIaGIsRUFBR0EsR0FDSGtiLFVBQVdBLEdBQ1hELFNBQVVBLEdBQ1Z1bkIsT0FBUUEsS0NKTnVPLEdBQU90TyxHSDhEQyxTQUFlMW5CLEdBQ3pCLElBQUlDLEVBQUlELEVBQUtDLEVBQ1RoYixFQUFJK2EsRUFBSy9hLEVBQ1Q2d0MsRUFBTTkxQixFQUFLODFCLElBQ1gxMUIsRUFuQ04sU0FBa0M3WSxFQUFRcVgsR0FDeEMsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBRTVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBbEJOLFNBQXVDTSxFQUFRcVgsR0FDN0MsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBQzVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBQVMsQ0FBQyxFQUNWNFgsRUFBYTdjLE9BQU9xVSxLQUFLOU8sR0FHN0IsSUFBS2xILEVBQUksRUFBR0EsRUFBSXdlLEVBQVc5ZCxPQUFRVixJQUNqQ2lCLEVBQU11ZCxFQUFXeGUsR0FDYnVlLEVBQVM1VixRQUFRMUgsSUFBUSxJQUM3QjJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLElBR3ZCLE9BQU8yRixDQUNULENBS2UsQ0FBOEJNLEVBQVFxWCxHQUluRCxHQUFJNWMsT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJVSxFQUFtQi9jLE9BQU9xYyxzQkFBc0I5VyxHQUVwRCxJQUFLbEgsRUFBSSxFQUFHQSxFQUFJMGUsRUFBaUJoZSxPQUFRVixJQUN2Q2lCLEVBQU15ZCxFQUFpQjFlLEdBQ25CdWUsRUFBUzVWLFFBQVExSCxJQUFRLEdBQ3hCVSxPQUFPRyxVQUFVNmMscUJBQXFCMWMsS0FBS2lGLEVBQVFqRyxLQUN4RDJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRXpCLENBRUEsT0FBTzJGLENBQ1QsQ0FnQmMsQ0FBeUIrWSxFQUFNLENBQUMsSUFBSyxJQUFLLFFBRWxEaW9CLEVBQWlCLEdBQVMsQ0FBQyxFQUFHL21CLEVBQTBCZCxHQUFRQSxFQUFNOG5CLFFBQVUsQ0FDbEYsZUFBZ0I5bkIsRUFBTThuQixRQUNyQixDQUNEN3ZCLFVBQVcsQ0FBQyxHQUFRTixVQUFXMkosRUFBYSxHQUFTdEIsRUFBTXVCLE1BQU92QixFQUFNeTFCLE9BQVMsR0FBUUEsT0FBUyxLQUFxQixTQUFmejFCLEVBQU1nb0IsS0FBa0IsZUFBaUIsS0FBcUIsVUFBZmhvQixFQUFNZ29CLEtBQW1CLGdCQUFrQixLQUFNaG9CLEVBQU0vSCxXQUFhK0gsRUFBTW5iLEVBQVMsUUFBSW9HLEtBQUssTUFDbFArVSxFQUFNdmEsUUFFTHdCLEVBQVUsQ0FBQytZLEVBQU1rSCxPQUFRbEgsRUFBTS9ZLFFBQVUrWSxFQUFNL1ksUUFBVStZLEVBQU0xaEIsSUFBTXVoQixFQUFFNjFCLEVBQUsxMUIsRUFBTTFoQixLQUFPMGhCLEVBQU15bUIsSUFBTTVtQixFQUFFLE1BQU8sQ0FDaEg0bUIsSUFBS3ptQixFQUFNeW1CLE1BQ1J6bUIsRUFBTTNmLFNBQVUyZixFQUFNbUgsT0FDM0IsT0FBT3RILEVBQUVHLEVBQU05a0IsU0FBVyxNQUFPMnNDLEVBQWdCNWdDLEVBQ25ELEVHOUV1QixDQUNyQjRZLEVBQUdBLEdBQ0hoYixFQUFHQSxHQUNINndDLElBQUtBLEtBRVBFLEdBQWtCLFlBQUksT0NIdEIsSUFBSUMsR0FBU3ZPLEdSK0xDLFNBQWlCMW5CLEdBQzdCLElBQUlrMkIsRUFFQWoyQixFQUFJRCxFQUFLQyxFQUNUaGIsRUFBSSthLEVBQUsvYSxFQUNUd2lDLEVBQVN6bkIsRUFBS3luQixPQUNkdm5CLEVBQVdGLEVBQUtFLFNBR2hCbXpCLEdBRllyekIsRUFBS0csVUFDUkgsRUFBSzRnQixPQUNMNWdCLEVBQUtxekIsUUFDZHRMLEVBQVMvbkIsRUFBSytuQixPQUNkaU8sRUFBT2gyQixFQUFLZzJCLEtBQ1o1MUIsRUE5R04sU0FBa0M3WSxFQUFRcVgsR0FDeEMsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBRTVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBbEJOLFNBQXVDTSxFQUFRcVgsR0FDN0MsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBQzVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBQVMsQ0FBQyxFQUNWNFgsRUFBYTdjLE9BQU9xVSxLQUFLOU8sR0FHN0IsSUFBS2xILEVBQUksRUFBR0EsRUFBSXdlLEVBQVc5ZCxPQUFRVixJQUNqQ2lCLEVBQU11ZCxFQUFXeGUsR0FDYnVlLEVBQVM1VixRQUFRMUgsSUFBUSxJQUM3QjJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLElBR3ZCLE9BQU8yRixDQUNULENBS2UsQ0FBOEJNLEVBQVFxWCxHQUluRCxHQUFJNWMsT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJVSxFQUFtQi9jLE9BQU9xYyxzQkFBc0I5VyxHQUVwRCxJQUFLbEgsRUFBSSxFQUFHQSxFQUFJMGUsRUFBaUJoZSxPQUFRVixJQUN2Q2lCLEVBQU15ZCxFQUFpQjFlLEdBQ25CdWUsRUFBUzVWLFFBQVExSCxJQUFRLEdBQ3hCVSxPQUFPRyxVQUFVNmMscUJBQXFCMWMsS0FBS2lGLEVBQVFqRyxLQUN4RDJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRXpCLENBRUEsT0FBTzJGLENBQ1QsQ0EyRmMsQ0FBeUIrWSxFQUFNLENBQUMsSUFBSyxJQUFLLFNBQVUsV0FBWSxZQUFhLFNBQVUsU0FBVSxTQUFVLFNBRW5IbmEsRUFBU3VhLEVBQU12YSxRQUFVLENBQUMsRUFHMUJ3YSxFQUFhLEdBRERILElBQzJCLEdBQ3ZDNnFCLEVBQWExcUIsRUFBVyxHQUN4QjJxQixFQUFnQjNxQixFQUFXLEdBRzNCNHFCLEVBQWEsR0FEQS9xQixFQUFTRSxFQUFNVyxVQUNZLEdBQ3hDbzFCLEVBQWFsTCxFQUFXLEdBQ3hCbUwsRUFBZ0JuTCxFQUFXLEdBRTNCeHVCLEVBQVcyRCxFQUFNM0QsU0FDakJzRSxFQUFXWCxFQUFNVyxVQUFZbzFCLEVBRTdCRSxFQUFpQnh3QyxFQUFPWixFQUFFdVgsVUFBWSxXQUFhLEVBRW5EODVCLEVBQWlCendDLEVBQU9aLEVBQUUrL0IsVUFBWXFSLEVBQ3RDMVksRUFBY3ZkLEVBQU1zcUIsWUFBK0I5b0MsSUFBdEJ3ZSxFQUFNdWQsWUFBNEJ2ZCxFQUFNdWQsWUFqQ2hELEVBaUNxRixFQUMxRzRZLEdBQXNDLElBQXZCbjJCLEVBQU1tMkIsYUFhckIzTCxHQUFZbnVCLElBQWEyRCxFQUFNcW1CLFdBQWFybUIsRUFBTXNxQixPQUFTdHFCLEVBQU02cEIsTUFBc0IsSUFBZjdwQixFQUFNNnBCLE1BRTlFdU0sRUFBbUIsU0FBU0EsRUFBaUI1MkMsR0FDL0NtckMsRUFBVzBMLE9BQ1gxTCxFQUFXemhDLG9CQUFvQixhQUFja3RDLEVBQy9DLEVBRUl2TyxFQUFpQixHQUFTLENBQUMsRUFBRy9tQixFQUEwQmQsRUFBTyxDQUNqRWUsSUFBSyxDQUFDbGMsRUFBRTQ5QixXQUFZLFFBQ3BCemhCLE9BQVEsQ0FBQyxXQUVYcW1CLEVBQU8sU0FBVTVvQyxHQUNWQSxJQUFPa3NDLElBSVpDLEVBQWNuc0MsR0FFVnVoQixFQUFNcW5CLFFBQ1JybkIsRUFBTXFuQixPQUFPNW9DLEdBRWpCLEdBQUl1aEIsRUFBTThuQixRQUFVLENBQ2xCLGVBQWdCOW5CLEVBQU04bkIsUUFDckIsQ0FDRDd2QixVQUFXLENBQUMsR0FBZSxNQUFHK0gsRUFBTXV0QixpQkFBbUIsR0FBUTUxQixVQUFXcUksRUFBTWdxQixVQUFZLEdBQVFBLFVBQVksS0FDaEhocUIsRUFBTXNxQixPQUFTLEdBQVFOLFVBQVksS0FBTWhxQixFQUFNc3FCLE9BQVMsR0FBUUEsT0FBUyxLQUFNdHFCLEVBQU1zcUIsUUFBVTZMLEVBM0U3RSx3QkEyRStILEtBQU1uMkIsRUFBTXNxQixRQUFVNkwsRUFBZTdZLEdBQWNDLEVBQWMsR0FBSyxLQUN2TmlOLEVBQVcsR0FBUUEsU0FBVyxLQUFNeHFCLEVBQU1xbUIsU0FBVyxHQUFRQSxTQUFXLEtBQU1ybUIsRUFBTXFxQixVQUFZLEdBQVFBLFVBQVksS0FBTXJxQixFQUFNbXFCLFVBQVksR0FBUUEsVUFBWSxLQUFNOXRCLEVBQVcsR0FBUUEsU0FBVyxLQUFNc0UsRUFBVyxHQUFRQSxTQUFXLEtBQU1YLEVBQU11cUIsaUJBQW1CLEdBQVFBLGlCQUFtQixLQUFNdnFCLEVBQU1nZCxRQUFVaGQsRUFBTStyQixRQUFVLEdBQVEvTyxPQUFTLEtBQU1oZCxFQUFNK3BCLFNBQVcsR0FBUUssWUFBYyxLQUFNcHFCLEVBQU0rcEIsU0FBVy9wQixFQUFNK3BCLFNBQVN2OEIsS0FBTyxHQUFRMDhCLGFBQWUsR0FBUUQsZUFBaUIsS0FBcUIsU0FBZmpxQixFQUFNZ29CLEtBQWtCLGVBQWlCLEtBQXFCLFVBQWZob0IsRUFBTWdvQixLQUFtQixnQkFBa0IsS0FBTWhvQixFQUFNL0gsV0FBYStILEVBQU1uYixFQUFTLFFBQUlvRyxLQUFLLE1BQ25uQjBWLEVBQVcsS0E5TWhCLFNBQXdCOVosR0FDdEIsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBeUIsTUFBaEI3SCxVQUFVVyxHQUFhWCxVQUFVVyxHQUFLLENBQUMsRUFFaERBLEVBQUksRUFDTixHQUFRa0gsR0FBUSxHQUFNekssUUFBUSxTQUFVd0UsR0FDdEMsR0FBZ0IyRixFQUFRM0YsRUFBS2lHLEVBQU9qRyxHQUN0QyxHQUNTVSxPQUFPeWMsMEJBQ2hCemMsT0FBTzBjLGlCQUFpQnpYLEVBQVFqRixPQUFPeWMsMEJBQTBCbFgsSUFFakUsR0FBUUEsR0FBUXpLLFFBQVEsU0FBVXdFLEdBQ2hDVSxPQUFPNmIsZUFBZTVXLEVBQVEzRixFQUFLVSxPQUFPMlgseUJBQXlCcFMsRUFBUWpHLEdBQzdFLEVBRUosQ0FFQSxPQUFPMkYsQ0FDVCxDQTRMdUIsQ0FBZSxHQUFnQixDQUFDLEVBQUdoQyxFQUFFa2lDLFNBQVUxcUIsR0FBWXNFLEdBQVksRUFBSVgsRUFBTW5iLEVBQUVraUMsV0FBYSxHQUFJdGhDLEdBQThCLEdBQXJCcXdDLEVBQWlCLENBQUMsRUFBbUNqeEMsRUFBRWdnQyxZQUFhLFNBQVVybEMsR0FDOU0sT0FBT21yQyxHQUFjQSxFQUFXeGhDLGtCQUFvQndoQyxFQUFXeGhDLGlCQUFpQixhQUFjaXRDLEdBQW1CcDJCLEVBQU12YSxRQUFVdWEsRUFBTXZhLE9BQU9aLEVBQUVnZ0MsY0FBZ0I3a0IsRUFBTXZhLE9BQU9aLEVBQUVnZ0MsYUFBYXJsQyxFQUM5TCxHQUFJLEdBQWdCczJDLEVBQWdCanhDLEVBQUV1WCxRQUFTLFNBQVU1YyxHQUN2RCxPQUFPaEUsU0FBUytELGdCQUFrQm9yQyxHQUFjbnZDLFNBQVMrRCxjQUFjODJDLFlBeEM5QzcwQyxJQUFyQndlLEVBQU1zMkIsYUFJVk4sR0FBYyxHQUNkdG5DLFdBQVcsV0FDVCxPQUFPc25DLEdBQWMsRUFDdkIsRUFBc0IsSUFBbkJoMkIsRUFBTXMyQixhQWlDMEZMLEVBQWV6MkMsRUFDcEgsR0FBSSxHQUFnQnMyQyxFQUFnQmp4QyxFQUFFKy9CLFFBQVMsU0FBVXBsQyxHQUNyQyxLQUFkQSxFQUFFKzJDLFNBQWtCLzZDLFNBQVMrRCxnQkFBa0JvckMsSUFDakRudkMsU0FBUytELGNBQWM4MkMsT0FFbkJILEdBQ0ZBLEVBQWUxMkMsSUFJbkJ3Z0IsRUFBTXZhLFFBQVV1YSxFQUFNdmEsT0FBT1osRUFBRSsvQixVQUFZNWtCLEVBQU12YSxPQUFPWixFQUFFKy9CLFNBQVNwbEMsRUFDckUsR0FBSXMyQyxJQUFrQjkxQixFQUFNM1QsSUFBS2dRLEVBQVcsQ0FDMUNBLFVBQVUsR0FDUixNQUVBbTZCLE9BQXNCaDFDLElBQWR3ZSxFQUFNeTJCLE1BQW1DLElBQWR6MkIsRUFBTXkyQixJQUN6Q0MsRUFBZ0IxMkIsRUFBTS9ZLFFBQVUrWSxFQUFNL1ksYUFBMEJ6RixJQUFoQndlLEVBQU15akIsTUFBK0MsV0FBekIsR0FBUXpqQixFQUFNeWpCLE9BQXNCempCLEVBQU15akIsTUFBUTVqQixFQUFFLE1BQU8sQ0FDekk1SCxVQUFXLEdBQVF3ckIsT0FDbEI1akIsRUFBRSxNQUFPLENBQ1Y1SCxVQUFXLEdBQVEyeEIsVUFDbkIzdEMsTUFBTytqQixFQUFNMjJCLFdBQ1ozMkIsRUFBTXlqQixRQUFVempCLEVBQU0zZixTQUNyQjRuQyxFQUFtQnBvQixFQUFFLE1BQU8sQ0FDOUI1SCxVQUFXLEdBQVFoUixRQUNuQmhMLE1BQU8rakIsRUFBTS9qQixPQUNaLENBQUM0akIsRUFBRThuQixFQUFRLENBQ1pwSyxpQkFBNkIvN0IsSUFBaEIrN0IsRUFBNEJBLEVBQWMsRUFDdkRKLFVBQVUsSUFDUjlnQixHQUFZbTZCLEVBQVEsS0FBTzMyQixFQUFFb3pCLEVBQVEsR0FBUyxDQUFDLEVBQUcsQ0FDcERwc0MsT0FBUThqQyxHQUNQM3FCLEVBQU00MkIsU0FBVS8yQixFQUFFLE1BQU8sQ0FDMUI1SCxVQUFXLEdBQVE0eEIsTUFDbEJocUIsRUFBRSxNQUFPLENBQ1Y1SCxVQUFXLEdBQVE2eEIsYUFDaEI0TSxFQUFlMTJCLEVBQU0rcEIsU0FBV2xxQixFQUFFKzFCLEVBQU0sQ0FDM0MzOUIsVUFBVyxHQUFROHhCLFNBQ25CenJDLElBQUssQ0FDSDJJLFFBQVM0WSxFQUFFelUsTWhCNklNLDJJZ0IzSWhCLE9BQ0wsT0FBT3lVLEVBQUVHLEVBQU05a0IsU0FBVyxJQUFLMnNDLEVBQWdCLENBQUM3bkIsRUFBTWtILE9BQVErZ0IsRUFBa0Jqb0IsRUFBTW1ILE9BQ3hGLEVRcFQyQixDQUN6QnRILEVBQUdBLEdBQ0hoYixFQUFHQSxHQUNId2lDLE9BQVFBLEdBQ1J2bkIsU0FBVUEsR0FDVkMsVUFBV0EsR0FDWHlnQixPQUFRQSxHQUNSeVMsT0FBUUEsR0FDUnRMLE9BQVFBLEdBQ1JpTyxLQUFNQSxLQ01SLFNBQVMsR0FBZ0JqNEIsRUFBS3pjLEVBQUsvRCxHQVlqQyxPQVhJK0QsS0FBT3ljLEVBQ1QvYixPQUFPNmIsZUFBZUUsRUFBS3pjLEVBQUssQ0FDOUIvRCxNQUFPQSxFQUNQdWdCLFlBQVksRUFDWkcsY0FBYyxFQUNkQyxVQUFVLElBR1pILEVBQUl6YyxHQUFPL0QsRUFHTndnQixDQUNULENBRUEsU0FBUyxLQWVQLE9BZEEsR0FBVy9iLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENBRUEsSUFBSXUzQyxHQUFhLENBQ2YzaUIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxFQUNULEdBSUV1bUMsR0FBVSxTQUFpQkMsR0FDN0IsT0FBTyxHQUFnQixDQUFDLEVBQUcsU0FBV0EsRUFBTyxxQkFBc0IsU0FBVXhtQyxFQUFVaWlCLEdBQ3JGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHNCQUF1QixDQUNyQjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyx5QkFHOUMsRUFDRixFQU1JbkMsR0FBUTdmLEdBQVksQ0FDdEJ2QixPQUFRLENBQ053akIsYUFOZSxHQUFTLENBQUMsRUFBR0gsR0FBWUMsR0FBUSxVQU9oREcsWUFMYyxHQUFTLENBQUMsRUFBR0osR0FBWUMsR0FBUSxZQVMvQ3ZRLEdBQVEsU0FBZWhsQixHQUN6QixNQUFPLENBQ0wwbEIsTUFBTzFsQixFQUFPLEtBQ2Qxa0IsT0FBUTBrQixFQUFPLEtBRW5CLEVBRUkyMUIsR0FBYSxTQUFvQjMxQixHQUNuQyxJQUFJa1UsRUFBVXJoQixLQUFLa2IsTUFBYSxJQUFQL04sR0FFckI0MUIsRUFBYTUxQixFQUFpQixFQUFWa1UsRUFDeEIsTUFBTyxDQUNMd1IsTUFBT2tRLEVBQWEsS0FDcEJ0NkMsT0FBUXM2QyxFQUFhLEtBQ3JCMWhCLFFBQVNBLEVBQVUsS0FFdkIsRUFFSWpDLEdBQVMsQ0FDWFUsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUNwQmdhLG1CQUFvQixNQUNwQixzQkFBdUIsQ0FDckJwdkIsU0FBVSxXQUNWaThDLGFBQWMsU0FHcEIsRUFDQUMsbUJBQW9CLFNBQTRCOW1DLEVBQVVpaUIsR0FDeEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsZ0RBQWlELENBQUNpaUIsRUFBSzZrQixzQkFFM0QsRUFDQUMsbUJBQW9CLFNBQTRCL21DLEVBQVVpaUIsR0FDeEQsT0FBTyxHQUFnQixDQUFDLEVBQUdqaUIsRUFBVWlpQixFQUFLOGtCLG1CQUM1QyxFQUNBQyxnQkFBaUIsU0FBeUJobkMsRUFBVWlpQixHQUNsRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQnNXLGdCQUFpQjJMLEVBQUsra0Isa0JBRTFCLEVBQ0FwSSxtQkFBb0IsU0FBNEI1K0IsRUFBVWlpQixHQUN4RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQm9XLG1CQUFvQjZMLEVBQUsyYyxxQkFFN0IsRUFDQXFJLDBCQUEyQixTQUFtQ2puQyxFQUFVaWlCLEdBQ3RFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCd1cseUJBQTBCeUwsRUFBS2dsQiw0QkFFbkMsRUFDQUMsV0FBWSxTQUFvQmxuQyxFQUFVaWlCLEdBQ3hDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHFCQUFzQmcyQixHQUFNL1QsRUFBS2lsQixZQUNqQyxzQkFBdUIsQ0FDckIscUJBQXNCUCxHQUFXMWtCLEVBQUtpbEIsZUFHNUMsRUFDQUMsYUFBYyxTQUFzQm5uQyxFQUFVaWlCLEdBQzVDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QmcyQixHQUFNL1QsRUFBS2tsQixjQUNuQyxzQkFBdUIsQ0FDckIsdUJBQXdCUixHQUFXMWtCLEVBQUtrbEIsaUJBRzlDLEVBQ0FDLFlBQWEsU0FBcUJwbkMsRUFBVWlpQixHQUMxQyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixzQkFBdUJnMkIsR0FBTS9ULEVBQUttbEIsYUFDbEMsc0JBQXVCLENBQ3JCLHNCQUF1QlQsR0FBVzFrQixFQUFLbWxCLGdCQUc3QyxFQUNBQyxXQUFZLFNBQW9Ccm5DLEVBQVVpaUIsR0FDeEMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIscUJBQXNCZzJCLEdBQU0vVCxFQUFLb2xCLFlBQ2pDLHNCQUF1QixDQUNyQixxQkFBc0JWLEdBQVcxa0IsRUFBS29sQixlQUc1QyxFQUNBQyxTQUFVLFNBQWtCdG5DLEVBQVVpaUIsR0FDcEMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsbUJBQW9CZzJCLEdBQU0vVCxFQUFLcWxCLFVBQy9CLHNCQUF1QixDQUNyQixtQkFBb0JYLEdBQVcxa0IsRUFBS3FsQixhQUcxQyxHQUVFLEdBQVN6akIsR0FBYSxDQUN4QlosT0FBUUEsS0FRTnNrQixHQUFrQixDQUlwQjVqQixnQkFBZ0IsRUFDaEJxakIsZ0JBQWlCLEtBQ2pCcEksbUJBQW9CLFFBQ3BCbUksbUJBQW9CLGNBQ3BCRCxtQkFBb0IsY0FDcEJHLDBCQUEyQixjQUMzQkssU0FBVSxFQUFJLEdBQUs3SixvQkFDbkI0SixXQUFZLEVBQUksR0FBSzVKLG9CQUNyQjJKLFlBQWEsRUFBSSxHQUFLM0osb0JBQ3RCMEosYUFBYyxFQUFJLEdBQUsxSixvQkFDdkJ5SixXQUFZLEVBQUksR0FBS3pKLG9CQUNyQitKLDhCQUErQjNrQixHQUFLLEdBQUsrYyx3QkFDekM2SCw2QkFBOEI1a0IsR0FBSyxHQUFLK2MseUJBS3RDNWQsR0FBTSxDQUFDLEdBQVFxaUIsSUFDZnJrQyxHQUFXLElBQUlxRCxPQXpNTixjQ1ViLFNBQVMsR0FBZ0IrSixFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0FFQSxTQUFTLEdBQVF3TCxFQUFRa1QsR0FDdkIsSUFBSS9ILEVBQU9yVSxPQUFPcVUsS0FBS25MLEdBRXZCLEdBQUlsSixPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlDLEVBQVV0YyxPQUFPcWMsc0JBQXNCblQsR0FDdkNrVCxJQUFnQkUsRUFBVUEsRUFBUW5KLE9BQU8sU0FBVW9KLEdBQ3JELE9BQU92YyxPQUFPMlgseUJBQXlCek8sRUFBUXFULEdBQUtULFVBQ3RELElBQ0F6SCxFQUFLOVEsS0FBSzlGLE1BQU00VyxFQUFNaUksRUFDeEIsQ0FFQSxPQUFPakksQ0FDVCxDRG1KZSxHQUFzQjFGLEdBQVVnaUIsR0FBS3VsQixJQUNyQyxHQUFzQnZuQyxHQUFVZ2lCLEdBQUt1bEIsSUM5SHBELElBQUlHLEdBQTJCLFNBQWtDeDdCLEVBQU95N0IsR0FDdEUsT0FBTyxTQUFVM25DLEVBQVVpaUIsR0FDekIsTUFBTyxDQUFDMmxCLEdBQWdDMTdCLEVBQU95N0IsRUFBTzNuQyxFQUFVaWlCLEdBQU80bEIsR0FBK0IzN0IsRUFBT3k3QixFQUFPM25DLEVBQVVpaUIsR0FDaEksQ0FDRixFQUVJMmxCLEdBQWtDLFNBQXlDMTdCLEVBQU95N0IsRUFBTzNuQyxFQUFVaWlCLEdBQ3JHLE9BQU9VLEdBQUkzaUIsRUFBVSxHQUFnQixDQUFDLEVBQUcscUJBQXFCcUQsT0FBT3NrQyxFQUFPLGlCQUFpQnRrQyxPQUFPNkksR0FBUSxDQUMxRzQ3QixVQUFXN2xCLEVBQUssVUFBVTVlLE9BQU82SSxFQUFPLFdBQVc3SSxPQUFPc2tDLE1BRTlELEVBRUlFLEdBQWlDLFNBQXdDMzdCLEVBQU95N0IsRUFBTzNuQyxFQUFVaWlCLEdBQ25HLEdBQWMsSUFBVjBsQixFQUNGLE1BQU8sR0FHVCxJQUFJSSxFQUFhSixFQUFRLEVBQ3JCSyxFQUFnQiwyQ0FBMkMza0MsT0FBTzBrQyxHQUN0RSxNQUFPLENBQUNwbEIsR0FBSSxHQUFHdGYsT0FBTzJrQyxFQUFlLFdBQVcza0MsT0FBT3JELEVBQVUsTUFBTXFELE9BQU8ya0MsRUFBZSxZQUFZM2tDLE9BQU9yRCxHQUFXLEdBQWdCLENBQUMsRUFBRyxnQkFBZ0JxRCxPQUFPNkksR0FBUSxDQUM1SzQ3QixVQUFXN2xCLEVBQUssVUFBVTVlLE9BQU82SSxFQUFPLFdBQVc3SSxPQUFPMGtDLE9BRTlELEVBRUlFLEdBQWdDLFNBQXVDam9DLEVBQVVpaUIsR0FDbkYsT0FBT1UsR0FBSSwwQkFBMEJ0ZixPQUFPckQsR0FBVyxDQUNyRCx1Q0FBd0MsQ0FDdENnVyxXQUFZaU0sRUFBS2pNLGFBR3ZCLEVBU0lreUIsR0FBZ0IsU0FBdUJsb0MsRUFBVWlpQixFQUFNMGxCLEVBQU96N0IsR0FDaEUsT0FBT3lXLEdBQUkzaUIsRUFBVSxHQUFnQixDQUFDLEVBQUcsZ0JBQWdCcUQsT0FBTzZJLEdBQVEsQ0FDdEU0N0IsVUFBVzdsQixFQUFLLFVBQVU1ZSxPQUFPNkksRUFBTyxXQUFXN0ksT0FBT3NrQyxNQUU5RCxFQVNJaFEsR0FBUyxTQUFnQjMzQixFQUFVaWlCLEVBQU0wbEIsR0FDM0MsTUFBTyxDQUFDTyxHQUFjbG9DLEVBQVVpaUIsRUFBTTBsQixFQUFPLE9BQVFPLEdBQWNsb0MsRUFBVWlpQixFQUFNMGxCLEVBQU8sVUFDNUYsRUFRSVEsR0FBZSxTQUFzQm5vQyxFQUFVaWlCLEdBQ2pELFlBQTZCaHhCLElBQXRCZ3hCLEVBQUtrbUIsYUFBNkJ4USxHQUFPMzNCLEVBQVVpaUIsRUFBTUEsRUFBS2ttQixjQUFnQixJQUN2RixFQVlJQyxHQUFlLENBQ2pCRCxhQUFjQSxJQUdaLEdBQVMsR0FBUyxDQUFDLEVBQUcsQ0FDeEJ4a0IsZUFBZ0IsU0FBd0IzakIsRUFBVWlpQixHQUNoRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUFDK1osSUFBYTRkLEdBQU8zM0IsRUFBVWlpQixFQUFNLEdBQUksQ0FDN0Q0a0IsYUFBYyxVQUNkd0IsY0FBZSxPQUNmLHVDQUF3QyxDQUFDdHVCLElBQWEsQ0FDcEQ4c0IsYUFBYyxlQUdwQixFQUNBN3dCLFdBeEJlLFNBQW9CaFcsRUFBVWlpQixHQUM3QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix1QkFBd0IsQ0FDdEIsdUNBQXdDLENBQ3RDZ1csV0FBWWlNLEVBQUtqTSxlQUduQml5QixHQUE4QmpvQyxFQUFVaWlCLEdBQzlDLEVBaUJFa21CLGFBQWNBLElBQ2IsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBR3gzQixPQUFPLFNBQVVOLEVBQUtzM0IsR0FDMUMsT0FBT3QzQixFQUFJLG9CQUFvQmhOLE9BQU9za0MsSUFBVUQsR0FBeUIsTUFBT0MsR0FBUXQzQixFQUFJLHVCQUF1QmhOLE9BQU9za0MsSUFBVUQsR0FBeUIsU0FBVUMsR0FBUXQzQixDQUNqTCxFQUFHLENBQUMsSUFFQSxHQUFTd1QsR0FBYSxDQUN4QlosT0FBUSxLQUdOcWxCLEdBQWEsQ0FDZkMsbUJBQW9CLE9BQ3BCQyxzQkFBdUIsT0FDdkJDLG1CQUFvQixPQUNwQkMsc0JBQXVCLGtDQUN2QkMsbUJBQW9CLGlDQUNwQkMsc0JBQXVCLGtDQUN2QkMsbUJBQW9CLG1DQUNwQkMsc0JBQXVCLG1DQUN2QkMsbUJBQW9CLG9DQUNwQkMsc0JBQXVCLG1DQUN2QkMsbUJBQW9CLG9DQUNwQkMsc0JBQXVCLG1DQUV2QmYsa0JBQWNsM0MsR0FFWixHQXhJSixTQUF3QnFGLEdBQ3RCLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQXlCLE1BQWhCN0gsVUFBVVcsR0FBYVgsVUFBVVcsR0FBSyxDQUFDLEVBRWhEQSxFQUFJLEVBQ04sR0FBUWtILEdBQVEsR0FBTXpLLFFBQVEsU0FBVXdFLEdBQ3RDLEdBQWdCMkYsRUFBUTNGLEVBQUtpRyxFQUFPakcsR0FDdEMsR0FDU1UsT0FBT3ljLDBCQUNoQnpjLE9BQU8wYyxpQkFBaUJ6WCxFQUFRakYsT0FBT3ljLDBCQUEwQmxYLElBRWpFLEdBQVFBLEdBQVF6SyxRQUFRLFNBQVV3RSxHQUNoQ1UsT0FBTzZiLGVBQWU1VyxFQUFRM0YsRUFBS1UsT0FBTzJYLHlCQUF5QnBTLEVBQVFqRyxHQUM3RSxFQUVKLENBRUEsT0FBTzJGLENBQ1QsQ0FzSFcsQ0FBZSxDQUl4QnF0QixnQkFBZ0IsRUFDaEIzTixXQUFZLGNBQWMzUyxPQUFPLEdBQU91N0IsbUJBQW9CLGNBQzNEMEosSUFHQyxHQUFNLENBQUMsSUFDUCxHQUFXLElBQUlqbEMsT0EzTU4sYUNBVCxJRDRNVyxHQUFzQixHQUFVLEdBQUssSUFDckMsR0FBc0IsR0FBVSxHQUFLLElDN010QyxDQUNaK0QsVUFBVyxpQkFDWCxNQUFTLFlBQ1RneUIsSUFBSyxnQkFFTDFpQyxRQUFTLHFCQUNUdzhCLE1BQU8sbUJBQ1BtRyxVQUFXLHdCQUNYQyxLQUFNLGtCQUNOQyxVQUFXLHdCQUNYQyxTQUFVLHNCQUVWL00sT0FBUSxvQkFDUmdOLFVBQVcsdUJBQ1gzdEIsU0FBVSxzQkFDVjR0QixlQUFnQiw2QkFDaEJDLGFBQWMsMkJBQ2RDLFVBQVcsd0JBQ1hDLFlBQWEsc0JBQ2JDLFVBQVcsd0JBQ1gxcEIsU0FBVSxzQkFDVjJwQixPQUFRLG9CQUNSakUsU0FBVSxzQkFDVmtFLGlCQUFrQiw2QkFDbEJDLFNBQVUseUJBR1osU0FBUyxHQUFnQjdzQixFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0FFQSxTQUFTLEdBQVF3TCxFQUFRa1QsR0FDdkIsSUFBSS9ILEVBQU9yVSxPQUFPcVUsS0FBS25MLEdBRXZCLEdBQUlsSixPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlDLEVBQVV0YyxPQUFPcWMsc0JBQXNCblQsR0FDdkNrVCxJQUFnQkUsRUFBVUEsRUFBUW5KLE9BQU8sU0FBVW9KLEdBQ3JELE9BQU92YyxPQUFPMlgseUJBQXlCek8sRUFBUXFULEdBQUtULFVBQ3RELElBQ0F6SCxFQUFLOVEsS0FBSzlGLE1BQU00VyxFQUFNaUksRUFDeEIsQ0FFQSxPQUFPakksQ0FDVCxDQUVBLFNBQVMsR0FBZXBQLEdBQ3RCLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQXlCLE1BQWhCN0gsVUFBVVcsR0FBYVgsVUFBVVcsR0FBSyxDQUFDLEVBRWhEQSxFQUFJLEVBQ04sR0FBUWtILEdBQVEsR0FBTXpLLFFBQVEsU0FBVXdFLEdBQ3RDLEdBQWdCMkYsRUFBUTNGLEVBQUtpRyxFQUFPakcsR0FDdEMsR0FDU1UsT0FBT3ljLDBCQUNoQnpjLE9BQU8wYyxpQkFBaUJ6WCxFQUFRakYsT0FBT3ljLDBCQUEwQmxYLElBRWpFLEdBQVFBLEdBQVF6SyxRQUFRLFNBQVV3RSxHQUNoQ1UsT0FBTzZiLGVBQWU1VyxFQUFRM0YsRUFBS1UsT0FBTzJYLHlCQUF5QnBTLEVBQVFqRyxHQUM3RSxFQUVKLENBRUEsT0FBTzJGLENBQ1QsQ0FFQSxJQUFJLEdBQVMsQ0FDWHF0QixlQUFnQixTQUF3QjNqQixHQUN0QyxNQUFPLENBQUMyaUIsR0FBSTNpQixFQUFVLENBQ3BCbXBDLFdBQVksT0FDWixtQkFBb0IsT0FDcEJDLFFBQVMsT0FDVGxrQixRQUFTLEVBQ1Rta0IsZUFBZ0IsT0FDaEJDLFVBQVcsU0FDWDdnQyxPQUFRLFVBQ1IscUVBQXNFLENBQ3BFQSxPQUFRLFVBQ1I0L0IsY0FBZSxRQUVqQix1QkFBd0IsQ0FDdEJ6OUMsU0FBVSxXQUNWaThDLGFBQWMsV0FFaEIscUJBQXNCLENBQ3BCajhDLFNBQVUsV0FDVnV2QixRQUFTLFFBQ1Qwc0IsYUFBYyxVQUNkd0IsY0FBZSxRQUVqQiw0Q0FBNkMsQ0FBQ3R1QixJQUFhLENBQ3pEVyxPQUFRLEVBQ1Jtc0IsYUFBYyxVQUNkd0IsY0FBZSxXQUVmLENBQ0YsaUJBQWtCLENBRWhCa0IsU0FBVSxFQUNWbDlDLFdBQVksSUFHbEIsRUFDQW05QyxhQUFjLFNBQXNCeHBDLEVBQVVpaUIsR0FDNUMsTUFBTyxDQUFDLENBQ04saUJBQWtCLEdBQWdCLENBQ2hDa0QsT0FBUSxNQUFNOWhCLE9BQU80ZSxFQUFLdW5CLGFBQWMsT0FDdkMsSUFBSW5tQyxPQUFPckQsR0FBVyxDQUN2Qm1sQixPQUFRLEtBQUs5aEIsT0FBTzRlLEVBQUt1bkIsYUFBYyxTQUc3QyxHQUVFemxCLEdBQWNGLEdBQWEsQ0FDN0JaLE9BQVEsS0FHTndtQixHQUFVLFNBQWdCenBDLEVBQVVpaUIsRUFBTXVrQixHQUM1QyxPQUFPN2pCLEdBQUkzaUIsRUFBVSxDQUNuQiw2QkFBOEIsQ0FDNUIsdUJBQXdCLENBQ3RCMHBDLFlBQWF6bkIsRUFBSyxTQUFXdWtCLEVBQU8sY0FJNUMsRUFFSSxHQUFhLENBQ2Y3aUIsZUFBZ0IsV0FDZCxNQUFPLEVBQ1QsR0FNRSxHQUFVLFNBQWlCNmlCLEdBQzdCLElBQUluM0IsRUFFSixPQUFrQixHQUFYQSxFQUFPLENBQUMsRUFBeUIsU0FBV20zQixFQUFPLFFBQVMsU0FBVXhtQyxFQUFVaWlCLEdBQ3JGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDZCQUE4QixDQUM1Qix1QkFBd0IsQ0FDdEJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxhQUl0QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGlCQUFrQixTQUFVeG1DLEVBQVVpaUIsR0FDaEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8scUJBR3BDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sY0FBZSxTQUFVeG1DLEVBQVVpaUIsR0FDN0UsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdURBQXdELENBQ3RELHVCQUF3QixDQUN0QjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyxtQkFJaEQsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxxQkFBc0IsU0FBVXhtQyxFQUFVaWlCLEdBQ3BGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDZCQUE4QixDQUM1Qix1QkFBd0IsQ0FDdEIsdUJBQXdCLENBQ3RCM1MsZ0JBQWlCNDBCLEVBQUssU0FBV3VrQixFQUFPLDJCQUtsRCxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLHVCQUF3QixTQUFVeG1DLEVBQVVpaUIsR0FDdEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCLHVCQUF3QixDQUN0QjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyw0QkFJaEQsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxtQkFBb0IsU0FBVXhtQyxFQUFVaWlCLEdBQ2xGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDBCQUEyQixDQUN6QjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyx1QkFHOUMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxnQkFBaUIsU0FBVXhtQyxFQUFVaWlCLEdBQy9FLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDBCQUEyQixDQUN6QitpQixRQUFTZCxFQUFLLFNBQVd1a0IsRUFBTyxvQkFHdEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxVQUFXLFNBQVV4bUMsRUFBVWlpQixHQUN6RSxNQUFPLENBQUN3bkIsR0FBUSxHQUFHcG1DLE9BQU9yRCxFQUFVLHNCQUF1QmlpQixFQUFNdWtCLEdBQ25FLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFVLFNBQWdCclAsRUFBVWlpQixHQUM1RCxNQUFPLENBQUN3bkIsR0FBUXpwQyxFQUFVaWlCLEVBQU11a0IsR0FDbEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxpQkFBa0IsU0FBVXhtQyxFQUFVaWlCLEdBQ2hGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHlDQUEwQyxDQUN4Qyx1QkFBd0IsQ0FDdEIwcEMsWUFBYXpuQixFQUFLLFNBQVd1a0IsRUFBTyxzQkFJNUMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxtQkFBb0IsU0FBVXhtQyxFQUFVaWlCLEdBQ2xGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHlDQUEwQyxDQUN4Qyx1QkFBd0IsQ0FDdEIwcEMsWUFBYXpuQixFQUFLLFNBQVd1a0IsRUFBTyx3QkFJNUMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxRQUFTLFNBQVV4bUMsRUFBVWlpQixHQUN2RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix3QkFBeUIsQ0FDdkJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxZQUdwQyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGFBQWMsU0FBVXhtQyxFQUFVaWlCLEdBQzVFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDhCQUErQixDQUM3Qix1QkFBd0IsQ0FDdEIwcEMsWUFBYXpuQixFQUFLLFNBQVd1a0IsRUFBTyxrQkFJNUMsR0FBSW4zQixDQUNOLEVBTUlzNkIsR0FBZSxTQUFzQm5ELEdBQ3ZDLElBQUkvMEIsRUFFSixPQUFtQixHQUFaQSxFQUFRLENBQUMsRUFBMEIsU0FBVyswQixFQUFPLFNBQVUsU0FBVXhtQyxFQUFVaWlCLEdBQ3hGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVEQUF3RCxDQUN0RHFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGFBR3BDLEdBQUksR0FBZ0IvMEIsRUFBTyxTQUFXKzBCLEVBQU8sZ0JBQWlCLFNBQVV4bUMsRUFBVWlpQixHQUNoRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix1REFBd0QsQ0FDdEQsdUJBQXdCLENBQ3RCMHBDLFlBQWF6bkIsRUFBSyxTQUFXdWtCLEVBQU8scUJBSTVDLEdBQUksR0FBZ0IvMEIsRUFBTyxTQUFXKzBCLEVBQU8sb0JBQXFCLFNBQVV4bUMsRUFBVWlpQixHQUNwRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix1REFBd0QsQ0FDdEQsdUJBQXdCLENBQ3RCM1MsZ0JBQWlCNDBCLEVBQUssU0FBV3VrQixFQUFPLHlCQUloRCxHQUFJLEdBQWdCLzBCLEVBQU8sU0FBVyswQixFQUFPLGNBQWUsU0FBVXhtQyxFQUFVaWlCLEdBQzlFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHdCQUF5QixDQUN2QnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGtCQUdwQyxHQUFJLzBCLENBQ04sRUFRSWlULEdBQWFGLEdBQVksQ0FDM0J2QixPQUFRLENBQ053akIsYUFSZSxHQUFlLENBQUMsRUFBRyxHQUFZLENBQUMsRUFBRyxHQUFRLFVBUzFEQyxZQVBjLEdBQWUsQ0FBQyxFQUFHLEdBQVksQ0FBQyxFQUFHLEdBQVEsU0FRekRrRCxrQkFOb0JELEdBQWEsU0FPakNFLGlCQU5tQkYsR0FBYSxXQWNoQ0csR0FBWSxTQUFtQkMsR0FDakMsT0FBTyxXQUNMLE1BQU8sQ0FDTCxrREFBbUQsQ0FDakRDLFlBQWFELEVBQVEsdUJBQXlCLHdCQUdwRCxDQUNGLEVBRUlFLEdBQVlILElBQVUsR0FDdEJJLEdBQWFKLElBQVUsR0FFdkJLLEdBQThCLFNBQXFDbnFDLEVBQVVpaUIsR0FDL0UsT0FBT1UsR0FBSTNpQixFQUFVLENBQ25CLHdCQUF5QixDQUN2Qm9xQyxVQUFXLGVBQWUvbUMsT0FBTzRlLEVBQUtxZCxZQUFhLFlBQVlqOEIsT0FBTzRlLEVBQUtvb0IsZ0JBQWlCLFNBR2xHLEVBRUlDLEdBQWtDLFNBQXlDdHFDLEVBQVVpaUIsR0FDdkYsT0FBT1UsR0FBSTNpQixFQUFVLENBQ25CLHlCQUEwQixDQUN4QmtsQixRQUFTLEVBQ1QscUJBQXNCLENBQ3BCQSxRQUFTakQsRUFBS3NvQixnQkFBa0J0b0IsRUFBS29vQixnQkFBa0IsVUFJL0QsRUFFSUcsR0FBOEMsU0FBcUR4cUMsRUFBVWlpQixHQUMvRyxPQUFPVSxHQUFJM2lCLEVBQVUsQ0FDbkIseUJBQTBCLENBQ3hCLDJDQUE0QyxDQUMxQ29xQyxVQUFXLGVBQWUvbUMsT0FBTzRlLEVBQUtxZCxZQUFhLFlBQVlqOEIsT0FBTzRlLEVBQUtzb0IsZ0JBQWtCdG9CLEVBQUtvb0IsZ0JBQWlCLFVBSTNILEVBRUlJLEdBQTZCLFNBQW9DenFDLEVBQVVpaUIsRUFBTThuQixHQUNuRixJQUFJVyxFQUFvQkMsRUFFeEIsT0FBT2hvQixHQUFJM2lCLEVBQVUsQ0FDbkIsdUJBQXdCLENBQ3RCNm1DLGFBQWM1a0IsRUFBSzJvQixjQUFnQixNQUVyQyxxQkFBc0IsQ0FDcEIsd0JBQXlCRixFQUFxQixDQUFDLEVBQUcsR0FBZ0JBLEVBQW9CWCxFQUFRLHVCQUF5QixzQkFBdUIsR0FBSSxHQUFnQlcsRUFBb0JYLEVBQVEsMEJBQTRCLHlCQUEwQixHQUFJVyxJQUUxUCxvQkFBcUIsQ0FDbkIsd0JBQXlCQyxFQUFzQixDQUFDLEVBQUcsR0FBZ0JBLEVBQXFCWixFQUFRLHNCQUF3Qix1QkFBd0IsR0FBSSxHQUFnQlksRUFBcUJaLEVBQVEseUJBQTJCLDBCQUEyQixHQUFJWSxLQUdqUSxFQUVJRSxHQUFZLFNBQWdCN3FDLEdBQzlCLE9BQU8yaUIsR0FBSTNpQixFQUFVLENBQ25CLGdDQUFpQytaLEdBQVcsR0FDNUMsdUJBQXdCLENBQ3RCaXdCLFlBQWEsVUFHbkIsRUFFSWMsR0FBZ0IsU0FBc0I5cUMsRUFBVWlpQixHQUNsRCxPQUFPVSxHQUFJM2lCLEVBQVUsQ0FDbkIsdUJBQXdCLENBQ3RCK3FDLFlBQWE5b0IsRUFBSytvQixhQUFlLE1BRW5DLDBCQUEyQixDQUN6QkMsWUFBYWhwQixFQUFLK29CLGFBQWUsT0FHdkMsRUFPSUUsR0FBVyxHQUFlLENBQzVCdm5CLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FBQ2lxQyxLQUFhLENBQ2xDOXZCLFFBQVMsZUFDVDFiLFdBQVksY0FDWmd1QixPQUFRLE9BQ1IsdUJBQXdCLENBQ3RCN2hDLFNBQVUsV0FDVm1nRCxZQUFhLE1BRWI1d0IsUUFBUyxPQUNUZ3hCLFdBQVksU0FDWkMsZUFBZ0IsU0FDaEJDLFdBQVksRUFDWkMsY0FBZSxHQUVqQixxQkFBc0JULEdBQVU3cUMsR0FFaEMsb0JBQXFCLENBQ25CK2lCLFFBQVMsR0FHWCx3Q0FBeUMsQ0FDdkNBLFFBQVMsR0FHWCw4QkFBK0IsQ0FDN0Isb0JBQXFCLENBQ25CQSxRQUFTLElBR2IsMkNBQTRDLENBQzFDLzJCLFdBQVksTUFDWm05QyxXQUFZLE9BQ1osbUJBQW9CLFFBRXRCLDBCQUEyQixDQUN6Qmh2QixRQUFTLGVBQ1Q5dEIsV0FBWSxHQUVkLHVCQUF3QixDQUN0QmsvQyxTQUFVLElBRVYsd0JBQXlCLENBQ3ZCM2dELFNBQVUsWUFFWixXQUFZLENBQ1ZBLFNBQVUsV0FDVnVDLEtBQU0sRUFDTkYsSUFBSyxPQUVQLDRDQUE2QyxDQUMzQ2crQyxXQUFZLE1BQ1pNLFNBQVUsSUFHZCxzQkFBdUIsQ0FDckJBLFNBQVUsR0FFWixnQ0FBaUN4eEIsRUFBd0IsYUFDekQsNEJBQTZCLENBQzNCLGdDQUFpQyxDQUMvQnlMLFVBQVcsdUJBR1osQ0FBQzdDLEdBQUlDLEdBQVk1aUIsR0FBV2txQyxPQUNuQyxFQUNBVSxjQUFlLFNBQXVCNXFDLEVBQVVpaUIsR0FDOUMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCNm1DLGFBQWM1a0IsRUFBSzJvQixjQUFnQixRQUVuQ0gsR0FBMkIsb0JBQW9CcG5DLE9BQU9yRCxHQUFXaWlCLEdBQU0sR0FBUXdvQixHQUEyQjduQixHQUFZLG9CQUFvQnZmLE9BQU9yRCxJQUFZaWlCLEdBQU0sR0FDekssRUFDQStvQixhQUFjLFNBQXNCaHJDLEVBQVVpaUIsR0FDNUMsTUFBTyxDQUFDNm9CLEdBQWM5cUMsRUFBVWlpQixHQUNsQyxFQUNBdXBCLFVBQVcsU0FBbUJ4ckMsRUFBVWlpQixHQUN0QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQnVyQyxTQUFVdHBCLEVBQUt1cEIsVUFBWSxPQUUvQixFQUNBNU0sbUJBQW9CLFNBQTRCNStCLEVBQVVpaUIsR0FDeEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIseUNBQTBDLENBQUMrWixFQUF3QixNQUFPa0ksRUFBSzJjLHVCQUVuRixFQUNBNk0sVUFBVyxTQUFtQnpyQyxFQUFVaWlCLEdBQ3RDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QixDQUN0QjByQyxZQUFhenBCLEVBQUt3cEIsVUFBWSxLQUM5QkUsYUFBYzFwQixFQUFLd3BCLFVBQVksS0FDL0Isd0JBQXlCLENBQ3ZCRixTQUFVLG1CQUFtQmxvQyxPQUFPNGUsRUFBS3dwQixVQUFXLFFBRXRELHVCQUF3QixDQUN0Qiw0Q0FBNkMsQ0FDM0NHLFlBQWEsY0FBY3ZvQyxPQUFPNGUsRUFBS3dwQixVQUFXLFlBSzVELEVBQ0FJLHFCQUFzQixTQUE4QjdyQyxFQUFVaWlCLEdBQzVELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDZDQUE4QyxDQUM1Q2tsQixRQUFTLEtBQU9qRCxFQUFLNHBCLHFCQUF1QixRQUdsRCxFQUNBeEIsZ0JBQWlCLFNBQXlCcnFDLEVBQVVpaUIsR0FDbEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIscUJBQXNCLENBQ3BCa2xCLFFBQVNqRCxFQUFLb29CLGdCQUFrQixRQUVsQyxxQkFBc0IsQ0FDcEIscUJBQXNCLENBQ3BCbmxCLFFBQVNqRCxFQUFLb29CLGdCQUFrQixFQUFJLGdCQUdqQnA1QyxJQUFyQmd4QixFQUFLcWQsYUFBNkI2SyxHQUE0Qm5xQyxFQUFVaWlCLFFBQWdDaHhCLElBQXpCZ3hCLEVBQUtzb0IsaUJBQWlDRCxHQUFnQ3RxQyxFQUFVaWlCLFFBQTRCaHhCLElBQXJCZ3hCLEVBQUtxZCxrQkFBc0RydUMsSUFBekJneEIsRUFBS3NvQixzQkFBMER0NUMsSUFBekJneEIsRUFBS29vQixpQkFBaUNHLEdBQTRDeHFDLEVBQVVpaUIsR0FDaFYsRUFDQTZwQixZQUFhLFNBQXFCOXJDLEVBQVVpaUIsR0FDMUMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIscUJBQXNCLENBQ3BCK3JDLFdBQVk5cEIsRUFBSzZwQixlQUd2QixFQUNBRSxlQUFnQixTQUF3QmhzQyxFQUFVaWlCLEdBQ2hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHFCQUFzQixDQUNwQmlzQyxjQUFlaHFCLEVBQUsrcEIsa0JBRzFCLEVBQ0FFLFVBQVcsU0FBbUJsc0MsRUFBVWlpQixHQUN0QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwyQ0FBNEMsQ0FDMUN1cEMsU0FBVXRuQixFQUFLaXFCLFVBQVksUUFHakMsRUFDQTVNLFlBQWEsU0FBcUJ0L0IsRUFBVWlpQixHQUMxQyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwyQ0FBNEMsQ0FDMUMzVCxXQUFZNDFCLEVBQUtxZCxvQkFFUXJ1QyxJQUF6Qmd4QixFQUFLb29CLGlCQUFpQ0YsR0FBNEJucUMsRUFBVWlpQixRQUFnQ2h4QixJQUF6Qmd4QixFQUFLc29CLHNCQUEwRHQ1QyxJQUF6Qmd4QixFQUFLb29CLGlCQUFpQ0csR0FBNEN4cUMsRUFBVWlpQixHQUMzTixFQUNBa3FCLG1CQUFvQixTQUE0Qm5zQyxFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QixDQUN0Qix3QkFBeUIsQ0FDdkIwMkIsTUFBT3pVLEVBQUtrcUIsbUJBQXFCLE1BRW5DLFdBQVksQ0FDVnpWLE1BQU96VSxFQUFLa3FCLG1CQUFxQixLQUNqQzcvQyxPQUFRMjFCLEVBQUtrcUIsbUJBQXFCLEtBQ2xDQyxXQUFZbnFCLEVBQUtrcUIsbUJBQXFCLEVBQUksU0FJbEQsRUFDQTVCLGdCQUFpQixTQUF5QnZxQyxFQUFVaWlCLEdBQ2xELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCa2xCLFFBQVNqRCxFQUFLc29CLGdCQUFrQixPQUNoQyx5QkFBMEIsQ0FDeEJybEIsUUFBUyxVQUVnQmowQixJQUF6Qmd4QixFQUFLb29CLGlCQUFpQ0MsR0FBZ0N0cUMsRUFBVWlpQixRQUE0Qmh4QixJQUFyQmd4QixFQUFLcWQsa0JBQXNEcnVDLElBQXpCZ3hCLEVBQUtzb0Isc0JBQTBEdDVDLElBQXpCZ3hCLEVBQUtvb0IsaUJBQWlDRyxHQUE0Q3hxQyxFQUFVaWlCLEdBQ2pRLEVBQ0FvcUIsZ0JBQWlCLFNBQXlCcnNDLEVBQVVpaUIsR0FDbEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsOEJBQStCLENBQzdCLHVCQUF3QixDQUN0QitxQyxZQUFhOW9CLEVBQUtvcUIsZ0JBQWtCLFNBSTVDLEVBQ0FDLGVBQWdCLFNBQXdCdHNDLEVBQVVpaUIsR0FDaEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEJ1c0MsY0FBZXRxQixFQUFLcXFCLGVBQWlCLE9BRXpDLEVBRUE3ZixPQUFRLFNBQWdCenNCLEVBQVVpaUIsR0FDaEMsT0FBT0EsRUFBS3dLLFFBQVVvZSxHQUFVN3FDLEVBQ2xDLEVBQ0F5NUIsVUFBVyxTQUFtQno1QixFQUFVaWlCLEdBQ3RDLE9BQU9BLEVBQUt3WCxXQXBNQyxTQUFtQno1QixHQUNsQyxPQUFPMmlCLEdBQUkzaUIsRUFBVSxDQUNyQixFQUNGLENBaU02QndzQyxDQUFXeHNDLEVBQ3RDLEdBQ0Nvb0MsSUFFQ3FFLEdBQWdCNW9CLEdBQWEsQ0FDL0JaLE9BQVFpb0IsS0FHTndCLEdBQWUsR0FBS3ZPLGtCQUtwQndPLEdBQVksR0FBUyxDQUFDLEVBQUcsQ0FDM0JsZ0IsUUFBUSxFQUNSZ04sV0FBVyxHQUNWNk8sSUFFQ3NFLEdBQWEsQ0FDZjVCLGFBUmlCLEVBU2pCNkIsbUJBQW9CaHFCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLUSwyQkFJM0R5TSw0QkFBNkJqcUIsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtPLDJCQUVwRTJNLGtCQUFtQmxxQixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2tCLDBCQUl6RCtMLDJCQUE0Qm5xQixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2lCLDJCQU1oRWlNLEdBQWlCLEdBQWUsQ0FJbEN0cEIsZ0JBQWdCLEVBQ2hCaWIsbUJBQW9CLEdBQUtBLG1CQUN6QmdNLGNBQWUsR0FBSzdNLHdCQUNwQm9PLG1CQUFvQixHQUNwQkQsVUFBVyxHQUNYSixZQUFhLElBQ2J6QixnQkFBaUIsR0FDakJpQyxlQUFnQixJQUNoQmhOLFlBQWEsRUFDYmtNLFVBQVcsRUFBSSxHQUFLL04sb0JBQ3BCOE0saUJBQWtCbUMsR0F4Q1AsSUF3Q2dDLEVBRTNDakIsVUFBVyxFQUFJLEdBQUtqTyxVQUVwQnFPLHFCQUFzQixFQUFJLEdBQUtyTyxVQUUvQmdNLGFBQWMsR0FBS2hNLFVBQ25CNk8sZ0JBOUNpQixFQStDakJMLGVBQWdCLFlBQ2hCcE0sdUJBQXdCLGNBQ3hCc04saUJBQWtCcnFCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLRywwQkFDekRtTiw0QkFBNkIsZUFDN0JDLHlCQUEwQixHQUMxQkMsOEJBQStCeHFCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLVSwrQkFDdEUrTSxnQ0FBaUMsY0FDakNDLDBCQUEyQjFxQixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS08sMkJBQ2xFb04saUJBQWtCM3FCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLSyw0QkFDekR1TixzQkFBdUI1cUIsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtTLDBCQUM5RFIsc0JBQXVCLGNBQ3ZCNE4sZ0JBQWlCN3FCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLYSx5QkFDdkQrTSwyQkFBNEIsZUFDNUJDLHdCQUF5QixHQUN6QkMsNkJBQThCaHJCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLb0IsOEJBQ3BFMk0sK0JBQWdDLGNBQ2hDQyx5QkFBMEJsckIsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtpQiwwQkFDaEVnTixnQkFBaUJuckIsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtlLDJCQUN2RG1OLHFCQUFzQnByQixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS21CLDBCQUMzRDBMLEdBQVksQ0FBQyxFQUFHRCxJQUVmdUIsR0FBYyxHQUFlLENBQy9CemhCLFFBQVEsRUFDUmdOLFdBQVcsR0FDVjZPLElBS0M2RixHQUFzQixHQUFlLENBSXZDeHFCLGdCQUFnQixFQUNoQjhuQixVQUFXLEVBQUksR0FBS2pPLFVBRXBCb0MsdUJBQXdCLE9BQ3hCME4sZ0NBQWlDenFCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLYSxpQ0FDeEVtTiw2QkFBOEJockIsR0FBSyxHQUFLNGMsb0JBQ3hDSyxzQkFBdUJqZCxHQUFLLEdBQUswYyxlQUNqQ3VPLCtCQUFnQ2pyQixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS3VCLGlDQUNyRTRNLElBR0MsR0FBTSxDQUFDekIsR0FBZS9uQixJQUN0QjBwQixHQUFXLENBQUNycUIsSUFDWnNxQixHQUFnQixJQUFJaHJDLE9BQU8sR0FBZSxPQUMxQyxHQUFXLElBQUlBLE9BQU8sR0FBUStELFdBcUY5QixHQUFRb2QsR0FBWSxDQUN0QkUsV0FBWUEsS0FTVjRwQixHQUFRLENBTEN6cUIsR0FBYSxDQUN4QkUsWUFBYTBvQixLQUlNLElBQ2pCdnNCLEdBQVksQ0FBQyxHQUFROVksVUFBVyxHQUFRcXlCLFdBQVcvK0IsS0FBSyxLQUN4RDZ6QyxHQUFhLElBQUlsckMsT0FBTzZjLEdBQVV6ZixNQUFNLE1BQU0vRixLQUFLLE1BNkRuRDh6QyxJQTVEYSxHQUFzQkQsR0FBWUQsR0FBT0gsSUFDekMsR0FBc0JJLEdBQVlELEdBQU9ILElBMkRuQ2xCLElDLzBCbkIsR0FBUyxDQUlYdHBCLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FDcEJtYSxRQUFTLFNBRWIsR0FlRXMwQixHQUFrQixDQUlwQjlxQixnQkFBZ0IsR0FJZCxHQUFNLENBckJHRSxHQUFhLENBQ3hCWixPQUFRLE1BcUJOLEdBQVcsSUFBSTVmLE9BcENOLG1CQ0FULElEcUNXLEdBQXNCLEdBQVUsR0FBS29yQyxJQUNyQyxHQUFzQixHQUFVLEdBQUtBLElDckN2QyxXQXVDYixTQUFTLEdBQWdCcmhDLEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsS0FlUCxPQWRBLEdBQVcvYixPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDQUVBLElBQUksR0FBYSxDQUNmNDBCLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sRUFDVCxHQUlFLEdBQVUsU0FBaUJ3bUMsR0FDN0IsT0FBTyxHQUFnQixDQUFDLEVBQUcsU0FBV0EsRUFBTyxtQkFBb0IsU0FBVXhtQyxFQUFVaWlCLEdBQ25GLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCM1MsZ0JBQWlCNDBCLEVBQUssU0FBV3VrQixFQUFPLHNCQUU1QyxFQUNGLEVBTUksR0FBUWhpQixHQUFZLENBQ3RCdkIsT0FBUSxDQUNOd2pCLGFBTmUsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFVBT2hEQyxZQUxjLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxZQVMvQ2dJLEdBQWUsQ0FDakIvcUIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxFQUNULEdBSUUydUMsR0FBWSxTQUFpQm5JLEdBQy9CLElBQUluM0IsRUFFSixPQUFrQixHQUFYQSxFQUFPLENBQUMsRUFBeUIsU0FBV20zQixFQUFPLGNBQWUsU0FBVXhtQyxFQUFVaWlCLEdBQzNGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLG1CQUFvQixDQUNsQnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGtCQUdwQyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGlCQUFrQixTQUFVeG1DLEVBQVVpaUIsR0FDaEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsc0JBQXVCLENBQ3JCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8scUJBR3BDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sUUFBUyxTQUFVeG1DLEVBQVVpaUIsR0FDdkUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsa0JBQW1CLENBQ2pCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sWUFHcEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxrQkFBbUIsU0FBVXhtQyxFQUFVaWlCLEdBQ2pGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDZCQUE4QixDQUM1Qmk1QixVQUFXLGFBQWVoWCxFQUFLLFNBQVd1a0IsRUFBTyxzQkFHdkQsR0FBSW4zQixDQUNOLEVBTUl1L0IsR0FBZXBxQixHQUFZLENBQzdCdkIsT0FBUSxDQUNOd2pCLGFBTmlCLEdBQVMsQ0FBQyxFQUFHaUksR0FBY0MsR0FBVSxVQU90RGpJLFlBTGdCLEdBQVMsQ0FBQyxFQUFHZ0ksR0FBY0MsR0FBVSxZQThCckRFLEdBQWlFLFNBQXdFN3VDLEVBQVVpaUIsR0FDckosT0FBT1UsR0FBSTNpQixFQUFVLENBQ25CLHFCQUFzQixDQUNwQiwyQkFBNEIsQ0FDMUIsbUJBQW9CLENBQ2xCc3JDLGNBQWVycEIsRUFBSzZzQiwyQkFBNkI3c0IsRUFBSzhzQixvQ0FBc0MsU0FLdEcsRUFFSUMsR0FBc0UsU0FBNkVodkMsRUFBVWlpQixHQUMvSixPQUFPVSxHQUFJM2lCLEVBQVUsQ0FDbkIsbUJBQW9CLENBQ2xCa2xCLFFBQVMsQ0FBQ2pELEVBQUtndEIsZ0JBQWlCaHRCLEVBQUtpdEIsZ0JBQWlCanRCLEVBQUtndEIsZ0JBQWtCaHRCLEVBQUs4c0Isb0NBQXFDOXNCLEVBQUtpdEIsaUJBQWlCdjdDLElBQUksU0FBVVIsR0FDekosT0FBT0EsRUFBSSxJQUNiLEdBQUd1SCxLQUFLLE9BR2QsRUFFSXkwQyxHQUE4QyxTQUFxRG52QyxFQUFVaWlCLEdBQy9HLE9BQU9VLEdBQUkzaUIsRUFBVSxDQUNuQixrQkFBbUIsQ0FDakJxckMsV0FBWXBwQixFQUFLbXRCLGVBQWlCbnRCLEVBQUtvdEIsNkJBQStCLE9BRzVFLEVBRUlDLEdBQXNELFNBQTZEdHZDLEVBQVVpaUIsR0FDL0gsT0FBT1UsR0FBSTNpQixFQUFVLENBQ25CLGtCQUFtQixDQUNqQixlQUFnQixDQUNkc3JDLGNBQWVycEIsRUFBS3N0QixvQkFBc0J0dEIsRUFBS3V0QixnQ0FBa0MsUUFJekYsRUFFSUMsR0FBNEQsU0FBbUV6dkMsRUFBVWlpQixHQUMzSSxPQUFPVSxHQUFJM2lCLEVBQVUsQ0FDbkIsa0JBQW1CLENBQ2pCc3JDLGNBQWVycEIsRUFBS3l0QiwwQkFBNEJ6dEIsRUFBS3V0QixnQ0FBa0MsS0FDdkYsMkRBQTRELENBQzFEbEUsY0FBZXJwQixFQUFLeXRCLDBCQUE0Qnp0QixFQUFLdXRCLGdDQUFrQyxRQUkvRixFQUVJLEdBQVMsQ0FDWDdyQixlQUFnQixTQUF3QjNqQixFQUFVMnZDLEdBQ2hELE1BQU8sQ0FBQ2h0QixHQUFJM2lCLEVBQVUsQ0E5RGIsQ0FBQyxFQThEZ0MsQ0FDeENtYSxRQUFTLFFBQ1R2dkIsU0FBVSxXQUNWLHVCQUF3QixDQUN0QnkrQyxlQUFnQixRQUdsQixxQkFBc0IsQ0FDcEJ6K0MsU0FBVSxXQUNWaThDLGFBQWMsVUFDZG42QyxTQUFVLFNBQ1ZncUMsTUFBTyxVQUNQcHFDLE9BQVEsV0FHVixtQkFBb0IsQ0FDbEIxQixTQUFVLFdBQ1Y4QixTQUFVLFNBQ1ZrakQsb0JBQXFCLFVBQ3JCQyxxQkFBc0IsVUFDdEJDLGVBQWdCLFFBQ2hCQyxpQkFBa0IsWUFDbEJDLG1CQUFvQixTQUNwQiw2QkFBOEIsQ0FDNUIxRSxjQUFlLFVBRWpCLDBCQUEyQixDQUN6QkEsY0FBZSxRQUVqQiwwQkFBMkIsQ0FDekI1VSxNQUFPLE9BQ1BwcUMsT0FBUSxPQUNSNnRCLFFBQVMsUUFDVCxnQ0FBaUMsQ0FDL0I4MUIsb0JBQXFCLE9BRXZCLDhCQUErQixDQUM3QkEsb0JBQXFCLFdBR3pCLDBCQUEyQixDQUN6QjNqRCxPQUFRLE9BQ1JvcUMsTUFBTyxPQUNQdmMsUUFBUyxRQUNULGdDQUFpQyxDQUMvQisxQixvQkFBcUIsUUFFdkIsOEJBQStCLENBQzdCQSxvQkFBcUIsVUFHekIsZUFBZ0IsQ0FBQ24yQixJQUFhLENBQzVCMmMsTUFBTyxPQUNQcHFDLE9BQVEsT0FDUjZqRCxTQUFVLFNBRVosT0FBUSxDQUNOcHRCLFFBQVMsR0FJWCxzQ0FBdUMsQ0FDckM2c0Isb0JBQXFCLEVBQ3JCQyxxQkFBc0IsSUFHMUIsMkJBQTRCLENBQzFCMXFCLE9BQVEsUUFHVixxQkFBc0JwTCxJQUV0QiwyQkFBNEIsQ0FBQ0EsSUFBYSxDQUN4Q1csT0FBUSxFQUNSMnRCLGNBQWUsUUFFakIsOEJBQStCLENBQzdCejlDLFNBQVUsV0FDVjZ2QixPQUFRLEVBQ1J4dEIsSUFBSyxPQUNMdXRCLE1BQU8sRUFDUHJ0QixLQUFNLEVBQ051dEIsT0FBUSxHQUdWLG9CQUFxQixDQUNuQix3QkFBeUIsQ0FDdkI2dUIsU0FBVSxPQUNWd0MsV0FBWSxHQUFLN00sbUJBQ2pCN3lDLFdBQVksT0FDWisvQyxVQUFXLE9BRWIsMkJBQTRCLENBQzFCQSxVQUFXLFNBSWYscUJBQXNCLENBQUMsRUFBS256QixpQkFBa0IsQ0FDNUNydUIsU0FBVSxXQUNWLHFCQUFzQixDQUNwQndoRCxVQUFXLFdBSWYsbUJBQW9CLENBQUMsRUFBSzl6QixPQUFRLENBQ2hDaXhCLFNBQVUsT0FDVmw5QyxXQUFZLFNBR2Qsc0JBQXVCLENBQ3JCazlDLFNBQVUsT0FDVmw5QyxXQUFZLFFBR2QscUJBQXNCLENBQ3BCLDJCQUE0QixDQUMxQis5QyxVQUFXLEVBQ1hpQixXQUFZLEVBQ1pDLGNBQWUsRUFDZiw4QkFBK0IsQ0FDN0JJLFlBQWEsRUFDYkMsYUFBYyxJQUdsQixnQ0FBaUMsQ0FDL0J2QixVQUFXLE9BQ1g5OUMsT0FBUSxRQUdWLGtFQUFtRSxDQUFDLEVBQUsyc0IsaUJBQWtCLEVBQUtkLGFBQWMsQ0FDNUcsY0FBZSxDQUNib3pCLFNBQVUsS0FHZCwrQkFBZ0MsQ0FBQyxFQUFLbnlCLGlCQUN0Qyw4QkFBK0IsQ0FBQyxFQUFLRyxlQUFnQixDQUVuRCxxQkFBc0IsQ0FBQyxDQUNyQjZ3QixVQUFXLElBRWIsY0FBZSxDQUNiOTlDLE9BQVEsT0FDUjQ0QixRQUFTLEdBRVgsWUFBYSxDQUNYQSxRQUFTLE1BSWYsaUVBQWtFLENBQ2hFa25CLFVBQVcsU0FHYixrQkFBbUIsQ0FDakI3QyxTQUFVLE9BQ1ZsOUMsV0FBWSxPQUNaLHlCQUEwQixDQUN4QisvQyxVQUFXLFFBR2YscUNBQXNDLENBQ3BDLHlDQUEwQyxDQUV4Q3hoRCxTQUFVLFdBQ1Y4dkIsT0FBUSxLQUdYLENBRUQsdUJBQXdCLEdBQWdCLENBQUMsRUFBRzFhLEVBdk9yQyxDQUFDLE1BeU9aLEVBQ0E0cUMsY0FBZSxTQUF1QjVxQyxFQUFVaWlCLEdBQzlDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCNm1DLGFBQWM1a0IsRUFBSzJvQixjQUFnQixLQUNuQyxxQ0FBc0MsQ0FDcENnRixvQkFBcUIsRUFDckJDLHFCQUFzQixFQUN0Qk8sdUJBQXdCLEVBQ3hCQyx3QkFBeUIsR0FFM0Isa0dBQW1HLENBQ2pHLGVBQWdCLENBQ2RULG9CQUFxQjN0QixFQUFLMm9CLGNBQWdCLEtBQzFDaUYscUJBQXNCNXRCLEVBQUsyb0IsY0FBZ0IsTUFFN0MsY0FBZSxDQUNid0YsdUJBQXdCbnVCLEVBQUsyb0IsY0FBZ0IsS0FDN0N5Rix3QkFBeUJwdUIsRUFBSzJvQixjQUFnQixTQUl0RCxFQUNBMEYsaUJBQWtCLFNBQTBCdHdDLEVBQVVpaUIsR0FDcEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsMkJBQTRCLENBQzFCLDBCQUEyQixDQUN6QjAyQixNQUFPelUsRUFBS3F1QixpQkFBbUIsS0FDL0Joa0QsT0FBUTIxQixFQUFLcXVCLGlCQUFtQixTQUl4QyxFQUNBQyxtQkFBb0IsU0FBNEJ2d0MsRUFBVWlpQixHQUN4RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwyQkFBNEIsQ0FDMUIsNEJBQTZCLENBQzNCMDJCLE1BQU96VSxFQUFLc3VCLG1CQUFxQixTQUl6QyxFQUNBQyxrQkFBbUIsU0FBMkJ4d0MsRUFBVWlpQixHQUN0RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwyQkFBNEIsQ0FDMUIsMkJBQTRCLENBQzFCMDJCLE1BQU96VSxFQUFLdXVCLGtCQUFvQixTQUl4QyxFQUNBQyxpQkFBa0IsU0FBMEJ6d0MsRUFBVWlpQixHQUNwRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwyQkFBNEIsQ0FDMUIsMEJBQTJCLENBQ3pCMDJCLE1BQU96VSxFQUFLd3VCLGlCQUFtQixTQUl2QyxFQUNBQywwQkFBMkIsU0FBbUMxd0MsRUFBVWlpQixHQUN0RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixvQkFBcUIsQ0FDbkIxVCxPQUFRMjFCLEVBQUt5dUIsMEJBQTRCLFFBRy9DLEVBQ0E1QiwyQkFBNEIsU0FBb0M5dUMsRUFBVWlpQixHQUN4RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUFDLEdBQUk2dUMsR0FBK0Q3dUMsRUFBVWlpQixHQUN0RyxFQUNBOHNCLG9DQUFxQyxTQUE2Qy91QyxFQUFVaWlCLEdBQzFGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQUMsR0FBSTZ1QyxHQUErRDd1QyxFQUFVaWlCLEdBQU8rc0IsR0FBb0VodkMsRUFBVWlpQixHQUMzTCxFQUNBZ3RCLGdCQUFpQixTQUF5Qmp2QyxFQUFVaWlCLEdBQ2xELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQUMsR0FBSWd2QyxHQUFvRWh2QyxFQUFVaWlCLEdBQzNHLEVBQ0FpdEIsZ0JBQWlCLFNBQXlCbHZDLEVBQVVpaUIsR0FDbEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FBQyxHQUFJZ3ZDLEdBQW9FaHZDLEVBQVVpaUIsR0FDM0csRUFDQTB1Qix3QkFBeUIsU0FBaUMzd0MsRUFBVWlpQixHQUNsRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixrREFBbUQsQ0FDakRtbEIsT0FBUSxNQUFNOWhCLE9BQU80ZSxFQUFLMHVCLHdCQUF5QixNQUNuRCxjQUFlLENBQ2J4ckIsT0FBUSxLQUFLOWhCLE9BQU80ZSxFQUFLMHVCLHdCQUF5QixVQUkxRCxFQUNBQyxrQkFBbUIsU0FBMkI1d0MsRUFBVWlpQixHQUN0RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixxQkFBc0IsQ0FDcEJxckMsV0FBWXBwQixFQUFLMnVCLGtCQUFvQixLQUNyQ3RGLGNBQWVycEIsRUFBSzJ1QixrQkFBb0IsUUFHOUMsRUFDQUMsa0JBQW1CLFNBQTJCN3dDLEVBQVVpaUIsR0FDdEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIscUJBQXNCLENBQ3BCMnJDLGFBQWMxcEIsRUFBSzR1QixrQkFBb0IsS0FDdkNuRixZQUFhenBCLEVBQUs0dUIsa0JBQW9CLFFBRzVDLEVBQ0FDLHdCQUF5QixTQUFpQzl3QyxFQUFVaWlCLEdBQ2xFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHFCQUFzQixDQUNwQiw4QkFBK0IsQ0FDN0IsY0FBZSxDQUNib3NDLFVBQVducUIsRUFBSzZ1Qix3QkFBMEIsS0FDMUNDLGFBQWM5dUIsRUFBSzZ1Qix3QkFBMEIsVUFLdkQsRUFDQUUsMkJBQTRCLFNBQW9DaHhDLEVBQVVpaUIsR0FDeEUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIscUJBQXNCLENBQ3BCLDhCQUErQixDQUM3QixpQ0FBa0MsQ0FDaENxckMsV0FBWXBwQixFQUFLK3VCLDJCQUE2QixLQUM5QzFGLGNBQWVycEIsRUFBSyt1QiwyQkFBNkIsTUFHbkQscUJBQXNCLENBQUMsQ0FDckIsZ0JBQWlCLENBQ2Y1RSxXQUFZbnFCLEVBQUsrdUIsMkJBQTZCLE1BRWhELGVBQWdCLENBQ2RELGNBQWU5dUIsRUFBSyt1QiwyQkFBNkIsWUFNN0QsRUFDQUMsdUJBQXdCLFNBQWdDanhDLEVBQVVpaUIsR0FDaEUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIscUNBQXNDLENBQ3BDLHlDQUEwQyxDQUN4Q29zQyxZQUFhbnFCLEVBQUtndkIsdUJBQXlCLEdBQUssU0FJeEQsRUFDQUMsZUFBZ0IsU0FBd0JseEMsRUFBVWlpQixHQUNoRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixrQkFBbUIsQ0FDakIyckMsYUFBYzFwQixFQUFLaXZCLGVBQWlCLEtBQ3BDeEYsWUFBYXpwQixFQUFLaXZCLGVBQWlCLFFBR3pDLEVBQ0E5QixlQUFnQixTQUF3QnB2QyxFQUFVaWlCLEdBQ2hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQUMsR0FBSW12QyxHQUE0Q252QyxFQUFVaWlCLEdBQ25GLEVBQ0FvdEIsNkJBQThCLFNBQXNDcnZDLEVBQVVpaUIsR0FDNUUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FBQyxHQUFJbXZDLEdBQTRDbnZDLEVBQVVpaUIsR0FDbkYsRUFDQXN0QixvQkFBcUIsU0FBNkJ2dkMsRUFBVWlpQixHQUMxRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUFDLEdBQUlzdkMsR0FBb0R0dkMsRUFBVWlpQixHQUMzRixFQUNBeXRCLDBCQUEyQixTQUFtQzF2QyxFQUFVaWlCLEdBQ3RFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQUMsR0FBSXl2QyxHQUEwRHp2QyxFQUFVaWlCLEdBQ2pHLEVBQ0F1dEIsZ0NBQWlDLFNBQXlDeHZDLEVBQVVpaUIsR0FDbEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FBQyxHQUFJc3ZDLEdBQW9EdHZDLEVBQVVpaUIsR0FBT3d0QixHQUEwRHp2QyxFQUFVaWlCLEdBQ3RLLEdBRUUsR0FBUzRCLEdBQWEsQ0FDeEJaLE9BQVEsS0FHTmt1QixHQUFlLENBQ2pCeHRCLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sRUFDVCxHQUlFb3hDLEdBQVksU0FBaUI1SyxHQUMvQixPQUFPLEdBQWdCLENBQUMsRUFBRyxTQUFXQSxFQUFPLHNCQUF1QixTQUFVeG1DLEVBQVVpaUIsR0FDdEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsOEJBQStCLENBQzdCM1MsZ0JBQWlCNDBCLEVBQUssU0FBV3VrQixFQUFPLDBCQUc5QyxFQUNGLEVBTUk2SyxHQUFlN3NCLEdBQVksQ0FDN0J2QixPQUFRLENBQ053akIsYUFOaUIsR0FBUyxDQUFDLEVBQUcwSyxHQUFjQyxHQUFVLFVBT3REMUssWUFMZ0IsR0FBUyxDQUFDLEVBQUd5SyxHQUFjQyxHQUFVLFlBaUJyREUsR0FBVyxDQUNiM3RCLGdCQUFnQixFQUNoQmd0Qix3QkFBeUIsR0FBS25ULFVBQzlCc1Qsd0JBUjRCLEVBUzVCRCxrQkFBbUIsRUFDbkJELGtCQUFtQixFQUNuQkksMkJBQTRCTyxFQUM1QjNHLGNBQWUsR0FBSzlNLHlCQUNwQjBULG1CQUFvQixHQUNwQmYsaUJBQWtCLElBQ2xCRCxrQkFBbUIsSUFDbkJELG1CQUFvQixJQUNwQkQsaUJBQWtCLEdBQ2xCVyx1QkFBd0JRLEVBQ3hCZiwwQkFBMkIsR0FDM0JnQixtQkFBb0IsRUFDcEJqRyxVQUFXLEdBQ1hzRCxvQ0FBcUMsRUFDckNTLGdDQUFpQyxFQUNqQ0gsNkJBQThCLEVBQzlCRSxvQkFBcUIsR0FDckIyQixlQUFnQixHQUNoQjlCLGVBQWdCLEdBQ2hCTSwwQkFBMkIsR0FDM0JaLDJCQUE0QixHQUM1QkksZ0JBQWlCLEdBQ2pCRCxnQkFBaUIsR0FDakIwQyw0QkFBNkI5dUIsR0FBSyxHQUFLK2Msd0JBQ3ZDZ1MsdUJBQXdCL3VCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLRywwQkFDL0Q2UiwwQkFBMkJodkIsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtLLDRCQUNsRWdOLGlCQUFrQnJxQixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS0ksMEJBQ3pENlIsMkJBQTRCanZCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLUywwQkFDbkV5UiwrQkFBZ0NsdkIsR0FBSyxHQUFLK2MsdUJBQXdCLEdBQUtlLGdDQUN2RXFSLDJCQUE0Qm52QixHQUFLLEdBQUtpZCx1QkFDdENtUyxzQkFBdUJwdkIsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUthLHlCQUM3RHNSLHlCQUEwQnJ2QixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2UsMkJBQ2hFNE0sZ0JBQWlCN3FCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLYyx5QkFDdkRzUiwwQkFBMkJ0dkIsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUttQix5QkFDakVrUiw4QkFBK0J2dkIsR0FBSyxHQUFLaWQsc0JBQXVCLEdBQUt5QixnQ0FJbkUsR0FBVyxJQUFJbCtCLE9BQU8sSUFDdEJndkMsR0FBa0IsSUFBSWh2QyxPQWhvQmYsb0JBaW9CUGl2QyxHQUF1QixJQUFJanZDLE9BcG1CZiwyQkFxbUJaa3ZDLEdBQXlCLElBQUlsdkMsT0E1bkJmLDZCQTZuQmRtdkMsR0FBVSxDQUFDLEdBQVEsSUFDbkJDLEdBQWtCLENBQUNwQixJQUNuQnFCLEdBQWtCLENBQUM5RCxJQ25uQnZCLFNBQVMsR0FBZ0J4aEMsRUFBS3pjLEVBQUsvRCxHQVlqQyxPQVhJK0QsS0FBT3ljLEVBQ1QvYixPQUFPNmIsZUFBZUUsRUFBS3pjLEVBQUssQ0FDOUIvRCxNQUFPQSxFQUNQdWdCLFlBQVksRUFDWkcsY0FBYyxFQUNkQyxVQUFVLElBR1pILEVBQUl6YyxHQUFPL0QsRUFHTndnQixDQUNULENBRUEsU0FBUyxLQWVQLE9BZEEsR0FBVy9iLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENBRUEsSUFBSSxHQUFhLENBQ2Y0MEIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUNwQixvQkFBcUIsQ0FDbkIsdUJBQXdCLENBQ3RCcWtDLE1BQU8sV0FFVCwyQkFBNEIsQ0FDMUJBLE1BQU8sY0FJZixHQUdFLEdBQVUsU0FBaUJtQyxHQUM3QixJQUFJbjNCLEVBRUosT0FBa0IsR0FBWEEsRUFBTyxDQUFDLEVBQXlCLFNBQVdtM0IsRUFBTyxNQUFPLFNBQVV4bUMsRUFBVWlpQixHQUNuRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLFNBR2xDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sT0FBUSxTQUFVeG1DLEVBQVVpaUIsR0FDdEUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNEJBQTZCLENBQzNCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sV0FHcEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxZQUFhLFNBQVV4bUMsRUFBVWlpQixHQUMzRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix3QkFBeUIsQ0FDdkIsc0JBQXVCLENBQ3JCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sY0FFaEMsb0JBQXFCLENBQ25CLHFEQUFzRCxDQUNwRG5DLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sa0JBS3hDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sU0FBVSxTQUFVeG1DLEVBQVVpaUIsR0FDeEUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsc0JBQXVCLENBQ3JCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sYUFHcEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxXQUFZLFNBQVV4bUMsRUFBVWlpQixHQUMxRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixvQkFBcUIsQ0FDbkIsMkJBQTRCLENBQzFCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sZ0JBSXRDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sWUFBYSxTQUFVeG1DLEVBQVVpaUIsR0FDM0UsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsb0JBQXFCLENBQ25CLDRCQUE2QixDQUMzQnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGlCQUl0QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLFlBQWEsU0FBVXhtQyxFQUFVaWlCLEdBQzNFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGtCQUFtQixDQUNqQixzQkFBdUIsQ0FDckJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxpQkFJdEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxhQUFjLFNBQVV4bUMsRUFBVWlpQixHQUM1RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixtQkFBb0IsQ0FDbEIsc0JBQXVCLENBQ3JCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sa0JBSXRDLEdBQUluM0IsQ0FDTixFQU1JLEdBQVFtVixHQUFZLENBQ3RCdkIsT0FBUSxDQUNOd2pCLGFBTmUsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFVBT2hEQyxZQUxjLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxZQW1CL0NpTSxHQUFXLFNBQWtCaEQsRUFBUXJqRCxHQUN2QyxJQUFJc21ELEVBQVc3akQsVUFBVXFCLE9BQVMsUUFBc0JhLElBQWpCbEMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBQUtzdkMsZUFDcEZ3VSxFQUFZRCxFQUFXakQsRUFBT21ELGFBRWxDLE1BQU8sQ0FDTCwyQkFBNEIsQ0FDMUJ4bUQsT0FBUUEsRUFBUyxNQUVuQixvQkFBcUIsQ0FDbkJvcUMsTUFBT2tjLEVBQVcsS0FDbEJ0bUQsT0FBUXNtRCxFQUFXLE1BRXJCLHVCQUF3QixDQUN0QmxjLE1BQU9tYyxFQUFZLEtBQ25Cdm1ELE9BQVF1bUQsRUFBWSxLQUNwQmo2QixXQUFZLEVBQ1osWUFBYSxDQUFDbUIsR0FiQTg0QixFQUFZRCxHQUFZLEtBZ0I1QyxFQWdCSUcsR0FBd0IsU0FBK0IveUMsRUFBVWlpQixFQUFNOG5CLEdBQ3pFLElBQUlpSixFQUVKLE9BQU9yd0IsR0FBSTNpQixFQUFVLENBQ25CLGtDQUFtQ2d6QyxFQUFtQixDQUNwRC9sRCxNQUFRZzFCLEVBQUtneEIsWUFBY2h4QixFQUFLaXhCLFdBQWEsRUFBSyxNQUNqRCxHQUFnQkYsRUFBa0JqSixFQUFRLFFBQVUsU0FBVzluQixFQUFLZ3hCLFlBQWNoeEIsRUFBS2l4QixXQUFhLEVBQUssTUFBTyxHQUFnQkYsRUFBa0JqSixFQUFRLE9BQVMsUUFBUyxRQUFTaUosSUFFNUwsRUFFSUcsR0FBd0IsU0FBOEJuekMsRUFBVWlpQixFQUFNOG5CLEdBQ3hFLE9BQU9wbkIsR0FBSTNpQixFQUFVLENBQ25CLHNCQUF1QixHQUFnQixDQUFDLEVBQUcrcEMsRUFBUSxlQUFpQixjQUFlOW5CLEVBQUtteEIscUJBQXVCLE9BRW5ILEVBRUlDLEdBQXVCLFNBQTZCcnpDLEVBQVVpaUIsRUFBTThuQixHQUN0RSxPQUFPcG5CLEdBQUkzaUIsRUFBVSxDQUNuQixzQkFBdUIsR0FBZ0IsQ0FBQyxFQUFHK3BDLEVBQVEsY0FBZ0IsZUFBZ0I5bkIsRUFBS3F4QixvQkFBc0IsT0FFbEgsRUFFSSxHQUFTLENBQ1gzdkIsZUFBZ0IsU0FBd0IzakIsRUFBVWlpQixHQUNoRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQW5FZixDQUFDLEVBbUVnQyxDQUN0Q21hLFFBQVMsZUFDVG81QixVQUFXLGFBQ1hwdUIsT0FBUSxFQUNSRCxRQUFTLEVBQ1QsMkNBQTRDLENBQzFDL0ssUUFBUyxRQUVYLDJCQUE0QixDQUFDLEVBQUtsQixpQkFBa0IsRUFBS2QsYUFBYyxDQUNyRXZ0QixTQUFVLFdBQ1Y2ZCxPQUFRLFVBQ1IwYyxPQUFRLEVBQ1JrZixNQUFPLFVBQ1AsU0FBVSxDQUNSK0UsUUFBUyxLQUdiLHdCQUF5QixDQUN2QiwyQkFBNEIsQ0FDMUIzZ0MsT0FBUSxZQUdaLG9CQUFxQixDQUNuQjdkLFNBQVUsV0FDVnV2QixRQUFTLGVBQ1RvNUIsVUFBVyxhQUNYbFAsTUFBTyxVQUNQenJCLFdBQVksRUFDWixTQUFVLENBQ1J3d0IsUUFBUyxJQUdiLGlDQUFrQyxDQUNoQ3grQyxTQUFVLFlBRVosbUJBQW9CLENBQ2xCLDJCQWxFQyxDQUNMbTRCLFFBQVMsRUFDVHJJLFFBQVMsR0FpRUwsNEJBMUVDLENBQ0xxSSxRQUFTLEVBQ1RySSxPQUFRLElBMEVOLGtCQUFtQixDQUNqQiwyQkE3RUMsQ0FDTHFJLFFBQVMsRUFDVHJJLE9BQVEsR0E0RUosNEJBdkVDLENBQ0xxSSxRQUFTLEVBQ1RySSxRQUFTLElBdUVQLHNCQUF1QixDQUVyQjg0QixVQUFXLFVBRWIsd0JBQXlCLENBQ3ZCLDJCQUE0QixDQUMxQi9xQyxPQUFRLFFBRVYsdUJBQXdCLENBQ3RCNC9CLGNBQWUsU0FHbkIsdUJBQXdCLENBQ3RCLFlBQWEsQ0FDWHo5QyxTQUFVLGNBR2IsR0FBZ0IsQ0FBQyxFQUFHLGNBQWN5WSxPQUFPckQsRUFBVSxjQUFjcUQsT0FBT3JELEdBQVcsQ0EvSC9FLENBQUMsTUFnSVYsRUFDQXl6QyxnQkFBaUIsU0FBeUJ6ekMsRUFBVWlpQixHQUNsRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwyQkFBNEIsQ0FDMUJ1cEMsU0FBVXRuQixFQUFLd3hCLGdCQUFrQixRQUd2QyxFQUNBWCxhQUFjLFNBQXNCOXlDLEVBQVUydkMsR0FDNUMsTUFBTyxDQUFDaHRCLEdBQUkzaUIsRUFBVSxDQUNwQixvQkFBcUIsQ0FDbkIwMkIsTUFBT2laLEVBQU9tRCxhQUFlLEtBQzdCeG1ELE9BQVFxakQsRUFBT21ELGFBQWUsTUFFaEMscUJBQXNCSCxHQUFTaEQsRUFBUSxHQUFLdlIscUJBQXNCLEdBQUtBLHNCQUN2RSx1QkFBd0J1VSxHQUFTaEQsRUFBUUEsRUFBT21ELGFBQWMsR0FBS3pVLGdCQUNuRSxzQkFBdUJzVSxHQUFTaEQsRUFBUSxHQUFLclIsc0JBQXVCLEdBQUtBLHVCQUN6RSxxQkFBc0JxVSxHQUFTaEQsRUFBUSxHQUFLcFIscUJBQXNCLEdBQUtBLHdCQUUzRSxFQUNBSyxtQkFBb0IsU0FBNEI1K0IsRUFBVWlpQixHQUN4RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixpQ0FBa0MsQ0FBQytaLEVBQXdCLFVBQVdrSSxFQUFLMmMscUJBQzNFLHNCQUF1QixDQUFDN2tCLEVBQXdCLE1BQU9rSSxFQUFLMmMsdUJBRWhFLEVBQ0FxVSxZQUFhLFNBQXFCanpDLEVBQVVpaUIsR0FDMUMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FBQyxHQUFJK3lDLEdBQXNCL3lDLEVBQVVpaUIsR0FBTSxHQUFROHdCLEdBQXNCbndCLEdBQVk1aUIsR0FBV2lpQixHQUFNLEdBQzlILEVBQ0FpeEIsVUFBVyxTQUFtQmx6QyxFQUFVaWlCLEdBQ3RDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQUMsR0FBSSt5QyxHQUFzQi95QyxFQUFVaWlCLEdBQU0sR0FBUTh3QixHQUFzQm53QixHQUFZNWlCLEdBQVdpaUIsR0FBTSxHQUM5SCxFQUNBcXhCLG9CQUFxQixTQUE2QnR6QyxFQUFVaWlCLEdBQzFELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQUMsR0FBSXF6QyxHQUFxQnJ6QyxFQUFVaWlCLEdBQU0sR0FBUW94QixHQUFxQnp3QixHQUFZNWlCLEdBQVdpaUIsR0FBTSxHQUM1SCxFQUNBbXhCLHFCQUFzQixTQUE4QnB6QyxFQUFVaWlCLEdBQzVELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQUMsR0FBSW16QyxHQUFzQm56QyxFQUFVaWlCLEdBQU0sR0FBUWt4QixHQUFzQnZ3QixHQUFZNWlCLEdBQVdpaUIsR0FBTSxHQUM5SCxHQUVFLEdBQVM0QixHQUFhLENBQ3hCWixPQUFRLEtBWU55d0IsR0FBdUIsQ0FJekIvdkIsZ0JBQWdCLEVBQ2hCaWIsbUJBQW9CLEdBQUtBLG1CQUN6QnFVLFlBQWEsRUFBSSxHQUFLeFYsb0JBQ3RCeVYsVUFBVyxFQUFJLEdBQUt6VixvQkFDcEJnVyxnQkFBaUIsRUFBSSxHQUFLaFcsb0JBRTFCcVYsYUFBYyxFQUFJLEdBQUtyVixvQkFFdkI2VixvQkFBcUIsRUFDckJGLHFCQUF1QyxFQUFqQixHQUFLNVYsVUFFM0JtVyxlQUFnQjl3QixHQUFLLEdBQUswYyxlQUMxQnFVLGdCQUFpQi93QixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS0ssNEJBQ3hEMlQsa0JBQW1CaHhCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLSyw0QkFDMUQ0VCxxQkFBc0JqeEIsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtPLDJCQUk3RDJULG9CQUFxQixVQUNyQkMscUJBQXNCLFVBRXRCQyxxQkFBc0JweEIsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtLLDRCQUM3RGdVLHNCQUF1QnJ4QixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS0ssNEJBSzlEaVUsY0FBZXR4QixHQUFLLEdBQUswYyxlQUN6QjZVLGVBQWdCdnhCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLZSwyQkFDdER1VCxpQkFBa0J4eEIsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtlLDJCQUN4RHdULG9CQUFxQnp4QixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2lCLDBCQUkzRHVULG1CQUFvQixVQUNwQkMsb0JBQXFCLFVBRXJCQyxvQkFBcUI1eEIsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtlLDJCQUMzRDRULHFCQUFzQjd4QixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2UsNEJBUTFELEdBQU0sQ0FBQyxHQUFRLElBQ2YsR0FBVyxJQUFJejlCLE9BOVhOLGNDSVQsSUQyWFcsR0FBc0IsR0FBVSxHQUFLcXdDLElBQ3JDLEdBQXNCLEdBQVUsR0FBS0EsSUM1WHhDbHZCLEdBQVksQ0FDdEJFLFdBQVksTUFpQlZpd0IsR0FBZSxDQUlqQmh4QixnQkFBZ0IsR0FJZCxHQUFNLENBckJHRSxHQUFhLENBQ3hCRSxZQUFhLEtBb0JJLElBQ2YsR0FBVyxJQUFJMWdCLE9BL0JOLHVCQ21CYixTQUFTLEdBQWdCK0osRUFBS3pjLEVBQUsvRCxHQVlqQyxPQVhJK0QsS0FBT3ljLEVBQ1QvYixPQUFPNmIsZUFBZUUsRUFBS3pjLEVBQUssQ0FDOUIvRCxNQUFPQSxFQUNQdWdCLFlBQVksRUFDWkcsY0FBYyxFQUNkQyxVQUFVLElBR1pILEVBQUl6YyxHQUFPL0QsRUFHTndnQixDQUNULENBRUEsU0FBUyxLQWVQLE9BZEEsR0FBVy9iLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENEbEJlLEdBQXNCLEdBQVUsR0FBSzRsRCxJQUNyQyxHQUFzQixHQUFVLEdBQUtBLElDbUJwRCxJQUFJLEdBQWEsQ0FDZmh4QixlQUFnQixXQUNkLE1BQU8sQ0FBQyxDQUNOLHlCQUEwQixDQUN4QitsQixZQUFhLGdCQUduQixHQUdFLEdBQVUsU0FBaUJsRCxHQUM3QixJQUFJbjNCLEVBRUosT0FBa0IsR0FBWEEsRUFBTyxDQUFDLEVBQXlCLFNBQVdtM0IsRUFBTyxjQUFlLFNBQVV4bUMsRUFBVWlpQixHQUMzRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyxpQkFFNUMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxjQUFlLFNBQVV4bUMsRUFBVWlpQixHQUM3RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixrREFBbUQsQ0FDakRxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxrQkFHcEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxhQUFjLFNBQVV4bUMsRUFBVWlpQixHQUM1RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix5QkFBMEIsQ0FDeEJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxpQkFHcEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxlQUFnQixTQUFVeG1DLEVBQVVpaUIsR0FDOUUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsb0RBQXFELENBQ25ENDBDLGVBQWdCM3lCLEVBQUssU0FBV3VrQixFQUFPLGlCQUV6Qyx1REFBd0QsQ0FDdERxTyxrQkFBbUIsUUFDbkJDLGtCQUFtQjd5QixFQUFLLFNBQVd1a0IsRUFBTyxtQkFHaEQsR0FBSW4zQixDQUNOLEVBTUksR0FBUW1WLEdBQVksQ0FDdEJ2QixPQUFRLENBQ053akIsYUFOZSxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsVUFPaERDLFlBTGMsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFlBUy9DcU8sR0FBZ0MsU0FBdUMvMEMsRUFBVWlpQixHQUNuRixJQUFJNkIsRUFFQWt4QixFQUEyQi95QixFQUFLZ3pCLFVBQVksRUFBSWh6QixFQUFLaXpCLG9CQUN6RCxPQUFtQixHQUFacHhCLEVBQVEsQ0FBQyxFQUEwQixzQkFBd0JreEIsRUFBMkIsTUFBTyxHQUFnQixDQUFDLEVBQUdoMUMsRUFBVSxDQUNoSW13QyxTQUFVLGdCQUFnQjlzQyxPQUFPLEVBQUk0ZSxFQUFLaXpCLG9CQUFxQixVQUM1RCxHQUFnQnB4QixFQUFPLHVCQUF5Qmt4QixFQUEyQixHQUFLLE1BQU8sR0FBZ0IsQ0FBQyxFQUFHaDFDLEVBQVUsQ0FDeEhtd0MsU0FBVWx1QixFQUFLZ3pCLFVBQVksUUFDeEJueEIsQ0FDUCxFQUVJcXhCLEdBQXdCLFNBQStCbjFDLEVBQVVpaUIsR0FDbkUsT0FBT1UsR0FBSTNpQixFQUFVLENBQ25CLGtDQUFtQyxDQUNqQ3FyQyxXQUFZcHBCLEVBQUtpRCxRQUFVLEVBQUksS0FDL0J5bUIsYUFBYzFwQixFQUFLaUQsUUFBVSxLQUM3Qm9tQixjQUFlcnBCLEVBQUttekIsY0FBZ0IsRUFBSSxLQUN4QzFKLFlBQWF6cEIsRUFBS2lELFFBQVUsT0FHbEMsRUFNSW13QixHQUE4QyxTQUFxRHIxQyxFQUFVaWlCLEdBQy9HLE9BQU9VLEdBQUkzaUIsRUFBVSxDQUNuQix5QkFBMEIsQ0FDeEJvYSxVQUFXLGlCQUFpQi9XLE9BQU80ZSxFQUFLcXpCLGNBQWUsU0FBU2p5QyxPQUFPNGUsRUFBS3N6QixjQUFlLGFBQWFseUMsT0FBTzRlLEVBQUt1ekIsZ0JBQWlCLFVBRzNJLEVBTUksR0FBYSxTQUFvQngxQyxHQUNuQyxPQUFPMmlCLEdBQUkzaUIsRUFBVSxDQUNuQixtQkFBb0IsQ0FDbEI2bUMsYUFBYyxHQUVoQiw0QkFBNkIsQ0FDM0JBLGFBQWMsRUFDZHNKLFNBQVUsT0FDVjdqRCxPQUFRLFFBQ1JvcUMsTUFBTyxRQUNQLE9BQVEsQ0FDTjlkLFdBQVksR0FFZCwyQkFBNEIsQ0FDMUJBLFdBQVksRUFDWndCLFVBQVcsU0FJZiwwQ0FBMkMsQ0FDekM5dEIsT0FBUSxRQUNSOHRCLFVBQVcsUUFDWHE3QixlQUFnQixPQUNoQnRGLFNBQVUsU0FJaEIsRUFDSSxHQUFTLENBQ1h4c0IsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUFDLEVBQUt1WixlQUFnQixDQUMxQzN1QixTQUFVLFdBQ1ZnbEQsb0JBQXFCLFVBQ3JCQyxxQkFBc0IsVUFDdEJPLHVCQUF3QixVQUN4QkMsd0JBQXlCLFVBQ3pCbHJCLE9BQVEsRUFDUiw0QkFBNkIsQ0FDM0J1UixNQUFPLE9BQ1B2YyxRQUFTLE9BQ1R1N0IsY0FBZSxTQUNmOUYsb0JBQXFCLFVBQ3JCQyxxQkFBc0IsVUFDdEJPLHVCQUF3QixVQUN4QkMsd0JBQXlCLFdBRTNCLDBCQUEyQixDQUN6QjlHLFNBQVUsR0FBS2xLLGdCQUFrQixLQUNqQzBNLFdBQVksR0FBSzVNLG1CQUNqQixVQUFXLENBQ1RpTixVQUFXLFNBR2YsbUVBQW9FLENBQ2xFd0Qsb0JBQXFCLFVBQ3JCQyxxQkFBc0IsVUFDdEIsMEJBQTJCLENBQ3pCblosTUFBTyxPQUNQcmMsVUFBVyxZQUNYM3RCLFNBQVUsU0FDVnd0QixhQUFjLFdBQ2RsdUIsV0FBWSxXQUdoQix5QkFBMEIsQ0FBQyxDQUN6QlMsVUFBVyxPQUNYLDZCQUE4QixRQUM5QmdwRCxlQUFnQixRQUNoQlosa0JBQW1CLFFBQ25CLEtBQU0sQ0FDSjF2QixPQUFRLEdBRVYsU0FBVSxDQUNSaW5CLFVBQVcsVUFHZix5REFBMEQsQ0FDeERsbkIsUUFBUyxFQUNUOGtCLFlBQWEsUUFFZiwwREFBMkQsQ0FDekRxQixXQUFZLEdBRWQsMkJBQTRCLENBQzFCbHhCLFFBQVMsT0FDVHU3QixjQUFlLFNBQ2YvOEIsU0FBVSxFQUNWeXlCLGVBQWdCLFNBQ2hCLG1CQUFvQixDQUNsQmdGLHVCQUF3QixVQUN4QkMsd0JBQXlCLFdBRTNCLGdDQUFpQyxDQUUvQi9FLGNBQWUsT0FFakIsbUNBQW9DLENBQ2xDcG1CLFFBQVMsUUFDVHFrQixTQUFVLElBSWQsNEJBQTZCLENBQUMsRUFBS3R3QixpQkFBa0IsRUFBS0QsbUJBQW9CLEVBQUtTLFdBQVksQ0FDN0YweEIsV0FBWSxjQUVYLENBQ0gsd0NBQXlDLEdBQWdCLENBQUMsRUFBRyxJQUFJOW5DLE9BQU9yRCxHQUFXLENBQ2pGLHlCQUEwQixDQUN4QmtsQixRQUFTLEVBQ1R1SCxPQUFRLFdBSWhCLEVBQ0F3b0IsVUFBVyxTQUFtQmoxQyxFQUFVaWlCLEdBQ3RDLE1BQU8sTUFBOEJoeEIsSUFBN0JneEIsRUFBS2l6QixxQkFBcUNILEdBQThCLzBDLEVBQVVpaUIsR0FDNUYsRUFDQWl6QixvQkFBcUIsU0FBNkJsMUMsRUFBVWlpQixHQUMxRCxNQUFPLE1BQThCaHhCLElBQTdCZ3hCLEVBQUtpekIscUJBQXFDSCxHQUE4Qi8wQyxFQUFVaWlCLEdBQzVGLEVBQ0F1cEIsVUFBVyxTQUFtQnhyQyxFQUFVaWlCLEdBQ3RDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCdXJDLFNBQVV0cEIsRUFBS3VwQixVQUFZLE9BRS9CLEVBQ0FnSyxnQkFBaUIsU0FBeUJ4MUMsRUFBVWlpQixHQUNsRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQm9hLFVBQVcsb0JBQW9CL1csT0FBTzRlLEVBQUt1ekIsZ0JBQWlCLGNBQ25DdmtELElBQXZCZ3hCLEVBQUtxekIsb0JBQXNEcmtELElBQXZCZ3hCLEVBQUtzekIsZUFBK0JGLEdBQTRDcjFDLEVBQVVpaUIsR0FDcEksRUFDQTB6QixrQkFBbUIsU0FBMkIzMUMsRUFBVWlpQixHQUN0RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwwQkFBMkIsQ0FDekIzVCxXQUFZNDFCLEVBQUswekIsa0JBQW9CLFFBRzNDLEVBQ0FMLGNBQWUsU0FBdUJ0MUMsRUFBVWlpQixHQUM5QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwyQkFBNEIsQ0FDMUIxVCxPQUFRMjFCLEVBQUtxekIsY0FBZ0IsYUFFTnJrRCxJQUF2Qmd4QixFQUFLc3pCLG9CQUF3RHRrRCxJQUF6Qmd4QixFQUFLdXpCLGlCQUFpQ0gsR0FBNENyMUMsRUFBVWlpQixHQUN0SSxFQUNBc3pCLGNBQWUsU0FBdUJ2MUMsRUFBVWlpQixHQUM5QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw2REFBOEQsQ0FDNURvcUMsVUFBV25vQixFQUFLc3pCLGNBQWdCLGFBRVR0a0QsSUFBdkJneEIsRUFBS3F6QixvQkFBc0Rya0QsSUFBdkJneEIsRUFBS3N6QixvQkFBd0R0a0QsSUFBekJneEIsRUFBS3V6QixpQkFBaUNILEdBQTRDcjFDLEVBQVVpaUIsR0FDMUssRUFDQWlELFFBQVMsU0FBaUJsbEIsRUFBVWlpQixHQUNsQyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix5QkFBMEIsQ0FDeEJrbEIsUUFBU2pELEVBQUtpRCxRQUFVLE1BRTFCLDBCQUEyQixDQUN6Qix5QkFBMEIsQ0FDeEJvbUIsY0FBZXJwQixFQUFLaUQsUUFBVSxHQUFLLGNBR2RqMEIsSUFBdkJneEIsRUFBS216QixlQUErQkQsR0FBc0JuMUMsRUFBVWlpQixHQUMxRSxFQUNBbXpCLGNBQWUsU0FBdUJwMUMsRUFBVWlpQixHQUM5QyxNQUFPLENBQUNrekIsR0FBc0JuMUMsRUFBVWlpQixHQUMxQyxFQUNBK29CLGFBQWMsU0FBc0JockMsRUFBVWlpQixHQUM1QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix5QkFBMEIsQ0FDeEIrcUMsWUFBYTlvQixFQUFLK29CLGFBQWUsUUFHdkMsR0FFRSxHQUFTbm5CLEdBQWEsQ0FDeEJaLE9BQVEsS0FRTjJ5QixHQUFpQixDQUluQmp5QixnQkFBZ0IsRUFDaEJxbkIsYUFBYyxFQUNkdUssY0FBZSxHQUNmSCxjQUFlLEdBQ2ZFLGNBQWUsR0FDZkssa0JBQW1CLEdBQ25CVixVQUFXLEVBQUksR0FBS3JYLGVBRXBCNE4sVUFBVyxFQUFJLEdBQUs1TixlQUVwQjFZLFFBQVMsRUFBSSxHQUFLdVksb0JBRWxCeVgsb0JBQXFCLEVBQUksR0FBSzFYLFVBRTlCcVksV0FBWSxFQUFJLEdBQUtwWSxvQkFDckIrWCxnQkFBaUIsRUFBSSxHQUFLL1gsb0JBQzFCbVUsdUJBQXdCLFVBQ3hCa0Usc0JBQXVCLFVBQ3ZCQyx3QkFBeUJsekIsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtTLDBCQUNoRVYsdUJBQXdCLFVBQ3hCcVMsc0JBQXVCLFVBQ3ZCK0QscUJBQXNCLFVBQ3RCQyx1QkFBd0JwekIsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUttQix5QkFDOURwQixzQkFBdUIsV0FJckIsR0FBTSxDQUFDLEdBQVEsSUFDZixHQUFXLElBQUl6OEIsT0F0V04sa0JDbURULElEb1RXLEdBQXNCLEdBQVUsR0FBS3V5QyxJQUNyQyxHQUFzQixHQUFVLEdBQUtBLElDcFR2QyxhQW9CYixTQUFTLEdBQWdCeG9DLEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsS0FlUCxPQWRBLEdBQVcvYixPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDQUVBLFNBQVMsR0FBUXdMLEVBQVFrVCxHQUN2QixJQUFJL0gsRUFBT3JVLE9BQU9xVSxLQUFLbkwsR0FFdkIsR0FBSWxKLE9BQU9xYyxzQkFBdUIsQ0FDaEMsSUFBSUMsRUFBVXRjLE9BQU9xYyxzQkFBc0JuVCxHQUN2Q2tULElBQWdCRSxFQUFVQSxFQUFRbkosT0FBTyxTQUFVb0osR0FDckQsT0FBT3ZjLE9BQU8yWCx5QkFBeUJ6TyxFQUFRcVQsR0FBS1QsVUFDdEQsSUFDQXpILEVBQUs5USxLQUFLOUYsTUFBTTRXLEVBQU1pSSxFQUN4QixDQUVBLE9BQU9qSSxDQUNULENBRUEsU0FBUyxHQUFlcFAsR0FDdEIsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBeUIsTUFBaEI3SCxVQUFVVyxHQUFhWCxVQUFVVyxHQUFLLENBQUMsRUFFaERBLEVBQUksRUFDTixHQUFRa0gsR0FBUSxHQUFNekssUUFBUSxTQUFVd0UsR0FDdEMsR0FBZ0IyRixFQUFRM0YsRUFBS2lHLEVBQU9qRyxHQUN0QyxHQUNTVSxPQUFPeWMsMEJBQ2hCemMsT0FBTzBjLGlCQUFpQnpYLEVBQVFqRixPQUFPeWMsMEJBQTBCbFgsSUFFakUsR0FBUUEsR0FBUXpLLFFBQVEsU0FBVXdFLEdBQ2hDVSxPQUFPNmIsZUFBZTVXLEVBQVEzRixFQUFLVSxPQUFPMlgseUJBQXlCcFMsRUFBUWpHLEdBQzdFLEVBRUosQ0FFQSxPQUFPMkYsQ0FDVCxDQUVBLElBQUksR0FBYSxDQUNmcXRCLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sRUFDVCxHQUlFLEdBQVUsU0FBaUJ3bUMsR0FDN0IsSUFBSW4zQixFQUVKLE9BQWtCLEdBQVhBLEVBQU8sQ0FBQyxFQUF5QixTQUFXbTNCLEVBQU8sY0FBZSxTQUFVeG1DLEVBQVVpaUIsR0FDM0YsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCM1MsZ0JBQWlCNDBCLEVBQUssU0FBV3VrQixFQUFPLGtCQUc5QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLFFBQVMsU0FBVXhtQyxFQUFVaWlCLEdBQ3ZFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QixDQUN0QnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLFlBR3BDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sdUJBQXdCLFNBQVV4bUMsRUFBVWlpQixHQUN0RixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix3QkFBeUIsQ0FDdkIzUyxnQkFBaUI0MEIsRUFBSyxTQUFXdWtCLEVBQU8sMkJBRzlDLEdBQUluM0IsQ0FDTixFQU1JLEdBQVFtVixHQUFZLENBQ3RCdkIsT0FBUSxDQUNOd2pCLGFBTmUsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFVBT2hEQyxZQUxjLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxZQVMvQzVoQixHQUFlLENBQ2pCb3hCLGFBQWEsRUFDYi9kLE9BQU8sR0FHTCxHQUFZLEdBQVMsQ0FBQyxFQUFHLENBQzNCSCxVQUFVLEVBQ1ZtZSxRQUFTLEdBQUtoVSxVQUNicmQsR0FBY3dqQixJQU1iOE4sR0FBYSxHQUFlLENBSTlCenlCLGdCQUFnQixFQUNoQnFqQixnQkFBaUIsS0FDakJwSSxtQkFBb0IsUUFDcEJtSSxtQkFBb0IsY0FDcEJELG1CQUFvQixjQUNwQkcsMEJBQTJCLGNBQzNCMkQsY0FBZSxHQUFLOU0seUJBQ3BCbHpDLFNBQVUsUUFFVnlyRCxnQ0FBaUMsb0JBQ2pDQywrQkFBZ0Msb0JBQ2hDMVcsdUJBQXdCL2MsR0FBSyxHQUFLK2Msd0JBQ2xDRSxzQkFBdUJqZCxHQUFLLEdBQUtpZCx1QkFDakNvTixpQkFBa0JycUIsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtJLDBCQUN6RHlOLGdCQUFpQjdxQixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2MsMEJBQ3RELElBUUMwVixHQUFZLFNBQWtCdjJDLEVBQVVpaUIsR0FDMUMsT0FDRVUsR0FBSTNpQixFQUFVLENBQ1osMkNBQTRDLENBQzFDbWEsUUFBUyxRQUNUNEksUUFBUyxJQUlqQixFQUVJbVYsR0FBYSxTQUFvQmw0QixFQUFVaWlCLEdBQzdDLE9BQU9VLEdBQUkzaUIsRUFBVSxDQUFDNmtCLEdBQWE1QyxFQUFNNkMsSUFBZSxDQUN0REksUUFBUyxFQUNULHVCQUF3QixDQUN0QndSLE1BQU8sU0FHUixHQUFhMTJCLElBQ2xCLEVBRUl3MkMsR0FBUyxTQUFleDJDLEVBQVVpaUIsR0FDcEMsT0FBT1UsR0FBSTNpQixFQUFVLENBQUM2a0IsR0FBYTVDLEVBQU02QyxLQUMzQyxFQUVJLEdBQVMsR0FBZSxDQUsxQm5CLGVBQWdCLFNBQXdCM2pCLEVBQVVpaUIsR0FDaEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FBQyxFQUFLOFksbUJBQW9CLENBQzlDN3JCLElBQUssRUFDTEUsS0FBTSxFQUNOcXRCLE1BQU8sRUFDUEMsT0FBUSxFQUNSQyxPQUFRdUgsRUFBS2swQixRQUNiN3BELE9BQVEsT0FFUjB0QixtQkFBb0IscUNBQ3BCLDBCQUEyQmtlLEdBQVdsNEIsRUFBVWlpQixHQUNoRCxvQkFBcUJ1MEIsR0FBT3gyQyxFQUFVaWlCLEdBQ3RDLHVCQUF3QixDQUN0QnIzQixTQUFVLFdBQ1ZvdkIsbUJBQW9CLE9BRXRCLHdCQUF5QixDQUFDRCxFQUF3QixPQUNsRCxDQUNFbnZCLFNBQVUsV0FDVm00QixRQUFTLEVBQ1Q5MUIsSUFBSyxFQUNMRSxLQUFNLEVBQ05xdEIsTUFBTyxFQUNQQyxPQUFRLEVBQ1I0dEIsY0FBZSxTQUVqQix1QkFBd0JrTyxHQUFVdjJDLE1BQy9CLENBQ0gscUJBQXNCLENBQ3BCMVQsT0FBUSxPQUNSaS9DLFNBbEVPLFVBcUViLEVBQ0F4RSxtQkFBb0IsU0FBNEIvbUMsRUFBVWlpQixHQUN4RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUFDaWlCLEVBQUs4a0IscUJBQzlCLEVBQ0FuOEMsU0FBVSxTQUFrQm9WLEVBQVVpaUIsR0FDcEMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEJwVixTQUFVcTNCLEVBQUtyM0IsV0FFbkIsRUFDQW84QyxnQkFBaUIsU0FBeUJobkMsRUFBVWlpQixHQUNsRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix5QkFBMEIsQ0FDeEJzVyxnQkFBaUIyTCxFQUFLK2tCLG1CQUc1QixFQUNBcEksbUJBQW9CLFNBQTRCNStCLEVBQVVpaUIsR0FDeEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIseUJBQTBCLENBQ3hCb1csbUJBQW9CNkwsRUFBSzJjLHNCQUcvQixFQUNBcUksMEJBQTJCLFNBQW1Dam5DLEVBQVVpaUIsR0FDdEUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIseUJBQTBCLENBQ3hCd1cseUJBQTBCeUwsRUFBS2dsQiw2QkFHckMsRUFDQUgsbUJBQW9CLFNBQTRCOW1DLEVBQVVpaUIsR0FDeEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsc0JBQXVCaWlCLEVBQUs2a0IscUJBRWhDLEVBQ0E4RCxjQUFlLFNBQXVCNXFDLEVBQVVpaUIsR0FDOUMsTUFBTyxFQUFFQSxFQUFLaTBCLGFBQWV2ekIsR0FBSTNpQixFQUFVLENBQ3pDLHVCQUF3QixDQUN0QjR2QyxvQkFBcUIzdEIsRUFBSzJvQixjQUFnQixLQUMxQ2lGLHFCQUFzQjV0QixFQUFLMm9CLGNBQWdCLEtBQzNDd0YsdUJBQXdCbnVCLEVBQUsyb0IsY0FBZ0IsS0FDN0N5Rix3QkFBeUJwdUIsRUFBSzJvQixjQUFnQixRQUdwRCxFQUVBNVMsU0FBVSxTQUFrQmg0QixFQUFVaWlCLEdBQ3BDLE9BQU9BLEVBQUsrVixVQUFZdWUsR0FBVXYyQyxFQUNwQyxFQUNBazJDLFlBQWEsU0FBcUJsMkMsRUFBVWlpQixHQUMxQyxPQUFPQSxFQUFLaTBCLGFBQWVoZSxHQUFXbDRCLEVBQVVpaUIsRUFDbEQsRUFDQWtXLE1BQU8sU0FBZW40QixFQUFVaWlCLEdBQzlCLE9BQU9BLEVBQUtrVyxPQUFTcWUsR0FBT3gyQyxFQUFVaWlCLEVBQ3hDLEdBQ0NtbUIsSUFPQyxHQUFNLENBTEd2a0IsR0FBYSxDQUN4QlosT0FBUSxLQUlTLElBQ2YsR0FBVyxJQUFJNWYsT0FBTyxJQ3JSdEIsSURzUlcsR0FBc0IsR0FBVSxHQUFLK3lDLElBQ3JDLEdBQXNCLEdBQVUsR0FBS0EsSUN2UnRDLENBQ1podkMsVUFBVyxzQkFFWHF2QyxNQUFPLG1CQUNQN2hELEtBQU0sa0JBQ044aEQsS0FBTSxrQkFDTi9tQyxVQUFXLHVCQUNYOGMsT0FBUSxvQkFDUmtxQixTQUFVLHNCQUNWQyxNQUFPLG1CQUNQQyxVQUFXLHdCQUNYemUsUUFuQlMsdUJBc0JYLFNBQVMsR0FBZ0JockIsRUFBS3pjLEVBQUsvRCxHQVlqQyxPQVhJK0QsS0FBT3ljLEVBQ1QvYixPQUFPNmIsZUFBZUUsRUFBS3pjLEVBQUssQ0FDOUIvRCxNQUFPQSxFQUNQdWdCLFlBQVksRUFDWkcsY0FBYyxFQUNkQyxVQUFVLElBR1pILEVBQUl6YyxHQUFPL0QsRUFHTndnQixDQUNULENBRUEsU0FBUyxLQWVQLE9BZEEsR0FBVy9iLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENBRUEsU0FBUyxHQUFRd0wsRUFBUWtULEdBQ3ZCLElBQUkvSCxFQUFPclUsT0FBT3FVLEtBQUtuTCxHQUV2QixHQUFJbEosT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJQyxFQUFVdGMsT0FBT3FjLHNCQUFzQm5ULEdBQ3ZDa1QsSUFBZ0JFLEVBQVVBLEVBQVFuSixPQUFPLFNBQVVvSixHQUNyRCxPQUFPdmMsT0FBTzJYLHlCQUF5QnpPLEVBQVFxVCxHQUFLVCxVQUN0RCxJQUNBekgsRUFBSzlRLEtBQUs5RixNQUFNNFcsRUFBTWlJLEVBQ3hCLENBRUEsT0FBT2pJLENBQ1QsQ0FFQSxTQUFTLEdBQWVwUCxHQUN0QixJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUF5QixNQUFoQjdILFVBQVVXLEdBQWFYLFVBQVVXLEdBQUssQ0FBQyxFQUVoREEsRUFBSSxFQUNOLEdBQVFrSCxHQUFRLEdBQU16SyxRQUFRLFNBQVV3RSxHQUN0QyxHQUFnQjJGLEVBQVEzRixFQUFLaUcsRUFBT2pHLEdBQ3RDLEdBQ1NVLE9BQU95YywwQkFDaEJ6YyxPQUFPMGMsaUJBQWlCelgsRUFBUWpGLE9BQU95YywwQkFBMEJsWCxJQUVqRSxHQUFRQSxHQUFRekssUUFBUSxTQUFVd0UsR0FDaENVLE9BQU82YixlQUFlNVcsRUFBUTNGLEVBQUtVLE9BQU8yWCx5QkFBeUJwUyxFQUFRakcsR0FDN0UsRUFFSixDQUVBLE9BQU8yRixDQUNULENBRUEsSUFBSSxHQUFhLENBQ2ZxdEIsZUFBZ0IsV0FDZCxNQUFPLENBQUMsQ0FDTix1QkFBd0IsQ0FDdEJsbEIsV0FBWSxTQUdsQixHQUdFLEdBQVUsU0FBaUIrbkMsR0FDN0IsSUFBSW4zQixFQUVKLE9BQWtCLEdBQVhBLEVBQU8sQ0FBQyxFQUF5QixTQUFXbTNCLEVBQU8sVUFBVyxTQUFVeG1DLEVBQVVpaUIsR0FDdkYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCMHBDLFlBQWF6bkIsRUFBSyxTQUFXdWtCLEVBQU8sY0FHMUMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxjQUFlLFNBQVV4bUMsRUFBVWlpQixHQUM3RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixtQkFBb0IsQ0FDbEIzUyxnQkFBaUI0MEIsRUFBSyxTQUFXdWtCLEVBQU8sa0JBRzlDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sdUJBQXdCLFNBQVV4bUMsRUFBVWlpQixHQUN0RixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix3QkFBeUIsQ0FDdkIzUyxnQkFBaUI0MEIsRUFBSyxTQUFXdWtCLEVBQU8sMkJBRzlDLEdBQUluM0IsQ0FDTixFQU1JLEdBQVFtVixHQUFZLENBQ3RCdkIsT0FBUSxDQUNOd2pCLGFBTmUsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFVBT2hEQyxZQUxjLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxZQVcvQyxHQUFVLFNBQWlCMW1DLEVBQVVpaUIsRUFBTThuQixHQUM3QyxPQUFPcG5CLEdBQUkzaUIsRUFBVSxDQUNuQix1QkFBd0IsQ0FDdEIrcUMsWUFBYSxHQUFHMW5DLE9BQU80ZSxFQUFLd0ssT0FBUyxFQUFJLEVBQUcsTUFDNUN1ZCxZQUFhRCxFQUFRLHVCQUF5Qix5QkFHcEQsRUFFSStNLEdBQVcsU0FBZ0I5MkMsRUFBVWlpQixHQUN2QyxNQUFPLENBQUMsR0FBUWppQixFQUFVaWlCLEdBQU0sR0FBUSxHQUFRVyxHQUFZNWlCLEdBQVdpaUIsR0FBTSxHQUMvRSxFQUVJLEdBQVksU0FBbUI4bkIsR0FDakMsT0FBTyxTQUFVL3BDLEVBQVVpaUIsR0FDekIsSUFBSTgwQixFQUVKLE1BQU8sQ0FBQyxDQUVOLHFCQUFzQkEsRUFBaUIsQ0FBQyxFQUFHLEdBQWdCQSxFQUFnQmhOLEVBQVEsUUFBVSxPQUFRLEdBQUksR0FBZ0JnTixFQUFnQmhOLEVBQVEsT0FBUyxRQUFTLFFBQVNnTixJQUMzSyxHQUFRLEdBQUcxekMsT0FBT3JELEVBQVUsc0JBQXVCLEdBQVMsQ0FBQyxFQUFHaWlCLEVBQU0sQ0FDdkV3SyxRQUFRLElBQ05zZCxHQUNOLENBQ0YsRUFFSSxHQUFZLElBQVUsR0FDdEIsR0FBYSxJQUFVLEdBRXZCLEdBQVksU0FBa0IvcEMsR0FDaEMsT0FBTzJpQixHQUFJM2lCLEVBQVUsQ0FDbkIsMkNBQTRDLENBQzFDK2lCLFFBQVMsSUFHZixFQUVJaTBCLEdBQW9CLFNBQTJCaDNDLEdBQ2pELE1BQU8sR0FBR3FELE9BQU9yRCxFQUFVLHlCQUM3QixFQUdJaTNDLEdBQWdDLFNBQXNDQyxFQUFjajFCLEdBQ3RGLE9BQU9VLEdBQUl1MEIsRUFBYyxDQUN2QixnREFBaUQsQ0FDL0N4Z0IsTUFBTyxHQUFHcnpCLE9BQU80ZSxFQUFLazFCLDZCQUE4QixRQUcxRCxFQUdJQyxHQUEyQixTQUFrQ0MsRUFBZXAxQixFQUFNOG5CLEdBQ3BGLElBQUl1TixFQUFvQkMsRUFFeEIsT0FBTzUwQixHQUFJMDBCLEVBQWUsQ0FDeEIsd0JBQXlCQyxFQUFxQixDQUM1Q25ILFNBQVUsR0FBRzlzQyxPQUFPNGUsRUFBS3UxQixrQkFBbUIsT0FDM0MsR0FBZ0JGLEVBQW9Cdk4sRUFBUSxRQUFVLE9BQVEsR0FBRzFtQyxRQUFRNGUsRUFBS3UxQixrQkEzRGxFLEdBMkRvRyxPQUFRLEdBQWdCRixFQUFvQnZOLEVBQVEsT0FBUyxRQUFTLFFBQVN1TixHQUNsTSwyQ0FBNENDLEVBQW1CLENBQUMsRUFBRyxHQUFnQkEsRUFBa0J4TixFQUFRLFFBQVUsT0FBUSxHQUFJLEdBQWdCd04sRUFBa0J4TixFQUFRLE9BQVMsUUFBUyxRQUFTd04sSUFFNU0sRUFFSUUsR0FBMEIsU0FBaUNKLEVBQWVwMUIsR0FDNUUsTUFBTyxDQUFDbTFCLEdBQXlCQyxFQUFlcDFCLEdBQU0sR0FBUW0xQixHQUF5QngwQixHQUFZeTBCLEdBQWdCcDFCLEdBQU0sR0FBT20xQixHQUF5QkosR0FBa0JLLEdBQWdCcDFCLEdBQU0sR0FBT20xQixHQUF5QkosR0FBa0JwMEIsR0FBWXkwQixJQUFpQnAxQixHQUFNLEdBQ3hSLEVBR0l5MUIsR0FBaUIsU0FBdUIxM0MsRUFBVWlpQixHQUNwRCxPQUFPVSxHQUFJM2lCLEVBQVUsQ0FDbkIsdUJBQXdCLENBQ3RCMDJCLE1BQU8sR0FBR3J6QixPQUFPNGUsRUFBSzAxQixjQUFlLFFBRzNDLEVBR0lDLEdBQXNCLFNBQTZCQyxFQUFjNTFCLEVBQU04bkIsR0FDekUsSUFBSStOLEVBQXFCQyxFQUV6QixPQUFPcDFCLEdBQUlrMUIsRUFBYyxDQUN2Qix3QkFBeUJDLEVBQXNCLENBQUMsRUFBRyxHQUFnQkEsRUFBcUIvTixFQUFRLGNBQWdCLGFBQWMsR0FBRzFtQyxRQUFRNGUsRUFBSzAxQixjQWxGL0gsR0FrRjZKLE9BQVEsR0FBZ0JHLEVBQXFCL04sRUFBUSxhQUFlLGNBQWUsUUFBUytOLEdBQ3hRLDJDQUE0Q0MsRUFBb0IsQ0FDOURyaEIsTUFBTyxHQUFHcnpCLE9BQU80ZSxFQUFLMDFCLGNBQWUsT0FDcEMsR0FBZ0JJLEVBQW1CaE8sRUFBUSxjQUFnQixhQUFjLEdBQUksR0FBZ0JnTyxFQUFtQmhPLEVBQVEsYUFBZSxjQUFlLFFBQVNnTyxJQUV0SyxFQUVJQyxHQUFxQixTQUE0QkgsRUFBYzUxQixHQUNqRSxNQUFPLENBQUMyMUIsR0FBb0JDLEVBQWM1MUIsR0FBTSxHQUFRMjFCLEdBQW9CaDFCLEdBQVlpMUIsR0FBZTUxQixHQUFNLEdBQU8yMUIsR0FBb0JaLEdBQWtCYSxHQUFlNTFCLEdBQU0sR0FBTzIxQixHQUFvQlosR0FBa0JwMEIsR0FBWWkxQixJQUFnQjUxQixHQUFNLEdBQ2hRLEVBRUlnMkIsR0FBUyxTQUFlajRDLEVBQVVpaUIsR0FDcEMsT0FBT1UsR0FBSTNpQixFQUFVLENBQ25CLHVCQUF3QixDQUN0QnBWLFNBQVUsV0FDVnFDLElBQUssRUFDTHl0QixPQUFRdUgsRUFBS2swQixTQUVmLHNCQUF1QixDQUNyQixxQkFBc0IsQ0FDcEJoOEIsUUFBUyxXQUlqQixFQU9JKzlCLEdBQVEsU0FBY2hCLEVBQWNqMUIsR0FDdEMsT0FDRVUsR0FBSXUwQixFQUFjLENBQ2hCLHVCQUF3QixDQUN0QmpNLFdBQVksRUFDWlcsWUFBYSxJQUlyQixFQU9JdU0sR0FBYSxTQUFtQkMsRUFBbUJuMkIsR0FDckQsT0FDRVUsR0FBSXkxQixFQUFtQixDQUNyQnh0RCxTQUFVLFNBQ1Z1dkIsUUFBUyxRQUNUK0ssUUFBUyxFQUNUeDRCLFNBQVUsVUFDVix1QkFBd0IsQ0FDdEJBLFNBQVUsVUFDVjB0QixVQUFXLFVBQ1g2d0IsV0FBWSxFQUNaVyxZQUFhLElBSXJCLEVBUUl5TSxHQUFRLFNBQWNSLEVBQWM1MUIsR0FDdEMsT0FDRVUsR0FBSWsxQixFQUFjLENBQ2hCanRELFNBQVUsVUFHaEIsRUFPSWk4QyxHQUFlLFNBQXNCN21DLEVBQVVpaUIsR0FDakQsT0FBT1UsR0FBSTNpQixFQUFVLENBQ25CLHVCQUF3QixDQUN0QjZtQyxhQUFjNWtCLEVBQUsyb0IsY0FBZ0IsT0FHekMsRUFPSTBOLEdBQVksU0FBa0J0NEMsRUFBVWlpQixHQUMxQyxPQUNFVSxHQUFJM2lCLEVBQVUsQ0FDWjFULE9BQVEsT0FDUix1QkFBd0IsQ0FDdEJBLE9BQVEsU0FJaEIsRUFFSSxHQUFTLEdBQWUsQ0FLMUJxM0IsZUFBZ0IsU0FBd0IzakIsRUFBVTJ2QyxHQUNoRCxNQUFPLENBQUNodEIsR0FBSTNpQixFQUFVLENBQUMsR0FBVUEsRUFBVTJ2QyxHQUFTLENBQ2xEdkUsZUFBZ0IsYUFDaEJ4Z0QsU0FBVSxXQUNWcUMsSUFBSyxFQUNMRSxLQUFNLEVBQ05xdEIsTUFBTyxFQUNQQyxPQUFRLEVBQ1JDLE9BQVEsRUFDUnB1QixPQUFRLE9BQ1JpL0MsU0FBVSxFQUVWcm1CLFFBQVMsRUFDVG5DLFFBQVMsRUFDVG5LLFdBQVksRUFDWm9CLG1CQUFvQixNQUNwQiwrQkFBZ0MsQ0FDOUIsdUJBQXdCLENBQ3RCNUQsbUJBQW9CLE9BR3hCLHVCQUF3QixDQUN0QnhyQixTQUFVLFdBRVYwQixPQUFRLE9BQ1JJLFNBQVUsVUFDVjYrQyxTQUFVLEVBRVYzeUIsV0FBWSxHQUVkLDRCQUE2QixDQUMzQnRzQixPQUFRLE9BQ1JHLFVBQVcsT0FDWDhyRCxVQUFXLFVBRWIsbUJBQW9CLENBQ2xCanNELE9BQVEsT0FDUjh0QixVQUFXLE9BQ1hteEIsU0FBVSxHQUdaLHlCQUEwQixDQUN4QjcrQyxTQUFVLFVBQ1YwdEIsVUFBVyxPQUNYcVMsT0FBUSxRQUdWLG9CQUFxQixDQUNuQjdoQyxTQUFVLFFBQ1ZxQyxJQUFLLEVBQ0x5cEMsTUFBTyxPQUNQaGMsT0FBUSxHQUFLdW5CLFVBR2YsbUJBQW9CaVcsR0FBTWw0QyxHQUUxQix3QkFBeUJtNEMsR0FBV240QyxHQUVwQyx1QkFBd0JzNEMsR0FBVXQ0QyxHQUVsQyxvQkFBcUJpNEMsR0FBT2o0QyxFQUFVMnZDLEdBRXRDLG1CQUFvQjBJLEdBQU1yNEMsR0FFMUIsd0JBQXlCLENBQ3ZCcW9DLGNBQWUsT0FDZnRsQixRQUFTLEVBQ1Q1SSxRQUFTLFNBRVgscUJBQXNCLENBQ3BCQSxRQUFTLE9BQ1R2dkIsU0FBVSxXQUNWcUMsSUFBSyxFQUNMRSxLQUFNLEVBQ05xdEIsTUFBTyxFQUNQQyxPQUFRLEdBRVYsdUJBQXdCLEdBQVV6YSxNQUMvQixDQUFDMmlCLEdBQUlDLEdBQVk1aUIsR0FBVyxHQUFXQSxFQUFVMnZDLEtBQ3hELEVBQ0EzSSxnQkFBaUIsU0FBeUJobkMsRUFBVWlpQixHQUNsRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwrQ0FBZ0QsQ0FDOUNzVyxnQkFBaUIyTCxFQUFLK2tCLG1CQUc1QixFQUNBcEksbUJBQW9CLFNBQTRCNStCLEVBQVVpaUIsR0FDeEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsK0NBQWdELENBQzlDb1csbUJBQW9CNkwsRUFBSzJjLHNCQUcvQixFQUNBcUksMEJBQTJCLFNBQW1Dam5DLEVBQVVpaUIsR0FDdEUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsK0NBQWdELENBQzlDd1cseUJBQTBCeUwsRUFBS2dsQiw2QkFHckMsRUFDQTJELGNBQWUsU0FBdUI1cUMsRUFBVWlpQixHQUM5QyxNQUFPLENBQUM0a0IsR0FBYTdtQyxFQUFVaWlCLEdBQ2pDLEVBQ0F1MUIsa0JBQW1CLFNBQTJCeDNDLEVBQVVpaUIsR0FDdEQsTUFBTyxDQUFDdzFCLEdBQXdCLEdBQUdwMEMsT0FBT3JELEVBQVUscUJBQXNCaWlCLEdBQzVFLEVBQ0EwMUIsY0FBZSxTQUF1QjMzQyxFQUFVaWlCLEdBQzlDLE1BQU8sQ0FBQ3kxQixHQUFlMTNDLEVBQVVpaUIsR0FBT3kxQixHQUFlLEdBQUdyMEMsT0FBT3JELEVBQVUsdUJBQXdCaWlCLEdBQU95MUIsR0FBZSxHQUFHcjBDLE9BQU9yRCxFQUFVLHlCQUEwQmlpQixHQUFPKzFCLEdBQW1CLEdBQUczMEMsT0FBT3JELEVBQVUsb0JBQXFCaWlCLEdBQzVPLEVBQ0FrMUIsNkJBQThCLFNBQXNDbjNDLEVBQVVpaUIsR0FDNUUsTUFBTyxDQUFDZzFCLEdBQThCLEdBQUc1ekMsT0FBT3JELEVBQVUsb0JBQXFCaWlCLEdBQ2pGLEVBRUF3MEIsTUFBTyxTQUFlejJDLEVBQVVpaUIsR0FDOUIsT0FBT0EsRUFBS3cwQixPQUFTLENBQUN3QixHQUFPajRDLEVBQVVpaUIsR0FBT3cxQixHQUF3QnozQyxFQUFVaWlCLEdBQ2xGLEVBQ0ErVixTQUFVLFNBQWtCaDRCLEVBQVVpaUIsR0FDcEMsTUFBTyxDQUFDQSxFQUFLK1YsVUFBWSxHQUFVaDRCLEdBQ3JDLEVBQ0F5c0IsT0FBUSxTQUFnQnpzQixFQUFVaWlCLEdBQ2hDLE1BQU8sQ0FBQzYwQixHQUFTOTJDLEVBQVVpaUIsR0FDN0IsRUFDQXkwQixLQUFNLFNBQWMxMkMsRUFBVWlpQixHQUM1QixPQUFPQSxFQUFLeTBCLE1BQVEsQ0FBQ3dCLEdBQU1sNEMsR0FBV2kzQyxHQUE4QmozQyxFQUFVaWlCLEdBQ2hGLEVBQ0F0UyxVQUFXLFNBQW1CM1AsRUFBVWlpQixHQUN0QyxNQUFPLENBQUNBLEVBQUt0UyxXQUFhd29DLEdBQVduNEMsR0FDdkMsRUFDQTIyQyxTQUFVLFNBQWtCMzJDLEVBQVVpaUIsR0FDcEMsTUFBTyxDQUFDQSxFQUFLMDBCLFVBQVkyQixHQUFVdDRDLEdBQ3JDLEVBQ0FwTCxLQUFNLFNBQWNvTCxFQUFVaWlCLEdBQzVCLE9BQU9BLEVBQUtydEIsTUFBUSxDQUFDeWpELEdBQU1yNEMsR0FBV2c0QyxHQUFtQmg0QyxFQUFVaWlCLEdBQ3JFLEdBQ0NtbUIsSUFFQyxHQUFTdmtCLEdBQWEsQ0FDeEJaLE9BQVEsS0FHTixHQUFZLEdBQWUsQ0FDN0IrVSxVQUFVLEVBQ1Z2TCxZQUFReDdCLEVBRVJ3bEQsT0FBTyxFQUNQRSxVQUFVLEVBQ1ZELE1BQU0sRUFDTi9tQyxXQUFXLEVBQ1gvYSxNQUFNLEVBQ051aEQsUUFBUyxHQUFLbFUsVUFDYnFHLElBTUNrUSxHQUFhLEdBQWUsQ0FJOUI3MEIsZ0JBQWdCLEVBQ2hCcWpCLGdCQUFpQixLQUNqQnBJLG1CQUFvQixRQUNwQnFJLDBCQUEyQixjQUMzQjJELGNBQWUsRUFDZjRNLGtCQUFtQixFQUFJLEdBQUs5WixVQUU1QmlhLGNBQWUsSUFDZlIsNkJBQThCLEdBQUt6WixVQUduQzJZLGdDQUFpQyxvQkFDakNDLCtCQUFnQyxvQkFDaEMxVyx1QkFBd0IvYyxHQUFLLEdBQUsrYyx3QkFDbENFLHNCQUF1QmpkLEdBQUssR0FBS2lkLHVCQUNqQytNLG1CQUFvQmhxQixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS1MsMEJBQzNEeU0sa0JBQW1CbHFCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLbUIsMEJBQ3hELElBR0MsR0FBTSxDQUFDLEdBQVEsSUFDZixHQUFXLElBQUk3OUIsT0FBTyxHQUFRK0QsVUFBVXRhLFFBQVEsS0FBTSxNQ3RqQjFELFNBQVMsR0FBZ0JzZ0IsRUFBS3pjLEVBQUsvRCxHQVlqQyxPQVhJK0QsS0FBT3ljLEVBQ1QvYixPQUFPNmIsZUFBZUUsRUFBS3pjLEVBQUssQ0FDOUIvRCxNQUFPQSxFQUNQdWdCLFlBQVksRUFDWkcsY0FBYyxFQUNkQyxVQUFVLElBR1pILEVBQUl6YyxHQUFPL0QsRUFHTndnQixDQUNULENBRUEsU0FBUyxLQWVQLE9BZEEsR0FBVy9iLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENEd2hCZSxHQUFzQixHQUFVLEdBQUt5cEQsSUFDckMsR0FBc0IsR0FBVSxHQUFLQSxJQ3ZoQnBELElBQUksR0FBYSxDQUNmNzBCLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sRUFDVCxHQUdFLEdBQVUsU0FBaUJ3bUMsR0FDN0IsSUFBSW4zQixFQUVKLE9BQWtCLEdBQVhBLEVBQU8sQ0FBQyxFQUF5QixTQUFXbTNCLEVBQU0sU0FBVXhtQyxFQUFVaWlCLEdBQzNFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QixDQUN0QnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixNQUc3QixHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGNBQWUsU0FBVXhtQyxFQUFVaWlCLEdBQzdFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QixDQUN0QjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyxrQkFHOUMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxtQkFBb0IsU0FBVXhtQyxFQUFVaWlCLEdBQ2xGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDBCQUEyQixDQUN6QjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyx1QkFHOUMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxnQkFBaUIsU0FBVXhtQyxFQUFVaWlCLEdBQy9FLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDBCQUEyQixDQUN6QitpQixRQUFTZCxFQUFLLFNBQVd1a0IsRUFBTyxvQkFHdEMsR0FBSW4zQixDQUNOLEVBTUksR0FBUW1WLEdBQVksQ0FDdEJ2QixPQUFRLENBQ053akIsYUFOZSxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsVUFPaERDLFlBTGMsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFlBVS9DLEdBQVMsQ0FDWC9pQixlQUFnQixTQUF3QjNqQixHQUN0QyxNQUFPLENBQUMyaUIsR0FBSTNpQixFQUFVLENBQ3BCbXBDLFdBQVksT0FDWixtQkFBb0IsT0FDcEJodkIsUUFBUyxlQUNUdnZCLFNBQVUsV0FDVncrQyxRQUFTLE9BQ1QzZ0MsT0FBUSxVQUNSeWMsUUFBUyxFQUNUdUgsT0FBUSxPQUNSLHVCQUF3QixDQUN0QjdoQyxTQUFVLFdBQ1ZpOEMsYUFBYyxPQUVoQixvQkFBcUIsQ0FDbkIxc0IsUUFBUyxPQUNUdWMsTUFBTyxPQUNQcHFDLE9BQVEsT0FDUjYrQyxXQUFZLFNBQ1pDLGVBQWdCLFVBRWxCLGNBQWUsQ0FDYnZFLGFBQWMsV0FFaEIsb0JBQXFCLENBQUM5c0IsSUFBYSxDQUNqQzhzQixhQUFjLFVBQ2Q3d0IsV0FBWSxvQkFBc0IsR0FBSzRvQixtQkFBcUIsZUFDNUR5SixjQUFlLE9BQ2ZoN0MsZ0JBQWlCLGtCQUd2QixFQUNBODVDLGFBQWMsU0FBc0JubkMsRUFBVWlpQixHQUM1QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix1QkFBd0IsQ0FDdEIwMkIsTUFBT3pVLEVBQUtrbEIsYUFBZSxLQUMzQjc2QyxPQUFRMjFCLEVBQUtrbEIsYUFBZSxRQUdsQyxFQUNBc1IsVUFBVyxTQUFtQno0QyxFQUFVMnZDLEdBQ3RDLE1BQU8sQ0FBQ2h0QixHQUFJM2lCLEVBQVUsQ0FDcEIsZ0JBQWlCLENBQ2YsdUJBQXdCLENBQ3RCMDJCLE1BQU9pWixFQUFPOEksVUFBWSxLQUMxQm5zRCxPQUFRcWpELEVBQU84SSxVQUFZLEtBQzNCdnpCLFNBQVV5cUIsRUFBTzhJLFVBQVksR0FBS3BhLGdCQUFrQixFQUFJLFNBSWhFLEdBRUUsR0FBU3hhLEdBQWEsQ0FDeEJaLE9BQVEsS0FRTixHQUFhLENBSWZVLGdCQUFnQixFQUNoQjgwQixVQUFXLEVBQUksR0FBS2hiLG9CQUVwQjBKLGFBQWMsRUFBSSxHQUFLMUosb0JBRXZCaWIsWUFBYTcxQixHQUFLLEdBQUs4YywwQkFDdkJDLHVCQUF3Qi9jLEdBQUssR0FBSzBjLGVBQ2xDNE4sNEJBQTZCLGVBQzdCQyx5QkFBMEIsR0FDMUJ1TCxXQUFZOTFCLEdBQUssR0FBSzhjLDBCQUN0Qkcsc0JBQXVCamQsR0FBSyxHQUFLMGMsZUFDakNvTywyQkFBNEIsZUFDNUJDLHdCQUF5QixJQUl2QixHQUFNLENBQUMsR0FBUSxJQUNmLEdBQVcsSUFBSXZxQyxPQTNLTixVQ1NiLFNBQVMsR0FBZ0IrSixFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0RvSWUsR0FBc0IsR0FBVSxHQUFLLElBQ3JDLEdBQXNCLEdBQVUsR0FBSyxJQ25JcEQsSUFBSSxHQUFhLENBQ2Y0MEIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUNwQnFrQyxNQUFPLGlCQUVYLEdBR0UsR0FBVSxTQUFpQm1DLEdBQzdCLElBQUluM0IsRUFFSixPQUFrQixHQUFYQSxFQUFPLENBQUMsRUFBeUIsU0FBV20zQixFQUFNLFNBQVV4bUMsRUFBVWlpQixHQUMzRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixLQUUzQixHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLHFCQUFzQixTQUFVeG1DLEVBQVVpaUIsR0FDcEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsbUJBQW9CLENBQ2xCM1MsZ0JBQWlCNDBCLEVBQUssU0FBV3VrQixFQUFPLHlCQUc5QyxHQUFJbjNCLENBQ04sRUFNSSxHQUFRbVYsR0FBWSxDQUN0QnZCLE9BQVEsQ0FDTndqQixhQU5lLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxVQU9oREMsWUFMYyxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsWUFrQi9DLEdBQVMsR0FBUyxDQUFDLEVBQUcsQ0FDeEIvaUIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUNwQm1hLFFBQVMsZUFDVHkrQixjQUFlLFNBQ2Y3SSxpQkFBa0IsWUFDbEJubEQsU0FBVSxXQUNWMitDLFNBQVUsRUFDVmw5QyxXQUFZLEVBQ1osbUJBQW9CLENBQ2xCdzZDLGFBQWMsT0FFaEIsdUJBQXdCLENBQ3RCcGEsT0FBUSxPQUNSb2EsYUFBYyxNQUNkblEsTUFBTyxVQUNQcHFDLE9BQVEsV0FFVixPQUFRLENBQ05BLE9BQVEsV0FFViwwQkFBMkIsQ0FFekJvcUMsTUFBTyxVQUNQcHFDLE9BQVEsYUFHZCxHQUNDLENBQUMsUUFBUyxVQUFXLFNBQVUsU0FBU3FrQixPQUFPLFNBQVVOLEVBQUtXLEdBQy9ELE9BQU9YLEVBQUksUUFBUWhOLE9BQU8yTixJQXRDUixTQUF1QkEsR0FDekMsT0FBTyxTQUFVaFIsRUFBVWlpQixHQUN6QixPQUFPVSxHQUFJM2lCLEVBQVUsR0FBZ0IsQ0FBQyxFQUFHLGFBQWFxRCxPQUFPMk4sR0FBTyxDQUNsRTBsQixNQUFPelUsRUFBSyxRQUFRNWUsT0FBTzJOLElBQVMsS0FDcEMxa0IsT0FBUTIxQixFQUFLLFFBQVE1ZSxPQUFPMk4sSUFBUyxPQUV6QyxDQUNGLENBK0JxQzZuQyxDQUFjN25DLEdBQU9YLENBQzFELEVBQUcsQ0FBQyxJQUVBLEdBQVN3VCxHQUFhLENBQ3hCWixPQUFRLEtBUU42MUIsR0FBVyxDQUlibjFCLGdCQUFnQixFQUNoQnVqQixXQUFZLEdBQUs5SSxxQkFFakIrSSxhQUFjLEdBQUs5SSxlQUVuQitJLFlBQWEsR0FBSzlJLHNCQUVsQitJLFdBQVksR0FBSzlJLHFCQUdqQndhLDhCQUErQmwyQixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS2EsaUNBQ3RFc1ksNkJBQThCbjJCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLdUIsZ0NBQ3BFb1gsWUFBYSxlQUNiQyxXQUFZLGdCQUlWLEdBQU0sQ0FBQyxHQUFRLElBQ2YsR0FBVyxJQUFJdDFDLE9BckpOLFdDUWIsU0FBUyxHQUFnQitKLEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsS0FlUCxPQWRBLEdBQVcvYixPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDRCtHZSxHQUFzQixHQUFVLEdBQUsrcEQsSUFDckMsR0FBc0IsR0FBVSxHQUFLQSxJQzlHcEQsSUFBSSxHQUFhLENBQ2ZuMUIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxFQUNULEdBR0UsR0FBVSxTQUFpQndtQyxHQUM3QixJQUFJbjNCLEVBRUosT0FBa0IsR0FBWEEsRUFBTyxDQUFDLEVBQXlCLFNBQVdtM0IsRUFBTSxTQUFVeG1DLEVBQVVpaUIsR0FDM0UsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNEJBQTZCLENBQzNCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLE1BRzdCLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sY0FBZSxTQUFVeG1DLEVBQVVpaUIsR0FDN0UsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNEJBQTZCLENBQzNCM1MsZ0JBQWlCNDBCLEVBQUssU0FBV3VrQixFQUFPLGtCQUc5QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLFlBQWEsU0FBVXhtQyxFQUFVaWlCLEdBQzNFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QixDQUN0QiwrQ0FBZ0QsQ0FDOUNxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxpQkFJdEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxtQkFBb0IsU0FBVXhtQyxFQUFVaWlCLEdBQ2xGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDBCQUEyQixDQUN6QjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyx1QkFHOUMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxnQkFBaUIsU0FBVXhtQyxFQUFVaWlCLEdBQy9FLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDBCQUEyQixDQUN6QitpQixRQUFTZCxFQUFLLFNBQVd1a0IsRUFBTyxvQkFHdEMsR0FBSW4zQixDQUNOLEVBRUksR0FBZSxTQUFzQm0zQixHQUN2QyxJQUFJLzBCLEVBRUosT0FBbUIsR0FBWkEsRUFBUSxDQUFDLEVBQTBCLFNBQVcrMEIsRUFBTyxTQUFVLFNBQVV4bUMsRUFBVWlpQixHQUN4RixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw0QkFBNkIsQ0FDM0Jxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxhQUdwQyxHQUFJLEdBQWdCLzBCLEVBQU8sU0FBVyswQixFQUFPLGVBQWdCLFNBQVV4bUMsRUFBVWlpQixHQUMvRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwwQkFBMkIsQ0FDekJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxtQkFHcEMsR0FBSSxHQUFnQi8wQixFQUFPLFNBQVcrMEIsRUFBTyxvQkFBcUIsU0FBVXhtQyxFQUFVaWlCLEdBQ3BGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDRCQUE2QixDQUMzQjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyx3QkFHOUMsR0FBSS8wQixDQUNOLEVBUUksR0FBUStTLEdBQVksQ0FDdEJ2QixPQUFRLENBQ053akIsYUFSZSxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsVUFTaERDLFlBUGMsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFNBUS9Da0Qsa0JBTm9CLEdBQWEsU0FPakNDLGlCQU5tQixHQUFhLFdBb0JoQyxHQUF3QixTQUE4QjdwQyxFQUFVaWlCLEVBQU04bkIsR0FDeEUsT0FBT3BuQixHQUFJM2lCLEVBQVUsQ0FDbkIsMEJBQTJCLEdBQWdCLENBQUMsRUFBRytwQyxFQUFRLGVBQWlCLGNBQWU5bkIsRUFBS214QixxQkFBdUIsT0FFdkgsRUFFSSxHQUF1QixTQUE2QnB6QyxFQUFVaWlCLEVBQU04bkIsR0FDdEUsT0FBT3BuQixHQUFJM2lCLEVBQVUsQ0FDbkIsMEJBQTJCLEdBQWdCLENBQUMsRUFBRytwQyxFQUFRLGNBQWdCLGVBQWdCOW5CLEVBQUtxeEIsb0JBQXNCLE9BRXRILEVBRUksR0FBUyxDQUNYM3ZCLGVBQWdCLFNBQXdCM2pCLEVBQVVpaUIsR0FDaEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0F0QmYsQ0FBQyxFQXNCZ0MsQ0FFdENtYSxRQUFTLGNBQ1RneEIsV0FBWSxTQUNaMWlDLE9BQVEsVUFDUmdrQixPQUFRLE9BQ1IsdUJBQXdCLENBQ3RCdFMsUUFBUyxPQUNUZ3hCLFdBQVksU0FDWjVCLFNBQVUsT0FDVjFDLGFBQWMsTUFDZGo4QyxTQUFVLFlBRVosNEJBQTZCLENBQzNCeUIsV0FBWSxFQUNadzZDLGFBQWMsTUFDZHdCLGNBQWUsUUFHakIsb0JBQXFCLENBQUN0dUIsSUFBYSxDQUNqQ1csT0FBUSxFQUNSbXNCLGFBQWMsVUFDZHdCLGNBQWUsT0FDZnRsQixRQUFTLElBR1gsdUJBQXdCLENBQ3RCLG9CQUFxQixDQUNuQkEsUUFBUyxJQUliLDhCQUErQixDQUM3QixvQkFBcUIsQ0FDbkJBLFFBQVMsS0FHWixHQUFnQixDQUFDLEVBQUcsY0FBYzFmLE9BQU9yRCxFQUFVLGNBQWNxRCxPQUFPckQsR0FBVyxDQTNEL0UsQ0FBQyxNQTREVixFQUNBa2xCLFFBQVMsU0FBaUJsbEIsRUFBVWlpQixHQUNsQyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw0QkFBNkIsQ0FDM0JrbEIsUUFBU2pELEVBQUtpRCxRQUFVLFFBRzlCLEVBQ0ErekIsZ0JBQWlCLFNBQXlCajVDLEVBQVVpaUIsR0FDbEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsMkJBQTRCLENBQzFCLDRCQUE2QixDQUMzQmtsQixRQUFTakQsRUFBS2czQixnQkFBa0IsU0FJeEMsRUFDQXJhLG1CQUFvQixTQUE0QjUrQixFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHlDQUEwQyxDQUFDK1osRUFBd0IsTUFBT2tJLEVBQUsyYyx1QkFFbkYsRUFDQTZVLGdCQUFpQixTQUF5Qnp6QyxFQUFVaWlCLEdBQ2xELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDBCQUEyQixDQUN6QnVwQyxTQUFVdG5CLEVBQUt3eEIsZ0JBQWtCLFFBR3ZDLEVBQ0F5RixrQkFBbUIsU0FBMkJsNUMsRUFBVWlpQixHQUN0RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwwQkFBMkIsQ0FDekIzVCxXQUFZNDFCLEVBQUtpM0Isa0JBQW9CLFFBRzNDLEVBQ0FDLGtCQUFtQixTQUEyQm41QyxFQUFVaWlCLEdBQ3RELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDBCQUEyQixDQUN6QityQyxXQUFZOXBCLEVBQUtrM0IscUJBR3ZCLEVBQ0FDLHFCQUFzQixTQUE4QnA1QyxFQUFVaWlCLEdBQzVELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDBCQUEyQixDQUN6QmlzQyxjQUFlaHFCLEVBQUttM0Isd0JBRzFCLEVBQ0E5RixvQkFBcUIsU0FBNkJ0ekMsRUFBVWlpQixHQUMxRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUFDLEdBQUksR0FBcUJBLEVBQVVpaUIsR0FBTSxHQUFRLEdBQXFCVyxHQUFZNWlCLEdBQVdpaUIsR0FBTSxHQUM1SCxFQUNBbXhCLHFCQUFzQixTQUE4QnB6QyxFQUFVaWlCLEdBQzVELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQUMsR0FBSSxHQUFzQkEsRUFBVWlpQixHQUFNLEdBQVEsR0FBc0JXLEdBQVk1aUIsR0FBV2lpQixHQUFNLEdBQzlILEdBRUUsR0FBUzRCLEdBQWEsQ0FDeEJaLE9BQVEsS0FRTm8yQixHQUFpQixDQUluQjExQixnQkFBZ0IsRUFDaEJpYixtQkFBb0IsR0FBS0EsbUJBQ3pCNlUsZ0JBQWlCLEdBQ2pCMEYsa0JBQW1CLElBQ25CRCxrQkFBbUIsR0FDbkI1RixvQkFBcUIsRUFDckJGLHFCQUF1QyxFQUFqQixHQUFLNVYsVUFFM0I0YixxQkFBc0IsVUFDdEJFLHdCQUF5QixFQUFJLEdBRTdCcDBCLFNBQVUsR0FBSzJZLHNCQUF3QixHQUFLUSxnQkFBa0IsRUFFOUQ0YSxpQkFBa0IsR0FBS3BiLHNCQUF3QixHQUFLUSxnQkFBa0IsRUFFdEVrYixpQkFBa0IsY0FTbEJiLFlBQWE3MUIsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtLLDRCQUNwRDJULGtCQUFtQmh4QixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS0ssNEJBQzFENFQscUJBQXNCanhCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLTywyQkFDN0QrTSw0QkFBNkIsZUFDN0JDLHlCQUEwQixHQUMxQnVMLFdBQVk5MUIsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtlLDJCQUNsRHVULGlCQUFrQnh4QixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2UsMkJBQ3hEd1Qsb0JBQXFCenhCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLaUIsMEJBQzNEMk0sMkJBQTRCLGVBQzVCQyx3QkFBeUIsSUFPdkIsR0FBTSxDQUFDLEdBQVEsSUFDZixHQUFXLElBQUl2cUMsT0F6U04sMkJBeVMrQnZXLFFBQVEsS0FBTSxNQUN0RCxHQUFXLEdBQXNCLEdBQVUsR0FBS3VzRCxJQ2xTcEQsU0FBUyxHQUFnQmpzQyxFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0RvUWUsR0FBc0IsR0FBVSxHQUFLc3FELElDbFFwRCxJQUFJLEdBQWEsQ0FDZjExQixlQUFnQixTQUF3QjNqQixHQUN0QyxNQUFPLENBQUMyaUIsR0FBSTNpQixFQUFVLENBQ3BCLDBCQUEyQixDQUN6QnZCLFdBQVksa0JBR2xCLEdBR0UsR0FBVSxTQUFpQituQyxHQUM3QixPQUFPLEdBQWdCLENBQUMsRUFBRyxTQUFXQSxFQUFNLFNBQVV4bUMsRUFBVWlpQixHQUM5RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixLQUUzQixFQUNGLEVBTUksR0FBUWhpQixHQUFZLENBQ3RCdkIsT0FBUSxDQUNOd2pCLGFBTmUsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFVBT2hEQyxZQUxjLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxVQU9qRGhpQixXQUFZMmYsS0FrQlZtVixHQUFpQixTQUF3QnYzQixHQUMzQyxNQUFPLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLElBQUl0dUIsSUFBSSxTQUFVakUsR0FFMUQsSUFBSWtqQixHQUFTLEVBQUksR0FBS2xqQixFQUFJb2lCLEVBQWtCbVEsRUFBS3czQiw2QkFFakQsT0FBTyxHQUFnQixDQUFDLEVBQUcsd0NBQTBDL3BELEVBQUksR0FBSyxJQUFLLENBQ2pGODFCLFVBQVcsV0FGRSxJQUFNLEdBQVc5MUIsR0FFSSw4QkFDbENncUQsVUFBVyxrQkFBb0J6M0IsRUFBS3czQiw0QkFBOEIsSUFBTTdtQyxFQUFRLHNCQUVwRixFQUNGLEVBRUksR0FBUyxDQUNYK1EsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUNwQiwyQkFBNEIsQ0FDMUJ3bEIsVUFBVyxxQkFDWDU2QixTQUFVLFdBQ1Y4ckMsTUFBTyxPQUNQcHFDLE9BQVEsUUFFViwwQkFBMkIsQ0FDekIxQixTQUFVLFdBQ1Y4ckMsTUFBT2lqQixLQUNQcnRELE9BQVFzdEQsTUFDUnpzRCxLQUFNLFFBQ05GLElBQUssTUFDTDgxQixRQUFTLEVBQ1Q4akIsYUFBYyxRQUVoQiw0QkF4Q0csQ0FDTCxNQUFPLENBQ0w5akIsUUFBUyxLQUVYLFFBQVMsQ0FDUEEsUUFBUyxTQXFDYixFQUNBMDJCLDRCQUE2QixTQUFxQ3o1QyxFQUFVaWlCLEdBQzFFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDJCQUE0QixDQUFDdzVDLEdBQWV2M0IsTUFFaEQsR0FFRSxHQUFTNEIsR0FBYSxDQUN4QlosT0FBUSxHQUNSYyxZQUFhLEtBUVg4MUIsR0FBaUIsQ0FJbkJsMkIsZ0JBQWdCLEVBQ2hCODFCLDRCQUE2QixLQUM3QmYsWUFBYTcxQixHQUFLLEdBQUtnZCx3QkFDdkI4WSxXQUFZOTFCLEdBQUssR0FBS2tkLHdCQUlwQixHQUFNLENBQUMsR0FBUSxJQUNmLEdBQVcsSUFBSTE4QixPQWpKTixrQkMwQlQsSUR3SFcsR0FBc0IsR0FBVSxHQUFLdzJDLElBQ3JDLEdBQXNCLEdBQVUsR0FBS0EsSUN4SHZDLFdBYWIsU0FBUyxHQUFnQnpzQyxFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0FFQSxJQUFJLEdBQWEsQ0FDZjQwQixlQUFnQixXQUNkLE1BQU8sRUFDVCxHQUdFLEdBQVUsU0FBaUI2aUIsR0FDN0IsSUFBSW4zQixFQUVKLE9BQWtCLEdBQVhBLEVBQU8sQ0FBQyxFQUF5QixTQUFXbTNCLEVBQU8sY0FBZSxTQUFVeG1DLEVBQVVpaUIsR0FDM0YsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIzUyxnQkFBaUI0MEIsRUFBSyxTQUFXdWtCLEVBQU8saUJBRTVDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sVUFBVyxTQUFVeG1DLEVBQVVpaUIsR0FDekUsSUFBSTYzQixFQUVKLE1BQU8sQ0FBQ24zQixHQUFJM2lCLEdBQVc4NUMsRUFBTyxDQUFDLEVBQUcsR0FBZ0JBLEVBQU0sZUFBZ0IsQ0FDdEVsRixlQUFnQjN5QixFQUFLLFNBQVd1a0IsRUFBTyxhQUNyQyxHQUFnQnNULEVBQU0sbUJBQW9CLENBQzVDLGlCQUFrQixDQUNoQixvQkFBcUIsQ0FDbkJwUSxZQUFhem5CLEVBQUssU0FBV3VrQixFQUFPLGVBR3RDLEdBQWdCc1QsRUFBTSw0QkFBNkIsQ0FDckQsaUJBQWtCLENBQ2hCLDREQUE2RCxDQUMzRHBRLFlBQWF6bkIsRUFBSyxTQUFXdWtCLEVBQU8sZUFHdENzVCxJQUNOLEdBQUl6cUMsQ0FDTixFQU1JLEdBQVFtVixHQUFZLENBQ3RCdkIsT0FBUSxDQUNOd2pCLGFBTmUsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFVBT2hEQyxZQUxjLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxZQVcvQ3NELEdBQWMsU0FBcUIvbkIsR0FDckMsTUFBTyxDQUNMK25CLFlBQWEsdUJBQ2JlLFlBQWE5b0IsRUFBSzgzQixzQkFBd0IsS0FFOUMsRUFFSSxHQUFTLENBQ1hwMkIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUNwQjJZLFNBQVUsRUFDVixtQkFBb0IsQ0FDbEIweUIsV0FBWSxHQUVkLDRCQUE2QixDQUMzQnBTLFVBQVcsVUFHakIsRUFDQS9ULFFBQVMsU0FBaUJsbEIsRUFBVWlpQixHQUNsQyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixvQkFBcUIsQ0FDbkJrbEIsUUFBU2pELEVBQUtpRCxRQUFVLFFBRTFCLHdCQUF5QixDQUN2Qm1tQixXQUFZcHBCLEVBQUtpRCxRQUFVLE1BRTdCLDJCQUE0QixDQUMxQm9tQixjQUFlcnBCLEVBQUtpRCxRQUFVLFFBR3BDLEVBQ0ErekIsZ0JBQWlCLFNBQXlCajVDLEVBQVVpaUIsR0FDbEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsb0JBQXFCLENBQ25Ca2xCLFFBQVNqRCxFQUFLZzNCLGdCQUFrQixVQUd0QyxFQUNBZSxxQkFBc0IsU0FBOEJoNkMsRUFBVWlpQixHQUM1RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixRQUFTLENBQ1BncUMsWUFBYSx1QkFDYmUsWUFBYTlvQixFQUFLKzNCLHFCQUF1QixRQUcvQyxFQUNBRCxzQkFBdUIsU0FBK0IvNUMsRUFBVWlpQixHQUM5RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixtQkFBb0IsQ0FDbEIsaUJBQWtCLENBQ2hCLCtDQUFnRCxDQUM5QyxJQUFLZ3FDLEdBQVkvbkIsTUFJdkIsNEJBQTZCLENBQzNCLGlCQUFrQixDQUNoQiwrQ0FBZ0QsQ0FDOUMsNERBQTZEK25CLEdBQVkvbkIsUUFLbkYsR0FFRSxHQUFTNEIsR0FBYSxDQUN4QlosT0FBUSxLQVFOZzNCLEdBQVcsQ0FJYnQyQixnQkFBZ0IsRUFDaEJvMkIsc0JBQXVCLEVBQ3ZCQyxxQkFBc0IsRUFDdEI5MEIsUUFBUyxHQUFLdVksb0JBRWR3YixnQkFBNEMsRUFBM0IsR0FBS3hiLG9CQUEwQixFQUNoRG9QLG1CQUFvQmhxQixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS1MsMEJBQzNEeU0sa0JBQW1CbHFCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLbUIsMEJBT3ZELEdBQU0sQ0FBQyxHQUFRLElBQ2YsR0FBVyxJQUFJNzlCLE9BQU8sSUM1TDFCLFNBQVMsR0FBZ0IrSixFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0FFQSxTQUFTLEdBQVF3TCxFQUFRa1QsR0FDdkIsSUFBSS9ILEVBQU9yVSxPQUFPcVUsS0FBS25MLEdBRXZCLEdBQUlsSixPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlDLEVBQVV0YyxPQUFPcWMsc0JBQXNCblQsR0FDdkNrVCxJQUFnQkUsRUFBVUEsRUFBUW5KLE9BQU8sU0FBVW9KLEdBQ3JELE9BQU92YyxPQUFPMlgseUJBQXlCek8sRUFBUXFULEdBQUtULFVBQ3RELElBQ0F6SCxFQUFLOVEsS0FBSzlGLE1BQU00VyxFQUFNaUksRUFDeEIsQ0FFQSxPQUFPakksQ0FDVCxDQUVBLFNBQVMsR0FBZXBQLEdBQ3RCLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQXlCLE1BQWhCN0gsVUFBVVcsR0FBYVgsVUFBVVcsR0FBSyxDQUFDLEVBRWhEQSxFQUFJLEVBQ04sR0FBUWtILEdBQVEsR0FBTXpLLFFBQVEsU0FBVXdFLEdBQ3RDLEdBQWdCMkYsRUFBUTNGLEVBQUtpRyxFQUFPakcsR0FDdEMsR0FDU1UsT0FBT3ljLDBCQUNoQnpjLE9BQU8wYyxpQkFBaUJ6WCxFQUFRakYsT0FBT3ljLDBCQUEwQmxYLElBRWpFLEdBQVFBLEdBQVF6SyxRQUFRLFNBQVV3RSxHQUNoQ1UsT0FBTzZiLGVBQWU1VyxFQUFRM0YsRUFBS1UsT0FBTzJYLHlCQUF5QnBTLEVBQVFqRyxHQUM3RSxFQUVKLENBRUEsT0FBTzJGLENBQ1QsQ0Q0SGUsR0FBc0IsR0FBVSxHQUFLMmpELElBQ3JDLEdBQXNCLEdBQVUsR0FBS0EsSUMzSHBELElBQUlDLEdBQVksU0FBa0JsNkMsRUFBVWlpQixFQUFNdWtCLEdBQ2hELElBQUkyVCxFQUFvQmw0QixFQUFLLFNBQVd1a0IsRUFBTyxrQkFDL0MsT0FBTzdqQixHQUFJM2lCLEVBQVUsR0FBZSxDQUFDLEVBQXlCLFlBQXRCbTZDLEVBQWtDLENBQ3hFLDJFQUE0RSxDQUMxRTlWLE1BQU84VixTQUVQbHBELEVBQVcsQ0FDYixtREFBb0QsQ0FDbEQ1RCxnQkFBaUI0MEIsRUFBSyxTQUFXdWtCLEVBQU8sMkJBRzlDLEVBRUksR0FBYSxDQUNmN2lCLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FDcEIsd0JBQXlCLENBQ3ZCLG1EQUFvRCxDQUNsRDNTLGdCQUFpQixZQUdyQiw2REFBOEQsQ0FDNUQsa0VBQW1FLENBQ2pFKzdDLFFBQVMsT0FDVC83QyxnQkFBaUIsWUFHckIseUJBQTBCLENBQ3hCQSxnQkFBaUIsYUFHdkIsR0FHRSxHQUFVLFNBQWlCbTVDLEdBQzdCLElBQUluM0IsRUFFSixPQUFrQixHQUFYQSxFQUFPLENBQUMsRUFBeUIsU0FBV20zQixFQUFPLFNBQVUsU0FBVXhtQyxFQUFVaWlCLEdBQ3RGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sWUFFbEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxjQUFlLFNBQVV4bUMsRUFBVWlpQixHQUM3RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyxlQUN4Qyx5QkFBMEIsQ0FDeEJuNUMsZ0JBQWlCNDBCLEVBQUssU0FBV3VrQixFQUFPLGtCQUc5QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGVBQWdCLFNBQVV4bUMsRUFBVWlpQixHQUM5RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix3QkFBeUIsQ0FDdkJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxtQkFHcEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxZQUFhLFNBQVV4bUMsRUFBVWlpQixHQUMzRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwyQkFBNEIsQ0FDMUJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxnQkFHcEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxhQUFjLFNBQVV4bUMsRUFBVWlpQixHQUM1RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw0QkFBNkIsQ0FDM0Jxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxpQkFHcEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxTQUFVLFNBQVV4bUMsRUFBVWlpQixHQUN4RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixnQ0FBaUMsQ0FDL0Jxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxhQUdwQyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGlCQUFrQixTQUFVeG1DLEVBQVVpaUIsR0FDaEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsMEJBQTJCLENBQ3pCLDJFQUE0RSxDQUMxRXFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLHNCQUl0QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLHdCQUF5QixTQUFVeG1DLEVBQVVpaUIsR0FDdkYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsd0RBQXlELENBQ3ZELG1EQUFvRCxDQUNsRDNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyw2QkFJaEQsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxvQkFBcUIsU0FBVXhtQyxFQUFVaWlCLEdBQ25GLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDZEQUE4RCxDQUM1RCxrRUFBbUUsQ0FDakUzUyxnQkFBaUI0MEIsRUFBSyxTQUFXdWtCLEVBQU8seUJBSWhELEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8saUJBQWtCLFNBQVV4bUMsRUFBVWlpQixHQUNoRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwwQkFBMkJrNkMsR0FBVWw2QyxFQUFVaWlCLEVBQU11a0IsS0FFekQsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyx1QkFBd0IsU0FBVXhtQyxFQUFVaWlCLEdBQ3RGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDBCQUEyQms2QyxHQUFVbDZDLEVBQVVpaUIsRUFBTXVrQixLQUV6RCxHQUFJbjNCLENBQ04sRUFFSSxHQUFlLFNBQXNCbTNCLEdBQ3ZDLElBQUkvMEIsRUFFSixPQUFtQixHQUFaQSxFQUFRLENBQUMsRUFBMEIsU0FBVyswQixFQUFPLFNBQVUsU0FBVXhtQyxFQUFVaWlCLEdBQ3hGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHdEQUF5RCxDQUN2RHFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGFBR3BDLEdBQUksR0FBZ0IvMEIsRUFBTyxTQUFXKzBCLEVBQU8sb0JBQXFCLFNBQVV4bUMsRUFBVWlpQixHQUNwRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix3REFBeUQsQ0FDdkQsb0RBQXFELENBQ25EM1MsZ0JBQWlCNDBCLEVBQUssU0FBV3VrQixFQUFPLHlCQUloRCxHQUFJLEdBQWdCLzBCLEVBQU8sU0FBVyswQixFQUFPLGVBQWdCLFNBQVV4bUMsRUFBVWlpQixHQUMvRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix3REFBeUQsQ0FDdkQsdURBQXdELENBQ3REcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sb0JBSXRDLEdBQUkvMEIsQ0FDTixFQUVJMm9DLEdBQVcsU0FBa0I1VCxHQUMvQixNQUFPLENBQ0wxUSxTQUFVLFNBQWtCOTFCLEVBQVVpaUIsR0FDcEMsT0FBT0EsRUFBSzZULFVBQVlva0IsR0FBVWw2QyxFQUFVaWlCLEVBQU11a0IsRUFDcEQsRUFFSixFQVFJLEdBQVFoaUIsR0FBWSxDQUN0QnZCLE9BQVEsQ0FDTndqQixhQVJlLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxTQUFVMlQsR0FBUyxVQVNuRTFULFlBUGMsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFFBQVMwVCxHQUFTLFNBUWpFeFEsa0JBTm9CLEdBQWEsU0FPakNDLGlCQU5tQixHQUFhLFdBVWhDLEdBQVksU0FBbUJFLEdBQ2pDLE9BQU8sU0FBVTluQixHQUNmLE1BQU8sQ0FFTCx5REFBMEQsR0FBZ0IsQ0FBQyxFQUFHOG5CLEVBQVEsZUFBaUIsY0FBZSxHQUUxSCxDQUNGLEVBR0ksR0FBWSxJQUFVLEdBQ3RCLEdBQWEsSUFBVSxHQU12QnNRLEdBQVcsU0FBa0JsdEQsR0FFL0IsTUFBTyxDQUNMLGVBQWdCQSxFQUFPLEtBQ3ZCLGlCQUhVNEIsVUFBVXFCLE9BQVMsUUFBc0JhLElBQWpCbEMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLNUIsR0FHckQsS0FFN0IsRUFPSW10RCxHQUFXLFNBQWtCcnRELEdBRS9CLE1BQU8sQ0FDTCxjQUFlQSxFQUFNLEtBQ3JCLGtCQUhXOEIsVUFBVXFCLE9BQVMsUUFBc0JhLElBQWpCbEMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLOUIsR0FHcEQsS0FFL0IsRUFPSXN0RCxHQUFzQyxTQUE2Q3Y2QyxFQUFVaWlCLEdBQy9GLE9BQU9VLEdBQUkzaUIsRUFBVSxDQUNuQjNULFdBQVk0MUIsRUFBS3U0QixtQkFBcUIsS0FDdEMsNEJBQTZCLENBQzNCLHdCQUF5QixDQUN2QnBRLFVBQVdub0IsRUFBS3U0QixtQkFBcUIsT0FHekMsd0JBQXlCLENBQUN6Z0MsRUFBZWtJLEVBQUt3NEIsaUJBQWtCeDRCLEVBQUt1NEIsbUJBQW9CLFFBRTdGLEVBT0lFLEdBQWUsU0FBc0IxNkMsRUFBVWlpQixHQUNqRCxPQUNFVSxHQUFJM2lCLEVBQVUsQ0FDWixPQUFRLENBQ05xb0MsY0FBZSxTQUl2QixFQU9Jc1MsR0FBUyxTQUFlMzZDLEVBQVVpaUIsR0FDcEMsT0FBTzI0QixHQUFPNTZDLEVBQVVpaUIsR0FBTzQ0QixHQUFPNzZDLEVBQVVpaUIsRUFDbEQsRUFPSTI0QixHQUFTLFNBQWdCNTZDLEVBQVVpaUIsR0FDckMsSUFBSWtELEVBQVNsRCxFQUFLNjRCLGFBQ2xCLE9BQU9uNEIsR0FBSTNpQixFQUFVLENBQ25CaXJDLFdBQVk5bEIsRUFBUyxLQUNyQnltQixZQUFhem1CLEVBQVMsS0FDdEIsMEJBQTJCLENBQ3pCOGxCLFlBQWE5bEIsRUFBUyxLQUN0QnltQixhQUFjem1CLEVBQVMsT0FHN0IsRUFPSTAxQixHQUFTLFNBQWdCNzZDLEVBQVVpaUIsR0FDckMsSUFBSWtELEVBQVNsRCxFQUFLODRCLGFBQ2xCLE9BQU9wNEIsR0FBSTNpQixFQUFVLENBQ25Cb3NDLFVBQVdqbkIsRUFBUyxLQUNwQjRyQixhQUFjNXJCLEVBQVMsTUFFM0IsRUFPSTYxQixHQUFXLFNBQWlCaDdDLEVBQVVpaUIsR0FDeEMsT0FBT1UsR0FBSTNpQixFQUFVLENBQ25CLDRCQUE2QixDQUMzQjZtQyxhQUFjNWtCLEVBQUtnNUIsc0JBQXdCLE9BR2pELEVBRUksR0FBUyxDQUtYdDNCLGVBQWdCLFNBQXdCM2pCLEVBQVVpaUIsR0FDaEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FBQyxHQUFVaWlCLEdBQU8sRUFBSy9KLE9BQVEsQ0FDbkR0dEIsU0FBVSxXQUNWLDRCQUE2QixDQUMzQix3QkFBeUIsQ0FDdkJvQixXQUFZLGFBR2hCLHdCQUF5Qit0QixHQUFhLEdBQ3RDLHlCQUEwQjZnQyxHQUFPNTZDLEVBQVVpaUIsR0FDM0MseUJBQTBCNDRCLEdBQU83NkMsRUFBVWlpQixHQUMzQywwQkFBMkIsQ0FDekJ5VSxNQUFPLFFBRVQsb0RBQXFELENBQUMsRUFBS3pkLGlCQUFrQmMsRUFBd0IsYUFBYyxTQUFVLENBQzNIc3ZCLGVBQWdCLE9BQ2hCaEYsTUFBTyxVQUNQNVgsT0FBUSxTQUVWLHFEQUFzRCxDQUFDLEVBQUtuVSxPQUFRLENBQ2xFMXRCLFNBQVUsV0FDViw0REFBNkQsQ0FBQyxFQUFLMHRCLFVBRXJFLGdDQUFpQyxDQUMvQjh3QixRQUFTLFFBRVgsNEJBQTZCLENBQzNCRSxVQUFXLFFBQ1gxK0MsU0FBVSxZQUVaLDBCQUEyQixDQUFDLEVBQUsydUIsZUFBZ0IsRUFBS0ksV0FBWSxDQUNoRStjLE1BQU8sT0FDUCwrQkFBZ0MsQ0FDOUI5ZCxXQUFZLEtBR2hCLHdCQUF5QixDQUN2QjVzQixXQUFZLFVBRWQsMkJBQTRCLENBQUMrdEIsRUFBZWtJLEVBQUtpNUIsb0JBQXFCajVCLEVBQUtrNUIscUJBQXNCLE1BQU8sQ0FDdEc1UixTQUFVdG5CLEVBQUttNUIsbUJBQXFCLEtBQ3BDclAsV0FBWTlwQixFQUFLbzVCLHFCQUNqQmh2RCxXQUFZNDFCLEVBQUtrNUIscUJBQXVCLEtBQ3hDLCtCQUFnQyxDQUFDcGhDLEVBQWVrSSxFQUFLcTVCLHlCQUEwQnI1QixFQUFLazVCLHFCQUFzQixNQUFPLENBQy9HbnZELFdBQVksYUFHaEIsb0RBQXFEMHVELEdBQWExNkMsR0FDbEUsMEJBQTJCLENBQ3pCLDBCQUEyQixDQUN6Qix3QkFBeUIsQ0FDdkJrbEIsUUFBUyxLQUlmLCtCQUFnQyxDQUM5Qix5REFBMEQsQ0FBQyxFQUFLak0saUJBQWtCLEVBQUtJLGFBQ3ZGLDBCQUEyQixDQUFDLEVBQUtRLFVBQVcsQ0FDMUMsd0JBQXlCLENBQ3ZCcUwsUUFBUyxNQUtmLHdCQUF5QixDQUN2Qm1qQixjQUFlLE9BQ2YsMEJBQTJCLENBQ3pCZ0QsV0FBWSxFQUNaQyxjQUFlLEdBRWpCLHdCQUF5QixDQUN2QnBtQixRQUFTLElBSWIsMERBQTJELENBQ3pELGtEQUFtRCxDQUNqRHg0QixTQUFVLFdBSWQsaUNBQWtDLENBQ2hDLDBCQUEyQixDQUN6QmcvQyxZQUFhLE9BQ2JDLGFBQWMsUUFFaEIsZ0NBQWlDLENBQy9CQSxhQUFjLEVBQ2RqVixNQUFPLE9BQ1BrVixZQUFhLFFBRWYsd0JBQXlCN3hCLEVBQWUsU0FFMUMsc0JBQXVCLENBQ3JCLGdDQUFpQyxDQUMvQnRSLE9BQVEsVUFDUixzREFBdUQsQ0FDckQsaURBQWtELENBQ2hEMGdDLFdBQVksT0FDWixtQkFBb0IsV0FNNUIsa0dBQ2dELENBQzlDLDhGQUErRixDQUM3RjFnQyxPQUFRLGVBR1QsR0FBZ0IsQ0FBQyxFQUFHbWEsR0FBWTVpQixHQUFXLEdBQVdpaUIsSUFDN0QsRUFDQXc0QixpQkFBa0IsU0FBMEJ6NkMsRUFBVWlpQixHQUNwRCxNQUFPLENBQUNzNEIsR0FBb0N2NkMsRUFBVWlpQixHQUN4RCxFQUNBdTRCLG1CQUFvQixTQUE0Qng2QyxFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ3M0QixHQUFvQ3Y2QyxFQUFVaWlCLEdBQ3hELEVBQ0FvZCxnQkFBaUIsU0FBeUJyL0IsRUFBVWlpQixHQUNsRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQnVwQyxTQUFVdG5CLEVBQUtvZCxnQkFBa0IsS0FDakMsNEJBQTZCLENBQzNCa0ssU0FBVXRuQixFQUFLb2QsZ0JBQWtCLFFBR3ZDLEVBQ0FrYyxrQkFBbUIsU0FBMkJ2N0MsRUFBVWlpQixHQUN0RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQityQyxXQUFZOXBCLEVBQUtzNUIsb0JBRXJCLEVBQ0FDLDJCQUE0QixTQUFvQ3g3QyxFQUFVaWlCLEdBQ3hFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDRCQUE2QixDQUMzQnVwQyxTQUFVdG5CLEVBQUt1NUIsMkJBQTZCLFFBR2xELEVBQ0FDLDZCQUE4QixTQUFzQ3o3QyxFQUFVaWlCLEdBQzVFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDRCQUE2QixDQUMzQityQyxXQUFZOXBCLEVBQUt3NUIsZ0NBR3ZCLEVBQ0F2MkIsUUFBUyxTQUFpQmxsQixFQUFVaWlCLEdBQ2xDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDhCQUErQixDQUM3Qiw0REFBNkQsQ0FBQ3M2QyxHQUFTcjRCLEVBQUtpRCxRQUFTakQsRUFBS2lELFFBQVUsS0FFdEcsMEJBQTJCLENBQ3pCLCtCQUFnQyxDQUFDbzFCLEdBQVNyNEIsRUFBS2lELFFBQVUsT0FHL0QsRUFDQXcyQixhQUFjLFNBQXNCMTdDLEVBQVVpaUIsR0FDNUMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsMEJBQTJCLENBQUNxNkMsR0FBU3A0QixFQUFLeTVCLGlCQUU5QyxFQUNBQyxXQUFZLFNBQW9CMzdDLEVBQVVpaUIsR0FDeEMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCMjZDLEdBQU8zNkMsRUFBVWlpQixLQUU3QyxFQUNBZzVCLHNCQUF1QixTQUErQmo3QyxFQUFVaWlCLEdBQzlELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHlCQUEwQmc3QyxHQUFTaDdDLEVBQVVpaUIsS0FFakQsRUFDQTI1Qix5QkFBMEIsU0FBa0M1N0MsRUFBVWlpQixHQUNwRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixnQ0FBaUMsQ0FDL0IsK0JBQWdDLENBQzlCMDJCLE1BQU96VSxFQUFLMjVCLHlCQUEyQixTQUkvQyxFQUNBQyxpQkFBa0IsU0FBMEI3N0MsRUFBVWlpQixHQUNwRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixnQ0FBaUMsQ0FDL0IscUNBQXNDLENBQ3BDMDJCLE1BQU96VSxFQUFLNDVCLGlCQUFtQixTQUl2QyxFQUNBQyxnQkFBaUIsU0FBeUI5N0MsRUFBVWlpQixHQUNsRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwwQkFBMkIsQ0FDekIsU0FBVSxDQUNSdXBDLFNBQVV0bkIsRUFBSzY1QixnQkFBa0IsU0FJekMsRUFDQUMsMEJBQTJCLFNBQW1DLzdDLEVBQVVpaUIsR0FDdEUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsK0JBQWdDLENBQzlCLDBCQUEyQixDQUFDczZDLEdBQVNyNEIsRUFBSzg1QiwwQkFBMkI5NUIsRUFBSzg1QiwwQkFBNEIsT0FHNUcsRUFDQUMscUJBQXNCLFNBQThCaDhDLEVBQVVpaUIsR0FDNUQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsMEJBQTJCLENBQ3pCLDBCQUEyQixDQUFDczZDLEdBQVNyNEIsRUFBSys1QixxQkFBc0IvNUIsRUFBSys1QixxQkFBdUIsT0FHbEcsRUFDQUMsY0FBZSxTQUF1Qmo4QyxFQUFVaWlCLEdBQzlDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHdCQUF5QixDQUN2QjFULE9BQVEyMUIsRUFBS2c2QixjQUFnQixLQUM3Qix3QkFBeUIsQ0FBQ2xpQyxFQUFlLEVBQUdrSSxFQUFLZzZCLGNBQWUsTUFBTyxDQUNyRTV2RCxXQUFZNDFCLEVBQUtnNkIsY0FBZ0IsS0FDakMvMkIsUUFBUyxPQUlqQixFQUNBZzNCLHNCQUF1QixTQUErQmw4QyxFQUFVaWlCLEdBQzlELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHdCQUF5QixDQUN2Qix3QkFBeUIsQ0FDdkJ1cEMsU0FBVXRuQixFQUFLaTZCLHNCQUF3QixTQUkvQyxFQUNBQyx3QkFBeUIsU0FBaUNuOEMsRUFBVWlpQixHQUNsRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix3QkFBeUIsQ0FDdkIsd0JBQXlCLENBQ3ZCK3JDLFdBQVk5cEIsRUFBS2s2Qiw0QkFJekIsRUFDQUMsZ0JBQWlCLFNBQXlCcDhDLEVBQVVpaUIsR0FDbEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsZ0RBQWlELENBQy9DLDhCQUErQixDQUM3Qiw0REFBNkRzNkMsR0FBU3I0QixFQUFLbTZCLGdCQUFpQm42QixFQUFLbTZCLGdCQUFrQixPQUkzSCxFQUVBQyxNQUFPLFNBQWVyOEMsRUFBVWlpQixHQUM5QixPQUFPQSxFQUFLbzZCLE9BQVMxQixHQUFPMzZDLEVBQVVpaUIsRUFDeEMsRUFDQXE2QixRQUFTLFNBQWlCdDhDLEVBQVVpaUIsR0FDbEMsT0FBT0EsRUFBS3E2QixTQUFXMUIsR0FBTzU2QyxFQUFVaWlCLEVBQzFDLEVBQ0FzNkIsUUFBUyxTQUFpQnY4QyxFQUFVaWlCLEdBQ2xDLE9BQU9BLEVBQUtxNkIsU0FBV3pCLEdBQU83NkMsRUFBVWlpQixFQUMxQyxFQUNBdTZCLFFBQVMsU0FBaUJ4OEMsRUFBVWlpQixHQUNsQyxPQUFPQSxFQUFLdTZCLFNBQVd4QixHQUFTaDdDLEVBQVVpaUIsRUFDNUMsRUFDQTZULFNBQVUsU0FBa0I5MUIsRUFBVWlpQixHQUNwQyxPQUFPQSxFQUFLNlQsVUFBWTRrQixHQUFhMTZDLEVBQ3ZDLEdBRUUsR0FBUzZqQixHQUFhLENBQ3hCWixPQUFRLEtBOEJOdzVCLEdBQWUsR0FBZSxDQUloQzk0QixnQkFBZ0IsRUFDaEJpNEIseUJBQTBCLEdBQzFCUSxnQkFBaUIsRUFDakJNLHFCQUFzQixFQUFJLEdBQUtqZixvQkFDL0J5ZSxzQkFBdUIsR0FDdkJWLDJCQUE0QixHQUM1Qk0sZ0JBQWlCLEdBQ2pCVixtQkFBb0IsR0FDcEIvYixnQkFBaUIsR0FDakI4Yyx3QkFBeUIsR0FBS2hkLG1CQUM5QnNjLDZCQUE4QixHQUFLdGMsbUJBQ25Da2MscUJBQXNCLEdBQUtuYyxtQkFDM0JxYyxrQkFBbUIsR0FBS3JjLG1CQUN4QjJjLGlCQUFrQixHQUNsQkUsMEJBQTJCLEdBQzNCQyxxQkFBc0IsR0FDdEJWLHlCQUEwQixFQUMxQlIsYUFBYyxFQUFJLEdBQUtyZCxvQkFFdkJzZCxhQUFjLEVBQUksR0FBS3RkLG9CQUV2QjBkLHFCQUFzQixHQUN0QmoyQixRQUFTLEdBQ1QrMUIsc0JBQXVCLEdBQUtsZCx3QkFDNUIyZCxhQUFjLEVBQUksR0FBS2plLG9CQUV2QndlLGNBNUNrQixHQTZDbEJ6QixtQkFBb0J5QixHQUNwQlUsd0JBNUM0QixHQTZDNUJDLDZCQUE4QkQsR0FDOUJ6QixvQkFBcUIsRUFDckJULGlCQUFrQixFQUNsQm9DLGtCQUFtQmg2QixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS0csMEJBQzFEOGMscUJBQXNCajZCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLSyw0QkFDN0Q2YyxpQkFBa0JsNkIsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtNLDJCQUN6RDZjLGtCQUFtQm42QixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS0ssNEJBQzFEK2MsMEJBQTJCcDZCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLTywyQkFDbEU4Yyx3QkFBeUJyNkIsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtNLDJCQUNoRWdkLHNCQUF1QnQ2QixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS0ssNEJBQzlEa2Qsa0JBQW1CdjZCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLRywwQkFDMURxZCx3QkFBeUJ4NkIsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtHLDBCQUNoRXNkLDZCQUE4Qno2QixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS1csOEJBQ3JFK2MsNkJBQThCMTZCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLVyw4QkFDckVnZCwwQkFBMkIsVUFDM0JDLGdDQUFpQzU2QixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS1csOEJBQ3hFa2QsaUNBQWtDNzZCLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLVyw4QkFHekVtZCxpQkFBa0I5NkIsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUthLHlCQUN4RGdkLG9CQUFxQi82QixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2UsMkJBQzNEK2MsZ0JBQWlCaDdCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLZ0IsMEJBQ3ZEK2MsaUJBQWtCajdCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLZSwyQkFDeERpZCx5QkFBMEJsN0IsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtpQiwwQkFDaEVnZCx1QkFBd0JuN0IsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtnQiwwQkFDOURrZCxxQkFBc0JwN0IsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtlLDJCQUM1RG9kLGlCQUFrQnI3QixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2EseUJBQ3hEdWQsdUJBQXdCdDdCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLYSx5QkFDOUR3ZCw0QkFBNkJ2N0IsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtxQiw2QkFDbkVpZCx5QkFBMEIsVUFDMUJDLCtCQUFnQ3o3QixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS3FCLDZCQUN0RW1kLGdDQUFpQzE3QixHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS3FCLDhCQTNFekQsQ0FDZGliLE9BQU8sRUFDUEMsU0FBUyxFQUNUQyxTQUFTLEVBQ1R6bUIsVUFBVSxFQUNWMG1CLFNBQVMsSUEwRVAsR0FBTSxDQUFDLEdBQVEsSUFDZixHQUFXLElBQUluNUMsT0EzdUJOLGdCQ2FiLFNBQVMsR0FBZ0IrSixFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0Rnc0JlLEdBQXNCLEdBQVUsR0FBSzB0RCxJQUNyQyxHQUFzQixHQUFVLEdBQUtBLElDbnJCcEQsSUFBSSxHQUFhLENBQ2Y5NEIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUNwQix5QkFBMEIsQ0FDeEIwcEMsWUFBYSxrQkFHbkIsR0FHRSxHQUFVLFNBQWlCbEQsR0FDN0IsSUFBSW4zQixFQUVKLE9BQWtCLEdBQVhBLEVBQU8sQ0FBQyxFQUF5QixTQUFXbTNCLEVBQU8sVUFBVyxTQUFVeG1DLEVBQVVpaUIsR0FDdkYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxhQUVsQyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLEtBQU0sU0FBVXhtQyxFQUFVaWlCLEdBQ3BFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGtDQUFtQyxDQUNqQywyQkFBNEIsQ0FDMUIwcEMsWUFBYXpuQixFQUFLLFNBQVd1a0IsRUFBTyxVQUk1QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLEtBQU0sU0FBVXhtQyxFQUFVaWlCLEdBQ3BFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGtDQUFtQyxDQUNqQywyQkFBNEIsQ0FDMUIwcEMsWUFBYXpuQixFQUFLLFNBQVd1a0IsRUFBTyxVQUk1QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLEtBQU0sU0FBVXhtQyxFQUFVaWlCLEdBQ3BFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGtDQUFtQyxDQUNqQywyQkFBNEIsQ0FDMUIwcEMsWUFBYXpuQixFQUFLLFNBQVd1a0IsRUFBTyxVQUk1QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLEtBQU0sU0FBVXhtQyxFQUFVaWlCLEdBQ3BFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGtDQUFtQyxDQUNqQywyQkFBNEIsQ0FDMUIwcEMsWUFBYXpuQixFQUFLLFNBQVd1a0IsRUFBTyxVQUk1QyxHQUFJbjNCLENBQ04sRUFNSSxHQUFRbVYsR0FBWSxDQUN0QnZCLE9BQVEsQ0FDTndqQixhQU5lLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxVQU9oREMsWUFMYyxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsVUFPakRoaUIsV0FBWTJmLEtBSVZtYSxHQUFjLElBQ2RDLEdBQWlCLCtDQWtCakJDLEdBQVMsU0FBZ0JDLEdBQzNCLE1BQU8sQ0FDTCxRQUFTLENBQ1AsVUFBYSxVQUF3QixJQUFaQSxFQUFrQixRQUU3QyxPQUFRLENBQ04sVUFBYSxXQUF5QixFQUFiQSxFQUFpQixRQUU1QyxNQUFPLENBQ0wsVUFBYSxVQUF3QixJQUFaQSxFQUFrQixRQUdqRCxFQTZJSSxHQUFTLENBQ1hoN0IsZUFBZ0IsU0FBd0IzakIsRUFBVWlpQixHQUNoRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw2QkEzS0csQ0FDTCxNQUFPLENBQ0x3bEIsVUFBVyxtQkEwS1gsZ0NBaEtHazVCLElBQVEsR0FpS1gsK0JBcktHQSxHQUFPLEdBc0tWLDhCQWhKRyxDQUNMLFFBQVMsQ0FDUDM3QixRQUFTeTdCLElBRVgsTUFBTyxDQUNMejdCLFFBeENZLElBb0xaLHNDQS9GRyxDQUNMLFFBQVMsQ0FDUEEsUUFBU3k3QixJQUVYLE9BQVEsQ0FDTno3QixRQUFTeTdCLElBRVgsT0FBUSxDQUNOejdCLFFBN0ZZLEdBK0ZkLE9BQVEsQ0FDTkEsUUFoR1ksR0FrR2QsT0FBUSxDQUNOQSxRQUFTeTdCLElBRVgsUUFBUyxDQUNQejdCLFFBQVN5N0IsS0ErRVQsc0NBekVHLENBQ0wsUUFBUyxDQUNQejdCLFFBOUdZLEdBZ0hkLE9BQVEsQ0FDTkEsUUFqSFksR0FtSGQsT0FBUSxDQUNOQSxRQUFTeTdCLElBRVgsT0FBUSxDQUNOejdCLFFBQVN5N0IsSUFFWCxPQUFRLENBQ056N0IsUUExSFksSUFzTFosc0NBdERHLENBQ0wsUUFBUyxDQUNQQSxRQWxJWSxHQW9JZCxPQUFRLENBQ05BLFFBcklZLEdBdUlkLE9BQVEsQ0FDTkEsUUFBU3k3QixJQUVYLE9BQVEsQ0FDTno3QixRQUFTeTdCLElBRVgsT0FBUSxDQUNOejdCLFFBOUlZLElBdUxaLHNDQW5DRyxDQUNMLFFBQVMsQ0FDUEEsUUF0SlksR0F3SmQsT0FBUSxDQUNOQSxRQXpKWSxHQTJKZCxPQUFRLENBQ05BLFFBQVN5N0IsSUFFWCxPQUFRLENBQ056N0IsUUFBU3k3QixJQUVYLFFBQVMsQ0FDUHo3QixRQWxLWSxJQXdMWiw2QkFBOEIsQ0FDNUJuNEIsU0FBVSxXQUNWOHJDLE1BQU8sT0FDUHBxQyxPQUFRLE9BS1JxeUQsVUFBVyxPQVViLDZCQUE4QixDQUM1Qi96RCxTQUFVLFdBQ1Yyb0QsVUFBVyxhQUNYdG1ELElBQUssRUFDTEUsS0FBTSxNQUNOdXBDLE1BQU8sTUFDUHBxQyxPQUFRLE9BQ1JJLFNBQVUsU0FDVmc5QyxZQUFhLFdBRWYsb0RBQXFELENBQ25EaFQsTUFBTyxRQUNQdnBDLEtBQU0sU0FFUixrQ0FBbUMsQ0FDakNndEIsUUFBUyxlQUNUb3ZCLFNBQVUsRUFDVmw5QyxXQUFZLEVBQ1p6QixTQUFVLFdBQ1Y4ckMsTUFBTyxNQUNQcHFDLE9BQVEsT0FDUkksU0FBVSxTQUNWZzlDLFlBQWEsV0FFZix5REFBMEQsQ0FDeERoVCxNQUFPLFFBRVQsMEJBQTJCLENBQUMzYyxJQUFhLENBQ3ZDMi9CLFVBQVcsT0FDWG5HLFVBQVcsYUFDWGpuRCxPQUFRLE9BQ1IwOUMsWUFBYSxRQUNiTixZQUFhLFVBQ2I3QyxhQUFjLE1BQ2RpTyxrQkFBbUIsMkJBRXJCLDhEQUErRCxDQUM3RHR2QixVQUFXLGlCQUNYbzVCLGlCQUFrQiwwQkFFcEIsK0RBQWdFLENBQzlEcDVCLFVBQVcsa0JBQ1hyNEIsS0FBTSxRQUNOMHhELGdCQUFpQiwwQkFnQm5CLHlCQUEwQixDQUFDLENBQUMsRUFBRyxFQUFHLEVBQUcsR0FBR2xyRCxJQUFJLFNBQVU0a0IsR0FDcEQsT0EvRmEsU0FBd0IwSixFQUFNMUosR0FDakQsT0FBTyxHQUFnQixDQUFDLEVBQUcseUJBQTJCQSxFQUFLLENBQ3pEbWhDLFVBQVcsNkJBQStCLEVBQUl6M0IsRUFBSzY4QixTQUFXLEtBQU9MLEdBQWlCLG9CQUFzQmxtQyxFQUFNLGFBQWUsRUFBSTBKLEVBQUs2OEIsU0FBVyxLQUFPTCxJQUVoSyxDQTJGZU0sQ0FBZTk4QixFQUFNMUosRUFDOUIsR0FBSSxDQUNGM3RCLFNBQVUsV0FDVjhyQyxNQUFPLE9BQ1BwcUMsT0FBUSxPQUNSTixXQUFZLGFBR2xCLEVBQ0FnekQsa0JBQW1CLFNBQTJCaC9DLEVBQVVpaUIsR0FDdEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNkJBQThCLENBQzVCMDVDLFVBQVcsbUJBQXFCejNCLEVBQUsrOEIsa0JBQW9CLHVCQUcvRCxFQUNBQyxtQkFBb0IsU0FBNEJqL0MsRUFBVWlpQixHQUN4RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixxQkFBc0IsQ0FDcEIsMEJBQTJCLENBQ3pCK3FDLFlBQWE5b0IsRUFBS2c5QixtQkFBcUIsU0FJL0MsRUFDQUMscUJBQXNCLFNBQThCbC9DLEVBQVVpaUIsR0FDNUQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCLDBCQUEyQixDQUN6QitxQyxZQUFhOW9CLEVBQUtpOUIscUJBQXVCLFNBSWpELEVBQ0FDLG9CQUFxQixTQUE2Qm4vQyxFQUFVaWlCLEdBQzFELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHNCQUF1QixDQUNyQiwwQkFBMkIsQ0FDekIrcUMsWUFBYTlvQixFQUFLazlCLG9CQUFzQixTQUloRCxFQUNBQyxtQkFBb0IsU0FBNEJwL0MsRUFBVWlpQixHQUN4RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixxQkFBc0IsQ0FDcEIsMEJBQTJCLENBQ3pCK3FDLFlBQWE5b0IsRUFBS205QixtQkFBcUIsU0FJL0MsRUFDQUMsaUJBQWtCLFNBQTBCci9DLEVBQVVpaUIsR0FDcEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsbUJBQW9CLENBQ2xCLDBCQUEyQixDQUN6QitxQyxZQUFhOW9CLEVBQUtvOUIsaUJBQW1CLFNBSTdDLEVBQ0FDLFNBQVUsU0FBa0J0L0MsRUFBVWlpQixHQUNwQyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix3Q0F4UitDdS9DLEVBd1JZdDlCLEVBQUtxOUIsU0F2UjdELENBQ0wsU0FBVSxDQUNSOTVCLFVBQVcsVUFBWSxHQUFNKzVCLEVBQVUsUUFFekMsT0FBUSxDQUNOLzVCLFVBQVcsVUFBWSxFQUFNKzVCLEVBQVUsUUFFekMsU0FBVSxDQUNSLzVCLFVBQVcsVUFBWSxJQUFNKzVCLEVBQVUsUUFFekMsT0FBUSxDQUNOLzVCLFVBQVcsVUFBWSxFQUFNKzVCLEVBQVUsUUFFekMsU0FBVSxDQUNSLzVCLFVBQVcsVUFBWSxJQUFNKzVCLEVBQVUsUUFFekMsT0FBUSxDQUNOLzVCLFVBQVcsVUFBWSxFQUFNKzVCLEVBQVUsUUFFekMsU0FBVSxDQUNSLzVCLFVBQVcsVUFBWSxJQUFNKzVCLEVBQVUsUUFFekMsTUFBTyxDQUNMLzVCLFVBQVcsVUFBWSxFQUFNKzVCLEVBQVUsYUF4QnBCLElBQTRCQSxDQTBSbkQsRUFDQVQsU0FBVSxTQUFrQjkrQyxFQUFVaWlCLEdBQ3BDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDhEQUErRCxDQUM3RDA1QyxVQUFXLHFCQUF1QnozQixFQUFLNjhCLFNBQVcsS0FBT0wsSUFFM0QsK0RBQWdFLENBQzlEL0UsVUFBVyxzQkFBd0J6M0IsRUFBSzY4QixTQUFXLEtBQU9MLElBRTVELHlCQUEwQixDQUN4Qi9FLFVBQVcsNkJBQStCLEVBQUl6M0IsRUFBSzY4QixTQUFXLEtBQU9MLE1BRzNFLEdBRUUsR0FBUzU2QixHQUFhLENBQ3hCWixPQUFRLEdBQ1JjLFlBQWEsS0FZWHk3QixHQUFVLFVBQ1ZDLEdBQVMsVUFDVEMsR0FBWSxVQUNaQyxHQUFXLFVBS1hDLEdBQTRCLENBSTlCajhCLGdCQUFnQixFQUNoQjI3QixTQXJCYSxJQXNCYk8sa0JBbEJzQixJQW1CdEJmLFNBckJhLE1Bc0JiTyxpQkFBa0IsR0FBSy9YLFNBQVcsR0FBS0gsYUFBZSxFQUN0RGlZLG1CQUFvQixHQUFLL1gsV0FBYSxHQUFLRixhQUFlLEVBQzFEZ1ksb0JBQXFCLEdBQUsvWCxZQUFjLEdBQUtELGFBQWUsRUFDNUQrWCxxQkFBc0IsRUFDdEJELG1CQUFvQixHQUFLL1gsV0FBYSxHQUFLQyxhQUFlLEVBQzFENlgsa0JBdkJzQixPQUFpQixJQXdCdkNjLG1CQUFvQmo5QixHQUFLLEdBQU8wYyxlQUNoQ3dnQixjQUFlUCxHQUNmUSxjQUFlUCxHQUNmUSxjQUFlUCxHQUNmUSxjQUFlUCxHQUNmUSxrQkFBbUJ0OUIsR0FBSyxHQUFPMGMsZUFDL0I2Z0IsYUFBY1osR0FDZGEsYUFBY1osR0FDZGEsYUFBY1osR0FDZGEsYUFBY1osSUFJWixHQUFNLENBQUMsR0FBUSxJQUNmLEdBQVcsSUFBSXQ4QyxPQWpnQk4saUJDdUJiLFNBQVMsS0FlUCxPQWRBLEdBQVdoUyxPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDRDJkZSxHQUFzQixHQUFVLEdBQUs2d0QsSUFDckMsR0FBc0IsR0FBVSxHQUFLQSxJQzFkcEQsSUFBSSxHQUFhLENBQ2ZqOEIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUNwQixtQ0FBb0MsQ0FDbEMwcEMsWUFBYSxrQkFHbkIsR0FHRSxHQUFVLFNBQWlCbEQsR0FDN0IsT0E1Q2lDNTVDLEVBNENXLFNBQVVvVCxFQUFVaWlCLEdBQzlELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEtBRTNCLEdBaEQ0QjcxQyxFQTRDRCxTQUFXNjFDLEtBNUNmcDVCLEVBNENBLENBQUMsR0ExQ3RCL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsRUFaVCxJQUF5QkEsRUFBS3pjLEVBQUsvRCxDQWlEbkMsRUFNSSxHQUFRNDNCLEdBQVksQ0FDdEJ2QixPQUFRLENBQ053akIsYUFOZSxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsVUFPaERDLFlBTGMsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFVBT2pEaGlCLFdBQVksS0FJVixHQUFTLENBQ1hmLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FDcEJwVixTQUFVLFdBQ1Ysc0NBQXVDLENBQ3JDQSxTQUFVLFdBQ1Y4ckMsTUFBTyxPQUNQcHFDLE9BQVEsUUFFVixtQ0FBb0MsQ0FDbEMxQixTQUFVLFdBQ1Yyb0QsVUFBVyxhQUNYN2MsTUFBTyxPQUNQcHFDLE9BQVEsT0FDUjA5QyxZQUFhLFFBQ2JuRCxhQUFjLE9BRWhCLCtFQUFnRixDQUM5RXJoQixVQUFXLFlBQ1hnN0IsS0FBTSxzQkFHWixFQUNBQyw0QkFBNkIsU0FBcUN6Z0QsRUFBVWlpQixHQUMxRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixzQ0FBdUMsQ0FDckMwZ0Qsa0JBQW1CeitCLEVBQUt3K0IsK0JBRzlCLEdBRUUsR0FBUzU4QixHQUFhLENBQ3hCWixPQUFRLEdBQ1JjLFlBQWEsS0FRWDQ4QixHQUFvQyxDQUl0Q2g5QixnQkFBZ0IsRUFDaEI4OEIsNEJBQTZCLE1BQzdCL0gsWUFBYTcxQixHQUFLLEdBQUswYyxlQUN2Qm9aLFdBQVk5MUIsR0FBSyxHQUFLMGMsZ0JBSXBCLEdBQU0sQ0FBQyxHQUFRLElBQ2YsR0FBVyxJQUFJbDhCLE9BN0hOLDBCQzRCVCxJRGtHVyxHQUFzQixHQUFVLEdBQUtzOUMsSUFDckMsR0FBc0IsR0FBVSxHQUFLQSxJQ2xHdkMsV0FvQmIsU0FBUyxHQUFnQnZ6QyxFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0FFQSxTQUFTLEdBQVF3TCxFQUFRa1QsR0FDdkIsSUFBSS9ILEVBQU9yVSxPQUFPcVUsS0FBS25MLEdBRXZCLEdBQUlsSixPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlDLEVBQVV0YyxPQUFPcWMsc0JBQXNCblQsR0FDdkNrVCxJQUFnQkUsRUFBVUEsRUFBUW5KLE9BQU8sU0FBVW9KLEdBQ3JELE9BQU92YyxPQUFPMlgseUJBQXlCek8sRUFBUXFULEdBQUtULFVBQ3RELElBQ0F6SCxFQUFLOVEsS0FBSzlGLE1BQU00VyxFQUFNaUksRUFDeEIsQ0FFQSxPQUFPakksQ0FDVCxDQUVBLFNBQVMsR0FBZXBQLEdBQ3RCLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQXlCLE1BQWhCN0gsVUFBVVcsR0FBYVgsVUFBVVcsR0FBSyxDQUFDLEVBRWhEQSxFQUFJLEVBQ04sR0FBUWtILEdBQVEsR0FBTXpLLFFBQVEsU0FBVXdFLEdBQ3RDLEdBQWdCMkYsRUFBUTNGLEVBQUtpRyxFQUFPakcsR0FDdEMsR0FDU1UsT0FBT3ljLDBCQUNoQnpjLE9BQU8wYyxpQkFBaUJ6WCxFQUFRakYsT0FBT3ljLDBCQUEwQmxYLElBRWpFLEdBQVFBLEdBQVF6SyxRQUFRLFNBQVV3RSxHQUNoQ1UsT0FBTzZiLGVBQWU1VyxFQUFRM0YsRUFBS1UsT0FBTzJYLHlCQUF5QnBTLEVBQVFqRyxHQUM3RSxFQUVKLENBRUEsT0FBTzJGLENBQ1QsQ0FFQSxJQUFJLEdBQWEsQ0FDZnF0QixlQUFnQixTQUF3QjNqQixHQUN0QyxNQUFPLEVBQ1QsR0FJRSxHQUFVLFNBQWlCd21DLEdBQzdCLElBQUluM0IsRUFFSixPQUFrQixHQUFYQSxFQUFPLENBQUMsRUFBeUIsU0FBV20zQixFQUFPLGNBQWUsU0FBVXhtQyxFQUFVaWlCLEdBQzNGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLG1CQUFvQixDQUNsQixtQkFBb0JpaUIsRUFBSyxTQUFXdWtCLEVBQU8sa0JBR2pELEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sdUJBQXdCLFNBQVV4bUMsRUFBVWlpQixHQUN0RixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixzQkFBdUIsQ0FDckIsbUJBQW9CaWlCLEVBQUssU0FBV3VrQixFQUFPLDJCQUdqRCxHQUFJbjNCLENBQ04sRUFNSSxHQUFRbVYsR0FBWSxDQUN0QnZCLE9BQVEsQ0FDTndqQixhQU5lLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxVQU9oREMsWUFMYyxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsWUFTL0MsR0FBZSxDQUNqQmthLFVBQVUsR0FJUixHQUFZLEdBQWUsQ0FDN0I1b0IsY0FBVS9tQyxFQUVWNHZELEVBQUcsR0FBSzllLFFBQ1AsR0FBYyxDQUFDLEVBQUd1RyxJQU1qQndZLEdBQVcsR0FBZSxDQUk1Qm45QixnQkFBZ0IsRUFDaEJxakIsZ0JBQWlCLEtBQ2pCcEksbUJBQW9CLFFBQ3BCbUksbUJBQW9CLGNBQ3BCZ2EsaUNBQWtDLDBCQUVsQ2phLG1CQUFvQixjQUNwQmthLGlDQUFrQyx1QkFDbEMvWiwwQkFBMkIsY0FDM0IyRCxjQUFlLEdBQUs5TSx5QkFDcEJ4eEMsWUFBUTJFLEVBRVJ1NkMsVUFBVyxJQUNYeVYsYUFBYyxHQUFLcmpCLGVBQ25Cc2pCLE9BQVEsQ0FBQyxFQUFHLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBRWhDdGhCLHVCQUF3Qi9jLEdBQUssR0FBSytjLHdCQUNsQ0Usc0JBQXVCamQsR0FBSyxHQUFLaWQsdUJBQ2pDdVcsZ0NBQWlDLG9CQUNqQ0MsK0JBQWdDLHFCQUMvQixJQU9DLEdBQVksU0FBbUJ2TSxHQUNqQyxPQUFPLFdBQ0wsTUFBTyxDQUNMVCxVQUFXUyxFQUFRLFFBQVUsT0FFakMsQ0FDRixFQUVJLEdBQVksSUFBVSxHQUN0QixHQUFhLElBQVUsR0FtQnZCb1gsR0FBYSxTQUFvQjl4QyxHQUNuQyxJQUFJNFMsRUFBTzVTLEVBQUs0UyxLQUNaeVUsRUFBUXJuQixFQUFLcW5CLE1BQ2I5cEMsRUFBUXlpQixFQUFLemlCLE1BQ2JrbUIsRUFyQlcsU0FBb0JtUCxFQUFNeVUsR0FDekMsT0FBT0EsRUFBUXpVLEVBQUt1cEIsVUFBWXZwQixFQUFLdXBCLFVBQVk5VSxDQUNuRCxDQW1CVTBxQixDQUFXbi9CLEVBQU15VSxHQUN6QixPQUFPLEdBQWdCLENBQUMsRUFBRyxJQWxCWixTQUFvQkEsR0FFbkMsTUFBTyxrQkFEUUEsRUFBTWxoQyxXQUFXMUksUUFBUSxJQUFLLElBRS9DLENBZW1DdTBELENBQVd2dUMsR0FBSSxDQUM5QyxtQkFBb0IsQ0FDbEI0akIsTUFBTzlwQyxHQUFTcTFCLEVBQUtnL0IsYUFBZW51QyxFQUFJLE9BSTlDLEVBRUl3dUMsR0FBZ0MsU0FBdUN0aEQsRUFBVTJ2QyxHQUNuRixPQUFPaHRCLEdBQUkzaUIsRUFBVSxDQUFDMnZDLEVBQU91UixPQUFPdnRELElBQUksU0FBVStpQyxHQUNoRCxPQUFPeXFCLEdBQVcsQ0FDaEJsL0IsS0FBTTB0QixFQUNOalosTUFBT0EsR0FFWCxHQUFJLENBQ0YsbUJBQW9CLENBQ2xCNlUsU0FBVSxHQUFLM04sZUFBaUIrUixFQUFPbkUsVUFBWSxRQUd6RCxFQUVJLEdBQVksU0FBa0J4ckMsRUFBVWlpQixHQUMxQyxPQUNFVSxHQUFJM2lCLEVBQVUsQ0FDWixzQkFBdUIsQ0FDckJtYSxRQUFTLFVBSWpCLEVBRUlvbkMsR0FBWSxTQUFrQnZoRCxFQUFVaWlCLEdBQzFDLE9BQU9VLEdBQUkzaUIsRUFBVSxDQUFDaWlCLEVBQUtpL0IsT0FBT3Z0RCxJQUFJLFNBQVUraUMsR0FDOUMsT0FBT3lxQixHQUFXLENBQ2hCbC9CLEtBQU1BLEVBQ055VSxNQUFPQSxFQUNQOXBDLE1BQU8sU0FFWCxHQUFJaTRCLEdBQWE1QyxFQUFNLElBQWUsQ0FDcEMsbUJBQW9CLENBQ2xCcjNCLFNBQVUsUUFDVjhyQyxNQUFPLFFBQ1B6cEMsSUFBSyxFQUNMRSxLQUFNLEVBQ05xdEIsTUFBTyxFQUNQQyxPQUFRLE9BQ1JtMUIsb0JBQXFCLEVBQ3JCQyxxQkFBc0IsS0FHNUIsRUFFSTJSLEdBQUssU0FBV3hoRCxFQUFVaWlCLEdBQzVCLE9BQU9VLEdBQUkzaUIsRUFBVSxDQUNuQixxQkFBc0IsQ0FDcEIsdUNBQXdDLENBQ3RDMGEsT0FBUXVILEVBQUs0K0IsS0FJckIsRUFFSSxHQUFTLEdBQWUsQ0FDMUJsOUIsZUFBZ0IsU0FBd0IzakIsRUFBVWlpQixHQUNoRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUFDLEtBQWEsQ0FDbENwVixTQUFVLFNBQ1YsdUJBQXdCLENBQ3RCOHJDLE1BQU8sUUFFVCxzQkFBdUIsQ0FDckIsbUJBQW9CLENBQ2xCM1QsUUFBUyxFQUNUbjRCLFNBQVUsYUFHZCxxQkFBc0IsQ0FDcEIsbUJBQW9CLENBQ2xCb3ZCLG1CQUFvQix1QkFHeEIsbUJBQW9CLENBQ2xCQSxtQkFBb0IsTUFDcEIrSSxRQUFTLEVBQ1RuNEIsU0FBVSxZQUVaLHNCQUF1QixDQUNyQnV2QixRQUFTLE9BQ1RILG1CQUFvQixNQUNwQnB2QixTQUFVLFFBQ1ZxQyxJQUFLLEVBQ0x1dEIsTUFBTyxFQUNQQyxPQUFRLEVBQ1J0dEIsS0FBTSxFQUNONDFCLFFBQVMsR0FFWCxxQkFBc0IsR0FBVS9pQixHQUNoQyx1Q0FBd0MsQ0FDdEMraUIsUUFBUyxHQUVYLHFCQUFzQncrQixHQUFVdmhELEVBQVVpaUIsR0FDMUMscUJBQXNCLENBQ3BCczJCLFVBQVcsT0FDWDlyRCxVQUFXLE9BQ1hpcUMsTUFBTyxPQUNQcHFDLE9BQVEsUUFFVix3QkFBeUIsQ0FDdkJBLE9BQVEsT0FDUixtQkFBb0IsQ0FDbEJBLE9BQVEsWUFHVCxHQUFnQixDQUFDLEVBQUdzMkIsR0FBWTVpQixHQUFXLE1BQ2xELEVBQ0FnbkMsZ0JBQWlCLFNBQXlCaG5DLEVBQVVpaUIsR0FDbEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUNBQXdDLENBQ3RDc1csZ0JBQWlCMkwsRUFBSytrQixtQkFHNUIsRUFDQXBJLG1CQUFvQixTQUE0QjUrQixFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVDQUF3QyxDQUN0Q29XLG1CQUFvQjZMLEVBQUsyYyxzQkFHL0IsRUFDQXFJLDBCQUEyQixTQUFtQ2puQyxFQUFVaWlCLEdBQ3RFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVDQUF3QyxDQUN0Q3dXLHlCQUEwQnlMLEVBQUtnbEIsNkJBR3JDLEVBQ0FILG1CQUFvQixTQUE0QjltQyxFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLG9CQUFxQixDQUNuQixtQkFBb0JpaUIsRUFBSzZrQixzQkFHL0IsRUFDQUMsbUJBQW9CLFNBQTRCL21DLEVBQVVpaUIsR0FDeEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsbUJBQW9CaWlCLEVBQUs4a0IscUJBRTdCLEVBQ0FpYSxpQ0FBa0MsU0FBMENoaEQsRUFBVWlpQixHQUNwRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixvQ0FBcUMsQ0FDbkMsbUJBQW9CaWlCLEVBQUsrK0Isb0NBRy9CLEVBQ0FELGlDQUFrQyxTQUEwQy9nRCxFQUFVaWlCLEdBQ3BGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDBDQUEyQyxDQUN6QyxtQkFBb0JpaUIsRUFBSzgrQixvQ0FHL0IsRUFDQXowRCxPQUFRLFNBQWdCMFQsRUFBVWlpQixHQUNoQyxNQUFPLE1BQWlCaHhCLElBQWhCZ3hCLEVBQUszMUIsUUFBd0JxMkIsR0FBSTNpQixFQUFVLENBQ2pELG1CQUFvQixDQUNsQjFULE9BQVEyMUIsRUFBSzMxQixVQUduQixFQUNBNDBELE9BQVEsU0FBZ0JsaEQsRUFBVWlpQixHQUNoQyxNQUFPLENBQUNxL0IsR0FBOEJ0aEQsRUFBVWlpQixHQUNsRCxFQUNBdXBCLFVBQVcsU0FBbUJ4ckMsRUFBVWlpQixHQUN0QyxNQUFPLENBQUNxL0IsR0FBOEJ0aEQsRUFBVWlpQixHQUNsRCxFQUNBZy9CLGFBQWMsU0FBc0JqaEQsRUFBVWlpQixHQUM1QyxNQUFPLENBQUNxL0IsR0FBOEJ0aEQsRUFBVWlpQixHQUNsRCxFQUNBMm9CLGNBQWUsU0FBdUI1cUMsRUFBVWlpQixHQUM5QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixtQkFBb0IsQ0FDbEI2bUMsYUFBYzVrQixFQUFLMm9CLGNBQWdCLFFBR3pDLEVBRUE1UyxTQUFVLFNBQWtCaDRCLEVBQVVpaUIsR0FDcEMsTUFBTyxDQUFDQSxFQUFLK1YsVUFBWSxHQUFVaDRCLEdBQ3JDLEVBQ0E0Z0QsU0FBVSxTQUFrQjVnRCxFQUFVaWlCLEdBQ3BDLE1BQU8sQ0FBQ0EsRUFBSzIrQixVQUFZVyxHQUFVdmhELEVBQVVpaUIsR0FDL0MsRUFDQTQrQixFQUFHLFNBQVc3Z0QsRUFBVWlpQixHQUN0QixNQUFPLENBQUNBLEVBQUs0K0IsR0FBS1csR0FBR3hoRCxFQUFVaWlCLEdBQ2pDLEdBQ0NtbUIsSUFPQyxHQUFNLENBTEd2a0IsR0FBYSxDQUN4QlosT0FBUSxLQUlTLElBQ2YsR0FBVyxJQUFJNWYsT0FBTyxJQ25idEIsSURvYlcsR0FBc0IsR0FBVSxHQUFLeTlDLElBQ3JDLEdBQXNCLEdBQVUsR0FBS0EsSUNwYnZDLG1CQWViLFNBQVMsR0FBZ0IxekMsRUFBS3pjLEVBQUsvRCxHQVlqQyxPQVhJK0QsS0FBT3ljLEVBQ1QvYixPQUFPNmIsZUFBZUUsRUFBS3pjLEVBQUssQ0FDOUIvRCxNQUFPQSxFQUNQdWdCLFlBQVksRUFDWkcsY0FBYyxFQUNkQyxVQUFVLElBR1pILEVBQUl6YyxHQUFPL0QsRUFHTndnQixDQUNULENBRUEsU0FBUyxLQWVQLE9BZEEsR0FBVy9iLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENBRUEsSUFBSSxHQUFhLENBQ2Y0MEIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxFQUNULEdBSUUsR0FBVSxTQUFpQndtQyxHQUM3QixJQUFJbjNCLEVBRUosT0FBa0IsR0FBWEEsRUFBTyxDQUFDLEVBQXlCLFNBQVdtM0IsRUFBTyxRQUFTLFNBQVV4bUMsRUFBVWlpQixHQUNyRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw2QkFBOEIsQ0FDNUJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxZQUdwQyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGNBQWUsU0FBVXhtQyxFQUFVaWlCLEdBQzdFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDZCQUE4QixDQUM1QnZCLFdBQVl3akIsRUFBSyxTQUFXdWtCLEVBQU8sa0JBR3pDLEdBQUluM0IsQ0FDTixFQU1JLEdBQVFtVixHQUFZLENBQ3RCdkIsT0FBUSxDQUNOd2pCLGFBTmUsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFVBT2hEQyxZQUxjLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxZQVUvQyxHQUFTLENBQ1gvaUIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUFDLEVBQUs4WSxtQkFBb0IsQ0FFOUM3ckIsSUFBSyxFQUNMdXRCLE1BQU8sRUFDUEMsT0FBUSxFQUNSdHRCLEtBQU0sRUFDTms3QyxjQUFlLE9BQ2YrQyxlQUFnQixhQUVoQix1QkFBd0IsQ0FDdEJ4Z0QsU0FBVSxRQUNWOHZCLE9BQVEsR0FBS3duQixtQkFFWixDQUNILDREQUE2RCxDQUMzRHQzQyxTQUFVLGFBR2hCLEdBRUU2MkQsR0FBZTU5QixHQUFhLENBQzlCWixPQUFRLEtBR055K0IsR0FBeUMsU0FBZ0QxaEQsRUFBVWlpQixHQUNyRyxPQUFPVSxHQUFJM2lCLEVBQVUsQ0FDbkIsMkJBQTRCLENBQzFCa2xCLFFBQVNqRCxFQUFLMC9CLHVCQUF5QixNQUFRMS9CLEVBQUtpdEIsZ0JBQWtCLE9BRzVFLEVBRUkwUyxHQUFrQixDQUNwQjdhLG1CQUFvQixTQUE0Qi9tQyxFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVaWlCLEVBQUs4a0Isb0JBQzdCLEVBQ0FELG1CQUFvQixTQUE0QjltQyxFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDRCQUE2QixDQUFDaWlCLEVBQUs2a0Isc0JBRXZDLEVBQ0FwUSxNQUFPLFNBQWUxMkIsRUFBVWlpQixHQUM5QixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw2QkFBOEIsQ0FDNUIwMkIsTUFBT3pVLEVBQUt5VSxNQUFRLFFBRzFCLEVBQ0FzUSxnQkFBaUIsU0FBeUJobkMsRUFBVWlpQixHQUNsRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQnNXLGdCQUFpQjJMLEVBQUsra0Isa0JBRTFCLEVBQ0FwSSxtQkFBb0IsU0FBNEI1K0IsRUFBVWlpQixHQUN4RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQm9XLG1CQUFvQjZMLEVBQUsyYyxxQkFFN0IsRUFDQXFJLDBCQUEyQixTQUFtQ2puQyxFQUFVaWlCLEdBQ3RFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCd1cseUJBQTBCeUwsRUFBS2dsQiw0QkFFbkMsRUFDQXlVLGFBQWMsU0FBc0IxN0MsRUFBVWlpQixHQUM1QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw2QkFBOEIsQ0FDNUJrbEIsUUFBUyxLQUFPakQsRUFBS3k1QixhQUFlLFFBRzFDLEVBQ0E5USxjQUFlLFNBQXVCNXFDLEVBQVVpaUIsR0FDOUMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNkJBQThCLENBQzVCNm1DLGFBQWM1a0IsRUFBSzJvQixjQUFnQixRQUd6QyxFQUNBK1csdUJBQXdCLFNBQWdDM2hELEVBQVVpaUIsR0FDaEUsTUFBTyxDQUFDeS9CLEdBQXVDMWhELEVBQVVpaUIsR0FDM0QsRUFDQWl0QixnQkFBaUIsU0FBeUJsdkMsRUFBVWlpQixHQUNsRCxNQUFPLENBQUN5L0IsR0FBdUMxaEQsRUFBVWlpQixHQUMzRCxFQUNBaXFCLFVBQVcsU0FBbUJsc0MsRUFBVWlpQixHQUN0QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwyQkFBNEIsQ0FDMUJ1cEMsU0FBVXRuQixFQUFLaXFCLFVBQVksUUFHakMsRUFDQTVNLFlBQWEsU0FBcUJ0L0IsRUFBVWlpQixHQUMxQyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwyQkFBNEIsQ0FDMUIzVCxXQUFZNDFCLEVBQUtxZCxZQUFjLFFBR3JDLEVBQ0F1aUIsc0JBQXVCLFNBQStCN2hELEVBQVVpaUIsR0FDOUQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsK0JBQWdDLENBQzlCLHVDQUF3QyxDQUN0Q3FyQyxXQUFZcHBCLEVBQUs0L0Isc0JBQXdCLEtBQ3pDdlcsY0FBZXJwQixFQUFLNC9CLHNCQUF3QixPQUdoRCw2QkFBOEIsQ0FDNUIsdUNBQXdDLENBQ3RDeFcsV0FBWXBwQixFQUFLNC9CLHNCQUF3QixTQUlqRCxHQUdFLEdBQVcsR0FBUyxDQUFDLEVBQUcsQ0FDMUJsK0IsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUFDLEVBQUttWSxhQUFjLENBQ3hDa3dCLGNBQWUsTUFDZitDLGVBQWdCLFNBQ2hCam1CLE9BQVEsU0FDUm5MLG1CQUFvQixNQUNwQitJLFFBQVMsRUFDVCwyQkFBNEIsQ0FDMUJ6SyxLQUFNLFlBRVIsNEJBQTZCLENBQzNCLGNBQWUsQ0FDYjZNLE9BQVEsSUFHWiw2QkFBOEIsQ0FDNUJnckIsU0FBVSxRQUVaLCtCQUFnQyxDQUM5Qiw2QkFBOEIsRUFBS2wzQixpQkFDbkMsMkJBQTRCLENBQUMsRUFBS1gsT0FBUSxDQUN4Q2s3QixVQUFXLFdBRWIsNEJBQTZCLEVBQUtyN0IsY0FFcEMsNkJBQThCLENBQzVCLDZCQUE4QixDQUFDLEVBQUtvQixnQkFDcEMsMkJBQTRCLENBQzFCK3hCLGNBQWUsT0FFakIsNEJBQTZCLENBQUMsRUFBS3R5QixtQkFBb0IsQ0FDckQwZCxNQUFPLGFBSWYsR0FDQ2tyQixJQUVDLEdBQVMvOUIsR0FBYSxDQUN4QlosT0FBUSxLQVVONitCLEdBQW1CLENBSXJCbitCLGdCQUFnQixFQUNoQnFqQixnQkFBaUIsS0FDakJwSSxtQkFBb0IsTUFDcEJtSSxtQkFBb0IsY0FDcEJELG1CQUFvQixjQUNwQkcsMEJBQTJCLGNBQzNCMkQsY0FBZSxHQUFLOU0seUJBQ3BCb08sVUFBVyxHQUNYNU0sWUFBYSxHQUNieWlCLFdBQVksR0FDWnJHLGFBQWMsR0FDZG1HLHNCQUF1QixHQUV2QjNTLGdCQXZCbUIsRUF3Qm5CeVMsdUJBQXdCLEdBQ3hCanJCLE1BQU8sSUFDUGtKLHVCQUF3Qi9jLEdBQUssR0FBSytjLHdCQUNsQ3NOLGlCQUFrQnJxQixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS21pQiwwQkFDekRsaUIsc0JBQXVCamQsR0FBSyxHQUFLaWQsdUJBQ2pDNE4sZ0JBQWlCN3FCLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLQywyQkFJckQsR0FBTSxDQUFDLEdBQVEsSUFDZixHQUFXLElBQUkzOEIsT0FBTyxJQUN0QjQrQyxHQUFZLENBQUNSLElBQ2J4c0MsR0FBaUIsSUFBSTVSLE9BclJmLDJCQ0FOLEdBQVFtaEIsR0FBWSxDQUN0QkUsV0FBWSxLQTJCVnc5QixHQUFrQixDQUlwQnYrQixnQkFBZ0IsR0FJZCxHQUFNLENBdEJHRSxHQUFhLENBQ3hCWixPQVZXLENBQ1hVLGVBQWdCLFdBQ2QsTUFBTyxDQUNMLG1CQUFvQixDQUNsQnhKLFFBQVMsUUFHZixHQUlBNEosWUFBYSxLQW9CSSxJQUNmLEdBQVcsSUFBSTFnQixPQXpDTixvQkNRYixTQUFTLEdBQWdCK0osRUFBS3pjLEVBQUsvRCxHQVlqQyxPQVhJK0QsS0FBT3ljLEVBQ1QvYixPQUFPNmIsZUFBZUUsRUFBS3pjLEVBQUssQ0FDOUIvRCxNQUFPQSxFQUNQdWdCLFlBQVksRUFDWkcsY0FBYyxFQUNkQyxVQUFVLElBR1pILEVBQUl6YyxHQUFPL0QsRUFHTndnQixDQUNULENBRUEsU0FBUyxLQWVQLE9BZEEsR0FBVy9iLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENER2UsR0FBc0IsR0FBVSxHQUFLbXpELElBQ3JDLEdBQXNCLEdBQVUsR0FBS0EsSUNGcEQsSUFBSSxHQUFhLENBQ2Z2K0IsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUNwQnFrQyxNQUFPLFlBRVgsR0FHRSxHQUFVLFNBQWlCbUMsR0FDN0IsSUFBSW4zQixFQUVKLE9BQWtCLEdBQVhBLEVBQU8sQ0FBQyxFQUF5QixRQUFTLFNBQWVyUCxFQUFVaWlCLEdBQ3hFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCcWtDLE1BQU9waUIsRUFBWSxRQUV2QixHQUFJLEdBQWdCNVMsRUFBTSxTQUFXbTNCLEVBQU0sU0FBVXhtQyxFQUFVaWlCLEdBQzdELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEtBRTNCLEdBQUluM0IsQ0FDTixFQU1JLEdBQVFtVixHQUFZLENBQ3RCdkIsT0FBUSxDQUNOd2pCLGFBTmUsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFVBT2hEQyxZQUxjLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxZQVUvQyxHQUFTLENBQ1gvaUIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUFDK1osSUFBYSxDQUNsQ3NxQixNQUFPLFVBQ1B3QyxhQUFjLFVBQ2R3QixjQUFlLE9BQ2Ysa0NBQW1DLENBQ2pDeEIsYUFBYyxVQUNkLG9CQUFxQixDQUNuQm42QyxTQUFVLFNBQ1ZtNkMsYUFBYyxZQUdsQixvQkFBcUIsQ0FBQzlzQixJQUFhLENBQ2pDeUwsVUFBVyx1QkFFYixxQkFBc0IsQ0FDcEI0akIsUUFBUyx3QkFFVHgrQyxTQUFVLFdBQ1ZpOEMsYUFBYyxNQUNkd0IsY0FBZSxPQUNmbHVCLFFBQVMsUUFFWCxnQ0FBaUMsQ0FDL0JBLFFBQVMsWUFHZixHQWVFZ29DLEdBQWEsQ0FJZngrQixnQkFBZ0IsRUFDaEIwZ0IsTUFBTyxXQU9MLEdBQU0sQ0F6Qkd4Z0IsR0FBYSxDQUN4QlosT0FBUSxLQXdCUyxJQUNmLEdBQVcsSUFBSTVmLE9BcElOLGFDU2IsU0FBUyxHQUFnQitKLEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsS0FlUCxPQWRBLEdBQVcvYixPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDRDZGZSxHQUFzQixHQUFVLEdBQUtvekQsSUFDckMsR0FBc0IsR0FBVSxHQUFLQSxJQzVGcEQsSUFBSSxHQUFhLENBQ2Z4K0IsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUNwQiw2QkFBOEIsQ0FDNUIzUyxnQkFBaUIsaUJBR3ZCLEdBR0UsR0FBVSxTQUFpQm01QyxHQUM3QixJQUFJbjNCLEVBRUosT0FBa0IsR0FBWEEsRUFBTyxDQUFDLEVBQXlCLFNBQVdtM0IsRUFBTyxjQUFlLFNBQVV4bUMsRUFBVWlpQixHQUMzRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyxpQkFFNUMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxjQUFlLFNBQVV4bUMsRUFBVWlpQixHQUM3RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixpQkFBa0IsQ0FDaEIsd0JBQXlCLENBQ3ZCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sbUJBSXRDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sY0FBZSxTQUFVeG1DLEVBQVVpaUIsR0FDN0UsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsaUJBQWtCLENBQ2hCLHdCQUF5QixDQUN2QnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLG1CQUl0QyxHQUFJbjNCLENBQ04sRUFNSSxHQUFRbVYsR0FBWSxDQUN0QnZCLE9BQVEsQ0FDTndqQixhQU5lLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxVQU9oREMsWUFMYyxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsWUFXL0MwYixHQUFpQyxTQUF3Q3BpRCxFQUFVaWlCLEdBQ3JGLElBQUlvZ0MsR0FBeUJwZ0MsRUFBS3FnQyxhQUFlcmdDLEVBQUtzZ0MsbUJBQXFCLEVBQzNFLE9BQU81L0IsR0FBSTNpQixFQUFVLENBQ25CLG9CQUFxQixDQUNuQiw4Q0FBK0MsQ0FDN0NxckMsV0FBWWdYLEVBQXdCLEtBQ3BDL1csY0FBZStXLEVBQXdCLFFBSS9DLEVBRUlHLEdBQXNDLFNBQTZDeGlELEVBQVVpaUIsR0FDL0YsSUFBSXdnQyxHQUE4QnhnQyxFQUFLeWdDLGtCQUFvQnpnQyxFQUFLc2dDLG1CQUFxQixFQUNyRixPQUFPNS9CLEdBQUkzaUIsRUFBVSxDQUNuQix5QkFBMEIsQ0FDeEIsOENBQStDLENBQzdDcXJDLFdBQVlvWCxFQUE2QixLQUN6Q25YLGNBQWVtWCxFQUE2QixRQUlwRCxFQUVJLEdBQVMsQ0FDWDkrQixlQUFnQixTQUF3QjNqQixHQUN0QyxNQUFPLENBQUMyaUIsR0FBSTNpQixFQUFVLENBQUMsRUFBS3NZLE9BQVEsQ0FDbEMxdEIsU0FBVSxXQUVWLGlCQUFrQixDQUFDLEVBQUswdEIsT0FBUSxDQUM5QjZ5QixXQUFZLFNBQ1pqbUIsUUFBUyxFQUVUdDZCLFNBQVUsV0FDVjh2QixPQUFRLEVBQ1IsNkJBQThCLENBQzVCd0ssUUFBUyxFQUNULFNBQVUsQ0FDUi9LLFFBQVMsU0FHYix3QkFBeUIsQ0FFdkJzUyxPQUFRLFFBRVYsd0JBQXlCLENBRXZCeC9CLElBQUssRUFDTHd0QixPQUFRLEtBR1osdUJBQXdCLENBQ3RCLG1CQUFvQixFQUFLeEIsaUJBQ3pCLCtCQUFnQyxDQUM5Qk4sU0FBVSxJQUdkLDJCQUE0QixDQUFDLEVBQUtZLGVBQWdCLEVBQUtJLFlBQ3ZELG9CQUFxQixDQUNuQiwyRUFBNEUsQ0FDMUV1TCxRQUFTLE9BSWpCLEVBQ0F5OUIsZ0JBQWlCLFNBQXlCM2lELEVBQVVpaUIsR0FDbEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsaUJBQWtCLENBQ2hCLDhDQUErQyxDQUM3Q3VwQyxTQUFVdG5CLEVBQUswZ0MsZ0JBQWtCLFNBSXpDLEVBQ0FKLGtCQUFtQixTQUEyQnZpRCxFQUFVaWlCLEdBQ3RELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDhDQUErQyxDQUM3QzNULFdBQVk0MUIsRUFBS3NnQyxrQkFBb0IsUUFFckNILEdBQStCcGlELEVBQVVpaUIsR0FDL0MsRUFDQTJnQyxvQkFBcUIsU0FBNkI1aUQsRUFBVWlpQixHQUMxRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixvQkFBcUIsQ0FDbkIsZ0JBQWlCaWlCLEVBQUsyZ0Msb0JBQXNCLFFBR2xELEVBQ0FDLG1CQUFvQixTQUE0QjdpRCxFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLG9CQUFxQixDQUNuQmtsQixRQUFTLEtBQU9qRCxFQUFLNGdDLG1CQUFxQixRQUdoRCxFQUNBUCxhQUFjLFNBQXNCdGlELEVBQVVpaUIsR0FDNUMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsb0JBQXFCLENBQ25CLDJFQUE0RSxDQUMxRWtsQixRQUFTLEVBQ1Q1NEIsT0FBUTIxQixFQUFLcWdDLGFBQWUsU0FHOUJGLEdBQStCcGlELEVBQVVpaUIsR0FDL0MsRUFDQXlnQyxrQkFBbUIsU0FBMkIxaUQsRUFBVWlpQixHQUN0RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix5QkFBMEIsQ0FDeEIsMkVBQTRFLENBQzFFMVQsT0FBUTIxQixFQUFLeWdDLGtCQUFvQixTQUduQ0YsR0FBb0N4aUQsRUFBVWlpQixHQUNwRCxFQUNBNmdDLG1CQUFvQixTQUE0QjlpRCxFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLG9CQUFxQixDQUNuQiw4Q0FBK0MsQ0FDN0MwckMsWUFBYXpwQixFQUFLNmdDLG1CQUFxQixTQUkvQyxFQUNBQywwQkFBMkIsU0FBbUMvaUQsRUFBVWlpQixHQUN0RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixvQkFBcUIsQ0FDbkIsOENBQStDLENBQzdDMnJDLGFBQWMxcEIsRUFBSzhnQywwQkFBNEIsU0FJdkQsRUFDQUMsd0JBQXlCLFNBQWlDaGpELEVBQVUydkMsR0FDbEUsSUFBSXNULEVBQTBCLEdBQUtqbEIsWUFBYzJSLEVBQU9xVCx3QkFBMEIsR0FBS25sQixzQkFDdkYsT0FBT2xiLEdBQUkzaUIsRUFBVSxDQUNuQix5QkFBMEIsQ0FDeEJrbEIsUUFBUyxLQUFPeXFCLEVBQU9xVCx3QkFBMEIsS0FDakQsOENBQStDLENBQzdDdFgsWUFBYXVYLEVBQTBCLE9BRzNDLGtEQUFtRCxDQUNqRCxpQkFBa0IsQ0FDaEJ2WCxZQUFhaUUsRUFBT3FULHdCQUEwQixNQUVoRCxnQkFBaUIsQ0FDZnJYLGFBQWNnRSxFQUFPcVQsd0JBQTBCLFFBSXZELEVBQ0FFLHlCQUEwQixTQUFrQ2xqRCxFQUFVaWlCLEdBQ3BFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHlCQUEwQixDQUN4QjZtQyxhQUFjNWtCLEVBQUtpaEMseUJBQTJCLFFBR3BELEVBQ0FDLCtCQUFnQyxTQUF3Q25qRCxFQUFVaWlCLEdBQ2hGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHlCQUEwQixDQUN4Qiw4Q0FBK0MsQ0FDN0MyckMsYUFBYzFwQixFQUFLa2hDLCtCQUFpQyxTQUk1RCxHQUVFLEdBQVN0L0IsR0FBYSxDQUN4QlosT0FBUSxLQVFObWdDLEdBQWEsQ0FJZnovQixnQkFBZ0IsRUFDaEJnL0IsZ0JBQWlCLEdBQ2pCTyx5QkFBMEIsRUFDMUJSLGtCQUFtQixHQUNuQlMsK0JBQWdDLEVBQ2hDRSx1QkFBd0IsRUFDeEJMLHdCQUF5QixFQUN6Qkosb0JBQXFCLEdBQUs5a0IseUJBQzFCd2tCLGFBQWMsR0FDZFEsbUJBQW9CLEdBQ3BCQywwQkFBMkIsRUFDM0JGLG1CQUFvQixFQUNwQk4sa0JBQW1CLEdBQ25CZSx1QkFBd0J6Z0MsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtPLDJCQUMvRG1qQix1QkFBd0IxZ0MsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtHLDBCQUMvREosdUJBQXdCL2MsR0FBSyxHQUFLK2Msd0JBQ2xDNGpCLHNCQUF1QjNnQyxHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2lCLDBCQUM3RHlpQixzQkFBdUI1Z0MsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUthLHlCQUM3RGQsc0JBQXVCamQsR0FBSyxHQUFLaWQsd0JBSS9CLEdBQU0sQ0FBQyxHQUFRLElBQ2YsR0FBVyxJQUFJejhCLE9BdFNOLGFDeUJiLFNBQVMsR0FBZ0IrSixFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0QrT2UsR0FBc0IsR0FBVSxHQUFLcTBELElBQ3JDLEdBQXNCLEdBQVUsR0FBS0EsSUM5T3BELElBQUksR0FBYSxDQUNmei9CLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCLFNBQVUsQ0FDUjBwQyxZQUFhLGdCQUdqQixtQkFBb0IsQ0FDbEJyOEMsZ0JBQWlCLGVBQ2pCLFVBQVcsQ0FDVEEsZ0JBQWlCLFlBR3JCLDZCQUE4QixDQUM1Qix1QkFBd0IsQ0FDdEJBLGdCQUFpQixnQkFFbkIsdURBQXdELENBQ3REb1IsV0FBWSxnQkFFZCw4S0FDK0UsQ0FDN0VwUixnQkFBaUIsaUJBR3JCLG1FQUFvRSxDQUNsRSx1QkFBd0IsQ0FDdEJBLGdCQUFpQixlQUVuQixxQkFBc0IsQ0FDcEIwMUIsUUFBUyxHQUVYLG9CQUFxQixDQUNuQiw2QkFBOEIsQ0FDNUIybUIsWUFBYSxtQkFLdkIsR0FHRSxHQUFVLFNBQWlCbEQsR0FDN0IsSUFBSW4zQixFQUVKLE9BQWtCLEdBQVhBLEVBQU8sQ0FBQyxFQUF5QixTQUFXbTNCLEVBQU8sUUFBUyxTQUFVeG1DLEVBQVVpaUIsR0FDckYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNkJBQThCLENBQzVCLFlBQWEsQ0FDWHFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGFBSXRDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sU0FBVSxTQUFVeG1DLEVBQVVpaUIsR0FDeEUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNkJBQThCLENBQzVCLHFCQUFzQixDQUNwQnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGNBSXRDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sWUFBYSxTQUFVeG1DLEVBQVVpaUIsR0FDM0UsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxlQUdsQyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGtCQUFtQixTQUFVeG1DLEVBQVVpaUIsR0FDakYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsK0JBQWdDLENBQzlCdkIsV0FBWXdqQixFQUFLLFNBQVd1a0IsRUFBTyxvQkFFckMsbUVBQW9FLENBQ2xFLDZCQUE4QixDQUM1QmtELFlBQWF6bkIsRUFBSyxTQUFXdWtCLEVBQU8sdUJBSTVDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sUUFBUyxTQUFVeG1DLEVBQVVpaUIsR0FDdkUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsb0JBQXFCLENBQ25CdkIsV0FBWXdqQixFQUFLLFNBQVd1a0IsRUFBTyxVQUVyQyw0Q0FBNkMsQ0FDM0MsbUJBQW9CLENBQ2xCbjVDLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyxhQUloRCxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGNBQWUsU0FBVXhtQyxFQUFVaWlCLEdBQzdFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDJCQUE0QixDQUMxQnZCLFdBQVl3akIsRUFBSyxTQUFXdWtCLEVBQU8sZ0JBRXJDLDRDQUE2QyxDQUMzQywwQkFBMkIsQ0FDekJuNUMsZ0JBQWlCNDBCLEVBQUssU0FBV3VrQixFQUFPLG1CQUloRCxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGlCQUFrQixTQUFVeG1DLEVBQVVpaUIsR0FDaEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsWUFBYSxDQUNYcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8scUJBR3BDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sa0JBQW1CLFNBQVV4bUMsRUFBVWlpQixHQUNqRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixxQkFBc0IsQ0FDcEJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxzQkFHcEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxnQkFBaUIsU0FBVXhtQyxFQUFVaWlCLEdBQy9FLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHFCQUFzQixDQUNwQiwrQkFBZ0MsQ0FDOUJ2QixXQUFZd2pCLEVBQUssU0FBV3VrQixFQUFPLG1CQUd2Qyw0Q0FBNkMsQ0FDM0MsK0NBQWdELENBQzlDa0QsWUFBYXpuQixFQUFLLFNBQVd1a0IsRUFBTyxxQkFJNUMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxrQkFBbUIsU0FBVXhtQyxFQUFVaWlCLEdBQ2pGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QixDQUN0Qix1QkFBd0IsQ0FDdEJ2QixXQUFZd2pCLEVBQUssU0FBV3VrQixFQUFPLHVCQUkzQyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLG9CQUFxQixTQUFVeG1DLEVBQVVpaUIsR0FDbkYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNkJBQThCLENBQzVCLHVCQUF3QixDQUN0QjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyx5QkFJaEQsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTywyQkFBNEIsU0FBVXhtQyxFQUFVaWlCLEdBQzFGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDZCQUE4QixDQUM1Qix1QkFBd0IsQ0FDdEIsVUFBVyxDQUNUK2lCLFFBQVNkLEVBQUssU0FBV3VrQixFQUFPLGlDQUsxQyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLG1CQUFvQixTQUFVeG1DLEVBQVVpaUIsR0FDbEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNkJBQThCLENBQzVCLGlLQUN3RSxDQUN0RTNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyx3QkFJaEQsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTywwQkFBMkIsU0FBVXhtQyxFQUFVaWlCLEdBQ3pGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDZCQUE4QixDQUM1Qiw4S0FDK0UsQ0FDN0UraUIsUUFBU2QsRUFBSyxTQUFXdWtCLEVBQU8sK0JBSXhDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sYUFBYyxTQUFVeG1DLEVBQVVpaUIsR0FDNUUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIseUJBQTBCLENBQ3hCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8saUJBR3BDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sa0JBQW1CLFNBQVV4bUMsRUFBVWlpQixHQUNqRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixtQkFBb0IsQ0FDbEIzUyxnQkFBaUI0MEIsRUFBSyxTQUFXdWtCLEVBQU8sc0JBRzlDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sZUFBZ0IsU0FBVXhtQyxFQUFVaWlCLEdBQzlFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDZCQUE4QixDQUM1Qix1REFBd0QsQ0FDdEQzUyxnQkFBaUI0MEIsRUFBSyxTQUFXdWtCLEVBQU8sb0JBSWhELEdBQUluM0IsQ0FDTixFQU1JLEdBQVFtVixHQUFZLENBQ3RCdkIsT0FBUSxDQUNOd2pCLGFBTmUsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFVBT2hEQyxZQUxjLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxZQVcvQ2dkLEdBQWUsU0FBc0J6aEMsR0FDdkMsSUFBSTBoQyxFQUFZOS9DLEtBQUtnb0IsSUFBSTVKLEVBQUsyaEMsV0FBWSxFQUFJM2hDLEVBQUs0aEMsb0JBQy9DQyxFQUFZSCxFQUFZLEVBQ3hCSSxFQUFjRCxFQUFZLEVBQzlCLE1BQU8sQ0FDTEUsZ0JBQWlCTCxFQUNqQk0sa0JBQW1CTixFQUFZLEVBQUkxaEMsRUFBSzRoQyxtQkFDeENDLFVBQVdBLEVBQ1hDLFlBQWFBLEVBRWpCLEVBRUlHLEdBQWlCLFNBQXdCamlDLEdBQzNDLElBQUk4b0IsRUFBYzlvQixFQUFLNGhDLG1CQUNuQk0sRUFBb0J0Z0QsS0FBS2dvQixJQUFJLEVBQUc1SixFQUFLNGhDLG1CQUFxQjVoQyxFQUFLbWlDLG9CQUNuRSxNQUFPLENBQ0xDLGtCQUFtQnRaLEVBQ25CdVosb0JBQXFCLEVBQUlyaUMsRUFBS3NpQyxxQkFBdUJ0aUMsRUFBSzRoQyxtQkFDMURNLGtCQUFtQkEsRUFFdkIsRUFFSUssR0FBcUQsU0FBNER4a0QsRUFBVWlpQixHQUM3SCxJQUFJd2lDLEVBQWdCZixHQUFhemhDLEdBQzdCK2hDLEVBQWtCUyxFQUFjVCxnQkFDaENDLEVBQW9CUSxFQUFjUixrQkFFbENTLEVBQWtCUixHQUFlamlDLEdBQ2pDb2lDLEVBQW9CSyxFQUFnQkwsa0JBQ3BDQyxFQUFzQkksRUFBZ0JKLG9CQUUxQyxPQUFPM2hDLEdBQUkzaUIsRUFBVSxDQUNuQiw2QkFBOEIsQ0FDNUIrcUMsWUFBYXNaLEVBQW9CLEtBQ2pDM3RCLE1BQU9zdEIsRUFBa0IsS0FDekIxM0QsT0FBUTAzRCxFQUFrQixLQUMxQjcyRCxLQUFNLEVBQ05GLElBQUssR0FFUCxpREFBa0QsQ0FDaEQ4OUMsWUFBYXVaLEVBQXNCLEtBQ25DNXRCLE1BQU91dEIsRUFBb0IsS0FDM0IzM0QsT0FBUTIzRCxFQUFvQixLQUM1QjkyRCxLQUFNNjJELEVBQWtCQyxFQUFvQixLQUM1Q2gzRCxJQUFLKzJELEVBQWtCQyxFQUFvQixNQUU3Qyw4Q0FBK0MsQ0FDN0NsWixZQUFhLElBR25CLEVBRUk0WixHQUFzQixTQUE2QjNrRCxFQUFVaWlCLEdBQy9ELE9BQU9VLEdBQUkzaUIsRUFBVSxDQUNuQm9zQyxXQUFZbnFCLEVBQUszMUIsT0FBUzIxQixFQUFLMmlDLGNBQWdCLEVBQUksT0FFdkQsRUFFSUMsR0FBMEIsU0FBaUM3a0QsRUFBVWlpQixHQUN2RSxPQUFPVSxHQUFJM2lCLEVBQVUsQ0FDbkIsMEJBQTJCLENBQ3pCbWxCLFFBQVNsRCxFQUFLMmlDLGFBQWUzaUMsRUFBSzZpQyxZQUFjLEVBQUksU0FHMUQsRUFFSUMsR0FBOEIsU0FBcUMva0QsRUFBVWlpQixHQUMvRSxJQUNJK2hDLEVBRGlCTixHQUFhemhDLEdBQ0craEMsZ0JBRXJDLE9BQU9yaEMsR0FBSTNpQixFQUFVLENBQ25CLDhCQUErQixDQUM3QjdTLE1BQU84MEIsRUFBSytpQyxpQkFBbUIsRUFBSWhCLEVBQWtCLEVBQUksS0FDekQvMkQsS0FBTWcxQixFQUFLK2lDLGlCQUFtQixFQUFJaEIsRUFBa0IsRUFBSSxPQUc5RCxFQUVJaUIsR0FBZ0MsU0FBdUNqbEQsRUFBVWlpQixHQUNuRixJQUNJK2hDLEVBRGlCTixHQUFhemhDLEdBQ0craEMsZ0JBR2pDRyxFQURtQkQsR0FBZWppQyxHQUNHa2lDLGtCQUVyQ2UsR0FBbUJqakMsRUFBS21pQyxtQkFBcUIsR0FBS0osRUFBa0IsRUFDeEUsT0FBT3JoQyxHQUFJM2lCLEVBQVUsQ0FDbkIsNENBQTZDLENBQzNDLHVCQUF3QixDQUN0QitxQyxZQUFhb1osRUFBb0IsTUFHbkMsdURBQXdELENBQ3REMytCLFVBQVcsZUFBaUIwL0IsRUFBa0IsT0FHaEQsc0RBQXVELENBQ3JEMS9CLFVBQVcsY0FBZ0IwL0IsRUFBa0IsUUFHakQsc0NBQXVDLENBQ3JDLDZCQUE4QixDQUM1Qm5hLFlBQWEsS0FJckIsRUFFSW9hLEdBQXVCLFNBQThCbmxELEVBQVVpaUIsR0FDakUsSUFDSThoQyxFQURpQkwsR0FBYXpoQyxHQUNEOGhDLFlBRWpDLE9BQU9waEMsR0FBSTNpQixFQUFVLENBQ25CLG1CQUFvQixDQUNsQm1sQixPQUFRLEtBQU80K0IsRUFBYyxTQUFXQSxFQUFjOWhDLEVBQUttakMsVUFBWSxFQUFJLEdBQUssT0FHdEYsRUFFSSxHQUFTLENBQ1h6aEMsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUFDLEVBQUtpWixpQkFBa0IsRUFBS04sU0FBUyxHQUFJLENBQzlEd3dCLFdBQVksT0FDWixtQkFBb0IsT0FDcEJnQyxXQUFZLFNBQ1osY0FBZSxFQUFLaHpCLGFBQ3BCLHFCQUFzQixDQUFDLEVBQUtjLGlCQUFrQixFQUFLTixTQUFTLEdBQUksQ0FDOUR3d0IsV0FBWSxPQUNaLG1CQUFvQixPQUNwQnYrQyxTQUFVLFdBQ1Z3K0MsUUFBUyxJQUVYLHVCQUF3QixDQUFDLEVBQUt6dkIsV0FBWUksRUFBd0Isd0JBQXlCLFNBQVUsQ0FDbkd5TCxVQUFXLFdBQ1gyakIsV0FBWSxPQUNaLG1CQUFvQixPQUNwQjk4QyxXQUFZLEVBQ1p3NkMsYUFBYyxNQUNkdUMsUUFBUyxFQUNUMXVCLE9BQVEsRUFDUjl2QixTQUFVLFdBRVYsVUFBVyxDQUNUOEwsUUFBUyxLQUNUOUwsU0FBVSxXQUNWaThDLGFBQWMsT0FHaEIsU0FBVSxDQUNSbndDLFFBQVMsS0FDVDlMLFNBQVUsV0FDVmk4QyxhQUFjLE1BQ2RtRCxZQUFhLFdBR2pCLHFCQUFzQixDQUFDandCLElBQWEsQ0FDbEMsY0FBZSxDQUNiMmMsTUFBTyxVQUNQcHFDLE9BQVEsYUFHWixxQkFBc0IsQ0FDcEJpL0MsU0FBVSxHQUFPbE4sZUFBaUIsS0FDbENpTCxVQUFXLFNBQ1hDLFNBQVUsT0FDVndDLFdBQVksR0FBTzVNLG9CQUVyQiwwQkFBMkIsQ0FBQyxFQUFLN21CLE9BQVEsQ0FDdkM2d0IsV0FBWSxPQUNaLG1CQUFvQixPQUNwQno4QyxTQUFVLFdBR1osbURBQW9ELEVBQUt1c0IsaUJBQ3pELHlCQUEwQixDQUFDLEVBQUtYLE9BQVEsQ0FDdEMxdEIsU0FBVSxXQUNWOEIsU0FBVSxXQUVaLCtCQUFnQyxFQUFLNHJCLE9BQ3JDLHFCQUFzQixDQUFDLEVBQUtjLGdCQUFpQixDQUMzQyt2QixXQUFZLE9BQ1osbUJBQW9CLE9BQ3BCditDLFNBQVUsV0FDVnVDLEtBQU0sRUFDTms3QyxjQUFlLFNBRWpCLG1CQUFvQixDQUFDdHVCLEVBQXdCLFlBQWEsUUFBUyxDQUNqRXlMLFVBQVcseUNBQ1g2L0IsZ0JBQWlCLFNBQ2pCejZELFNBQVUsV0FDVjh2QixPQUFRLEVBQ1JwdUIsT0FBUSxFQUNSYSxLQUFNLEVBRU5GLElBQUssRUFDTG83QyxjQUFlLE9BQ2Ysc0JBQXVCLENBQ3JCejlDLFNBQVUsV0FDVnFDLElBQUssRUFDTEUsS0FBTSxHQUVSLFdBQVksQ0FDVnE0QixVQUFXLGlCQUNYOXVCLFFBQVMsS0FDVG13QyxhQUFjLGlCQUVoQixVQUFXLENBQ1Rud0MsUUFBUyxjQUNUNHlDLFVBQVcsWUFHZix1RUFBd0UsQ0FDdEUsbUJBQW9CLENBQ2xCOWpCLFVBQVcsK0NBR2YsNkJBQThCLENBQzVCLHVCQUF3QixDQUN0Qi9jLE9BQVEsV0FFVixvQkFBcUIsQ0FDbkIscUJBQXNCLENBQ3BCQSxPQUFRLGFBSWQsdUJBQXdCLENBQ3RCLHVCQUF3QixDQUN0QnNpQyxZQUFhLE9BSXJCLEVBQ0E2WSxXQUFZLFNBQW9CNWpELEVBQVVpaUIsR0FDeEMsSUFBSXFqQyxFQUFpQjVCLEdBQWF6aEMsR0FDOUIraEMsRUFBa0JzQixFQUFldEIsZ0JBQ2pDRixFQUFZd0IsRUFBZXhCLFVBQzNCQyxFQUFjdUIsRUFBZXZCLFlBRWpDLE1BQU8sQ0FBQ3BoQyxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCMDJCLE1BQU9zdEIsRUFBa0IsS0FDekIxM0QsT0FBUTAzRCxFQUFrQixNQUU1QixpREFBa0QsQ0FDaEQvWSxXQUFZNlksRUFBWSxNQUUxQixnREFBaUQsQ0FDL0NsWSxZQUFha1ksRUFBWSxNQUUzQixxQkFBc0IsQ0FDcEJwdEIsTUFBTyxlQUFpQixFQUFJcXRCLEVBQWMsTUFDMUM1K0IsT0FBUSxLQUFPNCtCLEVBQWMsUUFFN0JTLEdBQW1EeGtELEVBQVVpaUIsR0FBTzhpQyxHQUE0Qi9rRCxFQUFVaWlCLEdBQU9nakMsR0FBOEJqbEQsRUFBVWlpQixHQUFPa2pDLEdBQXFCbmxELEVBQVVpaUIsR0FDck0sRUFDQW1pQyxtQkFBb0IsU0FBNEJwa0QsRUFBVWlpQixHQUN4RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw0Q0FBNkMsQ0FDM0MsdUJBQXdCLENBQ3RCd2xCLFVBQVcsU0FBV3ZELEVBQUttaUMsbUJBQXFCLFFBR2xEYSxHQUE4QmpsRCxFQUFVaWlCLEdBQzlDLEVBQ0EraUMsaUJBQWtCLFNBQTBCaGxELEVBQVVpaUIsR0FDcEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCLFVBQVcsQ0FDVDAyQixNQUFPelUsRUFBSytpQyxpQkFBbUIsS0FDL0IxNEQsT0FBUTIxQixFQUFLK2lDLGlCQUFtQixTQUdsQ0QsR0FBNEIva0QsRUFBVWlpQixHQUM1QyxFQUNBNGhDLG1CQUFvQixTQUE0QjdqRCxFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQUMsR0FBSXdrRCxHQUFtRHhrRCxFQUFVaWlCLEdBQzFGLEVBQ0FzaUMscUJBQXNCLFNBQThCdmtELEVBQVVpaUIsR0FDNUQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCLHVCQUF3QixDQUN0QndsQixVQUFXLFNBQVd2RCxFQUFLc2lDLHFCQUF1QixRQUdwREMsR0FBbUR4a0QsRUFBVWlpQixHQUNuRSxFQUNBc2pDLHVCQUF3QixTQUFnQ3ZsRCxFQUFVaWlCLEdBQ2hFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVFQUF3RSxDQUN0RSx1QkFBd0IsQ0FDdEJ3bEIsVUFBVyxTQUFXdkQsRUFBS3NqQyx1QkFBeUIsUUFJNUQsRUFDQWo1RCxPQUFRLFNBQWdCMFQsRUFBVWlpQixHQUNoQyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQjFULE9BQVEyMUIsRUFBSzMxQixPQUFTLEtBQ3RCLGNBQWUsQ0FDYkEsT0FBUTIxQixFQUFLMzFCLE9BQVMsTUFFeEIscUJBQXNCLENBQ3BCQSxPQUFRMjFCLEVBQUszMUIsT0FBUyxLQUN0QkQsV0FBWTQxQixFQUFLMzFCLE9BQVMsTUFFNUIscUJBQXNCLENBQ3BCVyxJQUFLZzFCLEVBQUszMUIsT0FBUyxFQUFJLEVBQUksUUFFM0JxNEQsR0FBb0Iza0QsRUFBVWlpQixHQUNwQyxFQUNBMmlDLGFBQWMsU0FBc0I1a0QsRUFBVWlpQixHQUM1QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixxQkFBc0IsQ0FDcEIxVCxPQUFRMjFCLEVBQUsyaUMsYUFBZSxRQUU1QkQsR0FBb0Iza0QsRUFBVWlpQixHQUFPNGlDLEdBQXdCN2tELEVBQVVpaUIsR0FDN0UsRUFDQTJjLG1CQUFvQixTQUE0QjUrQixFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHFCQUFzQitaLEVBQXdCLFlBQWFrSSxFQUFLMmMsb0JBQ2hFLDhCQUErQjdrQixFQUF3QixtQkFBb0JrSSxFQUFLMmMsb0JBQ2hGLDZCQUE4QjdrQixFQUF3QixTQUFVa0ksRUFBSzJjLG9CQUNyRSxxQkFBc0I3a0IsRUFBd0IsVUFBV2tJLEVBQUsyYyxvQkFDOUQsK0JBQWdDN2tCLEVBQXdCLDhCQUErQmtJLEVBQUsyYyxzQkFFaEcsRUFDQTRtQixhQUFjLFNBQXNCeGxELEVBQVVpaUIsR0FDNUMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIscUJBQXNCLENBQ3BCbWxCLE9BQVEsS0FBT2xELEVBQUt1akMsYUFBZSxRQUd6QyxFQUNBQywrQkFBZ0MsU0FBd0N6bEQsRUFBVWlpQixHQUNoRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwyQkFBNEIsQ0FDMUJtbEIsT0FBUSxLQUFPbEQsRUFBS3dqQywrQkFBaUMsUUFHM0QsRUFDQVgsV0FBWSxTQUFvQjlrRCxFQUFVaWlCLEdBQ3hDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGlIQUdxQixDQUNuQjFULE9BQVEyMUIsRUFBSzZpQyxXQUFhLFFBRTFCRCxHQUF3QjdrRCxFQUFVaWlCLEdBQ3hDLEVBQ0F5akMsV0FBWSxTQUFvQjFsRCxFQUFVaWlCLEdBQ3hDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLG9CQUFxQixDQUNuQjAyQixNQUFPelUsRUFBS3lqQyxXQUFhLFFBRy9CLEVBQ0FOLFVBQVcsU0FBbUJwbEQsRUFBVWlpQixHQUN0QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixtQkFBb0IsQ0FDbEIwMkIsTUFBT3pVLEVBQUttakMsVUFBWSxLQUN4QixXQUFZLENBQ1YxdUIsTUFBT3pVLEVBQUttakMsVUFBWSxLQUN4Qjk0RCxPQUFRMjFCLEVBQUttakMsVUFBWSxNQUUzQixVQUFXLENBQ1QxdUIsTUFBT3pVLEVBQUttakMsVUFBWSxLQUN4Qjk0RCxPQUFRMjFCLEVBQUswakMsV0FBYSxLQUMxQnQ1RCxXQUFZNDFCLEVBQUttakMsVUFBWSxTQUcvQkQsR0FBcUJubEQsRUFBVWlpQixHQUNyQyxFQUNBMmpDLGNBQWUsU0FBdUI1bEQsRUFBVWlpQixHQUM5QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwwQkFBMkIsQ0FDekJ1cEMsU0FBVXRuQixFQUFLMmpDLGNBQWdCLFFBR3JDLEdBRUUsR0FBUy9oQyxHQUFhLENBQ3hCWixPQUFRLEtBSU40aUMsR0FBa0IsR0FBT2htQix1QkFDekJpbUIsR0FBaUIsR0FBTy9sQixzQkFDeEJnbUIsR0FBYyxHQUFPeG1CLGNBR3JCeWxCLEdBQW1CbmhELEtBQUtnb0IsSUFBSSxHQURmLElBT2JtNkIsR0FBaUJuaUQsS0FBS2dvQixJQUFJbTVCLEdBRFBaLElBRW5CLEdBQVN2Z0QsS0FBS2dvQixJQUFJLEdBRkN1NEIsSUFHbkJvQixHQUFlM2hELEtBQUtnb0IsSUFBSSxHQUFJbTZCLEdBQWlCLEVBQUlwQyxHQUdqRCxHQUFPLENBSVRqZ0MsZ0JBQWdCLEVBQ2hCNGhDLHVCQVoyQixFQUFJLEVBYS9CbkIsbUJBZnVCLElBZ0J2QnhsQixtQkFBb0IsR0FBT0EsbUJBQzNCa21CLFdBQVksRUFDWlAscUJBakJ5QixHQWtCekJqNEQsT0FBUSxHQUNSbTVELCtCQWJtQ0QsR0FBZSxFQWNsREksY0FBZSxHQUNmRCxXQUFZLEdBQ1pQLFVBQVcsR0FDWEksYUFBY0EsR0FDZEUsV0FBWSxFQUNaN0IsbUJBM0J1QixFQTRCdkJELFdBOUJlLEdBK0Jmb0IsaUJBQWtCQSxHQUNsQkosYUFBYyxHQUNkcUIseUJBQTBCcGpDLEdBQUtnakMsR0FBaUIsS0FDaERLLDJCQUE0QnJqQyxHQUFLZ2pDLEdBQWlCLEtBQ2xETSx3QkFBeUIsZUFHekJDLHNCQUF1QnZqQyxHQUFLZ2pDLEdBQWlCLEtBQzdDUSw0QkFBNkJ4akMsR0FBS2dqQyxJQUNsQ1Msb0NBQXFDLElBQ3JDQyxxQkFBc0IxakMsR0FBS2tqQyxJQUMzQlMsbUNBQW9DLElBQ3BDQywyQkFBNEI1akMsR0FBS2dqQyxHQUFpQixLQUNsRGEsaUJBQWtCN2pDLEdBQUtnakMsR0FBaUIsR0FDeENjLHVCQUF3QjlqQyxHQUFLZ2pDLEdBQWlCLEdBQzlDclksaUJBQWtCM3FCLEdBQUssR0FBT2dkLHVCQUF3QixHQUFPSyw0QkFDN0QwbUIsMEJBQTJCL2pDLEdBQUssR0FBT2dkLHVCQUF3QixHQUFPTywyQkFDdEV5VCxrQkFBbUJoeEIsR0FBSyxHQUFPZ2QsdUJBQXdCLEdBQU9LLDRCQUM5RDJtQiwyQkFBNEJoa0MsR0FBSyxHQUFPZ2QsdUJBQXdCLEdBQU9PLDJCQUN2RTBtQixzQkFBdUIsT0FDdkJDLDJCQUE0QixlQUM1QkMsd0JBQXlCbmtDLEdBQUtpakMsR0FBZ0IsSUFDOUNtQiwwQkFBMkJwa0MsR0FBS2lqQyxHQUFnQixJQUNoRG9CLHVCQUF3QixlQUd4QkMscUJBQXNCdGtDLEdBQUtpakMsR0FBZ0IsSUFDM0NzQiwyQkFBNEJ2a0MsR0FBS2lqQyxJQUNqQ3VCLG1DQUFvQyxJQUNwQ0Msb0JBQXFCemtDLEdBQUtrakMsSUFDMUJ3QixrQ0FBbUMsSUFDbkNDLDBCQUEyQjNrQyxHQUFLaWpDLEdBQWdCLElBQ2hEMkIsZ0JBQWlCNWtDLEdBQUtpakMsR0FBZ0IsR0FDdEM0QixzQkFBdUI3a0MsR0FBS2lqQyxHQUFnQixHQUM1QzlYLGdCQUFpQm5yQixHQUFLLEdBQU9rZCxzQkFBdUIsR0FBT2UsMkJBQzNENm1CLHlCQUEwQjlrQyxHQUFLLEdBQU9rZCxzQkFBdUIsR0FBT2lCLDBCQUNwRXFULGlCQUFrQnh4QixHQUFLLEdBQU9rZCxzQkFBdUIsR0FBT2UsMkJBQzVEOG1CLDBCQUEyQi9rQyxHQUFLLEdBQU9rZCxzQkFBdUIsR0FBT2lCLDBCQUNyRTZtQixxQkFBc0IsT0FDdEJDLDBCQUEyQixnQkFJekIsR0FBTSxDQUFDLEdBQVEsSUFDZixHQUFXLElBQUl6a0QsT0F6dEJOLGFDQWIsU0FBUyxHQUFnQitKLEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsR0FBUTdTLEVBQVFrVCxHQUN2QixJQUFJL0gsRUFBT3JVLE9BQU9xVSxLQUFLbkwsR0FFdkIsR0FBSWxKLE9BQU9xYyxzQkFBdUIsQ0FDaEMsSUFBSUMsRUFBVXRjLE9BQU9xYyxzQkFBc0JuVCxHQUN2Q2tULElBQWdCRSxFQUFVQSxFQUFRbkosT0FBTyxTQUFVb0osR0FDckQsT0FBT3ZjLE9BQU8yWCx5QkFBeUJ6TyxFQUFRcVQsR0FBS1QsVUFDdEQsSUFDQXpILEVBQUs5USxLQUFLOUYsTUFBTTRXLEVBQU1pSSxFQUN4QixDQUVBLE9BQU9qSSxDQUNULENEK3JCZSxHQUFzQixHQUFVLEdBQUssSUFDckMsR0FBc0IsR0FBVSxHQUFLLElDMXFCcEQsSUFvRHFDcWlELEdBcENqQyxHQXBDSixTQUF3Qnp4RCxHQUN0QixJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUF5QixNQUFoQjdILFVBQVVXLEdBQWFYLFVBQVVXLEdBQUssQ0FBQyxFQUVoREEsRUFBSSxFQUNOLEdBQVFrSCxHQUFRLEdBQU16SyxRQUFRLFNBQVV3RSxHQUN0QyxHQUFnQjJGLEVBQVEzRixFQUFLaUcsRUFBT2pHLEdBQ3RDLEdBQ1NVLE9BQU95YywwQkFDaEJ6YyxPQUFPMGMsaUJBQWlCelgsRUFBUWpGLE9BQU95YywwQkFBMEJsWCxJQUVqRSxHQUFRQSxHQUFRekssUUFBUSxTQUFVd0UsR0FDaENVLE9BQU82YixlQUFlNVcsRUFBUTNGLEVBQUtVLE9BQU8yWCx5QkFBeUJwUyxFQUFRakcsR0FDN0UsRUFFSixDQUVBLE9BQU8yRixDQUNULENBa0JjLENBQWUsQ0FBQyxFQWhCSixDQUN4QjhRLFVBQVcsa0JBRVg0b0IsT0FBUSwwQkFDUnQ1QixRQUFTLDJCQUNUcWhDLE9BQVEsMEJBQ1IvbkIsWUFBYSwrQkFDYnhFLE1BQU8seUJBRVB3OEMsYUFBYyw2QkFDZEMsV0FBWSw4QkFDWkMsZUFBZ0IscUNBQ2hCQyxTQUFVLDRCQUNWL3ZCLFFBQVMsNEJBRzJDLENBQ3BEaHhCLFVBQVcsOEJBRVgyd0IsT0FBUSxzQkFDUi9uQixZQUFhLDJCQUViL1MsS0FBTSxzQkFJSixHQUFRdW5CLEdBQVksQ0FDdEJFLFdBQVksS0FHVixHQUFTLENBQ1hmLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FBQyxFQUFLOFksbUJBQW9CLENBQzlDbHVCLFNBQVUsUUFDVnFDLElBQUssT0FDTHV0QixNQUFPLEVBQ1BDLE9BQVEsRUFDUnR0QixLQUFNLEVBQ051dEIsT0FBUSxHQUFLd25CLGVBQ2JtRyxjQUFlLE9BQ2YrQyxlQUFnQixhQUVoQjFVLE1BQU8sVUFDSixHQUFnQixDQUFDLEVBQUcsK0JBQStCcnpCLE9BQU9yRCxHQUFXLENBQ3hFcFYsU0FBVSxhQUVkLEdBRUUsR0FBZWk1QixHQUFhLENBQzlCWixPQUFRLEtBU05tbEMsSUFOaUNMLEdBTU8sc0JBQXNCMWtELE9BQU8sR0FBS28rQixrQ0FBbUMsT0FMeEcsU0FBVXpoQyxFQUFVOU0sR0FDekIsT0FBTyxHQUFnQixDQUFDLEVBQUc2MEQsR0FBZSxHQUFnQixDQUFDLEVBQUcvbkQsRUFBVTlNLEdBQzFFLEdBSUUsR0FBVyxDQUNieXdCLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FDcEIwMkIsTUFBTyxPQUNQM1QsUUFBUyxFQUNUNUksUUFBUyxPQUNULDZCQUE4QixDQUM1QnVjLE1BQU8sT0FDUHZSLE9BQVEsU0FDUmlyQix1QkFBd0IsRUFDeEJDLHdCQUF5QixLQUV6QitYLEdBQTJCcG9ELEVBQVUsQ0FDdkMsK0JBQWdDLENBQzlCLDJCQUE0QixDQUMxQjJyQyxhQUFjLFdBSXRCLEVBQ0FILFVBQVcsU0FBbUJ4ckMsRUFBVWlpQixHQUN0QyxNQUFPLENBQUNtbUMsR0FBMkJwb0QsRUFBVSxDQUMzQ3VyQyxTQUFVdHBCLEVBQUt1cEIsVUFBWSxPQUUvQixFQUNBeUosVUFBVyxTQUFtQmoxQyxFQUFVaWlCLEdBQ3RDLE1BQU8sQ0FBQ21tQyxHQUEyQnBvRCxFQUFVLENBQzNDbXdDLFNBQVVsdUIsRUFBS2d6QixVQUFZLE9BRS9CLEVBQ0FySyxjQUFlLFNBQXVCNXFDLEVBQVVpaUIsR0FDOUMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNkJBQThCLENBQzVCNHZDLG9CQUFxQjN0QixFQUFLMm9CLGNBQWdCLEtBQzFDaUYscUJBQXNCNXRCLEVBQUsyb0IsY0FBZ0IsS0FDM0N3Rix1QkFBd0IsRUFDeEJDLHdCQUF5QixLQUcvQixHQUVFLEdBQVN4c0IsR0FBYSxDQUN4QlosT0FBUSxHQUNSQyxhQUFjMCtCLEtBUVp5RyxHQUFlLENBSWpCMWtDLGdCQUFnQixFQUNoQm9qQixtQkFBb0IsR0FDcEJELG1CQUFvQixHQUNwQjhELGNBQWUsRUFDZnFLLFVBQVcsSUFDWDhNLFdBQVksRUFDWnZXLFVBQVcsSUFDWDVMLHVCQUF3Qi9jLEdBQUssR0FBSytjLHdCQUNsQ0Usc0JBQXVCamQsR0FBSyxHQUFLaWQsd0JBSS9CLEdBQU0sQ0FBQyxHQUFRLElBQ2YsR0FBVyxJQUFJejhCLE9BQU8sR0FBUStELFVBQVV0YSxRQUFRLEtBQU0sTUFDdEQsR0FBWSxDQUFDLElBQ2IsR0FBaUIsSUFBSXVXLE9BQU8sR0FBUTAwQixPQUFPanJDLFFBQVEsS0FBTSxNQ2pLN0QsU0FBUyxLQWVQLE9BZEEsR0FBV3VFLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENBRUEsSUFBSSxHQUFhLENBQ2Y0MEIsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUNwQnFrQyxNQUFPLFVBQ1AsT0FBUSxDQUNOQSxNQUFPLFVBQ1AsK0JBQWdDLENBQzlCLHFCQUFzQixDQUNwQmlrQixLQUFNLG9CQUtoQixHQUdFLEdBQVUsU0FBaUI5aEIsR0FDN0IsT0FsRGlDNTVDLEVBa0RXLFNBQVVvVCxFQUFVaWlCLEdBQzlELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLE9BQVEsQ0FDTiwrQkFBZ0MsQ0FDOUIscUJBQXNCLENBQ3BCc29ELEtBQU1ybUMsRUFBSyxTQUFXdWtCLFFBS2hDLEdBNUQ0QjcxQyxFQWtERCxTQUFXNjFDLEtBbERmcDVCLEVBa0RBLENBQUMsR0FoRHRCL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsRUFaVCxJQUF5QkEsRUFBS3pjLEVBQUsvRCxDQTZEbkMsRUFNSSxHQUFRNDNCLEdBQVksQ0FDdEJ2QixPQUFRLENBQ053akIsYUFOZSxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsVUFPaERDLFlBTGMsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFlBVS9DLEdBQVMsQ0FDWC9pQixlQUFnQixTQUF3QjNqQixHQUN0QyxNQUFPLENBQUMyaUIsR0FBSTNpQixFQUFVLENBQ3BCM1QsV0FBWSxFQUNaLGNBQWUsQ0FDYnFxQyxNQUFPLFVBQ1BwcUMsT0FBUSxhQUdkLEdBZUVpOEQsR0FBVSxDQUlaNWtDLGdCQUFnQixFQUNoQiswQixZQUFhLGVBQ2JDLFdBQVksZ0JBSVYsR0FBTSxDQXZCRzkwQixHQUFhLENBQ3hCWixPQUFRLEtBc0JTLElBQ2YsR0FBVyxJQUFJNWYsT0FqSE4sVUNVYixTQUFTLEdBQWdCK0osRUFBS3pjLEVBQUsvRCxHQVlqQyxPQVhJK0QsS0FBT3ljLEVBQ1QvYixPQUFPNmIsZUFBZUUsRUFBS3pjLEVBQUssQ0FDOUIvRCxNQUFPQSxFQUNQdWdCLFlBQVksRUFDWkcsY0FBYyxFQUNkQyxVQUFVLElBR1pILEVBQUl6YyxHQUFPL0QsRUFHTndnQixDQUNULENBRUEsU0FBUyxLQWVQLE9BZEEsR0FBVy9iLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENEeUVlLEdBQXNCLEdBQVUsR0FBS3c1RCxJQUNyQyxHQUFzQixHQUFVLEdBQUtBLElDeEVwRCxJQUFJLEdBQWEsQ0FDZjVrQyxlQUFnQixTQUF3QjNqQixHQUN0QyxNQUFPLENBQUMyaUIsR0FBSTNpQixFQUFVLENBQUMsR0FDekIsR0FHRSxHQUFVLFNBQWlCd21DLEdBQzdCLElBQUluM0IsRUFFSixPQUFrQixHQUFYQSxFQUFPLENBQUMsRUFBeUIsU0FBV20zQixFQUFPLFNBQVUsU0FBVXhtQyxFQUFVaWlCLEdBQ3RGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHNCQUF1QixDQUNyQnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGFBR3BDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sYUFBYyxTQUFVeG1DLEVBQVVpaUIsR0FDNUUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsbUJBQW9CLENBQ2xCLDZCQUE4QixDQUM1QjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyxrQkFJaEQsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxxQkFBc0IsU0FBVXhtQyxFQUFVaWlCLEdBQ3BGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLG1CQUFvQixDQUNsQiw2QkFBOEIsQ0FDNUIraUIsUUFBU2QsRUFBSyxTQUFXdWtCLEVBQU8sMEJBSXhDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sYUFBYyxTQUFVeG1DLEVBQVVpaUIsR0FDNUUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsbUJBQW9CLENBQ2xCLDRCQUE2QixDQUMzQjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyxrQkFJaEQsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxZQUFhLFNBQVV4bUMsRUFBVWlpQixHQUMzRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixtQkFBb0IsQ0FDbEIsWUFBYSxDQUNYcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8saUJBSXRDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sYUFBYyxTQUFVeG1DLEVBQVVpaUIsR0FDNUUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsbUJBQW9CLENBQ2xCLHNCQUF1QixDQUNyQnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGtCQUl0QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLFlBQWEsU0FBVXhtQyxFQUFVaWlCLEdBQzNFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGtCQUFtQixDQUNqQiw2QkFBOEIsQ0FDNUIzUyxnQkFBaUI0MEIsRUFBSyxTQUFXdWtCLEVBQU8saUJBSWhELEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sb0JBQXFCLFNBQVV4bUMsRUFBVWlpQixHQUNuRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixrQkFBbUIsQ0FDakIsNkJBQThCLENBQzVCK2lCLFFBQVNkLEVBQUssU0FBV3VrQixFQUFPLHlCQUl4QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLFlBQWEsU0FBVXhtQyxFQUFVaWlCLEdBQzNFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGtCQUFtQixDQUNqQiw0QkFBNkIsQ0FDM0IzUyxnQkFBaUI0MEIsRUFBSyxTQUFXdWtCLEVBQU8saUJBSWhELEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sV0FBWSxTQUFVeG1DLEVBQVVpaUIsR0FDMUUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsa0JBQW1CLENBQ2pCLFlBQWEsQ0FDWHFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGdCQUl0QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLFlBQWEsU0FBVXhtQyxFQUFVaWlCLEdBQzNFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGtCQUFtQixDQUNqQixzQkFBdUIsQ0FDckJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxpQkFJdEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxZQUFhLFNBQVV4bUMsRUFBVWlpQixHQUMzRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwrRUFBZ0YsQ0FDOUUsc0JBQXVCLENBQ3JCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8saUJBSXRDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sa0JBQW1CLFNBQVV4bUMsRUFBVWlpQixHQUNqRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwrRUFBZ0YsQ0FDOUUsNkJBQThCLENBQzVCM1MsZ0JBQWlCNDBCLEVBQUssU0FBV3VrQixFQUFPLHVCQUloRCxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLDBCQUEyQixTQUFVeG1DLEVBQVVpaUIsR0FDekYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsK0VBQWdGLENBQzlFLDZCQUE4QixDQUM1QitpQixRQUFTZCxFQUFLLFNBQVd1a0IsRUFBTywrQkFJeEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxrQkFBbUIsU0FBVXhtQyxFQUFVaWlCLEdBQ2pGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLCtFQUFnRixDQUM5RSxrREFBbUQsQ0FDakRxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyx1QkFJdEMsR0FBSW4zQixDQUNOLEVBOEJJLEdBQVFtVixHQUFZLENBQ3RCdkIsT0FBUSxDQUNOd2pCLGFBUmUsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFVBU2hEQyxZQVBjLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxTQVEvQ2tELGtCQS9CSyxDQWtCUCxFQWNFQyxpQkFoQ0ssQ0FrQlAsS0FrQkUsR0FBYSxTQUFvQjVuQixFQUFNNTNCLEdBQ3pDLElBQUk2ckIsRUFBV25uQixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUtrekIsRUFBSzJjLG1CQUN4RixPQUFPN2tCLEVBQXdCMXZCLEVBQVk2ckIsRUFBVSxXQUN2RCxFQUVJc3lDLEdBQWMsU0FBcUI3WSxFQUFRMytCLEdBQzdDLElBQUl5M0MsRUFBU3ozQyxFQUFPLEdBQUtxdEIsZUFDckJzbEIsRUFBMkQsRUFBL0M5L0MsS0FBS0MsTUFBTSxHQUFNNnJDLEVBQU9pVSxXQUFhNkUsR0FFakRDLEVBQXFFLEVBQWpEN2tELEtBQUtDLE1BQU0sR0FBTTZyQyxFQUFPaVYsYUFBZTZELEdBRTNERSxFQUFvRSxFQUFqRDlrRCxLQUFLQyxNQUFNLEdBQU02ckMsRUFBT2laLGFBQWVILEdBQzFESSxFQUFpRSxFQUEvQ2hsRCxLQUFLQyxNQUFNLEdBQU02ckMsRUFBT2lVLFdBQWE2RSxHQUN2REssR0FBWW5aLEVBQU9tRCxhQUFlMlYsRUFBU0MsR0FBcUIsRUFDaEVLLEVBQWVwWixFQUFPcVosb0JBQ3RCQyxHQUFlajRDLEVBQU82M0MsR0FBbUIsRUFFekNLLElBRGlCbDRDLEVBQU8sRUFBSSszQyxHQUNRLEVBQUtwRixFQUFZLEVBS3pELE1BQU8sQ0FDTDhFLE9BQVFBLEVBQ1JJLGdCQUFpQkEsRUFDakJILGtCQUFtQkEsRUFDbkJDLGlCQUFrQkEsRUFDbEIzM0MsS0FBTUEsRUFDTmk0QyxZQUFhQSxFQUNiRSxlQVhtQkQsRUFBaUJQLEVBQW1CaEYsRUFZdkR1RixlQUFnQkEsRUFDaEJFLGFBWmlCRixFQUFpQkQsRUFhbENGLGFBQWNBLEVBQ2RELFNBQVVBLEVBQ1ZPLGtCQWRzQixHQWdCMUIsRUFFSUMsR0FBYSxTQUFvQnJuQyxFQUFNNVMsR0FDekMsSUFBSXc1QyxFQUFrQng1QyxFQUFLdzVDLGdCQUN2QkgsRUFBb0JyNUMsRUFBS3E1QyxrQkFDekJDLEVBQW1CdDVDLEVBQUtzNUMsaUJBQ3hCMzNDLEVBQU8zQixFQUFLMkIsS0FDWmk0QyxFQUFjNTVDLEVBQUs0NUMsWUFDbkJHLEVBQWUvNUMsRUFBSys1QyxhQUNwQkwsRUFBZTE1QyxFQUFLMDVDLGFBQ3BCRCxFQUFXejVDLEVBQUt5NUMsU0FFcEIsTUFBTyxDQUNMLDJCQUE0QixDQUMxQng4RCxPQUFRMGtCLEVBQU8sS0FDZnU2QixTQUFVb2QsRUFBbUIsTUFFL0IsNkJBQThCLENBQzVCcjhELE9BQVFvOEQsRUFBb0IsS0FDNUJoeUIsTUFBT2l5QixFQUFtQixFQVJOdDVDLEVBQUtnNkMsa0JBUXlCLEtBQ2xEcDhELElBQUs2N0QsRUFBVyxLQUNoQmppQixhQUFjNmhCLEVBQW9CLE1BRXBDLDZCQUE4QixDQUM1Qno3RCxJQUFLbThELEVBQWUsTUFFdEIsNEJBQTZCLENBQzNCMXlCLE1BQU9teUIsRUFBa0IsS0FDekJ2OEQsT0FBUXU4RCxFQUFrQixLQUMxQjFqQyxPQUFROGpDLEVBQWMsTUFFeEIsdUJBQXdCLENBQ3RCL2pDLFFBQVM2akMsRUFBZSxNQUc5QixFQUVJUSxHQUFnQixTQUF1QnRuQyxFQUFNeFEsRUFBT3M0QixHQUN0RCxJQUFJeWYsRUFBbUJDLEVBQW1CQyxFQUFvQkMsRUFFMURsQixFQUFTaDNDLEVBQU1nM0MsT0FDZkUsRUFBbUJsM0MsRUFBTWszQyxpQkFDekJRLEVBQWlCMTNDLEVBQU0wM0MsZUFDdkJELEVBQWlCejNDLEVBQU15M0MsZUFDdkJHLEVBQW9CNTNDLEVBQU00M0Msa0JBQzlCLE1BQU8sQ0FDTCx1QkFBd0JHLEVBQW9CLENBQUMsRUFBRyxHQUFnQkEsRUFBbUJ6ZixFQUFRLGVBQWlCLGNBQWU5bkIsRUFBS2lELFFBQVV1akMsRUFBUyxFQUFJRSxFQUFtQixNQUFPLEdBQWdCYSxFQUFtQnpmLEVBQVEsY0FBZ0IsZUFBZ0IsR0FBSXlmLEdBQ2hRLDhCQUErQkMsRUFBb0IsQ0FBQyxFQUFHLEdBQWdCQSxFQUFtQjFmLEVBQVEsUUFBVSxPQUFRc2YsRUFBb0IsTUFBTyxHQUFnQkksRUFBbUIxZixFQUFRLE9BQVMsUUFBUyxRQUFTMGYsR0FDck4sOEJBQStCQyxFQUFxQixDQUFDLEVBQUcsR0FBZ0JBLEVBQW9CM2YsRUFBUSxRQUFVLE9BQVFtZixFQUFpQixNQUFPLEdBQWdCUSxFQUFvQjNmLEVBQVEsT0FBUyxRQUFTLFFBQVMyZixHQUNyTixrQkFBbUIsQ0FDakIsOEJBQStCQyxFQUFxQixDQUFDLEVBQUcsR0FBZ0JBLEVBQW9CNWYsRUFBUSxRQUFVLE9BQVFvZixFQUFpQixNQUFPLEdBQWdCUSxFQUFvQjVmLEVBQVEsT0FBUyxRQUFTLFFBQVM0ZixJQUczTixFQUVJLEdBQVksU0FBbUI1ZixHQUNqQyxPQUFPLFdBQ0wsSUFBSTZmLEVBRUosTUFBTyxDQUNMLDhCQUErQkEsRUFBcUIsQ0FBQyxFQUFHLEdBQWdCQSxFQUFvQjdmLEVBQVEsUUFBVSxPQUFRLEdBQUksR0FBZ0I2ZixFQUFvQjdmLEVBQVEsT0FBUyxRQUFTLFFBQVM2ZixHQUVyTSxDQUNGLEVBRUksR0FBWSxJQUFVLEdBQ3RCLEdBQWEsSUFBVSxHQXNCdkIsR0FBUyxDQUNYam1DLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FBQyxLQUFhLENBQ2xDLDZCQUE4QixDQUFDLENBQzdCcFYsU0FBVSxhQUVaLDZCQUE4QixDQUM1QkEsU0FBVSxXQUNWOHZCLE9BQVEsRUFFUjJwQixNQUFPLFVBQ1AsU0FBVSxDQUNSK0UsUUFBUyxJQUdiLDRCQUE2QixDQUMzQngrQyxTQUFVLFdBQ1ZpOEMsYUFBYyxPQUVoQix1Q0FBd0MsQ0FDdEM3d0IsV0FBWSxPQUNaLHFDQUFzQyxDQUFDK0QsSUFBYSxDQUNsRDJjLE1BQU8sT0FDUHBxQyxPQUFRLGFBR1QsR0FBZ0IsQ0FBQyxFQUFHLDJCQUEyQitXLE9BQU9yRCxHQUFXLENBQ3BFLFNBQVUsQ0FDUnBWLFNBQVUsV0FDVjh2QixPQUFRLEVBQ1JnYyxNQUFPLE9BQ1BwcUMsT0FBUSxPQUNSYSxLQUFNLEVBQ05GLElBQUssRUFDTHV0QixNQUFPLEVBQ1BDLE9BQVEsRUFDUk4sUUFBUyxRQUNUNEksUUFBUyxFQUNUdGEsT0FBUSxXQUVWLFNBQVUsQ0FDUkEsT0FBUSxVQUdkLEVBQ0FtMkIsbUJBQW9CLFNBQTRCNStCLEVBQVVpaUIsR0FDeEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNEVBQTZFLEdBQVdpaUIsRUFBTSxTQUVsRyxFQUNBNG5DLFdBdEVlLFNBQW9CN3BELEVBQVUydkMsR0FDN0MsSUFBSW1hLEVBQVcsQ0FDYjc0QyxNQUFPdTNDLEdBQVk3WSxFQUFRLEdBQUt2UixzQkFDaENsdEIsUUFBU3MzQyxHQUFZN1ksRUFBUSxHQUFLdFIsZ0JBQ2xDbHRCLE9BQVFxM0MsR0FBWTdZLEVBQVEsR0FBS3JSLHVCQUNqQ2x0QixNQUFPbzNDLEdBQVk3WSxFQUFRLEdBQUtwUix1QkFFbEMsTUFBTyxDQUFDNWIsR0FBSTNpQixFQUFVLENBQ3BCLHFCQUFzQixDQUFDc3BELEdBQVczWixFQUFRbWEsRUFBUzc0QyxPQUFRczRDLEdBQWM1WixFQUFRbWEsRUFBUzc0QyxPQUFPLElBQ2pHLHVCQUF3QixDQUFDcTRDLEdBQVczWixFQUFRbWEsRUFBUzU0QyxTQUFVcTRDLEdBQWM1WixFQUFRbWEsRUFBUzU0QyxTQUFTLElBQ3ZHLHNCQUF1QixDQUFDbzRDLEdBQVczWixFQUFRbWEsRUFBUzM0QyxRQUFTbzRDLEdBQWM1WixFQUFRbWEsRUFBUzM0QyxRQUFRLElBQ3BHLHFCQUFzQixDQUFDbTRDLEdBQVczWixFQUFRbWEsRUFBUzE0QyxPQUFRbTRDLEdBQWM1WixFQUFRbWEsRUFBUzE0QyxPQUFPLE1BQy9GLEdBQWdCLENBQUMsRUFBRyxjQUFjL04sT0FBT3JELEVBQVUsY0FBY3FELE9BQU9yRCxHQUFXLENBQUMsS0FBYyxDQUNwRyxxQkFBc0IsQ0FBQ3VwRCxHQUFjNVosRUFBUW1hLEVBQVM3NEMsT0FBTyxJQUM3RCx1QkFBd0IsQ0FBQ3M0QyxHQUFjNVosRUFBUW1hLEVBQVM1NEMsU0FBUyxJQUNqRSxzQkFBdUIsQ0FBQ3E0QyxHQUFjNVosRUFBUW1hLEVBQVMzNEMsUUFBUSxJQUMvRCxxQkFBc0IsQ0FBQ280QyxHQUFjNVosRUFBUW1hLEVBQVMxNEMsT0FBTyxPQUVqRSxHQTZESSxHQUFTeVMsR0FBYSxDQUN4QlosT0FBUSxHQUNSYyxZQUFhLEdBQ2JYLFNBVHNCLFNBQTJCbkIsR0FDakQsT0FBT0EsRUFBSzJoQyxZQUFjM2hDLEVBQUsyaUMsY0FBZ0IzaUMsRUFBSzJtQyxjQUFnQjNtQyxFQUFLNndCLGNBQWdCN3dCLEVBQUsrbUMsb0JBQXNCLEdBQVMsQ0FBQyxFQUFHL21DLEVBQU0sQ0FDckk0bkMsWUFBWSxJQUNUNW5DLENBQ1AsSUFhSThuQyxHQUFhLENBSWZwbUMsZ0JBQWdCLEVBQ2hCaWIsbUJBQW9CLEdBQUtBLG1CQUN6Qm9yQixrQkFBbUIsR0FBS25zQixzQkFBd0IsR0FBS1EsZ0JBQWtCLEVBRXZFMnFCLG9CQUFxQixHQUFPOWpDLFFBQzVCQSxRQUFTLEdBQUt1WSxvQkFDZG1tQixXQUFZLEdBQ1pnQixhQUFjLEdBQ2RnRSxhQUFjLEdBQ2Q5VixhQUFjLEdBQU9BLGFBQ3JCeVQscUJBQXNCMWpDLEdBQUssR0FBSzBjLGVBQ2hDNm1CLHNCQUF1QixVQUN2QjZELDJCQUE0QixPQUM1QkMsb0JBQXFCcm5DLEdBQUssR0FBSzBjLGNBQWUsR0FBS2dCLCtCQUNuRDRwQixxQkFBc0IsR0FBT2hkLDRCQUM3QmlkLHFCQUFzQnZuQyxHQUFLLEdBQUs2YyxxQkFDaEMycUIsNkJBQThCLElBQzlCQyxzQkFBdUJ6bkMsR0FBSyxHQUFLZ2QsdUJBQXdCLEdBQUtJLDBCQUM5RHNxQiw4QkFBK0IsSUFDL0JDLDJCQUE0QjNuQyxHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS2EsaUNBQ25FK3BCLG1DQUFvQyxFQUtwQ25ELG9CQUFxQnprQyxHQUFLLEdBQUswYyxlQUMvQjRuQixxQkFBc0IsVUFDdEJ1RCwwQkFBMkIsT0FDM0JDLG1CQUFvQjluQyxHQUFLLEdBQUswYyxjQUFlLEdBQUs0Qiw4QkFDbER5cEIsb0JBQXFCLEdBQU9qZCwyQkFDNUJrZCxvQkFBcUJob0MsR0FBSyxHQUFLNmMsb0JBQXFCLEdBQUtxQiwwQkFFekQrcEIsNEJBQTZCLEVBQzdCQyxxQkFBc0IsVUFDdEJDLDZCQUE4QixJQUM5QkMsMEJBQTJCLFVBQzNCQyxrQ0FBbUMsSUFRakMsR0FBTSxDQUFDLEdBQVEsSUFDZixHQUFXLElBQUk3bkQsT0FsY04scUJDMEJULElEeWFXLEdBQXNCLEdBQVUsR0FBSzBtRCxJQUNyQyxHQUFzQixHQUFVLEdBQUtBLElDemF2QyxXQXdCYixTQUFTLEdBQWdCMzhDLEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsS0FlUCxPQWRBLEdBQVcvYixPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDQUVBLElBQUksR0FBYSxDQUNmNDBCLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCLHVCQUF3QixDQUN0QnZCLFdBQVksa0JBSXBCLEdBR0UsR0FBVSxTQUFpQituQyxHQUM3QixJQUFJbjNCLEVBRUosT0FBa0IsR0FBWEEsRUFBTyxDQUFDLEVBQXlCLFNBQVdtM0IsRUFBTyxZQUFhLFNBQVV4bUMsRUFBVWlpQixHQUN6RixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix1QkFBd0IsQ0FDdEIsdUJBQXdCLENBQ3RCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8saUJBSXRDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sdUJBQXdCLFNBQVV4bUMsRUFBVWlpQixHQUN0RixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix1QkFBd0IsQ0FDdEIsdUJBQXdCLENBQ3RCdkIsV0FBWXdqQixFQUFLLFNBQVd1a0IsRUFBTyw0QkFJM0MsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxRQUFTLFNBQVV4bUMsRUFBVWlpQixHQUN2RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixzQ0FBdUMsQ0FDckNxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxZQUdwQyxHQUFJbjNCLENBQ04sRUFNSTg3QyxHQUFXM21DLEdBQVksQ0FDekJ2QixPQUFRLENBQ053akIsYUFOZSxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsVUFPaERDLFlBTGMsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFlBUy9DMGtCLEdBQW1ELFNBQTBEcHJELEVBQVVpaUIsR0FDekgsT0FBT1UsR0FBSTNpQixFQUFVLENBQ25CLHVCQUF3QitaLEVBQXdCa0ksRUFBS29wQyw4QkFBK0JwcEMsRUFBSzJjLHFCQUU3RixFQUVJLEdBQVMsQ0FDWGpiLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FBQyxFQUFLc1ksT0FBUSxFQUFLSSxVQUFVLFFBQVMsQ0FDMUR5d0IsV0FBWSxPQUNaLG1CQUFvQixPQUNwQmhrQixPQUFRLEVBQ1IwaEIsYUFBYyxFQUNkM2hCLFFBQVMsRUFDVCx1QkFBd0IsQ0FDdEI3NEIsV0FBWSxHQUFLaXpDLFlBQWMsS0FDL0J1SCxhQUFjLEVBQ2RqOEMsU0FBVSxXQUNWLCtCQUFnQyxDQUM5QjhCLFNBQVUsU0FDVlYsV0FBWSxVQUVkLHFCQUFzQixDQUNwQms1QixRQUFTLEVBQ1R3UixNQUFPLFFBR1QsWUFBYSxDQUNYdVUsV0FBWSxPQUNaVyxZQUFhLFNBR2pCLHNCQUF1QixDQUNyQix5QkFBMEIsQ0FDeEIsaUNBQWtDLENBQ2hDem1CLE9BQVEsWUFJZCxtQkFBb0IsQ0FDbEIsNENBQTZDLENBQzNDb21CLFNBQVUsRUFDVix1QkFBd0IsQ0FDdEIsWUFBYSxDQUNYd0YsYUFBYyxHQUVoQix1QkFBd0IsQ0FDdEJ4SCxTQUFVLE9BQ1ZsOUMsV0FBWSxPQUNaNC9DLGNBQWUsV0FLdkIsc0JBQXVCLENBQ3JCVixTQUFVLFdBRVoseUJBQTBCLENBQUMsRUFBS3p5QixtQkFBb0IsRUFBS1MsZUFBZ0IsQ0FDdkVqdEIsT0FBUSxZQUVWLHNCQUF1QixDQUFDLEVBQUtnc0IsT0FBUSxDQUNuQ2l6QixTQUFVLFVBQ1Y0RSxTQUFVLFNBRVosaUNBQWtDLENBQ2hDLHVCQUF3QixDQUN0QjFuQyxPQUFRLFVBQ1I0L0IsY0FBZSxlQUl2QixFQUNBaWpCLFdBQVksU0FBb0J0ckQsRUFBVWlpQixHQUN4QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQjFULE9BQVEyMUIsRUFBS3FwQyxXQUFhLEtBQzFCLHVCQUF3QixDQUN0QmgvRCxPQUFRMjFCLEVBQUtxcEMsV0FBYSxRQUdoQyxFQUNBQyxjQUFlLFNBQXVCdnJELEVBQVVpaUIsR0FDOUMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEJ1ckMsU0FBVXRwQixFQUFLc3BDLGNBQWdCLE9BR25DLEVBQ0FDLGNBQWUsU0FBdUJ4ckQsRUFBVWlpQixHQUM5QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQm13QyxTQUFVcm5DLE1BQU1tWixFQUFLdXBDLGVBQWlCdnBDLEVBQUt1cEMsY0FBZ0J2cEMsRUFBS3VwQyxjQUFnQixPQUVwRixFQUNBQyxxQkFBc0IsU0FBOEJ6ckQsRUFBVTJ2QyxHQUM1RCxPQUFPLEdBQWdCLENBQUMsRUFBRyxzQkFBd0IsR0FBS2pPLG1DQUFxQyxNQUFPLEdBQWdCLENBQUMsRUFBRyw2SEFBNkhyK0IsT0FBT3JELEdBQVcsQ0FDclF1ckMsU0FBVW9FLEVBQU84YixxQkFBdUIsT0FFNUMsRUFDQUMsc0JBQXVCLFNBQStCMXJELEVBQVVpaUIsR0FDOUQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsc0JBQXVCLENBQ3JCLHlCQUEwQixDQUN4QjFULE9BQVEyMUIsRUFBS3lwQyxzQkFBd0IsU0FJN0MsRUFDQUwsOEJBQStCLFNBQXVDcnJELEVBQVVpaUIsR0FDOUUsTUFBTyxDQUFDbXBDLEdBQWlEcHJELEVBQVVpaUIsR0FDckUsRUFDQTJjLG1CQUFvQixTQUE0QjUrQixFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ21wQyxHQUFpRHByRCxFQUFVaWlCLEdBQ3JFLEVBQ0EwcEMsc0JBQXVCLFNBQStCM3JELEVBQVVpaUIsR0FDOUQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCa2xCLFFBQVMsS0FBT2pELEVBQUswcEMsc0JBQXdCLFFBR25ELEVBQ0FDLGdCQUFpQixTQUF5QjVyRCxFQUFVaWlCLEdBQ2xELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QixDQUN0QiwrQkFBZ0MsQ0FDOUJtd0MsU0FBVWx1QixFQUFLMnBDLGdCQUFrQixTQUt6QyxFQUNBQyxzQkFBdUIsU0FBK0I3ckQsRUFBVWlpQixHQUM5RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix1QkFBd0IsQ0FDdEIsK0JBQWdDLENBQzlCM1QsV0FBWTQxQixFQUFLNHBDLHNCQUF3QixLQUN6Q3p4QyxVQUFXLEVBQUk2SCxFQUFLNHBDLHNCQUF3QixTQUlwRCxFQUNBQywwQkFBMkIsU0FBbUM5ckQsRUFBVWlpQixHQUN0RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix1QkFBd0IsQ0FDdEIscUJBQXNCLENBQ3BCbWxCLE9BQVFsRCxFQUFLNnBDLDBCQUE0QixlQUlqRCxFQUNBQyw0QkFBNkIsU0FBcUMvckQsRUFBVWlpQixHQUMxRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixzQkFBdUIsQ0FDckIseUJBQTBCLENBQ3hCLFlBQWEsQ0FDWCt3QyxhQUFjOXVCLEVBQUs4cEMsNEJBQThCLFVBSzNELEVBQ0FDLGdCQUFpQixTQUF5QmhzRCxFQUFVaWlCLEdBQ2xELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLG1CQUFvQixDQUVsQjFULE9BQVEyMUIsRUFBSytwQyxnQkFBa0IsS0FDL0IsNENBQTZDLENBQzNDLHVCQUF3QixDQUN0QjEvRCxPQUFRMjFCLEVBQUsrcEMsZ0JBQWtCLFVBS3pDLEVBQ0FDLDJCQUE0QixTQUFvQ2pzRCxFQUFVaWlCLEdBQ3hFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLG1CQUFvQixDQUNsQix1QkFBd0IsQ0FDdEIxVCxPQUFRMjFCLEVBQUtncUMsMkJBQTZCLFNBSWxELEVBQ0FDLDJCQUE0QixTQUFvQ2xzRCxFQUFVaWlCLEdBQ3hFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLG1CQUFvQixDQUNsQiw0Q0FBNkMsQ0FDM0MsdUJBQXdCLENBQ3RCa2xCLFFBQVMsS0FBT2pELEVBQUtpcUMsMkJBQTZCLFVBSzVELEdBRUVDLEdBQVl0b0MsR0FBYSxDQUMzQlosT0FBUSxLQUdOLEdBQWUsQ0FDakJVLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FDcEIsMkJBQTRCLENBQzFCcWtDLE1BQU8sV0FFVCxrQkFBbUIsQ0FDakIsdUJBQXdCLENBQ3RCaDNDLGdCQUFpQixXQUVuQiwyQkFBNEIsQ0FDMUJBLGdCQUFpQixVQUNqQix1QkFBd0IsQ0FDdEJBLGdCQUFpQixlQUszQixHQUdFLEdBQVksU0FBaUJtNUMsR0FDL0IsT0FBTyxHQUFnQixDQUFDLEVBQUcsU0FBV0EsRUFBTyxpQkFBa0IsU0FBVXhtQyxFQUFVaWlCLEdBQ2pGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QixDQUN0QjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyxxQkFHOUMsRUFDRixFQU1JNGxCLEdBQVk1bkMsR0FBWSxDQUMxQnZCLE9BQVEsQ0FDTndqQixhQU5pQixHQUFTLENBQUMsRUFBRyxHQUFjLEdBQVUsVUFPdERDLFlBTGdCLEdBQVMsQ0FBQyxFQUFHLEdBQWMsR0FBVSxZQVNyRCxHQUFZLFNBQW1CcUQsR0FDakMsT0FBTyxXQUNMLE1BQU8sQ0FDTCx1QkFBd0IsR0FBZ0IsQ0FDdENzYixnQkFBaUJ0YixFQUFRLFlBQWMsWUFDdENBLEVBQVEsUUFBVSxPQUFRLEdBRWpDLENBQ0YsRUFFSSxHQUFZLElBQVUsR0FDdEIsR0FBYSxJQUFVLEdBRXZCc2lCLEdBQWUsU0FBcUJyc0QsRUFBVWlpQixFQUFNOG5CLEdBQ3RELE9BQU9wbkIsR0FBSTNpQixFQUFVLENBQ25CLGlCQUFrQixDQUNoQix3QkFBeUIsR0FBZ0IsQ0FBQyxFQUFHK3BDLEVBQVEsZUFBaUIsY0FBZTluQixFQUFLcXFDLFlBQWMsUUFHOUcsRUFFSSxHQUFXLENBQ2Izb0MsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxDQUFDMmlCLEdBQUkzaUIsRUFBVSxDQUFDLEtBQWEsQ0FDbENtcEMsV0FBWSxPQUNaLG1CQUFvQixPQUNwQjNqQixVQUFXLHFCQUNYLDZCQUE4QixRQUM5Qix3QkFBeUIsQ0FDdkIsUUFBVyxRQUViLHVCQUF3QixDQUN0QnJMLFFBQVMsT0FDVCxxQkFBc0IsT0FDdEIsMkJBQTRCLENBRTFCQSxRQUFTLFFBRVgsaUJBQWtCLENBQ2hCb3hCLFNBQVUsSUFHZCxrQkFBbUIsQ0FDakIsMkJBQTRCLENBQzFCM2dELFNBQVUsV0FDVnV2QixRQUFTLFFBQ1RPLE9BQVEsRUFDUm1zQixhQUFjLEVBQ2QsdUJBQXdCLENBQ3RCQSxhQUFjLEVBQ2Q3c0IsbUJBQW9CLE1BQ3BCeEQseUJBQTBCLGdCQUc5QixnREFBaUQsQ0FDL0M2eEIsY0FBZSxPQUNmNS9CLE9BQVEsVUFDUnNhLFFBQVMsR0FFWCw0Q0FBNkMsQ0FDM0NzbEIsY0FBZSxPQUNmNS9CLE9BQVEsVUFDUnNhLFFBQVMsSUFHYixpQkFBa0IsQ0FBQyxFQUFLOUosaUJBQWtCLENBQ3hDa3dCLFdBQVksT0FDWixtQkFBb0IsT0FDcEJ2K0MsU0FBVSxXQUNWb0IsV0FBWSxTQUNaLHdCQUF5QixDQUN2Qm01QixPQUFRLEVBQ1J6NEIsU0FBVSxRQUVaLDBCQUEyQixFQUFLMHJCLHdCQUVsQyxrQ0FBbUMsQ0FBQyxFQUFLRSxPQUFRLEVBQUtJLFVBQVUsU0FDaEUsdUJBQXdCLENBQ3RCOE0sVUFBVyxxQkFFWHhMLG1CQUFvQixNQUNwQnhELHlCQUEwQixjQUMxQjVyQixTQUFVLFdBQ1Y4dkIsT0FBUSxFQUNSRCxPQUFRLEVBRVJpYyxNQUFPLE9BR1AzVCxRQUFTLEdBR1gsd0NBQXlDLENBQUNoSixJQUFhLENBQ3JEMmMsTUFBTyxPQUNQdlIsT0FBUSxFQUNSbDRCLElBQUssWUFFSixHQUFnQixDQUFDLEVBQUcsY0FBY29XLE9BQU9yRCxFQUFVLGNBQWNxRCxPQUFPckQsR0FBVyxDQUFDLE9BQzNGLEVBQ0Fzc0QsWUFBYSxTQUFxQnRzRCxFQUFVaWlCLEdBQzFDLE1BQU8sQ0FBQ29xQyxHQUFhcnNELEVBQVVpaUIsR0FBTSxHQUFRb3FDLEdBQWF6cEMsR0FBWTVpQixHQUFXaWlCLEdBQU0sR0FDekYsRUFDQXFwQyxXQUFZLFNBQW9CdHJELEVBQVVpaUIsR0FDeEMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCbWEsUUFBUyxPQUVULGFBQWM4SCxFQUFLcXBDLFdBQWEsUUFHdEMsRUFDQWlCLGlCQUFrQixTQUEwQnZzRCxFQUFVaWlCLEdBQ3BELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QixDQUN0QixpQkFBa0IsQ0FDaEIrd0MsY0FBZTl1QixFQUFLc3FDLGlCQUFtQixTQUkvQyxFQUNBQyxtQkFBb0IsU0FBNEJ4c0QsRUFBVWlpQixHQUN4RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixrQkFBbUIsQ0FDakIsMkJBQTRCLENBQzFCMDJCLE1BQU96VSxFQUFLdXFDLG1CQUFxQixLQUNqQ2xnRSxPQUFRMjFCLEVBQUt1cUMsbUJBQXFCLFNBSTFDLEVBQ0FDLDRCQUE2QixTQUFxQ3pzRCxFQUFVaWlCLEdBQzFFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGtCQUFtQixDQUNqQiwyQkFBNEIsQ0FDMUIsdUJBQXdCLENBQ3RCb1csbUJBQW9CNkwsRUFBS3dxQyxpQ0FLbkMsRUFDQUMseUJBQTBCLFNBQWtDMXNELEVBQVVpaUIsR0FDcEUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsa0JBQW1CLENBQ2pCLDJCQUE0QixDQUMxQix1QkFBd0IsQ0FDdEJzVyxnQkFBaUIyTCxFQUFLeXFDLDhCQUtoQyxFQUNBQyxzQkFBdUIsU0FBK0Izc0QsRUFBVWlpQixHQUM5RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixrQkFBbUIsQ0FDakIsMkJBQTRCLENBQzFCLHVCQUF3QixDQUN0QitpQixRQUFTZCxFQUFLMHFDLDJCQUt4QixFQUNBQyxxQkFBc0IsU0FBOEI1c0QsRUFBVWlpQixHQUM1RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix1QkFBd0IsQ0FDdEIxVCxPQUFRMjFCLEVBQUsycUMscUJBQXVCLFFBRzFDLEdBRUVDLEdBQWFocEMsR0FBYSxDQUM1QlosT0FBUSxLQUlOc21CLEdBQVcsR0FBZTJDLFVBQzFCMmYsR0FBd0IsSUFBTXRpQixHQU85QnVqQixHQUFXLENBSWJucEMsZ0JBQWdCLEVBQ2hCaWIsbUJBQW9CLEdBQWVBLG1CQUNuQ211QixzQkFBdUIsSUFFdkJuQixnQkFBaUIsSUFDakJJLGdCQUFpQixHQUNqQkMsMkJBQTRCLEdBQzVCUyx5QkFBMEIsT0FDMUJELDRCQUE2QixNQUM3QkUsc0JBQXVCLEdBQ3ZCSCxtQkFwQmUsR0FxQmZELGlCQUFrQixFQUNsQlosc0JBQXVCLEdBQ3ZCTCxXQXZCZSxHQXdCZkksc0JBQXVCLEdBQ3ZCSyw0QkFBNkIsRUFDN0JhLHFCQUFzQixFQUN0QmYsc0JBQXVCQSxHQUN2QlIsOEJBQStCLGtDQUMvQlMsMEJBQTJCRCxHQUF3QnRpQixHQUNuRGlpQixjQUFlLFVBQ2ZVLDJCQUE0QixFQUM1QlgsY0FBZSxHQUNmRSxxQkFBc0IsSUFDdEJhLFlBQWEsRUFDYnBmLGlCQUFrQnJxQixHQUFLLEdBQUtnZCx1QkFBd0IsR0FBS0ksMEJBQ3pEK3NCLHFCQUFzQm5xQyxHQUFLLEdBQUswYyxlQUNoQ2tlLGdDQUFpQyxjQUNqQ3dQLDBCQUEyQnBxQyxHQUFLLEdBQUswYyxlQUNyQ2lPLGlCQUFrQixHQUFPa0wsWUFDekJoTCxnQkFBaUI3cUIsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtjLHlCQUN2RHFzQixvQkFBcUJycUMsR0FBSyxHQUFLMGMsZUFDL0IrZSwrQkFBZ0MsY0FDaEM2Tyx5QkFBMEJ0cUMsR0FBSyxHQUFLMGMsZUFDcEN5TyxnQkFBaUIsR0FBTzJLLFlBVXRCeVUsR0FBVSxDQUFDUCxHQUFZVCxJQUN2QmlCLEdBQVMsQ0FBQ2xCLEdBQVdoQixJQUNyQm1DLEdBQWUsSUFBSWpxRCxPQUFPLElBQzFCa3FELEdBQVcsR0FBR2xxRCxPQS9qQlgsU0ErakIrQiw2QkFDbENtcUQsR0FBYyxLQUFLbnFELE9BQU9rcUQsR0FBU3pnRSxRQUFRLEtBQU0sTUN2a0JyRCxTQUFTLEdBQWdCc2dCLEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsS0FlUCxPQWRBLEdBQVcvYixPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDQUVBLElBQUksR0FBYSxDQUNmNDBCLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FDcEIsNkJBQThCLENBQzVCcWtDLE1BQU8sVUFDUCxVQUFXLENBQ1RoM0MsZ0JBQWlCLGlCQUdyQixvREFBcUQsQ0FDbkQsbUNBQW9DLENBQ2xDQSxnQkFBaUIsZ0JBR3JCLDZEQUE4RCxDQUM1RCx3QkFBeUIsQ0FDdkJ5NkMsVUFBVyxXQUluQixHQUdFLEdBQVUsU0FBaUJ0QixHQUM3QixJQUFJbjNCLEVBRUosT0FBa0IsR0FBWEEsRUFBTyxDQUFDLEVBQXlCLFNBQVdtM0IsRUFBTyxnQkFBaUIsU0FBVXhtQyxFQUFVaWlCLEdBQzdGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sbUJBR2xDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sb0JBQXFCLFNBQVV4bUMsRUFBVWlpQixHQUNuRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw2QkFBOEIsQ0FDNUIzUyxnQkFBaUI0MEIsRUFBSyxTQUFXdWtCLEVBQU8sc0JBRTFDLHlDQUEwQyxDQUN4QyxxQkFBc0Isa0JBQW9CdmtCLEVBQUssU0FBV3VrQixFQUFPLHFCQUF1QixZQUc5RixHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGNBQWUsU0FBVXhtQyxFQUFVaWlCLEdBQzdFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHdCQUF5QixDQUN2QnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGdCQUVoQyx5Q0FBMEMsQ0FDeENuQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGVBQWlCLGlCQUdyRCxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLHFCQUFzQixTQUFVeG1DLEVBQVVpaUIsR0FDcEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsMEJBQTJCLENBQ3pCLG1DQUFvQyxDQUNsQzNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTywwQkFJaEQsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyx1QkFBd0IsU0FBVXhtQyxFQUFVaWlCLEdBQ3RGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHdCQUF5QixDQUN2QjBwQyxZQUFhem5CLEVBQUssU0FBV3VrQixFQUFPLDJCQUcxQyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGNBQWUsU0FBVXhtQyxFQUFVaWlCLEdBQzdFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHdCQUF5QixDQUN2QnFrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGtCQUdwQyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLHVCQUF3QixTQUFVeG1DLEVBQVVpaUIsR0FDdEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsb0RBQXFELENBQ25ELG1DQUFvQyxDQUNsQ3l0RCxnQkFBaUIsNkJBQStCeHJDLEVBQUssU0FBV3VrQixFQUFPLHdCQUEwQixxQ0FHckcsMEJBQTJCLENBQ3pCLDhDQUErQyxDQUM3Q25DLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sNEJBSXRDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sdUJBQXdCLFNBQVV4bUMsRUFBVWlpQixHQUN0RixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiwwQkFBMkIsQ0FDekIsOENBQStDLENBQzdDcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sNEJBSXRDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sa0JBQW1CLFNBQVV4bUMsRUFBVWlpQixHQUNqRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix5QkFBMEIsQ0FFeEIscURBQXNELENBQ3BEcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sdUJBSXRDLEdBQUksR0FBZ0JuM0IsRUFBTSxTQUFXbTNCLEVBQU8sbUJBQW9CLFNBQVV4bUMsRUFBVWlpQixHQUNsRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix5QkFBMEIsQ0FDeEIsdURBQXdELENBQ3RELHFDQUFzQyxDQUNwQ3FrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLHlCQUt4QyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLGFBQWMsU0FBVXhtQyxFQUFVaWlCLEdBQzVFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLCtDQUFnRCxDQUM5Q3FrQyxNQUFPcGlCLEVBQUssU0FBV3VrQixFQUFPLGlCQUdwQyxHQUFJLEdBQWdCbjNCLEVBQU0sU0FBV20zQixFQUFPLHNCQUF1QixTQUFVeG1DLEVBQVVpaUIsR0FDckYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNkRBQThELENBQzVELHdCQUF5QixDQUN2QjBwQyxZQUFhem5CLEVBQUssU0FBV3VrQixFQUFPLHdCQUV0Qyw2QkFBOEIsQ0FDNUIsbUNBQW9DLENBQ2xDbjVDLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyw0QkFLbEQsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxvQkFBcUIsU0FBVXhtQyxFQUFVaWlCLEdBQ25GLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDZEQUE4RCxDQUM1RCx3QkFBeUIsQ0FDdkJxa0MsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxzQkFFaEMscUVBQXNFLENBQ3BFbkMsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyxzQkFFaEMsK0NBQWdELENBQzlDbkMsTUFBT3BpQixFQUFLLFNBQVd1a0IsRUFBTyx5QkFJdEMsR0FBSW4zQixDQUNOLEVBTUksR0FBUW1WLEdBQVksQ0FDdEJ2QixPQUFRLENBQ053akIsYUFOZSxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsVUFPaERDLFlBTGMsR0FBUyxDQUFDLEVBQUcsR0FBWSxHQUFRLFlBUy9DLEdBQVksU0FBbUJxRCxHQUNqQyxPQUFPLFdBQ0wsTUFBTyxDQUNMLDBCQUEyQixDQUN6QlQsVUFBV1MsRUFBUSxPQUFTLFFBQzVCLE1BQVNBLEVBQVEsT0FBUyxRQUMxQjdrQixRQUFTNmtCLEVBQVEsYUFBZSxjQUd0QyxDQUNGLEVBRUksR0FBWSxJQUFVLEdBQ3RCLEdBQWEsSUFBVSxHQUV2QjJqQixHQUF1QyxTQUE4QzF0RCxFQUFVaWlCLEdBQ2pHLE9BQU9VLEdBQUkzaUIsRUFBVSxDQUNuQix3QkFBeUIsQ0FDdkIvUyxJQUFLZzFCLEVBQUswckMscUJBQXVCMXJDLEVBQUsyckMsZ0JBQWtCLE9BRzlELEVBRUlDLEdBQXNELFNBQTZEN3RELEVBQVVpaUIsR0FDL0gsT0FBT1UsR0FBSTNpQixFQUFVLENBQ25CLHFEQUFzRCxDQUNwRC9TLElBQUtnMUIsRUFBSzZyQyxvQ0FBc0M3ckMsRUFBSzJyQyxnQkFBa0IsT0FHN0UsRUFFSUcsR0FBNEQsU0FBbUUvdEQsRUFBVWlpQixHQUMzSSxPQUFPVSxHQUFJM2lCLEVBQVUsQ0FDbkIseUVBQTBFLENBQ3hFL1MsSUFBS2cxQixFQUFLK3JDLDBDQUE0Qy9yQyxFQUFLMnJDLGdCQUFrQixPQUduRixFQUVJSyxHQUFrQyxTQUF5Q2p1RCxFQUFVaWlCLEdBQ3ZGLE9BQU9VLEdBQUkzaUIsRUFBVSxDQUNuQix3QkFBeUIsQ0FDdkJrbEIsUUFBU2pELEVBQUsyckMsZ0JBQWtCLE1BQVEzckMsRUFBS2lzQyxnQkFBa0IsTUFFakUsZ0NBQWlDLENBQy9CL29DLE9BQVFsRCxFQUFLMnJDLGdCQUFrQixNQUFRM3JDLEVBQUtpc0MsZ0JBQWtCLE9BR3BFLEVBRUlDLEdBQXdELFNBQStEbnVELEVBQVVpaUIsR0FDbkksT0FBT1UsR0FBSTNpQixFQUFVLENBQ25CLDRCQUE2QixDQUMzQix3QkFBeUIsQ0FDdkJrbEIsUUFBU2pELEVBQUt3Z0MsMkJBQTZCLE1BQVF4Z0MsRUFBS21zQywyQkFBNkIsUUFJN0YsRUFFSUMsR0FBb0UsU0FBMkVydUQsRUFBVWlpQixHQUMzSixPQUFPVSxHQUFJM2lCLEVBQVUsQ0FDbkIsZ0RBQWlELENBQy9DLHdCQUF5QixDQUN2QmtsQixRQUFTakQsRUFBS3FzQyxpQ0FBbUMsTUFBUXJzQyxFQUFLc3NDLGlDQUFtQyxRQUl6RyxFQUVJLEdBQVMsQ0FDWDVxQyxlQUFnQixTQUF3QjNqQixHQUN0QyxNQUFPLENBQUMyaUIsR0FBSTNpQixFQUFVLENBQUMsS3BEcUxsQixDQUNMLFVBQVcsQ0FDVHRKLFFBQVMsS0FDVHlqQixRQUFTLFFBQ1RoRyxNQUFPLFNvRHpMNkMsQ0FDcER2cEIsU0FBVSxXQUNWeUIsV0FBWSxHQUFLaXpDLFlBQ2pCbmxCLFFBQVMsZUFDVG81QixVQUFXLGFBQ1hwdUIsT0FBUSxFQUNSejRCLFNBQVUsVUFFVmdxQyxNQUFPLE9BQ1B5WixTQUFVLE9BQ1YsNkJBQThCLENBQzVCdmxELFNBQVUsV0FDVixVQUFXLENBQ1RBLFNBQVUsV0FDVjhMLFFBQVMsS0FDVCtqQixPQUFRLEVBQ1J0dEIsS0FBTSxFQUNOdXBDLE1BQU8sT0FDUDNULFFBQVMsSUFHYix5REFBMEQsQ0FDeERBLFFBQVMsR0FFWCx3QkFBeUIsQ0FDdkI1SSxRQUFTLFFBQ1R1YyxNQUFPLE9BQ1BqNEIsV0FBWSxPQUNaNGxDLE1BQU8sVUFDUDJGLFlBQWEsdUJBQ2JuRCxhQUFjLEVBQ2QxaEIsT0FBUSxFQUVSLHVCQUF3QixDQUN0QjJpQixVQUFXLFFBRWIsV0FBWSxDQUNWQSxVQUFXLFFBR2IsY0FBZSxDQUNicFIsTUFBTyxFQUNQcHFDLE9BQVEsSUFHWixnQ0FBaUMsQ0FDL0I0NEIsUUFBUyxFQUNUL0ssUUFBUyxTQUdYLDhDQUErQyxDQUM3Q2l2QixRQUFTLFFBRVgsd0JBQXlCLENBQ3ZCeCtDLFNBQVUsV0FDVnV2QixRQUFTLFFBQ1RNLE9BQVEsRUFDUjR0QixjQUFlLE9BQ2ZyOEMsV0FBWSxTQUNaeWMsT0FBUSxRQUVWLDRDQUE2QyxDQUMzQ3ZjLFdBQVksVUFFZCxnQ0FBaUMsQ0FDL0Isd0VBQXlFLENBQ3ZFZzVCLFFBQVMsZ0JBR2IsZ0NBQWlDLENBQy9CLGdEQUFpRCxDQUMvQyx3QkFBeUIsQ0FDdkJoNUIsV0FBWSxhQUlsQixvREFBcUQsQ0FDbkQsd0JBQXlCLENBQ3ZCdWMsT0FBUSxRQUVWLHdCQUF5QixDQUN2QixnQkFBaUIsUUFFbkIsbUNBQW9DLENBQ2xDc2EsUUFBUyxFQUNUejJCLE9BQVEsTUFDUm11QixPQUFRLE9BQ1J1MUIsbUJBQW9CLE1BQ3BCRixlQUFnQixVQUNoQkMsaUJBQWtCLGFBR3RCLHVHQUF3RyxDQUN0RzFqRCxXQUFZLEdBQUtpekMsYUFFbkIsNkJBQThCLENBQUN2bEIsRUFBd0IsV0FBWSxDQUNqRWdKLFFBQVMsSUFFWCxvR0FBcUcsQ0FDbkdBLFFBQVMsR0FFWCw0QkFBNkIsQ0FDM0IsbUNBQW9DLENBQ2xDNUksUUFBUyxTQUdiLDhCQUErQixDQUM3QixnR0FBaUcsQ0FDL0YscUJBQXNCLE9BQ3RCZ0wsT0FBUSxHQUVWLHNCQUF1QixDQUNyQixrQkFBbUIsY0FHdkIsNEJBQTZCLENBQzNCdVIsTUFBTyxPQUNQeFIsUUFBUyxFQUNULDZCQUE4QixDQUM1QkEsUUFBUyxPQUdWLEdBQWdCLENBQUMsRUFBRyxjQUFjN2hCLE9BQU9yRCxFQUFVLGNBQWNxRCxPQUFPckQsR0FBVyxDQUFDLE9BQzNGLEVBQ0F3dUQsd0JBQXlCLFNBQWlDeHVELEVBQVVpaUIsR0FDbEUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEJzckMsY0FBZXJwQixFQUFLdXNDLHdCQUEwQixPQUVsRCxFQUNBQyx1Q0FBd0MsU0FBZ0R6dUQsRUFBVWlpQixHQUNoRyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixnQ0FBaUMsQ0FDL0JzckMsY0FBZXJwQixFQUFLd3NDLHVDQUF5QyxNQUUvRCx1QkFBd0IsQ0FDdEJuakIsY0FBZXJwQixFQUFLeXNDLDZDQUErQyxRQUd6RSxFQUNBZixxQkFBc0IsU0FBOEIzdEQsRUFBVWlpQixHQUM1RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw2QkFBOEIsQ0FDNUJxckMsV0FBWXBwQixFQUFLMHJDLHFCQUF1QixRQUV4Q0QsR0FBcUMxdEQsRUFBVWlpQixHQUNyRCxFQUNBMnJDLGdCQUFpQixTQUF5QjV0RCxFQUFVaWlCLEdBQ2xELE1BQU8sQ0FBQ3lyQyxHQUFxQzF0RCxFQUFVaWlCLEdBQU80ckMsR0FBb0Q3dEQsRUFBVWlpQixHQUFPOHJDLEdBQTBEL3RELEVBQVVpaUIsR0FBT2dzQyxHQUFnQ2p1RCxFQUFVaWlCLEdBQzFQLEVBQ0Fpc0MsZ0JBQWlCLFNBQXlCbHVELEVBQVVpaUIsR0FDbEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsd0JBQXlCLENBQ3ZCN1MsS0FBTTgwQixFQUFLaXNDLGdCQUFrQixLQUM3QjF6QyxNQUFPeUgsRUFBS2lzQyxnQkFBa0IsUUFFOUJELEdBQWdDanVELEVBQVVpaUIsR0FDaEQsRUFDQTZyQyxvQ0FBcUMsU0FBNkM5dEQsRUFBVWlpQixHQUMxRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixnQ0FBaUMsQ0FDL0IsNkJBQThCLENBQzVCcXJDLFdBQVlwcEIsRUFBSzZyQyxvQ0FBc0MsU0FHekRELEdBQW9EN3RELEVBQVVpaUIsR0FDcEUsRUFDQStyQywwQ0FBMkMsU0FBbURodUQsRUFBVWlpQixHQUN0RyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixvREFBcUQsQ0FDbkQsNkJBQThCLENBQzVCcXJDLFdBQVlwcEIsRUFBSytyQywwQ0FBNEMsU0FHL0RELEdBQTBEL3RELEVBQVVpaUIsR0FDMUUsRUFDQTBzQyxzQ0FBdUMsU0FBK0MzdUQsRUFBVWlpQixHQUM5RixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixtQ0FBb0MrWixFQUF3QixVQUFXa0ksRUFBSzBzQyx5Q0FFaEYsRUFDQUMseUJBQTBCLFNBQWtDNXVELEVBQVVpaUIsR0FDcEUsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsbUNBQW9DLENBQ2xDMVQsT0FBUTIxQixFQUFLMnNDLHlCQUEyQixRQUc5QyxFQUNBQyxnQkFBaUIsU0FBeUI3dUQsRUFBVTJ2QyxHQUNsRCxNQUFPLENBQUNodEIsR0FBSTNpQixFQUFVLENBQ3BCLHVHQUF3RyxDQUN0R3VwQyxTQUFVb0csRUFBT2tmLGdCQUFrQixLQUNuQ3prQixVQUFXdUYsRUFBT2tmLGdCQUFrQixHQUFLdnZCLFlBQWMsUUFHN0QsRUFDQXFqQixnQkFBaUIsU0FBeUIzaUQsRUFBVWlpQixHQUNsRCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw4Q0FBK0MsQ0FDN0N1cEMsU0FBVXRuQixFQUFLMGdDLGdCQUFrQixRQUd2QyxFQUNBSixrQkFBbUIsU0FBMkJ2aUQsRUFBVWlpQixHQUN0RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQiw4Q0FBK0MsQ0FDN0MzVCxXQUFZNDFCLEVBQUtzZ0Msa0JBQW9CLFFBRzNDLEVBQ0F1TSxtQkFBb0IsU0FBNEI5dUQsRUFBVWlpQixHQUN4RCxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix3QkFBeUIsQ0FDdkIrcUMsWUFBYTlvQixFQUFLNnNDLG1CQUFxQixNQUd6Qyw4Q0FBK0MsQ0FDN0MvakIsWUFBYTlvQixFQUFLNnNDLG1CQUFxQixLQUN2QzFsQixRQUFTLFVBR2YsRUFDQXFaLDJCQUE0QixTQUFvQ3ppRCxFQUFVaWlCLEdBQ3hFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDRCQUE2QixDQUMzQix3QkFBeUIsQ0FDdkIvUyxJQUFLZzFCLEVBQUt3Z0MsMkJBQTZCLFNBR3pDMEwsR0FBc0RudUQsRUFBVWlpQixHQUN0RSxFQUNBbXNDLDJCQUE0QixTQUFvQ3B1RCxFQUFVaWlCLEdBQ3hFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLDRCQUE2QixDQUMzQixxRUFBc0UsQ0FDcEUwckMsWUFBYXpwQixFQUFLbXNDLDJCQUE2QixLQUMvQ3ppQixhQUFjMXBCLEVBQUttc0MsMkJBQTZCLE1BRWxELHdCQUF5QixDQUN2QmpoRSxLQUFNODBCLEVBQUttc0MsMkJBQTZCLEtBQ3hDNXpDLE1BQU95SCxFQUFLbXNDLDJCQUE2QixTQUczQ0QsR0FBc0RudUQsRUFBVWlpQixHQUN0RSxFQUNBOHNDLHNCQUF1QixTQUErQi91RCxFQUFVaWlCLEdBQzlELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVCQUF3QixDQUN0QixnREFBaUQsQ0FDL0N1cEMsU0FBVXRuQixFQUFLOHNDLHNCQUF3QixTQUkvQyxFQUNBQyxpQ0FBa0MsU0FBMENodkQsRUFBVWlpQixHQUNwRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQix1QkFBd0IsQ0FDdEIsd0JBQXlCLENBQ3ZCdXBDLFNBQVV0bkIsRUFBSytzQyxpQ0FBbUMsTUFFcEQsd0JBQXlCLENBQ3ZCemxCLFNBQVV0bkIsRUFBSytzQyxpQ0FBbUMsU0FJMUQsRUFDQVYsaUNBQWtDLFNBQTBDdHVELEVBQVVpaUIsR0FDcEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNEJBQTZCLENBQzNCLHVCQUF3QixDQUN0Qix3QkFBeUIsQ0FDdkIvUyxJQUFLZzFCLEVBQUtxc0MsaUNBQW1DLFVBSWpERCxHQUFrRXJ1RCxFQUFVaWlCLEdBQ2xGLEVBQ0Fzc0MsaUNBQWtDLFNBQTBDdnVELEVBQVVpaUIsR0FDcEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsNEJBQTZCLENBQzNCLHVCQUF3QixDQUN0Qix3QkFBeUIsQ0FDdkI3UyxLQUFNODBCLEVBQUtzc0MsaUNBQW1DLEtBQzlDL3pDLE1BQU95SCxFQUFLc3NDLGlDQUFtQyxVQUluREYsR0FBa0VydUQsRUFBVWlpQixHQUNsRixFQUNBZ3RDLHlCQUEwQixTQUFrQ2p2RCxFQUFVaWlCLEdBQ3BFLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHVHQUF3RyxDQUN0R29zQyxVQUFXbnFCLEVBQUtndEMseUJBQTJCLFFBR2pELEVBQ0FDLGtDQUFtQyxTQUEyQ2x2RCxFQUFVaWlCLEdBQ3RGLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGdDQUFpQyxDQUMvQix3QkFBeUIrWixFQUF3QixNQUFPa0ksRUFBS2l0QyxzQ0FHbkUsRUFDQUMsK0JBQWdDLFNBQXdDbnZELEVBQVVpaUIsR0FDaEYsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsZ0NBQWlDLENBQy9CLHVCQUF3QixDQUN0QixnREFBaUQsQ0FDL0N1cEMsU0FBVXRuQixFQUFLa3RDLCtCQUFpQyxVQUsxRCxFQUNBQyx5QkFBMEIsU0FBa0NwdkQsRUFBVWlpQixHQUNwRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixnQ0FBaUMsQ0FDL0IsdUJBQXdCLENBQ3RCLGdEQUFpRCxDQUMvQyx3QkFBeUIsQ0FDdkIvUyxJQUFLZzFCLEVBQUttdEMseUJBQTJCLFdBTWpELEVBQ0FDLG1CQUFvQixTQUE0QnJ2RCxFQUFVaWlCLEdBQ3hELE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLGdDQUFpQyxDQUMvQixnREFBaUQsQ0FDL0Msd0JBQXlCLENBQ3ZCL1MsSUFBS2cxQixFQUFLb3RDLG1CQUFxQixVQUt6QyxFQUNBQyx5QkFBMEIsU0FBa0N0dkQsRUFBVWlpQixHQUNwRSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixnQ0FBaUMsQ0FDL0IsZ0RBQWlELENBQy9DLHdCQUF5QixDQUN2QnVwQyxTQUFVdG5CLEVBQUtxdEMseUJBQTJCLFVBS3BELEdBRUUsR0FBU3pyQyxHQUFhLENBQ3hCWixPQUFRLEtBUU5zc0MsR0FBZ0IsQ0FJbEI1ckMsZ0JBQWdCLEVBQ2hCeXJDLHlCQUEwQixHQUMxQlYsNkNBQThDLEVBRTlDViwwQ0FBMkMsR0FFM0NtQiwrQkFBZ0MsR0FDaENKLHNCQUF1QixHQUN2QkMsaUNBQWtDLEdBQ2xDVCxpQ0FBa0MsR0FDbENELGlDQUFrQyxHQUVsQ1ksa0NBQW1DLE9BS25DRyxtQkFBb0IsR0FDcEJaLHVDQUF3QyxFQUV4Q1gsb0NBQXFDLEdBRXJDZSxnQkFBaUIsR0FDakJTLHlCQUEwQixHQUMxQjNNLGdCQUFpQixHQUNqQnlMLDJCQUE0QixHQUM1QjNMLDJCQUE0QixHQUU1QnFNLG1CQUFvQixFQUNwQkgsc0NBQXVDLEdBQUsvdkIsbUJBQzVDZ3dCLHlCQUEwQixFQUMxQlYsZ0JBQWlCLEVBQ2pCTixnQkFBaUIsRUFDakJyTCxrQkFBbUIsR0FDbkIwTSx5QkFBMEIsRUFDMUJULHdCQUF5QixFQUV6QmIscUJBQXNCLEVBRXRCcEssdUJBQXdCMWdDLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLRywwQkFDL0R3dkIsNkJBQThCLGNBRTlCQywyQkFBNEI1c0MsR0FBSyxHQUFLMGMsY0FBZSxHQUFLUywwQkFDMUQwdkIsZ0NBQWlDN3NDLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLUywwQkFDeEVxdkIsNkJBQThCOXNDLEdBQUssY0FDbkMrc0MsK0JBQWdDL3NDLEdBQUssY0FDckNndEMsOEJBQStCaHRDLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLTSwyQkFDdEVtakIsdUJBQXdCemdDLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLTSwyQkFDL0QydkIsZ0NBQWlDanRDLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLTywyQkFDeEUydkIsZ0NBQWlDbHRDLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLTSwyQkFDeEU2dkIsc0JBQXVCbnRDLEdBQUssR0FBS2dkLHVCQUF3QixHQUFLTSwyQkFDOUQ4dkIsNEJBQTZCcHRDLEdBQUssY0FDbENxdEMseUJBQTBCcnRDLEdBQUssR0FBSzBjLGVBQ3BDNHdCLDhCQUErQnR0QyxHQUFLLEdBQUswYyxlQUN6Q2trQixzQkFBdUI1Z0MsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUthLHlCQUM3RHd2Qiw0QkFBNkIsY0FFN0JDLDBCQUEyQnh0QyxHQUFLLEdBQUswYyxjQUFlLEdBQUtxQix5QkFDekQwdkIsK0JBQWdDenRDLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLbUIseUJBQ3RFcXZCLDRCQUE2QjF0QyxHQUFLLGVBQ2xDMnRDLDhCQUErQjN0QyxHQUFLLGVBQ3BDNHRDLDZCQUE4QjV0QyxHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2dCLDBCQUNwRXlpQixzQkFBdUIzZ0MsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtnQiwwQkFDN0QydkIsK0JBQWdDN3RDLEdBQUssR0FBS2tkLHNCQUF1QixHQUFLaUIsMEJBQ3RFMnZCLCtCQUFnQzl0QyxHQUFLLEdBQUtrZCxzQkFBdUIsR0FBS2dCLDBCQUN0RTZ2QixxQkFBc0IvdEMsR0FBSyxHQUFLa2Qsc0JBQXVCLEdBQUtnQiwwQkFDNUQ4dkIsMkJBQTRCaHVDLEdBQUssY0FDakNpdUMsd0JBQXlCanVDLEdBQUssR0FBSzBjLGVBQ25Dd3hCLDZCQUE4Qmx1QyxHQUFLLEdBQUswYyxnQkFJdEMsR0FBTSxDQUFDLEdBQVEsSUFDZixHQUFXLElBQUlsOEIsT0FwdEJOLGdCQ2ViLFNBQVMsR0FBZ0IrSixFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0R1cUJlLEdBQXNCLEdBQVUsR0FBS3dnRSxJQUNyQyxHQUFzQixHQUFVLEdBQUtBLElDdHFCcEQsSUFBSSxHQUFhLENBQ2Y1ckMsZUFBZ0IsU0FBd0IzakIsR0FDdEMsTUFBTyxFQUNULEdBSUUsR0FBVSxTQUFpQndtQyxHQUM3QixJQUFJbjNCLEVBRUosT0FBa0IsR0FBWEEsRUFBTyxDQUFDLEVBQXlCLFNBQVdtM0IsRUFBTyxRQUFTLFNBQVV4bUMsRUFBVWlpQixHQUNyRixNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixzQkFBdUIsQ0FDckIsdUJBQXdCLENBQ3RCcWtDLE1BQU9waUIsRUFBSyxTQUFXdWtCLEVBQU8sYUFJdEMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxjQUFlLFNBQVV4bUMsRUFBVWlpQixHQUM3RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQjNTLGdCQUFpQjQwQixFQUFLLFNBQVd1a0IsRUFBTyxpQkFFNUMsR0FBSSxHQUFnQm4zQixFQUFNLFNBQVdtM0IsRUFBTyxVQUFXLFNBQVV4bUMsRUFBVWlpQixHQUN6RSxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQixzQkFBdUIsQ0FDckIwcEMsWUFBYXpuQixFQUFLLFNBQVd1a0IsRUFBTyxjQUcxQyxHQUFJbjNCLENBQ04sRUFNSSxHQUFRbVYsR0FBWSxDQUN0QnZCLE9BQVEsQ0FDTndqQixhQU5lLEdBQVMsQ0FBQyxFQUFHLEdBQVksR0FBUSxVQU9oREMsWUFMYyxHQUFTLENBQUMsRUFBRyxHQUFZLEdBQVEsWUFjL0MsR0FBYSxTQUFvQnFoQixHQUNuQyxPQUFPLFNBS0svbkQsRUFBVTlNLEdBQ2xCLE9BQU8sR0FBZ0IsQ0FBQyxFQUFHNjBELEVBQWUsR0FBZ0IsQ0FBQyxFQUFHL25ELEVBQVU5TSxHQUU1RSxDQUNGLEVBVUk4OUQsR0FBc0IsU0FBNkJ2L0MsR0FDckQsSUFBSXcvQyxFQUVBanhELEVBQVd5UixFQUFNelIsU0FDakJpaUIsRUFBT3hRLEVBQU13USxLQUNiOG5CLEVBQVF0NEIsRUFBTXM0QixNQUNkbW5CLEVBQVV6L0MsRUFBTXkvQyxRQUNoQnI1QixFQUFTcTVCLEVBQVVqdkMsRUFBS2t2QyxhQUFlbHZDLEVBQUs0VixPQUVoRCxPQURTcTVCLEVBQVUsR0FBNkJ2dUMsSUFDdEMzaUIsRUFBVSxDQUNsQiw2RUFBOEVpeEQsRUFBb0IsQ0FBQyxFQUFHLEdBQWdCQSxFQUFtQmxuQixFQUFRLGFBQWUsY0FBZSxHQUFJLEdBQWdCa25CLEVBQW1CbG5CLEVBQVEsY0FBZ0IsYUFBY2xTLEVBQVMsTUFBT281QixJQUVoUixFQVVJRyxHQUFpQixTQUF1QnR0QyxHQUMxQyxJQUFJdXRDLEVBRUFyeEQsRUFBVzhqQixFQUFNOWpCLFNBQ2pCaWlCLEVBQU82QixFQUFNN0IsS0FDYjhuQixFQUFRam1CLEVBQU1pbUIsTUFDZG1uQixFQUFVcHRDLEVBQU1vdEMsUUFDaEJJLEVBQWdCSixFQUFVanZDLEVBQUtzdkMsb0JBQXNCdHZDLEVBQUtxdkMsY0FFOUQsT0FEU0osRUFBVSxHQUE2QnZ1QyxJQUN0QzNpQixFQUFVLENBQ2xCLCtCQUFnQ3F4RCxFQUFpQixDQUFDLEVBQUcsR0FBZ0JBLEVBQWdCdG5CLEVBQVEsYUFBZSxjQUFlLEdBQUksR0FBZ0JzbkIsRUFBZ0J0bkIsRUFBUSxjQUFnQixhQUFjdW5CLEVBQWdCLE1BQU9ELEdBQzVOLDhCQUErQixDQUM3QnBtQixXQUFZcW1CLEVBQWdCLEtBQzVCMWxCLFlBQWEwbEIsRUFBZ0IsT0FHbkMsRUFVSUUsR0FBeUMsU0FBZ0QxdkMsR0FDM0YsSUFBSTJ2QyxFQUVBenhELEVBQVc4aEIsRUFBTTloQixTQUNqQmlpQixFQUFPSCxFQUFNRyxLQUNiOG5CLEVBQVFqb0IsRUFBTWlvQixNQUNkbW5CLEVBQVVwdkMsRUFBTW92QyxRQUNoQmhzQyxFQUFVZ3NDLEVBQVVqdkMsRUFBS3l2QywrQkFBaUN6dkMsRUFBSzB2Qyx5QkFFbkUsT0FEU1QsRUFBVSxHQUE2QnZ1QyxJQUN0QzNpQixFQUFVLENBQ2xCLHVGQUF3Rnl4RCxFQUFpQixDQUFDLEVBQUcsR0FBZ0JBLEVBQWdCMW5CLEVBQVEsY0FBZ0IsYUFBYyxHQUFJLEdBQWdCMG5CLEVBQWdCMW5CLEVBQVEsYUFBZSxjQUFlN2tCLEVBQVUsTUFBT3VzQyxJQUVsUixFQUVJRyxHQUFzQixHQUFXLHNCQUFzQnZ1RCxPQUFPLEdBQU9tK0IsMEJBQTJCLHFDQUNoRyxHQUE2QixHQUFXLHNCQUFzQm4rQixPQUFPLEdBQU9vK0Isa0NBQW1DLFFBQy9HLEdBQVMsQ0FDWDlkLGVBQWdCLFNBQXdCM2pCLEdBQ3RDLE1BQU8sQ0FBQzJpQixHQUFJM2lCLEVBQVUsQ0FBQyxFQUFLa1ksT0FBUSxFQUFLZSxpQkFBa0IsRUFBS2QsYUFBYyxDQUM1RXZ0QixTQUFVLFdBQ1Y4dkIsT0FBUSxHQUFPb25CLFVBQ2YsT0FBUSxDQUNOdUgsZUFBZ0IsUUFFbEIseUJBQTBCLENBQ3hCbmtCLFFBQVMsR0FFWCxzQkFBdUIsQ0FDckI2bEIsWUFBYSxNQUNiZixZQUFhLHdCQUVmLE9BQVEsQ0FDTnB4QixXQUFZLEdBRWQsMERBQTJELENBQ3pEOGQsTUFBTyxPQUNQdmMsUUFBUyxRQUNURSxVQUFXLFlBQ1gzdEIsU0FBVSxTQUNWd3RCLGFBQWMsV0FDZGx1QixXQUFZLFNBQ1o0c0IsV0FBWSxHQUVkLDhCQUErQixDQUM3QjB3QixVQUFXLFNBQ1g4QixlQUFnQixVQUVsQixnQkFBaUIsQ0FDZk0sWUFBYSxPQUNiQyxhQUFjLFFBRWhCLFdBQVksQ0FBQzV4QixJQUFhLENBQ3hCb0wsT0FBUSxPQUdkLEVBQ0E3NEIsT0FBUSxTQUFnQjBULEVBQVVpaUIsR0FDaEMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIxVCxPQUFRMjFCLEVBQUszMUIsT0FBUyxPQUUxQixFQUNBdWxFLGVBQWdCLFNBQXdCN3hELEVBQVVpaUIsR0FDaEQsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsdUJBQXdCLENBQ3RCMVQsT0FBUTIxQixFQUFLNHZDLGVBQWlCLFFBRTlCRCxHQUFvQjV4RCxFQUFVLENBQ2hDMVQsT0FBUTIxQixFQUFLMzFCLE9BQVMsT0FFMUIsRUFDQWd6QyxZQUFhLFNBQXFCdC9CLEVBQVVpaUIsR0FDMUMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIzVCxXQUFZNDFCLEVBQUtxZCxZQUFjLEtBQy9CLDBEQUEyRCxDQUN6RGp6QyxXQUFZNDFCLEVBQUtxZCxlQUd2QixFQUNBNE0sVUFBVyxTQUFtQmxzQyxFQUFVaWlCLEdBQ3RDLE1BQU8sQ0FBQ1UsR0FBSTNpQixFQUFVLENBQ3BCLHNFQUF1RSxDQUNyRXVwQyxTQUFVdG5CLEVBQUtpcUIsVUFBWSxRQUdqQyxFQUNBSixZQUFhLFNBQXFCOXJDLEVBQVVpaUIsR0FDMUMsTUFBTyxDQUFDVSxHQUFJM2lCLEVBQVUsQ0FDcEIsMERBQTJELENBQ3pEK3JDLFdBQVk5cEIsRUFBSzZwQixlQUd2QixFQUNBZ21CLGFBQWMsU0FBc0I5eEQsRUFBVWlpQixHQUM1QyxNQUFPLENBQUNVLEdBQUkzaUIsRUFBVSxDQUNwQmtsQixRQUFTLEtBQU9qRCxFQUFLNnZDLGFBQWUsT0FDbENkLEdBQW9CLENBQ3RCaHhELFNBQVVBLEVBQ1ZpaUIsS0FBTUEsSUFDSit1QyxHQUFvQixDQUN0Qmh4RCxTQUFVNGlCLEdBQVk1aUIsR0FDdEJpaUIsS0FBTUEsRUFDTjhuQixPQUFPLElBRVgsRUFDQWxTLE9BQVEsU0FBZ0I3M0IsRUFBVWlpQixHQUNoQyxNQUFPLENBQUMrdUMsR0FBb0IsQ0FDMUJoeEQsU0FBVUEsRUFDVmlpQixLQUFNQSxJQUNKK3VDLEdBQW9CLENBQ3RCaHhELFNBQVU0aUIsR0FBWTVpQixHQUN0QmlpQixLQUFNQSxFQUNOOG5CLE9BQU8sSUFFWCxFQUNBb25CLGFBQWMsU0FBc0JueEQsRUFBVWlpQixHQUM1QyxNQUFPLENBQUMrdUMsR0FBb0IsQ0FDMUJoeEQsU0FBVUEsRUFDVmlpQixLQUFNQSxFQUNOaXZDLFNBQVMsSUFDUEYsR0FBb0IsQ0FDdEJoeEQsU0FBVTRpQixHQUFZNWlCLEdBQ3RCaWlCLEtBQU1BLEVBQ044bkIsT0FBTyxFQUNQbW5CLFNBQVMsSUFFYixFQUNBSSxjQUFlLFNBQXVCdHhELEVBQVVpaUIsR0FDOUMsTUFBTyxDQUFDbXZDLEdBQWUsQ0FDckJweEQsU0FBVUEsRUFDVmlpQixLQUFNQSxJQUNKbXZDLEdBQWUsQ0FDakJweEQsU0FBVTRpQixHQUFZNWlCLEdBQ3RCaWlCLEtBQU1BLEVBQ044bkIsT0FBTyxJQUVYLEVBQ0F3bkIsb0JBQXFCLFNBQTZCdnhELEVBQVVpaUIsR0FDMUQsTUFBTyxDQUFDbXZDLEdBQWUsQ0FDckJweEQsU0FBVUEsRUFDVmlpQixLQUFNQSxFQUNOaXZDLFNBQVMsSUFDUEUsR0FBZSxDQUNqQnB4RCxTQUFVNGlCLEdBQVk1aUIsR0FDdEJpaUIsS0FBTUEsRUFDTjhuQixPQUFPLEVBQ1BtbkIsU0FBUyxJQUViLEVBQ0FTLHlCQUEwQixTQUFrQzN4RCxFQUFVaWlCLEdBQ3BFLE1BQU8sQ0FBQ3V2QyxHQUF1QyxDQUM3Q3h4RCxTQUFVQSxFQUNWaWlCLEtBQU1BLElBQ0p1dkMsR0FBdUMsQ0FDekN4eEQsU0FBVTRpQixHQUFZNWlCLEdBQ3RCaWlCLEtBQU1BLEVBQ044bkIsT0FBTyxJQUVYLEVBQ0EybkIsK0JBQWdDLFNBQXdDMXhELEVBQVVpaUIsR0FDaEYsTUFBTyxDQUFDdXZDLEdBQXVDLENBQzdDeHhELFNBQVVBLEVBQ1ZpaUIsS0FBTUEsRUFDTml2QyxTQUFTLElBQ1BNLEdBQXVDLENBQ3pDeHhELFNBQVU0aUIsR0FBWTVpQixHQUN0QmlpQixLQUFNQSxFQUNOOG5CLE9BQU8sRUFDUG1uQixTQUFTLElBRWIsRUFDQWEsYUFBYyxTQUFzQi94RCxFQUFVaWlCLEdBQzVDLE1BQU8sQ0FBQyxHQUEyQmppQixFQUFVLENBQzNDMVQsT0FBUTIxQixFQUFLOHZDLGFBQWUsT0FFaEMsRUFDQUMsbUJBQW9CLFNBQTRCaHlELEVBQVVpaUIsR0FDeEQsTUFBTyxDQUFDLEdBQTJCamlCLEVBQVUsQ0FDM0NrbEIsUUFBUyxLQUFPakQsRUFBSyt2QyxtQkFBcUIsT0FFOUMsR0FFRSxHQUFTbnVDLEdBQWEsQ0FDeEJaLE9BQVEsS0FJTjZ1QyxHQUE0QyxFQUE3QixHQUFPcjBCLG9CQUEwQixHQUVoRHUwQixHQUFrRCxFQUE3QixHQUFPdjBCLG9CQUEwQixHQUV0RCxHQUFPLENBSVQ5WixnQkFBZ0IsRUFDaEJ1b0IsVUFBVyxHQUNYSixZQUFhLElBQ2J4L0MsT0FBcUMsRUFBN0IsR0FBT214QyxvQkFFZm8wQixlQUE2QyxFQUE3QixHQUFPcDBCLG9CQUV2QnMwQixhQUEyQyxFQUE3QixHQUFPdDBCLG9CQUVyQjZCLFlBQWEsR0FBT0EsWUFDcEJ3eUIsYUFBY0EsR0FDZEUsbUJBQW9CQSxHQUNwQm42QixPQUFRLEdBQU9tRyxZQUFjOHpCLEdBQzdCWCxhQUFjLEdBQU9sekIsa0JBQW9CK3pCLEdBQ3pDTCx5QkFBMEIsRUFDMUJELCtCQUFnQyxHQUNoQ0osY0FBZSxHQUNmQyxvQkFBcUIsRUFDckJya0IsaUJBQWtCcnFCLEdBQUssR0FBT2dkLHVCQUF3QixHQUFPRywwQkFDN0Q2TSxtQkFBb0JocUIsR0FBSyxHQUFPZ2QsdUJBQXdCLEdBQU9TLDBCQUMvRFYsdUJBQXdCL2MsR0FBSyxHQUFPK2Msd0JBQ3BDOE4sZ0JBQWlCN3FCLEdBQUssR0FBT2tkLHNCQUF1QixHQUFPYSx5QkFDM0RtTSxrQkFBbUJscUIsR0FBSyxHQUFPa2Qsc0JBQXVCLEdBQU9tQix5QkFDN0RwQixzQkFBdUJqZCxHQUFLLEdBQU9pZCx3QkFJakMsR0FBTSxDQUFDLEdBQVEsSUFDZixHQUFXLElBQUl6OEIsT0FoWU4sY0MwQlQsSUR1V1csR0FBc0IsR0FBVSxHQUFLLElBQ3JDLEdBQXNCLEdBQVUsR0FBSyxJQ3hXMUMsQ0E1QkUsV0FDVixNQUFPLENBQUMsQ0FFTixRQUFTLENBQ1AsYUFBYyxjQUVoQix3QkFBeUIsQ0FDdkIsYUFBYyxXQUVoQixLQUFNLENBQ04sQ0FDRSw4QkFBK0IsaUJBQzlCLENBQ0QsOEJBQStCLGdCQUlqQywrQ0FBZ0QsQ0FDOUMrbEMsUUFBUyxHQUdYLGtCQUFtQixDQUNqQnJtQixRQUFTLElBR2QsSUFLRyxHQUFPLENBQUMsRUMvQlosU0FBUyxLQWVQLE9BZEEsR0FBVzF4QixPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDRGdCZSxHQUZBLEdBRWdDLEdBQUssSUFDckMsR0FIQSxHQUdnQyxHQUFLLElDMEs3QixHQUNkeEUsT0FBTytQLHVCQUF5Qi9QLE9BQU8wbkUsNkJBQStCMW5FLE9BQWlDLHlCQTFMaEgsSUNzR0ksR0FBTSxDQXJIUSxXQUNoQixNQUFPLENBQUMsQ0FDTiw4Q0FBK0MsQ0FDN0MybkUsV0FBWSx5Q0FHbEIsRUFTaUIsV0FDZixNQUFPLENBQUMsQ0FDTiw2QkFBOEIsQ0FDNUIvc0MsT0FBUSxFQUNSRCxRQUFTLElBRVYsQ0FDRCwwQkFBMkIsQ0FDekIsU0FBVSxDQUNSLGNBQWUsR0FBS2dhLG1CQUNwQixjQUFlLEdBQUtJLFlBQ3BCLGlCQUFrQixVQUNsQixZQUFhLFdBR2hCLENBQ0QsTUFBTyxDQUNMLFlBQWEsT0FDYixjQUFlLEdBQUtKLG1CQUNwQixjQUFlLEdBQUtJLFlBQ3BCLGFBQWMsT0FDZCxnQkFBaUIsU0FFbEIsQ0FDRCxNQUFPLENBQ0wsWUFBYSxPQUNiLGNBQWUsR0FBS0osbUJBQ3BCLGNBQWUsR0FBS0ksWUFDcEIsYUFBYyxPQUNkLGdCQUFpQixTQUVsQixDQUNELE1BQU8sQ0FDTCxZQUFhLE9BQ2IsY0FBZSxHQUFLSixtQkFDcEIsY0FBZSxHQUFLSSxZQUNwQixhQUFjLE9BQ2QsZ0JBQWlCLFNBRWxCLENBQ0QsTUFBTyxDQUNMLFlBQWEsT0FDYixjQUFlLEdBQUtKLG1CQUNwQixjQUFlLEdBQUtJLFlBQ3BCLDBCQUEyQixZQUMzQixhQUFjLE9BQ2QsZ0JBQWlCLFNBRWxCLENBQ0QsTUFBTyxDQUNMLFlBQWEsT0FDYixjQUFlLEdBQUtILG1CQUNwQixjQUFlLEdBQUtHLFlBQ3BCLGlCQUFrQixVQUNsQixhQUFjLE9BQ2QsZ0JBQWlCLFNBRWxCLENBQ0QsTUFBTyxDQUNMLFlBQWEsT0FDYixjQUFlLEdBQUtKLG1CQUNwQixjQUFlLEdBQUtJLFlBQ3BCLGlCQUFrQixTQUNsQixhQUFjLE9BQ2QsZ0JBQWlCLFNBRWxCLENBQ0QsY0FBZSxDQUNiLFlBQWEsT0FDYixjQUFlLEdBQUtBLFlBQ3BCLGNBQWUsR0FBS0osb0JBRXRCLEtBQU0sQ0FDSixZQUFhLE9BQ2IsY0FBZSxHQUFLQSxtQkFDcEIsY0FBZSxHQUFLSSxZQUNwQixpQkFBa0IsSUFDbEIsZ0JBQWlCLFFBRW5CLGNBQWUsQ0FDYixTQUFZLFdBQ1osWUFBYSxPQUNiLGNBQWUsR0FBS0osbUJBQ3BCLGFBQWMsU0FDZCxjQUFlLEdBQUtJLFlBQ3BCLGlCQUFrQixTQUNsQixhQUFjLE9BQ2QsZ0JBQWlCLFFBRW5CLFVBQVcsQ0FDVCxZQUFhLE9BQ2IsY0FBZSxHQUFLSixtQkFDcEIsY0FBZSxHQUFLSSxZQUNwQixpQkFBa0IsR0FFcEIsYUFBYyxDQUNaLGNBQWUsR0FBS0gscUJBR3pCLEdBMEJHZ3pCLElBbkJXLEdBREEsR0FDZ0MsR0FBSyxJQW1CcEMsWUQ3SEMsU0FBb0JDLEVBQVEvekQsR0FDM0MsSUFBSSxFQUFKLENBRUEsSUFBSzlULE9BQXNCLGNBQUcsQ0FPNUIsSUFBSThuRSxFQUFZLFNBQW1CaGpELEdBQ2pDLElBQUk1VCxFQUFPNFQsRUFBSzVULEtBQ1o2MkQsRUFBYWpqRCxFQUFLaWpELFdBQ2xCQyxFQUFNbGpELEVBQUtrakQsSUFDZixPQUFPdnhELEVBQUssZ0JBQWlCLENBQzNCdkYsS0FBTUEsRUFDTjYyRCxXQUFZQSxFQUNaQyxJQUFLQSxFQUNMSCxPQUFRQSxFQUNSL3pELE9BQVFBLEdBRVosRUFFQTlULE9BQXNCLGNBQUksQ0FDeEJpb0UsUUFBUyxXQUNQLE9BQU9ILEVBQVUsQ0FDZjUyRCxLQUFNLFdBRVYsRUFDQTNCLE9BQVEsV0FDTixPQUFPdTRELEVBQVUsQ0FDZjUyRCxLQUFNLFVBRVYsRUFDQTJVLFNBQVUsV0FDUixPQUFPaWlELEVBQVUsQ0FDZjUyRCxLQUFNLFlBRVYsRUFDQWczRCxZQUFhLFNBQXFCSCxFQUFZQyxHQUM1QyxPQUFPRixFQUFVLENBQ2Y1MkQsS0FBTSxjQUNONjJELFdBQVlBLEVBQ1pDLElBQUtBLEdBRVQsRUFDQUcsV0FBWSxTQUFvQkosRUFBWUMsR0FDMUMsT0FBT0YsRUFBVSxDQUNmNTJELEtBQU0sYUFDTjYyRCxXQUFZQSxFQUNaQyxJQUFLQSxHQUVULEVBQ0FJLGFBQWMsU0FBc0JMLEVBQVlDLEdBQzlDLE9BQU9GLEVBQVUsQ0FDZjUyRCxLQUFNLGVBQ042MkQsV0FBWUEsRUFDWkMsSUFBS0EsR0FFVCxHQUdGLFdBQ0UsSUFBSUssRUFBSzNuRSxTQUFTSyxjQUFjLFVBQ2hDc25FLEVBQUcxOEIsS0FBc0MsV0FBL0JqckMsU0FBU3FmLFNBQVN1b0QsU0FBd0IsUUFBVSxRQUFVLHdEQUN4RUQsRUFBRzU2RCxLQUFPLGtCQUNWNDZELEVBQUcxMUQsT0FBUSxFQUNYLElBQUk0VixFQUFJN25CLFNBQVM2bkUscUJBQXFCLFVBQVUsR0FFNUNoZ0QsR0FBS0EsRUFBRTNuQixZQUNUMm5CLEVBQUUzbkIsV0FBV29MLGFBQWFxOEQsRUFBSTkvQyxFQUVqQyxDQVZELEVBV0YsQ0FFQSxJQUFJaWdELEVBQVl4b0UsT0FBc0IsY0FBRTZuRSxJQUFXLENBQUMsRUFFaEQvekQsR0FDRixHQUFTMDBELEVBQVcxMEQsR0FHdEI5VCxPQUFzQixjQUFFNm5FLEdBQVVXLENBaEZkLENBaUZ0QixDQzRDRUMsQ0FBVyxTQUFVLENBQ25CQyxTQUFVLENBQUMsdUNBRWYsR2hDNkRTLEdBQWdCLENBQ3JCL3lDLFVBQVcsQ0FBQ2xnQixJQUNaZ2lCLElBQUtBLEdBQ0xDLEtBQU1zbEIsS0V5a0JELEdBQWdCLENBQ3JCcm5CLFVBQVcsQ0FBQ3F1QixJQUNadnNCLElBQUtzc0IsR0FDTHJzQixLQUFNa3NCLEtBakNSLEdBQWdCLENBQ2RqdUIsVUFBVyxDQUFDbXVCLElBQ1pyc0IsSUFBS29zQixHQUNMbnNCLEtBQU1nckIsS0FFUixHQUFnQixDQUNkL3NCLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNZ3JCLEtDNXRCRCxHQUFnQixDQUNyQi9zQixVQUFXLENBQUMsSUFDWjhCLElBQUssR0FDTEMsS0FBTXdzQixLQ21yQlIsR0FBZ0IsQ0FDZHZ1QixVQUFXLENBQUMsSUFDWjhCLElBQUt3d0IsR0FDTHZ3QixLQUFNcXZCLEtBRVIsR0FBZ0IsQ0FDZHB4QixVQUFXLENBQUNveUIsSUFDWnR3QixJQUFLeXdCLEdBQ0x4d0IsS0FBTXF2QixLQUVSLEdBQWdCLENBQ2RweEIsVUFBVyxDQUFDbXlCLElBQ1pyd0IsSUFBSzB3QixHQUNMendCLEtBQU1xdkIsS0FFUixHQUFnQixDQUNkcHhCLFVBQVcsQ0FBQ3F5QixJQUNadndCLElBQUswd0IsR0FDTHp3QixLQUFNcXZCLEtFNXNCRCxHQUFnQixDQUNyQnB4QixVQUFXLENBQUMsSUFDWjhCLElBQUssR0FDTEMsS0FBTTB5QixLRTBURCxHQUFnQixDQUNyQnowQixVQUFXLENBQUMsSUFDWjhCLElBQUssR0FDTEMsS0FBTW0wQixLRE9ELEdBQWdCLENBQ3JCbDJCLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNMnpCLEtFb05ELEdBQWdCLENBQ3JCMTFCLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNdTJCLEtDclpELEdBQWdCLENBQ3JCdDRCLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNLEtDekJELEdBQWdCLENBQ3JCL0IsVUFBVyxDQUFDLElBQ1o4QixJQUFLLEdBQ0xDLEtBQU02MkIsS0NpSkQsR0FBZ0IsQ0FDckI1NEIsVUFBVyxDQUFDLElBQ1o4QixJQUFLLEdBQ0xDLEtBQU1vM0IsS0N6SkQsR0FBZ0IsQ0FDckJuNUIsVUFBVyxDQUFDLElBQ1o4QixJQUFLLEdBQ0xDLEtBQU00M0IsS0NrRUQsR0FBZ0IsQ0FDckIzNUIsVUFBVyxDQUFDLElBQ1o4QixJQUFLLEdBQ0xDLEtBQU1nNEIsS0NnaEJELEdBQWdCLENBQ3JCLzVCLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNdzZCLEtFaG5CRCxHQUFnQixDQUNyQnY4QixVQUFXLENBQUMsSUFDWjhCLElBQUssR0FDTEMsS0FBTTArQixLRGlZRCxHQUFnQixDQUNyQnpnQyxVQUFXLENBQUMsSUFDWjhCLElBQUssR0FDTEMsS0FBTTI5QixLRW5GRCxHQUFnQixDQUNyQjEvQixVQUFXLENBQUMsSUFDWjhCLElBQUssR0FDTEMsS0FBTTYrQixLQzFHUixHQUFnQixDQUNkNWdDLFVBQVcsQ0FBQ2pMLElBQ1orTSxJQUFLaWdDLEdBQ0xoZ0MsS0FBTTYvQixLQUVSLEdBQWdCLENBQ2Q1aEMsVUFBVyxDQUFDLElBQ1o4QixJQUFLLEdBQ0xDLEtBQU02L0IsS0MxU0QsR0FBZ0IsQ0FDckI1aEMsVUFBVyxDQUFDLElBQ1o4QixJQUFLLEdBQ0xDLEtBQU1pZ0MsS0N1RkQsR0FBZ0IsQ0FDckJoaUMsVUFBVyxDQUFDLElBQ1o4QixJQUFLLEdBQ0xDLEtBQU1rZ0MsS0NnS0QsR0FBZ0IsQ0FDckJqaUMsVUFBVyxDQUFDLElBQ1o4QixJQUFLLEdBQ0xDLEtBQU1taEMsS2pCcUZELEdBQWdCLENBQ3JCbGpDLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNeXhCLEtKdExELEdBQWdCLENBQ3JCeHpCLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNLEtzQjJnQkQsR0FBZ0IsQ0FDckIvQixVQUFXLENBQUMsSUFDWjhCLElBQUssR0FDTEMsS0FBTSxLQ3hmUixHQUFnQixDQUNkL0IsVUFBVyxDQUFDLElBQ1o4QixJQUFLLEdBQ0xDLEtBQU1vbUMsS0FFUixHQUFnQixDQUNkbm9DLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNb21DLEtDNUhELEdBQWdCLENBQ3JCbm9DLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNc21DLEtDaVZELEdBQWdCLENBQ3JCcm9DLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNOG5DLEtDOE1SLEdBQWdCLENBQ2Q3cEMsVUFBVyxDQUFDb3RDLElBQ1p0ckMsSUFBS29yQyxHQUNMbnJDLEtBQU02cUMsS0FFUixHQUFnQixDQUNkNXNDLFVBQVcsQ0FBQ3N0QyxJQUNaeHJDLElBQUtxckMsR0FDTHByQyxLQUFNNnFDLEtDdURELEdBQWdCLENBQ3JCNXNDLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNc3RDLEtDdFZELEdBQWdCLENBQ3JCcnZDLFVBQVcsQ0FBQyxJQUNaOEIsSUFBSyxHQUNMQyxLQUFNLEtDdldELEdBQWdCLENBQ3JCRyxXQUFZLFVBQ1psQyxVQUFXLENBUkEsSUFTWDhCLElBQUssR0FDTEMsS0FBTSxLLHlCR3hDVixTQUFTLEtBZVAsT0FkQSxHQUFXNXdCLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENBc0NBLFNBQVMsR0FBZXdmLEVBQUs3ZSxHQUMzQixPQUdGLFNBQXlCNmUsR0FDdkIsR0FBSXZhLE1BQU11RCxRQUFRZ1gsR0FBTSxPQUFPQSxDQUNqQyxDQUxTLENBQWdCQSxJQU96QixTQUErQkEsRUFBSzdlLEdBQ2xDLElBQUkrZSxFQUFPLEdBQ1BDLEdBQUssRUFDTEMsR0FBSyxFQUNMQyxPQUFLM2QsRUFFVCxJQUNFLElBQUssSUFBaUM0ZCxFQUE3QkMsRUFBS1AsRUFBSVEsT0FBT0MsY0FBbUJOLEdBQU1HLEVBQUtDLEVBQUdoUSxRQUFRMkQsUUFDaEVnTSxFQUFLN1osS0FBS2lhLEVBQUdqaUIsUUFFVDhDLEdBQUsrZSxFQUFLcmUsU0FBV1YsR0FIOENnZixHQUFLLEdBS2hGLENBQUUsTUFBTy9NLEdBQ1BnTixHQUFLLEVBQ0xDLEVBQUtqTixDQUNQLENBQUUsUUFDQSxJQUNPK00sR0FBc0IsTUFBaEJJLEVBQVcsUUFBV0EsRUFBVyxRQUM5QyxDQUFFLFFBQ0EsR0FBSUgsRUFBSSxNQUFNQyxDQUNoQixDQUNGLENBRUEsT0FBT0gsQ0FDVCxDQS9CaUMsQ0FBc0JGLEVBQUs3ZSxJQWlDNUQsV0FDRSxNQUFNLElBQUlnSyxVQUFVLHVEQUN0QixDQW5Da0UsRUFDbEUsQ0FvQ0EsSUE2QkksR0FBVSxDQUNaME4sVUFBVyxVQUVYOHJELE1BQU8saUJBQ1B4OEQsUUFBUyxtQkFDVHNaLFlBQWEsdUJBQ2Jnb0IsU0FBVSxvQkFFVjJlLFNBQVUsb0JBQ1Z3YyxPQUFRLGtCQUNSeGpELFVBQVcscUJBQ1gwb0IsYUFBYyxvQkFDZEQsUUFBUyxtQkFDVGc3QixXQUFZLHNCQUNaQyxRQUFTLGtCQUNUQyxVQUFXLG9CQUVYQyxTQTdDVyxlQThDWEMsaUJBekJVLDBCQy9HWixTQUFTLEdBQWdCcG1ELEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsR0FBUTdTLEVBQVFrVCxHQUN2QixJQUFJL0gsRUFBT3JVLE9BQU9xVSxLQUFLbkwsR0FFdkIsR0FBSWxKLE9BQU9xYyxzQkFBdUIsQ0FDaEMsSUFBSUMsRUFBVXRjLE9BQU9xYyxzQkFBc0JuVCxHQUN2Q2tULElBQWdCRSxFQUFVQSxFQUFRbkosT0FBTyxTQUFVb0osR0FDckQsT0FBT3ZjLE9BQU8yWCx5QkFBeUJ6TyxFQUFRcVQsR0FBS1QsVUFDdEQsSUFDQXpILEVBQUs5USxLQUFLOUYsTUFBTTRXLEVBQU1pSSxFQUN4QixDQUVBLE9BQU9qSSxDQUNULENBc0JBLElBa0RJK3RELEdBQWUxOEIsR0RzRFAsU0FBZTFuQixHQUN6QixJQUFJQyxFQUFJRCxFQUFLQyxFQUNUaGIsRUFBSSthLEVBQUsvYSxFQUNUbzdCLEVBQWFyZ0IsRUFBS3FnQixXQUNsQm5nQixFQUFXRixFQUFLRSxTQUNoQkMsRUFBWUgsRUFBS0csVUFDakJ5Z0IsRUFBUzVnQixFQUFLNGdCLE9BQ2Q2RyxFQUFTem5CLEVBQUt5bkIsT0FDZE0sRUFBUy9uQixFQUFLK25CLE9BQ2QzbkIsRUFwSU4sU0FBa0M3WSxFQUFRcVgsR0FDeEMsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBRTVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBbEJOLFNBQXVDTSxFQUFRcVgsR0FDN0MsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBQzVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBQVMsQ0FBQyxFQUNWNFgsRUFBYTdjLE9BQU9xVSxLQUFLOU8sR0FHN0IsSUFBS2xILEVBQUksRUFBR0EsRUFBSXdlLEVBQVc5ZCxPQUFRVixJQUNqQ2lCLEVBQU11ZCxFQUFXeGUsR0FDYnVlLEVBQVM1VixRQUFRMUgsSUFBUSxJQUM3QjJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLElBR3ZCLE9BQU8yRixDQUNULENBS2UsQ0FBOEJNLEVBQVFxWCxHQUluRCxHQUFJNWMsT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJVSxFQUFtQi9jLE9BQU9xYyxzQkFBc0I5VyxHQUVwRCxJQUFLbEgsRUFBSSxFQUFHQSxFQUFJMGUsRUFBaUJoZSxPQUFRVixJQUN2Q2lCLEVBQU15ZCxFQUFpQjFlLEdBQ25CdWUsRUFBUzVWLFFBQVExSCxJQUFRLEdBQ3hCVSxPQUFPRyxVQUFVNmMscUJBQXFCMWMsS0FBS2lGLEVBQVFqRyxLQUN4RDJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRXpCLENBRUEsT0FBTzJGLENBQ1QsQ0FpSGMsQ0FBeUIrWSxFQUFNLENBQUMsSUFBSyxJQUFLLGFBQWMsV0FBWSxZQUFhLFNBQVUsU0FBVSxXQUk3RzhILEVBRGUsR0FERHVZLEVBQVc1WixFQUF3QkgsR0FDTixHQUNKLEdBR3ZDakcsRUFBYSxHQURESCxJQUMyQixHQUN2QzZxQixFQUFhMXFCLEVBQVcsR0FDeEIycUIsRUFBZ0IzcUIsRUFBVyxHQUkzQmdrRCxFQURhLEdBREFua0QsSUFBV0UsRUFBTUUsV0FDVSxHQUNkLEdBRTFCZ2tELEVBQWExakMsSUFDYm9NLEVBQWVwTSxJQUVmamxCLEVBQVMsV0FDWDRvRCxJQUNBQyxHQUNGLEVBRUl2M0IsRUFBb0IsU0FBMkI3cUIsR0FDakQsSUFBSTJGLEVBQVMzRixFQUFNMkYsT0FDZjA4QyxFQUFrQnJpRCxFQUFNbUcsVUFDeEJBLE9BQWdDLElBQXBCazhDLEVBQTZCcmtELEVBQU1tSSxVQUFZazhDLEVBQy9ELE1BQU8sQ0FDTDM4Qyx3QkFBeUJBLEVBQ3pCdThDLGFBQWNBLEVBQ2Rqa0QsTUFBTyxHQUFTLENBQUMsRUFBR0EsRUFBTyxDQUN6Qm1JLFVBQVdBLElBRWJSLE9BQVFBLEVBQ1JFLGlCQUFrQkYsRUFBUyxXQUN6QixPQUFPcE0sR0FDVCxFQUFJLEtBQ0pxTSxZQUFhLENBQ1hyc0IsR0FBSTJvRSxFQUFXeGpDLFFBQ2ZwWixpQkFBa0JxakIsR0FFcEJ0akIsVUFBVyxHQUFRc2hCLFFBRXZCLEVBV0l3N0IsRUFBZSxXQUNqQixJQUFJLEdBSUNua0QsRUFBTW5aLE9BQVgsQ0FJQSxJQUFJeTlELEVBQVVKLEVBQVd4akMsUUFDckJxTSxFQUFZSCxFQUFhbE0sUUFDekI2akMsRUFBVy9vRSxTQUFTQyxjQUFjdWtCLEVBQU1uWixRQUU1QyxHQUFLMDlELEdBSUFELEVBQUwsQ0FLQSxJQUFJRSxFQUF3QnppRCxFQUFpQixDQUMzQzdtQixRQUFTb3BFLEVBQ1QzbkUsS0FBTSxXQUNOdWxCLE9BQVEsVUFHVixHQUFJc2lELElBcENHeGtELEVBQU15a0QsVUFBVzFpRCxFQUFpQixDQUN2QzdtQixRQUFTeXZDLEVBQ1Qxb0IsZUFBZ0IsVUFDaEJ0bEIsS0FBTSxVQUNOdU4sU0FBVSxJQUFLMEosT0FBTyxXQUFZLE9BcUNsQyxPQUpBLEdBQVMwd0QsRUFBUXJvRSxNQUFPLENBQUMsUUFFekJxb0UsRUFBUS84QyxhQUtWLElBQUltOUMsRUFBYUosRUFBUTVvRSxXQUFXbXdDLHdCQUNoQzg0QixFQUFhSixFQUFTMTRCLHdCQUN0Qis0QixPQUFpQ3BqRSxJQUFsQndlLEVBQU02a0QsUUFBd0I3a0QsRUFBTTZrRCxhQUEyQnJqRSxJQUFqQndlLEVBQU16SSxPQUF1QnlJLEVBQU16SSxPQW5IakYsRUFxSGZ1dEQsT0FBaUN0akUsSUFBbEJ3ZSxFQUFNK2tELFFBQXdCL2tELEVBQU0ra0QsUUFwSHBDLE1BcUhmRixHQUFvRCxJQUExQ0QsRUFBYTcrRCxXQUFXNkMsUUFBUSxLQUFjd0wsS0FBS2tiLE1BQWlDLElBQTNCOU0sV0FBV29pRCxHQUF1QkQsRUFBVzE5QixPQUFTN3lCLEtBQUtrYixNQUFNOU0sV0FBV29pRCxJQUUvSUksR0FEb0QsSUFBMUNGLEVBQWEvK0QsV0FBVzZDLFFBQVEsS0FBY3dMLEtBQUtrYixNQUFpQyxJQUEzQjlNLFdBQVdzaUQsR0FBdUJILEVBQVc5bkUsUUFBVXVYLEtBQUtrYixNQUFNOU0sV0FBV3NpRCxJQUVoSkcsRUFBY2psRCxFQUFNMGpELFFBQVUsTUFDOUJBLEVBQVN1QixFQUFZajBELE1BQU0sT0FBT2tRLE9BQU8sU0FBVU4sRUFBS3NrRCxHQUMxRCxPQUFPdGtELEVBQUlza0QsSUFBUSxFQUFNdGtELENBQzNCLEVBQUcsQ0FBQyxHQUNBdWtELEVBQVlwNEIsRUFBVU8saUJBQWlCLElBQU0sR0FBUXcyQixVQUFVLEdBRW5FLEdBQUk5akQsRUFBTW9sRCxXQUFZLENBRXBCLElBQUlDLEVBQWV0NEIsRUFBVXR4QyxjQUFjLElBQU0sR0FBUXNvRSxrQkFFekQsR0FBSW9CLEdBQWFFLEVBQWMsQ0FFN0IsSUFBSUMsRUFBZ0JILEVBQVV0NUIsd0JBQzFCMDVCLEVBQW1CRixFQUFheDVCLHdCQUNwQ201QixFQUFrQk0sRUFBYzluRSxJQUFNK25FLEVBQWlCL25FLEdBQ3pELENBR0EsSUFDSWdvRSxHQURVSCxHQUFnQkYsR0FDTnQ1Qix3QkFJcEI0NUIsRUFGY2xCLEVBQVMxNEIsd0JBRUVodkMsT0FBUzJvRSxFQUFVM29FLE9BQ2hEbW9FLEdBQW1CNXdELEtBQUtzeEQsSUFBSUQsR0FBYyxDQUM1QyxNQUFXemxELEVBQU0wakQsU0FBV2MsSUFDdEJkLEVBQU9sbUUsSUFDVHduRSxHQUFtQkwsRUFBV25uRSxJQUFNa25FLEVBQVdsbkUsSUFDdENrbUUsRUFBTzE0QyxTQUNoQmc2QyxHQUFtQkwsRUFBV25uRSxJQUFNa25FLEVBQVcxNUMsU0FJbkQsR0FBSWhMLEVBQU1uakIsT0FBUSxDQUNoQixJQUFJOG9FLEVBQWtCUixFQUFZQSxFQUFVUyxhQUFlLEdBRTNELEdBQXFCLFFBQWpCNWxELEVBQU1uakIsT0FBa0IsQ0FDMUIsSUFBSWdwRSxFQUFZYixFQUNaYyxFQUFlSCxFQUNuQnJCLEVBQVFyb0UsTUFBTVksT0FBUyxlQUFlK1csT0FBT2l5RCxFQUFZQyxFQUFjLE1BQ3pFLEtBQU8sQ0FDTCxJQUFJanBFLEVBQVMsUUFBUTRPLEtBQUt1VSxFQUFNbmpCLE9BQU9rSixZQUFjLEdBQUc2TixPQUFPb00sRUFBTW5qQixPQUFRLE1BQVFtakIsRUFBTW5qQixPQUMzRnluRSxFQUFRcm9FLE1BQU1ZLE9BQVNBLENBQ3pCLENBQ0YsQ0FHQSxJQUFJOHBCLEVBQXFCMjlDLEVBQVFyb0UsTUFBTTBxQixtQkFDdkMyOUMsRUFBUXJvRSxNQUFNMHFCLG1CQUFxQixNQUUvQjI5QyxFQUFRNW9FLGFBQWU4b0UsSUFDckJkLEVBQU8zNEMsTUFDVHU1QyxFQUFRcm9FLE1BQU04dUIsTUFBUTQ1QyxFQUFXNTVDLE1BQVEyNUMsRUFBVzM1QyxNQUFRODVDLEVBQVUsS0FFdEVQLEVBQVFyb0UsTUFBTXlCLEtBQU9pbkUsRUFBV2puRSxLQUFPZ25FLEVBQVdobkUsS0FBT21uRSxFQUFVLEtBR2pFbkIsRUFBTzE0QyxPQUNUczVDLEVBQVFyb0UsTUFBTSt1QixPQUFTZzZDLEVBQWtCLEtBRXpDVixFQUFRcm9FLE1BQU11QixJQUFNd25FLEVBQWtCLEtBR3hDVixFQUFRcm9FLE1BQU0yNUQsZ0JBQWtCcVAsRUFBWWowRCxNQUFNLE9BQU8vRixLQUFLLE1BR2hFcTVELEVBQVEvOEMsYUFFUis4QyxFQUFRcm9FLE1BQU0wcUIsbUJBQXFCQSxDQTdGbkMsQ0FaQSxDQTBHRixFQUVJeTlDLEVBQWdCLFdBQ2xCLElBQUksR0FJQ3BrRCxFQUFNK2xELGFBQVgsQ0FJQSxJQUFJQyxFQUFpQnhxRSxTQUFTQyxjQUFjdWtCLEVBQU0rbEQsY0FFN0NDLElBSUxwNUIsRUFBYWxNLFFBQVFrTCxVQUFZbzZCLEVBQWV2b0UsVUFSaEQsQ0FTRixFQVFJd29FLEVBQVcsV0FDYixJQUNJOTlDLEdBRFE3b0IsVUFBVXFCLE9BQVMsUUFBc0JhLElBQWpCbEMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQUMsR0FDM0Q2b0IsVUFFdEIsT0FBT1YsRUFBb0JvbEIsRUFBa0IsQ0FDM0NsbEIsUUFBUSxFQUNSUSxVQUFXQSxJQUVmLEVBRUFwSSxFQUFVLFdBQ1IsR0FBSzRxQixFQUFMLENBSUF1NUIsRUFBV3hqQyxRQUFVaUssRUFBV2x2QyxjQUFjLElBQUltWSxPQUFPLEdBQVE2dkQsUUFFakUsR0FBU1MsRUFBV3hqQyxRQUFRemtDLE1BQU8rakIsRUFBTS9qQixPQUV6QzJ3QyxFQUFhbE0sUUFBVWlLLEVBQVdsdkMsY0FBYyxJQUFJbVksT0FBTyxHQUFRM00sVUFFbkUsSUFBSWttQyxFQUFlLFNBQXNCM3RDLEdBQ3pCLFdBQVZBLEVBQUUwQixLQUE4QixRQUFWMUIsRUFBRTBCLEtBQzFCK2tFLEVBQVMsQ0FDUDk5QyxVQUFXLEdBR2pCLEVBRUkrOUMsRUFBbUIsU0FBMEIxbUUsR0FDM0NBLEVBQUVxSCxTQUFXcTlELEVBQVd4akMsU0FJNUJ1bEMsR0FDRixFQXVCQSxPQVRLam1ELEVBQU1FLFlBQ1Q4QyxFQUFVLFNBQVV6SCxHQUNwQnlILEVBQVUsVUFBV21xQixHQUNyQnorQixXQUFXLFdBZFhrVSxFQUFvQmxtQixRQUFRLFNBQVV5NEMsR0FDcEMsT0FBTzM1QyxTQUFTMk4saUJBQWlCZ3NDLEVBQUsrd0IsRUFDeEMsR0E3Q0t6K0MsRUFBb0JvbEIsRUFBa0IsQ0FDM0NsbEIsUUFBUSxJQTJEUixFQUFHLElBR0UsV0FDQTNILEVBQU1FLFlBQ1R5RCxFQUFZLFNBQVVwSSxHQUN0Qm9JLEVBQVksVUFBV3dwQixHQWpCekJ2cUIsRUFBb0JsbUIsUUFBUSxTQUFVeTRDLEdBQ3BDLE9BQU8zNUMsU0FBUzBOLG9CQUFvQmlzQyxFQUFLK3dCLEVBQzNDLEdBa0JGLENBbkRBLENBb0RGLEVBQUcsQ0FBQ3Y3QixJQUNKLElBaFJtQ3BwQixFQUpBMGxCLEVBb1IvQjErQixFQUFPeVgsRUFBTXpYLE1BeFJBLFdBMFJicy9CLEVBQWlCLEdBQVMsQ0FBQyxFQUFHL21CLEVBQTBCZCxFQUFPLENBQ2pFZ0IsT0FBUSxDQUFDLFdBQ1BoQixFQUFNOG5CLFFBQVUsQ0FDbEIsZUFBZ0I5bkIsRUFBTThuQixRQUNyQlQsRUFBTyxTQUFVNW9DLEdBQ2xCLE9BQU9BLElBQVFrc0MsSUFBZUMsRUFBY25zQyxHQUFNdWhCLEVBQU1xbkIsUUFBVXJuQixFQUFNcW5CLE9BQU81b0MsR0FDakYsR0FBSSxDQUNGd1osVUFBVyxDQUFDLEdBQVFOLFVBQVdxSSxFQUFNRSxVQUFZLEdBQVFBLFVBQVksS0FBTUYsRUFBTTBqRCxPQUFTLEdBQVFBLE9BQVMsS0FBTTFqRCxFQUFNdW9CLFNBQVcsR0FBUUssYUFBZSxLQUFNNW9CLEVBQU15a0QsUUFBVSxHQUFRWixVQUFZLEtBQWUsYUFBVHQ3RCxHQUF3QnlYLEVBQU1FLFVBQStCLEtBQW5CLEdBQVFnbkMsU0FBaUJsbkMsRUFBTWluQixPQUFTam5CLEVBQU11QixNQTdSaFEwbEIsRUE2UjZSam5CLEVBQU1pbkIsT0FBU2puQixFQUFNdUIsS0F6UmxUQSxFQUg1QjBsQixFQUpPLFFBSXlCQSxFQUloQyxHQUFRMjhCLFFBQVVyaUQsRUFBS3hiLFdBQVcxSSxRQUFRLElBQUssTUF3UndTLEtBQXFCLFNBQWYyaUIsRUFBTWdvQixLQUFrQixlQUFpQixLQUFxQixVQUFmaG9CLEVBQU1nb0IsS0FBbUIsZ0JBQWtCLEtBQU1ob0IsRUFBTS9ILFdBQWErSCxFQUFNbmIsRUFBUyxRQUFJb0csS0FBSyxPQUczZXN5QixPQUFvQy83QixJQUF0QndlLEVBQU11ZCxZQUE0QnZkLEVBQU11ZCxZQWxTakMsRUFtU3JCMEssRUFBbUIsQ0FBQ3BvQixFQUFFLE1BQU8sQ0FDL0I1SCxVQUFXLEdBQVFzd0IsV0FDakIxb0IsRUFBRSxNQUFPLENBQ1g1SCxVQUFXLEdBQVF3ckQsT0FDbEIsQ0FBQzVqRCxFQUFFOG5CLEVBQVEsQ0FDWnBLLFlBQWFBLEVBQ2JKLFVBQVUsSUFDUnRkLEVBQUUsTUFBTyxDQUNYNUgsVUFBVyxHQUFRaFIsU0FDbEIrWSxFQUFNL1ksU0FBVytZLEVBQU0zZixhQUN0QjRHLEVBQVUsQ0FBQytZLEVBQU1rSCxRQUFRdFQsT0FBT3EwQixFQUFrQixDQUFDam9CLEVBQU1tSCxRQUM3RCxPQUFPdEgsRUFBRUcsRUFBTTlrQixTQUFXLE1BQU8yc0MsRUFBZ0I1Z0MsRUFDbkQsRUMzVitCLENBQzdCNFksRUFBR0EsR0FDSGhiLEVBQUdBLEdBQ0hvN0IsV0FBWUEsR0FDWm5nQixTQUFVQSxHQUNWQyxVQUFXQSxHQUNYeWdCLE9BQVFBLEdBQ1I2RyxPQUFRQSxHQUNSTSxPQUFRQSxLQUVOdytCLEdBQWE3K0IsR0FBSzNuQixFQUFjLENBQ2xDRSxFQUFHQSxHQUNIQyxTQUFVQSxHQUNWQyxVQUFXQSxLQUVib21ELEdBQXdCLFlBQUksYUFDNUIsSUFBSUMsR0FBTyxDQUNUemtFLEtBQU0sU0FBYy9DLEdBQ2xCLE9BQU9paEIsR0FBRXNtRCxHQXhGYixTQUF3QnQvRCxHQUN0QixJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUF5QixNQUFoQjdILFVBQVVXLEdBQWFYLFVBQVVXLEdBQUssQ0FBQyxFQUVoREEsRUFBSSxFQUNOLEdBQVFrSCxHQUFRLEdBQU16SyxRQUFRLFNBQVV3RSxHQUN0QyxHQUFnQjJGLEVBQVEzRixFQUFLaUcsRUFBT2pHLEdBQ3RDLEdBQ1NVLE9BQU95YywwQkFDaEJ6YyxPQUFPMGMsaUJBQWlCelgsRUFBUWpGLE9BQU95YywwQkFBMEJsWCxJQUVqRSxHQUFRQSxHQUFRekssUUFBUSxTQUFVd0UsR0FDaENVLE9BQU82YixlQUFlNVcsRUFBUTNGLEVBQUtVLE9BQU8yWCx5QkFBeUJwUyxFQUFRakcsR0FDN0UsRUFFSixDQUVBLE9BQU8yRixDQUNULENBc0V5QixDQUFlLENBQUMsRUFBR2pJLEVBQU1DLE1BQU8sQ0FDbkQyaEIscUJBbkNTLHVCQW9DVHhlLFNBQVVnaUUsS0FFZCxHQzVIRixTQUFTLEdBQWdCcm1ELEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsS0FlUCxPQWRBLEdBQVcvYixPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDQUVBLFNBQVMsR0FBUXdMLEVBQVFrVCxHQUN2QixJQUFJL0gsRUFBT3JVLE9BQU9xVSxLQUFLbkwsR0FFdkIsR0FBSWxKLE9BQU9xYyxzQkFBdUIsQ0FDaEMsSUFBSUMsRUFBVXRjLE9BQU9xYyxzQkFBc0JuVCxHQUN2Q2tULElBQWdCRSxFQUFVQSxFQUFRbkosT0FBTyxTQUFVb0osR0FDckQsT0FBT3ZjLE9BQU8yWCx5QkFBeUJ6TyxFQUFRcVQsR0FBS1QsVUFDdEQsSUFDQXpILEVBQUs5USxLQUFLOUYsTUFBTTRXLEVBQU1pSSxFQUN4QixDQUVBLE9BQU9qSSxDQUNULENBRUEsU0FBUyxHQUFlcFAsR0FDdEIsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBeUIsTUFBaEI3SCxVQUFVVyxHQUFhWCxVQUFVVyxHQUFLLENBQUMsRUFFaERBLEVBQUksRUFDTixHQUFRa0gsR0FBUSxHQUFNekssUUFBUSxTQUFVd0UsR0FDdEMsR0FBZ0IyRixFQUFRM0YsRUFBS2lHLEVBQU9qRyxHQUN0QyxHQUNTVSxPQUFPeWMsMEJBQ2hCemMsT0FBTzBjLGlCQUFpQnpYLEVBQVFqRixPQUFPeWMsMEJBQTBCbFgsSUFFakUsR0FBUUEsR0FBUXpLLFFBQVEsU0FBVXdFLEdBQ2hDVSxPQUFPNmIsZUFBZTVXLEVBQVEzRixFQUFLVSxPQUFPMlgseUJBQXlCcFMsRUFBUWpHLEdBQzdFLEVBRUosQ0FFQSxPQUFPMkYsQ0FDVCxDQXNDQSxTQUFTdy9ELEdBQW1Cdm5ELEdBQzFCLE9BR0YsU0FBNEJBLEdBQzFCLEdBQUl2YSxNQUFNdUQsUUFBUWdYLEdBQU0sQ0FDdEIsSUFBSyxJQUFJN2UsRUFBSSxFQUFHNjlCLEVBQU8sSUFBSXY1QixNQUFNdWEsRUFBSW5lLFFBQVNWLEVBQUk2ZSxFQUFJbmUsT0FBUVYsSUFBSzY5QixFQUFLNzlCLEdBQUs2ZSxFQUFJN2UsR0FFakYsT0FBTzY5QixDQUNULENBQ0YsQ0FUU3dvQyxDQUFtQnhuRCxJQVc1QixTQUEwQjNOLEdBQ3hCLEdBQUltTyxPQUFPQyxZQUFZM2QsT0FBT3VQLElBQWtELHVCQUF6Q3ZQLE9BQU9HLFVBQVVnRSxTQUFTN0QsS0FBS2lQLEdBQWdDLE9BQU81TSxNQUFNbzVCLEtBQUt4c0IsRUFDMUgsQ0Fib0NvMUQsQ0FBaUJ6bkQsSUFlckQsV0FDRSxNQUFNLElBQUk3VSxVQUFVLGtEQUN0QixDQWpCNkR1OEQsRUFDN0QsQ0RxQkFKLEdBQWtCLFlBQUksT0NIdEIsSUE2QkksR0FBVSxDQUNaenVELFVBQVcsVUFFWHFsQixPQUFRLGtCQUNSTCxRQUFTLG1CQUNUNXdCLFVBQVcsa0JBQ1gwNkQsZUFBZ0IsMkJBQ2hCaHhDLFFBQVMsbUJBQ1RtbUIsV0FBWSx1QkFDWkMsY0FBZSwwQkFFZjVTLE9BdkJRLHdCQTBCTnk5QixHQUFpQixDQUNuQkMsS0FBTSxHQUFRbHhDLFFBQ2R6SyxPQUFRLEdBQVE2d0IsY0FDaEJyK0MsSUFBSyxHQUFRbytDLFdBQ2JnckIsS0FBTSxNQUdKQyxHQUFlLFdBRWpCLE9BQU9ILEdBRElwbkUsVUFBVXFCLE9BQVMsUUFBc0JhLElBQWpCbEMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLE9BRWpGLEVDaExBLFNBQVMsR0FBZ0JxZSxFQUFLemMsRUFBSy9ELEdBWWpDLE9BWEkrRCxLQUFPeWMsRUFDVC9iLE9BQU82YixlQUFlRSxFQUFLemMsRUFBSyxDQUM5Qi9ELE1BQU9BLEVBQ1B1Z0IsWUFBWSxFQUNaRyxjQUFjLEVBQ2RDLFVBQVUsSUFHWkgsRUFBSXpjLEdBQU8vRCxFQUdOd2dCLENBQ1QsQ0FFQSxTQUFTLEtBZVAsT0FkQSxHQUFXL2IsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0FzQ0EsSUFBSSxHQUFVLENBQ1pxWSxVQUFXLGVBRVgxUSxRQUFTLHdCQUNUNi9ELGFBQWMsOEJBQ2RDLFFBQVMsd0JBQ1RDLFVBQVcsMEJBQ1hDLFNBQVUseUJBQ1ZsckQsTUFBTyxzQkFDUG1yRCxhQUFjLDhCQUVkdnFDLFFBQVMsd0JBQ1R3cUMsYUFBYyw4QkFDZDlxRCxTQUFVLHlCQUNWK3FELFNBQVUsc0JBQ1ZDLGdCQUFpQiw4QkFDakJDLFlBQWEseUJBQ2JyK0IsT0FBUSx1QkFDUnMrQixVQUFXLDBCQUNYcGMsT0FBUSx3QkFDUkMsT0FBUSx3QkFDUm9jLFdBQVksMkJBQ1puaEMsU0FBVSx5QkFDVjBtQixRQUFTLHdCQUNUMGEsVUFBVywwQkFDWEMsT0FBUSx1QkFDUkMsV0FBWSw0QkEyQ1ZDLEdBQWlCLFNBQXdCdnpDLEdBQzNDLElBQUl4VSxFQUFJd1UsRUFBTXhVLEVBQ1ZoYixFQUFJd3ZCLEVBQU14dkIsRUFDVm1iLEVBQVFxVSxFQUFNclUsTUFDZDNULEVBQU0yVCxFQUFNNm5ELGdCQUFrQixLQUFPN25ELEVBQU0zVCxJQUMzQ25SLEVBQVU4a0IsRUFBTTlrQixRQUFVOGtCLEVBQU05a0IsUUFBVW1SLEVBQU0sSUFBTSxNQUN0RHk3RCxFQUFvQixDQUFDLEdBQVE3Z0UsUUFBUyxHQUFRaWdFLGFBQWNsbkQsRUFBTW1uRCxhQUFlLEdBQVFBLGFBQWUsTUFBTWw4RCxLQUFLLEtBQ25IODhELEVBQVkvbkQsRUFBTWdvRCxPQUFTaG9ELEVBQU1vb0IsT0FBU3ZvQixFQUFFLE1BQU8sR0FBUyxDQUFDLEVBQUcsQ0FDbEU1SCxVQUFXNnZELElBQ1Q5bkQsRUFBTWdvRCxPQUFTLEtBQ2ZDLEdBQWVqb0QsRUFBTWlwQixRQUFVanBCLEVBQU0zVCxJQUVyQzY3RCxFQUFlLEdBQVMsQ0FBQyxFQUFHcG5ELEVBQTBCZCxHQUFRQSxFQUFNdmEsT0FBUSxDQUM5RXdTLFVBQVcsR0FBUTh1RCxRQUNuQjlxRSxNQUFPLE1BQ05nc0UsR0FBZSxHQUFnQixDQUFDLEVBQUdwakUsRUFBRWtpQyxTQUFVL21CLEVBQU1uYixFQUFFa2lDLFdBQWEsR0FBSTE2QixHQUV2RXBGLEVBQVUrWSxFQUFNL1ksUUFBVStZLEVBQU0vWSxRQUFVLENBQUM4Z0UsRUFBV2xvRCxFQUFFLE1BQU8sQ0FDakU1SCxVQUFXLEdBQVFoUixRQUNuQmhMLE1BQU8rakIsRUFBTS9qQixPQUNaLENBQUMrakIsRUFBTWpFLFFBQVVpRSxFQUFNL1ksUUFBVTRZLEVBQUUsTUFBTyxHQUFTLENBQUMsRUFBRyxDQUN4RDVILFVBQVcsR0FBUThELFFBQ2pCaUUsRUFBTWpFLE9BQVMsS0FBTWlFLEVBQU1pbkQsU0FBV3BuRCxFQUFFLE1BQU8sR0FBUyxDQUFDLEVBQUcsQ0FDOUQ1SCxVQUFXLEdBQVFndkQsV0FDakJqbkQsRUFBTWluRCxVQUFZLEtBQU1qbkQsRUFBTThtRCxhQUFlam5ELEVBQUUsTUFBTyxHQUFTLENBQUMsRUFBRyxDQUNyRTVILFVBQVcsR0FBUWd2RCxTQUFXLElBQU0sR0FBUUgsZUFDMUM5bUQsRUFBTThtRCxjQUFnQixLQUFNOW1ELEVBQU1tb0QsV0FBYXRvRCxFQUFFLE1BQU8sR0FBUyxDQUFDLEVBQUcsQ0FDdkU1SCxVQUFXLEdBQVFrd0QsYUFDakJub0QsRUFBTW1vRCxZQUFjLEtBQU1ub0QsRUFBTTNmLFlBQ3BDLE9BQU93ZixFQUFFM2tCLEVBQVNndEUsRUFBY2poRSxFQUNsQyxFQUVJbWhFLEdBQW1CLFNBQTBCdDFDLEdBQy9DLElBQUlqVCxFQUFJaVQsRUFBTWpULEVBQ1ZoYixFQUFJaXVCLEVBQU1qdUIsRUFDVit3QyxFQUFPOWlCLEVBQU04aUIsS0FDYnl5QixFQUFjdjFDLEVBQU05UyxNQUNwQkEsT0FBd0IsSUFBaEJxb0QsRUFBeUIsQ0FBQyxFQUFJQSxFQUN0Q2g4RCxFQUFNMlQsRUFBTTZuRCxnQkFBa0IsS0FBTzduRCxFQUFNM1QsSUFDM0NuUixFQUFVOGtCLEVBQU05a0IsUUFBVThrQixFQUFNOWtCLFFBQVVtUixFQUFNLElBQU0sTUFDdEQ0N0QsRUFBY2pvRCxFQUFNM1QsSUFDeEIsT0FBT3dULEVBQUUza0IsRUFBUyxHQUFTLENBQUMsRUFBR21SLEVBQUssQ0FDbEM0TCxVQUFXLEdBQVErdUQsV0FDbEJobkQsRUFBTXZhLE9BQVFxYixFQUEwQmQsR0FBUWlvRCxHQUFlLEdBQWdCLENBQUMsRUFBR3BqRSxFQUFFa2lDLFNBQVUvbUIsRUFBTW5iLEVBQUVraUMsV0FBYSxJQUFLbG5CLEVBQUUsTUFBTyxDQUNuSTVILFVBQVcsR0FBUWhSLFNBQ2xCLENBQUMrWSxFQUFNb2pCLEtBQU92akIsRUFBRSsxQixFQUFNNTFCLEVBQU1vakIsTUFBUSxLQUFNcGpCLEVBQU0vWSxRQUFVK1ksRUFBTS9ZLFFBQVUsT0FDL0UsRUNyTElxaEUsR0FBV2hoQyxHRCtGQyxTQUFtQjFuQixHQUNqQyxJQUFJQyxFQUFJRCxFQUFLQyxFQUNUaGIsRUFBSSthLEVBQUsvYSxFQUNUb3VDLEVBQVNyekIsRUFBS3F6QixPQUNkMkMsRUFBT2gyQixFQUFLZzJCLEtBQ1o1MUIsRUF2RE4sU0FBa0M3WSxFQUFRcVgsR0FDeEMsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBRTVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBbEJOLFNBQXVDTSxFQUFRcVgsR0FDN0MsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBQzVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBQVMsQ0FBQyxFQUNWNFgsRUFBYTdjLE9BQU9xVSxLQUFLOU8sR0FHN0IsSUFBS2xILEVBQUksRUFBR0EsRUFBSXdlLEVBQVc5ZCxPQUFRVixJQUNqQ2lCLEVBQU11ZCxFQUFXeGUsR0FDYnVlLEVBQVM1VixRQUFRMUgsSUFBUSxJQUM3QjJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLElBR3ZCLE9BQU8yRixDQUNULENBS2UsQ0FBOEJNLEVBQVFxWCxHQUluRCxHQUFJNWMsT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJVSxFQUFtQi9jLE9BQU9xYyxzQkFBc0I5VyxHQUVwRCxJQUFLbEgsRUFBSSxFQUFHQSxFQUFJMGUsRUFBaUJoZSxPQUFRVixJQUN2Q2lCLEVBQU15ZCxFQUFpQjFlLEdBQ25CdWUsRUFBUzVWLFFBQVExSCxJQUFRLEdBQ3hCVSxPQUFPRyxVQUFVNmMscUJBQXFCMWMsS0FBS2lGLEVBQVFqRyxLQUN4RDJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRXpCLENBRUEsT0FBTzJGLENBQ1QsQ0FvQ2MsQ0FBeUIrWSxFQUFNLENBQUMsSUFBSyxJQUFLLFNBQVUsZ0JBR3pESSxFQUFNOWUsSUFDYixJQUFJK21FLElBQWVqb0QsRUFBTWlwQixRQUFXanBCLEVBQU0zVCxLQUFTMlQsRUFBTWduRCxXQUFhaG5ELEVBQU1nbkQsVUFBVTM2RCxLQUNsRms4RCxFQUFjdm9ELEVBQU1pbkQsU0FBVyxHQUFRSyxZQUFjdG5ELEVBQU04bUQsYUFBZSxHQUFRTyxnQkFBa0JybkQsRUFBTWdvRCxPQUFTaG9ELEVBQU1vb0IsT0FBUyxHQUFRZy9CLFNBQVcsS0FFckp2L0IsRUFBaUIsR0FBUyxDQUFDLEVBQUcvbUIsRUFBMEJkLEVBQU8sQ0FDakVnQixPQUFRLENBQUMsV0FBWSxjQUV2QmhCLEVBQU04bkIsUUFBVSxDQUNkLGVBQWdCOW5CLEVBQU04bkIsUUFDckIsQ0FDRDd2QixVQUFXLENBQUMsR0FBUU4sVUFBV3FJLEVBQU1xbUIsU0FBVyxHQUFRQSxTQUFXLEtBQU1ybUIsRUFBTTNELFNBQVcsR0FBUUEsU0FBVyxLQUFNMkQsRUFBTTBuRCxPQUFTLEdBQVFBLE9BQVMsS0FBTTFuRCxFQUFNMmMsUUFBVSxHQUFRQSxRQUFVLEtBQU0zYyxFQUFNdW5ELFVBQVksR0FBUUEsVUFBWSxLQUFNdm5ELEVBQU13bkQsV0FBYSxHQUFRQSxXQUFhLEtBQU14bkQsRUFBTXluRCxVQUFZLEdBQVFBLFVBQVksS0FBTXpuRCxFQUFNK3NDLFFBQVUsR0FBUUEsUUFBVSxLQUFNL3NDLEVBQU1pcEIsT0FBUyxHQUFRQSxPQUFTLEtBQU1qcEIsRUFBTTRzQyxPQUFTNXNDLEVBQU1tckMsT0FBUyxHQUFRQSxPQUFTLEtBQU1uckMsRUFBTTRzQyxPQUFTNXNDLEVBQU1vckMsT0FBUyxHQUFRQSxPQUFTLEtBQU1wckMsRUFBTTJuRCxXQUFhLEdBQVFBLFdBQWEsS0FBcUIsU0FBZjNuRCxFQUFNZ29CLEtBQWtCLGVBQWlCLEtBQXFCLFVBQWZob0IsRUFBTWdvQixLQUFtQixnQkFBa0IsS0FBTXVnQyxFQUFhdm9ELEVBQU0vSCxXQUFhK0gsRUFBTW5iLEVBQVMsUUFBSW9HLEtBQUssTUFDcHNCZzlELEdBQWUsR0FBZ0IsQ0FBQyxFQUFHcGpFLEVBQUVraUMsU0FBVS9tQixFQUFNbmIsRUFBRWtpQyxXQUFhLElBR25FeWhDLEVBQWV4b0QsU0FDWndvRCxFQUFhMXNFLFVBQ2Iwc0UsRUFBYTNqRSxFQUFTLE9BQzdCLElBQUlvakMsRUFBbUIsQ0FBQ2pvQixFQUFNeTJCLE1BQVF6MkIsRUFBTTNELFNBQVd3RCxFQUFFb3pCLEVBQVEsR0FBUyxDQUFDLEVBQUdqekIsRUFBTTQyQixTQUFXLEtBQU1neEIsR0FBZSxDQUNsSC9uRCxFQUFHQSxFQUNIaGIsRUFBR0EsRUFDSG1iLE1BQU93b0QsSUFDTHhvRCxFQUFNZ25ELFVBQVlvQixHQUFpQixDQUNyQ3ZvRCxFQUFHQSxFQUNIaGIsRUFBR0EsRUFDSCt3QyxLQUFNQSxFQUNONTFCLE1BQU9BLEVBQU1nbkQsWUFDVixNQUVMLE9BQU9ubkQsRUFBRSxNQUNUZ29CLEVBRmMsQ0FBQzduQixFQUFNa0gsUUFBUXRULE9BQU9xMEIsRUFBa0IsQ0FBQ2pvQixFQUFNbUgsUUFHL0QsRUNySStCLENBQzdCdEgsRUFBR0EsR0FDSGhiLEVBQUdBLEdBQ0grd0MsS0FBTUEsR0FDTjNDLE9BQVFBLEtBRVZxMUIsR0FBc0IsWUFBSSxXQ1AxQixJQUFJRyxHQUFPbmhDLEdIZ0xDLFNBQWUxbkIsR0FDekIsSUFBSUMsRUFBSUQsRUFBS0MsRUFDVGhiLEVBQUkrYSxFQUFLL2EsRUFDVHlqRSxFQUFXMW9ELEVBQUswb0QsU0FDaEJ0b0QsRUFwR04sU0FBa0M3WSxFQUFRcVgsR0FDeEMsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBRTVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBbEJOLFNBQXVDTSxFQUFRcVgsR0FDN0MsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBQzVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBQVMsQ0FBQyxFQUNWNFgsRUFBYTdjLE9BQU9xVSxLQUFLOU8sR0FHN0IsSUFBS2xILEVBQUksRUFBR0EsRUFBSXdlLEVBQVc5ZCxPQUFRVixJQUNqQ2lCLEVBQU11ZCxFQUFXeGUsR0FDYnVlLEVBQVM1VixRQUFRMUgsSUFBUSxJQUM3QjJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLElBR3ZCLE9BQU8yRixDQUNULENBS2UsQ0FBOEJNLEVBQVFxWCxHQUluRCxHQUFJNWMsT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJVSxFQUFtQi9jLE9BQU9xYyxzQkFBc0I5VyxHQUVwRCxJQUFLbEgsRUFBSSxFQUFHQSxFQUFJMGUsRUFBaUJoZSxPQUFRVixJQUN2Q2lCLEVBQU15ZCxFQUFpQjFlLEdBQ25CdWUsRUFBUzVWLFFBQVExSCxJQUFRLEdBQ3hCVSxPQUFPRyxVQUFVNmMscUJBQXFCMWMsS0FBS2lGLEVBQVFqRyxLQUN4RDJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRXpCLENBRUEsT0FBTzJGLENBQ1QsQ0FpRmMsQ0FBeUIrWSxFQUFNLENBQUMsSUFBSyxJQUFLLG9CQUcvQ0ksRUFBTTllLElBRWIsSUFNSXduRSxFQU5BN2dDLEVBQWlCLEdBQVMsQ0FBQyxFQUFHL21CLEVBQTBCZCxHQUFRQSxFQUFNOG5CLFFBQVUsQ0FDbEYsZUFBZ0I5bkIsRUFBTThuQixRQUNyQixDQUNEN3ZCLFVBQVcsQ0FBQyxHQUFRTixVQUFXcUksRUFBTWdkLFFBQVVoZCxFQUFNK3JCLFFBQVUsR0FBUS9PLE9BQVMsS0FBTWhkLEVBQU15bUQsZ0JBQWtCem1ELEVBQU0yb0QsZ0JBQWtCLEdBQVFsQyxlQUFpQixLQUFNem1ELEVBQU1pcEIsT0FBUyxHQUFRbDlCLFVBQVksS0FBTWlVLEVBQU0yYyxRQUFVLEdBQVFBLFFBQVUsS0FBTWtxQyxHQUFhN21ELEVBQU15VixTQUF5QixTQUFmelYsRUFBTWdvQixLQUFrQixlQUFpQixLQUFxQixVQUFmaG9CLEVBQU1nb0IsS0FBbUIsZ0JBQWtCLEtBQU1ob0IsRUFBTS9ILFdBQWErSCxFQUFNbmIsRUFBUyxRQUFJb0csS0FBSyxPQUs1WitVLEVBQU1pcEIsVUFDUnkvQixFQUFhLEdBQVMsQ0FBQyxFQUFHMW9ELEVBQU1pcEIsU0FDckJwa0MsRUFBUyxPQUFLLENBQUMsR0FBUW9rQyxPQUFReS9CLEVBQVc3akUsRUFBUyxRQUFNLE1BQU1vRyxLQUFLLE1BR2pGLElBQUkyOUQsRUFBUTVvRCxFQUFNNG9ELE1BQVE1b0QsRUFBTTRvRCxNQUFRNW9ELEVBQU0vWSxRQUFVK1ksRUFBTS9ZLFFBQVUrWSxFQUFNM2YsU0FDMUU0bkMsRUFBbUIsQ0FBQ3lnQyxFQUFhN29ELEVBQUV5b0QsRUFBVSxHQUFlLENBQUMsRUFBR3RvRCxFQUFNNm9ELElBQUssQ0FBQyxFQUFHSCxFQUFZLENBQzdGei9CLFFBQVEsVUFDSnpuQyxHQUFXb1MsT0FBT3l5RCxHQUFtQnJtRCxFQUFNNm9ELElBQU1ELEVBQU0xa0UsSUFBSSxTQUFVNGtFLEdBQ3pFLE9BQU9qcEQsRUFBRXlvRCxFQUFVLEdBQWUsQ0FBQyxFQUFHdG9ELEVBQU02b0QsSUFBSyxDQUFDLEVBQUdDLEdBQ3ZELEdBQUtGLElBQ0QzaEUsRUFBVSxDQUFDK1ksRUFBTWtILFFBQVF0VCxPQUFPeXlELEdBQW1CcCtCLEdBQW1CLENBQUNqb0IsRUFBTW1ILFFBQ2pGLE9BQU90SCxFQUFFRyxFQUFNOWtCLFNBQVcsTUFBTzJzQyxFQUFnQjVnQyxFQUNuRCxFRzlNdUIsQ0FDckI0WSxFQUFHQSxHQUNIaGIsRUFBR0EsR0FDSHlqRSxTQUFVQSxLQ1BaLFNBQVMsS0FlUCxPQWRBLEdBQVcxbUUsT0FBTytVLFFBQVUsU0FBVTlQLEdBQ3BDLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQVM3SCxVQUFVVyxHQUV2QixJQUFLLElBQUlpQixLQUFPaUcsRUFDVnZGLE9BQU9HLFVBQVUrTixlQUFlNU4sS0FBS2lGLEVBQVFqRyxLQUMvQzJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRzNCLENBRUEsT0FBTzJGLENBQ1QsRUFFTyxHQUFTeEgsTUFBTUQsS0FBTUUsVUFDOUIsQ0RQQW1wRSxHQUFrQixZQUFJLE9DNkN0QixJQ2pESU0sR0FBYXpoQyxHRDBEQyxTQUFxQjFuQixHQUNyQyxJQUFJQyxFQUFJRCxFQUFLQyxFQUNUKzFCLEVBQU9oMkIsRUFBS2cyQixLQUNaQyxFQUFTajJCLEVBQUtpMkIsT0FDZDcxQixFQWxDTixTQUFrQzdZLEVBQVFxWCxHQUN4QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFFNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFsQk4sU0FBdUNNLEVBQVFxWCxHQUM3QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFDNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFBUyxDQUFDLEVBQ1Y0WCxFQUFhN2MsT0FBT3FVLEtBQUs5TyxHQUc3QixJQUFLbEgsRUFBSSxFQUFHQSxFQUFJd2UsRUFBVzlkLE9BQVFWLElBQ2pDaUIsRUFBTXVkLEVBQVd4ZSxHQUNidWUsRUFBUzVWLFFBQVExSCxJQUFRLElBQzdCMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsSUFHdkIsT0FBTzJGLENBQ1QsQ0FLZSxDQUE4Qk0sRUFBUXFYLEdBSW5ELEdBQUk1YyxPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlVLEVBQW1CL2MsT0FBT3FjLHNCQUFzQjlXLEdBRXBELElBQUtsSCxFQUFJLEVBQUdBLEVBQUkwZSxFQUFpQmhlLE9BQVFWLElBQ3ZDaUIsRUFBTXlkLEVBQWlCMWUsR0FDbkJ1ZSxFQUFTNVYsUUFBUTFILElBQVEsR0FDeEJVLE9BQU9HLFVBQVU2YyxxQkFBcUIxYyxLQUFLaUYsRUFBUWpHLEtBQ3hEMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FFekIsQ0FFQSxPQUFPMkYsQ0FDVCxDQWVjLENBQXlCK1ksRUFBTSxDQUFDLElBQUssT0FBUSxXQUVyRDNZLEVBQVUrWSxFQUFNL1ksUUFBVStZLEVBQU0vWSxRQUFVK1ksRUFBTW9qQixLQUFPdmpCLEVBQUUrMUIsRUFBTTUxQixFQUFNb2pCLE1BQVFwakIsRUFBTTNmLFNBRW5GMm9FLEVBQWMsR0FBUyxDQUFDLEVBQUcsQ0FDN0IvaEUsUUFBUzRZLEVBQUUsTUFBTyxDQUNoQjVILFVBaEJLLDJCQWlCSmhSLEdBQ0hrZ0IsTUFBT25ILEVBQU15akIsT0FBUzVqQixFQUFFLE1BQU8sQ0FDN0I1SCxVQWxCRyx5QkFtQkYrSCxFQUFNeWpCLE9BQ1Q4SixnQkFBaUIsQ0FBQ3Z0QixFQUFNdXRCLGlCQXZCZiwyQkF1QnFEdnRCLEVBQU0yYyxRQWxCN0QsMEJBa0J5RixNQUFNMXhCLEtBQUssS0FFM0c0K0IsTUFBTSxFQUNOc00sY0FBYyxHQUNibjJCLEdBRUgsT0FBT0gsRUFBRWcyQixFQUFRbXpCLEVBQ25CLEVDaEZtQyxDQUNqQ25wRCxFQUFHQSxHQUNIaGIsRUFBR0EsR0FDSCt3QyxLQUFNQSxHQUNOQyxPQUFRQSxLQ0RWLE1BQU1vekIsR0FBeUMsQ0FDN0MsSUFBQXRuRSxDQUFLL0MsRyxZQUNILE9BQU8sS0FBRTBwRSxHQUFVLENBQ2pCdnNELE1BQU9uZCxFQUFNQyxNQUFNa2QsTUFDbkJ0VyxPQUFRLENBQ04yVyxRQUFVNWMsSUFDUixNQUFNMHBFLEVBQVUxcEUsRUFBRXFILE9BQXVCc2lFLFFBQVEsb0JBQ2pELEdBQUlELEVBQVEsQ0FDVixNQUFNM3RFLEVBQU0ydEUsRUFBdUJ6dEUsY0FBYyxTQUM3Q0YsR0FBTUEsYUFBYzZ0RSxrQkFDckI3dEUsRUFBd0I4dEUsT0FFN0IsSUFHSm5pRCxPQUFRLEtBQUUsa0JBQW1CLENBQzNCM2UsS0FBTSxPQUNObzRCLE9BQVEsT0FDUjZELFNBQXNDLFFBQTVCLEVBQWtCLFFBQWxCLEVBQUE1bEMsRUFBTUMsTUFBTTRHLGNBQU0sZUFBRSsrQixnQkFBUSxRQUFJLEtBQVMsRUFDbkQ4a0MsU0FBc0MsUUFBNUIsRUFBa0IsUUFBbEIsRUFBQTFxRSxFQUFNQyxNQUFNNEcsY0FBTSxlQUFFNmpFLGdCQUFRLFFBQUksS0FBUyxLQUd6RCxHQzVCRixTQUFTLEdBQWdCM3JELEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsS0FlUCxPQWRBLEdBQVcvYixPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDQUVBLFNBQVMsR0FBUXdMLEVBQVFrVCxHQUN2QixJQUFJL0gsRUFBT3JVLE9BQU9xVSxLQUFLbkwsR0FFdkIsR0FBSWxKLE9BQU9xYyxzQkFBdUIsQ0FDaEMsSUFBSUMsRUFBVXRjLE9BQU9xYyxzQkFBc0JuVCxHQUN2Q2tULElBQWdCRSxFQUFVQSxFQUFRbkosT0FBTyxTQUFVb0osR0FDckQsT0FBT3ZjLE9BQU8yWCx5QkFBeUJ6TyxFQUFRcVQsR0FBS1QsVUFDdEQsSUFDQXpILEVBQUs5USxLQUFLOUYsTUFBTTRXLEVBQU1pSSxFQUN4QixDQUVBLE9BQU9qSSxDQUNULENBRUEsU0FBUyxHQUFlcFAsR0FDdEIsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBeUIsTUFBaEI3SCxVQUFVVyxHQUFhWCxVQUFVVyxHQUFLLENBQUMsRUFFaERBLEVBQUksRUFDTixHQUFRa0gsR0FBUSxHQUFNekssUUFBUSxTQUFVd0UsR0FDdEMsR0FBZ0IyRixFQUFRM0YsRUFBS2lHLEVBQU9qRyxHQUN0QyxHQUNTVSxPQUFPeWMsMEJBQ2hCemMsT0FBTzBjLGlCQUFpQnpYLEVBQVFqRixPQUFPeWMsMEJBQTBCbFgsSUFFakUsR0FBUUEsR0FBUXpLLFFBQVEsU0FBVXdFLEdBQ2hDVSxPQUFPNmIsZUFBZTVXLEVBQVEzRixFQUFLVSxPQUFPMlgseUJBQXlCcFMsRUFBUWpHLEdBQzdFLEVBRUosQ0FFQSxPQUFPMkYsQ0FDVCxDQXNDQSxTQUFTLEdBQWVpWSxFQUFLN2UsR0FDM0IsT0FHRixTQUF5QjZlLEdBQ3ZCLEdBQUl2YSxNQUFNdUQsUUFBUWdYLEdBQU0sT0FBT0EsQ0FDakMsQ0FMUyxDQUFnQkEsSUFPekIsU0FBK0JBLEVBQUs3ZSxHQUNsQyxJQUFJK2UsRUFBTyxHQUNQQyxHQUFLLEVBQ0xDLEdBQUssRUFDTEMsT0FBSzNkLEVBRVQsSUFDRSxJQUFLLElBQWlDNGQsRUFBN0JDLEVBQUtQLEVBQUlRLE9BQU9DLGNBQW1CTixHQUFNRyxFQUFLQyxFQUFHaFEsUUFBUTJELFFBQ2hFZ00sRUFBSzdaLEtBQUtpYSxFQUFHamlCLFFBRVQ4QyxHQUFLK2UsRUFBS3JlLFNBQVdWLEdBSDhDZ2YsR0FBSyxHQUtoRixDQUFFLE1BQU8vTSxHQUNQZ04sR0FBSyxFQUNMQyxFQUFLak4sQ0FDUCxDQUFFLFFBQ0EsSUFDTytNLEdBQXNCLE1BQWhCSSxFQUFXLFFBQVdBLEVBQVcsUUFDOUMsQ0FBRSxRQUNBLEdBQUlILEVBQUksTUFBTUMsQ0FDaEIsQ0FDRixDQUVBLE9BQU9ILENBQ1QsQ0EvQmlDLENBQXNCRixFQUFLN2UsSUFpQzVELFdBQ0UsTUFBTSxJQUFJZ0ssVUFBVSx1REFDdEIsQ0FuQ2tFLEVBQ2xFLENBb0NBLElBQUksR0FBVSxDQUNaME4sVUFBVyxlQUVYdlEsUUFBUyx3QkFDVG9CLE1BQU8sc0JBQ1ArZ0UsaUJBQWtCLGtDQUNsQkMsVUFBVywyQkFDWEMsS0FBTSxxQkFDTjkrRCxNQUFPLHNCQUNQKytELFVBQVcsMkJBQ1hqbUMsTUFBTyxzQkFDUGttQyxrQkFBbUIsbUNBQ25CQyxrQkFBbUIsbUNBRW5CQyxXQUFZLHdCQUNaQyxpQkFBa0IsK0JBQ2xCQyxhQUFjLDJCQUNkQyxVQUFXLDJCQUNYQyxZQUFhLDZCQUNiQyxlQUFnQixnQ0FDaEJDLFFBQVMsc0JBQ1RDLFdBQVkseUJBQ1pDLFdBQVksc0JBQ1pDLGNBQWUseUJBQ2ZDLGFBQWMsd0JBQ2RDLGFBQWMsd0JBQ2RDLGNBQWUsMEJBR2JDLEdBQXNCLENBQ3hCQyxTQUFTLEVBQ1R6OEQsYUFBUzFNLEdBR1BvcEUsR0FBYyxTQUFxQjVxRCxFQUFPaFUsR0FDNUMsT0FBT2dVLEVBQU02cUQsZUFBc0QsSUFBdEM3cUQsRUFBTTZxRCxhQUFhamlFLFFBQVFvRCxFQUMxRCxFQ2hMSTgrRCxHQUFZeGpDLEdEa0xDLFNBQW9CMW5CLEdBQ25DLElBQUlDLEVBQUlELEVBQUtDLEVBQ1RoYixFQUFJK2EsRUFBSy9hLEVBQ1RpYixFQUFXRixFQUFLRSxTQUNoQkMsRUFBWUgsRUFBS0csVUFDakJ5Z0IsRUFBUzVnQixFQUFLNGdCLE9BQ2Q2RyxFQUFTem5CLEVBQUt5bkIsT0FDZHJuQixFQXhHTixTQUFrQzdZLEVBQVFxWCxHQUN4QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFFNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFsQk4sU0FBdUNNLEVBQVFxWCxHQUM3QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFDNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFBUyxDQUFDLEVBQ1Y0WCxFQUFhN2MsT0FBT3FVLEtBQUs5TyxHQUc3QixJQUFLbEgsRUFBSSxFQUFHQSxFQUFJd2UsRUFBVzlkLE9BQVFWLElBQ2pDaUIsRUFBTXVkLEVBQVd4ZSxHQUNidWUsRUFBUzVWLFFBQVExSCxJQUFRLElBQzdCMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsSUFHdkIsT0FBTzJGLENBQ1QsQ0FLZSxDQUE4Qk0sRUFBUXFYLEdBSW5ELEdBQUk1YyxPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlVLEVBQW1CL2MsT0FBT3FjLHNCQUFzQjlXLEdBRXBELElBQUtsSCxFQUFJLEVBQUdBLEVBQUkwZSxFQUFpQmhlLE9BQVFWLElBQ3ZDaUIsRUFBTXlkLEVBQWlCMWUsR0FDbkJ1ZSxFQUFTNVYsUUFBUTFILElBQVEsR0FDeEJVLE9BQU9HLFVBQVU2YyxxQkFBcUIxYyxLQUFLaUYsRUFBUWpHLEtBQ3hEMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FFekIsQ0FFQSxPQUFPMkYsQ0FDVCxDQXFGYyxDQUF5QitZLEVBQU0sQ0FBQyxJQUFLLElBQUssV0FBWSxZQUFhLFNBQVUsV0FFckZtckQsT0FBc0N2cEUsSUFBdkJ3ZSxFQUFNK3FELGNBQXFELE9BQXZCL3FELEVBQU0rcUQsYUFBd0IvcUQsRUFBTStxRCxhQUFhaGxFLGdCQUE2QnZFLElBQWhCd2UsRUFBTTdpQixPQUF1QyxPQUFoQjZpQixFQUFNN2lCLE1BQWlCNmlCLEVBQU03aUIsTUFBTTRJLFdBQWEsR0FHOUxrYSxFQUFhLEdBRERILElBQzJCLEdBQ3ZDNnFCLEVBQWExcUIsRUFBVyxHQUN4QjJxQixFQUFnQjNxQixFQUFXLEdBRzNCNHFCLEVBQWEsR0FEQS9xQixHQUFTLEdBQ2tCLEdBQ3hDa3JELEVBQVluZ0MsRUFBVyxHQUN2Qm9nQyxFQUFlcGdDLEVBQVcsR0FHMUJHLEVBQWEsR0FEQWxyQixFQUFTaXJELEdBQ2tCLEdBQ3hDNXRFLEVBQVE2dEMsRUFBVyxHQUNuQjNLLEVBQVcySyxFQUFXLEdBRXRCa2dDLEVBQWExcUMsSUFDYjJxQyxFQUFtQjNxQyxJQUNuQjRxQyxFQUFvQjVxQyxJQUNwQjZxQyxFQUFhN3FDLElBQ2I4cUMsRUFBYzlxQyxJQUNkK3FDLEVBQWUvcUMsSUFDZmdyQyxFQUFXaHJDLElBQ1hpckMsRUFBWXpyRCxFQUFNMHJELFVBQVksV0FBYSxRQUMzQ0MsVUFBMENucUUsSUFBaEJ3ZSxFQUFNNHJELE9BQXVCNXJELEVBQU02ckQsVUFBWTdyRCxFQUFNa1osS0FBT2xaLEVBQU1vYyxLQUFPcGMsRUFBTW5iLEVBQUVxL0IsWUFBY2xrQixFQUFNbmIsRUFBRWsvQixZQUFjL2pCLEVBQU02bEIsVUFBWTdsQixFQUFNdWxCLFNBRXZLdW1DLEVBQW9CLFdBQ3RCLElBQUk5cEQsRUFBUTFpQixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUM3RWlKLEVBQU95WixFQUFNelosS0FDYmtDLEVBQVF1WCxFQUFNdlgsTUFDZHROLEVBQVE2a0IsRUFBTTdrQixNQUViK3RFLEVBQVd4cUMsZUFJRmwvQixJQUFWckUsSUFDRit0RSxFQUFXeHFDLFFBQVF2akMsTUFBUUEsUUFHZnFFLElBQVZpSixJQUNGNmdFLEVBQVk1cUMsUUFBVWoyQixFQUVsQkEsRUFDRnlnRSxFQUFXeHFDLFFBQVFqMkIsUUFFbkJ5Z0UsRUFBV3hxQyxRQUFRMlYsUUFJVixVQUFUOXRDLElBQXFCeVgsRUFBTStyRCxpQkFBbUIvckQsRUFBTTVZLFdBQ3REbWtFLEVBQWE3cUMsUUFBVXdxQyxFQUFXeHFDLFFBQVF2akMsUUFBVTR0RSxHQUd6QyxVQUFUeGlFLElBQ0ZnakUsRUFBYTdxQyxRQUFVd3FDLEVBQVd4cUMsUUFBUXZqQyxRQUFVNHRFLEdBR3pDLFdBQVR4aUUsSUFDRmdqRSxFQUFhN3FDLFNBQVUsR0FHekIycUMsRUFBVzNxQyxRQUF1QyxLQUE3QndxQyxFQUFXeHFDLFFBQVF2akMsTUFDeEM2dUUsSUFDQUMsSUFFSWQsRUFBaUJ6cUMsVUFBWXdxQyxFQUFXeHFDLFFBQVF2akMsT0FDbERrakMsRUFBUzZxQyxFQUFXeHFDLFFBQVF2akMsT0FFaEMsRUE0QkkrdUUsRUFBaUIsV0FDbkIsSUFBSTk5RCxFQUFTczhELEdBb0JiLE9BbEJJYSxFQUFhN3FDLFNBQVdzcUMsR0FBaUQsSUFBcENFLEVBQVd4cUMsUUFBUXZqQyxNQUFNd0QsUUFBZ0JxZixFQUFNbXNELHVCQUN0RlosRUFBYTdxQyxTQUFVLEVBQ3ZCdXFDLEdBQWEsR0FDYk8sRUFBUzlxQyxhQUFVbC9CLEdBR2pCd2UsRUFBTTVZLFVBQ1JnSCxFQXZCSyxDQUNMdThELFFBQVNPLEVBQVd4cUMsUUFBUXZqQyxNQUFNd0QsT0FBU3FmLEVBQU01WSxRQUNqRDhHLFFBQVM4UixFQUFNeFgsU0F3Qlo0RixFQUFPdThELFNBQVdPLEVBQVd4cUMsUUFBUXNyQyxnQkFDeEM1OUQsRUFwQkssQ0FDTHU4RCxTQUFVTyxFQUFXeHFDLFFBQVFzckMsZ0JBQzdCOTlELFFBQVM4UixFQUFNeFgsU0FxQlo0RixFQUFPdThELFNBQVczcUQsRUFBTTZyRCxXQUMzQno5RCxFQTVDaUIsV0FDbkIsSUFBSzg4RCxFQUFXeHFDLFFBQ2QsT0FBT2dxQyxHQUdULElBQUkwQixFQUFhcHNELEVBQU02ckQsU0FBU1gsRUFBV3hxQyxRQUFRdmpDLE9BQ25ELE1BQU8sQ0FDTHd0RSxRQUFTeUIsSUFBZUEsRUFBV1IsTUFDbkMxOUQsUUFBU2srRCxHQUFjQSxFQUFXNWpFLE1BRXRDLENBa0NhNmpFLElBR0pqK0QsQ0FDVCxFQUVJNDlELEVBQWdCLFdBRWxCLElBQUk1OUQsT0FBeUI1TSxJQUFoQndlLEVBQU00ckQsTUFBc0IsQ0FDdkNqQixTQUFVM3FELEVBQU00ckQsTUFDaEIxOUQsUUFBUzhSLEVBQU14WCxPQUNaK2lFLEVBQWE3cUMsU0FBWTFnQixFQUFNc3NELGdCQUF3Q0osSUFBdEJ4QixHQUNsRDZCLEVBQWtCdkIsRUFDdEJRLEVBQVM5cUMsUUFBVXR5QixFQUFPRixRQUV0QkUsRUFBT3U4RCxVQUFZNEIsR0FDckJ0QixFQUFhNzhELEVBQU91OEQsU0FHakJ2OEQsRUFBT3U4RCxVQUNWYSxFQUFTOXFDLGFBQVVsL0IsRUFFdkIsRUFFSXlxRSxFQUFjLFdBQ2hCLEdBQUlqc0QsRUFBTWdFLFNBQVUsQ0FDbEIsSUFBSXdvRCxFQUFjTixJQUNkOTlELEVBQVMsQ0FDWDNELE1BQU82Z0UsRUFBWTVxQyxRQUNuQityQyxNQUFPcEIsRUFBVzNxQyxRQUNsQmlxQyxRQUFTNkIsRUFBWTdCLFFBQ3JCbmlFLE1BQU9na0UsRUFBWWhrRSxNQUNuQnJMLE1BQU8rdEUsRUFBV3hxQyxRQUFRdmpDLE9BR3hCMlAsS0FBS2dDLFVBQVVWLEtBQVl0QixLQUFLZ0MsVUFBVXM4RCxFQUFrQjFxQyxXQUM5RDFnQixFQUFNZ0UsU0FBUyxHQUFlLENBQUMsRUFBRzVWLEVBQVEsQ0FDeEM3UyxHQUFJMnZFLEVBQVd4cUMsUUFDZmdzQyxjQUFlLFNBQXVCQyxHQUNwQyxJQUFJQyxPQUFpQ3ByRSxJQUFuQm1yRSxFQUFTeHZFLE9BQXVCd3ZFLEVBQVN4dkUsUUFBVSt0RSxFQUFXeHFDLFFBQVF2akMsTUFDcEYwdkUsT0FBaUNyckUsSUFBbkJtckUsRUFBU2xpRSxPQUF1QmtpRSxFQUFTbGlFLFFBQVU2Z0UsRUFBWTVxQyxTQUU3RWtzQyxHQUFlQyxJQUNqQmYsRUFBa0JhLEVBRXRCLEtBRUZ2QixFQUFrQjFxQyxRQUFVdHlCLEVBRWhDLENBQ0YsRUFHQTJSLEVBQVUsV0FDUnNyRCxFQUFXM3FDLFFBQTJCLEtBQWpCcXFDLEVBQ3JCTyxFQUFZNXFDLFNBQVUsRUFDdEI2cUMsRUFBYTdxQyxTQUFVLEVBQ3ZCOHFDLEVBQVM5cUMsUUFBVTFnQixFQUFNeFgsS0FDM0IsRUFBRyxJQUVIdVgsRUFBVSxXQUNINHFCLElBSUx1Z0MsRUFBV3hxQyxRQUFVaUssRUFBV2x2QyxjQUFjZ3dFLEdBQzlDUCxFQUFXeHFDLFFBQVF2akMsTUFBUTR0RSxFQUMzQmUsSUFDQUUsSUFFQUMsSUFDRixFQUFHLENBQUN0aEMsSUFFSjVxQixFQUFVLFdBQ1IsR0FBS21yRCxFQUFXeHFDLFFBQWhCLENBSUEsSUFBSXZqQyxPQUF3QnFFLElBQWhCd2UsRUFBTTdpQixPQUF1QyxPQUFoQjZpQixFQUFNN2lCLE1BQWlCNmlCLEVBQU03aUIsTUFBUSt0RSxFQUFXeHFDLFFBQVV3cUMsRUFBV3hxQyxRQUFRdmpDLE1BQVFndUUsRUFBaUJ6cUMsUUFDM0lvc0MsRUFBVzN2RSxRQUF3QyxHQUFLQSxFQUFNNEksV0FFOURtbEUsRUFBV3hxQyxTQUFXeXFDLEVBQWlCenFDLFVBQVlvc0MsSUFDckQ1QixFQUFXeHFDLFFBQVF2akMsTUFBUTJ2RSxFQUMzQjNCLEVBQWlCenFDLFFBQVVvc0MsRUFDM0JoQixFQUFrQixDQUNoQnZqRSxLQUFNLFVBVFYsQ0FZRixFQUFHLENBQUMyaUUsRUFBV3hxQyxRQUFTMWdCLEVBQU03aUIsUUFFOUI0aUIsRUFBVSxXQUNIbXJELEVBQVd4cUMsVUFJaEJzckMsSUFDQUMsSUFDRixFQUFHLENBQUNqc0QsRUFBT2tyRCxFQUFXeHFDLFNBQVd3cUMsRUFBV3hxQyxRQUFRdmpDLFFBRXBELElBQUkwcUMsRUFBaUIsR0FBUyxDQUFDLEVBQUcvbUIsRUFBMEJkLEdBQVFBLEVBQU04bkIsUUFBVSxDQUNsRixlQUFnQjluQixFQUFNOG5CLFFBQ3JCVCxFQUFPLFNBQVU1b0MsR0FDbEIsT0FBT0EsSUFBUWtzQyxJQUFlQyxFQUFjbnNDLEdBQU11aEIsRUFBTWtzQixLQUFPbHNCLEVBQU1rc0IsSUFBSXp0QyxHQUMzRSxHQUFJLENBQ0Z3WixVQUFXLENBQUMsR0FBUU4sVUFBV3F6RCxFQUFZLEdBQVFSLGFBQWUsR0FBSWMsRUFBWTVxQyxRQUFVLEdBQVE2cEMsYUFBZSxHQUFJYyxFQUFXM3FDLFFBQVUsR0FBUTJwQyxXQUFhLEdBQUlycUQsRUFBTStzRCxjQUFnQixHQUFRakQsaUJBQW1CLEdBQUk5cEQsRUFBTTNELFNBQVcsR0FBUWl1RCxjQUFnQixHQUFJdHFELEVBQU0ybEIsU0FBVyxHQUFROGtDLGNBQWdCLEdBQUl6cUQsRUFBTWd0RCxNQUFRLEdBQVE3QyxRQUFVLEdBQUlucUQsRUFBTTZsQixTQUFXLEdBQVF1a0MsV0FBYSxHQUFJcHFELEVBQU1pdEQsVUFBWSxHQUFRbEQsYUFBZSxHQUFJL3BELEVBQU01WSxRQUFVLEdBQVF5aUUsV0FBYSxJQUEwQixJQUF0QjdwRCxFQUFNaXFELGtCQUErQ3pvRSxJQUF0QndlLEVBQU1pcUQsWUFBNEIsR0FBUUEsWUFBYyxJQUF3QixJQUFwQmpxRCxFQUFNZ3FELGdCQUEyQ3hvRSxJQUFwQndlLEVBQU1ncUQsVUFBMEIsR0FBUUEsVUFBWSxHQUFJaHFELEVBQU1rcUQsZUFBaUIsR0FBUUEsZUFBaUIsR0FBbUIsU0FBZmxxRCxFQUFNZ29CLEtBQWtCLGVBQWlCLEtBQXFCLFVBQWZob0IsRUFBTWdvQixLQUFtQixnQkFBa0IsS0FBTWhvQixFQUFNL0gsV0FBYStILEVBQU1uYixFQUFTLFFBQUlvRyxLQUFLLE9BR3IwQmlpRSxFQUFXLEdBQWUsQ0FBQyxFQUFHbHRELEVBQU8sQ0FBQyxFQUFHQSxFQUFNbXRELGVBRS9DQyxFQUFlcHRELEVBQU14WCxPQUFTZ2pFLEVBQVM5cUMsUUFDdkNuNEIsRUFBTzJrRSxFQUFTeEIsVUFBWSxLQUFRd0IsRUFBUzNrRSxNQUEwQixXQUFsQjJrRSxFQUFTM2tFLE1BQXVDLFdBQWxCMmtFLEVBQVMza0UsS0FBNkIya0UsRUFBUzNrRSxLQUFsQixPQUNoSDhrRSxFQUFZckMsUUFBOEJ4cEUsSUFBakI0ckUsRUFDekJ6c0QsRUFBV3VzRCxFQUFTN3dELFVBQVk2d0QsRUFBU3JvRSxFQUFFOGdDLFVBQzNDaWtDLEVBQW9Cc0QsRUFBU3JuQyxVQUEyQyxLQUEvQnFuQyxFQUFTdEQsa0JBQTJCL3BELEVBQUUsT0FBUSxDQUN6RjVILFVBQVcsR0FBUTJ4RCxtQkFDbEJzRCxFQUFTdEQsbUJBQXFCLEtBQU8sS0FDcENELEdBQXFCdUQsRUFBU3JuQyxVQUFZcW5DLEVBQVN2RCxrQkFBb0I5cEQsRUFBRSxPQUFRLENBQ25GNUgsVUFBVyxHQUFRMHhELG1CQUNsQnVELEVBQVN2RCxtQkFBcUIsS0FDN0JsbUMsRUFBUXlwQyxFQUFTenBDLE1BQVEsQ0FBQ3lwQyxFQUFTenBDLE1BQU9tbUMsRUFBbUJELEdBQXFCLEtBQ2xGbGtFLEVBQVN5bkUsRUFBU3puRSxRQUFVLENBQUMsRUFDN0J3aUMsRUFBbUIsQ0FBQ3BvQixFQUFFLE1BQU8sQ0FDL0I1SCxVQUFXLEdBQVF5eEQsV0FDbEIsQ0FBQ2ptQyxFQUFRNWpCLEVBQUUsUUFBUyxDQUNyQjVILFVBQVcsR0FBUXdyQixPQUNsQkEsR0FBUyxLQUFNNWpCLEVBQUU0ckQsRUFBVyxHQUFTLENBQUMsRUFBRyxDQUMxQ3h6RCxVQUFXLEdBQVF0TixNQUNuQjBSLFNBQVU2d0QsRUFBUzd3RCxVQUNsQjlULEVBQU8sQ0FDUkEsS0FBTUEsR0FDSixLQUFNMmtFLEVBQVNsaEUsS0FBTyxDQUN4QkEsS0FBTWtoRSxFQUFTbGhFLE1BQ2IsS0FBTXZHLEVBQVNtbEUsR0FBWXNDLEVBQVVyb0UsRUFBRXVYLFNBV3RDLEtBWGlELEdBQWdCLENBQUMsRUFBR3ZYLEVBQUV1WCxRQUFTLFNBQVU1YyxHQUN6Rm1oQixJQU1KbXJELEVBQWtCLENBQ2hCcmhFLE9BQU8sSUFFVGhGLEVBQU9aLEVBQUV1WCxVQUFZM1csRUFBT1osRUFBRXVYLFNBQVM1YyxHQUN6QyxHQUFZb3JFLEdBQVlzQyxFQUFVcm9FLEVBQUU0L0IsU0FpQi9CLEtBakIwQyxHQUFnQixDQUFDLEVBQUc1L0IsRUFBRTQvQixRQUFTLFNBQVVqbEMsR0FDbEZtaEIsSUFJSm1yRCxFQUFrQixDQUNoQnJoRSxPQUFPLElBTUxrZ0MsR0FDRkEsRUFBVzduQixVQUFVL0IsSUFBSSxHQUFRd3BELGNBR25DOWtFLEVBQU9aLEVBQUU0L0IsVUFBWWgvQixFQUFPWixFQUFFNC9CLFNBQVNqbEMsR0FDekMsR0FBWW9yRSxHQUFZc0MsRUFBVXJvRSxFQUFFMC9CLFFBUS9CLEtBUnlDLEdBQWdCLENBQUMsRUFBRzEvQixFQUFFMC9CLE9BQVEsU0FBVS9rQyxHQUNwRnNzRSxFQUFrQixDQUNoQnZqRSxLQUFNLFNBQ05rQyxPQUFPLElBR1RrZ0MsRUFBVzduQixVQUFVOUIsT0FBTyxHQUFRdXBELGNBQ3BDOWtFLEVBQU9aLEVBQUUwL0IsU0FBVzkrQixFQUFPWixFQUFFMC9CLFFBQVEva0MsRUFDdkMsR0FBWW9yRSxHQUFZc0MsRUFBVXJvRSxFQUFFNi9CLFNBTy9CLEtBUDBDLEdBQWdCLENBQUMsRUFBRzcvQixFQUFFNi9CLFFBQVMsU0FBVWxsQyxHQUd0RnNzRSxFQUFrQixDQUNoQnZqRSxLQUFNLFVBRVI5QyxFQUFPWixFQUFFNi9CLFVBQVlqL0IsRUFBT1osRUFBRTYvQixTQUFTbGxDLEVBQ3pDLEdBQVlvckUsR0FBWXNDLEVBQVVyb0UsRUFBRTgvQixXQVUvQixLQVY0QyxHQUFnQixDQUFDLEVBQUc5L0IsRUFBRTgvQixVQUFXLFNBQVVubEMsR0FDNUUsVUFBVkEsRUFBRTBCLElBQ0pxcUUsRUFBYTdxQyxTQUFVLEVBQ0osV0FBVmxoQyxFQUFFMEIsS0FBOEIsUUFBVjFCLEVBQUUwQixLQUNqQzRxRSxFQUFrQixDQUNoQnJoRSxPQUFPLElBSVhoRixFQUFPWixFQUFFOC9CLFlBQWNsL0IsRUFBT1osRUFBRTgvQixXQUFXbmxDLEVBQzdDLFFBQWlDZ0MsSUFBdEIwckUsRUFBU3JuQyxVQUE0QnFuQyxFQUFTcm5DLFNBQVcsQ0FDbEVBLFVBQVUsR0FDUixVQUErQnJrQyxJQUF6QjByRSxFQUFTcm9FLEVBQUU4Z0MsV0FBNkJ1bkMsRUFBU3JvRSxFQUFFOGdDLFVBQVksR0FBZ0IsQ0FBQyxFQUFHOWdDLEVBQUU4Z0MsVUFBVSxHQUFRLFVBQTJCbmtDLElBQXJCMHJFLEVBQVMzbkMsUUFBd0IsQ0FDdEpBLFFBQVMybkMsRUFBUzNuQyxTQUNoQixVQUFnQy9qQyxJQUExQjByRSxFQUFTcm9FLEVBQUVrL0IsV0FBMkIsR0FBZ0IsQ0FBQyxFQUFHbC9CLEVBQUVrL0IsVUFBV21wQyxFQUFTcm9FLEVBQUVrL0IsWUFBYyxVQUFnQ3ZpQyxJQUExQjByRSxFQUFTcm9FLEVBQUVxL0IsV0FBMkIsR0FBZ0IsQ0FBQyxFQUFHci9CLEVBQUVxL0IsVUFBV2dwQyxFQUFTcm9FLEVBQUVxL0IsWUFBYyxVQUF1QjFpQyxJQUFqQjByRSxFQUFTOXdDLElBQW9CLENBQ2pQQSxJQUFLOHdDLEVBQVM5d0MsS0FDWixVQUF1QjU2QixJQUFqQjByRSxFQUFTaDBDLElBQW9CLENBQ3JDQSxJQUFLZzBDLEVBQVNoMEMsS0FDWixVQUFnQzEzQixJQUExQjByRSxFQUFTcm9FLEVBQUVxOEIsV0FBMkIsR0FBZ0IsQ0FBQyxFQUFHcjhCLEVBQUVxOEIsVUFBV2dzQyxFQUFTcm9FLEVBQUVxOEIsWUFBYyxVQUErQjEvQixJQUF6QjByRSxFQUFTcm9FLEVBQUVraUMsVUFBMEIsR0FBZ0IsQ0FBQyxFQUFHbGlDLEVBQUVraUMsU0FBVW1tQyxFQUFTcm9FLEVBQUVraUMsV0FBYSxVQUF3QnZsQyxJQUFsQjByRSxFQUFTam5DLEtBQXFCLENBQy9PQSxLQUFNaW5DLEVBQVNqbkMsTUFDYixVQUErQnprQyxJQUF6QjByRSxFQUFTM3NELFlBQTRCLENBQzdDQSxZQUFhMnNELEVBQVMzc0QsYUFDcEIsVUFBaUMvZSxJQUEzQjByRSxFQUFTQyxjQUE4QixHQUFlLENBQUMsRUFBR0QsRUFBU0MsZUFBaUIsU0FBVUQsRUFBUzlsRSxRQUFVeVksRUFBRSxNQUFPLENBQ2xJNUgsVUFBVyxHQUFRN1EsVUFDakJqSyxFQUFNd0QsUUFBVSxHQUFLLE1BQVF1c0UsRUFBUzlsRSxTQUFXLEtBQU04bEUsRUFBU3pELE9BQVM0RCxFQUFZeHRELEVBQUUsTUFBTyxDQUNoRzVILFVBQVcsQ0FBQyxHQUFRd3hELEtBQU15RCxFQUFTMUQsVUFBWSxHQUFRQSxVQUFZLE1BQU12K0QsS0FBSyxNQUM3RWlpRSxFQUFTekQsTUFBUSxLQUFNNEQsRUFBWXh0RCxFQUFFLE1BQU8sQ0FDN0M1SCxVQUFXLEdBQVF6UCxPQUNsQjRrRSxHQUFnQnpCLElBQXlCdUIsRUFBU3pELEtBQU81cEQsRUFBRSxNQUFPLENBQ25FNUgsVUFBVyxHQUFRc3hELG1CQUNoQixNQUNEdGlFLEVBQVUsQ0FBQytZLEVBQU1rSCxRQUFRdFQsT0FBT3EwQixFQUFrQixDQUFDam9CLEVBQU1tSCxRQUM3RCxPQUFPdEgsRUFBRUcsRUFBTTlrQixTQUFXLE1BQU8yc0MsRUFBZ0I1Z0MsRUFDbkQsRUMvZmlDLENBQy9CNFksRUFBR0EsR0FDSGhiLEVBQUdBLEdBQ0hrYixVQUFXQSxHQUNYRCxTQUFVQSxHQUNWMGdCLE9BQVFBLEdBQ1I2RyxPQUFRQSxLQUVWeWpDLEdBQXVCLFlBQUksWUNTM0IsTUFBTXdDLEdBQXNELENBQzFELE1BQUFsa0UsQ0FBT3hLLEdBQ0xBLEVBQU1NLE1BQU1xdUUsVUFBWSxDQUFFcHdFLE1BQU8sR0FBSXl1RSxPQUFPLEVBQzlDLEVBQ0FqcUUsS0FBSy9DLEdBQ0ksS0FBRTBwRSxHQUFVLENBQ2pCdnNELE1BQU9uZCxFQUFNQyxNQUFNa2QsTUFDbkJ0VyxPQUFRLENBQ04yVyxRQUFVd0gsSUFDUmhsQixFQUFNTSxNQUFNcXVFLFVBQVksQ0FBRXB3RSxNQUFPLEdBQUl5dUUsT0FBTyxHQUM1Qy85QixHQUFPMXRCLEtBQUssS0FBTSxDQUNoQm9vQixVQUFVLEVBQ1Z4c0MsS0FBTSxLQUFFK3VFLEdBQVcsQ0FDakJybkMsTUFBTzdrQyxFQUFNQyxNQUFNMnVFLGVBQ25CVCxlQUFlLEVBQ2ZsbkMsVUFBVSxFQUNWdDlCLEtBQU0sTUFDTmc5QixRQUFTM21DLEVBQU1DLE1BQU0wbUMsUUFDckIvOEIsTUFBTzVKLEVBQU1DLE1BQU0ySixNQUNuQndiLFNBQVcyb0QsSUFDVC90RSxFQUFNTSxNQUFNcXVFLFVBQVksQ0FDdEJwd0UsTUFBT3d2RSxFQUFTeHZFLE1BQ2hCeXVFLE9BQVFlLEVBQVNoQyxZQUl2QjcrQixjQUFlLENBQ2IsS0FBRStKLEdBQVEsQ0FDUnBTLE1BQU8sS0FDUGgrQixPQUFRLENBQ04yVyxRQUFVNWMsSUFDUnF1QyxHQUFPbnRCLE9BQU81VyxLQUFLLEtBQUssUUFDdEIsT0FBNkIsUUFBNUIsRUFBa0IsUUFBbEIsRUFBQWxMLEVBQU1DLE1BQU00RyxjQUFNLGVBQUU2akUsZ0JBQVEsUUFBTTlwRSxJQUFlLEdBQUdBLFNBSzdELEtBQUVxMkMsR0FBUSxDQUNScFMsTUFBTyxLQUNQcG5CLFVBQVd6ZCxFQUFNTSxNQUFNcXVFLFVBQVUzQixNQUNqQ25tRSxPQUFRLENBQ04yVyxRQUFVNWMsSUFDSlosRUFBTU0sTUFBTXF1RSxVQUFVM0IsT0FDeEIvOUIsR0FBT250QixPQUFPNVcsS0FBSyxLLFVBQ2pCLEdBQXNCLFFBQWxCLEVBQUFsTCxFQUFNQyxNQUFNNEcsY0FBTSxlQUFFKytCLFNBQVUsQ0FDaEMsSUFBSW40QixFQUFNek4sRUFBTU0sTUFBTXF1RSxVQUFVcHdFLE1BQ2hDLEdBQUl5QixFQUFNQyxNQUFNNHVFLFNBQ2QsSUFBSyxJQUFJQyxLQUErQixRQUFwQixFQUFBOXVFLEVBQU1DLE1BQU00dUUsZ0JBQVEsUUFBSSxHQUsxQyxHQUpBcGhFLEVBQU16TixFQUFNTSxNQUFNcXVFLFVBQVVwd0UsTUFBTUUsUUFDaEMsSUFBSWtPLE9BQU9taUUsRUFBUW5vQyxTQUNuQm1vQyxFQUFRQyxhQUVOdGhFLEdBQU96TixFQUFNTSxNQUFNcXVFLFVBQVVwd0UsTUFDL0IsTUFJTixNQUFNeXdFLEVBQUcsK0JBQ0pwdUUsR0FBQyxDQUNKNk0sUUFFZ0IsUUFBbEIsRUFBQXpOLEVBQU1DLE1BQU00RyxjQUFNLFNBQUUrK0IsU0FBU29wQyxFQUMvQixpQkNoRnhCLFNBQVMsR0FBZ0Jqd0QsRUFBS3pjLEVBQUsvRCxHQVlqQyxPQVhJK0QsS0FBT3ljLEVBQ1QvYixPQUFPNmIsZUFBZUUsRUFBS3pjLEVBQUssQ0FDOUIvRCxNQUFPQSxFQUNQdWdCLFlBQVksRUFDWkcsY0FBYyxFQUNkQyxVQUFVLElBR1pILEVBQUl6YyxHQUFPL0QsRUFHTndnQixDQUNULENBRUEsU0FBUyxLQWVQLE9BZEEsR0FBVy9iLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENBRUEsU0FBUyxHQUFRd0wsRUFBUWtULEdBQ3ZCLElBQUkvSCxFQUFPclUsT0FBT3FVLEtBQUtuTCxHQUV2QixHQUFJbEosT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJQyxFQUFVdGMsT0FBT3FjLHNCQUFzQm5ULEdBQ3ZDa1QsSUFBZ0JFLEVBQVVBLEVBQVFuSixPQUFPLFNBQVVvSixHQUNyRCxPQUFPdmMsT0FBTzJYLHlCQUF5QnpPLEVBQVFxVCxHQUFLVCxVQUN0RCxJQUNBekgsRUFBSzlRLEtBQUs5RixNQUFNNFcsRUFBTWlJLEVBQ3hCLENBRUEsT0FBT2pJLENBQ1QsQ0EwREEsU0FBUyxHQUFlNkksRUFBSzdlLEdBQzNCLE9BR0YsU0FBeUI2ZSxHQUN2QixHQUFJdmEsTUFBTXVELFFBQVFnWCxHQUFNLE9BQU9BLENBQ2pDLENBTFMsQ0FBZ0JBLElBT3pCLFNBQStCQSxFQUFLN2UsR0FDbEMsSUFBSStlLEVBQU8sR0FDUEMsR0FBSyxFQUNMQyxHQUFLLEVBQ0xDLE9BQUszZCxFQUVULElBQ0UsSUFBSyxJQUFpQzRkLEVBQTdCQyxFQUFLUCxFQUFJUSxPQUFPQyxjQUFtQk4sR0FBTUcsRUFBS0MsRUFBR2hRLFFBQVEyRCxRQUNoRWdNLEVBQUs3WixLQUFLaWEsRUFBR2ppQixRQUVUOEMsR0FBSytlLEVBQUtyZSxTQUFXVixHQUg4Q2dmLEdBQUssR0FLaEYsQ0FBRSxNQUFPL00sR0FDUGdOLEdBQUssRUFDTEMsRUFBS2pOLENBQ1AsQ0FBRSxRQUNBLElBQ08rTSxHQUFzQixNQUFoQkksRUFBVyxRQUFXQSxFQUFXLFFBQzlDLENBQUUsUUFDQSxHQUFJSCxFQUFJLE1BQU1DLENBQ2hCLENBQ0YsQ0FFQSxPQUFPSCxDQUNULENBL0JpQyxDQUFzQkYsRUFBSzdlLElBaUM1RCxXQUNFLE1BQU0sSUFBSWdLLFVBQVUsdURBQ3RCLENBbkNrRSxFQUNsRSxDQW9DQSxJQUFJLEdBQVUsQ0FDWjBOLFVBQVcsYUFFWHN5QyxVQUFXLHdCQUNYMXBDLFlBQWEsMEJBRWI0YyxTQUFVLHVCQUNWdmIsSUFBSyxrQkFDTEQsTUFBTyxvQkFDUEQsT0FBUSxxQkFDUnhCLFVBQVcsd0JBQ1hvcUIsT0FBUSxxQkFDUjdvQixRQUFTLHNCQUNUb3NELFlBQWEsMkJBQ2Jyc0QsTUFBTyxvQkFDUG1uQixRQUFTLHVCQWNQLEdBQXlCLENBQzNCeGlCLFdBQVcsRUFDWEMsaUJBQWlCLEVBQ2pCMG5ELFVBQVUsR0N6SlJDLEdBQWN6bUMsR0QySkMsU0FBc0IxbkIsR0FDdkMsSUFBSUMsRUFBSUQsRUFBS0MsRUFDVGhiLEVBQUkrYSxFQUFLL2EsRUFDVG83QixFQUFhcmdCLEVBQUtxZ0IsV0FDbEJuZ0IsRUFBV0YsRUFBS0UsU0FDaEJDLEVBQVlILEVBQUtHLFVBQ2pCc25CLEVBQVN6bkIsRUFBS3luQixPQUNkTSxFQUFTL25CLEVBQUsrbkIsT0FDZDNuQixFQXJHTixTQUFrQzdZLEVBQVFxWCxHQUN4QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFFNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFsQk4sU0FBdUNNLEVBQVFxWCxHQUM3QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFDNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFBUyxDQUFDLEVBQ1Y0WCxFQUFhN2MsT0FBT3FVLEtBQUs5TyxHQUc3QixJQUFLbEgsRUFBSSxFQUFHQSxFQUFJd2UsRUFBVzlkLE9BQVFWLElBQ2pDaUIsRUFBTXVkLEVBQVd4ZSxHQUNidWUsRUFBUzVWLFFBQVExSCxJQUFRLElBQzdCMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsSUFHdkIsT0FBTzJGLENBQ1QsQ0FLZSxDQUE4Qk0sRUFBUXFYLEdBSW5ELEdBQUk1YyxPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlVLEVBQW1CL2MsT0FBT3FjLHNCQUFzQjlXLEdBRXBELElBQUtsSCxFQUFJLEVBQUdBLEVBQUkwZSxFQUFpQmhlLE9BQVFWLElBQ3ZDaUIsRUFBTXlkLEVBQWlCMWUsR0FDbkJ1ZSxFQUFTNVYsUUFBUTFILElBQVEsR0FDeEJVLE9BQU9HLFVBQVU2YyxxQkFBcUIxYyxLQUFLaUYsRUFBUWpHLEtBQ3hEMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FFekIsQ0FFQSxPQUFPMkYsQ0FDVCxDQWtGYyxDQUF5QitZLEVBQU0sQ0FBQyxJQUFLLElBQUssYUFBYyxXQUFZLFlBQWEsU0FBVSxXQUduRzRzQixFQUFlLEdBRER2TSxFQUFXNVosRUFBd0IsSUFDTixHQUMzQ29tQixFQUFrQkQsRUFBYSxHQUMvQjlrQixFQUEwQjhrQixFQUFhLEdBR3ZDdnNCLEVBQWEsR0FEREgsSUFDMkIsR0FDdkM2cUIsRUFBYTFxQixFQUFXLEdBQ3hCMnFCLEVBQWdCM3FCLEVBQVcsR0FFM0JrRyxHQUFhc21CLEdBQW1CLElBQXdCdG1CLFVBQ3hEMG1CLEVBQW9CLENBQ3RCbmxCLHdCQUF5QkEsRUFDekIxSCxNQUFPQSxFQUNQNEgsWUFBYSxDQUNYcnNCLEdBQUlvdkMsR0FFTnRqQixVQUFXLEdBQVFzaEIsU0FFckI1b0IsRUFBVSxXQUNINHFCLElBSUEzcUIsRUFBTUUsV0FqRE51SCxFQWpIVCxTQUF3QjVnQixHQUN0QixJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUF5QixNQUFoQjdILFVBQVVXLEdBQWFYLFVBQVVXLEdBQUssQ0FBQyxFQUVoREEsRUFBSSxFQUNOLEdBQVFrSCxHQUFRLEdBQU16SyxRQUFRLFNBQVV3RSxHQUN0QyxHQUFnQjJGLEVBQVEzRixFQUFLaUcsRUFBT2pHLEdBQ3RDLEdBQ1NVLE9BQU95YywwQkFDaEJ6YyxPQUFPMGMsaUJBQWlCelgsRUFBUWpGLE9BQU95YywwQkFBMEJsWCxJQUVqRSxHQUFRQSxHQUFRekssUUFBUSxTQUFVd0UsR0FDaENVLE9BQU82YixlQUFlNVcsRUFBUTNGLEVBQUtVLE9BQU8yWCx5QkFBeUJwUyxFQUFRakcsR0FDN0UsRUFFSixDQUVBLE9BQU8yRixDQUNULENBK0Y2QixDQUFlLENBQUMsRUFrRDNCZ21DLEVBbERvQyxDQUNsRGxsQixRQUFRLEtBbURWLEVBQUcsQ0FBQ2dqQixJQUVKLElBQUk5QyxFQUFpQixHQUFTLENBQUMsRUFBRy9tQixFQUEwQmQsR0FBUXFuQixFQUFPLFNBQVU1b0MsR0FDbkYsT0FBT0EsSUFBUWtzQyxJQUFlQyxFQUFjbnNDLEdBQU11aEIsRUFBTWtzQixLQUFPbHNCLEVBQU1rc0IsSUFBSXp0QyxHQUMzRSxHQUFJdWhCLEVBQU04bkIsUUFBVSxDQUNsQixlQUFnQjluQixFQUFNOG5CLFFBQ3JCLENBQ0Q3dkIsVUFBVyxDQUFDLEdBQVFOLFVBQVdxSSxFQUFNZ3VELGNBQWUxc0QsRUFBYSxHQUFTdEIsRUFBTXVCLE1BQU92QixFQUFNNnRELFlBQWMsR0FBUUEsWUFBYyxLQUFNN3RELEVBQU1zcUIsT0FBUyxHQUFRQSxPQUFTLEtBQU10cUIsRUFBTW1kLFNBQVcsR0FBUUEsU0FBVyxLQUFNbmQsRUFBTUUsVUFBWSxHQUFRQSxVQUFZLEtBQU1pRyxFQUFZLEdBQVF3aUIsUUFBVSxLQUFNM29CLEVBQU0vSCxXQUFhK0gsRUFBTW5iLEVBQVMsUUFBSW9HLEtBQUssTUFDalYrVSxFQUFNdmEsUUFFTHdCLEVBQVUsQ0FBQytZLEVBQU1rSCxPQUFRbEgsRUFBTS9ZLFFBQVMrWSxFQUFNbUgsT0FRbEQsT0FOSW5ILEVBQU1zcUIsUUFBVXJqQyxFQUFRdEcsT0FBUyxHQUNuQ3NHLEVBQVE5QixLQUFLMGEsRUFBRThuQixFQUFRLENBQ3JCcEssWUFBYXZkLEVBQU11ZCxlQUloQjFkLEVBQUUsTUFBT2dvQixFQUFnQjVnQyxFQUNsQyxFQ25OcUMsQ0FDbkM0WSxFQUFHQSxHQUNIaGIsRUFBR0EsR0FDSG83QixXQUFZQSxHQUNabmdCLFNBQVVBLEdBQ1ZDLFVBQVdBLEdBQ1hzbkIsT0FBUUEsR0FDUk0sT0FBUUEsS0M3QlYsU0FBUyxLQWVQLE9BZEEsR0FBVy9sQyxPQUFPK1UsUUFBVSxTQUFVOVAsR0FDcEMsSUFBSyxJQUFJNUcsRUFBSSxFQUFHQSxFQUFJWCxVQUFVcUIsT0FBUVYsSUFBSyxDQUN6QyxJQUFJa0gsRUFBUzdILFVBQVVXLEdBRXZCLElBQUssSUFBSWlCLEtBQU9pRyxFQUNWdkYsT0FBT0csVUFBVStOLGVBQWU1TixLQUFLaUYsRUFBUWpHLEtBQy9DMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FHM0IsQ0FFQSxPQUFPMkYsQ0FDVCxFQUVPLEdBQVN4SCxNQUFNRCxLQUFNRSxVQUM5QixDRGVBeXVFLEdBQXlCLFlBQUksY0FDN0JBLEdBQXFCLFFBNUJQLENBQ1pwMkQsVUFBVyxhQUVYc3lDLFVBQVcsd0JBQ1gxcEMsWUFBYSwwQkFFYjRjLFNBQVUsdUJBQ1Z2YixJQUFLLGtCQUNMRCxNQUFPLG9CQUNQRCxPQUFRLHFCQUNSeEIsVUFBVyx3QkFDWG9xQixPQUFRLHFCQUNSN29CLFFBQVMsc0JBQ1Rvc0QsWUFBYSwyQkFDYnJzRCxNQUFPLG9CQUNQbW5CLFFBQVMsdUJDbUNYLElBQUksR0FBVSxDQUNaaHhCLFVBQVcsZ0JBRVhzeUMsVUFBVywyQkFDWGdrQixPQUFRLHdCQUNSQyxjQUFlLGdDQUNmQyxrQkFBbUIscUNBQ25CQyxtQkFBb0Isc0NBQ3BCQyxTQUFVLDJCQUNWQyxNQUFPLHVCQUNQQyxPQUFRLHlCQzNEVixTQUFTLEdBQWdCNXdELEVBQUt6YyxFQUFLL0QsR0FZakMsT0FYSStELEtBQU95YyxFQUNUL2IsT0FBTzZiLGVBQWVFLEVBQUt6YyxFQUFLLENBQzlCL0QsTUFBT0EsRUFDUHVnQixZQUFZLEVBQ1pHLGNBQWMsRUFDZEMsVUFBVSxJQUdaSCxFQUFJemMsR0FBTy9ELEVBR053Z0IsQ0FDVCxDQUVBLFNBQVMsR0FBUTdTLEVBQVFrVCxHQUN2QixJQUFJL0gsRUFBT3JVLE9BQU9xVSxLQUFLbkwsR0FFdkIsR0FBSWxKLE9BQU9xYyxzQkFBdUIsQ0FDaEMsSUFBSUMsRUFBVXRjLE9BQU9xYyxzQkFBc0JuVCxHQUN2Q2tULElBQWdCRSxFQUFVQSxFQUFRbkosT0FBTyxTQUFVb0osR0FDckQsT0FBT3ZjLE9BQU8yWCx5QkFBeUJ6TyxFQUFRcVQsR0FBS1QsVUFDdEQsSUFDQXpILEVBQUs5USxLQUFLOUYsTUFBTTRXLEVBQU1pSSxFQUN4QixDQUVBLE9BQU9qSSxDQUNULENBc0JBLElBK0JJdTRELEdBQVVsbkMsR0RLQyxTQUFrQjFuQixHQUMvQixJQUFJQyxFQUFJRCxFQUFLQyxFQUNUa3VELEVBQWNudUQsRUFBS211RCxZQUNuQi90RCxFQTVETixTQUFrQzdZLEVBQVFxWCxHQUN4QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFFNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFsQk4sU0FBdUNNLEVBQVFxWCxHQUM3QyxHQUFjLE1BQVZyWCxFQUFnQixNQUFPLENBQUMsRUFDNUIsSUFFSWpHLEVBQUtqQixFQUZMNEcsRUFBUyxDQUFDLEVBQ1Y0WCxFQUFhN2MsT0FBT3FVLEtBQUs5TyxHQUc3QixJQUFLbEgsRUFBSSxFQUFHQSxFQUFJd2UsRUFBVzlkLE9BQVFWLElBQ2pDaUIsRUFBTXVkLEVBQVd4ZSxHQUNidWUsRUFBUzVWLFFBQVExSCxJQUFRLElBQzdCMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsSUFHdkIsT0FBTzJGLENBQ1QsQ0FLZSxDQUE4Qk0sRUFBUXFYLEdBSW5ELEdBQUk1YyxPQUFPcWMsc0JBQXVCLENBQ2hDLElBQUlVLEVBQW1CL2MsT0FBT3FjLHNCQUFzQjlXLEdBRXBELElBQUtsSCxFQUFJLEVBQUdBLEVBQUkwZSxFQUFpQmhlLE9BQVFWLElBQ3ZDaUIsRUFBTXlkLEVBQWlCMWUsR0FDbkJ1ZSxFQUFTNVYsUUFBUTFILElBQVEsR0FDeEJVLE9BQU9HLFVBQVU2YyxxQkFBcUIxYyxLQUFLaUYsRUFBUWpHLEtBQ3hEMkYsRUFBTzNGLEdBQU9pRyxFQUFPakcsR0FFekIsQ0FFQSxPQUFPMkYsQ0FDVCxDQXlDYyxDQUF5QitZLEVBQU0sQ0FBQyxJQUFLLGdCQUU3QzNZLEVBQVUrWSxFQUFNL1ksU0FBVzRZLEVBQUUsTUFBTyxDQUV0QzVILFVBQVcsR0FBUWd5QyxXQUNsQixDQUFDLEVBQUcsRUFBRyxFQUFHLEdBQUcvbEQsSUFBSSxTQUFVNGtCLEdBQzVCLE9BaENRLFNBQWVBLEVBQUtqSixHQUM5QixPQUFPQSxFQUFFLE1BQU8sQ0FDZDNlLElBQUs0bkIsRUFDTDdRLFVBQVcsQ0FBQyxHQUFRcTJELE1BQU8sR0FBUUMsT0FBU3psRCxHQUFLN2QsS0FBSyxNQUNyRCxDQUFDNFUsRUFBRSxNQUFPLENBRVg1SCxVQUFXLENBQUMsR0FBUWkyRCxjQUFlLEdBQVFDLG1CQUFtQmxqRSxLQUFLLE1BQ2xFNFUsRUFBRSxNQUFPLENBRVY1SCxVQUFXLEdBQVFnMkQsVUFDaEJwdUQsRUFBRSxNQUFPLENBRVo1SCxVQUFXLEdBQVFvMkQsVUFDbEJ4dUQsRUFBRSxNQUFPLENBQ1Y1SCxVQUFXLEdBQVFnMkQsVUFDaEJwdUQsRUFBRSxNQUFPLENBRVo1SCxVQUFXLENBQUMsR0FBUWkyRCxjQUFlLEdBQVFFLG9CQUFvQm5qRSxLQUFLLE1BQ25FNFUsRUFBRSxNQUFPLENBQ1Y1SCxVQUFXLEdBQVFnMkQsV0FFdkIsQ0FXVyxDQUFNbmxELEVBQUtqSixFQUNwQixJQUVJZ29CLEVBQWlCLEdBQVMsQ0FBQyxFQUFHN25CLEVBQU8sQ0FDdkMvSCxVQUFXLENBQUMsR0FBUU4sVUFBV3FJLEVBQU0vSCxXQUFXaE4sS0FBSyxLQUNyRGhFLFFBQVNBLElBR1gsT0FBTzRZLEVBQUVrdUQsRUFBYWxtQyxFQUN4QixFQ3ZCNkIsQ0FDM0Job0IsRUFBR0EsR0FDSGt1RCxZQUFhQSxLQUVYVSxHQUFnQm5uQyxHQUFLM25CLEVBQWMsQ0FDckNFLEVBQUdBLEdBQ0hDLFNBQVVBLEdBQ1ZDLFVBQVdBLEtBRWIwdUQsR0FBMkIsWUFBSSw4QkFDL0IsSUFBSUMsR0FBd0IsQ0FDMUIvc0UsS0FBTSxTQUFjL0MsR0FDbEIsT0FBT2loQixHQUFFNHVELEdBL0RiLFNBQXdCNW5FLEdBQ3RCLElBQUssSUFBSTVHLEVBQUksRUFBR0EsRUFBSVgsVUFBVXFCLE9BQVFWLElBQUssQ0FDekMsSUFBSWtILEVBQXlCLE1BQWhCN0gsVUFBVVcsR0FBYVgsVUFBVVcsR0FBSyxDQUFDLEVBRWhEQSxFQUFJLEVBQ04sR0FBUWtILEdBQVEsR0FBTXpLLFFBQVEsU0FBVXdFLEdBQ3RDLEdBQWdCMkYsRUFBUTNGLEVBQUtpRyxFQUFPakcsR0FDdEMsR0FDU1UsT0FBT3ljLDBCQUNoQnpjLE9BQU8wYyxpQkFBaUJ6WCxFQUFRakYsT0FBT3ljLDBCQUEwQmxYLElBRWpFLEdBQVFBLEdBQVF6SyxRQUFRLFNBQVV3RSxHQUNoQ1UsT0FBTzZiLGVBQWU1VyxFQUFRM0YsRUFBS1UsT0FBTzJYLHlCQUF5QnBTLEVBQVFqRyxHQUM3RSxFQUVKLENBRUEsT0FBTzJGLENBQ1QsQ0E2QzRCLENBQWUsQ0FBQyxFQUFHakksRUFBTUMsTUFBTyxDQUN0RDJoQixxQkEzQlMsMEJBNEJUeGUsU0FBVXdzRSxLQUVkLEdDN0ZGLFNBQVNHLEdBQWtCemdFLEdBQ3pCMi9CLEdBQU8xdEIsS0FBSyxDQUNWb29CLFVBQVUsRUFDVnhzQyxLQUFNbVMsRUFDTjQ5QixjQUFlLEtBQUUrSixHQUFRLENBQ3ZCcFMsTUFBTyxLQUNQaCtCLE9BQVEsQ0FDTjJXLFFBQVMsSUFBTXl4QixHQUFPbnRCLFdBSTlCLENBRUEsU0FBU2t1RCxLQUNQL2dDLEdBQU8xdEIsS0FBSyxDQUNWb29CLFVBQVUsRUFDVkcsT0FBTyxFQUNQMEUsZUFBZSxFQUNmcnhCLE1BQU8sV0FDUGhnQixLQUFNLEtBQ0osTUFDQSxDQUFFRSxNQUFPLENBQUVZLE9BQVEsU0FDbkIsS0FBRSxHQUFTLENBQ1RaLE1BQU8sQ0FBRXk1QixPQUFRLFFBQ2pCeFYsV0FBVyxFQUNYcUIsS0FBTSxZQUlkLENEa0VBbXRELEdBQStCLFFBakRqQixDQUNaLzJELFVBQVcsZ0JBRVhzeUMsVUFBVywyQkFDWGdrQixPQUFRLHdCQUNSQyxjQUFlLGdDQUNmQyxrQkFBbUIscUNBQ25CQyxtQkFBb0Isc0NBQ3BCQyxTQUFVLDJCQUNWQyxNQUFPLHVCQUNQQyxPQUFRLHlCQXdDVkcsR0FBbUMsWUFBSSx3QkV4RnZDLE1BQU1HLEdBQW9CLEdBOEIxQixHQUF1Qiw4QkFBK0IsQ0FDcERybEIsZ0JBQWlCLElBR25CLElBQUlzbEIsR0FBb0IsRUFFeEIsTUFBTUMsR0FBa0UsQ0FDdEUsTUFBQTNsRSxDQUFPeEssR0FDTEEsRUFBTU0sTUFBTXNPLE1BQU8sRUFDbkI1TyxFQUFNTSxNQUFNOHZFLFNBQVcsNEJBQTJCRixFQUNwRCxFQUNBLElBQUFudEUsQ0FBSy9DLEcsUUFDSCxPQUFPLEtBQUUsTUFBTyxDQUFFM0MsTUFBTyxDQUFFZCxTQUFVLGFBQWdCLENBQ25ELEtBQUVpckUsR0FBTSxDQUNOdi9ELE9BQVEsSUFBSWpJLEVBQU1NLE1BQU04dkUsV0FDeEI3dUQsS0FBTXZoQixFQUFNTSxNQUFNc08sS0FDbEJpVCxRQUFVM2tCLEdBQWdCOEMsRUFBTU0sTUFBTXNPLE1BQU8sRUFDN0NrMkQsT0FBUSxNQUNSejhCLE1BQU8sRUFDUGhnQyxRQUFTLEtBQUV3aEUsR0FBTSxDQUNmRyxNQUFPLE0sTUFDTCxNQUFNcUcsR0FBK0IsUUFBaEIsRUFBQXJ3RSxFQUFNQyxNQUFNcXdFLFlBQUksUUFBSUwsSUFBbUIzcUUsSUFDekR5MUIsR0FDQyxLQUFFMnVDLEdBQVUsQ0FDVnZzRCxNQUFPNGQsRUFBSWxDLE1BQ1hoeUIsT0FBUSxDQUNOMlcsUUFBVTVjLEksUUFDUixHQUFzQixRQUFsQixFQUFBWixFQUFNQyxNQUFNNEcsY0FBTSxlQUFFMHBFLGNBQWUsQ0FDckMsTUFBTUMsRUFBRywrQkFBMEI1dkUsR0FBQyxDQUFFbTZCLFFBQ3BCLFFBQWxCLEVBQUEvNkIsRUFBTUMsTUFBTTRHLGNBQU0sU0FBRTBwRSxjQUFjQyxFQUNwQyxJQUdKcEksVUFBVyxDQUNULy9ELFFBQVMsS0FBRThoRSxHQUFZLENBQ3JCOXdELFVBQVcsNkJBQ1htckIsS0FBTSxDQUFFOWtDLElBQUssQ0FBRTJJLFFBQVMsTUFBY3NhLEtBQU0sU0FDNUNvYixTQUFTLEVBQ1RsM0IsT0FBUSxDQUNOMlcsUUFBVTVjLEksUUFDUixHQUFzQixRQUFsQixFQUFBWixFQUFNQyxNQUFNNEcsY0FBTSxlQUFFNHBFLGFBQWMsQ0FDcEMsTUFBTUMsRUFBRywrQkFBeUI5dkUsR0FBQyxDQUFFbTZCLFFBQ25CLFFBQWxCLEVBQUEvNkIsRUFBTUMsTUFBTTRHLGNBQU0sU0FBRTRwRSxhQUFhQyxFQUNuQyxVQXNGZCxPQS9FQUwsRUFBWTlwRSxLQUNWLEtBQUU4akUsR0FBVyxDQUNYbHRELE1BQU8sV0FDUHRXLE9BQVEsQ0FDTisrQixTQUFXaGxDLEksUUFDVCxNQUFNK3ZFLEVBQVkvdkUsRUFBRXFILE9BQ3BCLEdBQUkwb0UsRUFBVUMsTUFBTyxDQUNuQixNQUFNQSxFQUFRRCxFQUFVQyxNQUV4QixHQUFJQSxFQUFNN3VFLE9BQVMsRUFBRyxDQUNwQixNQUFNOHVFLEVBQWdCRCxFQUFNLEdBQzVCLEdBQUlDLEVBQVFsdUQsS0FBTyxJQUdqQixZQURBb3RELEdBQWtCLGdCQUlwQkMsS0FDQSxNQUFNYyxFQUFpQ0QsRUFBUXI1QyxTQUMvQyxHQUFzQixRQUFsQixFQUFBeDNCLEVBQU1DLE1BQU00RyxjQUFNLGVBQUVrcUUsY0FBZSxDQUNyQyxNQUFNQyxFQUFHLCtCQUNKcHdFLEdBQUMsQ0FDSnF3RSxNQUFPSixFQUFRempFLEtBQ2ZvcUIsT0FBUXM1QyxJQUVRLFFBQWxCLEVBQUE5d0UsRUFBTUMsTUFBTTRHLGNBQU0sU0FBRWtxRSxjQUFjQyxFQUNwQyxDQUNGLENBQ0YsT0FLUlgsRUFBWTlwRSxLQUNWLEtBQUVtb0UsR0FBVSxDQUNWdnhELE1BQU8sVUFDUHl4RCxlQUFnQixZQUNoQmpvQyxRQUFTLDJCQUNULzhCLE1BQU8sNENBQ1BpbEUsU0FBVSxDQUNSLENBQ0Vsb0MsUUFDRSxvREFDRm9vQyxZQUFhLDZDQUdqQmxvRSxPQUFRLENBQ04rK0IsU0FBV2hsQyxJQUNUb3ZFLEtBQ0FrQixNQUFNdHdFLEVBQUU2TSxLQUNMdkMsS0FBTXVFLEksUUFDTCxHQUFJQSxFQUFTMGhFLElBQ1gsR0FBc0IsUUFBbEIsRUFBQW54RSxFQUFNQyxNQUFNNEcsY0FBTSxlQUFFa3FFLGNBQWUsQ0FDckMsTUFBTUMsRUFBRywrQkFDSHB3RSxHQUFXLENBQ2Zxd0UsTUFBT3J3RSxFQUFFNk0sSUFDVCtwQixPQUFRL25CLEVBQVN0UyxPQUVELFFBQWxCLEVBQUE2QyxFQUFNQyxNQUFNNEcsY0FBTSxTQUFFa3FFLGNBQWNDLEVBQ3BDLE1BQ0ssQ0FDTCxNQUFNSSxFQUNlLEtBQW5CM2hFLEVBQVNELE9BQ0wsUUFDQSxlQUFlQyxFQUFTRCxTQUM5QnkvQixHQUFPbnRCLE9BQU81VyxLQUFLLElBQU02a0UsR0FBa0JxQixJQUMzQyxhQUNGLElBRURDLE1BQU96bkUsR0FDTnFsQyxHQUFPbnRCLE9BQU81VyxLQUFLLEtBQ2pCeEQsUUFBUWtDLE1BQU1BLEdBQ2RtbUUsR0FBa0JubUUsRUFBTTBGLGlCQU8vQitnRSxDQUNSLEVBOUdNLE9BaUhYLEtBQUVwNUIsR0FBUSxDQUNSLzVDLEdBQUk4QyxFQUFNTSxNQUFNOHZFLFNBQ2hCdnJDLE1BQW1DLFFBQTVCLEVBQXFCLFFBQXJCLEVBQUE3a0MsRUFBTUMsTUFBTXF4RSxpQkFBUyxlQUFFejRDLGFBQUssUUFBSSxVQUN2Q3NTLFNBQVUsQ0FBRXY4QixLQUFNNU8sRUFBTU0sTUFBTXNPLE1BQzlCL0gsT0FBUSxDQUNOMlcsUUFBUyxLQUNQeGQsRUFBTU0sTUFBTXNPLE1BQU8sT0FLN0IsRyxrRUM1TEYsU0FBUyxLQWVQLE9BZEEsR0FBVzVMLE9BQU8rVSxRQUFVLFNBQVU5UCxHQUNwQyxJQUFLLElBQUk1RyxFQUFJLEVBQUdBLEVBQUlYLFVBQVVxQixPQUFRVixJQUFLLENBQ3pDLElBQUlrSCxFQUFTN0gsVUFBVVcsR0FFdkIsSUFBSyxJQUFJaUIsS0FBT2lHLEVBQ1Z2RixPQUFPRyxVQUFVK04sZUFBZTVOLEtBQUtpRixFQUFRakcsS0FDL0MyRixFQUFPM0YsR0FBT2lHLEVBQU9qRyxHQUczQixDQUVBLE9BQU8yRixDQUNULEVBRU8sR0FBU3hILE1BQU1ELEtBQU1FLFVBQzlCLENBaUJBLFNBQVMsR0FBeUI2SCxFQUFRcVgsR0FDeEMsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBRTVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBbEJOLFNBQXVDTSxFQUFRcVgsR0FDN0MsR0FBYyxNQUFWclgsRUFBZ0IsTUFBTyxDQUFDLEVBQzVCLElBRUlqRyxFQUFLakIsRUFGTDRHLEVBQVMsQ0FBQyxFQUNWNFgsRUFBYTdjLE9BQU9xVSxLQUFLOU8sR0FHN0IsSUFBS2xILEVBQUksRUFBR0EsRUFBSXdlLEVBQVc5ZCxPQUFRVixJQUNqQ2lCLEVBQU11ZCxFQUFXeGUsR0FDYnVlLEVBQVM1VixRQUFRMUgsSUFBUSxJQUM3QjJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLElBR3ZCLE9BQU8yRixDQUNULENBS2UsQ0FBOEJNLEVBQVFxWCxHQUluRCxHQUFJNWMsT0FBT3FjLHNCQUF1QixDQUNoQyxJQUFJVSxFQUFtQi9jLE9BQU9xYyxzQkFBc0I5VyxHQUVwRCxJQUFLbEgsRUFBSSxFQUFHQSxFQUFJMGUsRUFBaUJoZSxPQUFRVixJQUN2Q2lCLEVBQU15ZCxFQUFpQjFlLEdBQ25CdWUsRUFBUzVWLFFBQVExSCxJQUFRLEdBQ3hCVSxPQUFPRyxVQUFVNmMscUJBQXFCMWMsS0FBS2lGLEVBQVFqRyxLQUN4RDJGLEVBQU8zRixHQUFPaUcsRUFBT2pHLEdBRXpCLENBRUEsT0FBTzJGLENBQ1QsQ0E0REEsSUFBSSxHQUFVLENBQ1o4USxVQUFXLFVBRVhveEIsUUFBUyxtQkFDVG9uQyxJQUFLLGVBQ0xscEUsUUFBUyxtQkFDVGdpQyxPQUFRLGtCQUNSbW5DLFlBQWEsd0JBQ2Jwc0MsTUFBTyxpQkFDUHFzQyxZQUFhLHlCQUNiQyxRQUFTLG1CQUNUQyxlQUFnQiw0QkFDaEJ4SixRQUFTLG1CQUNUeUosYUFBYyx5QkFDZHZKLFNBQVUsb0JBQ1ZyaEUsS0FBTSxnQkFDTm1XLE1BQU8saUJBRVAwMEQsY0FBZSwyQkFDZkMsa0JBQW1CLCtCQUNuQkMsaUJBQWtCLDhCQUNsQkMsYUFBYywwQkFDZEMsZ0JBQWlCLDZCQUNqQkMsV0FBWSx5QkFDWkMsV0FBWSx5QkFDWkMsaUJBQWtCLCtCQUNsQkMsa0JBQW1CLGdDQUNuQkMsZUFBZ0IsNkJBQ2hCQyxXQUFZLHdCQUNaQyxZQUFhLHlCQUNiQyxvQkFBcUIsNEJBQ3JCQyxpQkFBa0IseUJBQ2xCQyxhQUFjLDBCQUNkQyxXQUFZLHdCQUNaQyxhQUFjLDBCQUNkQyxnQkFBaUIsMEJBQ2pCQyxhQUFjLDBCQUNkQyxVQUFXLHdCQTRJVEMsR0FBYyxDQUNoQkMsVUFBVyxHQUFLLEVBQ2hCQyxPQUFRLEdBRU5DLEdBQW1CLENBQ3JCeHdELE1BQU8sR0FBUWd3RCxXQUNmL3ZELFFBQVMsR0FBUTh2RCxhQUNqQjd2RCxPQUFRLEdBQVEwdkQsWUFDaEJ6dkQsTUFBTyxHQUFRd3ZELFlBR2JjLEdBQWlCLFdBRW5CLE9BQU9ELEdBREkxeUUsVUFBVXFCLE9BQVMsUUFBc0JhLElBQWpCbEMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLFVBRWpGLEVBcUdJNHlFLEdBQXNCLENBQ3hCMVosV0FBWSxHQUFRa1ksa0JBQ3BCaFksU0FBVSxHQUFRbVksZ0JBQ2xCc0IsVUFBVyxHQUFReEIsa0JBR2pCeUIsR0FBdUIsV0FFekIsT0FBT0YsR0FETTV5RSxVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssYUFFbkYsRUN6WkkreUUsR0FBYy9xQyxHRDJaQyxTQUFzQjFuQixHQUN2QyxJQUFJQyxFQUFJRCxFQUFLQyxFQUNUaGIsRUFBSSthLEVBQUsvYSxFQUNUbWIsRUFBUSxHQUF5QkosRUFBTSxDQUFDLElBQUssTUFFN0Npb0IsRUFBaUIsR0FBUyxDQUFDLEVBQUcvbUIsRUFBMEJkLEdBQVFBLEVBQU04bkIsUUFBVSxDQUNsRixlQUFnQjluQixFQUFNOG5CLFFBQ3JCLENBQ0Q3dkIsVUFBVyxDQUFDLEdBQVE4d0IsUUFBMEIsYUFBakIvb0IsRUFBTXlJLE9BM0NoQyxnQkEyQzRFLEtBQU0ycEQsR0FBcUJweUQsRUFBTXlJLFFBQVN6SSxFQUFNZ2QsUUFBVWhkLEVBQU1zeUQsU0FBVyxHQUFRN0IsY0FBZ0IsS0FBTXp3RCxFQUFNdXlELE1BQVEsR0FBUTNCLGFBQWUsS0FBTTV3RCxFQUFNL0gsV0FBYStILEVBQU1uYixFQUFTLFFBQUlvRyxLQUFLLE1BQzdRK1UsRUFBTXZhLFFBRUx3QixFQUFVK1ksRUFBTS9ZLFNBQVcrWSxFQUFNM2YsU0FDckMsT0FBT3dmLEVBQUVHLEVBQU05a0IsU0FBVyxNQUFPMnNDLEVBQWdCNWdDLEVBQ25ELEVDeGFxQyxDQUNuQzRZLEVBQUdBLEdBQ0hoYixFQUFHQSxLQUVMd3RFLEdBQXlCLFlBQUksY0FFN0IsSUFBSUcsR0FBWWxyQyxHRGdVQyxTQUFvQnRsQixHQUNuQyxJQXJSc0JsRCxFQUFLN2UsRUFxUnZCNGYsRUFBSW1DLEVBQU1uQyxFQUNWaGIsRUFBSW1kLEVBQU1uZCxFQUNWa2IsRUFBWWlDLEVBQU1qQyxVQUNsQkQsRUFBV2tDLEVBQU1sQyxTQUNqQnVuQixFQUFTcmxCLEVBQU1xbEIsT0FDZnJuQixFQUFRLEdBQXlCZ0MsRUFBTyxDQUFDLElBQUssSUFBSyxZQUFhLFdBQVksV0FHNUUvQixHQTdSa0JuQixFQTRSTmdCLElBNVJXN2YsRUE2UmdCLEVBN1E3QyxTQUF5QjZlLEdBQ3ZCLEdBQUl2YSxNQUFNdUQsUUFBUWdYLEdBQU0sT0FBT0EsQ0FDakMsQ0FqQlMsQ0FBZ0JBLElBdUJ6QixTQUErQkEsRUFBSzdlLEdBQ2xDLElBQUkrZSxFQUFPLEdBQ1BDLEdBQUssRUFDTEMsR0FBSyxFQUNMQyxPQUFLM2QsRUFFVCxJQUNFLElBQUssSUFBaUM0ZCxFQUE3QkMsRUFBS1AsRUFBSVEsT0FBT0MsY0FBbUJOLEdBQU1HLEVBQUtDLEVBQUdoUSxRQUFRMkQsUUFDaEVnTSxFQUFLN1osS0FBS2lhLEVBQUdqaUIsUUFFVDhDLEdBQUsrZSxFQUFLcmUsU0FBV1YsR0FIOENnZixHQUFLLEdBS2hGLENBQUUsTUFBTy9NLEdBQ1BnTixHQUFLLEVBQ0xDLEVBQUtqTixDQUNQLENBQUUsUUFDQSxJQUNPK00sR0FBc0IsTUFBaEJJLEVBQVcsUUFBV0EsRUFBVyxRQUM5QyxDQUFFLFFBQ0EsR0FBSUgsRUFBSSxNQUFNQyxDQUNoQixDQUNGLENBRUEsT0FBT0gsQ0FDVCxDQS9DaUMsQ0FBc0JGLEVBQUs3ZSxJQXFENUQsV0FDRSxNQUFNLElBQUlnSyxVQUFVLHVEQUN0QixDQXZEa0UsSUE2UjVEMGdDLEVBQWExcUIsRUFBVyxHQUN4QjJxQixFQUFnQjNxQixFQUFXLEdBRTNCd3lELEVBQVF6eUQsRUFBTXl5RCxPQUFTLFlBQzNCMXlELEVBQVUsV0FDUixHQUFLNHFCLEVBQUwsQ0FJQSxJQUFJOG5DLEVBQVF6eUQsRUFBTXl5RCxPQUFTLFlBQ3ZCL08sRUFBUzFqRCxFQUFNMGpELFFBQVUsU0FDekJnUCxFQUFNL25DLEVBQVdsdkMsY0FBYyxRQUFVa3ZDLEVBQVdsdkMsY0FBYyxXQTlDMUQsU0FBbUJta0IsR0FDakMsSUFBSW5oQixFQUFNbWhCLEVBQUtuaEIsSUFDWGdvQyxFQUFNN21CLEVBQUs2bUIsSUFDWGdzQyxFQUFRN3lELEVBQUs2eUQsTUFDYi9PLEVBQVM5akQsRUFBSzhqRCxPQUNkZ1AsRUFBTSxJQUFJQyxNQUVkRCxFQUFJRSxPQUFTLFdBRVMsUUFBaEJGLEVBQUlHLFVBQ05wMEUsRUFBSXhDLE1BQU0raEUsZ0JBQWtCLE9BQU9wcUQsT0FBTzgrRCxFQUFJanNDLElBQUssTUFHckQsSUFHSXFzQyxFQUhlMXpFLEtBQUsyekUsYUFBZTN6RSxLQUFLNHpFLGNBR2JuQixHQUFZWSxHQUFTLEdBQVEzQixXQUFhLEdBQVFDLFdBQ2pGdHlFLEVBQUlxa0IsVUFBVS9CLElBQUkreEQsR0FDbEIsSUFBSUcsRUFBeUIsVUFBWHZQLEVBQXFCLEdBQVFzTixpQkFBOEIsUUFBWHROLEVBQW1CLEdBQVF3TixlQUFpQixHQUFRRCxrQkFDdEh4eUUsRUFBSXFrQixVQUFVL0IsSUFBSWt5RCxFQUNwQixFQUVBUCxFQUFJanNDLElBQU1BLENBQ1osQ0F3Qkl5c0MsQ0FBVSxDQUNSejBFLElBQUtrc0MsRUFDTGxFLElBQUtpc0MsRUFBSWpzQyxJQUNUZ3NDLE1BQU9BLEVBQ1AvTyxPQUFRQSxHQVRWLENBV0YsRUFBRyxDQUFDLzRCLElBRUosSUFBSTlDLEVBQWlCLEdBQVMsQ0FBQyxFQUFHL21CLEVBQTBCZCxHQUFRcW5CLEVBQU8sU0FBVTVvQyxHQUNuRixPQUFPQSxJQUFRa3NDLEdBQWNDLEVBQWNuc0MsRUFDN0MsR0FBSXVoQixFQUFNOG5CLFFBQVUsQ0FDbEIsZUFBZ0I5bkIsRUFBTThuQixRQUNyQixDQUNEN3ZCLFVBQVcsQ0FBQyxHQUFRK3JCLE1BQU9pdUMsR0FBZWp5RCxFQUFNdUIsTUFBaUIsY0FBVmt4RCxFQUF3QixHQUFRcEIsb0JBQXNCLEdBQVFDLGlCQUFrQnR4RCxFQUFNL0gsV0FBYStILEVBQU1uYixFQUFTLFFBQUlvRyxLQUFLLE1BQ2pMK1UsRUFBTXZhLFFBRUwwdEUsRUFBYW56RCxFQUFNbXpELFdBQ25CbHNFLEVBQVUsQ0FBQytZLEVBQU0vWSxRQUFTK1ksRUFBTXN3RCxRQUFVNkMsRUFBVyxDQUN2RDdDLFFBQVN0d0QsRUFBTXN3RCxVQUNadHdELEVBQU1vekQsWUFBY3Z6RCxFQUFFLE1BQU8sQ0FDaEM1SCxVQUFXLEdBQVFvNEQsZUFFckIsT0FBT3h3RCxFQUFFRyxFQUFNOWtCLFNBQVcsTUFBTzJzQyxFQUFnQjVnQyxFQUNuRCxFQzdXaUMsQ0FDL0I0WSxFQUFHQSxHQUNIaGIsRUFBR0EsR0FDSGliLFNBQVVBLEdBQ1ZDLFVBQVdBLEdBQ1hzbkIsT0FBUUEsS0FFVm1yQyxHQUF1QixZQUFJLFlBRTNCLElBQUlhLEdBQWMvckMsR0QyWkMsU0FBc0IxbkIsR0FDdkMsSUFBSUMsRUFBSUQsRUFBS0MsRUFDVGhiLEVBQUkrYSxFQUFLL2EsRUFDVG1iLEVBQVEsR0FBeUJKLEVBQU0sQ0FBQyxJQUFLLE1BRTdDOHhELEVBQWtCbnRFLE1BQU11RCxRQUFRa1ksRUFBTS9ZLFNBQVcrWSxFQUFNL1ksUUFBUWlhLE9BQU8sU0FBVW95RCxFQUFPNXlDLEdBQ3pGLE1BQW1DLFVBQTVCOStCLE9BQU9xVSxLQUFLeXFCLEdBQVMsSUFBd0I0eUMsQ0FDdEQsR0FBRyxHQUFTdHpELEVBQU1na0IsUUFBUyxFQUV2QjZELEVBQWlCLEdBQVMsQ0FBQyxFQUFHL21CLEVBQTBCZCxHQUFRQSxFQUFNOG5CLFFBQVUsQ0FDbEYsZUFBZ0I5bkIsRUFBTThuQixRQUNyQixDQUNEN3ZCLFVBQVcsQ0FBQyxHQUFROHVELFFBQVMvbUQsRUFBTXV5RCxNQUFRLEdBQVFaLGFBQWUsS0FBTUQsRUFBa0IsR0FBUUEsZ0JBQWtCLEtBQU0xeEQsRUFBTS9ILFdBQWErSCxFQUFNbmIsRUFBUyxRQUFJb0csS0FBSyxNQUNwSytVLEVBQU12YSxRQUVMMHRFLEVBQWFuekQsRUFBTW16RCxXQUNuQkksRUFBa0IsQ0FDcEJ4M0QsTUFBTyxTQUFleTNELEdBQ3BCLE9BQU9BLEVBQU8zMEUsT0FDWDIwRSxFQUFPeHpELE1BQ1J3ekQsR0FBVUEsRUFBT3h6RCxNQUFRSCxFQUFFLE1BQU8sQ0FDbEM1SCxVQUFXLEdBQVE4RCxNQUNuQjlmLE1BQU91M0UsRUFBT3YzRSxPQUNiLENBQUN1M0UsRUFBT3ozRCxNQUFPeTNELEVBQU92TSxTQUFXcG5ELEVBQUUsTUFBTyxDQUMzQzVILFVBQVcsR0FBUWd2RCxVQUNsQnVNLEVBQU92TSxVQUFZLE1BQ3hCLEVBQ0FqakMsTUFBTyxTQUFld3ZDLEdBQ3BCLE9BQU8zekQsRUFBRSxNQUFPLENBQ2Q1SCxVQUFXLEdBQVF1NEQsYUFDbkJ2MEUsTUFBT3UzRSxFQUFPdjNFLE9BQ2JrM0UsRUFBVyxDQUNabnZDLE1BQU93dkMsSUFFWCxFQUNBenFDLFFBQVMsU0FBaUJ5cUMsR0FDeEIsT0FBT0wsRUFBVyxDQUNoQnBxQyxRQUFTeXFDLEdBRWIsR0FFRXZzRSxFQUFVMUMsTUFBTXVELFFBQVFrWSxFQUFNL1ksU0FBVytZLEVBQU0vWSxRQUFRL0MsSUFBSSxTQUFVd1AsR0FDdkUsSUFBSXhTLEVBQU1VLE9BQU9xVSxLQUFLdkMsR0FBTyxHQUN6QjgvRCxFQUFTOS9ELEVBQU14UyxHQUNuQixPQUFPcXlFLEVBQWdCcnlFLEdBQU9xeUUsRUFBZ0JyeUUsR0FBS3N5RSxHQUFVOS9ELENBQy9ELEdBQUssQ0FBQ3NNLEVBQU1qRSxNQUFRdzNELEVBQWdCeDNELE1BQU0sQ0FDeENBLE1BQU9pRSxFQUFNakUsTUFDYmtyRCxTQUFVam5ELEVBQU1pbkQsV0FDYixLQUFNam5ELEVBQU1na0IsTUFBUXV2QyxFQUFnQnZ2QyxNQUFNaGtCLEVBQU1na0IsT0FBUyxLQUFNaGtCLEVBQU0rb0IsUUFBVXdxQyxFQUFnQnhxQyxRQUFRL29CLEVBQU0rb0IsU0FBVyxLQUFNL29CLEVBQU0vWSxTQUN6SSxPQUFPNFksRUFBRUcsRUFBTTlrQixTQUFXLE1BQU8yc0MsRUFBZ0I1Z0MsRUFDbkQsRUM3Y3FDLENBQ25DNFksRUFBR0EsR0FDSGhiLEVBQUdBLEtBRUx3dUUsR0FBeUIsWUFBSSxjQUU3QixJQUFJSSxHQUFPbnNDLEdEa0xDLFNBQWV4VSxHQUN6QixJQWxKMEJoVSxFQWtKdEJlLEVBQUlpVCxFQUFNalQsRUFDVmhiLEVBQUlpdUIsRUFBTWp1QixFQUNWd3RFLEVBQWN2L0MsRUFBTXUvQyxZQUNwQkcsRUFBWTEvQyxFQUFNMC9DLFVBQ2xCYSxFQUFjdmdELEVBQU11Z0QsWUFDcEJ6OUIsRUFBTzlpQixFQUFNOGlCLEtBQ2IweUIsRUFBV3gxQyxFQUFNdzFDLFNBQ2pCM2dDLEVBQVM3VSxFQUFNNlUsT0FDZjNuQixFQUFRLEdBQXlCOFMsRUFBTyxDQUFDLElBQUssSUFBSyxjQUFlLFlBQWEsY0FBZSxPQUFRLFdBQVksV0FFbEgrVSxFQUFpQixHQUFTLENBQUMsRUFBRy9tQixFQUEwQmQsR0FBUUEsRUFBTThuQixRQUFVLENBQ2xGLGVBQWdCOW5CLEVBQU04bkIsUUFDckIsQ0FDRDd2QixVQUFXLENBQUMsR0FBUU4sVUFBMEIsU0FBZnFJLEVBQU1nb0IsS0FBa0IsZUFBaUIsS0FBcUIsVUFBZmhvQixFQUFNZ29CLEtBQW1CLGdCQUFrQixLQUFNaG9CLEVBQU0vSCxXQUFhK0gsRUFBTW5iLEVBQVMsUUFBSW9HLEtBQUssTUFDeksrVSxFQUFNM1QsSUFBSzJULEVBQU12YSxRQXdEaEJpdUUsRUFBU252RSxNQUFNdUQsUUFBUWtZLEVBQU0vWSxTQUFXK1ksRUFBTS9ZLFFBQVEvQyxJQXREekMsU0FBU2l2RSxFQUFXei9ELEdBQ25DLElBQUlpZ0UsRUFBWS94RSxPQUFPcVUsS0FBS3ZDLEdBQU8sR0FFL0JzTSxFQUFRLEdBQVMsQ0FBQyxFQUFHdE0sRUFBTWlnRSxHQUFZLENBQ3pDUixXQUFZQSxFQUNaanlFLFNBQUtNLElBR1AsT0FBUW15RSxHQUNOLElBQUssVUFDSCxPQUFPOXpELEVBQUV3eUQsRUFBYXJ5RCxHQUV4QixJQUFLLFNBQ0gsT0EzQ1csU0FBc0JxUyxHQUN2QyxJQUFJclMsRUFBUXFTLEVBQU1yUyxNQUNkSCxFQUFJd1MsRUFBTXhTLEVBQ1ZoYixFQUFJd3RCLEVBQU14dEIsRUFDVit3QyxFQUFPdmpCLEVBQU11akIsS0FFakIsT0FBTy8xQixFQURRd1MsRUFBTWkyQyxTQUNGLEdBQVMsQ0FBQyxFQUFHdG9ELEVBQU8sQ0FDckMvSCxVQUFXLENBQUMsR0FBUWd4QixPQUFRanBCLEVBQU0vSCxXQUFhK0gsRUFBTW5iLEVBQVMsUUFBSW9HLEtBQUssTUFDdEUrVSxFQUFNb2pCLEtBQU8sQ0FDZDRrQyxNQUFPbm9ELEVBQUUrMUIsRUFBTTUxQixFQUFNb2pCLE9BQ25CLE1BQ04sQ0FnQ2V3d0MsQ0FBYSxDQUNsQjV6RCxNQUFPQSxFQUNQSCxFQUFHQSxFQUNIaGIsRUFBR0EsRUFDSCt3QyxLQUFNQSxFQUNOMHlCLFNBQVVBLElBR2QsSUFBSyxRQUNILE9BQU96b0QsRUFBRTJ5RCxFQUFXeHlELEdBRXRCLElBQUssVUFDSCxPQTdGWSxTQUF1QkosR0FDekMsSUFBSXV6RCxFQUFhdnpELEVBQUt1ekQsV0FDbEJuekQsRUFBUUosRUFBS0ksTUFDYkgsRUFBSUQsRUFBS0MsRUFDVGhiLEVBQUkrYSxFQUFLL2EsRUFDVDNKLEVBQVU4a0IsRUFBTTlrQixTQUFXLE1BQzNCK0wsRUFBVStZLEVBQU0vWSxRQUFRL0MsSUFBSWl2RSxHQUNoQyxPQUFPdHpELEVBQUUsTUFBTyxDQUNkNWpCLE1BQU8rakIsRUFBTS9qQixNQUNiZ2MsVUFBVyxDQUFDLEdBQVFxNEQsUUFBU3R3RCxFQUFNeEwsTUFBUSxHQUFRaTlELGFBQWUsS0FBcUIsVUFBZnp4RCxFQUFNZ29CLEtBQW1CLEtBQU8sZUFDekYsVUFBZmhvQixFQUFNZ29CLEtBQW1CLGdCQUFrQixNQUFNLzhCLEtBQUssTUFDckQsQ0FBQzRVLEVBQUUza0IsRUFBUyxDQUNiK2MsVUFBVyxDQUFDLEdBQVFzNEQsZUFBZ0J2d0QsRUFBTS9ILFdBQWErSCxFQUFNbmIsRUFBUyxRQUFJb0csS0FBSyxNQUM5RWhFLEdBQVU0WSxFQUFFLE1BQU8sQ0FDcEI1SCxVQUFXLEdBQVFvNEQsZUFFdkIsQ0E2RWV3RCxDQUFjLENBQ25CVixXQUFZQSxFQUNabnpELE1BQU9BLEVBQ1BILEVBQUdBLEVBQ0hoYixFQUFHQSxJQUdQLElBQUssVUFDSCxPQUFPZ2IsRUFBRXd6RCxFQUFhcnpELEdBRXhCLElBQUssT0FDSCxPQTVFUyxTQUFvQnFVLEdBQ25DLElBQUlyVSxFQUFRcVUsRUFBTXJVLE1BRWRuYixFQUFJd3ZCLEVBQU14dkIsRUFFZCxPQUFPZ2IsRUFIQ3dVLEVBQU14VSxHQUVBRyxFQUFNOWtCLFNBQVcsTUFDYixHQUFTLENBQUMsRUFBRzRsQixFQUEwQmQsR0FBUSxDQUMvRC9ILFVBQVcsQ0FBQyxHQUFRclMsS0FBTW9hLEVBQU11eUQsTUFBUSxHQUFRWCxVQUFZLEtBQU01eEQsRUFBTS9ILFdBQWErSCxFQUFNbmIsRUFBUyxRQUFJb0csS0FBSyxNQUM1RytVLEVBQU12YSxRQUFTdWEsRUFBTS9ZLFFBQzFCLENBb0VlMUcsQ0FBVyxDQUNoQnlmLE1BQU9BLEVBQ1BILEVBQUdBLEVBQ0hoYixFQUFHQSxJQUdQLElBQUssTUFDSCxPQTdGUSxTQUFtQm1kLEdBQ2pDLElBQUloQyxFQUFRZ0MsRUFBTWhDLE1BRWRuYixFQUFJbWQsRUFBTW5kLEVBRWQsT0FBT2diLEVBSENtQyxFQUFNbkMsR0FFQUcsRUFBTTlrQixTQUFXLE1BQ2IsR0FBUyxDQUFDLEVBQUc0bEIsRUFBMEJkLEdBQVEsQ0FDL0QvSCxVQUFXLENBQUMsR0FBUWs0RCxJQUFLbndELEVBQU11eUQsTUFBUSxHQUFRWCxVQUFZLEtBQU01eEQsRUFBTS9ILFdBQWErSCxFQUFNbmIsRUFBUyxRQUFJb0csS0FBSyxPQUMxRytVLEVBQU0vWSxRQUNaLENBcUZlNnNFLENBQVUsQ0FDZjl6RCxNQUFPQSxFQUNQSCxFQUFHQSxFQUNIaGIsRUFBR0EsSUFHUCxRQUNFLEtBQU0saUJBQWtCK08sT0FBTysvRCxFQUFXLG9CQUVoRCxHQUU0RSxDQUFDM3pELEVBQU0vWSxTQUUvRWdoQyxFQUFtQixDQUFDam9CLEVBQU1rSCxRQUFRdFQsT0F0TnhDLFNBQTRCa0wsR0FDMUIsR0FBSXZhLE1BQU11RCxRQUFRZ1gsR0FBTSxDQUN0QixJQUFLLElBQUk3ZSxFQUFJLEVBQUc2OUIsRUFBTyxJQUFJdjVCLE1BQU11YSxFQUFJbmUsUUFBU1YsRUFBSTZlLEVBQUluZSxPQUFRVixJQUFLNjlCLEVBQUs3OUIsR0FBSzZlLEVBQUk3ZSxHQUVqRixPQUFPNjlCLENBQ1QsQ0FDRixDQVRTLENBRG1CaGYsRUEwTnNDNDBELElBMU1sRSxTQUEwQnZpRSxHQUN4QixHQUFJbU8sT0FBT0MsWUFBWTNkLE9BQU91UCxJQUFrRCx1QkFBekN2UCxPQUFPRyxVQUFVZ0UsU0FBUzdELEtBQUtpUCxHQUFnQyxPQUFPNU0sTUFBTW81QixLQUFLeHNCLEVBQzFILENBakJvQyxDQUFpQjJOLElBNkNyRCxXQUNFLE1BQU0sSUFBSTdVLFVBQVUsa0RBQ3RCLENBL0M2RCxHQXlOYyxDQUFDK1YsRUFBTW1ILFFBQzVFb1csT0FBb0MvN0IsSUFBdEJ3ZSxFQUFNdWQsWUFBNEJ2ZCxFQUFNdWQsWUFBY3ZkLEVBQU1veEMsRUFFMUVucUQsRUFBVSxDQUFDNFksRUFBRThuQixFQUFRLENBQ3ZCcEssaUJBQTZCLzdCLElBQWhCKzdCLEVBQTRCQSxFQUFjLEVBQ3ZESixVQUFVLElBQ1J0ZCxFQUFFLE1BQU8sQ0FDWDVILFVBQVcsR0FBUWhSLFNBQ2xCZ2hDLEdBQW1Cam9CLEVBQU0zZixVQUN4Qm5GLEVBQVU4a0IsRUFBTTlrQixTQUFXOGtCLEVBQU0zVCxJQUFNLElBQU0sTUFDakQsT0FBT3dULEVBQUUza0IsRUFBUzJzQyxFQUFnQjVnQyxFQUNwQyxFQ3RRdUIsQ0FDckI0WSxFQUFHQSxHQUNIaGIsRUFBR0EsR0FDSHd0RSxZQUFhQSxHQUNiRyxVQUFXQSxHQUNYYSxZQUFhQSxHQUNiejlCLEtBQU1BLEdBQ04weUIsU0FBVUEsR0FDVjNnQyxPQUFRQSxLQUVWOHJDLEdBQWtCLFlBQUksT2xEeXdCTCxTQUFvQjFnRCxFQUFnQk4sR0FDbkQsSUFBSTdTLEVBQU90Z0IsVUFBVXFCLE9BQVMsUUFBc0JhLElBQWpCbEMsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQUMsRUFDNUV5MEUsRUFBa0JuMEQsRUFBSzhTLFdBQ3ZCQSxPQUFpQyxJQUFwQnFoRCxFQUE2QixHQUFLQSxFQUMvQ0MsRUFBYXAwRCxFQUFLdVMsT0FqSFQsU0FBa0JZLEVBQWdCTixHQUMvQyxJQUFJN1MsRUFBT3RnQixVQUFVcUIsT0FBUyxRQUFzQmEsSUFBakJsQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUM1RXkwRSxFQUFrQm4wRCxFQUFLOFMsV0FDdkJBLE9BQWlDLElBQXBCcWhELEVBQTZCLEdBQUtBLEVBQy9DQyxFQUFhcDBELEVBQUt1UyxNQUNsQkEsT0FBdUIsSUFBZjZoRCxFQUF3QixHQUFLQSxFQUVyQ0MsRUFBWXhoRCxHQUFjQSxFQUFXdVgsVUFBWTBVLEdBQXNCbEIsR0FDM0V6cUIsR0FBa0IsR0FBZ0IsQ0FDaEN0QyxVQUFXLENBQUNtdUIsR0FBZTdyQixHQUMzQlIsSUFBS29zQixHQUNMbnNCLEtBQU15aEQsRUFDTnhoRCxXQUFZQSxFQUNaQyxXQUFZQSxFQUNaUCxNQUFPQSxJQUVUWSxHQUFrQixHQUFnQixDQUNoQ3RDLFVBQVcsQ0FBQyxHQUFVc0MsR0FDdEJSLElBQUssR0FDTEMsS0FBTXloRCxFQUNOeGhELFdBQVlBLEVBQ1pDLFdBQVlBLEVBQ1pQLE1BQU9BLEdBRVgsQ0E0RkUsQ0FBU1ksRUFBZ0JOLEVBQVksQ0FDbkNDLFdBQVlBLEVBQ1pQLFdBSnlCLElBQWY2aEQsRUFBd0IsR0FBS0EsR0FNM0MsQ21EaHhCQSxDQUFtQiwrQkFBZ0MsQ0FDakRqNEIsVUFBVyxFQUFJLEdBQUsvTixvQkFDcEJnTyxVQUFXLEdBQU0sR0FBS2pPLFVBQ3RCd08sZUFBZ0IsT0FDaEJ6QixnQkFBaUIsSUFHbkIsTUFBTW81QixHQUEyQyxDQUMvQyxJQUFBdnlFLENBQUsvQyxHLGNBQ0gsT0FBTyxLQUNMLGdCQUNtQixRQUFoQixFQUFBQSxFQUFNQyxNQUFNc2hCLFlBQUksU0FBd0IsR0FBSyxjQUNoRCxDQUNFbGtCLE1BQU8sQ0FDTCxVQUFXLE1BQ1h1QixJQUF3QixRQUFuQixFQUFBb0IsRUFBTUMsTUFBTWttRSxlQUFPLFFBOUNJLE1BK0M1QnJuRSxLQUF5QixRQUFuQixFQUFBa0IsRUFBTUMsTUFBTWdtRSxlQUFPLFFBaERHLFFBbURoQyxLQUFFNE8sR0FBTSxDQUNOeHNFLFFBQVMsQ0FDUCxDQUNFckIsS0FBTSxDQUNKcUIsUUFBUyxLQUFFLE1BQU8sQ0FBRWhMLE1BQU8sQ0FBRSxhQUFjLFFBQVcsQ0FDcEQsS0FBRSxhQUFjLENBQ2QsS0FBRSxPQUEyQixRQUFuQixFQUFBMkMsRUFBTUMsTUFBTXMxRSxlQUFPLFFBckRULElBc0RwQixLQUFFLHVCQUF3QixDQUFFbDRFLE1BQU8sQ0FBRWdyQyxNQUFPLFNBQzVDLEtBQ0UsZ0JBQ29CLFFBQXBCLEVBQUFyb0MsRUFBTUMsTUFBTTA4QixnQkFBUSxRQXhERixJQTBEcEIsS0FBRSx1QkFBd0IsQ0FBRXQvQixNQUFPLENBQUVnckMsTUFBTyxTQUM1QyxLQUNFLE9BQ0Fyb0MsRUFBTUMsTUFBTXUxRSxXQUFhLEVBQ3JCLElBQUl4MUUsRUFBTUMsTUFBTXk0QixlQUFlMTRCLEVBQU1DLE1BQU11MUUsY0FDM0MsTUFHUixLQUNFLE1BQ0EsTSxjQUNFLE1BQU10dkUsRUFBU2xHLEVBQU1DLE1BQU15bUIsV0FBV3BoQixJQUFLUixJLE1BQ3pDLFlBQ0VteUMsR0FDQSxDQUNFNTlCLFVBQ0UsZ0NBQzhCLFFBQTdCLEVBQUFyWixFQUFNQyxNQUFNdzFFLHlCQUFpQixTQUUxQixXQUNBLGFBQ041dUUsT0FBUSxDQUNOMlcsUUFBVTVjLEksUUFDUixHQUFzQixRQUFsQixFQUFBWixFQUFNQyxNQUFNNEcsY0FBTSxlQUFFNnVFLG9CQUFxQixDQUMzQyxNQUFNbEYsRUFBRywrQkFDSjV2RSxHQUFDLENBQ0ptNEIsT0FBUWowQixFQUFFaTBCLE9BQ1ZnRCxVQUFXajNCLEVBQUVpM0IsWUFFRyxRQUFsQixFQUFBLzdCLEVBQU1DLE1BQU00RyxjQUFNLFNBQUU2dUUsb0JBQW9CbEYsRUFDMUMsS0FJTixDQUNFLEtBQ0UsdUJBQ0EsQ0FDRW56RSxNQUFPLENBQ0xnckMsTUFBTyxNQUNQLGFBQWMsUUFDZDJOLE1BQU8sYUFHWGx4QyxFQUFFaTBCLFFBRUosS0FBRSxPQUFRLENBQ1IxN0IsTUFBTyxDQUNMZ3JDLE1BQU9yb0MsRUFBTUMsTUFBTXcxRSxrQkFDZixNQUNBLFVBR1IsS0FDRSxnQkFDQSxDQUFFcDRFLE1BQU8sQ0FBRSxhQUFjLFNBQ3pCeUgsRUFBRWkzQixlQTJDVixPQXJDeUIsUUFBdEIsRUFBQS83QixFQUFNQyxNQUFNdTFFLGtCQUFVLFFBckhKLEdBcUhvQyxJQUV2RHR2RSxFQUFPSyxLQUNMLEtBQ0Uwd0MsR0FDQSxDQUNFNTlCLFVBQVcsOEJBQ1h4UyxPQUFRLENBQ04yVyxRQUNnQyxRQUE5QixFQUFrQixRQUFsQixFQUFBeGQsRUFBTUMsTUFBTTRHLGNBQU0sZUFBRTh1RSxrQkFBVSxRQUFJLEtBQVMsSUFHakQsS0FDRTMrQixHQUNBLENBQUVyMEIsS0FBTSxTQUNSLEtBQUVtMEIsR0FBSyxTQUliNXdDLEVBQU9LLEtBQ0wsS0FDRTB3QyxHQUNBLENBQ0U1OUIsVUFBVyw4QkFDWHhTLE9BQVEsQ0FDTjJXLFFBQ2dDLFFBQTlCLEVBQWtCLFFBQWxCLEVBQUF4ZCxFQUFNQyxNQUFNNEcsY0FBTSxlQUFFK3VFLGtCQUFVLFFBQUksS0FBUyxJQUdqRCxLQUNFNStCLEdBQ0EsQ0FBRXIwQixLQUFNLFNBQ1IsS0FBRW0wQixHQUFLLFVBS1I1d0MsQ0FDUixFQTFGRCxXQWtHaEIsR0M1S0ksR0FBb0MsR0E4RHBDMnZFLEdBQStELENBQ25FLE1BQUFyckUsQ0FBT3hLLEdBQ0xBLEVBQU1NLE1BQU13MUUsZ0JBQWtCLEVBQzlCOTFFLEVBQU1NLE1BQU15MUUsaUJBQW1CLEVBQy9CLzFFLEVBQU1NLE1BQU0wMUUsYUFBZSxHQUMzQmgyRSxFQUFNTSxNQUFNMjFFLGVBQWlCLEdBQzdCajJFLEVBQU1NLE1BQU00MUUsZ0JBQWtCLEVBQzlCbDJFLEVBQU1NLE1BQU02MUUsZUFBaUIsRUFDN0JuMkUsRUFBTU0sTUFBTTgxRSxzQkFBd0IsRUFDcENwMkUsRUFBTU0sTUFBTSsxRSxzQkFBd0IsQ0FDdEMsRUFDQSxRQUFBMXJFLENBQVMzSyxHQUNQLEdBQUlBLEVBQU1DLE1BQU1xMkUsMkJBQTRCLENBQzFDLEdBQUl0MkUsRUFBTUgsSUFBSyxDQUNiLE1BQ00wMkUsRUFETXYyRSxFQUFNSCxJQUNDaEQsY0FBYyxpQ0FDakMsR0FBSTA1RSxHQUFVQSxhQUFrQkMsWUFBYSxDQUMzQyxNQUFNLE1BQUVudUMsRUFBSyxPQUFFcHFDLEdBQ2JzNEUsRUFDQXRwQyx3QkFDRmp0QyxFQUFNTSxNQUFNdzFFLGdCQUFrQnp0QyxFQUM5QnJvQyxFQUFNTSxNQUFNeTFFLGlCQUFtQjkzRSxDQUNqQyxDQUNGLENBQ0EsYUFDRixDQUNGLEVBQ0EsSUFBQThFLENBQUsvQyxHLFlBQ0gsTUFBTSxRQUFFaW1FLEVBQU8sUUFBRUUsR0FwRXJCLFNBQ0UyUCxFQUNBQyxFQUNBcDVDLEVBQ0E4NUMsRUFDQUgsR0FBc0MsR0FFdEMsSUFBSXJRLEVBQVNFLEVBRWIsSUFDR21RLEdBQ0QzNUMsRUFBUzU2QixPQUFTLEdBQ2xCMDBFLEdBQ0FBLGFBQXNCQyxvQkFDdEIsQ0FDQSxNQUFNQyxFQUFPRixHQUVMNzNFLElBQUtnNEUsRUFBT3Z1QyxNQUFPd3VDLEdBQVlGLEVBQUsxcEMseUJBQ3BDcnVDLElBQUtrNEUsRUFBVWg0RSxLQUFNaTRFLEdBQWMsS0FDekNKLEVBQ0FBLEVBQUtLLGVBRUQsVUFBRWhxQyxFQUFTLFdBQUVpcUMsR0FBZU4sRUFFbEMxUSxFQUFVOFEsRUFBWUUsRUFDdEI5USxFQUFVMlEsRUFBVyxHQUFLOXBDLEVBRXRCaTVCLEVBQVVnUixFQUFhbkIsRUFBa0JlLEVBQVUsSUFDckQ1USxFQUFVZ1IsRUFBYUosRUFBVWYsRUFBa0IsR0FFakRjLEVBQVF6USxFQUFVNFAsRUFBbUI3NUUsT0FBT2c3RSxZQUFjLEtBQzVEL1EsRUFBVTJRLEVBQVc5cEMsRUFBWStvQyxFQUFtQixHQUV4RCxNQUNFOVAsRUFBVSxFQUNWRSxFQUFVLEVBRVosTUFBTyxDQUFFRixVQUFTRSxVQUNwQixDQThCaUNnUixDQUMzQm4zRSxFQUFNTSxNQUFNdzFFLGdCQUNaOTFFLEVBQU1NLE1BQU15MUUsaUJBQ1EsUUFBcEIsRUFBQS8xRSxFQUFNQyxNQUFNMDhCLGdCQUFRLFFBOUZZLEdBK0ZFLFFBQWxDLEVBQUEzOEIsRUFBTU0sTUFBTTgyRSw4QkFBc0IsZUFBRXo2RSxHQUNwQ3FELEVBQU1DLE1BQU1xMkUsNEJBSWQsSUFBSWUsRUFBbUMsQ0FDckNuNkUsR0FBSSxlQUNKMm5DLE1BQU8sT0FDUGlvQyxXQUFXLEVBQ1h6bEMsS0FBTSxHQUNOamlCLFNBQVc5a0IsSUFDVE4sRUFBTU0sTUFBTTgyRSx1QkFBeUI5MkUsRUFDakNOLEVBQU1DLE1BQU1tbEIsVUFDZHBsQixFQUFNQyxNQUFNbWxCLFNBQVM5a0IsS0FLdkJnM0UsRUFBcUMsQ0FBQyxLQUFFcEwsR0FBV21MLElBRXZELEdBQUlyM0UsRUFBTUMsTUFBTXF4RSxVQUFXLENBQ3pCLE1BQU12MkMsRUFBTS82QixFQUFNQyxNQUFNcXhFLFVBRWxCMzBDLEVBQStCLFFBQXBCLEVBQUEzOEIsRUFBTUMsTUFBTTA4QixnQkFBUSxRQXRITCxHQXVIMUJqVyxFQUFtQyxRQUF0QixFQUFBMW1CLEVBQU1DLE1BQU15bUIsa0JBQVUsUUFBSSxHQUN2Q2dTLEVBQWNxQyxFQUFJckMsWUFDbEI4OEMsRUFBYXo2QyxFQUFJYixVQUVqQnE5QyxFQUFrQnYzRSxFQUFNQyxNQUFNcTJFLDJCQUNoQ3QyRSxFQUFNTSxNQUFNMDFFLGFBQ1pyNUMsRUFDRTY2QyxFQUFvQngzRSxFQUFNQyxNQUFNcTJFLDJCQUNsQ3QyRSxFQUFNTSxNQUFNMjFFLGVBQ1p2dkQsRUFDRSt3RCxFQUFxQnozRSxFQUFNQyxNQUFNcTJFLDJCQUNuQ3QyRSxFQUFNTSxNQUFNNDFFLGdCQUNaeDlDLEVBQ0VnL0MsRUFBb0IxM0UsRUFBTUMsTUFBTXEyRSwyQkFDbEN0MkUsRUFBTU0sTUFBTTYxRSxlQUNaWCxFQUNFbUMsRUFBaUIzM0UsRUFBTUMsTUFBTXEyRSwyQkFDL0J0MkUsRUFBTU0sTUFBTTgxRSxzQkFDWm5RLEVBQ0UyUixFQUFpQjUzRSxFQUFNQyxNQUFNcTJFLDJCQUMvQnQyRSxFQUFNTSxNQUFNKzFFLHNCQUNabFEsRUFFSmtSLEVBQWV4d0UsT0FBUyxDQUN0Qmd4RSxjQUFnQmozRSxJQUNLLGNBQWZBLEVBQUVpc0UsV0FDSjl4QyxFQUFJRixRQUFRajZCLEVBQUU2VyxNQUNkN1csRUFBRXVLLGtCQUNzQix5QkFBZnZLLEVBQUVpc0UsV0FDUDl4QyxFQUFJSix5QkFDTi81QixFQUFFdUssa0JBSVI0NkIsVUFBWW5sQyxJQUNHLFVBQVRBLEVBQUUwQixLQUNKeTRCLEVBQUlkLFlBQ0pyNUIsRUFBRXVLLGtCQUNnQixVQUFUdkssRUFBRTBCLElBQ1B5NEIsRUFBSTJCLHlCQUNOOTdCLEVBQUV1SyxpQkFFYyxZQUFUdkssRUFBRTBCLEtBQ1B5NEIsRUFBSTBCLHFCQUNONzdCLEVBQUV1SyxtQkFNVm1zRSxFQUFjL3dFLEtBQ1osS0FBRSt1RSxHQUFZLENBQ1pyUCxRQUFTOTdELE9BQU93dEUsR0FBa0IsS0FDbEN4UixRQUFTaDhELE9BQU95dEUsR0FBa0IsS0FDbENyMkQsS0FBTWkyRCxFQUFrQnoxRSxPQUFTLEdBQUt3MUUsRUFBZ0J4MUUsT0FBUyxFQUMvRDB6RSxrQkFBbUIxNkMsRUFBSXRCLHNCQUN2Qjg3QyxRQUFTeDZDLEVBQUlsQyxNQUNiOEQsU0FBVTQ2QyxFQUNWN3dELFlBQWNxUyxFQUtQZ0MsRUFBSWhDLE9BTFdyaEIsRUFLSDgvRCxFQUxXTSxFQUswQixHQUFsQi84QyxFQUFJN0IsV0FKeEN4aEIsRUFBT3BTLElBQUksQ0FBQ1IsRUFBR3pELEtBQU0sQ0FDbkIwM0IsT0FDRSsrQyxHQUFxQixHQUFMejJFLEVBQVMsSUFBTTAzQixFQUFPKytDLEVBQWV6MkUsRUFBSSxFQUFJQSxHQUMvRDA2QixVQUFXajNCLE1BRWY0ekIsWUFBYSsrQyxFQUNiakMsV0FBWWtDLEVBQ1o3d0UsT0FBUSxDQUNONnVFLG9CQUFzQjkwRSxHQUFNbTZCLEVBQUlGLFFBQVFqNkIsRUFBRW00QixRQUMxQzQ4QyxXQUFZLElBQU01NkMsRUFBSTJCLHdCQUN0Qms1QyxXQUFZLElBQU03NkMsRUFBSTBCLHdCQUs1QjY2QyxFQUFjL3dFLEtBQ1osS0FDRSxNQUNBLENBQ0U4UyxVQUFXLHNCQUNYaGMsTUFBTyxDQUNMUSxXQUFZLFdBR2hCLEtBQUV5M0UsR0FBWSxDQUNaclAsUUFBUyxNQUNURSxRQUFTLE1BQ1Q1a0QsS0FBTW1GLEVBQVcza0IsT0FBUyxHQUFLNDZCLEVBQVM1NkIsT0FBUyxFQUNqRDB6RSxrQkFBbUIxNkMsRUFBSXRCLHNCQUN2Qjg3QyxRQUFTeDZDLEVBQUlsQyxNQUNiOEQsU0FBVUEsRUFDVmpXLFdBQVksRUFBRXFTLEVBQVFyaEIsRUFBUW9nRSxJQUM1QnBnRSxFQUFPcFMsSUFBSSxDQUFDUixFQUFHekQsS0FBTSxDQUNuQjAzQixPQUNFKytDLEdBQXFCLEdBQUx6MkUsRUFDWixJQUNBMDNCLEVBQU8rK0MsRUFBZXoyRSxFQUFJLEVBQUlBLEdBQ3BDMDZCLFVBQVdqM0IsS0FOSCxDQU9MaTJCLEVBQUloQyxPQUFRclMsRUFBOEIsR0FBbEJxVSxFQUFJN0IsWUFDbkNSLFlBQWFBLEVBQ2I4OEMsV0FBWUEsTUFLbEJ4MUUsRUFBTU0sTUFBTTAxRSxhQUFlcjVDLEVBQzNCMzhCLEVBQU1NLE1BQU0yMUUsZUFBaUJ2dkQsRUFDN0IxbUIsRUFBTU0sTUFBTTQxRSxnQkFBa0J4OUMsRUFDOUIxNEIsRUFBTU0sTUFBTTYxRSxlQUFpQlgsRUFDN0J4MUUsRUFBTU0sTUFBTTgxRSxzQkFBd0JuUSxFQUNwQ2ptRSxFQUFNTSxNQUFNKzFFLHNCQUF3QmxRLENBQ3RDLENBcERrQixJQUFFcHRDLEVBQVFyaEIsRUFBUW9nRSxFQXNEcEMsT0FBTyxLQUFFLE1BQU8sQ0FBRXo2RSxNQUFPLENBQUVkLFNBQVUsYUFBZ0IrNkUsRUFDdkQsR0NoTkYsU0FBU1MsR0FDUGg5QyxFQUNBLzZCLEdBRUErNkIsRUFBSUwsaUJBQW1CLFNBQVVpQyxHQUMvQjM4QixFQUFNTSxNQUFNcThCLFNBQVdBLEVBQ3ZCMzhCLEVBQU1NLE1BQU1nMkUsNEJBQTZCLEVBQ3pDLGFBQ0YsRUFFQXY3QyxFQUFJUCwwQkFBNEIsU0FBVTlULEdBQ3hDMW1CLEVBQU1NLE1BQU1vbUIsV0FBYUEsRUFDekIxbUIsRUFBTU0sTUFBTWcyRSw0QkFBNkIsRUFDekMsYUFDRixFQUVBdjdDLEVBQUlFLFNBQVcsU0FBVWowQixHQUN2QixHQUFJaEgsRUFBTU0sTUFBTTgyRSx1QkFBd0IsQ0FDdEMsTUFBTSxjQUFFdEosRUFBZW54RSxHQUFJTCxHQUFZMEQsRUFBTU0sTUFDMUM4MkUsdUJBQ0d6NkUsRUFBS0wsRUFDTDA3RSxFQUEwQnI3RSxFQUFHczdFLGVBQWlCanhFLEVBQUtqRixPQUd6RCtyRSxFQUFjLENBQ1pqaUUsT0FBTyxFQUNQdE4sTUFKdUI1QixFQUFHNEIsTUFBTUMsVUFBVSxFQUFHN0IsRUFBR3M3RSxnQkFJOUJqeEUsRUFITXJLLEVBQUc0QixNQUFNQyxVQUFVN0IsRUFBR3E2RSxnQkFLaERyNkUsRUFBR3U3RSxrQkFBa0JGLEVBQWlCQSxFQUN4QyxDQUNBLGFBQ0YsQ0FDRixDQUVBLFNBQVNHLEdBQWVuNEUsR0FDdEIsR0FBSUEsRUFBTU0sTUFBTTgyRSx1QkFBd0IsQ0FDdEMsTUFBTSxjQUFFdEosRUFBYSxNQUFFdnZFLEdBQVV5QixFQUFNTSxNQUNwQzgyRSx1QkFDSHRKLEVBQWMsQ0FBRWppRSxPQUFPLEVBQU10TixTQUMvQixDQUNGLEMvRXF6RFMsR0FBVyxZQUFhaWIsR0F0RGpCLENBQUMsQ0FDZixZQUFhLENBQ1hzUyxRQUFTLFNBRVgsbUJBQW9CLENBQ2xCQSxRQUFTLGdCQUdYLGFBQWMsQ0FDWkEsUUFBUyxtQkFFWCxlQUFnQixDQUNkdnZCLFNBQVUsWUFFWixlQUFnQixDQUNkQSxTQUFVLFlBRVosVUFBVyxDQUNUQSxTQUFVLFdBQ1ZxQyxJQUFLLEVBQ0x1dEIsTUFBTyxFQUNQQyxPQUFRLEVBQ1J0dEIsS0FBTSxHQUVSLGdCQUFpQixDQUNmZzRCLE9BQVEsRUFDUjc0QixPQUFRLFNBRVYsVUFBVyxDQUNUcXlELFVBQVcsT0FHYix1QkFBd0IsQ0FDdEIsaUJBQWtCLENBQ2hCbjVCLFVBQVcsa0J3RGh0RGYyc0MsS0FDQSxHQUFXLGdDQUFpQyxHQUFJeCtELElBQUksU0FBVW1mLEdBQzVELE9BQU9BLEdBQ1QsSXVCbEZGLE1BQU0yekQsR0FBdUMsQ0FDM0MsTUFBQTV0RSxDQUFPeEssR0FDTEEsRUFBTU0sTUFBTWd3RSxLQUFPLEdBQ25CdHdFLEVBQU1NLE1BQU0rM0UsV0FBWSxFQUN4QnI0RSxFQUFNTSxNQUFNcThCLFNBQVcsR0FDdkIzOEIsRUFBTU0sTUFBTW9tQixXQUFhLEdBQ3pCMW1CLEVBQU1NLE1BQU1nMkUsNEJBQTZCLEUxRW1jN0MsVyx5Q0FDRSxJQUFJZ0MsUUFBWUMsVUFBVUMsWUFJMUIsT0FIQUYsRUFBTUEsRUFBSW5pRSxPQUNQK2tCLEdBQU9BLEVBQUc5dEIsS0FBSyt2QixXQUFXLFNBQVdqQyxFQUFHOXRCLEtBQUtxckUsU0FBUyxTQUVsRDd2RSxRQUFRcWhFLElBQ2JxTyxFQUFJaHpFLElBQVc0MUIsR0FBcUIsK0NBcEd4QyxTQUEwQnc5QyxHLHlDQUV4QixNQUFNeDlDLFFBQXdCLElBQUl0eUIsUUFBcUIsQ0FBQ0MsRUFBUzhFLEtBQy9ELE1BQU1nckUsRUFBNEJKLFVBQVUzcEUsS0FBSzhwRSxHQUNqREMsRUFBUTc4QyxVQUFZLFNBQVU5VyxHQUM1Qm5jLEVBQVE4dkUsRUFBUXp5RSxPQUNsQixFQUNBeXlFLEVBQVFDLFFBQVUsV0FDaEJqckUsRUFBTyxJQUFJbFIsTUFBTSxzQ0FBc0NpOEUsS0FDekQsSUFHSTM5QyxFQUFNLElBQUl4QyxHQUNoQndDLEVBQUlHLEdBQUtBLEVBQ1RILEVBQUkyOUMsT0FBU0EsRUFHYixNQUFNRyxFQUFrQixJQUFJandFLFFBQWMsQ0FBQ0MsRUFBUzhFLEtBQ2xEdXRCLEVBQUdFLFlBQVksWUFBWU0sWUFBWSxZQUFZbzlDLFNBQVNoOUMsVUFDMUQsU0FBVWw3QixHQUNSLE1BQU1tNEUsRUFBYy96RCxNQUFNL2MsT0FBc0IvQixPQUNoRCxJQUFLLElBQUk4eUUsS0FBVUQsRUFDakIsT0FBUUMsRUFBTzVyRSxNQUNiLElBQUssU0FDSDJ0QixFQUFJbkMsTUFBUW9nRCxFQUFPejZFLE1BQ25CLE1BQ0YsSUFBSyxTQUNIdzhCLEVBQUlsQyxNQUFRbWdELEVBQU96NkUsTUFDbkIsTUFDRixJQUFLLFVBQ0h3OEIsRUFBSWpDLE9BQVNrZ0QsRUFBT3o2RSxNQUNwQixNQUNGLElBQUssVUFDSHc4QixFQUFJaEMsT0FBU2lnRCxFQUFPejZFLE1BQ3BCLE1BQ0YsSUFBSyxVQUNIdzhCLEVBQUkvQixPQUFTZ2dELEVBQU96NkUsTUFDcEIsTUFDRixJQUFLLFVBQ0h3OEIsRUFBSTlCLE9BQVMrL0MsRUFBT3o2RSxNQUNwQixNQUNGLElBQUssZUFDSHc4QixFQUFJN0IsV0FBYTgvQyxFQUFPejZFLE1BQ3hCLE1BQ0YsSUFBSyxpQkFDSHc4QixFQUFJNUIsWUFBYzYvQyxFQUFPejZFLE1BQ3pCLE1BQ0YsSUFBSyxjQUNIdzhCLEVBQUkzQixVQUFZNC9DLEVBQU96NkUsTUFDdkIsTUFDRixJQUFLLDBCQUNIdzhCLEVBQUkxQixvQkFBc0IyL0MsRUFBT3o2RSxNQUNqQyxNQUNGLElBQUssOEJBQ0h3OEIsRUFBSXpCLHNCQUF3QjAvQyxFQUFPejZFLE1BQ25DLE1BQ0YsSUFBSywyQkFDSHc4QixFQUFJeEIscUJBQXVCeS9DLEVBQU96NkUsTUFDbEMsTUFDRixJQUFLLHdCQUNIdzhCLEVBQUl2QixrQkFBb0J3L0MsRUFBT3o2RSxNQUMvQixNQUNGLElBQUssMkJBQ0h3OEIsRUFBSXRCLHNCQUF3QnUvQyxFQUFPejZFLE1BQ25DLE1BQ0YsSUFBSyw2QkFDSHc4QixFQUFJckIsc0JBQXdCcy9DLEVBQU96NkUsTUFDbkMsTUFDRixJQUFLLHlCQUNIdzhCLEVBQUlwQixtQkFBcUJxL0MsRUFBT3o2RSxNQUNoQyxNQUNGLElBQUssbUJBQ0h3OEIsRUFBSXBDLGFBQWVxZ0QsRUFBT3o2RSxNQUloQ3NLLEdBQ0YsSUFHRW93RSxFQUFpQixJQUFJcndFLFFBQWMsQ0FBQ0MsRUFBUzhFLEtBQ2pEdXRCLEVBQUdFLFlBQVksV0FBV00sWUFBWSxXQUFXbzlDLFNBQVNoOUMsVUFDeEQsU0FBVWw3QixHQUNSLE1BQU1tNEUsRUFBYy96RCxNQUFNL2MsT0FBc0IvQixPQUNoRCxJQUFLLElBQUk4eUUsS0FBVUQsRUFDakJoK0MsRUFBSXZDLFFBQVF3Z0QsRUFBTzEyRSxLQUFPMDJFLEVBQU94Z0QsUUFFbkMzdkIsR0FDRixJQUdKLGFBRE1ELFFBQVFxaEUsSUFBSSxDQUFDNE8sRUFBaUJJLElBQzdCbCtDLENBQ1QsRSxDQVE4Q20rQyxDQUFXaCtDLEVBQUc5dEIsS0FBSyxJQUVqRSxFLEMwRTFjSStyRSxHQUFnQmp1RSxLQUFNb2xFLElBQ3BCdHdFLEVBQU1NLE1BQU1nd0UsS0FBT0EsRUFDbkIsSUFBSyxJQUFJdjFDLEtBQU91MUMsRUFDZHlILEdBQXFCaDlDLEVBQUsvNkIsR0FDMUIrNkIsRUFBSWYsT0FBU2g2QixFQUFNTSxNQUFNKzNFLFVBRTNCLGVBRUosRUFDQSxJQUFBdDFFLENBQUsvQyxHQUNILElBQUlzMkUsRUFBNkJ0MkUsRUFBTU0sTUFBTWcyRSwyQkFFN0MsT0FEQXQyRSxFQUFNTSxNQUFNZzJFLDRCQUE2QixFQUNsQyxDQUNMLEtBQUVudEMsR0FBUyxDQUFFL0ssUUFBUSxHQUFRLENBQzNCLEtBQUVtTCxHQUFjLENBQUV2aUMsS0FBTSxjQUN4QixLQUFFbXBFLEdBQWMsQ0FDZG1CLFVBQVd0eEUsRUFBTU0sTUFBTWd4RSxVQUN2QmhCLEtBQU10d0UsRUFBTU0sTUFBTWd3RSxLQUNsQnpwRSxPQUFRLENBQ04wcEUsY0FBZ0IzdkUsSUFDZFosRUFBTU0sTUFBTWd4RSxVQUFZMXdFLEVBQUVtNkIsSUFDMUIvNkIsRUFBTU0sTUFBTWd4RSxVQUFVdDNDLE9BQVNoNkIsRUFBTU0sTUFBTSszRSxVQUMzQ0YsR0FBZW40RSxJQUVqQnl3RSxhQUFlN3ZFLEsxRW9iM0IsU0FBNEJtNkIsRyx5Q0FDMUIsSUFBSUEsRUFBSUcsR0FHTixNQUFNLElBQUl6K0IsTUFBTSxnREFFbEIsT0FKRXMrQixFQUFJRyxHQUFHaytDLFFBSUYsSUFBSXh3RSxRQUFjLENBQUNDLEVBQVM4RSxLQUNqQyxHQUFJb3RCLEVBQUkyOUMsT0FBUSxDQUNkLE1BQU1XLEVBQThCZCxVQUFVZSxlQUM1Q3YrQyxFQUFJMjlDLFFBRU5XLEVBQVV2OUMsVUFBWSxXQUNwQmp6QixHQUNGLEVBQ0F3d0UsRUFBVVQsUUFBVSxXQUNsQmpyRSxFQUFPLElBQUlsUixNQUFNLHdDQUF3Q3MrQixFQUFJMjlDLFVBQy9ELENBQ0YsTUFDRS9xRSxFQUFPLElBQUlsUixNQUFNLGtEQUd2QixFLEUwRXhjYzg4RSxDQUFhMzRFLEVBQUVtNkIsS0FBS3MyQyxNQUFPLzlELElBQ3pCeThELEdBQWtCejhELEVBQUloRSxTQUN0QjVILFFBQVFrQyxNQUFNMEosS0FFaEJ0VCxFQUFNTSxNQUFNZ3dFLEtBQUt0M0QsT0FBT2haLEVBQU1NLE1BQU1nd0UsS0FBS3RtRSxRQUFRcEosRUFBRW02QixLQUFNLEdBQ3JELzZCLEVBQU1NLE1BQU1neEUsV0FBYTF3RSxFQUFFbTZCLFlBQ3RCLzZCLEVBQU1NLE1BQU1neEUsVUFFckI2RyxHQUFlbjRFLElBRWpCK3dFLGNBQWdCbndFLEsxRThTNUIsU0FDRXF3RSxFQUNBdUksRyx5Q0FFQSxNQUdNdjhDLEVBSGlDdThDLEVBQ3BDQyxZQUFZLElBQUloaUQsSUFDaEJnaUQsWUFBWSxJQUFJcGhELElBQ1dxaEQsWUFFeEJoQixFQUFpQixPQUFPekgsSUFFOUIsSUFBSWwyQyxFQUFNLElBQUl4QyxHQUtkLE9BSkF3QyxFQUFJL0IsUUFBVSxFQUNkK0IsUUFBWTRDLEdBQWNWLEVBQVFsQyxHQXJOcEMsU0FBcUJBLEdBQ25CLEdBQ3NCLEdBQXBCQSxFQUFJbkMsTUFBTTcyQixRQUN5QixHQUFuQ2lCLE9BQU9xVSxLQUFLMGpCLEVBQUl2QyxTQUFTejJCLFNBQ3hCZzVCLEVBQUkyQyxxQkFFTCxNQUFNLElBQUlqaEMsTUFBTSxXQUVwQixDQThNRWs5RSxDQUFZNStDLEdBQ1pBLFFBN01GLFNBQXlCQSxFQUFVMjlDLEcseUNBRWpDLElBQUl4OUMsUUFBd0IsSUFBSXR5QixRQUFxQixDQUFDQyxFQUFTOEUsS0FDN0QsSUFBSWdyRSxFQUE0QkosVUFBVTNwRSxLQUFLOHBFLEdBQy9DQyxFQUFRNzhDLFVBQVksU0FBVTlXLEdBQzVCbmMsRUFBUTh2RSxFQUFRenlFLE9BQ2xCLEVBQ0F5eUUsRUFBUWlCLGdCQUFrQixTQUFVNTBELEdBR2xDLE1BQU1rVyxFQUFrQnk5QyxFQUFRenlFLE9BQ2hDLElBQUkyekUsRUFBdUIzK0MsRUFBRzQrQyxrQkFBa0IsV0FBWSxDQUMxREMsUUFBUyxTQUVYRixFQUFPMytDLEVBQUc0K0Msa0JBQWtCLFVBQVcsQ0FBRUMsUUFBUyxRQUNsREYsRUFBTzMrQyxFQUFHNCtDLGtCQUFrQixRQUFTLENBQUVDLFFBQVMsWUFDaERGLEVBQU8zK0MsRUFBRzQrQyxrQkFBa0IsVUFBVyxDQUFFRSxlQUFlLElBQ3hESCxFQUFLSSxZQUFZLFVBQVcsVUFBVyxDQUFFQyxRQUFRLEdBQ25ELEVBQ0F2QixFQUFRQyxRQUFVLFdBQ2hCanJFLEVBQU8sSUFBSWxSLE1BQU0sc0NBQXNDaThFLEtBQ3pELElBR0YzOUMsRUFBSUcsR0FBS0EsRUFDVEgsRUFBSTI5QyxPQUFTQSxRQUdQLElBQUk5dkUsUUFBYyxDQUFDQyxFQUFTOEUsS0FDaEMsSUFBSXl0QixFQUE4QkYsRUFBR0UsWUFDbkMsQ0FBQyxXQUFZLFVBQVcsUUFBUyxXQUNqQyxhQUVGQSxFQUFZTSxZQUFZLFlBQVk1VixRQUNwQ3NWLEVBQVlNLFlBQVksV0FBVzVWLFFBQ25Dc1YsRUFBWU0sWUFBWSxTQUFTNVYsUUFDakNzVixFQUFZTSxZQUFZLFdBQVc1VixRQUNuQ3NWLEVBQVkrK0MsV0FBY24xRCxJQUN4Qm5jLEtBRUZ1eUIsRUFBWXc5QyxRQUFXNXpELElBQ3JCclgsRUFBTyxJQUFJbFIsTUFBTSx1Q0FNckIsSUFBSW84RSxFQUFrQixJQUFJandFLFFBQWMsQ0FBQ0MsRUFBUzhFLEtBQ2hELElBQUl5dEIsRUFBOEJGLEVBQUdFLFlBQVksV0FBWSxhQUM3REEsRUFDR00sWUFBWSxZQUNadlosSUFBSSxDQUFFL1UsS0FBTSxTQUFVN08sTUFBT3c4QixFQUFJbkMsUUFDcEN3QyxFQUNHTSxZQUFZLFlBQ1p2WixJQUFJLENBQUUvVSxLQUFNLFNBQVU3TyxNQUFPdzhCLEVBQUlsQyxRQUNwQ3VDLEVBQ0dNLFlBQVksWUFDWnZaLElBQUksQ0FBRS9VLEtBQU0sVUFBVzdPLE1BQU93OEIsRUFBSWpDLFNBQ3JDc0MsRUFDR00sWUFBWSxZQUNadlosSUFBSSxDQUFFL1UsS0FBTSxVQUFXN08sTUFBT3c4QixFQUFJaEMsU0FDckNxQyxFQUNHTSxZQUFZLFlBQ1p2WixJQUFJLENBQUUvVSxLQUFNLFVBQVc3TyxNQUFPdzhCLEVBQUkvQixTQUNyQ29DLEVBQ0dNLFlBQVksWUFDWnZaLElBQUksQ0FBRS9VLEtBQU0sVUFBVzdPLE1BQU93OEIsRUFBSTlCLFNBQ3JDbUMsRUFDR00sWUFBWSxZQUNadlosSUFBSSxDQUFFL1UsS0FBTSxlQUFnQjdPLE1BQU93OEIsRUFBSTdCLGFBQzFDa0MsRUFDR00sWUFBWSxZQUNadlosSUFBSSxDQUFFL1UsS0FBTSxpQkFBa0I3TyxNQUFPdzhCLEVBQUk1QixjQUM1Q2lDLEVBQ0dNLFlBQVksWUFDWnZaLElBQUksQ0FBRS9VLEtBQU0sY0FBZTdPLE1BQU93OEIsRUFBSTNCLFlBQ3pDZ0MsRUFBWU0sWUFBWSxZQUFZdlosSUFBSSxDQUN0Qy9VLEtBQU0sMEJBQ043TyxNQUFPdzhCLEVBQUkxQixzQkFFYitCLEVBQVlNLFlBQVksWUFBWXZaLElBQUksQ0FDdEMvVSxLQUFNLDhCQUNON08sTUFBT3c4QixFQUFJekIsd0JBRWI4QixFQUFZTSxZQUFZLFlBQVl2WixJQUFJLENBQ3RDL1UsS0FBTSwyQkFDTjdPLE1BQU93OEIsRUFBSXhCLHVCQUViNkIsRUFBWU0sWUFBWSxZQUFZdlosSUFBSSxDQUN0Qy9VLEtBQU0sd0JBQ043TyxNQUFPdzhCLEVBQUl2QixvQkFFYjRCLEVBQVlNLFlBQVksWUFBWXZaLElBQUksQ0FDdEMvVSxLQUFNLDJCQUNON08sTUFBT3c4QixFQUFJdEIsd0JBRWIyQixFQUFZTSxZQUFZLFlBQVl2WixJQUFJLENBQ3RDL1UsS0FBTSw2QkFDTjdPLE1BQU93OEIsRUFBSXJCLHdCQUViMEIsRUFBWU0sWUFBWSxZQUFZdlosSUFBSSxDQUN0Qy9VLEtBQU0seUJBQ043TyxNQUFPdzhCLEVBQUlwQixxQkFLYnlCLEVBQ0dNLFlBQVksWUFDWnZaLElBQUksQ0FBRS9VLEtBQU0sbUJBQW9CN08sTUFBT3c4QixFQUFJcEMsZUFDOUN5QyxFQUFZKytDLFdBQWNuMUQsSUFDeEJuYyxLQUVGdXlCLEVBQVl3OUMsUUFBVzV6RCxJQUNyQnJYLEVBQU8sSUFBSWxSLE1BQU0saUNBS2pCdzhFLEVBQWlCLElBQUlyd0UsUUFBYyxDQUFDQyxFQUFTOEUsS0FDL0MsR0FBdUMsR0FBbkMzSyxPQUFPcVUsS0FBSzBqQixFQUFJdkMsU0FBU3oyQixPQUMzQjhHLFFBQ0ssQ0FDTCxJQUFJdXlCLEVBQThCRixFQUFHRSxZQUFZLFVBQVcsYUFDNUQsSUFBSyxJQUFJOTRCLEtBQU95NEIsRUFBSXZDLFFBQ2xCNEMsRUFBWU0sWUFBWSxXQUFXdlosSUFBSSxDQUNyQzdmLE1BQ0FrMkIsUUFBU3VDLEVBQUl2QyxRQUFRbDJCLEtBR3pCODRCLEVBQVkrK0MsV0FBY24xRCxJQUN4Qm5jLEtBRUZ1eUIsRUFBWXc5QyxRQUFXNXpELElBQ3JCclgsRUFBTyxJQUFJbFIsTUFBTSxxQ0FFckIsSUFHRTI5RSxFQUFlLElBQUl4eEUsUUFBYyxDQUFDQyxFQUFTOEUsS0FDN0MsR0FDR290QixFQUFJd0Msb0JBQytDLEdBQW5EeEMsRUFBSXdDLG1CQUFxQ3g3QixPQUdyQyxDQUNMLElBQUlxNUIsRUFBOEJGLEVBQUdFLFlBQVksUUFBUyxhQUMxRCxJQUFLLElBQUk3OEIsS0FBU3c4QixFQUFJd0MsbUJBQ3BCbkMsRUFBWU0sWUFBWSxTQUFTdlosSUFBSTVqQixHQUV2QzY4QixFQUFZKytDLFdBQWNuMUQsSUFDeEJuYyxLQUVGdXlCLEVBQVl3OUMsUUFBVzV6RCxJQUNyQnJYLEVBQU8sSUFBSWxSLE1BQU0sbUNBRXJCLE1BWkVvTSxNQWVBd3hFLEVBQWlCLElBQUl6eEUsUUFBYyxDQUFDQyxFQUFTOEUsS0FDL0MsR0FDR290QixFQUFJMkMsc0JBQ21ELEdBQXZEM0MsRUFBSTJDLHFCQUF5QzM3QixPQUd6QyxDQUNMLElBQUlxNUIsRUFBOEJGLEVBQUdFLFlBQVksVUFBVyxhQUM1RCxJQUFLLElBQUk3OEIsS0FBU3c4QixFQUFJMkMscUJBQ3BCdEMsRUFBWU0sWUFBWSxXQUFXdlosSUFBSTVqQixHQUV6QzY4QixFQUFZKytDLFdBQWNuMUQsSUFDeEJuYyxLQUVGdXlCLEVBQVl3OUMsUUFBVzV6RCxJQUNyQnJYLEVBQU8sSUFBSWxSLE1BQU0scUNBRXJCLE1BWkVvTSxNQXVCSixhQVJNRCxRQUFRcWhFLElBQUksQ0FDaEI0TyxFQUNBSSxFQUNBbUIsRUFDQUMsV0FFS3QvQyxFQUFJd0MsMEJBQ0p4QyxFQUFJMkMscUJBQ0ozQyxDQUNULEUsQ0FpQmN1L0MsQ0FBVXYvQyxFQUFLMjlDLEdBQ3BCMzlDLENBQ1QsRSxFMEU5VGN3L0MsQ0FBZTM1RSxFQUFFcXdFLE1BQU9yd0UsRUFBRTQyQixRQUN2QnRzQixLQUFNNnZCLElBQ0xrVSxHQUFPbnRCLE9BRVA5aEIsRUFBTU0sTUFBTWd4RSxVQUFZdjJDLEVBQ3hCLzZCLEVBQU1NLE1BQU1nd0UsS0FBSy9wRSxLQUFLdzBCLEdBRXRCZzlDLEdBQXFCaDlDLEVBQUsvNkIsR0FFMUIrNkIsRUFBSWYsT0FBU2g2QixFQUFNTSxNQUFNKzNFLFVBRXpCRixHQUFlbjRFLEdBRWYsZ0JBRURxeEUsTUFBTy85RCxJQUNOMjdCLEdBQU9udEIsT0FBTzVXLEtBQUssS0FDakI2a0UsR0FBa0J6OEQsRUFBSWhFLFNBQ3RCNUgsUUFBUWtDLE1BQU0wSixXQU0xQixLQUFFMmpDLEdBQVEsQ0FDUnBTLE1BQU83a0MsRUFBTU0sTUFBTSszRSxVQUFZLElBQU0sSUFDckN4eEUsT0FBUSxDQUNOMlcsUUFBVTVjLElBQ1JaLEVBQU1NLE1BQU0rM0UsV0FBYXI0RSxFQUFNTSxNQUFNKzNFLFVBQ2pDcjRFLEVBQU1NLE1BQU1neEUsWUFDRnR4RSxFQUFNTSxNQUFNZ3hFLFVBQ3BCdDNDLE9BQVNoNkIsRUFBTU0sTUFBTSszRSxXQUUzQkYsR0FBZW40RSxTQUt2QixLQUFFNjFFLEdBQWEsQ0FDYnZFLFVBQVd0eEUsRUFBTU0sTUFBTWd4RSxVQUN2QjMwQyxTQUFVMzhCLEVBQU1NLE1BQU1xOEIsU0FDdEJqVyxXQUFZMW1CLEVBQU1NLE1BQU1vbUIsV0FDeEI0dkQsNkJBQ0FseEQsU0FBVzlrQixJQUNUTixFQUFNTSxNQUFNODJFLHVCQUF5QjkyRSxLQUd6QyxLQUFFMnVDLElBRU4sR0FHRixXQUFTcnlDLFNBQVM2bkUscUJBQXFCLFFBQTJCLEdBQUkyVCxJQUdsRSxrQkFBbUJvQyxXQUNyQnQrRSxPQUFPcU8saUJBQWlCLE9BQVEsS0FDOUJpd0UsVUFBVUMsY0FDUEMsU0FBUyx1QkFDVHh2RSxLQUFNeXZFLEdBQWlCanpFLFFBQVF5ekIsSUFBSSxtQkFDbkNrMkMsTUFBT3VKLEdBQ05sekUsUUFBUWtDLE1BQU0sMkJBQTRCZ3hFLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvdGV4dGFyZWEtY2FyZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL21pdGhyaWwvcmVuZGVyLmpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3JlbmRlci9yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL21pdGhyaWwvcmVuZGVyL3Zub2RlLmpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3JlbmRlci9oeXBlcnNjcmlwdFZub2RlLmpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9taXRocmlsL21vdW50LXJlZHJhdy5qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9xdWVyeXN0cmluZy9idWlsZC5qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvbW1zdmcvZ29vZ2xlL21zdmcvaGFyZHdhcmUva2V5Ym9hcmQtYXJyb3ctZG93bi5qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC91dGlsL2NlbnNvci5qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9yZXF1ZXN0L3JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL21pdGhyaWwvaHlwZXJzY3JpcHQuanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL2oyYy9kaXN0L2oyYy5jb21tb25qcy5qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9wYXRobmFtZS9wYXJzZS5qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9wYXRobmFtZS9jb21waWxlVGVtcGxhdGUuanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL21pdGhyaWwvcGF0aG5hbWUvYnVpbGQuanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL21tc3ZnL2dvb2dsZS9tc3ZnL2FjdGlvbi9kZWxldGUuanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL21pdGhyaWwvcmVuZGVyL3RydXN0LmpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9taXRocmlsL2FwaS9tb3VudC1yZWRyYXcuanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL21tc3ZnL2dvb2dsZS9tc3ZnL2hhcmR3YXJlL2tleWJvYXJkLWFycm93LXVwLmpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3JlbmRlci9oeXBlcnNjcmlwdC5qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9xdWVyeXN0cmluZy9wYXJzZS5qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9yZW5kZXIvZG9tRm9yLmpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3V0aWwvaGFzT3duLmpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9taXRocmlsL2FwaS9yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL21pdGhyaWwvcm91dGUuanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL21pdGhyaWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL21pdGhyaWwvcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9yZW5kZXIvZnJhZ21lbnQuanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Npbm90ZXBhZC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Npbm90ZXBhZC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY29yZS9kaXN0L3BvbHl0aGVuZS1jb3JlLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNvcmUtY3NzL2Rpc3QvcG9seXRoZW5lLWNvcmUtY3NzLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9zcmMvc3R5bGUudHMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vc3JjL3N0cmVhbS9qc3RleHRkZWNvZGVyc3RyZWFtLnRzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL3NyYy9zdHJlYW0vanNsaW5lc3RyZWFtLnRzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL3NyYy9jaW4vY2luLnRzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL3NyYy9jaW4vY2lubG9hZGVyLnRzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY29yZS10b29sYmFyL2Rpc3QvcG9seXRoZW5lLWNvcmUtdG9vbGJhci5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jb3JlLXNoYWRvdy9kaXN0L3BvbHl0aGVuZS1jb3JlLXNoYWRvdy5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL2N5YW5vLW1pdGhyaWwvZGlzdC9jeWFuby1taXRocmlsLm1vZHVsZS5qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLW1pdGhyaWwtc2hhZG93L2Rpc3QvcG9seXRoZW5lLW1pdGhyaWwtc2hhZG93Lm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLW1pdGhyaWwtdG9vbGJhci9kaXN0L3BvbHl0aGVuZS1taXRocmlsLXRvb2xiYXIubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY29yZS1kaWFsb2cvZGlzdC9wb2x5dGhlbmUtY29yZS1kaWFsb2cubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY29yZS1kaWFsb2ctcGFuZS9kaXN0L3BvbHl0aGVuZS1jb3JlLWRpYWxvZy1wYW5lLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLW1pdGhyaWwtZGlhbG9nLXBhbmUvZGlzdC9wb2x5dGhlbmUtbWl0aHJpbC1kaWFsb2ctcGFuZS5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1taXRocmlsLWRpYWxvZy9kaXN0L3BvbHl0aGVuZS1taXRocmlsLWRpYWxvZy5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jb3JlLWJ1dHRvbi9kaXN0L3BvbHl0aGVuZS1jb3JlLWJ1dHRvbi5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1zdHlsZS9kaXN0L3BvbHl0aGVuZS1zdHlsZS5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jb3JlLXJpcHBsZS9kaXN0L3BvbHl0aGVuZS1jb3JlLXJpcHBsZS5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1taXRocmlsLXJpcHBsZS9kaXN0L3BvbHl0aGVuZS1taXRocmlsLXJpcHBsZS5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jb3JlLWljb24vZGlzdC9wb2x5dGhlbmUtY29yZS1pY29uLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNvcmUtc3ZnL2Rpc3QvcG9seXRoZW5lLWNvcmUtc3ZnLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLW1pdGhyaWwtc3ZnL2Rpc3QvcG9seXRoZW5lLW1pdGhyaWwtc3ZnLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLW1pdGhyaWwtaWNvbi9kaXN0L3BvbHl0aGVuZS1taXRocmlsLWljb24ubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtbWl0aHJpbC1idXR0b24vZGlzdC9wb2x5dGhlbmUtbWl0aHJpbC1idXR0b24ubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY3NzLWJhc2Utc3Bpbm5lci9kaXN0L3BvbHl0aGVuZS1jc3MtYmFzZS1zcGlubmVyLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy1zaGFkb3cvZGlzdC9wb2x5dGhlbmUtY3NzLXNoYWRvdy5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jc3MtYnV0dG9uL2Rpc3QvcG9seXRoZW5lLWNzcy1idXR0b24ubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY3NzLWJ1dHRvbi1ncm91cC9kaXN0L3BvbHl0aGVuZS1jc3MtYnV0dG9uLWdyb3VwLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy1jYXJkL2Rpc3QvcG9seXRoZW5lLWNzcy1jYXJkLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy1zZWxlY3Rpb24tY29udHJvbC9kaXN0L3BvbHl0aGVuZS1jc3Mtc2VsZWN0aW9uLWNvbnRyb2wubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY3NzLWNoZWNrYm94L2Rpc3QvcG9seXRoZW5lLWNzcy1jaGVja2JveC5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jc3MtZGlhbG9nLXBhbmUvZGlzdC9wb2x5dGhlbmUtY3NzLWRpYWxvZy1wYW5lLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy1kaWFsb2cvZGlzdC9wb2x5dGhlbmUtY3NzLWRpYWxvZy5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jc3MtZHJhd2VyL2Rpc3QvcG9seXRoZW5lLWNzcy1kcmF3ZXIubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY3NzLWZhYi9kaXN0L3BvbHl0aGVuZS1jc3MtZmFiLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy1pY29uL2Rpc3QvcG9seXRoZW5lLWNzcy1pY29uLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy1pY29uLWJ1dHRvbi9kaXN0L3BvbHl0aGVuZS1jc3MtaWNvbi1idXR0b24ubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY3NzLWlvcy1zcGlubmVyL2Rpc3QvcG9seXRoZW5lLWNzcy1pb3Mtc3Bpbm5lci5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jc3MtbGlzdC9kaXN0L3BvbHl0aGVuZS1jc3MtbGlzdC5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jc3MtbGlzdC10aWxlL2Rpc3QvcG9seXRoZW5lLWNzcy1saXN0LXRpbGUubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY3NzLW1hdGVyaWFsLWRlc2lnbi1zcGlubmVyL2Rpc3QvcG9seXRoZW5lLWNzcy1tYXRlcmlhbC1kZXNpZ24tc3Bpbm5lci5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jc3MtbWF0ZXJpYWwtZGVzaWduLXByb2dyZXNzLXNwaW5uZXIvZGlzdC9wb2x5dGhlbmUtY3NzLW1hdGVyaWFsLWRlc2lnbi1wcm9ncmVzcy1zcGlubmVyLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy1tZW51L2Rpc3QvcG9seXRoZW5lLWNzcy1tZW51Lm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy1ub3RpZmljYXRpb24vZGlzdC9wb2x5dGhlbmUtY3NzLW5vdGlmaWNhdGlvbi5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jc3MtcmFkaW8tYnV0dG9uL2Rpc3QvcG9seXRoZW5lLWNzcy1yYWRpby1idXR0b24ubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY3NzLXJpcHBsZS9kaXN0L3BvbHl0aGVuZS1jc3MtcmlwcGxlLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy1zZWFyY2gvZGlzdC9wb2x5dGhlbmUtY3NzLXNlYXJjaC5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jc3Mtc2xpZGVyL2Rpc3QvcG9seXRoZW5lLWNzcy1zbGlkZXIubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY3NzLXNuYWNrYmFyL2Rpc3QvcG9seXRoZW5lLWNzcy1zbmFja2Jhci5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jc3Mtc3ZnL2Rpc3QvcG9seXRoZW5lLWNzcy1zdmcubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY3NzLXN3aXRjaC9kaXN0L3BvbHl0aGVuZS1jc3Mtc3dpdGNoLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy10YWJzL2Rpc3QvcG9seXRoZW5lLWNzcy10YWJzLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy10ZXh0ZmllbGQvZGlzdC9wb2x5dGhlbmUtY3NzLXRleHRmaWVsZC5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jc3MtdG9vbGJhci9kaXN0L3BvbHl0aGVuZS1jc3MtdG9vbGJhci5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jc3MtY29yZS9kaXN0L3BvbHl0aGVuZS1jc3MtY29yZS5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS11dGlsaXRpZXMvZGlzdC9wb2x5dGhlbmUtdXRpbGl0aWVzLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNzcy10eXBvZ3JhcGh5L2Rpc3QvcG9seXRoZW5lLWNzcy10eXBvZ3JhcGh5Lm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNvcmUtbWVudS9kaXN0L3BvbHl0aGVuZS1jb3JlLW1lbnUubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtbWl0aHJpbC1tZW51L2Rpc3QvcG9seXRoZW5lLW1pdGhyaWwtbWVudS5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jb3JlLWxpc3QvZGlzdC9wb2x5dGhlbmUtY29yZS1saXN0Lm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNvcmUtbGlzdC10aWxlL2Rpc3QvcG9seXRoZW5lLWNvcmUtbGlzdC10aWxlLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLW1pdGhyaWwtbGlzdC10aWxlL2Rpc3QvcG9seXRoZW5lLW1pdGhyaWwtbGlzdC10aWxlLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLW1pdGhyaWwtbGlzdC9kaXN0L3BvbHl0aGVuZS1taXRocmlsLWxpc3QubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY29yZS1pY29uLWJ1dHRvbi9kaXN0L3BvbHl0aGVuZS1jb3JlLWljb24tYnV0dG9uLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLW1pdGhyaWwtaWNvbi1idXR0b24vZGlzdC9wb2x5dGhlbmUtbWl0aHJpbC1pY29uLWJ1dHRvbi5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vc3JjL2d1aS9maWxlaW5wdXQudHMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1jb3JlLXRleHRmaWVsZC9kaXN0L3BvbHl0aGVuZS1jb3JlLXRleHRmaWVsZC5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1taXRocmlsLXRleHRmaWVsZC9kaXN0L3BvbHl0aGVuZS1taXRocmlsLXRleHRmaWVsZC5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vc3JjL2d1aS91cmxpbnB1dC50cyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNvcmUtYmFzZS1zcGlubmVyL2Rpc3QvcG9seXRoZW5lLWNvcmUtYmFzZS1zcGlubmVyLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLW1pdGhyaWwtYmFzZS1zcGlubmVyL2Rpc3QvcG9seXRoZW5lLW1pdGhyaWwtYmFzZS1zcGlubmVyLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9ub2RlX21vZHVsZXMvcG9seXRoZW5lLWNvcmUtbWF0ZXJpYWwtZGVzaWduLXNwaW5uZXIvZGlzdC9wb2x5dGhlbmUtY29yZS1tYXRlcmlhbC1kZXNpZ24tc3Bpbm5lci5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1taXRocmlsLW1hdGVyaWFsLWRlc2lnbi1zcGlubmVyL2Rpc3QvcG9seXRoZW5lLW1pdGhyaWwtbWF0ZXJpYWwtZGVzaWduLXNwaW5uZXIubWpzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL3NyYy9ndWkvZGlhbG9nLnRzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL3NyYy9ndWkvY2luc2Ryb3Bkb3duLnRzIiwid2VicGFjazovL2Npbm90ZXBhZC8uL25vZGVfbW9kdWxlcy9wb2x5dGhlbmUtY29yZS1jYXJkL2Rpc3QvcG9seXRoZW5lLWNvcmUtY2FyZC5tanMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vbm9kZV9tb2R1bGVzL3BvbHl0aGVuZS1taXRocmlsLWNhcmQvZGlzdC9wb2x5dGhlbmUtbWl0aHJpbC1jYXJkLm1qcyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9zcmMvZ3VpL2NhbmRpZGF0ZXMudHMiLCJ3ZWJwYWNrOi8vY2lub3RlcGFkLy4vc3JjL2d1aS9jaW50ZXh0YXJlYS50cyIsIndlYnBhY2s6Ly9jaW5vdGVwYWQvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoganNoaW50IGJyb3dzZXI6IHRydWUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblxuLy8gV2UnbGwgY29weSB0aGUgcHJvcGVydGllcyBiZWxvdyBpbnRvIHRoZSBtaXJyb3IgZGl2LlxuLy8gTm90ZSB0aGF0IHNvbWUgYnJvd3NlcnMsIHN1Y2ggYXMgRmlyZWZveCwgZG8gbm90IGNvbmNhdGVuYXRlIHByb3BlcnRpZXNcbi8vIGludG8gdGhlaXIgc2hvcnRoYW5kIChlLmcuIHBhZGRpbmctdG9wLCBwYWRkaW5nLWJvdHRvbSBldGMuIC0+IHBhZGRpbmcpLFxuLy8gc28gd2UgaGF2ZSB0byBsaXN0IGV2ZXJ5IHNpbmdsZSBwcm9wZXJ0eSBleHBsaWNpdGx5LlxudmFyIHByb3BlcnRpZXMgPSBbXG4gICdkaXJlY3Rpb24nLCAgLy8gUlRMIHN1cHBvcnRcbiAgJ2JveFNpemluZycsXG4gICd3aWR0aCcsICAvLyBvbiBDaHJvbWUgYW5kIElFLCBleGNsdWRlIHRoZSBzY3JvbGxiYXIsIHNvIHRoZSBtaXJyb3IgZGl2IHdyYXBzIGV4YWN0bHkgYXMgdGhlIHRleHRhcmVhIGRvZXNcbiAgJ2hlaWdodCcsXG4gICdvdmVyZmxvd1gnLFxuICAnb3ZlcmZsb3dZJywgIC8vIGNvcHkgdGhlIHNjcm9sbGJhciBmb3IgSUVcblxuICAnYm9yZGVyVG9wV2lkdGgnLFxuICAnYm9yZGVyUmlnaHRXaWR0aCcsXG4gICdib3JkZXJCb3R0b21XaWR0aCcsXG4gICdib3JkZXJMZWZ0V2lkdGgnLFxuICAnYm9yZGVyU3R5bGUnLFxuXG4gICdwYWRkaW5nVG9wJyxcbiAgJ3BhZGRpbmdSaWdodCcsXG4gICdwYWRkaW5nQm90dG9tJyxcbiAgJ3BhZGRpbmdMZWZ0JyxcblxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvZm9udFxuICAnZm9udFN0eWxlJyxcbiAgJ2ZvbnRWYXJpYW50JyxcbiAgJ2ZvbnRXZWlnaHQnLFxuICAnZm9udFN0cmV0Y2gnLFxuICAnZm9udFNpemUnLFxuICAnZm9udFNpemVBZGp1c3QnLFxuICAnbGluZUhlaWdodCcsXG4gICdmb250RmFtaWx5JyxcblxuICAndGV4dEFsaWduJyxcbiAgJ3RleHRUcmFuc2Zvcm0nLFxuICAndGV4dEluZGVudCcsXG4gICd0ZXh0RGVjb3JhdGlvbicsICAvLyBtaWdodCBub3QgbWFrZSBhIGRpZmZlcmVuY2UsIGJ1dCBiZXR0ZXIgYmUgc2FmZVxuXG4gICdsZXR0ZXJTcGFjaW5nJyxcbiAgJ3dvcmRTcGFjaW5nJyxcblxuICAndGFiU2l6ZScsXG4gICdNb3pUYWJTaXplJ1xuXG5dO1xuXG52YXIgaXNCcm93c2VyID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKTtcbnZhciBpc0ZpcmVmb3ggPSAoaXNCcm93c2VyICYmIHdpbmRvdy5tb3pJbm5lclNjcmVlblggIT0gbnVsbCk7XG5cbmZ1bmN0aW9uIGdldENhcmV0Q29vcmRpbmF0ZXMoZWxlbWVudCwgcG9zaXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RleHRhcmVhLWNhcmV0LXBvc2l0aW9uI2dldENhcmV0Q29vcmRpbmF0ZXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIGluIGEgYnJvd3NlcicpO1xuICB9XG5cbiAgdmFyIGRlYnVnID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlYnVnIHx8IGZhbHNlO1xuICBpZiAoZGVidWcpIHtcbiAgICB2YXIgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW5wdXQtdGV4dGFyZWEtY2FyZXQtcG9zaXRpb24tbWlycm9yLWRpdicpO1xuICAgIGlmIChlbCkgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH1cblxuICAvLyBUaGUgbWlycm9yIGRpdiB3aWxsIHJlcGxpY2F0ZSB0aGUgdGV4dGFyZWEncyBzdHlsZVxuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5pZCA9ICdpbnB1dC10ZXh0YXJlYS1jYXJldC1wb3NpdGlvbi1taXJyb3ItZGl2JztcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuXG4gIHZhciBzdHlsZSA9IGRpdi5zdHlsZTtcbiAgdmFyIGNvbXB1dGVkID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSA6IGVsZW1lbnQuY3VycmVudFN0eWxlOyAgLy8gY3VycmVudFN0eWxlIGZvciBJRSA8IDlcbiAgdmFyIGlzSW5wdXQgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSU5QVVQnO1xuXG4gIC8vIERlZmF1bHQgdGV4dGFyZWEgc3R5bGVzXG4gIHN0eWxlLndoaXRlU3BhY2UgPSAncHJlLXdyYXAnO1xuICBpZiAoIWlzSW5wdXQpXG4gICAgc3R5bGUud29yZFdyYXAgPSAnYnJlYWstd29yZCc7ICAvLyBvbmx5IGZvciB0ZXh0YXJlYS1zXG5cbiAgLy8gUG9zaXRpb24gb2ZmLXNjcmVlblxuICBzdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7ICAvLyByZXF1aXJlZCB0byByZXR1cm4gY29vcmRpbmF0ZXMgcHJvcGVybHlcbiAgaWYgKCFkZWJ1ZylcbiAgICBzdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7ICAvLyBub3QgJ2Rpc3BsYXk6IG5vbmUnIGJlY2F1c2Ugd2Ugd2FudCByZW5kZXJpbmdcblxuICAvLyBUcmFuc2ZlciB0aGUgZWxlbWVudCdzIHByb3BlcnRpZXMgdG8gdGhlIGRpdlxuICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICBpZiAoaXNJbnB1dCAmJiBwcm9wID09PSAnbGluZUhlaWdodCcpIHtcbiAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgPGlucHV0PnMgYmVjYXVzZSB0ZXh0IGlzIHJlbmRlcmVkIGNlbnRlcmVkIGFuZCBsaW5lIGhlaWdodCBtYXkgYmUgIT0gaGVpZ2h0XG4gICAgICBzdHlsZS5saW5lSGVpZ2h0ID0gY29tcHV0ZWQuaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZVtwcm9wXSA9IGNvbXB1dGVkW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGlzRmlyZWZveCkge1xuICAgIC8vIEZpcmVmb3ggbGllcyBhYm91dCB0aGUgb3ZlcmZsb3cgcHJvcGVydHkgZm9yIHRleHRhcmVhczogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9OTg0Mjc1XG4gICAgaWYgKGVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gcGFyc2VJbnQoY29tcHV0ZWQuaGVpZ2h0KSlcbiAgICAgIHN0eWxlLm92ZXJmbG93WSA9ICdzY3JvbGwnO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7ICAvLyBmb3IgQ2hyb21lIHRvIG5vdCByZW5kZXIgYSBzY3JvbGxiYXI7IElFIGtlZXBzIG92ZXJmbG93WSA9ICdzY3JvbGwnXG4gIH1cblxuICBkaXYudGV4dENvbnRlbnQgPSBlbGVtZW50LnZhbHVlLnN1YnN0cmluZygwLCBwb3NpdGlvbik7XG4gIC8vIFRoZSBzZWNvbmQgc3BlY2lhbCBoYW5kbGluZyBmb3IgaW5wdXQgdHlwZT1cInRleHRcIiB2cyB0ZXh0YXJlYTpcbiAgLy8gc3BhY2VzIG5lZWQgdG8gYmUgcmVwbGFjZWQgd2l0aCBub24tYnJlYWtpbmcgc3BhY2VzIC0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTM0MDIwMzUvMTI2OTAzN1xuICBpZiAoaXNJbnB1dClcbiAgICBkaXYudGV4dENvbnRlbnQgPSBkaXYudGV4dENvbnRlbnQucmVwbGFjZSgvXFxzL2csICdcXHUwMGEwJyk7XG5cbiAgdmFyIHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIC8vIFdyYXBwaW5nIG11c3QgYmUgcmVwbGljYXRlZCAqZXhhY3RseSosIGluY2x1ZGluZyB3aGVuIGEgbG9uZyB3b3JkIGdldHNcbiAgLy8gb250byB0aGUgbmV4dCBsaW5lLCB3aXRoIHdoaXRlc3BhY2UgYXQgdGhlIGVuZCBvZiB0aGUgbGluZSBiZWZvcmUgKCM3KS5cbiAgLy8gVGhlICAqb25seSogcmVsaWFibGUgd2F5IHRvIGRvIHRoYXQgaXMgdG8gY29weSB0aGUgKmVudGlyZSogcmVzdCBvZiB0aGVcbiAgLy8gdGV4dGFyZWEncyBjb250ZW50IGludG8gdGhlIDxzcGFuPiBjcmVhdGVkIGF0IHRoZSBjYXJldCBwb3NpdGlvbi5cbiAgLy8gRm9yIGlucHV0cywganVzdCAnLicgd291bGQgYmUgZW5vdWdoLCBidXQgbm8gbmVlZCB0byBib3RoZXIuXG4gIHNwYW4udGV4dENvbnRlbnQgPSBlbGVtZW50LnZhbHVlLnN1YnN0cmluZyhwb3NpdGlvbikgfHwgJy4nOyAgLy8gfHwgYmVjYXVzZSBhIGNvbXBsZXRlbHkgZW1wdHkgZmF1eCBzcGFuIGRvZXNuJ3QgcmVuZGVyIGF0IGFsbFxuICBkaXYuYXBwZW5kQ2hpbGQoc3Bhbik7XG5cbiAgdmFyIGNvb3JkaW5hdGVzID0ge1xuICAgIHRvcDogc3Bhbi5vZmZzZXRUb3AgKyBwYXJzZUludChjb21wdXRlZFsnYm9yZGVyVG9wV2lkdGgnXSksXG4gICAgbGVmdDogc3Bhbi5vZmZzZXRMZWZ0ICsgcGFyc2VJbnQoY29tcHV0ZWRbJ2JvcmRlckxlZnRXaWR0aCddKSxcbiAgICBoZWlnaHQ6IHBhcnNlSW50KGNvbXB1dGVkWydsaW5lSGVpZ2h0J10pXG4gIH07XG5cbiAgaWYgKGRlYnVnKSB7XG4gICAgc3Bhbi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2FhYSc7XG4gIH0gZWxzZSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkaXYpO1xuICB9XG5cbiAgcmV0dXJuIGNvb3JkaW5hdGVzO1xufVxuXG5pZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBnZXRDYXJldENvb3JkaW5hdGVzO1xufSBlbHNlIGlmKGlzQnJvd3Nlcikge1xuICB3aW5kb3cuZ2V0Q2FyZXRDb29yZGluYXRlcyA9IGdldENhcmV0Q29vcmRpbmF0ZXM7XG59XG5cbn0oKSk7XG4iLCJcInVzZSBzdHJpY3RcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3JlbmRlci9yZW5kZXJcIikodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IG51bGwpXG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgVm5vZGUgPSByZXF1aXJlKFwiLi4vcmVuZGVyL3Zub2RlXCIpXG52YXIgZGYgPSByZXF1aXJlKFwiLi4vcmVuZGVyL2RvbUZvclwiKVxudmFyIGRlbGF5ZWRSZW1vdmFsID0gZGYuZGVsYXllZFJlbW92YWxcbnZhciBkb21Gb3IgPSBkZi5kb21Gb3JcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0dmFyIG5hbWVTcGFjZSA9IHtcblx0XHRzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcblx0XHRtYXRoOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIlxuXHR9XG5cblx0dmFyIGN1cnJlbnRSZWRyYXdcblx0dmFyIGN1cnJlbnRSZW5kZXJcblxuXHRmdW5jdGlvbiBnZXREb2N1bWVudChkb20pIHtcblx0XHRyZXR1cm4gZG9tLm93bmVyRG9jdW1lbnQ7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXROYW1lU3BhY2Uodm5vZGUpIHtcblx0XHRyZXR1cm4gdm5vZGUuYXR0cnMgJiYgdm5vZGUuYXR0cnMueG1sbnMgfHwgbmFtZVNwYWNlW3Zub2RlLnRhZ11cblx0fVxuXG5cdC8vc2FuaXR5IGNoZWNrIHRvIGRpc2NvdXJhZ2UgcGVvcGxlIGZyb20gZG9pbmcgYHZub2RlLnN0YXRlID0gLi4uYFxuXHRmdW5jdGlvbiBjaGVja1N0YXRlKHZub2RlLCBvcmlnaW5hbCkge1xuXHRcdGlmICh2bm9kZS5zdGF0ZSAhPT0gb3JpZ2luYWwpIHRocm93IG5ldyBFcnJvcihcIid2bm9kZS5zdGF0ZScgbXVzdCBub3QgYmUgbW9kaWZpZWQuXCIpXG5cdH1cblxuXHQvL05vdGU6IHRoZSBob29rIGlzIHBhc3NlZCBhcyB0aGUgYHRoaXNgIGFyZ3VtZW50IHRvIGFsbG93IHByb3h5aW5nIHRoZVxuXHQvL2FyZ3VtZW50cyB3aXRob3V0IHJlcXVpcmluZyBhIGZ1bGwgYXJyYXkgYWxsb2NhdGlvbiB0byBkbyBzby4gSXQgYWxzb1xuXHQvL3Rha2VzIGFkdmFudGFnZSBvZiB0aGUgZmFjdCB0aGUgY3VycmVudCBgdm5vZGVgIGlzIHRoZSBmaXJzdCBhcmd1bWVudCBpblxuXHQvL2FsbCBsaWZlY3ljbGUgbWV0aG9kcy5cblx0ZnVuY3Rpb24gY2FsbEhvb2sodm5vZGUpIHtcblx0XHR2YXIgb3JpZ2luYWwgPSB2bm9kZS5zdGF0ZVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hcHBseShvcmlnaW5hbCwgYXJndW1lbnRzKVxuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRjaGVja1N0YXRlKHZub2RlLCBvcmlnaW5hbClcblx0XHR9XG5cdH1cblxuXHQvLyBJRTExIChhdCBsZWFzdCkgdGhyb3dzIGFuIFVuc3BlY2lmaWVkRXJyb3Igd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB3aGVuXG5cdC8vIGluc2lkZSBhbiBpZnJhbWUuIENhdGNoIGFuZCBzd2FsbG93IHRoaXMgZXJyb3IsIGFuZCBoZWF2eS1oYW5kaWRseSByZXR1cm4gbnVsbC5cblx0ZnVuY3Rpb24gYWN0aXZlRWxlbWVudChkb20pIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGdldERvY3VtZW50KGRvbSkuYWN0aXZlRWxlbWVudFxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBudWxsXG5cdFx0fVxuXHR9XG5cdC8vY3JlYXRlXG5cdGZ1bmN0aW9uIGNyZWF0ZU5vZGVzKHBhcmVudCwgdm5vZGVzLCBzdGFydCwgZW5kLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKSB7XG5cdFx0Zm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcblx0XHRcdHZhciB2bm9kZSA9IHZub2Rlc1tpXVxuXHRcdFx0aWYgKHZub2RlICE9IG51bGwpIHtcblx0XHRcdFx0Y3JlYXRlTm9kZShwYXJlbnQsIHZub2RlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiBjcmVhdGVOb2RlKHBhcmVudCwgdm5vZGUsIGhvb2tzLCBucywgbmV4dFNpYmxpbmcpIHtcblx0XHR2YXIgdGFnID0gdm5vZGUudGFnXG5cdFx0aWYgKHR5cGVvZiB0YWcgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdHZub2RlLnN0YXRlID0ge31cblx0XHRcdGlmICh2bm9kZS5hdHRycyAhPSBudWxsKSBpbml0TGlmZWN5Y2xlKHZub2RlLmF0dHJzLCB2bm9kZSwgaG9va3MpXG5cdFx0XHRzd2l0Y2ggKHRhZykge1xuXHRcdFx0XHRjYXNlIFwiI1wiOiBjcmVhdGVUZXh0KHBhcmVudCwgdm5vZGUsIG5leHRTaWJsaW5nKTsgYnJlYWtcblx0XHRcdFx0Y2FzZSBcIjxcIjogY3JlYXRlSFRNTChwYXJlbnQsIHZub2RlLCBucywgbmV4dFNpYmxpbmcpOyBicmVha1xuXHRcdFx0XHRjYXNlIFwiW1wiOiBjcmVhdGVGcmFnbWVudChwYXJlbnQsIHZub2RlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKTsgYnJlYWtcblx0XHRcdFx0ZGVmYXVsdDogY3JlYXRlRWxlbWVudChwYXJlbnQsIHZub2RlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKVxuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGNyZWF0ZUNvbXBvbmVudChwYXJlbnQsIHZub2RlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKVxuXHR9XG5cdGZ1bmN0aW9uIGNyZWF0ZVRleHQocGFyZW50LCB2bm9kZSwgbmV4dFNpYmxpbmcpIHtcblx0XHR2bm9kZS5kb20gPSBnZXREb2N1bWVudChwYXJlbnQpLmNyZWF0ZVRleHROb2RlKHZub2RlLmNoaWxkcmVuKVxuXHRcdGluc2VydERPTShwYXJlbnQsIHZub2RlLmRvbSwgbmV4dFNpYmxpbmcpXG5cdH1cblx0dmFyIHBvc3NpYmxlUGFyZW50cyA9IHtjYXB0aW9uOiBcInRhYmxlXCIsIHRoZWFkOiBcInRhYmxlXCIsIHRib2R5OiBcInRhYmxlXCIsIHRmb290OiBcInRhYmxlXCIsIHRyOiBcInRib2R5XCIsIHRoOiBcInRyXCIsIHRkOiBcInRyXCIsIGNvbGdyb3VwOiBcInRhYmxlXCIsIGNvbDogXCJjb2xncm91cFwifVxuXHRmdW5jdGlvbiBjcmVhdGVIVE1MKHBhcmVudCwgdm5vZGUsIG5zLCBuZXh0U2libGluZykge1xuXHRcdHZhciBtYXRjaCA9IHZub2RlLmNoaWxkcmVuLm1hdGNoKC9eXFxzKj88KFxcdyspL2ltKSB8fCBbXVxuXHRcdC8vIG5vdCB1c2luZyB0aGUgcHJvcGVyIHBhcmVudCBtYWtlcyB0aGUgY2hpbGQgZWxlbWVudChzKSB2YW5pc2guXG5cdFx0Ly8gICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG5cdFx0Ly8gICAgIGRpdi5pbm5lckhUTUwgPSBcIjx0ZD5pPC90ZD48dGQ+ajwvdGQ+XCJcblx0XHQvLyAgICAgY29uc29sZS5sb2coZGl2LmlubmVySFRNTClcblx0XHQvLyAtLT4gXCJpalwiLCBubyA8dGQ+IGluIHNpZ2h0LlxuXHRcdHZhciB0ZW1wID0gZ2V0RG9jdW1lbnQocGFyZW50KS5jcmVhdGVFbGVtZW50KHBvc3NpYmxlUGFyZW50c1ttYXRjaFsxXV0gfHwgXCJkaXZcIilcblx0XHRpZiAobnMgPT09IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIikge1xuXHRcdFx0dGVtcC5pbm5lckhUTUwgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIj5cIiArIHZub2RlLmNoaWxkcmVuICsgXCI8L3N2Zz5cIlxuXHRcdFx0dGVtcCA9IHRlbXAuZmlyc3RDaGlsZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0ZW1wLmlubmVySFRNTCA9IHZub2RlLmNoaWxkcmVuXG5cdFx0fVxuXHRcdHZub2RlLmRvbSA9IHRlbXAuZmlyc3RDaGlsZFxuXHRcdHZub2RlLmRvbVNpemUgPSB0ZW1wLmNoaWxkTm9kZXMubGVuZ3RoXG5cdFx0Ly8gQ2FwdHVyZSBub2RlcyB0byByZW1vdmUsIHNvIHdlIGRvbid0IGNvbmZ1c2UgdGhlbS5cblx0XHR2YXIgZnJhZ21lbnQgPSBnZXREb2N1bWVudChwYXJlbnQpLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKVxuXHRcdHZhciBjaGlsZFxuXHRcdHdoaWxlIChjaGlsZCA9IHRlbXAuZmlyc3RDaGlsZCkge1xuXHRcdFx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG5cdFx0fVxuXHRcdGluc2VydERPTShwYXJlbnQsIGZyYWdtZW50LCBuZXh0U2libGluZylcblx0fVxuXHRmdW5jdGlvbiBjcmVhdGVGcmFnbWVudChwYXJlbnQsIHZub2RlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKSB7XG5cdFx0dmFyIGZyYWdtZW50ID0gZ2V0RG9jdW1lbnQocGFyZW50KS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KClcblx0XHRpZiAodm5vZGUuY2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0dmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW5cblx0XHRcdGNyZWF0ZU5vZGVzKGZyYWdtZW50LCBjaGlsZHJlbiwgMCwgY2hpbGRyZW4ubGVuZ3RoLCBob29rcywgbnVsbCwgbnMpXG5cdFx0fVxuXHRcdHZub2RlLmRvbSA9IGZyYWdtZW50LmZpcnN0Q2hpbGRcblx0XHR2bm9kZS5kb21TaXplID0gZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGhcblx0XHRpbnNlcnRET00ocGFyZW50LCBmcmFnbWVudCwgbmV4dFNpYmxpbmcpXG5cdH1cblx0ZnVuY3Rpb24gY3JlYXRlRWxlbWVudChwYXJlbnQsIHZub2RlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKSB7XG5cdFx0dmFyIHRhZyA9IHZub2RlLnRhZ1xuXHRcdHZhciBhdHRycyA9IHZub2RlLmF0dHJzXG5cdFx0dmFyIGlzID0gdm5vZGUuaXNcblxuXHRcdG5zID0gZ2V0TmFtZVNwYWNlKHZub2RlKSB8fCBuc1xuXG5cdFx0dmFyIGVsZW1lbnQgPSBucyA/XG5cdFx0XHRpcyA/IGdldERvY3VtZW50KHBhcmVudCkuY3JlYXRlRWxlbWVudE5TKG5zLCB0YWcsIHtpczogaXN9KSA6IGdldERvY3VtZW50KHBhcmVudCkuY3JlYXRlRWxlbWVudE5TKG5zLCB0YWcpIDpcblx0XHRcdGlzID8gZ2V0RG9jdW1lbnQocGFyZW50KS5jcmVhdGVFbGVtZW50KHRhZywge2lzOiBpc30pIDogZ2V0RG9jdW1lbnQocGFyZW50KS5jcmVhdGVFbGVtZW50KHRhZylcblx0XHR2bm9kZS5kb20gPSBlbGVtZW50XG5cblx0XHRpZiAoYXR0cnMgIT0gbnVsbCkge1xuXHRcdFx0c2V0QXR0cnModm5vZGUsIGF0dHJzLCBucylcblx0XHR9XG5cblx0XHRpbnNlcnRET00ocGFyZW50LCBlbGVtZW50LCBuZXh0U2libGluZylcblxuXHRcdGlmICghbWF5YmVTZXRDb250ZW50RWRpdGFibGUodm5vZGUpKSB7XG5cdFx0XHRpZiAodm5vZGUuY2hpbGRyZW4gIT0gbnVsbCkge1xuXHRcdFx0XHR2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlblxuXHRcdFx0XHRjcmVhdGVOb2RlcyhlbGVtZW50LCBjaGlsZHJlbiwgMCwgY2hpbGRyZW4ubGVuZ3RoLCBob29rcywgbnVsbCwgbnMpXG5cdFx0XHRcdGlmICh2bm9kZS50YWcgPT09IFwic2VsZWN0XCIgJiYgYXR0cnMgIT0gbnVsbCkgc2V0TGF0ZVNlbGVjdEF0dHJzKHZub2RlLCBhdHRycylcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gaW5pdENvbXBvbmVudCh2bm9kZSwgaG9va3MpIHtcblx0XHR2YXIgc2VudGluZWxcblx0XHRpZiAodHlwZW9mIHZub2RlLnRhZy52aWV3ID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdHZub2RlLnN0YXRlID0gT2JqZWN0LmNyZWF0ZSh2bm9kZS50YWcpXG5cdFx0XHRzZW50aW5lbCA9IHZub2RlLnN0YXRlLnZpZXdcblx0XHRcdGlmIChzZW50aW5lbC4kJHJlZW50cmFudExvY2skJCAhPSBudWxsKSByZXR1cm5cblx0XHRcdHNlbnRpbmVsLiQkcmVlbnRyYW50TG9jayQkID0gdHJ1ZVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2bm9kZS5zdGF0ZSA9IHZvaWQgMFxuXHRcdFx0c2VudGluZWwgPSB2bm9kZS50YWdcblx0XHRcdGlmIChzZW50aW5lbC4kJHJlZW50cmFudExvY2skJCAhPSBudWxsKSByZXR1cm5cblx0XHRcdHNlbnRpbmVsLiQkcmVlbnRyYW50TG9jayQkID0gdHJ1ZVxuXHRcdFx0dm5vZGUuc3RhdGUgPSAodm5vZGUudGFnLnByb3RvdHlwZSAhPSBudWxsICYmIHR5cGVvZiB2bm9kZS50YWcucHJvdG90eXBlLnZpZXcgPT09IFwiZnVuY3Rpb25cIikgPyBuZXcgdm5vZGUudGFnKHZub2RlKSA6IHZub2RlLnRhZyh2bm9kZSlcblx0XHR9XG5cdFx0aW5pdExpZmVjeWNsZSh2bm9kZS5zdGF0ZSwgdm5vZGUsIGhvb2tzKVxuXHRcdGlmICh2bm9kZS5hdHRycyAhPSBudWxsKSBpbml0TGlmZWN5Y2xlKHZub2RlLmF0dHJzLCB2bm9kZSwgaG9va3MpXG5cdFx0dm5vZGUuaW5zdGFuY2UgPSBWbm9kZS5ub3JtYWxpemUoY2FsbEhvb2suY2FsbCh2bm9kZS5zdGF0ZS52aWV3LCB2bm9kZSkpXG5cdFx0aWYgKHZub2RlLmluc3RhbmNlID09PSB2bm9kZSkgdGhyb3cgRXJyb3IoXCJBIHZpZXcgY2Fubm90IHJldHVybiB0aGUgdm5vZGUgaXQgcmVjZWl2ZWQgYXMgYXJndW1lbnRcIilcblx0XHRzZW50aW5lbC4kJHJlZW50cmFudExvY2skJCA9IG51bGxcblx0fVxuXHRmdW5jdGlvbiBjcmVhdGVDb21wb25lbnQocGFyZW50LCB2bm9kZSwgaG9va3MsIG5zLCBuZXh0U2libGluZykge1xuXHRcdGluaXRDb21wb25lbnQodm5vZGUsIGhvb2tzKVxuXHRcdGlmICh2bm9kZS5pbnN0YW5jZSAhPSBudWxsKSB7XG5cdFx0XHRjcmVhdGVOb2RlKHBhcmVudCwgdm5vZGUuaW5zdGFuY2UsIGhvb2tzLCBucywgbmV4dFNpYmxpbmcpXG5cdFx0XHR2bm9kZS5kb20gPSB2bm9kZS5pbnN0YW5jZS5kb21cblx0XHRcdHZub2RlLmRvbVNpemUgPSB2bm9kZS5kb20gIT0gbnVsbCA/IHZub2RlLmluc3RhbmNlLmRvbVNpemUgOiAwXG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0dm5vZGUuZG9tU2l6ZSA9IDBcblx0XHR9XG5cdH1cblxuXHQvL3VwZGF0ZVxuXHQvKipcblx0ICogQHBhcmFtIHtFbGVtZW50fEZyYWdtZW50fSBwYXJlbnQgLSB0aGUgcGFyZW50IGVsZW1lbnRcblx0ICogQHBhcmFtIHtWbm9kZVtdIHwgbnVsbH0gb2xkIC0gdGhlIGxpc3Qgb2Ygdm5vZGVzIG9mIHRoZSBsYXN0IGByZW5kZXIoKWAgY2FsbCBmb3Jcblx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBwYXJ0IG9mIHRoZSB0cmVlXG5cdCAqIEBwYXJhbSB7Vm5vZGVbXSB8IG51bGx9IHZub2RlcyAtIGFzIGFib3ZlLCBidXQgZm9yIHRoZSBjdXJyZW50IGByZW5kZXIoKWAgY2FsbC5cblx0ICogQHBhcmFtIHtGdW5jdGlvbltdfSBob29rcyAtIGFuIGFjY3VtdWxhdG9yIG9mIHBvc3QtcmVuZGVyIGhvb2tzIChvbmNyZWF0ZS9vbnVwZGF0ZSlcblx0ICogQHBhcmFtIHtFbGVtZW50IHwgbnVsbH0gbmV4dFNpYmxpbmcgLSB0aGUgbmV4dCBET00gbm9kZSBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYVxuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50IHRoYXQgaXMgbm90IHRoZSBsYXN0IGl0ZW0gaW4gaXRzXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XG5cdCAqIEBwYXJhbSB7J3N2ZycgfCAnbWF0aCcgfCBTdHJpbmcgfCBudWxsfSBucykgLSB0aGUgY3VycmVudCBYTUwgbmFtZXNwYWNlLCBpZiBhbnlcblx0ICogQHJldHVybnMgdm9pZFxuXHQgKi9cblx0Ly8gVGhpcyBmdW5jdGlvbiBkaWZmcyBhbmQgcGF0Y2hlcyBsaXN0cyBvZiB2bm9kZXMsIGJvdGgga2V5ZWQgYW5kIHVua2V5ZWQuXG5cdC8vXG5cdC8vIFdlIHdpbGw6XG5cdC8vXG5cdC8vIDEuIGRlc2NyaWJlIGl0cyBnZW5lcmFsIHN0cnVjdHVyZVxuXHQvLyAyLiBmb2N1cyBvbiB0aGUgZGlmZiBhbGdvcml0aG0gb3B0aW1pemF0aW9uc1xuXHQvLyAzLiBkaXNjdXNzIERPTSBub2RlIG9wZXJhdGlvbnMuXG5cblx0Ly8gIyMgT3ZlcnZpZXc6XG5cdC8vXG5cdC8vIFRoZSB1cGRhdGVOb2RlcygpIGZ1bmN0aW9uOlxuXHQvLyAtIGRlYWxzIHdpdGggdHJpdmlhbCBjYXNlc1xuXHQvLyAtIGRldGVybWluZXMgd2hldGhlciB0aGUgbGlzdHMgYXJlIGtleWVkIG9yIHVua2V5ZWQgYmFzZWQgb24gdGhlIGZpcnN0IG5vbi1udWxsIG5vZGVcblx0Ly8gICBvZiBlYWNoIGxpc3QuXG5cdC8vIC0gZGlmZnMgdGhlbSBhbmQgcGF0Y2hlcyB0aGUgRE9NIGlmIG5lZWRlZCAodGhhdCdzIHRoZSBicnVudCBvZiB0aGUgY29kZSlcblx0Ly8gLSBtYW5hZ2VzIHRoZSBsZWZ0b3ZlcnM6IGFmdGVyIGRpZmZpbmcsIGFyZSB0aGVyZTpcblx0Ly8gICAtIG9sZCBub2RlcyBsZWZ0IHRvIHJlbW92ZT9cblx0Ly8gXHQgLSBuZXcgbm9kZXMgdG8gaW5zZXJ0P1xuXHQvLyBcdCBkZWFsIHdpdGggdGhlbSFcblx0Ly9cblx0Ly8gVGhlIGxpc3RzIGFyZSBvbmx5IGl0ZXJhdGVkIG92ZXIgb25jZSwgd2l0aCBhbiBleGNlcHRpb24gZm9yIHRoZSBub2RlcyBpbiBgb2xkYCB0aGF0XG5cdC8vIGFyZSB2aXNpdGVkIGluIHRoZSBmb3VydGggcGFydCBvZiB0aGUgZGlmZiBhbmQgaW4gdGhlIGByZW1vdmVOb2Rlc2AgbG9vcC5cblxuXHQvLyAjIyBEaWZmaW5nXG5cdC8vXG5cdC8vIFJlYWRpbmcgaHR0cHM6Ly9naXRodWIuY29tL2xvY2Fsdm9pZC9pdmkvYmxvYi9kZGMwOWQwNmFiYWVmNDUyNDhlNjEzM2Y3MDQwZDAwZDNjNmJlODUzL3BhY2thZ2VzL2l2aS9zcmMvdmRvbS9pbXBsZW1lbnRhdGlvbi50cyNMNjE3LUw4Mzdcblx0Ly8gbWF5IGJlIGdvb2QgZm9yIGNvbnRleHQgb24gbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlLWJhc2VkIGxvZ2ljIGZvciBtb3Zpbmcgbm9kZXMuXG5cdC8vXG5cdC8vIEluIG9yZGVyIHRvIGRpZmYga2V5ZWQgbGlzdHMsIG9uZSBoYXMgdG9cblx0Ly9cblx0Ly8gMSkgbWF0Y2ggbm9kZXMgaW4gYm90aCBsaXN0cywgcGVyIGtleSwgYW5kIHVwZGF0ZSB0aGVtIGFjY29yZGluZ2x5XG5cdC8vIDIpIGNyZWF0ZSB0aGUgbm9kZXMgcHJlc2VudCBpbiB0aGUgbmV3IGxpc3QsIGJ1dCBhYnNlbnQgaW4gdGhlIG9sZCBvbmVcblx0Ly8gMykgcmVtb3ZlIHRoZSBub2RlcyBwcmVzZW50IGluIHRoZSBvbGQgbGlzdCwgYnV0IGFic2VudCBpbiB0aGUgbmV3IG9uZVxuXHQvLyA0KSBmaWd1cmUgb3V0IHdoYXQgbm9kZXMgaW4gMSkgdG8gbW92ZSBpbiBvcmRlciB0byBtaW5pbWl6ZSB0aGUgRE9NIG9wZXJhdGlvbnMuXG5cdC8vXG5cdC8vIFRvIGFjaGlldmUgMSkgb25lIGNhbiBjcmVhdGUgYSBkaWN0aW9uYXJ5IG9mIGtleXMgPT4gaW5kZXggKGZvciB0aGUgb2xkIGxpc3QpLCB0aGVuIGl0ZXJhdGVcblx0Ly8gb3ZlciB0aGUgbmV3IGxpc3QgYW5kIGZvciBlYWNoIG5ldyB2bm9kZSwgZmluZCB0aGUgY29ycmVzcG9uZGluZyB2bm9kZSBpbiB0aGUgb2xkIGxpc3QgdXNpbmdcblx0Ly8gdGhlIG1hcC5cblx0Ly8gMikgaXMgYWNoaWV2ZWQgaW4gdGhlIHNhbWUgc3RlcDogaWYgYSBuZXcgbm9kZSBoYXMgbm8gY29ycmVzcG9uZGluZyBlbnRyeSBpbiB0aGUgbWFwLCBpdCBpcyBuZXdcblx0Ly8gYW5kIG11c3QgYmUgY3JlYXRlZC5cblx0Ly8gRm9yIHRoZSByZW1vdmFscywgd2UgYWN0dWFsbHkgcmVtb3ZlIHRoZSBub2RlcyB0aGF0IGhhdmUgYmVlbiB1cGRhdGVkIGZyb20gdGhlIG9sZCBsaXN0LlxuXHQvLyBUaGUgbm9kZXMgdGhhdCByZW1haW4gaW4gdGhhdCBsaXN0IGFmdGVyIDEpIGFuZCAyKSBoYXZlIGJlZW4gcGVyZm9ybWVkIGNhbiBiZSBzYWZlbHkgcmVtb3ZlZC5cblx0Ly8gVGhlIGZvdXJ0aCBzdGVwIGlzIGEgYml0IG1vcmUgY29tcGxleCBhbmQgcmVsaWVzIG9uIHRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2UgKExJUylcblx0Ly8gYWxnb3JpdGhtLlxuXHQvL1xuXHQvLyB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIGlzIHRoZSBsaXN0IG9mIG5vZGVzIHRoYXQgY2FuIHJlbWFpbiBpbiBwbGFjZS4gSW1hZ2luZSBnb2luZ1xuXHQvLyBmcm9tIGAxLDIsMyw0LDVgIHRvIGA0LDUsMSwyLDNgIHdoZXJlIHRoZSBudW1iZXJzIGFyZSBub3QgbmVjZXNzYXJpbHkgdGhlIGtleXMsIGJ1dCB0aGUgaW5kaWNlc1xuXHQvLyBjb3JyZXNwb25kaW5nIHRvIHRoZSBrZXllZCBub2RlcyBpbiB0aGUgb2xkIGxpc3QgKGtleWVkIG5vZGVzIGBlLGQsYyxiLGFgID0+IGBiLGEsZSxkLGNgIHdvdWxkXG5cdC8vICBtYXRjaCB0aGUgYWJvdmUgbGlzdHMsIGZvciBleGFtcGxlKS5cblx0Ly9cblx0Ly8gSW4gdGhlcmUgYXJlIHR3byBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlczogYDQsNWAgYW5kIGAxLDIsM2AsIHRoZSBsYXR0ZXIgYmVpbmcgdGhlIGxvbmdlc3QuIFdlXG5cdC8vIGNhbiB1cGRhdGUgdGhvc2Ugbm9kZXMgd2l0aG91dCBtb3ZpbmcgdGhlbSwgYW5kIG9ubHkgY2FsbCBgaW5zZXJ0Tm9kZWAgb24gYDRgIGFuZCBgNWAuXG5cdC8vXG5cdC8vIEBsb2NhbHZvaWQgYWRhcHRlZCB0aGUgYWxnbyB0byBhbHNvIHN1cHBvcnQgbm9kZSBkZWxldGlvbnMgYW5kIGluc2VydGlvbnMgKHRoZSBgbGlzYCBpcyBhY3R1YWxseVxuXHQvLyB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlICpvZiBvbGQgbm9kZXMgc3RpbGwgcHJlc2VudCBpbiB0aGUgbmV3IGxpc3QqKS5cblx0Ly9cblx0Ly8gSXQgaXMgYSBnZW5lcmFsIGFsZ29yaXRobSB0aGF0IGlzIGZpcmVwcm9vZiBpbiBhbGwgY2lyY3Vtc3RhbmNlcywgYnV0IGl0IHJlcXVpcmVzIHRoZSBhbGxvY2F0aW9uXG5cdC8vIGFuZCB0aGUgY29uc3RydWN0aW9uIG9mIGEgYGtleSA9PiBvbGRJbmRleGAgbWFwLCBhbmQgdGhyZWUgYXJyYXlzIChvbmUgd2l0aCBgbmV3SW5kZXggPT4gb2xkSW5kZXhgLFxuXHQvLyB0aGUgYExJU2AgYW5kIGEgdGVtcG9yYXJ5IG9uZSB0byBjcmVhdGUgdGhlIExJUykuXG5cdC8vXG5cdC8vIFNvIHdlIGNoZWF0IHdoZXJlIHdlIGNhbjogaWYgdGhlIHRhaWxzIG9mIHRoZSBsaXN0cyBhcmUgaWRlbnRpY2FsLCB0aGV5IGFyZSBndWFyYW50ZWVkIHRvIGJlIHBhcnQgb2Zcblx0Ly8gdGhlIExJUyBhbmQgY2FuIGJlIHVwZGF0ZWQgd2l0aG91dCBtb3ZpbmcgdGhlbS5cblx0Ly9cblx0Ly8gSWYgdHdvIG5vZGVzIGFyZSBzd2FwcGVkLCB0aGV5IGFyZSBndWFyYW50ZWVkIG5vdCB0byBiZSBwYXJ0IG9mIHRoZSBMSVMsIGFuZCBtdXN0IGJlIG1vdmVkICh3aXRoXG5cdC8vIHRoZSBleGNlcHRpb24gb2YgdGhlIGxhc3Qgbm9kZSBpZiB0aGUgbGlzdCBpcyBmdWxseSByZXZlcnNlZCkuXG5cdC8vXG5cdC8vICMjIEZpbmRpbmcgdGhlIG5leHQgc2libGluZy5cblx0Ly9cblx0Ly8gYHVwZGF0ZU5vZGUoKWAgYW5kIGBjcmVhdGVOb2RlKClgIGV4cGVjdCBhIG5leHRTaWJsaW5nIHBhcmFtZXRlciB0byBwZXJmb3JtIERPTSBvcGVyYXRpb25zLlxuXHQvLyBXaGVuIHRoZSBsaXN0IGlzIGJlaW5nIHRyYXZlcnNlZCB0b3AtZG93biwgYXQgYW55IGluZGV4LCB0aGUgRE9NIG5vZGVzIHVwIHRvIHRoZSBwcmV2aW91c1xuXHQvLyB2bm9kZSByZWZsZWN0IHRoZSBjb250ZW50IG9mIHRoZSBuZXcgbGlzdCwgd2hlcmVhcyB0aGUgcmVzdCBvZiB0aGUgRE9NIG5vZGVzIHJlZmxlY3QgdGhlIG9sZFxuXHQvLyBsaXN0LiBUaGUgbmV4dCBzaWJsaW5nIG11c3QgYmUgbG9va2VkIGZvciBpbiB0aGUgb2xkIGxpc3QgdXNpbmcgYGdldE5leHRTaWJsaW5nKC4uLiBvbGRTdGFydCArIDEgLi4uKWAuXG5cdC8vXG5cdC8vIEluIHRoZSBvdGhlciBzY2VuYXJpb3MgKHN3YXBzLCB1cHdhcmRzIHRyYXZlcnNhbCwgbWFwLWJhc2VkIGRpZmYpLFxuXHQvLyB0aGUgbmV3IHZub2RlcyBsaXN0IGlzIHRyYXZlcnNlZCB1cHdhcmRzLiBUaGUgRE9NIG5vZGVzIGF0IHRoZSBib3R0b20gb2YgdGhlIGxpc3QgcmVmbGVjdCB0aGVcblx0Ly8gYm90dG9tIHBhcnQgb2YgdGhlIG5ldyB2bm9kZXMgbGlzdCwgYW5kIHdlIGNhbiB1c2UgdGhlIGB2LmRvbWAgIHZhbHVlIG9mIHRoZSBwcmV2aW91cyBub2RlXG5cdC8vIGFzIHRoZSBuZXh0IHNpYmxpbmcgKGNhY2hlZCBpbiB0aGUgYG5leHRTaWJsaW5nYCB2YXJpYWJsZSkuXG5cblxuXHQvLyAjIyBET00gbm9kZSBtb3Zlc1xuXHQvL1xuXHQvLyBJbiBtb3N0IHNjZW5hcmlvcyBgdXBkYXRlTm9kZSgpYCBhbmQgYGNyZWF0ZU5vZGUoKWAgcGVyZm9ybSB0aGUgRE9NIG9wZXJhdGlvbnMuIEhvd2V2ZXIsXG5cdC8vIHRoaXMgaXMgbm90IHRoZSBjYXNlIGlmIHRoZSBub2RlIG1vdmVkIChzZWNvbmQgYW5kIGZvdXJ0aCBwYXJ0IG9mIHRoZSBkaWZmIGFsZ28pLiBXZSBtb3ZlXG5cdC8vIHRoZSBvbGQgRE9NIG5vZGVzIGJlZm9yZSB1cGRhdGVOb2RlIHJ1bnMgYmVjYXVzZSBpdCBlbmFibGVzIHVzIHRvIHVzZSB0aGUgY2FjaGVkIGBuZXh0U2libGluZ2Bcblx0Ly8gdmFyaWFibGUgcmF0aGVyIHRoYW4gZmV0Y2hpbmcgaXQgdXNpbmcgYGdldE5leHRTaWJsaW5nKClgLlxuXG5cdGZ1bmN0aW9uIHVwZGF0ZU5vZGVzKHBhcmVudCwgb2xkLCB2bm9kZXMsIGhvb2tzLCBuZXh0U2libGluZywgbnMpIHtcblx0XHRpZiAob2xkID09PSB2bm9kZXMgfHwgb2xkID09IG51bGwgJiYgdm5vZGVzID09IG51bGwpIHJldHVyblxuXHRcdGVsc2UgaWYgKG9sZCA9PSBudWxsIHx8IG9sZC5sZW5ndGggPT09IDApIGNyZWF0ZU5vZGVzKHBhcmVudCwgdm5vZGVzLCAwLCB2bm9kZXMubGVuZ3RoLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKVxuXHRcdGVsc2UgaWYgKHZub2RlcyA9PSBudWxsIHx8IHZub2Rlcy5sZW5ndGggPT09IDApIHJlbW92ZU5vZGVzKHBhcmVudCwgb2xkLCAwLCBvbGQubGVuZ3RoKVxuXHRcdGVsc2Uge1xuXHRcdFx0dmFyIGlzT2xkS2V5ZWQgPSBvbGRbMF0gIT0gbnVsbCAmJiBvbGRbMF0ua2V5ICE9IG51bGxcblx0XHRcdHZhciBpc0tleWVkID0gdm5vZGVzWzBdICE9IG51bGwgJiYgdm5vZGVzWzBdLmtleSAhPSBudWxsXG5cdFx0XHR2YXIgc3RhcnQgPSAwLCBvbGRTdGFydCA9IDBcblx0XHRcdGlmICghaXNPbGRLZXllZCkgd2hpbGUgKG9sZFN0YXJ0IDwgb2xkLmxlbmd0aCAmJiBvbGRbb2xkU3RhcnRdID09IG51bGwpIG9sZFN0YXJ0Kytcblx0XHRcdGlmICghaXNLZXllZCkgd2hpbGUgKHN0YXJ0IDwgdm5vZGVzLmxlbmd0aCAmJiB2bm9kZXNbc3RhcnRdID09IG51bGwpIHN0YXJ0Kytcblx0XHRcdGlmIChpc09sZEtleWVkICE9PSBpc0tleWVkKSB7XG5cdFx0XHRcdHJlbW92ZU5vZGVzKHBhcmVudCwgb2xkLCBvbGRTdGFydCwgb2xkLmxlbmd0aClcblx0XHRcdFx0Y3JlYXRlTm9kZXMocGFyZW50LCB2bm9kZXMsIHN0YXJ0LCB2bm9kZXMubGVuZ3RoLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKVxuXHRcdFx0fSBlbHNlIGlmICghaXNLZXllZCkge1xuXHRcdFx0XHQvLyBEb24ndCBpbmRleCBwYXN0IHRoZSBlbmQgb2YgZWl0aGVyIGxpc3QgKGNhdXNlcyBkZW9wdHMpLlxuXHRcdFx0XHR2YXIgY29tbW9uTGVuZ3RoID0gb2xkLmxlbmd0aCA8IHZub2Rlcy5sZW5ndGggPyBvbGQubGVuZ3RoIDogdm5vZGVzLmxlbmd0aFxuXHRcdFx0XHQvLyBSZXdpbmQgaWYgbmVjZXNzYXJ5IHRvIHRoZSBmaXJzdCBub24tbnVsbCBpbmRleCBvbiBlaXRoZXIgc2lkZS5cblx0XHRcdFx0Ly8gV2UgY291bGQgYWx0ZXJuYXRpdmVseSBlaXRoZXIgZXhwbGljaXRseSBjcmVhdGUgb3IgcmVtb3ZlIG5vZGVzIHdoZW4gYHN0YXJ0ICE9PSBvbGRTdGFydGBcblx0XHRcdFx0Ly8gYnV0IHRoYXQgd291bGQgYmUgb3B0aW1pemluZyBmb3Igc3BhcnNlIGxpc3RzIHdoaWNoIGFyZSBtb3JlIHJhcmUgdGhhbiBkZW5zZSBvbmVzLlxuXHRcdFx0XHRzdGFydCA9IHN0YXJ0IDwgb2xkU3RhcnQgPyBzdGFydCA6IG9sZFN0YXJ0XG5cdFx0XHRcdGZvciAoOyBzdGFydCA8IGNvbW1vbkxlbmd0aDsgc3RhcnQrKykge1xuXHRcdFx0XHRcdG8gPSBvbGRbc3RhcnRdXG5cdFx0XHRcdFx0diA9IHZub2Rlc1tzdGFydF1cblx0XHRcdFx0XHRpZiAobyA9PT0gdiB8fCBvID09IG51bGwgJiYgdiA9PSBudWxsKSBjb250aW51ZVxuXHRcdFx0XHRcdGVsc2UgaWYgKG8gPT0gbnVsbCkgY3JlYXRlTm9kZShwYXJlbnQsIHYsIGhvb2tzLCBucywgZ2V0TmV4dFNpYmxpbmcob2xkLCBzdGFydCArIDEsIG5leHRTaWJsaW5nKSlcblx0XHRcdFx0XHRlbHNlIGlmICh2ID09IG51bGwpIHJlbW92ZU5vZGUocGFyZW50LCBvKVxuXHRcdFx0XHRcdGVsc2UgdXBkYXRlTm9kZShwYXJlbnQsIG8sIHYsIGhvb2tzLCBnZXROZXh0U2libGluZyhvbGQsIHN0YXJ0ICsgMSwgbmV4dFNpYmxpbmcpLCBucylcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob2xkLmxlbmd0aCA+IGNvbW1vbkxlbmd0aCkgcmVtb3ZlTm9kZXMocGFyZW50LCBvbGQsIHN0YXJ0LCBvbGQubGVuZ3RoKVxuXHRcdFx0XHRpZiAodm5vZGVzLmxlbmd0aCA+IGNvbW1vbkxlbmd0aCkgY3JlYXRlTm9kZXMocGFyZW50LCB2bm9kZXMsIHN0YXJ0LCB2bm9kZXMubGVuZ3RoLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8ga2V5ZWQgZGlmZlxuXHRcdFx0XHR2YXIgb2xkRW5kID0gb2xkLmxlbmd0aCAtIDEsIGVuZCA9IHZub2Rlcy5sZW5ndGggLSAxLCBtYXAsIG8sIHYsIG9lLCB2ZSwgdG9wU2libGluZ1xuXG5cdFx0XHRcdC8vIGJvdHRvbS11cFxuXHRcdFx0XHR3aGlsZSAob2xkRW5kID49IG9sZFN0YXJ0ICYmIGVuZCA+PSBzdGFydCkge1xuXHRcdFx0XHRcdG9lID0gb2xkW29sZEVuZF1cblx0XHRcdFx0XHR2ZSA9IHZub2Rlc1tlbmRdXG5cdFx0XHRcdFx0aWYgKG9lLmtleSAhPT0gdmUua2V5KSBicmVha1xuXHRcdFx0XHRcdGlmIChvZSAhPT0gdmUpIHVwZGF0ZU5vZGUocGFyZW50LCBvZSwgdmUsIGhvb2tzLCBuZXh0U2libGluZywgbnMpXG5cdFx0XHRcdFx0aWYgKHZlLmRvbSAhPSBudWxsKSBuZXh0U2libGluZyA9IHZlLmRvbVxuXHRcdFx0XHRcdG9sZEVuZC0tLCBlbmQtLVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIHRvcC1kb3duXG5cdFx0XHRcdHdoaWxlIChvbGRFbmQgPj0gb2xkU3RhcnQgJiYgZW5kID49IHN0YXJ0KSB7XG5cdFx0XHRcdFx0byA9IG9sZFtvbGRTdGFydF1cblx0XHRcdFx0XHR2ID0gdm5vZGVzW3N0YXJ0XVxuXHRcdFx0XHRcdGlmIChvLmtleSAhPT0gdi5rZXkpIGJyZWFrXG5cdFx0XHRcdFx0b2xkU3RhcnQrKywgc3RhcnQrK1xuXHRcdFx0XHRcdGlmIChvICE9PSB2KSB1cGRhdGVOb2RlKHBhcmVudCwgbywgdiwgaG9va3MsIGdldE5leHRTaWJsaW5nKG9sZCwgb2xkU3RhcnQsIG5leHRTaWJsaW5nKSwgbnMpXG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gc3dhcHMgYW5kIGxpc3QgcmV2ZXJzYWxzXG5cdFx0XHRcdHdoaWxlIChvbGRFbmQgPj0gb2xkU3RhcnQgJiYgZW5kID49IHN0YXJ0KSB7XG5cdFx0XHRcdFx0aWYgKHN0YXJ0ID09PSBlbmQpIGJyZWFrXG5cdFx0XHRcdFx0aWYgKG8ua2V5ICE9PSB2ZS5rZXkgfHwgb2Uua2V5ICE9PSB2LmtleSkgYnJlYWtcblx0XHRcdFx0XHR0b3BTaWJsaW5nID0gZ2V0TmV4dFNpYmxpbmcob2xkLCBvbGRTdGFydCwgbmV4dFNpYmxpbmcpXG5cdFx0XHRcdFx0bW92ZURPTShwYXJlbnQsIG9lLCB0b3BTaWJsaW5nKVxuXHRcdFx0XHRcdGlmIChvZSAhPT0gdikgdXBkYXRlTm9kZShwYXJlbnQsIG9lLCB2LCBob29rcywgdG9wU2libGluZywgbnMpXG5cdFx0XHRcdFx0aWYgKCsrc3RhcnQgPD0gLS1lbmQpIG1vdmVET00ocGFyZW50LCBvLCBuZXh0U2libGluZylcblx0XHRcdFx0XHRpZiAobyAhPT0gdmUpIHVwZGF0ZU5vZGUocGFyZW50LCBvLCB2ZSwgaG9va3MsIG5leHRTaWJsaW5nLCBucylcblx0XHRcdFx0XHRpZiAodmUuZG9tICE9IG51bGwpIG5leHRTaWJsaW5nID0gdmUuZG9tXG5cdFx0XHRcdFx0b2xkU3RhcnQrKzsgb2xkRW5kLS1cblx0XHRcdFx0XHRvZSA9IG9sZFtvbGRFbmRdXG5cdFx0XHRcdFx0dmUgPSB2bm9kZXNbZW5kXVxuXHRcdFx0XHRcdG8gPSBvbGRbb2xkU3RhcnRdXG5cdFx0XHRcdFx0diA9IHZub2Rlc1tzdGFydF1cblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBib3R0b20gdXAgb25jZSBhZ2FpblxuXHRcdFx0XHR3aGlsZSAob2xkRW5kID49IG9sZFN0YXJ0ICYmIGVuZCA+PSBzdGFydCkge1xuXHRcdFx0XHRcdGlmIChvZS5rZXkgIT09IHZlLmtleSkgYnJlYWtcblx0XHRcdFx0XHRpZiAob2UgIT09IHZlKSB1cGRhdGVOb2RlKHBhcmVudCwgb2UsIHZlLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKVxuXHRcdFx0XHRcdGlmICh2ZS5kb20gIT0gbnVsbCkgbmV4dFNpYmxpbmcgPSB2ZS5kb21cblx0XHRcdFx0XHRvbGRFbmQtLSwgZW5kLS1cblx0XHRcdFx0XHRvZSA9IG9sZFtvbGRFbmRdXG5cdFx0XHRcdFx0dmUgPSB2bm9kZXNbZW5kXVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzdGFydCA+IGVuZCkgcmVtb3ZlTm9kZXMocGFyZW50LCBvbGQsIG9sZFN0YXJ0LCBvbGRFbmQgKyAxKVxuXHRcdFx0XHRlbHNlIGlmIChvbGRTdGFydCA+IG9sZEVuZCkgY3JlYXRlTm9kZXMocGFyZW50LCB2bm9kZXMsIHN0YXJ0LCBlbmQgKyAxLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHQvLyBpbnNwaXJlZCBieSBpdmkgaHR0cHM6Ly9naXRodWIuY29tL2l2aWpzL2l2aS8gYnkgQm9yaXMgS2F1bFxuXHRcdFx0XHRcdHZhciBvcmlnaW5hbE5leHRTaWJsaW5nID0gbmV4dFNpYmxpbmcsIHZub2Rlc0xlbmd0aCA9IGVuZCAtIHN0YXJ0ICsgMSwgb2xkSW5kaWNlcyA9IG5ldyBBcnJheSh2bm9kZXNMZW5ndGgpLCBsaT0wLCBpPTAsIHBvcyA9IDIxNDc0ODM2NDcsIG1hdGNoZWQgPSAwLCBtYXAsIGxpc0luZGljZXNcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgdm5vZGVzTGVuZ3RoOyBpKyspIG9sZEluZGljZXNbaV0gPSAtMVxuXHRcdFx0XHRcdGZvciAoaSA9IGVuZDsgaSA+PSBzdGFydDsgaS0tKSB7XG5cdFx0XHRcdFx0XHRpZiAobWFwID09IG51bGwpIG1hcCA9IGdldEtleU1hcChvbGQsIG9sZFN0YXJ0LCBvbGRFbmQgKyAxKVxuXHRcdFx0XHRcdFx0dmUgPSB2bm9kZXNbaV1cblx0XHRcdFx0XHRcdHZhciBvbGRJbmRleCA9IG1hcFt2ZS5rZXldXG5cdFx0XHRcdFx0XHRpZiAob2xkSW5kZXggIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRwb3MgPSAob2xkSW5kZXggPCBwb3MpID8gb2xkSW5kZXggOiAtMSAvLyBiZWNvbWVzIC0xIGlmIG5vZGVzIHdlcmUgcmUtb3JkZXJlZFxuXHRcdFx0XHRcdFx0XHRvbGRJbmRpY2VzW2ktc3RhcnRdID0gb2xkSW5kZXhcblx0XHRcdFx0XHRcdFx0b2UgPSBvbGRbb2xkSW5kZXhdXG5cdFx0XHRcdFx0XHRcdG9sZFtvbGRJbmRleF0gPSBudWxsXG5cdFx0XHRcdFx0XHRcdGlmIChvZSAhPT0gdmUpIHVwZGF0ZU5vZGUocGFyZW50LCBvZSwgdmUsIGhvb2tzLCBuZXh0U2libGluZywgbnMpXG5cdFx0XHRcdFx0XHRcdGlmICh2ZS5kb20gIT0gbnVsbCkgbmV4dFNpYmxpbmcgPSB2ZS5kb21cblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCsrXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5leHRTaWJsaW5nID0gb3JpZ2luYWxOZXh0U2libGluZ1xuXHRcdFx0XHRcdGlmIChtYXRjaGVkICE9PSBvbGRFbmQgLSBvbGRTdGFydCArIDEpIHJlbW92ZU5vZGVzKHBhcmVudCwgb2xkLCBvbGRTdGFydCwgb2xkRW5kICsgMSlcblx0XHRcdFx0XHRpZiAobWF0Y2hlZCA9PT0gMCkgY3JlYXRlTm9kZXMocGFyZW50LCB2bm9kZXMsIHN0YXJ0LCBlbmQgKyAxLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKVxuXHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKHBvcyA9PT0gLTEpIHtcblx0XHRcdFx0XHRcdFx0Ly8gdGhlIGluZGljZXMgb2YgdGhlIGluZGljZXMgb2YgdGhlIGl0ZW1zIHRoYXQgYXJlIHBhcnQgb2YgdGhlXG5cdFx0XHRcdFx0XHRcdC8vIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBpbiB0aGUgb2xkSW5kaWNlcyBsaXN0XG5cdFx0XHRcdFx0XHRcdGxpc0luZGljZXMgPSBtYWtlTGlzSW5kaWNlcyhvbGRJbmRpY2VzKVxuXHRcdFx0XHRcdFx0XHRsaSA9IGxpc0luZGljZXMubGVuZ3RoIC0gMVxuXHRcdFx0XHRcdFx0XHRmb3IgKGkgPSBlbmQ7IGkgPj0gc3RhcnQ7IGktLSkge1xuXHRcdFx0XHRcdFx0XHRcdHYgPSB2bm9kZXNbaV1cblx0XHRcdFx0XHRcdFx0XHRpZiAob2xkSW5kaWNlc1tpLXN0YXJ0XSA9PT0gLTEpIGNyZWF0ZU5vZGUocGFyZW50LCB2LCBob29rcywgbnMsIG5leHRTaWJsaW5nKVxuXHRcdFx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGxpc0luZGljZXNbbGldID09PSBpIC0gc3RhcnQpIGxpLS1cblx0XHRcdFx0XHRcdFx0XHRcdGVsc2UgbW92ZURPTShwYXJlbnQsIHYsIG5leHRTaWJsaW5nKVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZiAodi5kb20gIT0gbnVsbCkgbmV4dFNpYmxpbmcgPSB2bm9kZXNbaV0uZG9tXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoaSA9IGVuZDsgaSA+PSBzdGFydDsgaS0tKSB7XG5cdFx0XHRcdFx0XHRcdFx0diA9IHZub2Rlc1tpXVxuXHRcdFx0XHRcdFx0XHRcdGlmIChvbGRJbmRpY2VzW2ktc3RhcnRdID09PSAtMSkgY3JlYXRlTm9kZShwYXJlbnQsIHYsIGhvb2tzLCBucywgbmV4dFNpYmxpbmcpXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHYuZG9tICE9IG51bGwpIG5leHRTaWJsaW5nID0gdm5vZGVzW2ldLmRvbVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZU5vZGUocGFyZW50LCBvbGQsIHZub2RlLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKSB7XG5cdFx0dmFyIG9sZFRhZyA9IG9sZC50YWcsIHRhZyA9IHZub2RlLnRhZ1xuXHRcdGlmIChvbGRUYWcgPT09IHRhZyAmJiBvbGQuaXMgPT09IHZub2RlLmlzKSB7XG5cdFx0XHR2bm9kZS5zdGF0ZSA9IG9sZC5zdGF0ZVxuXHRcdFx0dm5vZGUuZXZlbnRzID0gb2xkLmV2ZW50c1xuXHRcdFx0aWYgKHNob3VsZE5vdFVwZGF0ZSh2bm9kZSwgb2xkKSkgcmV0dXJuXG5cdFx0XHRpZiAodHlwZW9mIG9sZFRhZyA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRpZiAodm5vZGUuYXR0cnMgIT0gbnVsbCkge1xuXHRcdFx0XHRcdHVwZGF0ZUxpZmVjeWNsZSh2bm9kZS5hdHRycywgdm5vZGUsIGhvb2tzKVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN3aXRjaCAob2xkVGFnKSB7XG5cdFx0XHRcdFx0Y2FzZSBcIiNcIjogdXBkYXRlVGV4dChvbGQsIHZub2RlKTsgYnJlYWtcblx0XHRcdFx0XHRjYXNlIFwiPFwiOiB1cGRhdGVIVE1MKHBhcmVudCwgb2xkLCB2bm9kZSwgbnMsIG5leHRTaWJsaW5nKTsgYnJlYWtcblx0XHRcdFx0XHRjYXNlIFwiW1wiOiB1cGRhdGVGcmFnbWVudChwYXJlbnQsIG9sZCwgdm5vZGUsIGhvb2tzLCBuZXh0U2libGluZywgbnMpOyBicmVha1xuXHRcdFx0XHRcdGRlZmF1bHQ6IHVwZGF0ZUVsZW1lbnQob2xkLCB2bm9kZSwgaG9va3MsIG5zKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHVwZGF0ZUNvbXBvbmVudChwYXJlbnQsIG9sZCwgdm5vZGUsIGhvb2tzLCBuZXh0U2libGluZywgbnMpXG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0cmVtb3ZlTm9kZShwYXJlbnQsIG9sZClcblx0XHRcdGNyZWF0ZU5vZGUocGFyZW50LCB2bm9kZSwgaG9va3MsIG5zLCBuZXh0U2libGluZylcblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlVGV4dChvbGQsIHZub2RlKSB7XG5cdFx0aWYgKG9sZC5jaGlsZHJlbi50b1N0cmluZygpICE9PSB2bm9kZS5jaGlsZHJlbi50b1N0cmluZygpKSB7XG5cdFx0XHRvbGQuZG9tLm5vZGVWYWx1ZSA9IHZub2RlLmNoaWxkcmVuXG5cdFx0fVxuXHRcdHZub2RlLmRvbSA9IG9sZC5kb21cblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVIVE1MKHBhcmVudCwgb2xkLCB2bm9kZSwgbnMsIG5leHRTaWJsaW5nKSB7XG5cdFx0aWYgKG9sZC5jaGlsZHJlbiAhPT0gdm5vZGUuY2hpbGRyZW4pIHtcblx0XHRcdHJlbW92ZURPTShwYXJlbnQsIG9sZClcblx0XHRcdGNyZWF0ZUhUTUwocGFyZW50LCB2bm9kZSwgbnMsIG5leHRTaWJsaW5nKVxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHZub2RlLmRvbSA9IG9sZC5kb21cblx0XHRcdHZub2RlLmRvbVNpemUgPSBvbGQuZG9tU2l6ZVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVGcmFnbWVudChwYXJlbnQsIG9sZCwgdm5vZGUsIGhvb2tzLCBuZXh0U2libGluZywgbnMpIHtcblx0XHR1cGRhdGVOb2RlcyhwYXJlbnQsIG9sZC5jaGlsZHJlbiwgdm5vZGUuY2hpbGRyZW4sIGhvb2tzLCBuZXh0U2libGluZywgbnMpXG5cdFx0dmFyIGRvbVNpemUgPSAwLCBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuXG5cdFx0dm5vZGUuZG9tID0gbnVsbFxuXHRcdGlmIChjaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldXG5cdFx0XHRcdGlmIChjaGlsZCAhPSBudWxsICYmIGNoaWxkLmRvbSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aWYgKHZub2RlLmRvbSA9PSBudWxsKSB2bm9kZS5kb20gPSBjaGlsZC5kb21cblx0XHRcdFx0XHRkb21TaXplICs9IGNoaWxkLmRvbVNpemUgfHwgMVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9tU2l6ZSAhPT0gMSkgdm5vZGUuZG9tU2l6ZSA9IGRvbVNpemVcblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlRWxlbWVudChvbGQsIHZub2RlLCBob29rcywgbnMpIHtcblx0XHR2YXIgZWxlbWVudCA9IHZub2RlLmRvbSA9IG9sZC5kb21cblx0XHRucyA9IGdldE5hbWVTcGFjZSh2bm9kZSkgfHwgbnNcblxuXHRcdHVwZGF0ZUF0dHJzKHZub2RlLCBvbGQuYXR0cnMsIHZub2RlLmF0dHJzLCBucylcblx0XHRpZiAoIW1heWJlU2V0Q29udGVudEVkaXRhYmxlKHZub2RlKSkge1xuXHRcdFx0dXBkYXRlTm9kZXMoZWxlbWVudCwgb2xkLmNoaWxkcmVuLCB2bm9kZS5jaGlsZHJlbiwgaG9va3MsIG51bGwsIG5zKVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVDb21wb25lbnQocGFyZW50LCBvbGQsIHZub2RlLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKSB7XG5cdFx0dm5vZGUuaW5zdGFuY2UgPSBWbm9kZS5ub3JtYWxpemUoY2FsbEhvb2suY2FsbCh2bm9kZS5zdGF0ZS52aWV3LCB2bm9kZSkpXG5cdFx0aWYgKHZub2RlLmluc3RhbmNlID09PSB2bm9kZSkgdGhyb3cgRXJyb3IoXCJBIHZpZXcgY2Fubm90IHJldHVybiB0aGUgdm5vZGUgaXQgcmVjZWl2ZWQgYXMgYXJndW1lbnRcIilcblx0XHR1cGRhdGVMaWZlY3ljbGUodm5vZGUuc3RhdGUsIHZub2RlLCBob29rcylcblx0XHRpZiAodm5vZGUuYXR0cnMgIT0gbnVsbCkgdXBkYXRlTGlmZWN5Y2xlKHZub2RlLmF0dHJzLCB2bm9kZSwgaG9va3MpXG5cdFx0aWYgKHZub2RlLmluc3RhbmNlICE9IG51bGwpIHtcblx0XHRcdGlmIChvbGQuaW5zdGFuY2UgPT0gbnVsbCkgY3JlYXRlTm9kZShwYXJlbnQsIHZub2RlLmluc3RhbmNlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKVxuXHRcdFx0ZWxzZSB1cGRhdGVOb2RlKHBhcmVudCwgb2xkLmluc3RhbmNlLCB2bm9kZS5pbnN0YW5jZSwgaG9va3MsIG5leHRTaWJsaW5nLCBucylcblx0XHRcdHZub2RlLmRvbSA9IHZub2RlLmluc3RhbmNlLmRvbVxuXHRcdFx0dm5vZGUuZG9tU2l6ZSA9IHZub2RlLmluc3RhbmNlLmRvbVNpemVcblx0XHR9XG5cdFx0ZWxzZSBpZiAob2xkLmluc3RhbmNlICE9IG51bGwpIHtcblx0XHRcdHJlbW92ZU5vZGUocGFyZW50LCBvbGQuaW5zdGFuY2UpXG5cdFx0XHR2bm9kZS5kb20gPSB1bmRlZmluZWRcblx0XHRcdHZub2RlLmRvbVNpemUgPSAwXG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0dm5vZGUuZG9tID0gb2xkLmRvbVxuXHRcdFx0dm5vZGUuZG9tU2l6ZSA9IG9sZC5kb21TaXplXG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIGdldEtleU1hcCh2bm9kZXMsIHN0YXJ0LCBlbmQpIHtcblx0XHR2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXHRcdGZvciAoOyBzdGFydCA8IGVuZDsgc3RhcnQrKykge1xuXHRcdFx0dmFyIHZub2RlID0gdm5vZGVzW3N0YXJ0XVxuXHRcdFx0aWYgKHZub2RlICE9IG51bGwpIHtcblx0XHRcdFx0dmFyIGtleSA9IHZub2RlLmtleVxuXHRcdFx0XHRpZiAoa2V5ICE9IG51bGwpIG1hcFtrZXldID0gc3RhcnRcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1hcFxuXHR9XG5cdC8vIExpZnRlZCBmcm9tIGl2aSBodHRwczovL2dpdGh1Yi5jb20vaXZpanMvaXZpL1xuXHQvLyB0YWtlcyBhIGxpc3Qgb2YgdW5pcXVlIG51bWJlcnMgKC0xIGlzIHNwZWNpYWwgYW5kIGNhblxuXHQvLyBvY2N1ciBtdWx0aXBsZSB0aW1lcykgYW5kIHJldHVybnMgYW4gYXJyYXkgd2l0aCB0aGUgaW5kaWNlc1xuXHQvLyBvZiB0aGUgaXRlbXMgdGhhdCBhcmUgcGFydCBvZiB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nXG5cdC8vIHN1YnNlcXVlbmNlXG5cdHZhciBsaXNUZW1wID0gW11cblx0ZnVuY3Rpb24gbWFrZUxpc0luZGljZXMoYSkge1xuXHRcdHZhciByZXN1bHQgPSBbMF1cblx0XHR2YXIgdSA9IDAsIHYgPSAwLCBpID0gMFxuXHRcdHZhciBpbCA9IGxpc1RlbXAubGVuZ3RoID0gYS5sZW5ndGhcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGlsOyBpKyspIGxpc1RlbXBbaV0gPSBhW2ldXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBpbDsgKytpKSB7XG5cdFx0XHRpZiAoYVtpXSA9PT0gLTEpIGNvbnRpbnVlXG5cdFx0XHR2YXIgaiA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV1cblx0XHRcdGlmIChhW2pdIDwgYVtpXSkge1xuXHRcdFx0XHRsaXNUZW1wW2ldID0galxuXHRcdFx0XHRyZXN1bHQucHVzaChpKVxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0fVxuXHRcdFx0dSA9IDBcblx0XHRcdHYgPSByZXN1bHQubGVuZ3RoIC0gMVxuXHRcdFx0d2hpbGUgKHUgPCB2KSB7XG5cdFx0XHRcdC8vIEZhc3QgaW50ZWdlciBhdmVyYWdlIHdpdGhvdXQgb3ZlcmZsb3cuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG5cdFx0XHRcdHZhciBjID0gKHUgPj4+IDEpICsgKHYgPj4+IDEpICsgKHUgJiB2ICYgMSlcblx0XHRcdFx0aWYgKGFbcmVzdWx0W2NdXSA8IGFbaV0pIHtcblx0XHRcdFx0XHR1ID0gYyArIDFcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHR2ID0gY1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoYVtpXSA8IGFbcmVzdWx0W3VdXSkge1xuXHRcdFx0XHRpZiAodSA+IDApIGxpc1RlbXBbaV0gPSByZXN1bHRbdSAtIDFdXG5cdFx0XHRcdHJlc3VsdFt1XSA9IGlcblx0XHRcdH1cblx0XHR9XG5cdFx0dSA9IHJlc3VsdC5sZW5ndGhcblx0XHR2ID0gcmVzdWx0W3UgLSAxXVxuXHRcdHdoaWxlICh1LS0gPiAwKSB7XG5cdFx0XHRyZXN1bHRbdV0gPSB2XG5cdFx0XHR2ID0gbGlzVGVtcFt2XVxuXHRcdH1cblx0XHRsaXNUZW1wLmxlbmd0aCA9IDBcblx0XHRyZXR1cm4gcmVzdWx0XG5cdH1cblxuXHRmdW5jdGlvbiBnZXROZXh0U2libGluZyh2bm9kZXMsIGksIG5leHRTaWJsaW5nKSB7XG5cdFx0Zm9yICg7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICh2bm9kZXNbaV0gIT0gbnVsbCAmJiB2bm9kZXNbaV0uZG9tICE9IG51bGwpIHJldHVybiB2bm9kZXNbaV0uZG9tXG5cdFx0fVxuXHRcdHJldHVybiBuZXh0U2libGluZ1xuXHR9XG5cblx0Ly8gVGhpcyBoYW5kbGVzIGZyYWdtZW50cyB3aXRoIHpvbWJpZSBjaGlsZHJlbiAocmVtb3ZlZCBmcm9tIHZkb20sIGJ1dCBwZXJzaXN0ZWQgaW4gRE9NIHRocm91Z2ggb25iZWZvcmVyZW1vdmUpXG5cdGZ1bmN0aW9uIG1vdmVET00ocGFyZW50LCB2bm9kZSwgbmV4dFNpYmxpbmcpIHtcblx0XHRpZiAodm5vZGUuZG9tICE9IG51bGwpIHtcblx0XHRcdHZhciB0YXJnZXRcblx0XHRcdGlmICh2bm9kZS5kb21TaXplID09IG51bGwpIHtcblx0XHRcdFx0Ly8gZG9uJ3QgYWxsb2NhdGUgZm9yIHRoZSBjb21tb24gY2FzZVxuXHRcdFx0XHR0YXJnZXQgPSB2bm9kZS5kb21cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRhcmdldCA9IGdldERvY3VtZW50KHBhcmVudCkuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG5cdFx0XHRcdGZvciAodmFyIGRvbSBvZiBkb21Gb3Iodm5vZGUpKSB0YXJnZXQuYXBwZW5kQ2hpbGQoZG9tKVxuXHRcdFx0fVxuXHRcdFx0aW5zZXJ0RE9NKHBhcmVudCwgdGFyZ2V0LCBuZXh0U2libGluZylcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBpbnNlcnRET00ocGFyZW50LCBkb20sIG5leHRTaWJsaW5nKSB7XG5cdFx0aWYgKG5leHRTaWJsaW5nICE9IG51bGwpIHBhcmVudC5pbnNlcnRCZWZvcmUoZG9tLCBuZXh0U2libGluZylcblx0XHRlbHNlIHBhcmVudC5hcHBlbmRDaGlsZChkb20pXG5cdH1cblxuXHRmdW5jdGlvbiBtYXliZVNldENvbnRlbnRFZGl0YWJsZSh2bm9kZSkge1xuXHRcdGlmICh2bm9kZS5hdHRycyA9PSBudWxsIHx8IChcblx0XHRcdHZub2RlLmF0dHJzLmNvbnRlbnRlZGl0YWJsZSA9PSBudWxsICYmIC8vIGF0dHJpYnV0ZVxuXHRcdFx0dm5vZGUuYXR0cnMuY29udGVudEVkaXRhYmxlID09IG51bGwgLy8gcHJvcGVydHlcblx0XHQpKSByZXR1cm4gZmFsc2Vcblx0XHR2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlblxuXHRcdGlmIChjaGlsZHJlbiAhPSBudWxsICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBjaGlsZHJlblswXS50YWcgPT09IFwiPFwiKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNoaWxkcmVuWzBdLmNoaWxkcmVuXG5cdFx0XHRpZiAodm5vZGUuZG9tLmlubmVySFRNTCAhPT0gY29udGVudCkgdm5vZGUuZG9tLmlubmVySFRNTCA9IGNvbnRlbnRcblx0XHR9XG5cdFx0ZWxzZSBpZiAoY2hpbGRyZW4gIT0gbnVsbCAmJiBjaGlsZHJlbi5sZW5ndGggIT09IDApIHRocm93IG5ldyBFcnJvcihcIkNoaWxkIG5vZGUgb2YgYSBjb250ZW50ZWRpdGFibGUgbXVzdCBiZSB0cnVzdGVkLlwiKVxuXHRcdHJldHVybiB0cnVlXG5cdH1cblxuXHQvL3JlbW92ZVxuXHRmdW5jdGlvbiByZW1vdmVOb2RlcyhwYXJlbnQsIHZub2Rlcywgc3RhcnQsIGVuZCkge1xuXHRcdGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSsrKSB7XG5cdFx0XHR2YXIgdm5vZGUgPSB2bm9kZXNbaV1cblx0XHRcdGlmICh2bm9kZSAhPSBudWxsKSByZW1vdmVOb2RlKHBhcmVudCwgdm5vZGUpXG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIHRyeUJsb2NrUmVtb3ZlKHBhcmVudCwgdm5vZGUsIHNvdXJjZSwgY291bnRlcikge1xuXHRcdHZhciBvcmlnaW5hbCA9IHZub2RlLnN0YXRlXG5cdFx0dmFyIHJlc3VsdCA9IGNhbGxIb29rLmNhbGwoc291cmNlLm9uYmVmb3JlcmVtb3ZlLCB2bm9kZSlcblx0XHRpZiAocmVzdWx0ID09IG51bGwpIHJldHVyblxuXG5cdFx0dmFyIGdlbmVyYXRpb24gPSBjdXJyZW50UmVuZGVyXG5cdFx0Zm9yICh2YXIgZG9tIG9mIGRvbUZvcih2bm9kZSkpIGRlbGF5ZWRSZW1vdmFsLnNldChkb20sIGdlbmVyYXRpb24pXG5cdFx0Y291bnRlci52KytcblxuXHRcdFByb21pc2UucmVzb2x2ZShyZXN1bHQpLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuXHRcdFx0Y2hlY2tTdGF0ZSh2bm9kZSwgb3JpZ2luYWwpXG5cdFx0XHR0cnlSZXN1bWVSZW1vdmUocGFyZW50LCB2bm9kZSwgY291bnRlcilcblx0XHR9KVxuXHR9XG5cdGZ1bmN0aW9uIHRyeVJlc3VtZVJlbW92ZShwYXJlbnQsIHZub2RlLCBjb3VudGVyKSB7XG5cdFx0aWYgKC0tY291bnRlci52ID09PSAwKSB7XG5cdFx0XHRvbnJlbW92ZSh2bm9kZSlcblx0XHRcdHJlbW92ZURPTShwYXJlbnQsIHZub2RlKVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiByZW1vdmVOb2RlKHBhcmVudCwgdm5vZGUpIHtcblx0XHR2YXIgY291bnRlciA9IHt2OiAxfVxuXHRcdGlmICh0eXBlb2Ygdm5vZGUudGFnICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2bm9kZS5zdGF0ZS5vbmJlZm9yZXJlbW92ZSA9PT0gXCJmdW5jdGlvblwiKSB0cnlCbG9ja1JlbW92ZShwYXJlbnQsIHZub2RlLCB2bm9kZS5zdGF0ZSwgY291bnRlcilcblx0XHRpZiAodm5vZGUuYXR0cnMgJiYgdHlwZW9mIHZub2RlLmF0dHJzLm9uYmVmb3JlcmVtb3ZlID09PSBcImZ1bmN0aW9uXCIpIHRyeUJsb2NrUmVtb3ZlKHBhcmVudCwgdm5vZGUsIHZub2RlLmF0dHJzLCBjb3VudGVyKVxuXHRcdHRyeVJlc3VtZVJlbW92ZShwYXJlbnQsIHZub2RlLCBjb3VudGVyKVxuXHR9XG5cdGZ1bmN0aW9uIHJlbW92ZURPTShwYXJlbnQsIHZub2RlKSB7XG5cdFx0aWYgKHZub2RlLmRvbSA9PSBudWxsKSByZXR1cm5cblx0XHRpZiAodm5vZGUuZG9tU2l6ZSA9PSBudWxsKSB7XG5cdFx0XHRwYXJlbnQucmVtb3ZlQ2hpbGQodm5vZGUuZG9tKVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKHZhciBkb20gb2YgZG9tRm9yKHZub2RlKSkgcGFyZW50LnJlbW92ZUNoaWxkKGRvbSlcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBvbnJlbW92ZSh2bm9kZSkge1xuXHRcdGlmICh0eXBlb2Ygdm5vZGUudGFnICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2bm9kZS5zdGF0ZS5vbnJlbW92ZSA9PT0gXCJmdW5jdGlvblwiKSBjYWxsSG9vay5jYWxsKHZub2RlLnN0YXRlLm9ucmVtb3ZlLCB2bm9kZSlcblx0XHRpZiAodm5vZGUuYXR0cnMgJiYgdHlwZW9mIHZub2RlLmF0dHJzLm9ucmVtb3ZlID09PSBcImZ1bmN0aW9uXCIpIGNhbGxIb29rLmNhbGwodm5vZGUuYXR0cnMub25yZW1vdmUsIHZub2RlKVxuXHRcdGlmICh0eXBlb2Ygdm5vZGUudGFnICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRpZiAodm5vZGUuaW5zdGFuY2UgIT0gbnVsbCkgb25yZW1vdmUodm5vZGUuaW5zdGFuY2UpXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh2bm9kZS5ldmVudHMgIT0gbnVsbCkgdm5vZGUuZXZlbnRzLl8gPSBudWxsXG5cdFx0XHR2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlblxuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgY2hpbGQgPSBjaGlsZHJlbltpXVxuXHRcdFx0XHRcdGlmIChjaGlsZCAhPSBudWxsKSBvbnJlbW92ZShjaGlsZClcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vYXR0cnNcblx0ZnVuY3Rpb24gc2V0QXR0cnModm5vZGUsIGF0dHJzLCBucykge1xuXHRcdGZvciAodmFyIGtleSBpbiBhdHRycykge1xuXHRcdFx0c2V0QXR0cih2bm9kZSwga2V5LCBudWxsLCBhdHRyc1trZXldLCBucylcblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gc2V0QXR0cih2bm9kZSwga2V5LCBvbGQsIHZhbHVlLCBucykge1xuXHRcdGlmIChrZXkgPT09IFwia2V5XCIgfHwgdmFsdWUgPT0gbnVsbCB8fCBpc0xpZmVjeWNsZU1ldGhvZChrZXkpIHx8IChvbGQgPT09IHZhbHVlICYmICFpc0Zvcm1BdHRyaWJ1dGUodm5vZGUsIGtleSkpICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIikgcmV0dXJuXG5cdFx0aWYgKGtleVswXSA9PT0gXCJvXCIgJiYga2V5WzFdID09PSBcIm5cIikgcmV0dXJuIHVwZGF0ZUV2ZW50KHZub2RlLCBrZXksIHZhbHVlKVxuXHRcdGlmIChrZXkuc2xpY2UoMCwgNikgPT09IFwieGxpbms6XCIpIHZub2RlLmRvbS5zZXRBdHRyaWJ1dGVOUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwga2V5LnNsaWNlKDYpLCB2YWx1ZSlcblx0XHRlbHNlIGlmIChrZXkgPT09IFwic3R5bGVcIikgdXBkYXRlU3R5bGUodm5vZGUuZG9tLCBvbGQsIHZhbHVlKVxuXHRcdGVsc2UgaWYgKGhhc1Byb3BlcnR5S2V5KHZub2RlLCBrZXksIG5zKSkge1xuXHRcdFx0aWYgKGtleSA9PT0gXCJ2YWx1ZVwiKSB7XG5cdFx0XHRcdC8vIE9ubHkgZG8gdGhlIGNvZXJjaW9uIGlmIHdlJ3JlIGFjdHVhbGx5IGdvaW5nIHRvIGNoZWNrIHRoZSB2YWx1ZS5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8taW1wbGljaXQtY29lcmNpb24gKi9cblx0XHRcdFx0Ly9zZXR0aW5nIGlucHV0W3ZhbHVlXSB0byBzYW1lIHZhbHVlIGJ5IHR5cGluZyBvbiBmb2N1c2VkIGVsZW1lbnQgbW92ZXMgY3Vyc29yIHRvIGVuZCBpbiBDaHJvbWVcblx0XHRcdFx0Ly9zZXR0aW5nIGlucHV0W3R5cGU9ZmlsZV1bdmFsdWVdIHRvIHNhbWUgdmFsdWUgY2F1c2VzIGFuIGVycm9yIHRvIGJlIGdlbmVyYXRlZCBpZiBpdCdzIG5vbi1lbXB0eVxuXHRcdFx0XHQvL21pbmxlbmd0aC9tYXhsZW5ndGggdmFsaWRhdGlvbiBpc24ndCBwZXJmb3JtZWQgb24gc2NyaXB0LXNldCB2YWx1ZXMoIzIyNTYpXG5cdFx0XHRcdGlmICgodm5vZGUudGFnID09PSBcImlucHV0XCIgfHwgdm5vZGUudGFnID09PSBcInRleHRhcmVhXCIpICYmIHZub2RlLmRvbS52YWx1ZSA9PT0gXCJcIiArIHZhbHVlKSByZXR1cm5cblx0XHRcdFx0Ly9zZXR0aW5nIHNlbGVjdFt2YWx1ZV0gdG8gc2FtZSB2YWx1ZSB3aGlsZSBoYXZpbmcgc2VsZWN0IG9wZW4gYmxpbmtzIHNlbGVjdCBkcm9wZG93biBpbiBDaHJvbWVcblx0XHRcdFx0aWYgKHZub2RlLnRhZyA9PT0gXCJzZWxlY3RcIiAmJiBvbGQgIT09IG51bGwgJiYgdm5vZGUuZG9tLnZhbHVlID09PSBcIlwiICsgdmFsdWUpIHJldHVyblxuXHRcdFx0XHQvL3NldHRpbmcgb3B0aW9uW3ZhbHVlXSB0byBzYW1lIHZhbHVlIHdoaWxlIGhhdmluZyBzZWxlY3Qgb3BlbiBibGlua3Mgc2VsZWN0IGRyb3Bkb3duIGluIENocm9tZVxuXHRcdFx0XHRpZiAodm5vZGUudGFnID09PSBcIm9wdGlvblwiICYmIG9sZCAhPT0gbnVsbCAmJiB2bm9kZS5kb20udmFsdWUgPT09IFwiXCIgKyB2YWx1ZSkgcmV0dXJuXG5cdFx0XHRcdC8vc2V0dGluZyBpbnB1dFt0eXBlPWZpbGVdW3ZhbHVlXSB0byBkaWZmZXJlbnQgdmFsdWUgaXMgYW4gZXJyb3IgaWYgaXQncyBub24tZW1wdHlcblx0XHRcdFx0Ly8gTm90IGlkZWFsLCBidXQgaXQgYXQgbGVhc3Qgd29ya3MgYXJvdW5kIHRoZSBtb3N0IGNvbW1vbiBzb3VyY2Ugb2YgdW5jYXVnaHQgZXhjZXB0aW9ucyBmb3Igbm93LlxuXHRcdFx0XHRpZiAodm5vZGUudGFnID09PSBcImlucHV0XCIgJiYgdm5vZGUuYXR0cnMudHlwZSA9PT0gXCJmaWxlXCIgJiYgXCJcIiArIHZhbHVlICE9PSBcIlwiKSB7IGNvbnNvbGUuZXJyb3IoXCJgdmFsdWVgIGlzIHJlYWQtb25seSBvbiBmaWxlIGlucHV0cyFcIik7IHJldHVybiB9XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8taW1wbGljaXQtY29lcmNpb24gKi9cblx0XHRcdH1cblx0XHRcdC8vIElmIHlvdSBhc3NpZ24gYW4gaW5wdXQgdHlwZSB0aGF0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUgMTEgd2l0aCBhbiBhc3NpZ25tZW50IGV4cHJlc3Npb24sIGFuIGVycm9yIHdpbGwgb2NjdXIuXG5cdFx0XHRpZiAodm5vZGUudGFnID09PSBcImlucHV0XCIgJiYga2V5ID09PSBcInR5cGVcIikgdm5vZGUuZG9tLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuXHRcdFx0ZWxzZSB2bm9kZS5kb21ba2V5XSA9IHZhbHVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHRcdGlmICh2YWx1ZSkgdm5vZGUuZG9tLnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG5cdFx0XHRcdGVsc2Ugdm5vZGUuZG9tLnJlbW92ZUF0dHJpYnV0ZShrZXkpXG5cdFx0XHR9XG5cdFx0XHRlbHNlIHZub2RlLmRvbS5zZXRBdHRyaWJ1dGUoa2V5ID09PSBcImNsYXNzTmFtZVwiID8gXCJjbGFzc1wiIDoga2V5LCB2YWx1ZSlcblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gcmVtb3ZlQXR0cih2bm9kZSwga2V5LCBvbGQsIG5zKSB7XG5cdFx0aWYgKGtleSA9PT0gXCJrZXlcIiB8fCBvbGQgPT0gbnVsbCB8fCBpc0xpZmVjeWNsZU1ldGhvZChrZXkpKSByZXR1cm5cblx0XHRpZiAoa2V5WzBdID09PSBcIm9cIiAmJiBrZXlbMV0gPT09IFwiblwiKSB1cGRhdGVFdmVudCh2bm9kZSwga2V5LCB1bmRlZmluZWQpXG5cdFx0ZWxzZSBpZiAoa2V5ID09PSBcInN0eWxlXCIpIHVwZGF0ZVN0eWxlKHZub2RlLmRvbSwgb2xkLCBudWxsKVxuXHRcdGVsc2UgaWYgKFxuXHRcdFx0aGFzUHJvcGVydHlLZXkodm5vZGUsIGtleSwgbnMpXG5cdFx0XHQmJiBrZXkgIT09IFwiY2xhc3NOYW1lXCJcblx0XHRcdCYmIGtleSAhPT0gXCJ0aXRsZVwiIC8vIGNyZWF0ZXMgXCJudWxsXCIgYXMgdGl0bGVcblx0XHRcdCYmICEoa2V5ID09PSBcInZhbHVlXCIgJiYgKFxuXHRcdFx0XHR2bm9kZS50YWcgPT09IFwib3B0aW9uXCJcblx0XHRcdFx0fHwgdm5vZGUudGFnID09PSBcInNlbGVjdFwiICYmIHZub2RlLmRvbS5zZWxlY3RlZEluZGV4ID09PSAtMSAmJiB2bm9kZS5kb20gPT09IGFjdGl2ZUVsZW1lbnQodm5vZGUuZG9tKVxuXHRcdFx0KSlcblx0XHRcdCYmICEodm5vZGUudGFnID09PSBcImlucHV0XCIgJiYga2V5ID09PSBcInR5cGVcIilcblx0XHQpIHtcblx0XHRcdHZub2RlLmRvbVtrZXldID0gbnVsbFxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgbnNMYXN0SW5kZXggPSBrZXkuaW5kZXhPZihcIjpcIilcblx0XHRcdGlmIChuc0xhc3RJbmRleCAhPT0gLTEpIGtleSA9IGtleS5zbGljZShuc0xhc3RJbmRleCArIDEpXG5cdFx0XHRpZiAob2xkICE9PSBmYWxzZSkgdm5vZGUuZG9tLnJlbW92ZUF0dHJpYnV0ZShrZXkgPT09IFwiY2xhc3NOYW1lXCIgPyBcImNsYXNzXCIgOiBrZXkpXG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIHNldExhdGVTZWxlY3RBdHRycyh2bm9kZSwgYXR0cnMpIHtcblx0XHRpZiAoXCJ2YWx1ZVwiIGluIGF0dHJzKSB7XG5cdFx0XHRpZihhdHRycy52YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRpZiAodm5vZGUuZG9tLnNlbGVjdGVkSW5kZXggIT09IC0xKSB2bm9kZS5kb20udmFsdWUgPSBudWxsXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgbm9ybWFsaXplZCA9IFwiXCIgKyBhdHRycy52YWx1ZSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWltcGxpY2l0LWNvZXJjaW9uXG5cdFx0XHRcdGlmICh2bm9kZS5kb20udmFsdWUgIT09IG5vcm1hbGl6ZWQgfHwgdm5vZGUuZG9tLnNlbGVjdGVkSW5kZXggPT09IC0xKSB7XG5cdFx0XHRcdFx0dm5vZGUuZG9tLnZhbHVlID0gbm9ybWFsaXplZFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChcInNlbGVjdGVkSW5kZXhcIiBpbiBhdHRycykgc2V0QXR0cih2bm9kZSwgXCJzZWxlY3RlZEluZGV4XCIsIG51bGwsIGF0dHJzLnNlbGVjdGVkSW5kZXgsIHVuZGVmaW5lZClcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVBdHRycyh2bm9kZSwgb2xkLCBhdHRycywgbnMpIHtcblx0XHQvLyBTb21lIGF0dHJpYnV0ZXMgbWF5IE5PVCBiZSBjYXNlLXNlbnNpdGl2ZSAoZS5nLiBkYXRhLSoqKiksXG5cdFx0Ly8gc28gcmVtb3ZhbCBzaG91bGQgYmUgZG9uZSBmaXJzdCB0byBwcmV2ZW50IGFjY2lkZW50YWwgcmVtb3ZhbCBmb3IgbmV3bHkgc2V0dGluZyB2YWx1ZXMuXG5cdFx0dmFyIHZhbFxuXHRcdGlmIChvbGQgIT0gbnVsbCkge1xuXHRcdFx0aWYgKG9sZCA9PT0gYXR0cnMpIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKFwiRG9uJ3QgcmV1c2UgYXR0cnMgb2JqZWN0LCB1c2UgbmV3IG9iamVjdCBmb3IgZXZlcnkgcmVkcmF3LCB0aGlzIHdpbGwgdGhyb3cgaW4gbmV4dCBtYWpvclwiKVxuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIga2V5IGluIG9sZCkge1xuXHRcdFx0XHRpZiAoKCh2YWwgPSBvbGRba2V5XSkgIT0gbnVsbCkgJiYgKGF0dHJzID09IG51bGwgfHwgYXR0cnNba2V5XSA9PSBudWxsKSkge1xuXHRcdFx0XHRcdHJlbW92ZUF0dHIodm5vZGUsIGtleSwgdmFsLCBucylcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoYXR0cnMgIT0gbnVsbCkge1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG5cdFx0XHRcdHNldEF0dHIodm5vZGUsIGtleSwgb2xkICYmIG9sZFtrZXldLCBhdHRyc1trZXldLCBucylcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gaXNGb3JtQXR0cmlidXRlKHZub2RlLCBhdHRyKSB7XG5cdFx0cmV0dXJuIGF0dHIgPT09IFwidmFsdWVcIiB8fCBhdHRyID09PSBcImNoZWNrZWRcIiB8fCBhdHRyID09PSBcInNlbGVjdGVkSW5kZXhcIiB8fCBhdHRyID09PSBcInNlbGVjdGVkXCIgJiYgKHZub2RlLmRvbSA9PT0gYWN0aXZlRWxlbWVudCh2bm9kZS5kb20pIHx8IHZub2RlLnRhZyA9PT0gXCJvcHRpb25cIiAmJiB2bm9kZS5kb20ucGFyZW50Tm9kZSA9PT0gYWN0aXZlRWxlbWVudCh2bm9kZS5kb20pKVxuXHR9XG5cdGZ1bmN0aW9uIGlzTGlmZWN5Y2xlTWV0aG9kKGF0dHIpIHtcblx0XHRyZXR1cm4gYXR0ciA9PT0gXCJvbmluaXRcIiB8fCBhdHRyID09PSBcIm9uY3JlYXRlXCIgfHwgYXR0ciA9PT0gXCJvbnVwZGF0ZVwiIHx8IGF0dHIgPT09IFwib25yZW1vdmVcIiB8fCBhdHRyID09PSBcIm9uYmVmb3JlcmVtb3ZlXCIgfHwgYXR0ciA9PT0gXCJvbmJlZm9yZXVwZGF0ZVwiXG5cdH1cblx0ZnVuY3Rpb24gaGFzUHJvcGVydHlLZXkodm5vZGUsIGtleSwgbnMpIHtcblx0XHQvLyBGaWx0ZXIgb3V0IG5hbWVzcGFjZWQga2V5c1xuXHRcdHJldHVybiBucyA9PT0gdW5kZWZpbmVkICYmIChcblx0XHRcdC8vIElmIGl0J3MgYSBjdXN0b20gZWxlbWVudCwganVzdCBrZWVwIGl0LlxuXHRcdFx0dm5vZGUudGFnLmluZGV4T2YoXCItXCIpID4gLTEgfHwgdm5vZGUuaXMgfHxcblx0XHRcdC8vIElmIGl0J3MgYSBub3JtYWwgZWxlbWVudCwgbGV0J3MgdHJ5IHRvIGF2b2lkIGEgZmV3IGJyb3dzZXIgYnVncy5cblx0XHRcdGtleSAhPT0gXCJocmVmXCIgJiYga2V5ICE9PSBcImxpc3RcIiAmJiBrZXkgIT09IFwiZm9ybVwiICYmIGtleSAhPT0gXCJ3aWR0aFwiICYmIGtleSAhPT0gXCJoZWlnaHRcIi8vICYmIGtleSAhPT0gXCJ0eXBlXCJcblx0XHRcdC8vIERlZmVyIHRoZSBwcm9wZXJ0eSBjaGVjayB1bnRpbCAqYWZ0ZXIqIHdlIGNoZWNrIGV2ZXJ5dGhpbmcuXG5cdFx0KSAmJiBrZXkgaW4gdm5vZGUuZG9tXG5cdH1cblxuXHQvL3N0eWxlXG5cdGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKGVsZW1lbnQsIG9sZCwgc3R5bGUpIHtcblx0XHRpZiAob2xkID09PSBzdHlsZSkge1xuXHRcdFx0Ly8gU3R5bGVzIGFyZSBlcXVpdmFsZW50LCBkbyBub3RoaW5nLlxuXHRcdH0gZWxzZSBpZiAoc3R5bGUgPT0gbnVsbCkge1xuXHRcdFx0Ly8gTmV3IHN0eWxlIGlzIG1pc3NpbmcsIGp1c3QgY2xlYXIgaXQuXG5cdFx0XHRlbGVtZW50LnN0eWxlID0gXCJcIlxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIHN0eWxlICE9PSBcIm9iamVjdFwiKSB7XG5cdFx0XHQvLyBOZXcgc3R5bGUgaXMgYSBzdHJpbmcsIGxldCBlbmdpbmUgZGVhbCB3aXRoIHBhdGNoaW5nLlxuXHRcdFx0ZWxlbWVudC5zdHlsZSA9IHN0eWxlXG5cdFx0fSBlbHNlIGlmIChvbGQgPT0gbnVsbCB8fCB0eXBlb2Ygb2xkICE9PSBcIm9iamVjdFwiKSB7XG5cdFx0XHQvLyBgb2xkYCBpcyBtaXNzaW5nIG9yIGEgc3RyaW5nLCBgc3R5bGVgIGlzIGFuIG9iamVjdC5cblx0XHRcdGVsZW1lbnQuc3R5bGUgPSBcIlwiXG5cdFx0XHQvLyBBZGQgbmV3IHN0eWxlIHByb3BlcnRpZXNcblx0XHRcdGZvciAodmFyIGtleSBpbiBzdHlsZSkge1xuXHRcdFx0XHR2YXIgdmFsdWUgPSBzdHlsZVtrZXldXG5cdFx0XHRcdGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aWYgKGtleS5pbmNsdWRlcyhcIi1cIikpIGVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCBTdHJpbmcodmFsdWUpKVxuXHRcdFx0XHRcdGVsc2UgZWxlbWVudC5zdHlsZVtrZXldID0gU3RyaW5nKHZhbHVlKVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEJvdGggb2xkICYgbmV3IGFyZSAoZGlmZmVyZW50KSBvYmplY3RzLlxuXHRcdFx0Ly8gUmVtb3ZlIHN0eWxlIHByb3BlcnRpZXMgdGhhdCBubyBsb25nZXIgZXhpc3Rcblx0XHRcdC8vIFN0eWxlIHByb3BlcnRpZXMgbWF5IGhhdmUgdHdvIGNhc2VzKGRhc2gtY2FzZSBhbmQgY2FtZWxDYXNlKSxcblx0XHRcdC8vIHNvIHJlbW92YWwgc2hvdWxkIGJlIGRvbmUgZmlyc3QgdG8gcHJldmVudCBhY2NpZGVudGFsIHJlbW92YWwgZm9yIG5ld2x5IHNldHRpbmcgdmFsdWVzLlxuXHRcdFx0Zm9yICh2YXIga2V5IGluIG9sZCkge1xuXHRcdFx0XHRpZiAob2xkW2tleV0gIT0gbnVsbCAmJiBzdHlsZVtrZXldID09IG51bGwpIHtcblx0XHRcdFx0XHRpZiAoa2V5LmluY2x1ZGVzKFwiLVwiKSkgZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShrZXkpXG5cdFx0XHRcdFx0ZWxzZSBlbGVtZW50LnN0eWxlW2tleV0gPSBcIlwiXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIFVwZGF0ZSBzdHlsZSBwcm9wZXJ0aWVzIHRoYXQgaGF2ZSBjaGFuZ2VkXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gc3R5bGUpIHtcblx0XHRcdFx0dmFyIHZhbHVlID0gc3R5bGVba2V5XVxuXHRcdFx0XHRpZiAodmFsdWUgIT0gbnVsbCAmJiAodmFsdWUgPSBTdHJpbmcodmFsdWUpKSAhPT0gU3RyaW5nKG9sZFtrZXldKSkge1xuXHRcdFx0XHRcdGlmIChrZXkuaW5jbHVkZXMoXCItXCIpKSBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpXG5cdFx0XHRcdFx0ZWxzZSBlbGVtZW50LnN0eWxlW2tleV0gPSB2YWx1ZVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gSGVyZSdzIGFuIGV4cGxhbmF0aW9uIG9mIGhvdyB0aGlzIHdvcmtzOlxuXHQvLyAxLiBUaGUgZXZlbnQgbmFtZXMgYXJlIGFsd2F5cyAoYnkgZGVzaWduKSBwcmVmaXhlZCBieSBgb25gLlxuXHQvLyAyLiBUaGUgRXZlbnRMaXN0ZW5lciBpbnRlcmZhY2UgYWNjZXB0cyBlaXRoZXIgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Rcblx0Ly8gICAgd2l0aCBhIGBoYW5kbGVFdmVudGAgbWV0aG9kLlxuXHQvLyAzLiBUaGUgb2JqZWN0IGRvZXMgbm90IGluaGVyaXQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAsIHRvIGF2b2lkXG5cdC8vICAgIGFueSBwb3RlbnRpYWwgaW50ZXJmZXJlbmNlIHdpdGggdGhhdCAoZS5nLiBzZXR0ZXJzKS5cblx0Ly8gNC4gVGhlIGV2ZW50IG5hbWUgaXMgcmVtYXBwZWQgdG8gdGhlIGhhbmRsZXIgYmVmb3JlIGNhbGxpbmcgaXQuXG5cdC8vIDUuIEluIGZ1bmN0aW9uLWJhc2VkIGV2ZW50IGhhbmRsZXJzLCBgZXYudGFyZ2V0ID09PSB0aGlzYC4gV2UgcmVwbGljYXRlXG5cdC8vICAgIHRoYXQgYmVsb3cuXG5cdC8vIDYuIEluIGZ1bmN0aW9uLWJhc2VkIGV2ZW50IGhhbmRsZXJzLCBgcmV0dXJuIGZhbHNlYCBwcmV2ZW50cyB0aGUgZGVmYXVsdFxuXHQvLyAgICBhY3Rpb24gYW5kIHN0b3BzIGV2ZW50IHByb3BhZ2F0aW9uLiBXZSByZXBsaWNhdGUgdGhhdCBiZWxvdy5cblx0ZnVuY3Rpb24gRXZlbnREaWN0KCkge1xuXHRcdC8vIFNhdmUgdGhpcywgc28gdGhlIGN1cnJlbnQgcmVkcmF3IGlzIGNvcnJlY3RseSB0cmFja2VkLlxuXHRcdHRoaXMuXyA9IGN1cnJlbnRSZWRyYXdcblx0fVxuXHRFdmVudERpY3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXHRFdmVudERpY3QucHJvdG90eXBlLmhhbmRsZUV2ZW50ID0gZnVuY3Rpb24gKGV2KSB7XG5cdFx0dmFyIGhhbmRsZXIgPSB0aGlzW1wib25cIiArIGV2LnR5cGVdXG5cdFx0dmFyIHJlc3VsdFxuXHRcdGlmICh0eXBlb2YgaGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSByZXN1bHQgPSBoYW5kbGVyLmNhbGwoZXYuY3VycmVudFRhcmdldCwgZXYpXG5cdFx0ZWxzZSBpZiAodHlwZW9mIGhhbmRsZXIuaGFuZGxlRXZlbnQgPT09IFwiZnVuY3Rpb25cIikgaGFuZGxlci5oYW5kbGVFdmVudChldilcblx0XHR2YXIgc2VsZiA9IHRoaXNcblx0XHRpZiAoc2VsZi5fICE9IG51bGwpIHtcblx0XHRcdGlmIChldi5yZWRyYXcgIT09IGZhbHNlKSAoMCwgc2VsZi5fKSgpXG5cdFx0XHRpZiAocmVzdWx0ICE9IG51bGwgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0UHJvbWlzZS5yZXNvbHZlKHJlc3VsdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0aWYgKHNlbGYuXyAhPSBudWxsICYmIGV2LnJlZHJhdyAhPT0gZmFsc2UpICgwLCBzZWxmLl8pKClcblx0XHRcdFx0fSlcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcblx0XHRcdGV2LnByZXZlbnREZWZhdWx0KClcblx0XHRcdGV2LnN0b3BQcm9wYWdhdGlvbigpXG5cdFx0fVxuXHR9XG5cblx0Ly9ldmVudFxuXHRmdW5jdGlvbiB1cGRhdGVFdmVudCh2bm9kZSwga2V5LCB2YWx1ZSkge1xuXHRcdGlmICh2bm9kZS5ldmVudHMgIT0gbnVsbCkge1xuXHRcdFx0dm5vZGUuZXZlbnRzLl8gPSBjdXJyZW50UmVkcmF3XG5cdFx0XHRpZiAodm5vZGUuZXZlbnRzW2tleV0gPT09IHZhbHVlKSByZXR1cm5cblx0XHRcdGlmICh2YWx1ZSAhPSBudWxsICYmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpKSB7XG5cdFx0XHRcdGlmICh2bm9kZS5ldmVudHNba2V5XSA9PSBudWxsKSB2bm9kZS5kb20uYWRkRXZlbnRMaXN0ZW5lcihrZXkuc2xpY2UoMiksIHZub2RlLmV2ZW50cywgZmFsc2UpXG5cdFx0XHRcdHZub2RlLmV2ZW50c1trZXldID0gdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmICh2bm9kZS5ldmVudHNba2V5XSAhPSBudWxsKSB2bm9kZS5kb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihrZXkuc2xpY2UoMiksIHZub2RlLmV2ZW50cywgZmFsc2UpXG5cdFx0XHRcdHZub2RlLmV2ZW50c1trZXldID0gdW5kZWZpbmVkXG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsICYmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpKSB7XG5cdFx0XHR2bm9kZS5ldmVudHMgPSBuZXcgRXZlbnREaWN0KClcblx0XHRcdHZub2RlLmRvbS5hZGRFdmVudExpc3RlbmVyKGtleS5zbGljZSgyKSwgdm5vZGUuZXZlbnRzLCBmYWxzZSlcblx0XHRcdHZub2RlLmV2ZW50c1trZXldID0gdmFsdWVcblx0XHR9XG5cdH1cblxuXHQvL2xpZmVjeWNsZVxuXHRmdW5jdGlvbiBpbml0TGlmZWN5Y2xlKHNvdXJjZSwgdm5vZGUsIGhvb2tzKSB7XG5cdFx0aWYgKHR5cGVvZiBzb3VyY2Uub25pbml0ID09PSBcImZ1bmN0aW9uXCIpIGNhbGxIb29rLmNhbGwoc291cmNlLm9uaW5pdCwgdm5vZGUpXG5cdFx0aWYgKHR5cGVvZiBzb3VyY2Uub25jcmVhdGUgPT09IFwiZnVuY3Rpb25cIikgaG9va3MucHVzaChjYWxsSG9vay5iaW5kKHNvdXJjZS5vbmNyZWF0ZSwgdm5vZGUpKVxuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZUxpZmVjeWNsZShzb3VyY2UsIHZub2RlLCBob29rcykge1xuXHRcdGlmICh0eXBlb2Ygc291cmNlLm9udXBkYXRlID09PSBcImZ1bmN0aW9uXCIpIGhvb2tzLnB1c2goY2FsbEhvb2suYmluZChzb3VyY2Uub251cGRhdGUsIHZub2RlKSlcblx0fVxuXHRmdW5jdGlvbiBzaG91bGROb3RVcGRhdGUodm5vZGUsIG9sZCkge1xuXHRcdGRvIHtcblx0XHRcdGlmICh2bm9kZS5hdHRycyAhPSBudWxsICYmIHR5cGVvZiB2bm9kZS5hdHRycy5vbmJlZm9yZXVwZGF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdHZhciBmb3JjZSA9IGNhbGxIb29rLmNhbGwodm5vZGUuYXR0cnMub25iZWZvcmV1cGRhdGUsIHZub2RlLCBvbGQpXG5cdFx0XHRcdGlmIChmb3JjZSAhPT0gdW5kZWZpbmVkICYmICFmb3JjZSkgYnJlYWtcblx0XHRcdH1cblx0XHRcdGlmICh0eXBlb2Ygdm5vZGUudGFnICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiB2bm9kZS5zdGF0ZS5vbmJlZm9yZXVwZGF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdHZhciBmb3JjZSA9IGNhbGxIb29rLmNhbGwodm5vZGUuc3RhdGUub25iZWZvcmV1cGRhdGUsIHZub2RlLCBvbGQpXG5cdFx0XHRcdGlmIChmb3JjZSAhPT0gdW5kZWZpbmVkICYmICFmb3JjZSkgYnJlYWtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZVxuXHRcdH0gd2hpbGUgKGZhbHNlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cblx0XHR2bm9kZS5kb20gPSBvbGQuZG9tXG5cdFx0dm5vZGUuZG9tU2l6ZSA9IG9sZC5kb21TaXplXG5cdFx0dm5vZGUuaW5zdGFuY2UgPSBvbGQuaW5zdGFuY2Vcblx0XHQvLyBPbmUgd291bGQgdGhpbmsgaGF2aW5nIHRoZSBhY3R1YWwgbGF0ZXN0IGF0dHJpYnV0ZXMgd291bGQgYmUgaWRlYWwsXG5cdFx0Ly8gYnV0IGl0IGRvZXNuJ3QgbGV0IHVzIHByb3Blcmx5IGRpZmYgYmFzZWQgb24gb3VyIGN1cnJlbnQgaW50ZXJuYWxcblx0XHQvLyByZXByZXNlbnRhdGlvbi4gV2UgaGF2ZSB0byBzYXZlIG5vdCBvbmx5IHRoZSBvbGQgRE9NIGluZm8sIGJ1dCBhbHNvXG5cdFx0Ly8gdGhlIGF0dHJpYnV0ZXMgdXNlZCB0byBjcmVhdGUgaXQsIGFzIHdlIGRpZmYgKnRoYXQqLCBub3QgYWdhaW5zdCB0aGVcblx0XHQvLyBET00gZGlyZWN0bHkgKHdpdGggYSBmZXcgZXhjZXB0aW9ucyBpbiBgc2V0QXR0cmApLiBBbmQsIG9mIGNvdXJzZSwgd2Vcblx0XHQvLyBuZWVkIHRvIHNhdmUgdGhlIGNoaWxkcmVuIGFuZCB0ZXh0IGFzIHRoZXkgYXJlIGNvbmNlcHR1YWxseSBub3Rcblx0XHQvLyB1bmxpa2Ugc3BlY2lhbCBcImF0dHJpYnV0ZXNcIiBpbnRlcm5hbGx5LlxuXHRcdHZub2RlLmF0dHJzID0gb2xkLmF0dHJzXG5cdFx0dm5vZGUuY2hpbGRyZW4gPSBvbGQuY2hpbGRyZW5cblx0XHR2bm9kZS50ZXh0ID0gb2xkLnRleHRcblx0XHRyZXR1cm4gdHJ1ZVxuXHR9XG5cblx0dmFyIGN1cnJlbnRET01cblxuXHRyZXR1cm4gZnVuY3Rpb24oZG9tLCB2bm9kZXMsIHJlZHJhdykge1xuXHRcdGlmICghZG9tKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRE9NIGVsZW1lbnQgYmVpbmcgcmVuZGVyZWQgdG8gZG9lcyBub3QgZXhpc3QuXCIpXG5cdFx0aWYgKGN1cnJlbnRET00gIT0gbnVsbCAmJiBkb20uY29udGFpbnMoY3VycmVudERPTSkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJOb2RlIGlzIGN1cnJlbnRseSBiZWluZyByZW5kZXJlZCB0byBhbmQgdGh1cyBpcyBsb2NrZWQuXCIpXG5cdFx0fVxuXHRcdHZhciBwcmV2UmVkcmF3ID0gY3VycmVudFJlZHJhd1xuXHRcdHZhciBwcmV2RE9NID0gY3VycmVudERPTVxuXHRcdHZhciBob29rcyA9IFtdXG5cdFx0dmFyIGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnQoZG9tKVxuXHRcdHZhciBuYW1lc3BhY2UgPSBkb20ubmFtZXNwYWNlVVJJXG5cblx0XHRjdXJyZW50RE9NID0gZG9tXG5cdFx0Y3VycmVudFJlZHJhdyA9IHR5cGVvZiByZWRyYXcgPT09IFwiZnVuY3Rpb25cIiA/IHJlZHJhdyA6IHVuZGVmaW5lZFxuXHRcdGN1cnJlbnRSZW5kZXIgPSB7fVxuXHRcdHRyeSB7XG5cdFx0XHQvLyBGaXJzdCB0aW1lIHJlbmRlcmluZyBpbnRvIGEgbm9kZSBjbGVhcnMgaXQgb3V0XG5cdFx0XHRpZiAoZG9tLnZub2RlcyA9PSBudWxsKSBkb20udGV4dENvbnRlbnQgPSBcIlwiXG5cdFx0XHR2bm9kZXMgPSBWbm9kZS5ub3JtYWxpemVDaGlsZHJlbihBcnJheS5pc0FycmF5KHZub2RlcykgPyB2bm9kZXMgOiBbdm5vZGVzXSlcblx0XHRcdHVwZGF0ZU5vZGVzKGRvbSwgZG9tLnZub2Rlcywgdm5vZGVzLCBob29rcywgbnVsbCwgbmFtZXNwYWNlID09PSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiA/IHVuZGVmaW5lZCA6IG5hbWVzcGFjZSlcblx0XHRcdGRvbS52bm9kZXMgPSB2bm9kZXNcblx0XHRcdC8vIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBjYW4gcmV0dXJuIG51bGw6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2ludGVyYWN0aW9uLmh0bWwjZG9tLWRvY3VtZW50LWFjdGl2ZWVsZW1lbnRcblx0XHRcdGlmIChhY3RpdmUgIT0gbnVsbCAmJiBhY3RpdmVFbGVtZW50KGRvbSkgIT09IGFjdGl2ZSAmJiB0eXBlb2YgYWN0aXZlLmZvY3VzID09PSBcImZ1bmN0aW9uXCIpIGFjdGl2ZS5mb2N1cygpXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSBob29rc1tpXSgpXG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdGN1cnJlbnRSZWRyYXcgPSBwcmV2UmVkcmF3XG5cdFx0XHRjdXJyZW50RE9NID0gcHJldkRPTVxuXHRcdH1cblx0fVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCJcblxuZnVuY3Rpb24gVm5vZGUodGFnLCBrZXksIGF0dHJzLCBjaGlsZHJlbiwgdGV4dCwgZG9tKSB7XG5cdHJldHVybiB7dGFnOiB0YWcsIGtleToga2V5LCBhdHRyczogYXR0cnMsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGV4dDogdGV4dCwgZG9tOiBkb20sIGlzOiB1bmRlZmluZWQsIGRvbVNpemU6IHVuZGVmaW5lZCwgc3RhdGU6IHVuZGVmaW5lZCwgZXZlbnRzOiB1bmRlZmluZWQsIGluc3RhbmNlOiB1bmRlZmluZWR9XG59XG5Wbm9kZS5ub3JtYWxpemUgPSBmdW5jdGlvbihub2RlKSB7XG5cdGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSByZXR1cm4gVm5vZGUoXCJbXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBWbm9kZS5ub3JtYWxpemVDaGlsZHJlbihub2RlKSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpXG5cdGlmIChub2RlID09IG51bGwgfHwgdHlwZW9mIG5vZGUgPT09IFwiYm9vbGVhblwiKSByZXR1cm4gbnVsbFxuXHRpZiAodHlwZW9mIG5vZGUgPT09IFwib2JqZWN0XCIpIHJldHVybiBub2RlXG5cdHJldHVybiBWbm9kZShcIiNcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyhub2RlKSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpXG59XG5Wbm9kZS5ub3JtYWxpemVDaGlsZHJlbiA9IGZ1bmN0aW9uKGlucHV0KSB7XG5cdHZhciBjaGlsZHJlbiA9IFtdXG5cdGlmIChpbnB1dC5sZW5ndGgpIHtcblx0XHR2YXIgaXNLZXllZCA9IGlucHV0WzBdICE9IG51bGwgJiYgaW5wdXRbMF0ua2V5ICE9IG51bGxcblx0XHQvLyBOb3RlOiB0aGlzIGlzIGEgKnZlcnkqIHBlcmYtc2Vuc2l0aXZlIGNoZWNrLlxuXHRcdC8vIEZ1biBmYWN0OiBtZXJnaW5nIHRoZSBsb29wIGxpa2UgdGhpcyBpcyBzb21laG93IGZhc3RlciB0aGFuIHNwbGl0dGluZ1xuXHRcdC8vIGl0LCBub3RpY2VhYmx5IHNvLlxuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICgoaW5wdXRbaV0gIT0gbnVsbCAmJiBpbnB1dFtpXS5rZXkgIT0gbnVsbCkgIT09IGlzS2V5ZWQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcblx0XHRcdFx0XHRpc0tleWVkICYmIChpbnB1dFtpXSAhPSBudWxsIHx8IHR5cGVvZiBpbnB1dFtpXSA9PT0gXCJib29sZWFuXCIpXG5cdFx0XHRcdFx0XHQ/IFwiSW4gZnJhZ21lbnRzLCB2bm9kZXMgbXVzdCBlaXRoZXIgYWxsIGhhdmUga2V5cyBvciBub25lIGhhdmUga2V5cy4gWW91IG1heSB3aXNoIHRvIGNvbnNpZGVyIHVzaW5nIGFuIGV4cGxpY2l0IGtleWVkIGVtcHR5IGZyYWdtZW50LCBtLmZyYWdtZW50KHtrZXk6IC4uLn0pLCBpbnN0ZWFkIG9mIGEgaG9sZS5cIlxuXHRcdFx0XHRcdFx0OiBcIkluIGZyYWdtZW50cywgdm5vZGVzIG11c3QgZWl0aGVyIGFsbCBoYXZlIGtleXMgb3Igbm9uZSBoYXZlIGtleXMuXCJcblx0XHRcdFx0KVxuXHRcdFx0fVxuXHRcdH1cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjaGlsZHJlbltpXSA9IFZub2RlLm5vcm1hbGl6ZShpbnB1dFtpXSlcblx0XHR9XG5cdH1cblx0cmV0dXJuIGNoaWxkcmVuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gVm5vZGVcbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBWbm9kZSA9IHJlcXVpcmUoXCIuLi9yZW5kZXIvdm5vZGVcIilcblxuLy8gQ2FsbCB2aWEgYGh5cGVyc2NyaXB0Vm5vZGUuYXBwbHkoc3RhcnRPZmZzZXQsIGFyZ3VtZW50cylgXG4vL1xuLy8gVGhlIHJlYXNvbiBJIGRvIGl0IHRoaXMgd2F5LCBmb3J3YXJkaW5nIHRoZSBhcmd1bWVudHMgYW5kIHBhc3NpbmcgdGhlIHN0YXJ0XG4vLyBvZmZzZXQgaW4gYHRoaXNgLCBpcyBzbyBJIGRvbid0IGhhdmUgdG8gY3JlYXRlIGEgdGVtcG9yYXJ5IGFycmF5IGluIGFcbi8vIHBlcmZvcm1hbmNlLWNyaXRpY2FsIHBhdGguXG4vL1xuLy8gSW4gbmF0aXZlIEVTNiwgSSdkIGluc3RlYWQgYWRkIGEgZmluYWwgYC4uLmFyZ3NgIHBhcmFtZXRlciB0byB0aGVcbi8vIGBoeXBlcnNjcmlwdGAgYW5kIGBmcmFnbWVudGAgZmFjdG9yaWVzIGFuZCBkZWZpbmUgdGhpcyBhc1xuLy8gYGh5cGVyc2NyaXB0Vm5vZGUoLi4uYXJncylgLCBzaW5jZSBtb2Rlcm4gZW5naW5lcyBkbyBvcHRpbWl6ZSB0aGF0IGF3YXkuIEJ1dFxuLy8gRVM1ICh3aGF0IE1pdGhyaWwuanMgcmVxdWlyZXMgdGhhbmtzIHRvIElFIHN1cHBvcnQpIGRvZXNuJ3QgZ2l2ZSBtZSB0aGF0IGx1eHVyeSxcbi8vIGFuZCBlbmdpbmVzIGFyZW4ndCBuZWFybHkgaW50ZWxsaWdlbnQgZW5vdWdoIHRvIGRvIGVpdGhlciBvZiB0aGVzZTpcbi8vXG4vLyAxLiBFbGlkZSB0aGUgYWxsb2NhdGlvbiBmb3IgYFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKWAgd2hlbiBpdCdzIHBhc3NlZCB0b1xuLy8gICAgYW5vdGhlciBmdW5jdGlvbiBvbmx5IHRvIGJlIGluZGV4ZWQuXG4vLyAyLiBFbGlkZSBhbiBgYXJndW1lbnRzYCBhbGxvY2F0aW9uIHdoZW4gaXQncyBwYXNzZWQgdG8gYW55IGZ1bmN0aW9uIG90aGVyXG4vLyAgICB0aGFuIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgIG9yIGBSZWZsZWN0LmFwcGx5YC5cbi8vXG4vLyBJbiBFUzYsIGl0J2QgcHJvYmFibHkgbG9vayBjbG9zZXIgdG8gdGhpcyAoSSdkIG5lZWQgdG8gcHJvZmlsZSBpdCwgdGhvdWdoKTpcbi8vIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXR0cnMsIC4uLmNoaWxkcmVuKSB7XG4vLyAgICAgaWYgKGF0dHJzID09IG51bGwgfHwgdHlwZW9mIGF0dHJzID09PSBcIm9iamVjdFwiICYmIGF0dHJzLnRhZyA9PSBudWxsICYmICFBcnJheS5pc0FycmF5KGF0dHJzKSkge1xuLy8gICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkoY2hpbGRyZW5bMF0pKSBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdXG4vLyAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5sZW5ndGggPT09IDAgJiYgQXJyYXkuaXNBcnJheShhdHRycykgPyBhdHRycyA6IFthdHRycywgLi4uY2hpbGRyZW5dXG4vLyAgICAgICAgIGF0dHJzID0gdW5kZWZpbmVkXG4vLyAgICAgfVxuLy9cbi8vICAgICBpZiAoYXR0cnMgPT0gbnVsbCkgYXR0cnMgPSB7fVxuLy8gICAgIHJldHVybiBWbm9kZShcIlwiLCBhdHRycy5rZXksIGF0dHJzLCBjaGlsZHJlbilcbi8vIH1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHZhciBhdHRycyA9IGFyZ3VtZW50c1t0aGlzXSwgc3RhcnQgPSB0aGlzICsgMSwgY2hpbGRyZW5cblxuXHRpZiAoYXR0cnMgPT0gbnVsbCkge1xuXHRcdGF0dHJzID0ge31cblx0fSBlbHNlIGlmICh0eXBlb2YgYXR0cnMgIT09IFwib2JqZWN0XCIgfHwgYXR0cnMudGFnICE9IG51bGwgfHwgQXJyYXkuaXNBcnJheShhdHRycykpIHtcblx0XHRhdHRycyA9IHt9XG5cdFx0c3RhcnQgPSB0aGlzXG5cdH1cblxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gc3RhcnQgKyAxKSB7XG5cdFx0Y2hpbGRyZW4gPSBhcmd1bWVudHNbc3RhcnRdXG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkgY2hpbGRyZW4gPSBbY2hpbGRyZW5dXG5cdH0gZWxzZSB7XG5cdFx0Y2hpbGRyZW4gPSBbXVxuXHRcdHdoaWxlIChzdGFydCA8IGFyZ3VtZW50cy5sZW5ndGgpIGNoaWxkcmVuLnB1c2goYXJndW1lbnRzW3N0YXJ0KytdKVxuXHR9XG5cblx0cmV0dXJuIFZub2RlKFwiXCIsIGF0dHJzLmtleSwgYXR0cnMsIGNoaWxkcmVuKVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIHJlbmRlciA9IHJlcXVpcmUoXCIuL3JlbmRlclwiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2FwaS9tb3VudC1yZWRyYXdcIikocmVuZGVyLCB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSBcInVuZGVmaW5lZFwiID8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lIDogbnVsbCwgdHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgPyBjb25zb2xlIDogbnVsbClcbiIsIlwidXNlIHN0cmljdFwiXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIikgcmV0dXJuIFwiXCJcblxuXHR2YXIgYXJncyA9IFtdXG5cdGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcblx0XHRkZXN0cnVjdHVyZShrZXksIG9iamVjdFtrZXldKVxuXHR9XG5cblx0cmV0dXJuIGFyZ3Muam9pbihcIiZcIilcblxuXHRmdW5jdGlvbiBkZXN0cnVjdHVyZShrZXksIHZhbHVlKSB7XG5cdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGRlc3RydWN0dXJlKGtleSArIFwiW1wiICsgaSArIFwiXVwiLCB2YWx1ZVtpXSlcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gXCJbb2JqZWN0IE9iamVjdF1cIikge1xuXHRcdFx0Zm9yICh2YXIgaSBpbiB2YWx1ZSkge1xuXHRcdFx0XHRkZXN0cnVjdHVyZShrZXkgKyBcIltcIiArIGkgKyBcIl1cIiwgdmFsdWVbaV0pXG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgYXJncy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgKHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09IFwiXCIgPyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkgOiBcIlwiKSlcblx0fVxufVxuIiwidmFyIG0gPSByZXF1aXJlKCdtaXRocmlsJyk7XG5tb2R1bGUuZXhwb3J0cyA9IG0udHJ1c3QoJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTcuNDEgNy44NEwxMiAxMi40Mmw0LjU5LTQuNThMMTggOS4yNWwtNiA2LTYtNnpcIi8+PC9zdmc+Jyk7XG4iLCJcInVzZSBzdHJpY3RcIlxuXG4vLyBOb3RlOiB0aGlzIGlzIG1pbGRseSBwZXJmLXNlbnNpdGl2ZS5cbi8vXG4vLyBJdCBkb2VzICpub3QqIHVzZSBgZGVsZXRlYCAtIGR5bmFtaWMgYGRlbGV0ZWBzIHVzdWFsbHkgY2F1c2Ugb2JqZWN0cyB0byBiYWlsXG4vLyBvdXQgaW50byBkaWN0aW9uYXJ5IG1vZGUgYW5kIGp1c3QgZ2VuZXJhbGx5IGNhdXNlIGEgYnVuY2ggb2Ygb3B0aW1pemF0aW9uXG4vLyBpc3N1ZXMgd2l0aGluIGVuZ2luZXMuXG4vL1xuLy8gSWRlYWxseSwgSSB3b3VsZCd2ZSBwcmVmZXJyZWQgdG8gZG8gdGhpcywgaWYgaXQgd2VyZW4ndCBmb3IgdGhlIG9wdGltaXphdGlvblxuLy8gaXNzdWVzOlxuLy9cbi8vIGBgYGpzXG4vLyBjb25zdCBoYXNPd24gPSByZXF1aXJlKFwiLi9oYXNPd25cIilcbi8vIGNvbnN0IG1hZ2ljID0gW1xuLy8gICAgIFwia2V5XCIsIFwib25pbml0XCIsIFwib25jcmVhdGVcIiwgXCJvbmJlZm9yZXVwZGF0ZVwiLCBcIm9udXBkYXRlXCIsXG4vLyAgICAgXCJvbmJlZm9yZXJlbW92ZVwiLCBcIm9ucmVtb3ZlXCIsXG4vLyBdXG4vLyBtb2R1bGUuZXhwb3J0cyA9IChhdHRycywgZXh0cmFzKSA9PiB7XG4vLyAgICAgY29uc3QgcmVzdWx0ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCBhdHRycylcbi8vICAgICBmb3IgKGNvbnN0IGtleSBvZiBtYWdpYykgZGVsZXRlIHJlc3VsdFtrZXldXG4vLyAgICAgaWYgKGV4dHJhcyAhPSBudWxsKSBmb3IgKGNvbnN0IGtleSBvZiBleHRyYXMpIGRlbGV0ZSByZXN1bHRba2V5XVxuLy8gICAgIHJldHVybiByZXN1bHRcbi8vIH1cbi8vIGBgYFxuXG52YXIgaGFzT3duID0gcmVxdWlyZShcIi4vaGFzT3duXCIpXG4vLyBXb3JkcyBpbiBSZWdFeHAgbGl0ZXJhbHMgYXJlIHNvbWV0aW1lcyBtYW5nbGVkIGluY29ycmVjdGx5IGJ5IHRoZSBpbnRlcm5hbCBidW5kbGVyLCBzbyB1c2UgUmVnRXhwKCkuXG52YXIgbWFnaWMgPSBuZXcgUmVnRXhwKFwiXig/OmtleXxvbmluaXR8b25jcmVhdGV8b25iZWZvcmV1cGRhdGV8b251cGRhdGV8b25iZWZvcmVyZW1vdmV8b25yZW1vdmUpJFwiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGF0dHJzLCBleHRyYXMpIHtcblx0dmFyIHJlc3VsdCA9IHt9XG5cblx0aWYgKGV4dHJhcyAhPSBudWxsKSB7XG5cdFx0Zm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG5cdFx0XHRpZiAoaGFzT3duLmNhbGwoYXR0cnMsIGtleSkgJiYgIW1hZ2ljLnRlc3Qoa2V5KSAmJiBleHRyYXMuaW5kZXhPZihrZXkpIDwgMCkge1xuXHRcdFx0XHRyZXN1bHRba2V5XSA9IGF0dHJzW2tleV1cblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Zm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG5cdFx0XHRpZiAoaGFzT3duLmNhbGwoYXR0cnMsIGtleSkgJiYgIW1hZ2ljLnRlc3Qoa2V5KSkge1xuXHRcdFx0XHRyZXN1bHRba2V5XSA9IGF0dHJzW2tleV1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0XG59XG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgYnVpbGRQYXRobmFtZSA9IHJlcXVpcmUoXCIuLi9wYXRobmFtZS9idWlsZFwiKVxudmFyIGhhc093biA9IHJlcXVpcmUoXCIuLi91dGlsL2hhc093blwiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCR3aW5kb3csIG9uY29tcGxldGlvbikge1xuXHRmdW5jdGlvbiBQcm9taXNlUHJveHkoZXhlY3V0b3IpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZXhlY3V0b3IpXG5cdH1cblxuXHRmdW5jdGlvbiBtYWtlUmVxdWVzdCh1cmwsIGFyZ3MpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHR1cmwgPSBidWlsZFBhdGhuYW1lKHVybCwgYXJncy5wYXJhbXMpXG5cdFx0XHR2YXIgbWV0aG9kID0gYXJncy5tZXRob2QgIT0gbnVsbCA/IGFyZ3MubWV0aG9kLnRvVXBwZXJDYXNlKCkgOiBcIkdFVFwiXG5cdFx0XHR2YXIgYm9keSA9IGFyZ3MuYm9keVxuXHRcdFx0dmFyIGFzc3VtZUpTT04gPSAoYXJncy5zZXJpYWxpemUgPT0gbnVsbCB8fCBhcmdzLnNlcmlhbGl6ZSA9PT0gSlNPTi5zZXJpYWxpemUpICYmICEoYm9keSBpbnN0YW5jZW9mICR3aW5kb3cuRm9ybURhdGEgfHwgYm9keSBpbnN0YW5jZW9mICR3aW5kb3cuVVJMU2VhcmNoUGFyYW1zKVxuXHRcdFx0dmFyIHJlc3BvbnNlVHlwZSA9IGFyZ3MucmVzcG9uc2VUeXBlIHx8ICh0eXBlb2YgYXJncy5leHRyYWN0ID09PSBcImZ1bmN0aW9uXCIgPyBcIlwiIDogXCJqc29uXCIpXG5cblx0XHRcdHZhciB4aHIgPSBuZXcgJHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpLCBhYm9ydGVkID0gZmFsc2UsIGlzVGltZW91dCA9IGZhbHNlXG5cdFx0XHR2YXIgb3JpZ2luYWwgPSB4aHIsIHJlcGxhY2VkQWJvcnRcblx0XHRcdHZhciBhYm9ydCA9IHhoci5hYm9ydFxuXG5cdFx0XHR4aHIuYWJvcnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0YWJvcnRlZCA9IHRydWVcblx0XHRcdFx0YWJvcnQuY2FsbCh0aGlzKVxuXHRcdFx0fVxuXG5cdFx0XHR4aHIub3BlbihtZXRob2QsIHVybCwgYXJncy5hc3luYyAhPT0gZmFsc2UsIHR5cGVvZiBhcmdzLnVzZXIgPT09IFwic3RyaW5nXCIgPyBhcmdzLnVzZXIgOiB1bmRlZmluZWQsIHR5cGVvZiBhcmdzLnBhc3N3b3JkID09PSBcInN0cmluZ1wiID8gYXJncy5wYXNzd29yZCA6IHVuZGVmaW5lZClcblxuXHRcdFx0aWYgKGFzc3VtZUpTT04gJiYgYm9keSAhPSBudWxsICYmICFoYXNIZWFkZXIoYXJncywgXCJjb250ZW50LXR5cGVcIikpIHtcblx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpXG5cdFx0XHR9XG5cdFx0XHRpZiAodHlwZW9mIGFyZ3MuZGVzZXJpYWxpemUgIT09IFwiZnVuY3Rpb25cIiAmJiAhaGFzSGVhZGVyKGFyZ3MsIFwiYWNjZXB0XCIpKSB7XG5cdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIsIFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC8qXCIpXG5cdFx0XHR9XG5cdFx0XHRpZiAoYXJncy53aXRoQ3JlZGVudGlhbHMpIHhoci53aXRoQ3JlZGVudGlhbHMgPSBhcmdzLndpdGhDcmVkZW50aWFsc1xuXHRcdFx0aWYgKGFyZ3MudGltZW91dCkgeGhyLnRpbWVvdXQgPSBhcmdzLnRpbWVvdXRcblx0XHRcdHhoci5yZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGVcblxuXHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZ3MuaGVhZGVycykge1xuXHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJncy5oZWFkZXJzLCBrZXkpKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBhcmdzLmhlYWRlcnNba2V5XSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oZXYpIHtcblx0XHRcdFx0Ly8gRG9uJ3QgdGhyb3cgZXJyb3JzIG9uIHhoci5hYm9ydCgpLlxuXHRcdFx0XHRpZiAoYWJvcnRlZCkgcmV0dXJuXG5cblx0XHRcdFx0aWYgKGV2LnRhcmdldC5yZWFkeVN0YXRlID09PSA0KSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHZhciBzdWNjZXNzID0gKGV2LnRhcmdldC5zdGF0dXMgPj0gMjAwICYmIGV2LnRhcmdldC5zdGF0dXMgPCAzMDApIHx8IGV2LnRhcmdldC5zdGF0dXMgPT09IDMwNCB8fCAoL15maWxlOlxcL1xcLy9pKS50ZXN0KHVybClcblx0XHRcdFx0XHRcdC8vIFdoZW4gdGhlIHJlc3BvbnNlIHR5cGUgaXNuJ3QgXCJcIiBvciBcInRleHRcIixcblx0XHRcdFx0XHRcdC8vIGB4aHIucmVzcG9uc2VUZXh0YCBpcyB0aGUgd3JvbmcgdGhpbmcgdG8gdXNlLlxuXHRcdFx0XHRcdFx0Ly8gQnJvd3NlcnMgZG8gdGhlIHJpZ2h0IHRoaW5nIGFuZCB0aHJvdyBoZXJlLCBhbmQgd2Vcblx0XHRcdFx0XHRcdC8vIHNob3VsZCBob25vciB0aGF0IGFuZCBkbyB0aGUgcmlnaHQgdGhpbmcgYnlcblx0XHRcdFx0XHRcdC8vIHByZWZlcnJpbmcgYHhoci5yZXNwb25zZWAgd2hlcmUgcG9zc2libGUvcHJhY3RpY2FsLlxuXHRcdFx0XHRcdFx0dmFyIHJlc3BvbnNlID0gZXYudGFyZ2V0LnJlc3BvbnNlLCBtZXNzYWdlXG5cblx0XHRcdFx0XHRcdGlmIChyZXNwb25zZVR5cGUgPT09IFwianNvblwiKSB7XG5cdFx0XHRcdFx0XHRcdC8vIEZvciBJRSBhbmQgRWRnZSwgd2hpY2ggZG9uJ3QgaW1wbGVtZW50XG5cdFx0XHRcdFx0XHRcdC8vIGByZXNwb25zZVR5cGU6IFwianNvblwiYC5cblx0XHRcdFx0XHRcdFx0aWYgKCFldi50YXJnZXQucmVzcG9uc2VUeXBlICYmIHR5cGVvZiBhcmdzLmV4dHJhY3QgIT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBuby1jb250ZW50IHdoaWNoIHdpbGwgbm90IHBhcnNlLlxuXHRcdFx0XHRcdFx0XHRcdHRyeSB7IHJlc3BvbnNlID0gSlNPTi5wYXJzZShldi50YXJnZXQucmVzcG9uc2VUZXh0KSB9XG5cdFx0XHRcdFx0XHRcdFx0Y2F0Y2ggKGUpIHsgcmVzcG9uc2UgPSBudWxsIH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICghcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gXCJ0ZXh0XCIpIHtcblx0XHRcdFx0XHRcdFx0Ly8gT25seSB1c2UgdGhpcyBkZWZhdWx0IGlmIGl0J3MgdGV4dC4gSWYgYSBwYXJzZWRcblx0XHRcdFx0XHRcdFx0Ly8gZG9jdW1lbnQgaXMgbmVlZGVkIG9uIG9sZCBJRSBhbmQgZnJpZW5kcyAoYWxsXG5cdFx0XHRcdFx0XHRcdC8vIHVuc3VwcG9ydGVkKSwgdGhlIHVzZXIgc2hvdWxkIHVzZSBhIGN1c3RvbVxuXHRcdFx0XHRcdFx0XHQvLyBgY29uZmlnYCBpbnN0ZWFkLiBUaGV5J3JlIGFscmVhZHkgdXNpbmcgdGhpcyBhdFxuXHRcdFx0XHRcdFx0XHQvLyB0aGVpciBvd24gcmlzay5cblx0XHRcdFx0XHRcdFx0aWYgKHJlc3BvbnNlID09IG51bGwpIHJlc3BvbnNlID0gZXYudGFyZ2V0LnJlc3BvbnNlVGV4dFxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGFyZ3MuZXh0cmFjdCA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gYXJncy5leHRyYWN0KGV2LnRhcmdldCwgYXJncylcblx0XHRcdFx0XHRcdFx0c3VjY2VzcyA9IHRydWVcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGFyZ3MuZGVzZXJpYWxpemUgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGFyZ3MuZGVzZXJpYWxpemUocmVzcG9uc2UpXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChzdWNjZXNzKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgYXJncy50eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShyZXNwb25zZSkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcmVzcG9uc2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VbaV0gPSBuZXcgYXJncy50eXBlKHJlc3BvbnNlW2ldKVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRlbHNlIHJlc3BvbnNlID0gbmV3IGFyZ3MudHlwZShyZXNwb25zZSlcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHZhciBjb21wbGV0ZUVycm9yUmVzcG9uc2UgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR0cnkgeyBtZXNzYWdlID0gZXYudGFyZ2V0LnJlc3BvbnNlVGV4dCB9XG5cdFx0XHRcdFx0XHRcdFx0Y2F0Y2ggKGUpIHsgbWVzc2FnZSA9IHJlc3BvbnNlIH1cblx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSlcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5jb2RlID0gZXYudGFyZ2V0LnN0YXR1c1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2Vcblx0XHRcdFx0XHRcdFx0XHRyZWplY3QoZXJyb3IpXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoeGhyLnN0YXR1cyA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSBzZXRUaW1lb3V0IHRvIHB1c2ggdGhpcyBjb2RlIGJsb2NrIG9udG8gdGhlIGV2ZW50IHF1ZXVlXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBhbGxvd3MgYHhoci5vbnRpbWVvdXRgIHRvIHJ1biBpbiB0aGUgY2FzZSB0aGF0IHRoZXJlIGlzIGEgdGltZW91dFxuXHRcdFx0XHRcdFx0XHRcdC8vIFdpdGhvdXQgdGhpcyBzZXRUaW1lb3V0LCBgeGhyLm9udGltZW91dGAgZG9lc24ndCBoYXZlIGEgY2hhbmNlIHRvIHJlamVjdFxuXHRcdFx0XHRcdFx0XHRcdC8vIGFzIGB4aHIub25yZWFkeXN0YXRlY2hhbmdlYCB3aWxsIHJ1biBiZWZvcmUgaXRcblx0XHRcdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGlzVGltZW91dCkgcmV0dXJuXG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZUVycm9yUmVzcG9uc2UoKVxuXHRcdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBjb21wbGV0ZUVycm9yUmVzcG9uc2UoKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0cmVqZWN0KGUpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoZXYpIHtcblx0XHRcdFx0aXNUaW1lb3V0ID0gdHJ1ZVxuXHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoXCJSZXF1ZXN0IHRpbWVkIG91dFwiKVxuXHRcdFx0XHRlcnJvci5jb2RlID0gZXYudGFyZ2V0LnN0YXR1c1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpXG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2YgYXJncy5jb25maWcgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHR4aHIgPSBhcmdzLmNvbmZpZyh4aHIsIGFyZ3MsIHVybCkgfHwgeGhyXG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIHRoZSBgYWJvcnRgIHRvIGFueSByZXBsYWNlbWVudCBYSFIgYXMgd2VsbC5cblx0XHRcdFx0aWYgKHhociAhPT0gb3JpZ2luYWwpIHtcblx0XHRcdFx0XHRyZXBsYWNlZEFib3J0ID0geGhyLmFib3J0XG5cdFx0XHRcdFx0eGhyLmFib3J0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRhYm9ydGVkID0gdHJ1ZVxuXHRcdFx0XHRcdFx0cmVwbGFjZWRBYm9ydC5jYWxsKHRoaXMpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChib2R5ID09IG51bGwpIHhoci5zZW5kKClcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBhcmdzLnNlcmlhbGl6ZSA9PT0gXCJmdW5jdGlvblwiKSB4aHIuc2VuZChhcmdzLnNlcmlhbGl6ZShib2R5KSlcblx0XHRcdGVsc2UgaWYgKGJvZHkgaW5zdGFuY2VvZiAkd2luZG93LkZvcm1EYXRhIHx8IGJvZHkgaW5zdGFuY2VvZiAkd2luZG93LlVSTFNlYXJjaFBhcmFtcykgeGhyLnNlbmQoYm9keSlcblx0XHRcdGVsc2UgeGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkoYm9keSkpXG5cdFx0fSlcblx0fVxuXG5cdC8vIEluIGNhc2UgdGhlIGdsb2JhbCBQcm9taXNlIGlzIHNvbWUgdXNlcmxhbmQgbGlicmFyeSdzIHdoZXJlIHRoZXkgcmVseSBvblxuXHQvLyBgZm9vIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvcmAsIGB0aGlzLmNvbnN0cnVjdG9yLnJlc29sdmUodmFsdWUpYCwgb3Jcblx0Ly8gc2ltaWxhci4gTGV0J3MgKm5vdCogYnJlYWsgdGhlbS5cblx0UHJvbWlzZVByb3h5LnByb3RvdHlwZSA9IFByb21pc2UucHJvdG90eXBlXG5cdFByb21pc2VQcm94eS5fX3Byb3RvX18gPSBQcm9taXNlIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblxuXHRmdW5jdGlvbiBoYXNIZWFkZXIoYXJncywgbmFtZSkge1xuXHRcdGZvciAodmFyIGtleSBpbiBhcmdzLmhlYWRlcnMpIHtcblx0XHRcdGlmIChoYXNPd24uY2FsbChhcmdzLmhlYWRlcnMsIGtleSkgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09IG5hbWUpIHJldHVybiB0cnVlXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZVxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRyZXF1ZXN0OiBmdW5jdGlvbih1cmwsIGFyZ3MpIHtcblx0XHRcdGlmICh0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKSB7IGFyZ3MgPSB1cmw7IHVybCA9IHVybC51cmwgfVxuXHRcdFx0ZWxzZSBpZiAoYXJncyA9PSBudWxsKSBhcmdzID0ge31cblx0XHRcdHZhciBwcm9taXNlID0gbWFrZVJlcXVlc3QodXJsLCBhcmdzKVxuXHRcdFx0aWYgKGFyZ3MuYmFja2dyb3VuZCA9PT0gdHJ1ZSkgcmV0dXJuIHByb21pc2Vcblx0XHRcdHZhciBjb3VudCA9IDBcblx0XHRcdGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuXHRcdFx0XHRpZiAoLS1jb3VudCA9PT0gMCAmJiB0eXBlb2Ygb25jb21wbGV0aW9uID09PSBcImZ1bmN0aW9uXCIpIG9uY29tcGxldGlvbigpXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB3cmFwKHByb21pc2UpXG5cblx0XHRcdGZ1bmN0aW9uIHdyYXAocHJvbWlzZSkge1xuXHRcdFx0XHR2YXIgdGhlbiA9IHByb21pc2UudGhlblxuXHRcdFx0XHQvLyBTZXQgdGhlIGNvbnN0cnVjdG9yLCBzbyBlbmdpbmVzIGtub3cgdG8gbm90IGF3YWl0IG9yIHJlc29sdmVcblx0XHRcdFx0Ly8gdGhpcyBhcyBhIG5hdGl2ZSBwcm9taXNlLiBBdCB0aGUgdGltZSBvZiB3cml0aW5nLCB0aGlzIGlzXG5cdFx0XHRcdC8vIG9ubHkgbmVjZXNzYXJ5IGZvciBWOCwgYnV0IHRoZWlyIGJlaGF2aW9yIGlzIHRoZSBjb3JyZWN0XG5cdFx0XHRcdC8vIGJlaGF2aW9yIHBlciBzcGVjLiBTZWUgdGhpcyBzcGVjIGlzc3VlIGZvciBtb3JlIGRldGFpbHM6XG5cdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWEyNjIvaXNzdWVzLzE1NzcuIEFsc28sIHNlZSB0aGVcblx0XHRcdFx0Ly8gY29ycmVzcG9uZGluZyBjb21tZW50IGluIGByZXF1ZXN0L3Rlc3RzL3Rlc3QtcmVxdWVzdC5qc2AgZm9yXG5cdFx0XHRcdC8vIGEgYml0IG1vcmUgYmFja2dyb3VuZCBvbiB0aGUgaXNzdWUgYXQgaGFuZC5cblx0XHRcdFx0cHJvbWlzZS5jb25zdHJ1Y3RvciA9IFByb21pc2VQcm94eVxuXHRcdFx0XHRwcm9taXNlLnRoZW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRjb3VudCsrXG5cdFx0XHRcdFx0dmFyIG5leHQgPSB0aGVuLmFwcGx5KHByb21pc2UsIGFyZ3VtZW50cylcblx0XHRcdFx0XHRuZXh0LnRoZW4oY29tcGxldGUsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRcdGNvbXBsZXRlKClcblx0XHRcdFx0XHRcdGlmIChjb3VudCA9PT0gMCkgdGhyb3cgZVxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0cmV0dXJuIHdyYXAobmV4dClcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcHJvbWlzZVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIGh5cGVyc2NyaXB0ID0gcmVxdWlyZShcIi4vcmVuZGVyL2h5cGVyc2NyaXB0XCIpXG5cbmh5cGVyc2NyaXB0LnRydXN0ID0gcmVxdWlyZShcIi4vcmVuZGVyL3RydXN0XCIpXG5oeXBlcnNjcmlwdC5mcmFnbWVudCA9IHJlcXVpcmUoXCIuL3JlbmRlci9mcmFnbWVudFwiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGVyc2NyaXB0XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUFycmF5ID0gW107XG52YXIgZW1wdHlPYmplY3QgPSB7fTtcbnZhciB0eXBlID0gZW1wdHlPYmplY3QudG9TdHJpbmc7XG52YXIgQVJSQVkgPSAgdHlwZS5jYWxsKGVtcHR5QXJyYXkpO1xudmFyIE9CSkVDVCA9IHR5cGUuY2FsbChlbXB0eU9iamVjdCk7XG52YXIgU1RSSU5HID0gdHlwZS5jYWxsKCcnKTtcbnZhciBGVU5DVElPTiA9IHR5cGUuY2FsbCh0eXBlKTtcbnZhciBvd24gPSAgZW1wdHlPYmplY3QuaGFzT3duUHJvcGVydHk7XG52YXIgZnJlZXplID0gT2JqZWN0LmZyZWV6ZSB8fCBmdW5jdGlvbihvKSB7cmV0dXJuIG99O1xuXG5cbmZ1bmN0aW9uIGRlZmF1bHRzKHRhcmdldCwgc291cmNlKSB7XG4gIGZvciAodmFyIGsgaW4gc291cmNlKSBpZiAob3duLmNhbGwoc291cmNlLCBrKSkge1xuICAgIGlmIChrLmluZGV4T2YoJyQnKSAmJiAhKGsgaW4gdGFyZ2V0KSkgdGFyZ2V0W2tdID0gc291cmNlW2tdO1xuICB9XG4gIHJldHVybiB0YXJnZXRcbn1cblxuZnVuY3Rpb24gY2FydGVzaWFuKGEsYikge1xuICB2YXIgcmVzID0gW10sIGksIGo7XG4gIGZvciAoaiBpbiBiKSBpZihvd24uY2FsbChiLCBqKSlcbiAgICBmb3IgKGkgaW4gYSkgaWYob3duLmNhbGwoYSwgaSkpXG4gICAgICByZXMucHVzaChhW2ldICsgYltqXSk7XG4gIHJldHVybiByZXNcbn1cblxuLy8gXCJUb2tlbml6ZXNcIiB0aGUgc2VsZWN0b3JzIGludG8gcGFydHMgcmVsZXZhbnQgZm9yIHRoZSBuZXh0IGZ1bmN0aW9uLlxuLy8gU3RyaW5ncyBhbmQgY29tbWVudHMgYXJlIG1hdGNoZWQsIGJ1dCBpZ25vcmVkIGFmdGVyd2FyZHMuXG4vLyBUaGlzIGlzIG5vdCBhIGZ1bGwgdG9rZW5pemVycy4gSXQgb25seSByZWNvZ25pemVzIGNvbWFzLCBwYXJlbnRoZXNlcyxcbi8vIHN0cmluZ3MgYW5kIGNvbW1lbnRzLlxuLy8gcmVnZXhwIGdlbmVyYXRlZCBieSBzY3JpcHRzL3JlZ2V4cHMuanMgdGhlbiB0cmltbWVkIGJ5IGhhbmRcbnZhciBzZWxlY3RvclRva2VuaXplciA9IC9bKCksXXxcIig/OlxcXFwufFteXCJcXG5dKSpcInwnKD86XFxcXC58W14nXFxuXSkqJ3xcXC9cXCpbXFxzXFxTXSo/XFwqXFwvL2c7XG5cblxuLyoqXG4gKiBUaGlzIHdpbGwgc3BsaXQgYSBjb21hLXNlcGFyYXRlZCBzZWxlY3RvciBsaXN0IGludG8gaW5kaXZpZHVhbCBzZWxlY3RvcnMsXG4gKiBpZ25vcmluZyBjb21hcyBpbiBzdHJpbmdzLCBjb21tZW50cyBhbmQgaW4gOnBzZXVkby1zZWxlY3RvcnMocGFyYW1ldGVyLCBsaXN0cykuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuXG5mdW5jdGlvbiBzcGxpdFNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gIHZhciBpbmRpY2VzID0gW10sIHJlcyA9IFtdLCBpblBhcmVuID0gMCwgbztcbiAgLyplc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiovXG4gIHdoaWxlIChvID0gc2VsZWN0b3JUb2tlbml6ZXIuZXhlYyhzZWxlY3RvcikpIHtcbiAgLyplc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduKi9cbiAgICBzd2l0Y2ggKG9bMF0pIHtcbiAgICBjYXNlICcoJzogaW5QYXJlbisrOyBicmVha1xuICAgIGNhc2UgJyknOiBpblBhcmVuLS07IGJyZWFrXG4gICAgY2FzZSAnLCc6IGlmIChpblBhcmVuKSBicmVhazsgaW5kaWNlcy5wdXNoKG8uaW5kZXgpO1xuICAgIH1cbiAgfVxuICBmb3IgKG8gPSBpbmRpY2VzLmxlbmd0aDsgby0tOyl7XG4gICAgcmVzLnVuc2hpZnQoc2VsZWN0b3Iuc2xpY2UoaW5kaWNlc1tvXSArIDEpKTtcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKDAsIGluZGljZXNbb10pO1xuICB9XG4gIHJlcy51bnNoaWZ0KHNlbGVjdG9yKTtcbiAgcmV0dXJuIHJlc1xufVxuXG4vLyBMaWtlIHRoZSBgc2VsZWN0b3JUb2tlbml6ZXJgLCBidXQgZm9yIHRoZSBgJmAgb3BlcmF0b3JcbnZhciBhbXBlcnNhbmRUb2tlbml6ZXIgPSAvJnxcIig/OlxcXFwufFteXCJcXG5dKSpcInwnKD86XFxcXC58W14nXFxuXSkqJ3xcXC9cXCpbXFxzXFxTXSo/XFwqXFwvL2c7XG5cbmZ1bmN0aW9uIGFtcGVyc2FuZCAoc2VsZWN0b3IsIHBhcmVudHMpIHtcbiAgdmFyIGluZGljZXMgPSBbXSwgc3BsaXQgPSBbXSwgcmVzLCBvO1xuICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduKi9cbiAgd2hpbGUgKG8gPSBhbXBlcnNhbmRUb2tlbml6ZXIuZXhlYyhzZWxlY3RvcikpIHtcbiAgLyplc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduKi9cbiAgICBpZiAob1swXSA9PSAnJicpIGluZGljZXMucHVzaChvLmluZGV4KTtcbiAgfVxuICBmb3IgKG8gPSBpbmRpY2VzLmxlbmd0aDsgby0tOyl7XG4gICAgc3BsaXQudW5zaGlmdChzZWxlY3Rvci5zbGljZShpbmRpY2VzW29dICsgMSkpO1xuICAgIHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoMCwgaW5kaWNlc1tvXSk7XG4gIH1cbiAgc3BsaXQudW5zaGlmdChzZWxlY3Rvcik7XG4gIGlmIChzcGxpdC5sZW5ndGggPT09IDEpIHNwbGl0LnVuc2hpZnQoJycpO1xuICByZXMgPSBbc3BsaXRbMF1dO1xuICBmb3IgKG8gPSAxOyBvIDwgc3BsaXQubGVuZ3RoOyBvKyspIHtcbiAgICByZXMgPSBjYXJ0ZXNpYW4ocmVzLCBjYXJ0ZXNpYW4ocGFyZW50cywgW3NwbGl0W29dXSkpO1xuICB9XG4gIHJldHVybiByZXMuam9pbignLCcpXG59XG5cbmZ1bmN0aW9uIGZsYXRJdGVyIChmKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpdGVyKGFyZykge1xuICAgIGlmICh0eXBlLmNhbGwoYXJnKSA9PT0gQVJSQVkpIGZvciAodmFyIGk9IDAgOyBpIDwgYXJnLmxlbmd0aDsgaSArKykgaXRlcihhcmdbaV0pO1xuICAgIGVsc2UgZihhcmcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlY2FtZWxpemUobWF0Y2gpIHtcbiAgcmV0dXJuICctJyArIG1hdGNoLnRvTG93ZXJDYXNlKClcbn1cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBwcm9wZXJ0eTp2YWx1ZTsgcGFpcnMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHN0YXRlIC0gaG9sZHMgdGhlIGxvY2FsaXplci0gYW5kIHdhbGtlci1yZWxhdGVkIG1ldGhvZHNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBzdGF0ZVxuICogQHBhcmFtIHtvYmplY3R9IGVtaXQgLSB0aGUgY29udGV4dHVhbCBlbWl0dGVycyB0byB0aGUgZmluYWwgYnVmZmVyXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IC0gdGhlIGN1cnJlbnQgcHJvcGVydHkgb3IgYSBwcmVmaXggaW4gY2FzZSBvZiBuZXN0ZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBzdWItcHJvcGVydGllcy5cbiAqIEBwYXJhbSB7YXJyYXl8b2JqZWN0fHN0cmluZ30gbyAtIHRoZSBkZWNsYXJhdGlvbnMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGxvY2FsIC0gYXJlIHdlIGluIEBsb2NhbCBvciBpbiBAZ2xvYmFsIHNjb3BlLlxuICovXG5cbmZ1bmN0aW9uIGRlY2xhcmF0aW9ucyhzdGF0ZSwgZW1pdCwgcHJlZml4LCBvLCBsb2NhbCkge1xuICB2YXIgaywgdiwga2s7XG4gIGlmIChvPT1udWxsKSByZXR1cm5cblxuICBzd2l0Y2ggKCB0eXBlLmNhbGwobyA9IG8udmFsdWVPZigpKSApIHtcbiAgY2FzZSBBUlJBWTpcbiAgICBmb3IgKGsgPSAwOyBrIDwgby5sZW5ndGg7IGsrKylcblxuICAgICAgZGVjbGFyYXRpb25zKHN0YXRlLCBlbWl0LCBwcmVmaXgsIG9ba10sIGxvY2FsKTtcblxuICAgIGJyZWFrXG4gIGNhc2UgT0JKRUNUOlxuICAgIC8vIHByZWZpeCBpcyBmYWxzeSBpaWYgaXQgaXMgdGhlIGVtcHR5IHN0cmluZywgd2hpY2ggbWVhbnMgd2UncmUgYXQgdGhlIHJvb3RcbiAgICAvLyBvZiB0aGUgZGVjbGFyYXRpb25zIGxpc3QuXG4gICAgcHJlZml4ID0gKHByZWZpeCAmJiBwcmVmaXggKyAnLScpO1xuICAgIGZvciAoayBpbiBvKSBpZiAob3duLmNhbGwobywgaykpe1xuICAgICAgdiA9IG9ba107XG4gICAgICBpZiAoL1xcJC8udGVzdChrKSkge1xuICAgICAgICBmb3IgKGtrIGluIChrID0gay5zcGxpdCgnJCcpKSkgaWYgKG93bi5jYWxsKGssIGtrKSkge1xuXG4gICAgICAgICAgZGVjbGFyYXRpb25zKHN0YXRlLCBlbWl0LCBwcmVmaXggKyBrW2trXSwgdiwgbG9jYWwpO1xuXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgZGVjbGFyYXRpb25zKHN0YXRlLCBlbWl0LCBwcmVmaXggKyBrLCB2LCBsb2NhbCk7XG5cbiAgICAgIH1cbiAgICB9XG4gICAgYnJlYWtcbiAgZGVmYXVsdDpcbiAgICAvLyBwcmVmaXggaXMgZmFsc3kgd2hlbiBpdCBpcyBcIlwiLCB3aGljaCBtZWFucyB0aGF0IHdlJ3JlXG4gICAgLy8gYXQgdGhlIHRvcCBsZXZlbC5cbiAgICAvLyBgb2AgaXMgdGhlbiB0cmVhdGVkIGFzIGEgYHByb3BlcnR5OnZhbHVlYCBwYWlyLCBvciBhXG4gICAgLy8gc2VtaS1jb2xvbi1zZXBhcmF0ZWQgbGlzdCB0aGVyZW9mLlxuICAgIC8vIE90aGVyd2lzZSwgYHByZWZpeGAgaXMgdGhlIHByb3BlcnR5IG5hbWUsIGFuZFxuICAgIC8vIGBvYCBpcyB0aGUgdmFsdWUuXG5cbiAgICAvLyByZXN0b3JlIHRoZSBkYXNoZXNcbiAgICBrID0gcHJlZml4LnJlcGxhY2UoL18vZywgJy0nKS5yZXBsYWNlKC9bQS1aXS9nLCBkZWNhbWVsaXplKTtcblxuICAgIGlmIChsb2NhbCAmJiAoayA9PSAnYW5pbWF0aW9uLW5hbWUnIHx8IGsgPT0gJ2FuaW1hdGlvbicgfHwgayA9PSAnbGlzdC1zdHlsZScpKSB7XG4gICAgICAvLyBubyBuZWVkIHRvIHRva2VuaXplIGhlcmUgYSBwbGFpbiBgLnNwbGl0KCcsJylgIGhhcyBhbGwgYmFzZXMgY292ZXJlZC5cbiAgICAgIC8vIFdlIG1heSAnbG9jYWxpemUnIGEgY29tbWVudCwgYnV0IGl0J3Mgbm90IGEgYmlnIGRlYWwuXG4gICAgICBvID0gby5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAobykge1xuXG4gICAgICAgIHJldHVybiBvLnJlcGxhY2UoL15cXHMqKD86KHZhclxcKFteKV0rXFwpKXw6P2dsb2JhbFxcKFxccyooW19BLVphLXpdWy1cXHddKilcXHMqXFwpfCgpKC0/W19BLVphLXpdWy1cXHddKikpLywgc3RhdGUubG9jYWxpemVSZXBsYWNlcilcblxuICAgICAgfSkuam9pbignLCcpO1xuICAgIH1cblxuICAgIGVtaXQuZGVjbChrLCBvKTtcblxuICB9XG59XG5cbi8qKlxuICogSGFuZGxlcyBhIHNpbmdsZSBhdC1ydWxlc1xuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIGhvbGRzIHRoZSBsb2NhbGl6ZXItIGFuZCB3YWxrZXItcmVsYXRlZCBtZXRob2RzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgc3RhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbWl0IC0gdGhlIGNvbnRleHR1YWwgZW1pdHRlcnMgdG8gdGhlIGZpbmFsIGJ1ZmZlclxuICogQHBhcmFtIHthcnJheX0gayAtIFRoZSBwYXJzZWQgYXQtcnVsZSwgaW5jbHVkaW5nIHRoZSBwYXJhbWV0ZXJzLFxuICogICAgICAgICAgICAgICAgICAgIGlmIHRha2VzIGJvdGggcGFyYW1ldGVycyBhbmQgYSBibG9jay5cbiAqICAgICAgICAgICAgICAgICAgICBrID09IFttYXRjaCwgZnVsbEF0UnVsZSwgYXRSdWxlVHlwZSwgcGFyYW1zP11cbiAqICAgICAgICAgICAgICAgICAgICBTbyBpbiBgQC13ZWJraXQta2V5ZnJhbWVzIGZvb2AsIHdlIGhhdmVcbiAqICAgICAgICAgICAgICAgICAgICAgLSBtYXRjaCA9IFwiQC13ZWJraXQta2V5ZnJhbWVzIGZvb1wiXG4gKiAgICAgICAgICAgICAgICAgICAgIC0gZnVsbEF0UnVsZSA9IFwiQC13ZWJraXQta2V5ZnJhbWVzXCJcbiAqICAgICAgICAgICAgICAgICAgICAgLSBhdFJ1bGVUeXBlID0gXCJrZXlmcmFtZXNcIlxuICogICAgICAgICAgICAgICAgICAgICAtIHBhcmFtcyA9IFwiZm9vXCJcbiAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfG9iamVjdHxvYmplY3RbXX0gdiAtIEVpdGhlciBwYXJhbWV0ZXJzIGZvclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2stbGVzcyBydWxlcyBvclxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlaXIgYmxvY2tcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGUgb3RoZXJzLlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCAtIHRoZSBjdXJyZW50IHNlbGVjdG9yIG9yIHRoZSBzZWxlY3RvciBwcmVmaXhcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICBpbiBjYXNlIG9mIG5lc3RlZCBydWxlc1xuICogQHBhcmFtIHtib29sZWFufSBsb2NhbCAtIGFyZSB3ZSBpbiBAbG9jYWwgb3IgaW4gQGdsb2JhbCBzY29wZT9cbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXN0aW5nRGVwdGggLSBhcmUgd2UgbmVzdGVkIGluIGFuIGF0LXJ1bGUgb3IgYSBzZWxlY3Rvcj9cbiAqL1xuXG5mdW5jdGlvbiBhdFJ1bGVzKHN0YXRlLCBlbWl0LCBrLCB2LCBwcmVmaXgsIGxvY2FsLCBuZXN0aW5nRGVwdGgpIHtcblxuICAvLyBGaXJzdCBpdGVyYXRlIG92ZXIgdXNlci1wcm92aWRlZCBhdC1ydWxlcyBhbmQgcmV0dXJuIGlmIG9uZSBvZiB0aGVtIGNvcnJlc3BvbmRzIHRvIHRoZSBjdXJyZW50IG9uZVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLiRhdEhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XG5cbiAgICBpZiAoc3RhdGUuJGF0SGFuZGxlcnNbaV0oc3RhdGUsIGVtaXQsIGssIHYsIHByZWZpeCwgbG9jYWwsIG5lc3RpbmdEZXB0aCkpIHJldHVyblxuXG4gIH1cblxuICAvLyB1c2luZyBgL15nbG9iYWwkLy50ZXN0KGtbMl0pYCByYXRoZXIgdGhhdCAnZ2xvYmFsJyA9PSBrWzJdIGd6aXBzXG4gIC8vIHNsaWdodGx5IGJldHRlciB0aGFua3MgdG8gdGhlIHJlZ2V4cHMgdGVzdHMgZnVydGhlciBkb3duLlxuICAvLyBJdCBpcyBzbGlnaHRseSBsZXNzIGVmZmljaWVudCBidXQgdGhpcyBpc24ndCBhIGNyaXRpY2FsIHBhdGguXG5cbiAgaWYgKCFrWzNdICYmIC9eZ2xvYmFsJC8udGVzdChrWzJdKSkge1xuXG4gICAgcnVsZXMoc3RhdGUsIGVtaXQsIHByZWZpeCwgdiwgMCwgbmVzdGluZ0RlcHRoKTtcblxuXG4gIH0gZWxzZSBpZiAoIWtbM10gJiYgL15sb2NhbCQvLnRlc3Qoa1syXSkpIHtcblxuICAgIHJ1bGVzKHN0YXRlLCBlbWl0LCBwcmVmaXgsIHYsIDEsIG5lc3RpbmdEZXB0aCk7XG5cblxuICB9IGVsc2UgaWYgKGtbM10gJiYgL15hZG9wdCQvLnRlc3Qoa1syXSkpIHtcblxuICAgIGlmICghbG9jYWwgfHwgbmVzdGluZ0RlcHRoKSByZXR1cm4gZW1pdC5lcnIoJ0BhZG9wdCBnbG9iYWwgb3IgbmVzdGVkOiAnICsga1swXSlcblxuICAgIGlmICghL15cXC4/W19BLVphLXpdWy1cXHddKiQvLnRlc3Qoa1szXSkpIHJldHVybiBlbWl0LmVycignYmFkIGFkb3B0ZXIgJyArIEpTT04uc3RyaW5naWZ5KGtbM10pICsgJyBpbiAnICsga1swXSlcblxuICAgIGkgPSBbXTtcbiAgICBmbGF0SXRlcihmdW5jdGlvbihhZG9wdGVlLCBhc1N0cmluZykge1xuXG4gICAgICBpZihhZG9wdGVlID09IG51bGwgfHwgIS9eXFwuP1tfQS1aYS16XVstXFx3XSooPzpcXHMrXFwuP1tfQS1aYS16XVstXFx3XSopKiQvLnRlc3QoYXNTdHJpbmcgPSBhZG9wdGVlICsgJycpKSBlbWl0LmVycignYmFkIGFkb3B0ZWUgJysgSlNPTi5zdHJpbmdpZnkoYWRvcHRlZSkgKyAnIGluICcgKyBrWzBdKTtcblxuICAgICAgZWxzZSBpLnB1c2goYXNTdHJpbmcucmVwbGFjZSgvXFwuL2csICcnKSk7XG5cbiAgICB9KSh2KTtcblxuICAgIC8vIHdlIG1heSBlbmQgdXAgd2l0aCBkdXBsaWNhdGUgY2xhc3NlcyBidXQgQUZBSUsgaXQgaGFzIG5vIGNvbnNlcXVlbmNlcyBvbiBzcGVjaWZpY2l0eS5cbiAgICBpZiAoaS5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmxvY2FsaXplKGtbM10gPSBrWzNdLnJlcGxhY2UoL1xcLi9nLCAnJykpO1xuICAgICAgc3RhdGUubmFtZXNba1szXV0gKz0gKCcgJyArIGkuam9pbignICcpKTtcbiAgICB9XG5cblxuICB9IGVsc2UgaWYgKCFrWzNdICYmIC9eKD86bmFtZXNwYWNlfGltcG9ydHxjaGFyc2V0KSQvLnRlc3Qoa1syXSkpIHtcbiAgICBmbGF0SXRlcihmdW5jdGlvbih2KSB7XG5cbiAgICAgIGVtaXQuYXRydWxlKGtbMV0sIGtbMl0sIHYpO1xuXG4gICAgfSkodik7XG5cblxuICB9IGVsc2UgaWYgKCFrWzNdICYmIC9eKD86Zm9udC1mYWNlfHZpZXdwb3J0KSQvLnRlc3Qoa1syXSkpIHtcbiAgICBmbGF0SXRlcihmdW5jdGlvbih2KSB7XG5cbiAgICAgIGVtaXQuYXRydWxlKGtbMV0sIGtbMl0sIGtbM10sIDEpO1xuXG4gICAgICBkZWNsYXJhdGlvbnMoc3RhdGUsIGVtaXQsICcnLCB2LCBsb2NhbCk7XG5cbiAgICAgIGVtaXQuX2F0cnVsZSgpO1xuXG4gICAgfSkodik7XG5cbiAgfSBlbHNlIGlmIChrWzNdICYmIC9eKD86bWVkaWF8c3VwcG9ydHN8cGFnZXxrZXlmcmFtZXMpJC8udGVzdChrWzJdKSkge1xuXG4gICAgaWYgKGxvY2FsICYmICdrZXlmcmFtZXMnID09IGtbMl0pIHtcbiAgICAgIGtbM10gPSBrWzNdLnJlcGxhY2UoXG4gICAgICAgIC8vIGdlbmVyYXRlZCBieSBzY3JpcHQvcmVnZXhwcy5qc1xuICAgICAgICAvKHZhclxcKFteKV0rXFwpKXw6P2dsb2JhbFxcKFxccyooW19BLVphLXpdWy1cXHddKilcXHMqXFwpfCgpKC0/W19BLVphLXpdWy1cXHddKikvLFxuICAgICAgICBzdGF0ZS5sb2NhbGl6ZVJlcGxhY2VyXG4gICAgICApO1xuICAgIH1cblxuXG4gICAgZW1pdC5hdHJ1bGUoa1sxXSwga1syXSwga1szXSwgMSk7XG5cbiAgICBpZiAoJ3BhZ2UnID09IGtbMl0pIHtcblxuICAgICAgZGVjbGFyYXRpb25zKHN0YXRlLCBlbWl0LCAnJywgdiwgbG9jYWwpO1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgcnVsZXMoXG4gICAgICAgIHN0YXRlLCBlbWl0LFxuICAgICAgICAna2V5ZnJhbWVzJyA9PSBrWzJdID8gJycgOiBwcmVmaXgsXG4gICAgICAgIHYsIGxvY2FsLCBuZXN0aW5nRGVwdGggKyAxXG4gICAgICApO1xuXG4gICAgfVxuXG4gICAgZW1pdC5fYXRydWxlKCk7XG5cbiAgfSBlbHNlIHtcblxuICAgIGVtaXQuZXJyKCdVbnN1cHBvcnRlZCBhdC1ydWxlOiAnICsga1swXSk7XG5cbiAgfVxufVxuXG4vKipcbiAqIEFkZCBydWxlc2V0cyBhbmQgb3RoZXIgQ1NTIHRyZWUgdG8gdGhlIHNoZWV0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIGhvbGRzIHRoZSBsb2NhbGl6ZXItIGFuZCB3YWxrZXItcmVsYXRlZCBtZXRob2RzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgc3RhdGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbWl0IC0gdGhlIGNvbnRleHR1YWwgZW1pdHRlcnMgdG8gdGhlIGZpbmFsIGJ1ZmZlclxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCAtIHRoZSBjdXJyZW50IHNlbGVjdG9yIG9yIGEgcHJlZml4IGluIGNhc2Ugb2YgbmVzdGVkIHJ1bGVzXG4gKiBAcGFyYW0ge2FycmF5fHN0cmluZ3xvYmplY3R9IHRyZWUgLSBhIHNvdXJjZSBvYmplY3Qgb3Igc3ViLW9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXN0aW5nRGVwdGggLSBhcmUgd2UgbmVzdGVkIGluIGFuIGF0LXJ1bGU/XG4gKiBAcGFyYW0ge2Jvb2xlYW59IGxvY2FsIC0gYXJlIHdlIGluIEBsb2NhbCBvciBpbiBAZ2xvYmFsIHNjb3BlP1xuICovXG5mdW5jdGlvbiBydWxlcyhzdGF0ZSwgZW1pdCwgcHJlZml4LCB0cmVlLCBsb2NhbCwgbmVzdGluZ0RlcHRoKSB7XG4gIHZhciBrLCB2LCBpbkRlY2xhcmF0aW9uLCBraztcblxuICBzd2l0Y2ggKHR5cGUuY2FsbCh0cmVlKSkge1xuXG4gIGNhc2UgT0JKRUNUOlxuICAgIGZvciAoayBpbiB0cmVlKSBpZiAob3duLmNhbGwodHJlZSwgaykpIHtcbiAgICAgIHYgPSB0cmVlW2tdO1xuXG4gICAgICBpZiAocHJlZml4Lmxlbmd0aCA+IDAgJiYgL15bLVxcdyRdKyQvLnRlc3QoaykpIHtcbiAgICAgICAgaWYgKCFpbkRlY2xhcmF0aW9uKSB7XG4gICAgICAgICAgaW5EZWNsYXJhdGlvbiA9IDE7XG5cbiAgICAgICAgICBlbWl0LnJ1bGUocHJlZml4KTtcblxuICAgICAgICB9XG4gICAgICAgIGlmICgvXFwkLy50ZXN0KGspKSB7XG4gICAgICAgICAgZm9yIChrayBpbiAoayA9IGsuc3BsaXQoJyQnKSkpIGlmIChvd24uY2FsbChrLCBraykpIHtcblxuICAgICAgICAgICAgZGVjbGFyYXRpb25zKHN0YXRlLCBlbWl0LCBrW2trXSwgdiwgbG9jYWwpO1xuXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgZGVjbGFyYXRpb25zKHN0YXRlLCBlbWl0LCBrLCB2LCBsb2NhbCk7XG5cbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKC9eQC8udGVzdChrKSkge1xuICAgICAgICAvLyBIYW5kbGUgQXQtcnVsZXNcbiAgICAgICAgaW5EZWNsYXJhdGlvbiA9IDA7XG5cbiAgICAgICAgYXRSdWxlcyhzdGF0ZSwgZW1pdCxcbiAgICAgICAgICAvXiguKD86LVtcXHddKy0pPyhbX0EtWmEtel1bLVxcd10qKSlcXGJcXHMqKC4qPylcXHMqJC8uZXhlYyhrKSB8fCBbaywnQCcsJycsJyddLFxuICAgICAgICAgIHYsIHByZWZpeCwgbG9jYWwsIG5lc3RpbmdEZXB0aFxuICAgICAgICApO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzZWxlY3RvciBvciBuZXN0ZWQgc3ViLXNlbGVjdG9yc1xuICAgICAgICBpbkRlY2xhcmF0aW9uID0gMDtcblxuICAgICAgICBydWxlcyhcbiAgICAgICAgICBzdGF0ZSwgZW1pdCxcbiAgICAgICAgICAvLyBidWlsZCB0aGUgc2VsZWN0b3IgYHByZWZpeGAgZm9yIHRoZSBuZXh0IGl0ZXJhdGlvbi5cbiAgICAgICAgICAvLyB1Z2x5IGFuZCBmdWxsIG9mIHJlZHVuZGFudCBiaXRzIGJ1dCBzbyBmYXIgdGhlIGZhc3Rlc3Qvc2hvcnRlc3QuZ3pcbiAgICAgICAgICAvKjAgaWYqLyhwcmVmaXgubGVuZ3RoID4gMCAmJiAoLywvLnRlc3QocHJlZml4KSB8fCAvLC8udGVzdChrKSkpID9cblxuICAgICAgICAgICAgLyowIHRoZW4qLyAoa2sgPSBzcGxpdFNlbGVjdG9yKHByZWZpeCksIHNwbGl0U2VsZWN0b3IoXG4gICAgICAgICAgICAgIGxvY2FsID9cblxuICAgICAgICAgICAgICAgIGsucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgIC8oXCIoPzpcXFxcLnxbXlwiXFxuXSkqXCJ8Jyg/OlxcXFwufFteJ1xcbl0pKid8XFwvXFwqW1xcc1xcU10qP1xcKlxcLyl8Omdsb2JhbFxcKFxccyooXFwuLT9bX0EtWmEtel1bLVxcd10qKVxccypcXCl8KFxcLikoLT9bX0EtWmEtel1bLVxcd10qKS9nLFxuICAgICAgICAgICAgICAgICAgc3RhdGUubG9jYWxpemVSZXBsYWNlclxuICAgICAgICAgICAgICAgICkgOlxuXG4gICAgICAgICAgICAgICAga1xuICAgICAgICAgICAgKS5tYXAoZnVuY3Rpb24gKGspIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8mLy50ZXN0KGspID8gYW1wZXJzYW5kKGssIGtrKSA6IGtrLm1hcChmdW5jdGlvbihraykge1xuICAgICAgICAgICAgICAgIHJldHVybiBrayArIGtcbiAgICAgICAgICAgICAgfSkuam9pbignLCcpXG4gICAgICAgICAgICB9KS5qb2luKCcsJykpIDpcblxuICAgICAgICAgICAgLyowIGVsc2UqLyAvKjEgaWYqLyAvJi8udGVzdChrKSA/XG5cbiAgICAgICAgICAgICAgLyoxIHRoZW4qLyBhbXBlcnNhbmQoXG4gICAgICAgICAgICAgICAgbG9jYWwgP1xuXG4gICAgICAgICAgICAgICAgICBrLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgIC8oXCIoPzpcXFxcLnxbXlwiXFxuXSkqXCJ8Jyg/OlxcXFwufFteJ1xcbl0pKid8XFwvXFwqW1xcc1xcU10qP1xcKlxcLyl8Omdsb2JhbFxcKFxccyooXFwuLT9bX0EtWmEtel1bLVxcd10qKVxccypcXCl8KFxcLikoLT9bX0EtWmEtel1bLVxcd10qKS9nLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5sb2NhbGl6ZVJlcGxhY2VyXG4gICAgICAgICAgICAgICAgICApIDpcblxuICAgICAgICAgICAgICAgICAgayxcbiAgICAgICAgICAgICAgICBbcHJlZml4XVxuICAgICAgICAgICAgICApIDpcblxuICAgICAgICAgICAgICAvKjEgZWxzZSovIHByZWZpeCArIChcbiAgICAgICAgICAgICAgICBsb2NhbCA/XG5cbiAgICAgICAgICAgICAgICAgIGsucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgLyhcIig/OlxcXFwufFteXCJcXG5dKSpcInwnKD86XFxcXC58W14nXFxuXSkqJ3xcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKXw6Z2xvYmFsXFwoXFxzKihcXC4tP1tfQS1aYS16XVstXFx3XSopXFxzKlxcKXwoXFwuKSgtP1tfQS1aYS16XVstXFx3XSopL2csXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmxvY2FsaXplUmVwbGFjZXJcbiAgICAgICAgICAgICAgICAgICkgOlxuXG4gICAgICAgICAgICAgICAgICBrXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgdiwgbG9jYWwsIG5lc3RpbmdEZXB0aCArIDFcbiAgICAgICAgKTtcblxuICAgICAgfVxuICAgIH1cblxuICAgIGJyZWFrXG5cbiAgY2FzZSBBUlJBWTpcbiAgICBmb3IgKGsgPSAwOyBrIDwgdHJlZS5sZW5ndGg7IGsrKyl7XG5cbiAgICAgIHJ1bGVzKHN0YXRlLCBlbWl0LCBwcmVmaXgsIHRyZWVba10sIGxvY2FsLCBuZXN0aW5nRGVwdGgpO1xuXG4gICAgfVxuICAgIGJyZWFrXG5cbiAgY2FzZSBTVFJJTkc6XG4gICAgLy8gQ1NTIGhhY2tzIG9yIG91cHR1dCBvZiBgajJjLmlubGluZWAuXG4gICAgaWYgKCFwcmVmaXgubGVuZ3RoKSBlbWl0LmVycignTm8gc2VsZWN0b3InKTtcbiAgICBlbWl0LnJ1bGUocHJlZml4IHx8ICcgJyk7XG5cbiAgICBkZWNsYXJhdGlvbnMoc3RhdGUsIGVtaXQsICcnLCB0cmVlLCBsb2NhbCk7XG5cbiAgfVxufVxuXG4vLyBUaGlzIGlzIHRoZSBmaXJzdCBlbnRyeSBpbiB0aGUgZmlsdGVycyBhcnJheSwgd2hpY2ggaXNcbi8vIGFjdHVhbGx5IHRoZSBsYXN0IHN0ZXAgb2YgdGhlIGNvbXBpbGVyLiBJdCBpbnNlcnRzXG4vLyBjbG9zaW5nIGJyYWNlcyB0byBjbG9zZSBub3JtYWwgKG5vbiBhdC0pIHJ1bGVzICh0aG9zZVxuLy8gdGhhdCBzdGFydCB3aXRoIGEgc2VsZWN0b3IpLiBEb2luZyBpdCBlYXJsaWVyIGlzXG4vLyBpbXBvc3NpYmxlIHdpdGhvdXQgcGFzc2luZyBzdGF0ZSBhcm91bmQgaW4gdW5yZWxhdGVkIGNvZGVcbi8vIG9yIGVuZGluZyB1cCB3aXRoIGR1cGxpY2F0ZWQgc2VsZWN0b3JzIHdoZW4gdGhlIHNvdXJjZSB0cmVlXG4vLyBjb250YWlucyBhcnJheXMuXG4vLyBUaGVyZSdzIG5vIGBfcnVsZWAgaGFuZGxlciwgYmVjYXVzZSB0aGUgY29yZSBjb21waWxlciBuZXZlclxuLy8gY2FsbHMgaXQuXG5mdW5jdGlvbiBjbG9zZVNlbGVjdG9ycyhuZXh0LCBpbmxpbmUpIHtcbiAgdmFyIGxhc3RTZWxlY3RvcjtcbiAgcmV0dXJuIGlubGluZSA/IG5leHQgOiB7XG4gICAgaW5pdDogZnVuY3Rpb24oKXtsYXN0U2VsZWN0b3IgPSAwOyBuZXh0LmluaXQoKTt9LFxuICAgIGRvbmU6IGZ1bmN0aW9uIChyYXcpIHtcbiAgICAgIGlmIChsYXN0U2VsZWN0b3IpIHtuZXh0Ll9ydWxlKCk7IGxhc3RTZWxlY3RvciA9IDA7fVxuICAgICAgcmV0dXJuIG5leHQuZG9uZShyYXcpXG4gICAgfSxcbiAgICBhdHJ1bGU6IGZ1bmN0aW9uIChydWxlLCBraW5kLCBwYXJhbSwgdGFrZXNCbG9jaykge1xuICAgICAgaWYgKGxhc3RTZWxlY3Rvcikge25leHQuX3J1bGUoKTsgbGFzdFNlbGVjdG9yID0gMDt9XG4gICAgICBuZXh0LmF0cnVsZShydWxlLCBraW5kLCBwYXJhbSwgdGFrZXNCbG9jayk7XG4gICAgfSxcbiAgICBfYXRydWxlOiBmdW5jdGlvbiAocnVsZSkge1xuICAgICAgaWYgKGxhc3RTZWxlY3Rvcikge25leHQuX3J1bGUoKTsgbGFzdFNlbGVjdG9yID0gMDt9XG4gICAgICBuZXh0Ll9hdHJ1bGUocnVsZSk7XG4gICAgfSxcbiAgICBydWxlOiBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChzZWxlY3RvciAhPT0gbGFzdFNlbGVjdG9yKXtcbiAgICAgICAgaWYgKGxhc3RTZWxlY3RvcikgbmV4dC5fcnVsZSgpO1xuICAgICAgICBuZXh0LnJ1bGUoc2VsZWN0b3IpO1xuICAgICAgICBsYXN0U2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2xvYmFsKHgpIHtcbiAgcmV0dXJuICc6Z2xvYmFsKCcgKyB4ICsgJyknXG59XG5cbmZ1bmN0aW9uIGt2IChrLCB2LCBvKSB7XG4gIG8gPSB7fTtcbiAgb1trXSA9IHY7XG4gIHJldHVybiBvXG59XG5cbmZ1bmN0aW9uIGF0IChydWxlLCBwYXJhbXMsIGJsb2NrKSB7XG4gIGlmIChcbiAgICBhcmd1bWVudHMubGVuZ3RoIDwgM1xuICApIHtcbiAgICAvLyBpbm5lciBjdXJyeSFcbiAgICB2YXIgX2F0ID0gYXQuYmluZC5hcHBseShhdCwgW251bGxdLmNvbmNhdChbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKSkpO1xuICAgIC8vIFNvIHRoYXQgaXQgY2FuIGJlIHVzZWQgYXMgYSBrZXkgaW4gYW4gRVM2IG9iamVjdCBsaXRlcmFsLlxuICAgIF9hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCl7cmV0dXJuICdAJyArIHJ1bGUgKyAnICcgKyBwYXJhbXN9O1xuICAgIHJldHVybiBfYXRcbiAgfVxuICBlbHNlIHJldHVybiBrdignQCcgKyBydWxlICsnICcgKyBwYXJhbXMsIGJsb2NrKVxufVxuXG5mdW5jdGlvbiBqMmMoKSB7XG5cbiAgLy8gdGhlIGJ1ZmZlciB0aGF0IGFjY3VtdWxhdGVzIHRoZSBvdXRwdXQuIEluaXRpYWxpemVkIGluIGAkc2luay5pKClgXG4gIHZhciBidWYsIGVycjtcblxuICAvLyB0aGUgYm90dG9tIG9mIHRoZSAnY29kZWdlbicgc3RyZWFtLiBNaXJyb3JzIHRoZSBgJGZpbHRlcmAgcGx1Z2luIEFQSS5cbiAgdmFyICRzaW5rID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uKCl7YnVmPVtdLCBlcnI9W107fSxcbiAgICBkb25lOiBmdW5jdGlvbiAocmF3KSB7XG4gICAgICBpZiAoZXJyLmxlbmd0aCAhPSAwKSB0aHJvdyBuZXcgRXJyb3IoJ2oyYyBlcnJvcihzKTogJyArIEpTT04uc3RyaW5naWZ5KGVycixudWxsLDIpICsgJ2luIGNvbnRleHQ6XFxuJyArIGJ1Zi5qb2luKCcnKSlcbiAgICAgIHJldHVybiByYXcgPyBidWYgOiBidWYuam9pbignJylcbiAgICB9LFxuICAgIGVycjogZnVuY3Rpb24obXNnKSB7XG4gICAgICBlcnIucHVzaChtc2cpO1xuICAgICAgYnVmLnB1c2goJy8qICsrKyBFUlJPUiArKysgJyArIG1zZyArICcgKi9cXG4nKTtcbiAgICB9LFxuICAgIGF0cnVsZTogZnVuY3Rpb24gKHJ1bGUsIGtpbmQsIHBhcmFtLCB0YWtlc0Jsb2NrKSB7XG4gICAgICBidWYucHVzaChydWxlLCBwYXJhbSAmJiAnICcsIHBhcmFtLCB0YWtlc0Jsb2NrID8gJyB7JyA6ICc7JywgX2luc3RhbmNlLmVuZGxpbmUpO1xuICAgIH0sXG4gICAgLy8gY2xvc2UgYXRydWxlXG4gICAgX2F0cnVsZTogZnVuY3Rpb24gKCkge2J1Zi5wdXNoKCd9JywgX2luc3RhbmNlLmVuZGxpbmUpO30sXG4gICAgcnVsZTogZnVuY3Rpb24gKHNlbGVjdG9yKSB7YnVmLnB1c2goc2VsZWN0b3IsICcgeycsIF9pbnN0YW5jZS5lbmRsaW5lKTt9LFxuICAgIC8vIGNsb3NlIHJ1bGVcbiAgICBfcnVsZTogZnVuY3Rpb24gKCkge2J1Zi5wdXNoKCd9JywgX2luc3RhbmNlLmVuZGxpbmUpO30sXG4gICAgZGVjbDogZnVuY3Rpb24gKHByb3AsIHZhbHVlKSB7YnVmLnB1c2gocHJvcCwgcHJvcCAmJiAnOicsIHZhbHVlLCAnOycsIF9pbnN0YW5jZS5lbmRsaW5lKTt9XG4gIH07XG5cbiAgLy8gaG9sZHMgdGhlIGAkZmlsdGVyYCBhbmQgYCRhdGAgaGFuZGxlcnNcbiAgdmFyICRmaWx0ZXJzID0gW2Nsb3NlU2VsZWN0b3JzXTtcbiAgdmFyICRhdEhhbmRsZXJzID0gW107XG5cbiAgLy8gdGhlIHB1YmxpYyBBUEkgKHNlZSB0aGUgbWFpbiBkb2NzKVxuICB2YXIgX2luc3RhbmNlID0ge1xuICAgIGF0OiBhdCxcbiAgICBnbG9iYWw6IGdsb2JhbCxcbiAgICBrdjoga3YsXG4gICAgbmFtZXM6IHt9LFxuICAgIGVuZGxpbmU6ICdcXG4nLFxuICAgIHN1ZmZpeDogJ19fajJjLScgK1xuICAgICAgLy8gMTI4IGJpdHMgb2YgcmFuZG9tbmVzc1xuICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDApLnRvU3RyaW5nKDM2KSArICctJyArXG4gICAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCkudG9TdHJpbmcoMzYpICsgJy0nICtcbiAgICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwKS50b1N0cmluZygzNikgKyAnLScgK1xuICAgICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDApLnRvU3RyaW5nKDM2KSxcbiAgICAkcGx1Z2luczogW10sXG4gICAgc2hlZXQ6IGZ1bmN0aW9uKHRyZWUpIHtcbiAgICAgIHZhciBlbWl0ID0gX2NyZWF0ZU9yUmV0cmlldmVTdHJlYW0oMCk7XG4gICAgICBlbWl0LmluaXQoKTtcbiAgICAgIHJ1bGVzKFxuICAgICAgICBfd2Fsa2Vyc1swXSxcbiAgICAgICAgZW1pdCxcbiAgICAgICAgJycsIC8vIHByZWZpeFxuICAgICAgICB0cmVlLFxuICAgICAgICAxLCAgLy8gbG9jYWwsIGJ5IGRlZmF1bHRcbiAgICAgICAgMCAgIC8vIG5lc3RpbmcgZGVwdGhcbiAgICAgICk7XG5cbiAgICAgIHJldHVybiBlbWl0LmRvbmUoKVxuICAgIH0sXG4gICAgaW5saW5lOiBmdW5jdGlvbiAodHJlZSwgb3B0aW9ucykge1xuICAgICAgdmFyIGVtaXQgPSBfY3JlYXRlT3JSZXRyaWV2ZVN0cmVhbSgxKTtcbiAgICAgIGVtaXQuaW5pdCgpO1xuICAgICAgZGVjbGFyYXRpb25zKFxuICAgICAgICBfd2Fsa2Vyc1sxXSxcbiAgICAgICAgZW1pdCxcbiAgICAgICAgJycsIC8vIHByZWZpeFxuICAgICAgICB0cmVlLFxuICAgICAgICAhKG9wdGlvbnMgJiYgb3B0aW9ucy5nbG9iYWwpICAgLy8gbG9jYWwsIGJ5IGRlZmF1bHRcbiAgICAgICk7XG4gICAgICByZXR1cm4gZW1pdC5kb25lKClcbiAgICB9XG4gIH07XG5cbiAgLy8gVGhlIGBzdGF0ZWAgKGZvciB0aGUgY29yZSBmdW5jdGlvbnMpIC8gYHdhbGtlcmAgKGZvciB0aGUgcGx1Z2lucykgdGFibGVzLlxuICB2YXIgX3dhbGtlcnMgPSBbXG4gICAgLy8gZm9yIGoyYy5zaGVldFxuICAgIHtcbiAgICAgIC8vIGhlbHBlcnMgZm9yIGxvY2FpemluZyBjbGFzcyBhbmQgYW5pbWF0aW9uIG5hbWVzXG4gICAgICBsb2NhbGl6ZVJlcGxhY2VyOiBfbG9jYWxpemVSZXBsYWNlciwgLy8gc2Vjb25kIGFyZ3VtZW50IHRvIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZVxuICAgICAgbG9jYWxpemU6IF9sb2NhbGl6ZSwgICAgICAgICAgICAgICAgIC8vIG1hbmdsZXMgbG9jYWwgbmFtZXNcbiAgICAgIG5hbWVzOiBfaW5zdGFuY2UubmFtZXMsICAgICAgICAgICAgICAvLyBsb2NhbCA9PiBtYW5nbGVkIG1hcHBpbmdcbiAgICAgICRhdEhhbmRsZXJzOiAkYXRIYW5kbGVycywgICAgICAgICAgICAvLyBleHRyYSBhdC1ydWxlc1xuICAgICAgLy8gVGhlIGNvcmUgd2Fsa2VyIG1ldGhvZHMsIHRvIGJlIHByb3ZpZGVkIHRvIHBsdWdpbnNcbiAgICAgIGF0cnVsZTogYXRSdWxlcyxcbiAgICAgIGRlY2w6IGRlY2xhcmF0aW9ucyxcbiAgICAgIHJ1bGU6IHJ1bGVzXG4gICAgfSxcbiAgICAvLyBsaWtld2lzZSwgZm9yIGoyYy5pbmxpbmUgKGlkZW0gd2l0aCBgJGFgLCBgYWAgYW5kIGBzYCByZW1vdmVkKVxuICAgIHtcbiAgICAgIGxvY2FsaXplUmVwbGFjZXI6IF9sb2NhbGl6ZVJlcGxhY2VyLFxuICAgICAgbG9jYWxpemU6IF9sb2NhbGl6ZSxcbiAgICAgIG5hbWVzOiBfaW5zdGFuY2UubmFtZXMsXG4gICAgICBkZWNsOiBkZWNsYXJhdGlvbnNcbiAgICB9XG4gIF07XG5cblxuICAvLyBpbm5lciBoZWxwZXJzXG5cbiAgdmFyIF91c2UgPSBmbGF0SXRlcihmdW5jdGlvbihwbHVnaW4pIHtcbiAgICAvLyBgfm5gIGlzIGZhbHN5IGZvciBgbiA9PT0gLTFgIGFuZCB0cnV0aHkgb3RoZXJ3aXNlLlxuICAgIC8vIFdvcmtzIHdlbGwgdG8gdHVybiB0aGUgIHJlc3VsdCBvZiBgYS5pbmRleE9mKHgpYFxuICAgIC8vIGludG8gYSB2YWx1ZSB0aGF0IHJlZmxlY3RzIHRoZSBwcmVzZW5jZSBvZiBgeGAgaW5cbiAgICAvLyBgYWAuXG4gICAgaWYgKH5faW5zdGFuY2UuJHBsdWdpbnMuaW5kZXhPZihwbHVnaW4pKSByZXR1cm5cblxuICAgIF9pbnN0YW5jZS4kcGx1Z2lucy5wdXNoKHBsdWdpbik7XG5cbiAgICBpZiAodHlwZS5jYWxsKHBsdWdpbikgPT09IEZVTkNUSU9OKSBwbHVnaW4gPSBwbHVnaW4oX2luc3RhbmNlKTtcblxuICAgIGlmICghcGx1Z2luKSByZXR1cm5cblxuICAgIGZsYXRJdGVyKGZ1bmN0aW9uKGZpbHRlcikge1xuICAgICAgJGZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgIH0pKHBsdWdpbi4kZmlsdGVyIHx8IGVtcHR5QXJyYXkpO1xuXG4gICAgZmxhdEl0ZXIoZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgJGF0SGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9KShwbHVnaW4uJGF0IHx8IGVtcHR5QXJyYXkpO1xuXG4gICAgZGVmYXVsdHMoX2luc3RhbmNlLm5hbWVzLCBwbHVnaW4uJG5hbWVzIHx8IGVtcHR5T2JqZWN0KTtcblxuICAgIF91c2UocGx1Z2luLiRwbHVnaW5zIHx8IGVtcHR5QXJyYXkpO1xuXG4gICAgJHNpbmsgPSBwbHVnaW4uJHNpbmsgfHwgJHNpbms7XG5cbiAgICBkZWZhdWx0cyhfaW5zdGFuY2UsIHBsdWdpbik7XG4gIH0pO1xuXG5cbiAgdmFyIF9zdHJlYW1zID0gW107XG4gIC8qKlxuICAgKiByZXR1cm5zIHRoZSBjb2RlZ2VuIHN0cmVhbXMsIGNyZWF0aW5nIHRoZW0gaWYgbmVjZXNzYXJ5XG4gICAqIEBwYXJhbVxuICAgKi9cbiAgZnVuY3Rpb24gX2NyZWF0ZU9yUmV0cmlldmVTdHJlYW0oaW5saW5lKSB7XG4gICAgLy8gYnVpbGQgdGhlIHN0cmVhbSBwcm9jZXNzb3JzIGlmIG5lZWRlZFxuICAgIGlmICghX3N0cmVhbXMubGVuZ3RoKSB7XG4gICAgICAvLyBhcHBlbmQgdGhlICRzaW5rIGFzIHRoZSB1bHRpbWF0ZSBmaWx0ZXJcbiAgICAgICRmaWx0ZXJzLnB1c2goZnVuY3Rpb24oXywgaW5saW5lKSB7cmV0dXJuIGlubGluZSA/IHtpbml0OiRzaW5rLmluaXQsIGRlY2w6JHNpbmsuZGVjbCwgZG9uZTokc2luay5kb25lLCBlcnI6ICRzaW5rLmVycn0gOiAkc2lua30pO1xuICAgICAgZm9yKHZhciBpID0gMDsgaSA8IDI7IGkrKyl7IC8vIDAgZm9yIGoyYy5zaGVldCwgMSBmb3IgajJjLmlubGluZVxuICAgICAgICBmb3IgKHZhciBqID0gJGZpbHRlcnMubGVuZ3RoOyBqLS07KSB7XG4gICAgICAgICAgX3N0cmVhbXNbaV0gPSBmcmVlemUoXG4gICAgICAgICAgICBkZWZhdWx0cyhcbiAgICAgICAgICAgICAgJGZpbHRlcnNbal0oX3N0cmVhbXNbaV0sICEhaSksXG4gICAgICAgICAgICAgIF9zdHJlYW1zW2ldXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX3N0cmVhbXNbaW5saW5lXVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsb2NhbGl6ZWQgdmVyc2lvbiBvZiBhIGdpdmVuIG5hbWUuXG4gICAqIFJlZ2lzdGVycyB0aGUgcGFpciBpbiBgaW5zdG5hY2UubmFtZWAgaWYgbmVlZGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIHRoZSBuYW1lIHRvIGxvY2FsaXplXG4gICAqIEByZXR1cm4ge3N0cmluZ30gLSB0aGUgbG9jYWxpemVkIHZlcnNpb25cbiAgICovXG4gIGZ1bmN0aW9uIF9sb2NhbGl6ZShuYW1lKSB7XG4gICAgaWYgKCFfaW5zdGFuY2UubmFtZXNbbmFtZV0pIF9pbnN0YW5jZS5uYW1lc1tuYW1lXSA9IG5hbWUgKyBfaW5zdGFuY2Uuc3VmZml4O1xuICAgIHJldHVybiBfaW5zdGFuY2UubmFtZXNbbmFtZV0ubWF0Y2goL15cXFMrLylcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGFzIHNlY29uZCBhcmd1bWVudCBmb3Igc3RyLnJlcGxhY2UobG9jYWxpemVSZWdleCwgcmVwbGFjZXIpXG4gICAqIGBpZ25vcmVgLCBgZ2xvYmFsYCBhbmQgYChkb3QsIG5hbWUpYCBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaCAtIHRoZSB3aG9sZSBtYXRjaCAoaWdub3JlZClcbiAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gaWdub3JlIC0gYSBjb21tZW50IG9yIGEgc3RyaW5nIGxpdGVyYWxcbiAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gZ2xvYmFsIC0gYSBnbG9iYWwgbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xudWxsfSBkb3QgLSBlaXRoZXIgJy4nIGZvciBhIGxvY2FsIGNsYXNzIG5hbWUgb3IgdGhlIGVtcHR5IHN0cmluZyBvdGhlcndpc2VcbiAgICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gbmFtZSAtIHRoZSBuYW1lIHRvIGxvY2FsaXplXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIF9sb2NhbGl6ZVJlcGxhY2VyKG1hdGNoLCBpZ25vcmUsIGdsb2JhbCQkMSwgZG90LCBuYW1lKSB7XG4gICAgcmV0dXJuIGlnbm9yZSB8fCBnbG9iYWwkJDEgfHwgZG90ICsgX2xvY2FsaXplKG5hbWUpXG4gIH1cblxuICBfdXNlKGVtcHR5QXJyYXkuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgcmV0dXJuIF9pbnN0YW5jZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGoyYztcbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBwYXJzZVF1ZXJ5U3RyaW5nID0gcmVxdWlyZShcIi4uL3F1ZXJ5c3RyaW5nL3BhcnNlXCIpXG5cbi8vIFJldHVybnMgYHtwYXRoLCBwYXJhbXN9YCBmcm9tIGB1cmxgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVybCkge1xuXHR2YXIgcXVlcnlJbmRleCA9IHVybC5pbmRleE9mKFwiP1wiKVxuXHR2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpXG5cdHZhciBxdWVyeUVuZCA9IGhhc2hJbmRleCA8IDAgPyB1cmwubGVuZ3RoIDogaGFzaEluZGV4XG5cdHZhciBwYXRoRW5kID0gcXVlcnlJbmRleCA8IDAgPyBxdWVyeUVuZCA6IHF1ZXJ5SW5kZXhcblx0dmFyIHBhdGggPSB1cmwuc2xpY2UoMCwgcGF0aEVuZCkucmVwbGFjZSgvXFwvezIsfS9nLCBcIi9cIilcblxuXHRpZiAoIXBhdGgpIHBhdGggPSBcIi9cIlxuXHRlbHNlIHtcblx0XHRpZiAocGF0aFswXSAhPT0gXCIvXCIpIHBhdGggPSBcIi9cIiArIHBhdGhcblx0fVxuXHRyZXR1cm4ge1xuXHRcdHBhdGg6IHBhdGgsXG5cdFx0cGFyYW1zOiBxdWVyeUluZGV4IDwgMFxuXHRcdFx0PyB7fVxuXHRcdFx0OiBwYXJzZVF1ZXJ5U3RyaW5nKHVybC5zbGljZShxdWVyeUluZGV4ICsgMSwgcXVlcnlFbmQpKSxcblx0fVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIHBhcnNlUGF0aG5hbWUgPSByZXF1aXJlKFwiLi9wYXJzZVwiKVxuXG4vLyBDb21waWxlcyBhIHRlbXBsYXRlIGludG8gYSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgcmVzb2x2ZWQgcGF0aCAod2l0aG91dCBxdWVyeVxuLy8gc3RyaW5ncykgYW5kIHJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHRlbXBsYXRlIHBhcmFtZXRlcnMgd2l0aCB0aGVpclxuLy8gcGFyc2VkIHZhbHVlcy4gVGhpcyBleHBlY3RzIHRoZSBpbnB1dCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUgdG8gYmUgdGhlXG4vLyBvdXRwdXQgb2YgYHBhcnNlUGF0aG5hbWVgLiBOb3RlIHRoYXQgaXQgZG9lcyAqbm90KiByZW1vdmUgcXVlcnkgcGFyYW1ldGVyc1xuLy8gc3BlY2lmaWVkIGluIHRoZSB0ZW1wbGF0ZS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGVtcGxhdGUpIHtcblx0dmFyIHRlbXBsYXRlRGF0YSA9IHBhcnNlUGF0aG5hbWUodGVtcGxhdGUpXG5cdHZhciB0ZW1wbGF0ZUtleXMgPSBPYmplY3Qua2V5cyh0ZW1wbGF0ZURhdGEucGFyYW1zKVxuXHR2YXIga2V5cyA9IFtdXG5cdHZhciByZWdleHAgPSBuZXcgUmVnRXhwKFwiXlwiICsgdGVtcGxhdGVEYXRhLnBhdGgucmVwbGFjZShcblx0XHQvLyBJIGVzY2FwZSBsaXRlcmFsIHRleHQgc28gcGVvcGxlIGNhbiB1c2UgdGhpbmdzIGxpa2UgYDpmaWxlLjpleHRgIG9yXG5cdFx0Ly8gYDpsYW5nLTpsb2NhbGVgIGluIHJvdXRlcy4gVGhpcyBpcyBhbGwgbWVyZ2VkIGludG8gb25lIHBhc3Mgc28gSVxuXHRcdC8vIGRvbid0IGFsc28gYWNjaWRlbnRhbGx5IGVzY2FwZSBgLWAgYW5kIG1ha2UgaXQgaGFyZGVyIHRvIGRldGVjdCBpdCB0b1xuXHRcdC8vIGJhbiBpdCBmcm9tIHRlbXBsYXRlIHBhcmFtZXRlcnMuXG5cdFx0LzooW15cXC8uLV0rKShcXC57M318XFwuKD8hXFwuKXwtKT98W1xcXFxeJCorLigpfFxcW1xcXXt9XS9nLFxuXHRcdGZ1bmN0aW9uKG0sIGtleSwgZXh0cmEpIHtcblx0XHRcdGlmIChrZXkgPT0gbnVsbCkgcmV0dXJuIFwiXFxcXFwiICsgbVxuXHRcdFx0a2V5cy5wdXNoKHtrOiBrZXksIHI6IGV4dHJhID09PSBcIi4uLlwifSlcblx0XHRcdGlmIChleHRyYSA9PT0gXCIuLi5cIikgcmV0dXJuIFwiKC4qKVwiXG5cdFx0XHRpZiAoZXh0cmEgPT09IFwiLlwiKSByZXR1cm4gXCIoW14vXSspXFxcXC5cIlxuXHRcdFx0cmV0dXJuIFwiKFteL10rKVwiICsgKGV4dHJhIHx8IFwiXCIpXG5cdFx0fVxuXHQpICsgXCJcXFxcLz8kXCIpXG5cdHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0Ly8gRmlyc3QsIGNoZWNrIHRoZSBwYXJhbXMuIFVzdWFsbHksIHRoZXJlIGlzbid0IGFueSwgYW5kIGl0J3MganVzdFxuXHRcdC8vIGNoZWNraW5nIGEgc3RhdGljIHNldC5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRlbXBsYXRlS2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKHRlbXBsYXRlRGF0YS5wYXJhbXNbdGVtcGxhdGVLZXlzW2ldXSAhPT0gZGF0YS5wYXJhbXNbdGVtcGxhdGVLZXlzW2ldXSkgcmV0dXJuIGZhbHNlXG5cdFx0fVxuXHRcdC8vIElmIG5vIGludGVycG9sYXRpb25zIGV4aXN0LCBsZXQncyBza2lwIGFsbCB0aGUgY2VyZW1vbnlcblx0XHRpZiAoIWtleXMubGVuZ3RoKSByZXR1cm4gcmVnZXhwLnRlc3QoZGF0YS5wYXRoKVxuXHRcdHZhciB2YWx1ZXMgPSByZWdleHAuZXhlYyhkYXRhLnBhdGgpXG5cdFx0aWYgKHZhbHVlcyA9PSBudWxsKSByZXR1cm4gZmFsc2Vcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGRhdGEucGFyYW1zW2tleXNbaV0ua10gPSBrZXlzW2ldLnIgPyB2YWx1ZXNbaSArIDFdIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlc1tpICsgMV0pXG5cdFx0fVxuXHRcdHJldHVybiB0cnVlXG5cdH1cbn1cbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBidWlsZFF1ZXJ5U3RyaW5nID0gcmVxdWlyZShcIi4uL3F1ZXJ5c3RyaW5nL2J1aWxkXCIpXG5cbi8vIFJldHVybnMgYHBhdGhgIGZyb20gYHRlbXBsYXRlYCArIGBwYXJhbXNgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRlbXBsYXRlLCBwYXJhbXMpIHtcblx0aWYgKCgvOihbXlxcL1xcLi1dKykoXFwuezN9KT86LykudGVzdCh0ZW1wbGF0ZSkpIHtcblx0XHR0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUZW1wbGF0ZSBwYXJhbWV0ZXIgbmFtZXMgbXVzdCBiZSBzZXBhcmF0ZWQgYnkgZWl0aGVyIGEgJy8nLCAnLScsIG9yICcuJy5cIilcblx0fVxuXHRpZiAocGFyYW1zID09IG51bGwpIHJldHVybiB0ZW1wbGF0ZVxuXHR2YXIgcXVlcnlJbmRleCA9IHRlbXBsYXRlLmluZGV4T2YoXCI/XCIpXG5cdHZhciBoYXNoSW5kZXggPSB0ZW1wbGF0ZS5pbmRleE9mKFwiI1wiKVxuXHR2YXIgcXVlcnlFbmQgPSBoYXNoSW5kZXggPCAwID8gdGVtcGxhdGUubGVuZ3RoIDogaGFzaEluZGV4XG5cdHZhciBwYXRoRW5kID0gcXVlcnlJbmRleCA8IDAgPyBxdWVyeUVuZCA6IHF1ZXJ5SW5kZXhcblx0dmFyIHBhdGggPSB0ZW1wbGF0ZS5zbGljZSgwLCBwYXRoRW5kKVxuXHR2YXIgcXVlcnkgPSB7fVxuXG5cdE9iamVjdC5hc3NpZ24ocXVlcnksIHBhcmFtcylcblxuXHR2YXIgcmVzb2x2ZWQgPSBwYXRoLnJlcGxhY2UoLzooW15cXC9cXC4tXSspKFxcLnszfSk/L2csIGZ1bmN0aW9uKG0sIGtleSwgdmFyaWFkaWMpIHtcblx0XHRkZWxldGUgcXVlcnlba2V5XVxuXHRcdC8vIElmIG5vIHN1Y2ggcGFyYW1ldGVyIGV4aXN0cywgZG9uJ3QgaW50ZXJwb2xhdGUgaXQuXG5cdFx0aWYgKHBhcmFtc1trZXldID09IG51bGwpIHJldHVybiBtXG5cdFx0Ly8gRXNjYXBlIG5vcm1hbCBwYXJhbWV0ZXJzLCBidXQgbm90IHZhcmlhZGljIG9uZXMuXG5cdFx0cmV0dXJuIHZhcmlhZGljID8gcGFyYW1zW2tleV0gOiBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKHBhcmFtc1trZXldKSlcblx0fSlcblxuXHQvLyBJbiBjYXNlIHRoZSB0ZW1wbGF0ZSBzdWJzdGl0dXRpb24gYWRkcyBuZXcgcXVlcnkvaGFzaCBwYXJhbWV0ZXJzLlxuXHR2YXIgbmV3UXVlcnlJbmRleCA9IHJlc29sdmVkLmluZGV4T2YoXCI/XCIpXG5cdHZhciBuZXdIYXNoSW5kZXggPSByZXNvbHZlZC5pbmRleE9mKFwiI1wiKVxuXHR2YXIgbmV3UXVlcnlFbmQgPSBuZXdIYXNoSW5kZXggPCAwID8gcmVzb2x2ZWQubGVuZ3RoIDogbmV3SGFzaEluZGV4XG5cdHZhciBuZXdQYXRoRW5kID0gbmV3UXVlcnlJbmRleCA8IDAgPyBuZXdRdWVyeUVuZCA6IG5ld1F1ZXJ5SW5kZXhcblx0dmFyIHJlc3VsdCA9IHJlc29sdmVkLnNsaWNlKDAsIG5ld1BhdGhFbmQpXG5cblx0aWYgKHF1ZXJ5SW5kZXggPj0gMCkgcmVzdWx0ICs9IHRlbXBsYXRlLnNsaWNlKHF1ZXJ5SW5kZXgsIHF1ZXJ5RW5kKVxuXHRpZiAobmV3UXVlcnlJbmRleCA+PSAwKSByZXN1bHQgKz0gKHF1ZXJ5SW5kZXggPCAwID8gXCI/XCIgOiBcIiZcIikgKyByZXNvbHZlZC5zbGljZShuZXdRdWVyeUluZGV4LCBuZXdRdWVyeUVuZClcblx0dmFyIHF1ZXJ5c3RyaW5nID0gYnVpbGRRdWVyeVN0cmluZyhxdWVyeSlcblx0aWYgKHF1ZXJ5c3RyaW5nKSByZXN1bHQgKz0gKHF1ZXJ5SW5kZXggPCAwICYmIG5ld1F1ZXJ5SW5kZXggPCAwID8gXCI/XCIgOiBcIiZcIikgKyBxdWVyeXN0cmluZ1xuXHRpZiAoaGFzaEluZGV4ID49IDApIHJlc3VsdCArPSB0ZW1wbGF0ZS5zbGljZShoYXNoSW5kZXgpXG5cdGlmIChuZXdIYXNoSW5kZXggPj0gMCkgcmVzdWx0ICs9IChoYXNoSW5kZXggPCAwID8gXCJcIiA6IFwiJlwiKSArIHJlc29sdmVkLnNsaWNlKG5ld0hhc2hJbmRleClcblx0cmV0dXJuIHJlc3VsdFxufVxuIiwidmFyIG0gPSByZXF1aXJlKCdtaXRocmlsJyk7XG5tb2R1bGUuZXhwb3J0cyA9IG0udHJ1c3QoJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTYgMTljMCAxLjEuOSAyIDIgMmg4YzEuMSAwIDItLjkgMi0yVjdINnYxMnpNMTkgNGgtMy41bC0xLTFoLTVsLTEgMUg1djJoMTRWNHpcIi8+PC9zdmc+Jyk7XG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgVm5vZGUgPSByZXF1aXJlKFwiLi4vcmVuZGVyL3Zub2RlXCIpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaHRtbCkge1xuXHRpZiAoaHRtbCA9PSBudWxsKSBodG1sID0gXCJcIlxuXHRyZXR1cm4gVm5vZGUoXCI8XCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBodG1sLCB1bmRlZmluZWQsIHVuZGVmaW5lZClcbn1cbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBWbm9kZSA9IHJlcXVpcmUoXCIuLi9yZW5kZXIvdm5vZGVcIilcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyZW5kZXIsIHNjaGVkdWxlLCBjb25zb2xlKSB7XG5cdHZhciBzdWJzY3JpcHRpb25zID0gW11cblx0dmFyIHBlbmRpbmcgPSBmYWxzZVxuXHR2YXIgb2Zmc2V0ID0gLTFcblxuXHRmdW5jdGlvbiBzeW5jKCkge1xuXHRcdGZvciAob2Zmc2V0ID0gMDsgb2Zmc2V0IDwgc3Vic2NyaXB0aW9ucy5sZW5ndGg7IG9mZnNldCArPSAyKSB7XG5cdFx0XHR0cnkgeyByZW5kZXIoc3Vic2NyaXB0aW9uc1tvZmZzZXRdLCBWbm9kZShzdWJzY3JpcHRpb25zW29mZnNldCArIDFdKSwgcmVkcmF3KSB9XG5cdFx0XHRjYXRjaCAoZSkgeyBjb25zb2xlLmVycm9yKGUpIH1cblx0XHR9XG5cdFx0b2Zmc2V0ID0gLTFcblx0fVxuXG5cdGZ1bmN0aW9uIHJlZHJhdygpIHtcblx0XHRpZiAoIXBlbmRpbmcpIHtcblx0XHRcdHBlbmRpbmcgPSB0cnVlXG5cdFx0XHRzY2hlZHVsZShmdW5jdGlvbigpIHtcblx0XHRcdFx0cGVuZGluZyA9IGZhbHNlXG5cdFx0XHRcdHN5bmMoKVxuXHRcdFx0fSlcblx0XHR9XG5cdH1cblxuXHRyZWRyYXcuc3luYyA9IHN5bmNcblxuXHRmdW5jdGlvbiBtb3VudChyb290LCBjb21wb25lbnQpIHtcblx0XHRpZiAoY29tcG9uZW50ICE9IG51bGwgJiYgY29tcG9uZW50LnZpZXcgPT0gbnVsbCAmJiB0eXBlb2YgY29tcG9uZW50ICE9PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJtLm1vdW50IGV4cGVjdHMgYSBjb21wb25lbnQsIG5vdCBhIHZub2RlLlwiKVxuXHRcdH1cblxuXHRcdHZhciBpbmRleCA9IHN1YnNjcmlwdGlvbnMuaW5kZXhPZihyb290KVxuXHRcdGlmIChpbmRleCA+PSAwKSB7XG5cdFx0XHRzdWJzY3JpcHRpb25zLnNwbGljZShpbmRleCwgMilcblx0XHRcdGlmIChpbmRleCA8PSBvZmZzZXQpIG9mZnNldCAtPSAyXG5cdFx0XHRyZW5kZXIocm9vdCwgW10pXG5cdFx0fVxuXG5cdFx0aWYgKGNvbXBvbmVudCAhPSBudWxsKSB7XG5cdFx0XHRzdWJzY3JpcHRpb25zLnB1c2gocm9vdCwgY29tcG9uZW50KVxuXHRcdFx0cmVuZGVyKHJvb3QsIFZub2RlKGNvbXBvbmVudCksIHJlZHJhdylcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4ge21vdW50OiBtb3VudCwgcmVkcmF3OiByZWRyYXd9XG59XG4iLCJ2YXIgbSA9IHJlcXVpcmUoJ21pdGhyaWwnKTtcbm1vZHVsZS5leHBvcnRzID0gbS50cnVzdCgnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNNy40MSAxNS40MUwxMiAxMC44M2w0LjU5IDQuNThMMTggMTRsLTYtNi02IDZ6XCIvPjwvc3ZnPicpO1xuIiwiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIFZub2RlID0gcmVxdWlyZShcIi4uL3JlbmRlci92bm9kZVwiKVxudmFyIGh5cGVyc2NyaXB0Vm5vZGUgPSByZXF1aXJlKFwiLi9oeXBlcnNjcmlwdFZub2RlXCIpXG52YXIgaGFzT3duID0gcmVxdWlyZShcIi4uL3V0aWwvaGFzT3duXCIpXG5cbnZhciBzZWxlY3RvclBhcnNlciA9IC8oPzooXnwjfFxcLikoW14jXFwuXFxbXFxdXSspKXwoXFxbKC4rPykoPzpcXHMqPVxccyooXCJ8J3wpKCg/OlxcXFxbXCInXFxdXXwuKSo/KVxcNSk/XFxdKS9nXG52YXIgc2VsZWN0b3JDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuZnVuY3Rpb24gaXNFbXB0eShvYmplY3QpIHtcblx0Zm9yICh2YXIga2V5IGluIG9iamVjdCkgaWYgKGhhc093bi5jYWxsKG9iamVjdCwga2V5KSkgcmV0dXJuIGZhbHNlXG5cdHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVTZWxlY3RvcihzZWxlY3Rvcikge1xuXHR2YXIgbWF0Y2gsIHRhZyA9IFwiZGl2XCIsIGNsYXNzZXMgPSBbXSwgYXR0cnMgPSB7fVxuXHR3aGlsZSAobWF0Y2ggPSBzZWxlY3RvclBhcnNlci5leGVjKHNlbGVjdG9yKSkge1xuXHRcdHZhciB0eXBlID0gbWF0Y2hbMV0sIHZhbHVlID0gbWF0Y2hbMl1cblx0XHRpZiAodHlwZSA9PT0gXCJcIiAmJiB2YWx1ZSAhPT0gXCJcIikgdGFnID0gdmFsdWVcblx0XHRlbHNlIGlmICh0eXBlID09PSBcIiNcIikgYXR0cnMuaWQgPSB2YWx1ZVxuXHRcdGVsc2UgaWYgKHR5cGUgPT09IFwiLlwiKSBjbGFzc2VzLnB1c2godmFsdWUpXG5cdFx0ZWxzZSBpZiAobWF0Y2hbM11bMF0gPT09IFwiW1wiKSB7XG5cdFx0XHR2YXIgYXR0clZhbHVlID0gbWF0Y2hbNl1cblx0XHRcdGlmIChhdHRyVmFsdWUpIGF0dHJWYWx1ZSA9IGF0dHJWYWx1ZS5yZXBsYWNlKC9cXFxcKFtcIiddKS9nLCBcIiQxXCIpLnJlcGxhY2UoL1xcXFxcXFxcL2csIFwiXFxcXFwiKVxuXHRcdFx0aWYgKG1hdGNoWzRdID09PSBcImNsYXNzXCIpIGNsYXNzZXMucHVzaChhdHRyVmFsdWUpXG5cdFx0XHRlbHNlIGF0dHJzW21hdGNoWzRdXSA9IGF0dHJWYWx1ZSA9PT0gXCJcIiA/IGF0dHJWYWx1ZSA6IGF0dHJWYWx1ZSB8fCB0cnVlXG5cdFx0fVxuXHR9XG5cdGlmIChjbGFzc2VzLmxlbmd0aCA+IDApIGF0dHJzLmNsYXNzTmFtZSA9IGNsYXNzZXMuam9pbihcIiBcIilcblx0aWYgKGlzRW1wdHkoYXR0cnMpKSBhdHRycyA9IG51bGxcblx0cmV0dXJuIHNlbGVjdG9yQ2FjaGVbc2VsZWN0b3JdID0ge3RhZzogdGFnLCBhdHRyczogYXR0cnN9XG59XG5cbmZ1bmN0aW9uIGV4ZWNTZWxlY3RvcihzdGF0ZSwgdm5vZGUpIHtcblx0dmFyIGF0dHJzID0gdm5vZGUuYXR0cnNcblx0dmFyIGhhc0NsYXNzID0gaGFzT3duLmNhbGwoYXR0cnMsIFwiY2xhc3NcIilcblx0dmFyIGNsYXNzTmFtZSA9IGhhc0NsYXNzID8gYXR0cnMuY2xhc3MgOiBhdHRycy5jbGFzc05hbWVcblxuXHR2bm9kZS50YWcgPSBzdGF0ZS50YWdcblxuXHRpZiAoc3RhdGUuYXR0cnMgIT0gbnVsbCkge1xuXHRcdGF0dHJzID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cnMsIGF0dHJzKVxuXG5cdFx0aWYgKGNsYXNzTmFtZSAhPSBudWxsIHx8IHN0YXRlLmF0dHJzLmNsYXNzTmFtZSAhPSBudWxsKSBhdHRycy5jbGFzc05hbWUgPVxuXHRcdFx0Y2xhc3NOYW1lICE9IG51bGxcblx0XHRcdFx0PyBzdGF0ZS5hdHRycy5jbGFzc05hbWUgIT0gbnVsbFxuXHRcdFx0XHRcdD8gU3RyaW5nKHN0YXRlLmF0dHJzLmNsYXNzTmFtZSkgKyBcIiBcIiArIFN0cmluZyhjbGFzc05hbWUpXG5cdFx0XHRcdFx0OiBjbGFzc05hbWVcblx0XHRcdFx0OiBzdGF0ZS5hdHRycy5jbGFzc05hbWUgIT0gbnVsbFxuXHRcdFx0XHRcdD8gc3RhdGUuYXR0cnMuY2xhc3NOYW1lXG5cdFx0XHRcdFx0OiBudWxsXG5cdH0gZWxzZSB7XG5cdFx0aWYgKGNsYXNzTmFtZSAhPSBudWxsKSBhdHRycy5jbGFzc05hbWUgPSBjbGFzc05hbWVcblx0fVxuXG5cdGlmIChoYXNDbGFzcykgYXR0cnMuY2xhc3MgPSBudWxsXG5cblx0Ly8gd29ya2Fyb3VuZCBmb3IgIzI2MjIgKHJlb3JkZXIga2V5cyBpbiBhdHRycyB0byBzZXQgXCJ0eXBlXCIgZmlyc3QpXG5cdC8vIFRoZSBET00gZG9lcyB0aGluZ3MgdG8gaW5wdXRzIGJhc2VkIG9uIHRoZSBcInR5cGVcIiwgc28gaXQgbmVlZHMgc2V0IGZpcnN0LlxuXHQvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9NaXRocmlsSlMvbWl0aHJpbC5qcy9pc3N1ZXMvMjYyMlxuXHRpZiAoc3RhdGUudGFnID09PSBcImlucHV0XCIgJiYgaGFzT3duLmNhbGwoYXR0cnMsIFwidHlwZVwiKSkge1xuXHRcdGF0dHJzID0gT2JqZWN0LmFzc2lnbih7dHlwZTogYXR0cnMudHlwZX0sIGF0dHJzKVxuXHR9XG5cblx0Ly8gVGhpcyByZWR1Y2VzIHRoZSBjb21wbGV4aXR5IG9mIHRoZSBldmFsdWF0aW9uIG9mIFwiaXNcIiB3aXRoaW4gdGhlIHJlbmRlciBmdW5jdGlvbi5cblx0dm5vZGUuaXMgPSBhdHRycy5pc1xuXG5cdHZub2RlLmF0dHJzID0gYXR0cnNcblxuXHRyZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gaHlwZXJzY3JpcHQoc2VsZWN0b3IpIHtcblx0aWYgKHNlbGVjdG9yID09IG51bGwgfHwgdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICYmIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBzZWxlY3Rvci52aWV3ICE9PSBcImZ1bmN0aW9uXCIpIHtcblx0XHR0aHJvdyBFcnJvcihcIlRoZSBzZWxlY3RvciBtdXN0IGJlIGVpdGhlciBhIHN0cmluZyBvciBhIGNvbXBvbmVudC5cIik7XG5cdH1cblxuXHR2YXIgdm5vZGUgPSBoeXBlcnNjcmlwdFZub2RlLmFwcGx5KDEsIGFyZ3VtZW50cylcblxuXHRpZiAodHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG5cdFx0dm5vZGUuY2hpbGRyZW4gPSBWbm9kZS5ub3JtYWxpemVDaGlsZHJlbih2bm9kZS5jaGlsZHJlbilcblx0XHRpZiAoc2VsZWN0b3IgIT09IFwiW1wiKSByZXR1cm4gZXhlY1NlbGVjdG9yKHNlbGVjdG9yQ2FjaGVbc2VsZWN0b3JdIHx8IGNvbXBpbGVTZWxlY3RvcihzZWxlY3RvciksIHZub2RlKVxuXHR9XG5cblx0dm5vZGUudGFnID0gc2VsZWN0b3Jcblx0cmV0dXJuIHZub2RlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwZXJzY3JpcHRcbiIsIlwidXNlIHN0cmljdFwiXG5cbmZ1bmN0aW9uIGRlY29kZVVSSUNvbXBvbmVudFNhdmUoc3RyKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIpXG5cdH0gY2F0Y2goZXJyKSB7XG5cdFx0cmV0dXJuIHN0clxuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3RyaW5nKSB7XG5cdGlmIChzdHJpbmcgPT09IFwiXCIgfHwgc3RyaW5nID09IG51bGwpIHJldHVybiB7fVxuXHRpZiAoc3RyaW5nLmNoYXJBdCgwKSA9PT0gXCI/XCIpIHN0cmluZyA9IHN0cmluZy5zbGljZSgxKVxuXG5cdHZhciBlbnRyaWVzID0gc3RyaW5nLnNwbGl0KFwiJlwiKSwgY291bnRlcnMgPSB7fSwgZGF0YSA9IHt9XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBlbnRyeSA9IGVudHJpZXNbaV0uc3BsaXQoXCI9XCIpXG5cdFx0dmFyIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudFNhdmUoZW50cnlbMF0pXG5cdFx0dmFyIHZhbHVlID0gZW50cnkubGVuZ3RoID09PSAyID8gZGVjb2RlVVJJQ29tcG9uZW50U2F2ZShlbnRyeVsxXSkgOiBcIlwiXG5cblx0XHRpZiAodmFsdWUgPT09IFwidHJ1ZVwiKSB2YWx1ZSA9IHRydWVcblx0XHRlbHNlIGlmICh2YWx1ZSA9PT0gXCJmYWxzZVwiKSB2YWx1ZSA9IGZhbHNlXG5cblx0XHR2YXIgbGV2ZWxzID0ga2V5LnNwbGl0KC9cXF1cXFs/fFxcWy8pXG5cdFx0dmFyIGN1cnNvciA9IGRhdGFcblx0XHRpZiAoa2V5LmluZGV4T2YoXCJbXCIpID4gLTEpIGxldmVscy5wb3AoKVxuXHRcdGZvciAodmFyIGogPSAwOyBqIDwgbGV2ZWxzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHR2YXIgbGV2ZWwgPSBsZXZlbHNbal0sIG5leHRMZXZlbCA9IGxldmVsc1tqICsgMV1cblx0XHRcdHZhciBpc051bWJlciA9IG5leHRMZXZlbCA9PSBcIlwiIHx8ICFpc05hTihwYXJzZUludChuZXh0TGV2ZWwsIDEwKSlcblx0XHRcdGlmIChsZXZlbCA9PT0gXCJcIikge1xuXHRcdFx0XHR2YXIga2V5ID0gbGV2ZWxzLnNsaWNlKDAsIGopLmpvaW4oKVxuXHRcdFx0XHRpZiAoY291bnRlcnNba2V5XSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0Y291bnRlcnNba2V5XSA9IEFycmF5LmlzQXJyYXkoY3Vyc29yKSA/IGN1cnNvci5sZW5ndGggOiAwXG5cdFx0XHRcdH1cblx0XHRcdFx0bGV2ZWwgPSBjb3VudGVyc1trZXldKytcblx0XHRcdH1cblx0XHRcdC8vIERpc2FsbG93IGRpcmVjdCBwcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRlbHNlIGlmIChsZXZlbCA9PT0gXCJfX3Byb3RvX19cIikgYnJlYWtcblx0XHRcdGlmIChqID09PSBsZXZlbHMubGVuZ3RoIC0gMSkgY3Vyc29yW2xldmVsXSA9IHZhbHVlXG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Ly8gUmVhZCBvd24gcHJvcGVydGllcyBleGNsdXNpdmVseSB0byBkaXNhbGxvdyBpbmRpcmVjdFxuXHRcdFx0XHQvLyBwcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjdXJzb3IsIGxldmVsKVxuXHRcdFx0XHRpZiAoZGVzYyAhPSBudWxsKSBkZXNjID0gZGVzYy52YWx1ZVxuXHRcdFx0XHRpZiAoZGVzYyA9PSBudWxsKSBjdXJzb3JbbGV2ZWxdID0gZGVzYyA9IGlzTnVtYmVyID8gW10gOiB7fVxuXHRcdFx0XHRjdXJzb3IgPSBkZXNjXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhXG59XG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgZGVsYXllZFJlbW92YWwgPSBuZXcgV2Vha01hcFxuXG5mdW5jdGlvbiAqZG9tRm9yKHZub2RlKSB7XG5cdC8vIFRvIGF2b2lkIHVuaW50ZW5kZWQgbWFuZ2xpbmcgb2YgdGhlIGludGVybmFsIGJ1bmRsZXIsXG5cdC8vIHBhcmFtZXRlciBkZXN0cnVjdHVyaW5nIGlzIG5vdCB1c2VkIGhlcmUuXG5cdHZhciBkb20gPSB2bm9kZS5kb21cblx0dmFyIGRvbVNpemUgPSB2bm9kZS5kb21TaXplXG5cdHZhciBnZW5lcmF0aW9uID0gZGVsYXllZFJlbW92YWwuZ2V0KGRvbSlcblx0aWYgKGRvbSAhPSBudWxsKSBkbyB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZG9tLm5leHRTaWJsaW5nXG5cblx0XHRpZiAoZGVsYXllZFJlbW92YWwuZ2V0KGRvbSkgPT09IGdlbmVyYXRpb24pIHtcblx0XHRcdHlpZWxkIGRvbVxuXHRcdFx0ZG9tU2l6ZS0tXG5cdFx0fVxuXG5cdFx0ZG9tID0gbmV4dFNpYmxpbmdcblx0fVxuXHR3aGlsZSAoZG9tU2l6ZSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGRlbGF5ZWRSZW1vdmFsOiBkZWxheWVkUmVtb3ZhbCxcblx0ZG9tRm9yOiBkb21Gb3IsXG59XG4iLCIvLyBUaGlzIGV4aXN0cyBzbyBJJ20gb25seSBzYXZpbmcgaXQgb25jZS5cblwidXNlIHN0cmljdFwiXG5cbm1vZHVsZS5leHBvcnRzID0ge30uaGFzT3duUHJvcGVydHlcbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBWbm9kZSA9IHJlcXVpcmUoXCIuLi9yZW5kZXIvdm5vZGVcIilcbnZhciBtID0gcmVxdWlyZShcIi4uL3JlbmRlci9oeXBlcnNjcmlwdFwiKVxuXG52YXIgYnVpbGRQYXRobmFtZSA9IHJlcXVpcmUoXCIuLi9wYXRobmFtZS9idWlsZFwiKVxudmFyIHBhcnNlUGF0aG5hbWUgPSByZXF1aXJlKFwiLi4vcGF0aG5hbWUvcGFyc2VcIilcbnZhciBjb21waWxlVGVtcGxhdGUgPSByZXF1aXJlKFwiLi4vcGF0aG5hbWUvY29tcGlsZVRlbXBsYXRlXCIpXG52YXIgY2Vuc29yID0gcmVxdWlyZShcIi4uL3V0aWwvY2Vuc29yXCIpXG5cbmZ1bmN0aW9uIGRlY29kZVVSSUNvbXBvbmVudFNhdmUoY29tcG9uZW50KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChjb21wb25lbnQpXG5cdH0gY2F0Y2goZSkge1xuXHRcdHJldHVybiBjb21wb25lbnRcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCR3aW5kb3csIG1vdW50UmVkcmF3KSB7XG5cdHZhciBjYWxsQXN5bmMgPSAkd2luZG93ID09IG51bGxcblx0XHQvLyBJbiBjYXNlIE1pdGhyaWwuanMnIGxvYWRlZCBnbG9iYWxseSB3aXRob3V0IHRoZSBET00sIGxldCdzIG5vdCBicmVha1xuXHRcdD8gbnVsbFxuXHRcdDogdHlwZW9mICR3aW5kb3cuc2V0SW1tZWRpYXRlID09PSBcImZ1bmN0aW9uXCIgPyAkd2luZG93LnNldEltbWVkaWF0ZSA6ICR3aW5kb3cuc2V0VGltZW91dFxuXHR2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpXG5cblx0dmFyIHNjaGVkdWxlZCA9IGZhbHNlXG5cblx0dmFyIHJlYWR5ID0gZmFsc2Vcblx0dmFyIGhhc0JlZW5SZXNvbHZlZCA9IGZhbHNlXG5cblx0dmFyIGRvbSwgY29tcGlsZWQsIGZhbGxiYWNrUm91dGVcblxuXHR2YXIgY3VycmVudFJlc29sdmVyLCBjb21wb25lbnQsIGF0dHJzLCBjdXJyZW50UGF0aCwgbGFzdFVwZGF0ZVxuXG5cdHZhciBSb3V0ZXJSb290ID0ge1xuXHRcdG9ucmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdHJlYWR5ID0gaGFzQmVlblJlc29sdmVkID0gZmFsc2Vcblx0XHRcdCR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGZpcmVBc3luYywgZmFsc2UpXG5cdFx0fSxcblx0XHR2aWV3OiBmdW5jdGlvbigpIHtcblx0XHRcdC8vIFRoZSByb3V0ZSBoYXMgYWxyZWFkeSBiZWVuIHJlc29sdmVkLlxuXHRcdFx0Ly8gVGhlcmVmb3JlLCB0aGUgZm9sbG93aW5nIGVhcmx5IHJldHVybiBpcyBub3QgbmVlZGVkLlxuXHRcdFx0Ly8gaWYgKCFoYXNCZWVuUmVzb2x2ZWQpIHJldHVyblxuXG5cdFx0XHR2YXIgdm5vZGUgPSBWbm9kZShjb21wb25lbnQsIGF0dHJzLmtleSwgYXR0cnMpXG5cdFx0XHRpZiAoY3VycmVudFJlc29sdmVyKSByZXR1cm4gY3VycmVudFJlc29sdmVyLnJlbmRlcih2bm9kZSlcblx0XHRcdC8vIFdyYXAgaW4gYSBmcmFnbWVudCB0byBwcmVzZXJ2ZSBleGlzdGluZyBrZXkgc2VtYW50aWNzXG5cdFx0XHRyZXR1cm4gW3Zub2RlXVxuXHRcdH0sXG5cdH1cblxuXHR2YXIgU0tJUCA9IHJvdXRlLlNLSVAgPSB7fVxuXG5cdGZ1bmN0aW9uIHJlc29sdmVSb3V0ZSgpIHtcblx0XHRzY2hlZHVsZWQgPSBmYWxzZVxuXHRcdC8vIENvbnNpZGVyIHRoZSBwYXRobmFtZSBob2xpc3RpY2FsbHkuIFRoZSBwcmVmaXggbWlnaHQgZXZlbiBiZSBpbnZhbGlkLFxuXHRcdC8vIGJ1dCB0aGF0J3Mgbm90IG91ciBwcm9ibGVtLlxuXHRcdHZhciBwcmVmaXggPSAkd2luZG93LmxvY2F0aW9uLmhhc2hcblx0XHRpZiAocm91dGUucHJlZml4WzBdICE9PSBcIiNcIikge1xuXHRcdFx0cHJlZml4ID0gJHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyBwcmVmaXhcblx0XHRcdGlmIChyb3V0ZS5wcmVmaXhbMF0gIT09IFwiP1wiKSB7XG5cdFx0XHRcdHByZWZpeCA9ICR3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyBwcmVmaXhcblx0XHRcdFx0aWYgKHByZWZpeFswXSAhPT0gXCIvXCIpIHByZWZpeCA9IFwiL1wiICsgcHJlZml4XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIFRoaXMgc2VlbWluZ2x5IHVzZWxlc3MgYC5jb25jYXQoKWAgc3BlZWRzIHVwIHRoZSB0ZXN0cyBxdWl0ZSBhIGJpdCxcblx0XHQvLyBzaW5jZSB0aGUgcmVwcmVzZW50YXRpb24gaXMgY29uc2lzdGVudGx5IGEgcmVsYXRpdmVseSBwb29ybHlcblx0XHQvLyBvcHRpbWl6ZWQgY29ucyBzdHJpbmcuXG5cdFx0dmFyIHBhdGggPSBwcmVmaXguY29uY2F0KClcblx0XHRcdC5yZXBsYWNlKC8oPzolW2EtZjg5XVthLWYwLTldKSsvZ2ltLCBkZWNvZGVVUklDb21wb25lbnRTYXZlKVxuXHRcdFx0LnNsaWNlKHJvdXRlLnByZWZpeC5sZW5ndGgpXG5cdFx0dmFyIGRhdGEgPSBwYXJzZVBhdGhuYW1lKHBhdGgpXG5cblx0XHRPYmplY3QuYXNzaWduKGRhdGEucGFyYW1zLCAkd2luZG93Lmhpc3Rvcnkuc3RhdGUpXG5cblx0XHRmdW5jdGlvbiByZWplY3QoZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcihlKVxuXHRcdFx0cm91dGUuc2V0KGZhbGxiYWNrUm91dGUsIG51bGwsIHtyZXBsYWNlOiB0cnVlfSlcblx0XHR9XG5cblx0XHRsb29wKDApXG5cdFx0ZnVuY3Rpb24gbG9vcChpKSB7XG5cdFx0XHRmb3IgKDsgaSA8IGNvbXBpbGVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChjb21waWxlZFtpXS5jaGVjayhkYXRhKSkge1xuXHRcdFx0XHRcdHZhciBwYXlsb2FkID0gY29tcGlsZWRbaV0uY29tcG9uZW50XG5cdFx0XHRcdFx0dmFyIG1hdGNoZWRSb3V0ZSA9IGNvbXBpbGVkW2ldLnJvdXRlXG5cdFx0XHRcdFx0dmFyIGxvY2FsQ29tcCA9IHBheWxvYWRcblx0XHRcdFx0XHR2YXIgdXBkYXRlID0gbGFzdFVwZGF0ZSA9IGZ1bmN0aW9uKGNvbXApIHtcblx0XHRcdFx0XHRcdGlmICh1cGRhdGUgIT09IGxhc3RVcGRhdGUpIHJldHVyblxuXHRcdFx0XHRcdFx0aWYgKGNvbXAgPT09IFNLSVApIHJldHVybiBsb29wKGkgKyAxKVxuXHRcdFx0XHRcdFx0Y29tcG9uZW50ID0gY29tcCAhPSBudWxsICYmICh0eXBlb2YgY29tcC52aWV3ID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIGNvbXAgPT09IFwiZnVuY3Rpb25cIik/IGNvbXAgOiBcImRpdlwiXG5cdFx0XHRcdFx0XHRhdHRycyA9IGRhdGEucGFyYW1zLCBjdXJyZW50UGF0aCA9IHBhdGgsIGxhc3RVcGRhdGUgPSBudWxsXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVzb2x2ZXIgPSBwYXlsb2FkLnJlbmRlciA/IHBheWxvYWQgOiBudWxsXG5cdFx0XHRcdFx0XHRpZiAoaGFzQmVlblJlc29sdmVkKSBtb3VudFJlZHJhdy5yZWRyYXcoKVxuXHRcdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGhhc0JlZW5SZXNvbHZlZCA9IHRydWVcblx0XHRcdFx0XHRcdFx0bW91bnRSZWRyYXcubW91bnQoZG9tLCBSb3V0ZXJSb290KVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBUaGVyZSdzIG5vIHVuZGVyc3RhdGluZyBob3cgbXVjaCBJICp3aXNoKiBJIGNvdWxkXG5cdFx0XHRcdFx0Ly8gdXNlIGBhc3luY2AvYGF3YWl0YCBoZXJlLi4uXG5cdFx0XHRcdFx0aWYgKHBheWxvYWQudmlldyB8fCB0eXBlb2YgcGF5bG9hZCA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRwYXlsb2FkID0ge31cblx0XHRcdFx0XHRcdHVwZGF0ZShsb2NhbENvbXApXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKHBheWxvYWQub25tYXRjaCkge1xuXHRcdFx0XHRcdFx0cC50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBheWxvYWQub25tYXRjaChkYXRhLnBhcmFtcywgcGF0aCwgbWF0Y2hlZFJvdXRlKVxuXHRcdFx0XHRcdFx0fSkudGhlbih1cGRhdGUsIHBhdGggPT09IGZhbGxiYWNrUm91dGUgPyBudWxsIDogcmVqZWN0KVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHVwZGF0ZSgvKiBcImRpdlwiICovKVxuXHRcdFx0XHRcdHJldHVyblxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwYXRoID09PSBmYWxsYmFja1JvdXRlKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCByZXNvbHZlIGRlZmF1bHQgcm91dGUgXCIgKyBmYWxsYmFja1JvdXRlICsgXCIuXCIpXG5cdFx0XHR9XG5cdFx0XHRyb3V0ZS5zZXQoZmFsbGJhY2tSb3V0ZSwgbnVsbCwge3JlcGxhY2U6IHRydWV9KVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGZpcmVBc3luYygpIHtcblx0XHRpZiAoIXNjaGVkdWxlZCkge1xuXHRcdFx0c2NoZWR1bGVkID0gdHJ1ZVxuXHRcdFx0Ly8gVE9ETzoganVzdCBkbyBgbW91bnRSZWRyYXcucmVkcmF3KClgIGhlcmUgYW5kIGVsaWRlIHRoZSB0aW1lclxuXHRcdFx0Ly8gZGVwZW5kZW5jeS4gTm90ZSB0aGF0IHRoaXMgd2lsbCBtdWNrIHdpdGggdGVzdHMgYSAqbG90Kiwgc28gaXQnc1xuXHRcdFx0Ly8gbm90IGFzIGVhc3kgb2YgYSBjaGFuZ2UgYXMgaXQgc291bmRzLlxuXHRcdFx0Y2FsbEFzeW5jKHJlc29sdmVSb3V0ZSlcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiByb3V0ZShyb290LCBkZWZhdWx0Um91dGUsIHJvdXRlcykge1xuXHRcdGlmICghcm9vdCkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkRPTSBlbGVtZW50IGJlaW5nIHJlbmRlcmVkIHRvIGRvZXMgbm90IGV4aXN0LlwiKVxuXG5cdFx0Y29tcGlsZWQgPSBPYmplY3Qua2V5cyhyb3V0ZXMpLm1hcChmdW5jdGlvbihyb3V0ZSkge1xuXHRcdFx0aWYgKHJvdXRlWzBdICE9PSBcIi9cIikgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiUm91dGVzIG11c3Qgc3RhcnQgd2l0aCBhICcvJy5cIilcblx0XHRcdGlmICgoLzooW15cXC9cXC4tXSspKFxcLnszfSk/Oi8pLnRlc3Qocm91dGUpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBTeW50YXhFcnJvcihcIlJvdXRlIHBhcmFtZXRlciBuYW1lcyBtdXN0IGJlIHNlcGFyYXRlZCB3aXRoIGVpdGhlciAnLycsICcuJywgb3IgJy0nLlwiKVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0cm91dGU6IHJvdXRlLFxuXHRcdFx0XHRjb21wb25lbnQ6IHJvdXRlc1tyb3V0ZV0sXG5cdFx0XHRcdGNoZWNrOiBjb21waWxlVGVtcGxhdGUocm91dGUpLFxuXHRcdFx0fVxuXHRcdH0pXG5cdFx0ZmFsbGJhY2tSb3V0ZSA9IGRlZmF1bHRSb3V0ZVxuXHRcdGlmIChkZWZhdWx0Um91dGUgIT0gbnVsbCkge1xuXHRcdFx0dmFyIGRlZmF1bHREYXRhID0gcGFyc2VQYXRobmFtZShkZWZhdWx0Um91dGUpXG5cblx0XHRcdGlmICghY29tcGlsZWQuc29tZShmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5jaGVjayhkZWZhdWx0RGF0YSkgfSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiRGVmYXVsdCByb3V0ZSBkb2Vzbid0IG1hdGNoIGFueSBrbm93biByb3V0ZXMuXCIpXG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvbSA9IHJvb3RcblxuXHRcdCR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGZpcmVBc3luYywgZmFsc2UpXG5cblx0XHRyZWFkeSA9IHRydWVcblxuXHRcdC8vIFRoZSBSb3V0ZXJSb290IGNvbXBvbmVudCBpcyBtb3VudGVkIHdoZW4gdGhlIHJvdXRlIGlzIGZpcnN0IHJlc29sdmVkLlxuXHRcdHJlc29sdmVSb3V0ZSgpXG5cdH1cblx0cm91dGUuc2V0ID0gZnVuY3Rpb24ocGF0aCwgZGF0YSwgb3B0aW9ucykge1xuXHRcdGlmIChsYXN0VXBkYXRlICE9IG51bGwpIHtcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cdFx0XHRvcHRpb25zLnJlcGxhY2UgPSB0cnVlXG5cdFx0fVxuXHRcdGxhc3RVcGRhdGUgPSBudWxsXG5cblx0XHRwYXRoID0gYnVpbGRQYXRobmFtZShwYXRoLCBkYXRhKVxuXHRcdGlmIChyZWFkeSkge1xuXHRcdFx0ZmlyZUFzeW5jKClcblx0XHRcdHZhciBzdGF0ZSA9IG9wdGlvbnMgPyBvcHRpb25zLnN0YXRlIDogbnVsbFxuXHRcdFx0dmFyIHRpdGxlID0gb3B0aW9ucyA/IG9wdGlvbnMudGl0bGUgOiBudWxsXG5cdFx0XHRpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlcGxhY2UpICR3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGUsIHRpdGxlLCByb3V0ZS5wcmVmaXggKyBwYXRoKVxuXHRcdFx0ZWxzZSAkd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHN0YXRlLCB0aXRsZSwgcm91dGUucHJlZml4ICsgcGF0aClcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHQkd2luZG93LmxvY2F0aW9uLmhyZWYgPSByb3V0ZS5wcmVmaXggKyBwYXRoXG5cdFx0fVxuXHR9XG5cdHJvdXRlLmdldCA9IGZ1bmN0aW9uKCkge3JldHVybiBjdXJyZW50UGF0aH1cblx0cm91dGUucHJlZml4ID0gXCIjIVwiXG5cdHJvdXRlLkxpbmsgPSB7XG5cdFx0dmlldzogZnVuY3Rpb24odm5vZGUpIHtcblx0XHRcdC8vIE9taXQgdGhlIHVzZWQgcGFyYW1ldGVycyBmcm9tIHRoZSByZW5kZXJlZCBlbGVtZW50IC0gdGhleSBhcmVcblx0XHRcdC8vIGludGVybmFsLiBBbHNvLCBjZW5zb3IgdGhlIHZhcmlvdXMgbGlmZWN5Y2xlIG1ldGhvZHMuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gV2UgZG9uJ3Qgc3RyaXAgdGhlIG90aGVyIHBhcmFtZXRlcnMgYmVjYXVzZSBmb3IgY29udmVuaWVuY2Ugd2Vcblx0XHRcdC8vIGxldCB0aGVtIGJlIHNwZWNpZmllZCBpbiB0aGUgc2VsZWN0b3IgYXMgd2VsbC5cblx0XHRcdHZhciBjaGlsZCA9IG0oXG5cdFx0XHRcdHZub2RlLmF0dHJzLnNlbGVjdG9yIHx8IFwiYVwiLFxuXHRcdFx0XHRjZW5zb3Iodm5vZGUuYXR0cnMsIFtcIm9wdGlvbnNcIiwgXCJwYXJhbXNcIiwgXCJzZWxlY3RvclwiLCBcIm9uY2xpY2tcIl0pLFxuXHRcdFx0XHR2bm9kZS5jaGlsZHJlblxuXHRcdFx0KVxuXHRcdFx0dmFyIG9wdGlvbnMsIG9uY2xpY2ssIGhyZWZcblxuXHRcdFx0Ly8gTGV0J3MgcHJvdmlkZSBhICpyaWdodCogd2F5IHRvIGRpc2FibGUgYSByb3V0ZSBsaW5rLCByYXRoZXIgdGhhblxuXHRcdFx0Ly8gbGV0dGluZyBwZW9wbGUgc2NyZXcgdXAgYWNjZXNzaWJpbGl0eSBvbiBhY2NpZGVudC5cblx0XHRcdC8vXG5cdFx0XHQvLyBUaGUgYXR0cmlidXRlIGlzIGNvZXJjZWQgc28gdXNlcnMgZG9uJ3QgZ2V0IHN1cnByaXNlZCBvdmVyXG5cdFx0XHQvLyBgZGlzYWJsZWQ6IDBgIHJlc3VsdGluZyBpbiBhIGJ1dHRvbiB0aGF0J3Mgc29tZWhvdyByb3V0YWJsZVxuXHRcdFx0Ly8gZGVzcGl0ZSBiZWluZyB2aXNpYmx5IGRpc2FibGVkLlxuXHRcdFx0aWYgKGNoaWxkLmF0dHJzLmRpc2FibGVkID0gQm9vbGVhbihjaGlsZC5hdHRycy5kaXNhYmxlZCkpIHtcblx0XHRcdFx0Y2hpbGQuYXR0cnMuaHJlZiA9IG51bGxcblx0XHRcdFx0Y2hpbGQuYXR0cnNbXCJhcmlhLWRpc2FibGVkXCJdID0gXCJ0cnVlXCJcblx0XHRcdFx0Ly8gSWYgeW91ICpyZWFsbHkqIGRvIHdhbnQgYWRkIGBvbmNsaWNrYCBvbiBhIGRpc2FibGVkIGxpbmssIHVzZVxuXHRcdFx0XHQvLyBhbiBgb25jcmVhdGVgIGhvb2sgdG8gYWRkIGl0LlxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0aW9ucyA9IHZub2RlLmF0dHJzLm9wdGlvbnNcblx0XHRcdFx0b25jbGljayA9IHZub2RlLmF0dHJzLm9uY2xpY2tcblx0XHRcdFx0Ly8gRWFzaWVyIHRvIGJ1aWxkIGl0IG5vdyB0byBrZWVwIGl0IGlzb21vcnBoaWMuXG5cdFx0XHRcdGhyZWYgPSBidWlsZFBhdGhuYW1lKGNoaWxkLmF0dHJzLmhyZWYsIHZub2RlLmF0dHJzLnBhcmFtcylcblx0XHRcdFx0Y2hpbGQuYXR0cnMuaHJlZiA9IHJvdXRlLnByZWZpeCArIGhyZWZcblx0XHRcdFx0Y2hpbGQuYXR0cnMub25jbGljayA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHR2YXIgcmVzdWx0XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBvbmNsaWNrID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IG9uY2xpY2suY2FsbChlLmN1cnJlbnRUYXJnZXQsIGUpXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChvbmNsaWNrID09IG51bGwgfHwgdHlwZW9mIG9uY2xpY2sgIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0XHRcdC8vIGRvIG5vdGhpbmdcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBvbmNsaWNrLmhhbmRsZUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdG9uY2xpY2suaGFuZGxlRXZlbnQoZSlcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBBZGFwdGVkIGZyb20gUmVhY3QgUm91dGVyJ3MgaW1wbGVtZW50YXRpb246XG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvcmVhY3Qtcm91dGVyL2Jsb2IvNTIwYTBhY2Q0OGFlMWIwNjZlYjBiMDdkNmQ0ZDE3OTBhMWQwMjQ4Mi9wYWNrYWdlcy9yZWFjdC1yb3V0ZXItZG9tL21vZHVsZXMvTGluay5qc1xuXHRcdFx0XHRcdC8vXG5cdFx0XHRcdFx0Ly8gVHJ5IHRvIGJlIGZsZXhpYmxlIGFuZCBpbnR1aXRpdmUgaW4gaG93IHdlIGhhbmRsZSBsaW5rcy5cblx0XHRcdFx0XHQvLyBGdW4gZmFjdDogbGlua3MgYXJlbid0IGFzIG9idmlvdXMgdG8gZ2V0IHJpZ2h0IGFzIHlvdVxuXHRcdFx0XHRcdC8vIHdvdWxkIGV4cGVjdC4gVGhlcmUncyBhIGxvdCBtb3JlIHZhbGlkIHdheXMgdG8gY2xpY2sgYVxuXHRcdFx0XHRcdC8vIGxpbmsgdGhhbiB0aGlzLCBhbmQgb25lIG1pZ2h0IHdhbnQgdG8gbm90IHNpbXBseSBjbGljayBhXG5cdFx0XHRcdFx0Ly8gbGluaywgYnV0IHJpZ2h0IGNsaWNrIG9yIGNvbW1hbmQtY2xpY2sgaXQgdG8gY29weSB0aGVcblx0XHRcdFx0XHQvLyBsaW5rIHRhcmdldCwgZXRjLiBOb3BlLCB0aGlzIGlzbid0IGp1c3QgZm9yIGJsaW5kIHBlb3BsZS5cblx0XHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0XHQvLyBTa2lwIGlmIGBvbmNsaWNrYCBwcmV2ZW50ZWQgZGVmYXVsdFxuXHRcdFx0XHRcdFx0cmVzdWx0ICE9PSBmYWxzZSAmJiAhZS5kZWZhdWx0UHJldmVudGVkICYmXG5cdFx0XHRcdFx0XHQvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3Ncblx0XHRcdFx0XHRcdChlLmJ1dHRvbiA9PT0gMCB8fCBlLndoaWNoID09PSAwIHx8IGUud2hpY2ggPT09IDEpICYmXG5cdFx0XHRcdFx0XHQvLyBMZXQgdGhlIGJyb3dzZXIgaGFuZGxlIGB0YXJnZXQ9X2JsYW5rYCwgZXRjLlxuXHRcdFx0XHRcdFx0KCFlLmN1cnJlbnRUYXJnZXQudGFyZ2V0IHx8IGUuY3VycmVudFRhcmdldC50YXJnZXQgPT09IFwiX3NlbGZcIikgJiZcblx0XHRcdFx0XHRcdC8vIE5vIG1vZGlmaWVyIGtleXNcblx0XHRcdFx0XHRcdCFlLmN0cmxLZXkgJiYgIWUubWV0YUtleSAmJiAhZS5zaGlmdEtleSAmJiAhZS5hbHRLZXlcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKVxuXHRcdFx0XHRcdFx0ZS5yZWRyYXcgPSBmYWxzZVxuXHRcdFx0XHRcdFx0cm91dGUuc2V0KGhyZWYsIG51bGwsIG9wdGlvbnMpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY2hpbGRcblx0XHR9LFxuXHR9XG5cdHJvdXRlLnBhcmFtID0gZnVuY3Rpb24oa2V5KSB7XG5cdFx0cmV0dXJuIGF0dHJzICYmIGtleSAhPSBudWxsID8gYXR0cnNba2V5XSA6IGF0dHJzXG5cdH1cblxuXHRyZXR1cm4gcm91dGVcbn1cbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBtb3VudFJlZHJhdyA9IHJlcXVpcmUoXCIuL21vdW50LXJlZHJhd1wiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2FwaS9yb3V0ZXJcIikodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IG51bGwsIG1vdW50UmVkcmF3KVxuIiwiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIGh5cGVyc2NyaXB0ID0gcmVxdWlyZShcIi4vaHlwZXJzY3JpcHRcIilcbnZhciByZXF1ZXN0ID0gcmVxdWlyZShcIi4vcmVxdWVzdFwiKVxudmFyIG1vdW50UmVkcmF3ID0gcmVxdWlyZShcIi4vbW91bnQtcmVkcmF3XCIpXG52YXIgZG9tRm9yID0gcmVxdWlyZShcIi4vcmVuZGVyL2RvbUZvclwiKVxuXG52YXIgbSA9IGZ1bmN0aW9uIG0oKSB7IHJldHVybiBoeXBlcnNjcmlwdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIH1cbm0ubSA9IGh5cGVyc2NyaXB0XG5tLnRydXN0ID0gaHlwZXJzY3JpcHQudHJ1c3Rcbm0uZnJhZ21lbnQgPSBoeXBlcnNjcmlwdC5mcmFnbWVudFxubS5GcmFnbWVudCA9IFwiW1wiXG5tLm1vdW50ID0gbW91bnRSZWRyYXcubW91bnRcbm0ucm91dGUgPSByZXF1aXJlKFwiLi9yb3V0ZVwiKVxubS5yZW5kZXIgPSByZXF1aXJlKFwiLi9yZW5kZXJcIilcbm0ucmVkcmF3ID0gbW91bnRSZWRyYXcucmVkcmF3XG5tLnJlcXVlc3QgPSByZXF1ZXN0LnJlcXVlc3Rcbm0ucGFyc2VRdWVyeVN0cmluZyA9IHJlcXVpcmUoXCIuL3F1ZXJ5c3RyaW5nL3BhcnNlXCIpXG5tLmJ1aWxkUXVlcnlTdHJpbmcgPSByZXF1aXJlKFwiLi9xdWVyeXN0cmluZy9idWlsZFwiKVxubS5wYXJzZVBhdGhuYW1lID0gcmVxdWlyZShcIi4vcGF0aG5hbWUvcGFyc2VcIilcbm0uYnVpbGRQYXRobmFtZSA9IHJlcXVpcmUoXCIuL3BhdGhuYW1lL2J1aWxkXCIpXG5tLnZub2RlID0gcmVxdWlyZShcIi4vcmVuZGVyL3Zub2RlXCIpXG5tLmNlbnNvciA9IHJlcXVpcmUoXCIuL3V0aWwvY2Vuc29yXCIpXG5tLmRvbUZvciA9IGRvbUZvci5kb21Gb3JcblxubW9kdWxlLmV4cG9ydHMgPSBtXG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgbW91bnRSZWRyYXcgPSByZXF1aXJlKFwiLi9tb3VudC1yZWRyYXdcIilcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9yZXF1ZXN0L3JlcXVlc3RcIikodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IG51bGwsIG1vdW50UmVkcmF3LnJlZHJhdylcbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBWbm9kZSA9IHJlcXVpcmUoXCIuLi9yZW5kZXIvdm5vZGVcIilcbnZhciBoeXBlcnNjcmlwdFZub2RlID0gcmVxdWlyZShcIi4vaHlwZXJzY3JpcHRWbm9kZVwiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdm5vZGUgPSBoeXBlcnNjcmlwdFZub2RlLmFwcGx5KDAsIGFyZ3VtZW50cylcblxuXHR2bm9kZS50YWcgPSBcIltcIlxuXHR2bm9kZS5jaGlsZHJlbiA9IFZub2RlLm5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLmNoaWxkcmVuKVxuXHRyZXR1cm4gdm5vZGVcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pO1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG5cbiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuXG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxuLy8gQHRzLWNoZWNrXG52YXIgbW9kZXMgPSB7XG4gIGhpZGRlbjogXCJoaWRkZW5cIixcbiAgdmlzaWJsZTogXCJ2aXNpYmxlXCIsXG4gIGV4cG9zaW5nOiBcImV4cG9zaW5nXCIsXG4gIGhpZGluZzogXCJoaWRpbmdcIlxufTtcbnZhciBfQ29uZGl0aW9uYWwgPSBmdW5jdGlvbiBfQ29uZGl0aW9uYWwoX3JlZikge1xuICB2YXIgaCA9IF9yZWYuaCxcbiAgICAgIHVzZVN0YXRlID0gX3JlZi51c2VTdGF0ZSxcbiAgICAgIHVzZUVmZmVjdCA9IF9yZWYudXNlRWZmZWN0LFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiaFwiLCBcInVzZVN0YXRlXCIsIFwidXNlRWZmZWN0XCJdKTtcblxuICB2YXIgaW5pdGlhbE1vZGUgPSBwcm9wcy5wZXJtYW5lbnQgPyBtb2Rlcy52aXNpYmxlIDogcHJvcHMucGVybWFuZW50IHx8IHByb3BzLnNob3cgPyBtb2Rlcy52aXNpYmxlIDogbW9kZXMuaGlkZGVuO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZShpbml0aWFsTW9kZSksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIG1vZGUgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0TW9kZSA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmV3TW9kZSA9IG1vZGU7XG5cbiAgICBpZiAocHJvcHMucGVybWFuZW50KSB7XG4gICAgICBpZiAobW9kZSA9PT0gbW9kZXMudmlzaWJsZSAmJiBwcm9wcy5zaG93KSB7XG4gICAgICAgIG5ld01vZGUgPSBtb2Rlcy5leHBvc2luZztcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gbW9kZXMuZXhwb3NpbmcgJiYgIXByb3BzLnNob3cpIHtcbiAgICAgICAgbmV3TW9kZSA9IG1vZGVzLmhpZGluZztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gXCJub3JtYWxcIiB0eXBlXG4gICAgICBpZiAobW9kZSA9PT0gbW9kZXMuaGlkZGVuICYmIHByb3BzLnNob3cpIHtcbiAgICAgICAgbmV3TW9kZSA9IG1vZGVzLnZpc2libGU7XG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09IG1vZGVzLnZpc2libGUgJiYgIXByb3BzLnNob3cpIHtcbiAgICAgICAgbmV3TW9kZSA9IG1vZGVzLmhpZGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmV3TW9kZSAhPT0gbW9kZSkge1xuICAgICAgc2V0TW9kZShuZXdNb2RlKTtcbiAgICB9XG4gIH0sIFtwcm9wc10pO1xuICB2YXIgcGxhY2Vob2xkZXIgPSBoKFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBwcm9wcy5wbGFjZWhvbGRlckNsYXNzTmFtZVxuICB9KTsgLy8gTm8gZGlkSGlkZSBjYWxsYmFjayBwYXNzZWQ6IHVzZSBub3JtYWwgdmlzaWJpbGl0eSBldmFsdWF0aW9uXG5cbiAgaWYgKCFwcm9wcy5kaWRIaWRlKSB7XG4gICAgcmV0dXJuIHByb3BzLnBlcm1hbmVudCB8fCBwcm9wcy5pbmFjdGl2ZSB8fCBwcm9wcy5zaG93ID8gaChwcm9wcy5pbnN0YW5jZSwgcHJvcHMpIDogcGxhY2Vob2xkZXI7XG4gIH1cblxuICB2YXIgdmlzaWJsZSA9IG1vZGUgIT09IG1vZGVzLmhpZGRlbjtcbiAgcmV0dXJuIHZpc2libGUgPyBoKHByb3BzLmluc3RhbmNlLCBfb2JqZWN0U3ByZWFkMih7fSwgcHJvcHMsIHtcbiAgICBkaWRIaWRlOlxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7YW55fSBhcmdzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlkSGlkZShhcmdzKSB7XG4gICAgICByZXR1cm4gcHJvcHMuZGlkSGlkZShhcmdzKSwgc2V0TW9kZShwcm9wcy5wZXJtYW5lbnQgPyBtb2Rlcy52aXNpYmxlIDogbW9kZXMuaGlkZGVuKTtcbiAgICB9XG4gIH0sIG1vZGUgPT09IG1vZGVzLmhpZGluZyA/IHtcbiAgICBzaG93OiB0cnVlLFxuICAgIGhpZGU6IHRydWVcbiAgfSA6IHVuZGVmaW5lZCkpIDogcGxhY2Vob2xkZXI7XG59O1xuXG4vLyBAdHMtY2hlY2tcblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnQgXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhcmFtcy5vcHRpb25dXG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhcmFtcy5uZXdPcHRpb25dXG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhcmFtcy5uZXdPcHRpb25dXG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhcmFtcy5uZXdDb21wb25lbnRdXG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhcmFtcy5zaW5jZV1cbiAqL1xudmFyIGRlcHJlY2F0aW9uID0gZnVuY3Rpb24gZGVwcmVjYXRpb24oY29tcG9uZW50LCBfcmVmKSB7XG4gIHZhciBvcHRpb24gPSBfcmVmLm9wdGlvbixcbiAgICAgIG5ld09wdGlvbiA9IF9yZWYubmV3T3B0aW9uLFxuICAgICAgbmV3Q29tcG9uZW50ID0gX3JlZi5uZXdDb21wb25lbnQsXG4gICAgICBzaW5jZSA9IF9yZWYuc2luY2U7XG4gIHZhciB2ZXJzaW9uID0gc2luY2UgPyBcIlNpbmNlIHZlcnNpb24gXCIuY29uY2F0KHNpbmNlLCBcIi5cIikgOiBcIlwiO1xuICByZXR1cm4gb3B0aW9uICYmIGNvbnNvbGUud2FybihcIlwiLmNvbmNhdChjb21wb25lbnQsIFwiOiBvcHRpb24gJ1wiKS5jb25jYXQob3B0aW9uLCBcIicgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGxhdGVyIHZlcnNpb25zLiBVc2UgJ1wiKS5jb25jYXQobmV3T3B0aW9uLCBcIicgaW5zdGVhZC4gXCIpLmNvbmNhdCh2ZXJzaW9uKSksIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICBuZXdDb21wb25lbnQgJiYgIW5ld09wdGlvbiAmJiBjb25zb2xlLndhcm4oXCJcIi5jb25jYXQoY29tcG9uZW50LCBcIjogdGhpcyBjb21wb25lbnQgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGxhdGVyIHZlcnNpb25zLiBVc2UgY29tcG9uZW50ICdcIikuY29uY2F0KG5ld0NvbXBvbmVudCwgXCInIGluc3RlYWQuIFwiKS5jb25jYXQodmVyc2lvbikpLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgbmV3Q29tcG9uZW50ICYmIG5ld09wdGlvbiAmJiBjb25zb2xlLndhcm4oXCJcIi5jb25jYXQoY29tcG9uZW50LCBcIjogdGhpcyBjb21wb25lbnQgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGxhdGVyIHZlcnNpb25zLiBVc2UgY29tcG9uZW50ICdcIikuY29uY2F0KG5ld0NvbXBvbmVudCwgXCInIHdpdGggb3B0aW9uICdcIikuY29uY2F0KG5ld09wdGlvbiwgXCInIGluc3RlYWQuIFwiKS5jb25jYXQodmVyc2lvbikpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICA7XG59O1xuXG4vLyBAdHMtY2hlY2tcblxuLyoqXG4gKiBSZWR1Y2VyIGhlbHBlciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7b2JqZWN0fSBhY2MgXG4gKiBAcGFyYW0ge3N0cmluZ30gcCBcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbnZhciByID0gZnVuY3Rpb24gcihhY2MsIHApIHtcbiAgcmV0dXJuIGFjY1twXSA9IDEsIGFjYztcbn07XG4vKipcbiAqIExpc3Qgb2YgZGVmYXVsdCBhdHRyaWJ1dGVzLlxuICogU2VwYXJhdGVseSBoYW5kbGVkOlxuICogLSBjbGFzc1xuICogLSBlbGVtZW50XG4gKiBAdHlwZSBBcnJheTxzdHJpbmc+IGRlZmF1bHRBdHRyc1xuICovXG5cblxudmFyIGRlZmF1bHRBdHRycyA9IFsvLyBVbml2ZXJzYWxcblwia2V5XCIsIFwic3R5bGVcIiwgXCJocmVmXCIsIFwiaWRcIiwgXCJkYXRhLWluZGV4XCIsIC8vIFJlYWN0XG5cInRhYkluZGV4XCIsIC8vIE1pdGhyaWxcblwidGFiaW5kZXhcIiwgXCJvbmluaXRcIiwgXCJvbmNyZWF0ZVwiLCBcIm9udXBkYXRlXCIsIFwib25iZWZvcmVyZW1vdmVcIiwgXCJvbnJlbW92ZVwiLCBcIm9uYmVmb3JldXBkYXRlXCJdO1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7e1tzOiBzdHJpbmddOiBzdHJpbmd9fSBhdHRycyBcbiAqIEBwYXJhbSB7b2JqZWN0fSBbbW9kaWZpY2F0aW9uc10gXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IFttb2RpZmljYXRpb25zLmFkZF1cbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gW21vZGlmaWNhdGlvbnMucmVtb3ZlXVxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG52YXIgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyA9IGZ1bmN0aW9uIGZpbHRlclN1cHBvcnRlZEF0dHJpYnV0ZXMoYXR0cnMpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgYWRkID0gX3JlZi5hZGQsXG4gICAgICByZW1vdmUgPSBfcmVmLnJlbW92ZTtcblxuICAvKipcbiAgICogQHR5cGUge3tbczogc3RyaW5nXTogc3RyaW5nfX0gcmVtb3ZlTG9va3VwIFxuICAgKi9cbiAgdmFyIHJlbW92ZUxvb2t1cCA9IHJlbW92ZSA/IHJlbW92ZS5yZWR1Y2Uociwge30pIDoge307XG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8c3RyaW5nPn0gYXR0cnNMaXN0IFxuICAgKi9cblxuICB2YXIgYXR0cnNMaXN0ID0gYWRkID8gZGVmYXVsdEF0dHJzLmNvbmNhdChhZGQpIDogZGVmYXVsdEF0dHJzO1xuICB2YXIgc3VwcG9ydGVkID0gYXR0cnNMaXN0LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiAhcmVtb3ZlTG9va3VwW2l0ZW1dO1xuICB9KS5yZWR1Y2Uociwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cnMpLnJlZHVjZShcbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBhY2NcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKi9cbiAgZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgcmV0dXJuIHN1cHBvcnRlZFtrZXldID8gYWNjW2tleV0gPSBhdHRyc1trZXldIDogbnVsbCwgYWNjO1xuICB9LCB7fSk7XG59O1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufSBhdHRycyBcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxudmFyIHVucGFja0F0dHJzID0gZnVuY3Rpb24gdW5wYWNrQXR0cnMoYXR0cnMpIHtcbiAgcmV0dXJuIHR5cGVvZiBhdHRycyA9PT0gXCJmdW5jdGlvblwiID8gYXR0cnMoKSA6IGF0dHJzO1xufTtcbi8qKlxuICogXG4gKiBAcGFyYW0ge3tbczogc3RyaW5nXTogc3RyaW5nfX0gY2xhc3NlcyBcbiAqIEByZXR1cm5zIHt7W3M6IHN0cmluZ106IHN0cmluZ319XG4gKi9cblxudmFyIHNpemVDbGFzc2VzID0gZnVuY3Rpb24gc2l6ZUNsYXNzZXMoY2xhc3Nlcykge1xuICByZXR1cm4ge1xuICAgIHNtYWxsOiBjbGFzc2VzLnNtYWxsLFxuICAgIHJlZ3VsYXI6IGNsYXNzZXMucmVndWxhcixcbiAgICBtZWRpdW06IGNsYXNzZXMubWVkaXVtLFxuICAgIGxhcmdlOiBjbGFzc2VzLmxhcmdlLFxuICAgIGZhYjogY2xhc3Nlcy5mYWJcbiAgfTtcbn07XG4vKipcbiAqIFxuICogQHBhcmFtIHt7W3M6IHN0cmluZ106IHN0cmluZ319IGNsYXNzZXMgXG4gKiBAcGFyYW0ge3N0cmluZ30gW3NpemVdIFxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5cbnZhciBjbGFzc0ZvclNpemUgPSBmdW5jdGlvbiBjbGFzc0ZvclNpemUoY2xhc3Nlcykge1xuICB2YXIgc2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogXCJyZWd1bGFyXCI7XG4gIHJldHVybiBzaXplQ2xhc3NlcyhjbGFzc2VzKVtzaXplXTtcbn07XG5cbnZhciBpc0NsaWVudCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbnZhciBpc1NlcnZlciA9ICFpc0NsaWVudDtcblxuLy8gQHRzLWNoZWNrXG4vKipcbiAqIEB0eXBlIHt7W3M6IHN0cmluZ106IHN0cmluZ319IGV2dHNcbiAqL1xuXG52YXIgZXZ0cyA9IHtcbiAgXCJhbmltYXRpb25cIjogXCJhbmltYXRpb25lbmRcIixcbiAgXCJPQW5pbWF0aW9uXCI6IFwib0FuaW1hdGlvbkVuZFwiLFxuICBcIk1vekFuaW1hdGlvblwiOiBcImFuaW1hdGlvbmVuZFwiLFxuICBcIldlYmtpdEFuaW1hdGlvblwiOiBcIndlYmtpdEFuaW1hdGlvbkVuZFwiXG59O1xudmFyIGdldEFuaW1hdGlvbkVuZEV2ZW50ID0gZnVuY3Rpb24gZ2V0QW5pbWF0aW9uRW5kRXZlbnQoKSB7XG4gIGlmIChpc0NsaWVudCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmYWtlZWxlbWVudFwiKTtcbiAgICAvKipcbiAgICAgKiBAdHlwZSB7c3RyaW5nfSBhXG4gICAgICovXG5cbiAgICBmb3IgKHZhciBhIGluIGV2dHMpIHtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge29iamVjdH0gc3R5bGVcbiAgICAgICAqL1xuICAgICAgdmFyIHN0eWxlID0gZWwuc3R5bGU7XG5cbiAgICAgIGlmIChzdHlsZVthXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBldnRzW2FdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLy8gQHRzLWNoZWNrXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcy5lbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhcmFtcy5zZWxlY3Rvcl1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLnBzZXVkb1NlbGVjdG9yXVxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5wcm9wXG4gKiBAcmV0dXJucyB7b2JqZWN0fHVuZGVmaW5lZH1cbiAqL1xudmFyIGdldFN0eWxlID0gZnVuY3Rpb24gZ2V0U3R5bGUoX3JlZikge1xuICB2YXIgZWxlbWVudCA9IF9yZWYuZWxlbWVudCxcbiAgICAgIHNlbGVjdG9yID0gX3JlZi5zZWxlY3RvcixcbiAgICAgIHBzZXVkb1NlbGVjdG9yID0gX3JlZi5wc2V1ZG9TZWxlY3RvcixcbiAgICAgIHByb3AgPSBfcmVmLnByb3A7XG4gIHZhciBlbCA9IHNlbGVjdG9yID8gZWxlbWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSA6IGVsZW1lbnQ7XG5cbiAgaWYgKCFlbCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoZWwuY3VycmVudFN0eWxlKSB7XG4gICAgcmV0dXJuIGVsLmN1cnJlbnRTdHlsZTtcbiAgfVxuXG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgIHZhciBkZWZhdWx0VmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG4gICAgaWYgKGRlZmF1bHRWaWV3KSB7XG4gICAgICB2YXIgc3R5bGUgPSBkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCBwc2V1ZG9TZWxlY3Rvcik7XG5cbiAgICAgIGlmIChzdHlsZSkge1xuICAgICAgICByZXR1cm4gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbi8qKlxuICogXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zLmVsZW1lbnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLnNlbGVjdG9yXVxuICogQHBhcmFtIHtzdHJpbmd9IFtwYXJhbXMucHNldWRvU2VsZWN0b3JdXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLnByb3BcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLmVxdWFsc11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLmNvbnRhaW5zXVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblxudmFyIHN0eWxlUHJvcENvbXBhcmUgPSBmdW5jdGlvbiBzdHlsZVByb3BDb21wYXJlKF9yZWYyKSB7XG4gIHZhciBlbGVtZW50ID0gX3JlZjIuZWxlbWVudCxcbiAgICAgIHNlbGVjdG9yID0gX3JlZjIuc2VsZWN0b3IsXG4gICAgICBwc2V1ZG9TZWxlY3RvciA9IF9yZWYyLnBzZXVkb1NlbGVjdG9yLFxuICAgICAgcHJvcCA9IF9yZWYyLnByb3AsXG4gICAgICBlcXVhbHMgPSBfcmVmMi5lcXVhbHMsXG4gICAgICBjb250YWlucyA9IF9yZWYyLmNvbnRhaW5zO1xuICB2YXIgZWwgPSBzZWxlY3RvciA/IGVsZW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBlbGVtZW50O1xuXG4gIGlmICghZWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZGVmYXVsdFZpZXcgPSBkb2N1bWVudC5kZWZhdWx0VmlldztcblxuICBpZiAoZGVmYXVsdFZpZXcpIHtcbiAgICBpZiAoZXF1YWxzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBlcXVhbHMgPT09IGRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWwsIHBzZXVkb1NlbGVjdG9yKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xuICAgIH1cblxuICAgIGlmIChjb250YWlucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgcHNldWRvU2VsZWN0b3IpLmdldFByb3BlcnR5VmFsdWUocHJvcCkuaW5kZXhPZihjb250YWlucykgIT09IC0xO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4vKipcbiAqIFxuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcy5lbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLnNlbGVjdG9yXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuXG52YXIgaXNSVEwgPSBmdW5jdGlvbiBpc1JUTChfcmVmMykge1xuICB2YXIgX3JlZjMkZWxlbWVudCA9IF9yZWYzLmVsZW1lbnQsXG4gICAgICBlbGVtZW50ID0gX3JlZjMkZWxlbWVudCA9PT0gdm9pZCAwID8gZG9jdW1lbnQgOiBfcmVmMyRlbGVtZW50LFxuICAgICAgc2VsZWN0b3IgPSBfcmVmMy5zZWxlY3RvcjtcbiAgcmV0dXJuIHN0eWxlUHJvcENvbXBhcmUoe1xuICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgIHByb3A6IFwiZGlyZWN0aW9uXCIsXG4gICAgZXF1YWxzOiBcInJ0bFwiXG4gIH0pO1xufTtcbi8qKlxuICogXG4gKiBAcGFyYW0ge3N0cmluZ30gZHVyYXRpb25TdHIgXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5cbnZhciBzdHlsZUR1cmF0aW9uVG9NcyA9IGZ1bmN0aW9uIHN0eWxlRHVyYXRpb25Ub01zKGR1cmF0aW9uU3RyKSB7XG4gIHZhciBwYXJzZWQgPSBwYXJzZUZsb2F0KGR1cmF0aW9uU3RyKSAqIChkdXJhdGlvblN0ci5pbmRleE9mKFwibXNcIikgPT09IC0xID8gMTAwMCA6IDEpO1xuICByZXR1cm4gaXNOYU4ocGFyc2VkKSA/IDAgOiBwYXJzZWQ7XG59O1xuXG52YXIgaWNvbkRyb3Bkb3duVXAgPSBcIjxzdmcgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiBpZD1cXFwiZGQtdXAtc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PHBhdGggZD1cXFwiTTcgMTRsNS01IDUgNXpcXFwiLz48L3N2Zz5cIjtcbnZhciBpY29uRHJvcGRvd25Eb3duID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgaWQ9XFxcImRkLWRvd24tc3ZnXFxcIiB3aWR0aD1cXFwiMjRcXFwiIGhlaWdodD1cXFwiMjRcXFwiIHZpZXdCb3g9XFxcIjAgMCAyNCAyNFxcXCI+PHBhdGggZD1cXFwiTTcgMTBsNSA1IDUtNXpcXFwiLz48L3N2Zz5cIjtcblxuLy8gQHRzLWNoZWNrXG52YXIgaXNUb3VjaCA9IGlzU2VydmVyID8gZmFsc2UgOiBcIm9udG91Y2hzdGFydFwiIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbnZhciBwb2ludGVyU3RhcnRFdmVudCA9IGlzVG91Y2ggPyBbXCJ0b3VjaHN0YXJ0XCIsIFwiY2xpY2tcIl0gOiBbXCJjbGlja1wiXTtcbnZhciBwb2ludGVyRW5kRXZlbnQgPSBpc1RvdWNoID8gW1wiY2xpY2tcIiwgXCJtb3VzZXVwXCJdIDogW1wibW91c2V1cFwiXTtcbnZhciBwb2ludGVyU3RhcnREb3duRXZlbnQgPSBpc1RvdWNoID8gW1widG91Y2hzdGFydFwiLCBcIm1vdXNlZG93blwiXSA6IFtcIm1vdXNlZG93blwiXTtcbnZhciBwb2ludGVyTW92ZUV2ZW50ID0gaXNUb3VjaCA/IFtcInRvdWNobW92ZVwiLCBcIm1vdXNlbW92ZVwiXSA6IFtcIm1vdXNlbW92ZVwiXTtcbnZhciBwb2ludGVyRW5kRG93bkV2ZW50ID0gaXNUb3VjaCA/IFtcInRvdWNoZW5kXCIsIFwibW91c2V1cFwiXSA6IFtcIm1vdXNldXBcIl07XG5cbmlmIChpc0NsaWVudCkge1xuICB2YXIgaHRtbEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaHRtbFwiKTtcblxuICBpZiAoaHRtbEVsZW1lbnQpIHtcbiAgICBodG1sRWxlbWVudC5jbGFzc0xpc3QuYWRkKGlzVG91Y2ggPyBcInBlLXRvdWNoXCIgOiBcInBlLW5vLXRvdWNoXCIpO1xuICB9XG59XG5cbi8vIEB0cy1jaGVja1xuLyoqXG4gKiBAdHlwZSB7e1tzOiBzdHJpbmddOiBBcnJheTxmdW5jdGlvbj59fSBsaXN0ZW5lcnNcbiAqL1xuXG52YXIgbGlzdGVuZXJzID0ge307XG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbY29udGV4dF1cbiAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAqIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vRWFydHovZmU2NTFmMmZhZGNjMTE0NDQ1NDlcbiAqL1xuXG52YXIgdGhyb3R0bGUgPSBmdW5jdGlvbiB0aHJvdHRsZShmdW5jKSB7XG4gIHZhciBzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwLjA1O1xuICB2YXIgY29udGV4dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogaXNDbGllbnQgPyB3aW5kb3cgOiB7fTtcbiAgdmFyIHdhaXQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24gbGF0ZXIoKSB7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9O1xuXG4gICAgaWYgKCF3YWl0KSB7XG4gICAgICBsYXRlcigpO1xuICAgICAgd2FpdCA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHdhaXQgPSBmYWxzZTtcbiAgICAgIH0sIHMpO1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBcbiAqIEBwYXJhbSB7b2JqZWN0fSBsaXN0ZW5lciBcbiAqIEBwYXJhbSB7bnVtYmVyfSBbZGVsYXldIFxuICovXG5cbnZhciBzdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoZXZlbnROYW1lLCBsaXN0ZW5lciwgZGVsYXkpIHtcbiAgbGlzdGVuZXJzW2V2ZW50TmFtZV0gPSBsaXN0ZW5lcnNbZXZlbnROYW1lXSB8fCBbXTtcbiAgbGlzdGVuZXJzW2V2ZW50TmFtZV0ucHVzaChkZWxheSA/IHRocm90dGxlKGxpc3RlbmVyLCBkZWxheSkgOiBsaXN0ZW5lcik7XG59O1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgXG4gKiBAcGFyYW0ge29iamVjdH0gbGlzdGVuZXIgXG4gKi9cblxudmFyIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUoZXZlbnROYW1lLCBsaXN0ZW5lcikge1xuICBpZiAoIWxpc3RlbmVyc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gbGlzdGVuZXJzW2V2ZW50TmFtZV0uaW5kZXhPZihsaXN0ZW5lcik7XG5cbiAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICBsaXN0ZW5lcnNbZXZlbnROYW1lXS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG59O1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgXG4gKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgXG4gKi9cblxudmFyIGVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50TmFtZSwgZXZlbnQpIHtcbiAgaWYgKCFsaXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxpc3RlbmVyc1tldmVudE5hbWVdLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyKGV2ZW50KTtcbiAgfSk7XG59O1xuXG5pZiAoaXNDbGllbnQpIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gZW1pdChcInJlc2l6ZVwiLCBlKTtcbiAgfSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgcmV0dXJuIGVtaXQoXCJzY3JvbGxcIiwgZSk7XG4gIH0pO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gZW1pdChcImtleWRvd25cIiwgZSk7XG4gIH0pO1xuICBwb2ludGVyRW5kRXZlbnQuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlbWl0KGV2ZW50TmFtZSwgZSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IEl0ZW0gXG4gKi9cblxuLyoqXG4gKiBcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMub3B0aW9uc1xuICovXG5cbnZhciBNdWx0aSA9IGZ1bmN0aW9uIE11bHRpKF9yZWYpIHtcbiAgdmFyIG1PcHRpb25zID0gX3JlZi5vcHRpb25zO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7QXJyYXk8SXRlbT59IGl0ZW1zXG4gICAqL1xuICB2YXIgaXRlbXMgPSBbXTsgLy8gVGhpcyBpcyBzaGFyZWQgYmV0d2VlbiBhbGwgaW5zdGFuY2VzIG9mIGEgdHlwZSAoRGlhbG9nLCBOb3RpZmljYXRpb24sIC4uLilcblxuICAvKlxuICBAcGFyYW0gZTogeyBpZCwgZXZlbnROYW1lIH1cbiAgKi9cblxuICB2YXIgb25DaGFuZ2UgPSBmdW5jdGlvbiBvbkNoYW5nZShlKSB7XG4gICAgZW1pdChtT3B0aW9ucy5uYW1lLCBlKTtcbiAgfTtcblxuICB2YXIgaXRlbUluZGV4ID0gZnVuY3Rpb24gaXRlbUluZGV4KGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBmaW5kSXRlbShpZCk7XG4gICAgcmV0dXJuIGl0ZW1zLmluZGV4T2YoaXRlbSk7XG4gIH07XG5cbiAgdmFyIHJlbW92ZUl0ZW0gPSBmdW5jdGlvbiByZW1vdmVJdGVtKGlkKSB7XG4gICAgdmFyIGluZGV4ID0gaXRlbUluZGV4KGlkKTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGl0ZW1zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgbmFtZTogXCJyZW1vdmVJdGVtXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmVwbGFjZUl0ZW0gPSBmdW5jdGlvbiByZXBsYWNlSXRlbShpZCwgbmV3SXRlbSkge1xuICAgIHZhciBpbmRleCA9IGl0ZW1JbmRleChpZCk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBpdGVtc1tpbmRleF0gPSBuZXdJdGVtO1xuICAgIH1cbiAgfTtcblxuICB2YXIgZmluZEl0ZW0gPSBmdW5jdGlvbiBmaW5kSXRlbShpZCkge1xuICAgIC8vIHRyYWRpdGlvbmFsIGZvciBsb29wIGZvciBJRTEwXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGl0ZW1zW2ldLmluc3RhbmNlSWQgPT09IGlkKSB7XG4gICAgICAgIHJldHVybiBpdGVtc1tpXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgIGlmIChpdGVtcy5sZW5ndGgpIHtcbiAgICAgIGl0ZW1zWzBdLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIG9uQ2hhbmdlKHtcbiAgICAgIGlkOiBpdGVtcy5sZW5ndGggPyBpdGVtc1swXS5pbnN0YW5jZUlkIDogbnVsbCxcbiAgICAgIG5hbWU6IFwibmV4dFwiXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbU9wdGlvbnMuZGVmYXVsdElkO1xuXG4gICAgaWYgKG1PcHRpb25zLnF1ZXVlKSB7XG4gICAgICBpdGVtcy5zaGlmdCgpO1xuICAgICAgbmV4dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVJdGVtKGluc3RhbmNlSWQpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmVtb3ZlQWxsID0gZnVuY3Rpb24gcmVtb3ZlQWxsKCkge1xuICAgIGl0ZW1zLmxlbmd0aCA9IDA7XG4gICAgb25DaGFuZ2Uoe1xuICAgICAgaWQ6IG51bGwsXG4gICAgICBuYW1lOiBcInJlbW92ZUFsbFwiXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHNldFBhdXNlU3RhdGUgPSBmdW5jdGlvbiBzZXRQYXVzZVN0YXRlKHBhdXNlLCBpbnN0YW5jZUlkKSB7XG4gICAgdmFyIGl0ZW0gPSBmaW5kSXRlbShpbnN0YW5jZUlkKTtcblxuICAgIGlmIChpdGVtKSB7XG4gICAgICBpdGVtLnBhdXNlID0gcGF1c2U7XG4gICAgICBpdGVtLnVucGF1c2UgPSAhcGF1c2U7XG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIGlkOiBpbnN0YW5jZUlkLFxuICAgICAgICBuYW1lOiBwYXVzZSA/IFwicGF1c2VcIiA6IFwidW5wYXVzZVwiXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUl0ZW0gPSBmdW5jdGlvbiBjcmVhdGVJdGVtKGl0ZW1BdHRycywgaW5zdGFuY2VJZCwgc3Bhd24pIHtcbiAgICB2YXIgcmVzb2x2ZVNob3c7XG4gICAgdmFyIHJlc29sdmVIaWRlO1xuICAgIHZhciBwcm9wcyA9IHVucGFja0F0dHJzKGl0ZW1BdHRycyk7XG5cbiAgICB2YXIgZGlkU2hvdyA9IGZ1bmN0aW9uIGRpZFNob3coKSB7XG4gICAgICBpZiAocHJvcHMuZGlkU2hvdykge1xuICAgICAgICBwcm9wcy5kaWRTaG93KGluc3RhbmNlSWQpO1xuICAgICAgfVxuXG4gICAgICBvbkNoYW5nZSh7XG4gICAgICAgIGlkOiBpbnN0YW5jZUlkLFxuICAgICAgICBuYW1lOiBcImRpZFNob3dcIlxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzb2x2ZVNob3coaW5zdGFuY2VJZCk7XG4gICAgfTtcblxuICAgIHZhciBzaG93UHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZVNob3cgPSByZXNvbHZlO1xuICAgIH0pO1xuICAgIHZhciBoaWRlUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZUhpZGUgPSByZXNvbHZlO1xuICAgIH0pO1xuXG4gICAgdmFyIGRpZEhpZGUgPSBmdW5jdGlvbiBkaWRIaWRlKCkge1xuICAgICAgaWYgKHByb3BzLmRpZEhpZGUpIHtcbiAgICAgICAgcHJvcHMuZGlkSGlkZShpbnN0YW5jZUlkKTtcbiAgICAgIH1cblxuICAgICAgb25DaGFuZ2Uoe1xuICAgICAgICBpZDogaW5zdGFuY2VJZCxcbiAgICAgICAgbmFtZTogXCJkaWRIaWRlXCJcbiAgICAgIH0pO1xuICAgICAgcmVtb3ZlKGluc3RhbmNlSWQpO1xuICAgICAgcmV0dXJuIHJlc29sdmVIaWRlKGluc3RhbmNlSWQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIG1PcHRpb25zLCB7XG4gICAgICAvLyBrZXlJZDogbU9wdGlvbnMucXVldWUgPyBuZXcgRGF0ZSgpLmdldFRpbWUoKSA6IHVuZGVmaW5lZCwgLy8gdG8gZm9yY2UgcmVuZGVyaW5nIGEgbmV3IGNvbXBvbmVudFxuICAgICAgaW5zdGFuY2VJZDogaW5zdGFuY2VJZCxcbiAgICAgIHNwYXduOiBzcGF3bixcbiAgICAgIHByb3BzOiBpdGVtQXR0cnMsXG4gICAgICBzaG93OiBtT3B0aW9ucy5xdWV1ZSA/IGZhbHNlIDogdHJ1ZSxcbiAgICAgIHNob3dQcm9taXNlOiBzaG93UHJvbWlzZSxcbiAgICAgIGhpZGVQcm9taXNlOiBoaWRlUHJvbWlzZSxcbiAgICAgIGRpZFNob3c6IGRpZFNob3csXG4gICAgICBkaWRIaWRlOiBkaWRIaWRlXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGNvdW50ID0gZnVuY3Rpb24gY291bnQoKSB7XG4gICAgcmV0dXJuIGl0ZW1zLmxlbmd0aDtcbiAgfTtcblxuICB2YXIgcGF1c2UgPSBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbU9wdGlvbnMuZGVmYXVsdElkO1xuICAgIHJldHVybiBzZXRQYXVzZVN0YXRlKHRydWUsIGluc3RhbmNlSWQpO1xuICB9O1xuXG4gIHZhciB1bnBhdXNlID0gZnVuY3Rpb24gdW5wYXVzZSgpIHtcbiAgICB2YXIgaW5zdGFuY2VJZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbU9wdGlvbnMuZGVmYXVsdElkO1xuICAgIHJldHVybiBzZXRQYXVzZVN0YXRlKGZhbHNlLCBpbnN0YW5jZUlkKTtcbiAgfTtcblxuICB2YXIgc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgc3Bhd25PcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgaW5zdGFuY2VJZCA9IHNwYXduT3B0cy5pZCB8fCBtT3B0aW9ucy5kZWZhdWx0SWQ7XG4gICAgdmFyIHNwYXduID0gc3Bhd25PcHRzLnNwYXduIHx8IG1PcHRpb25zLmRlZmF1bHRJZDtcbiAgICB2YXIgaXRlbSA9IGNyZWF0ZUl0ZW0ocHJvcHMsIGluc3RhbmNlSWQsIHNwYXduKTtcbiAgICBvbkNoYW5nZSh7XG4gICAgICBpZDogaW5zdGFuY2VJZCxcbiAgICAgIG5hbWU6IFwic2hvd1wiXG4gICAgfSk7XG5cbiAgICBpZiAobU9wdGlvbnMucXVldWUpIHtcbiAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgbmV4dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RvcmVkSXRlbSA9IGZpbmRJdGVtKGluc3RhbmNlSWQpO1xuXG4gICAgICBpZiAoIXN0b3JlZEl0ZW0pIHtcbiAgICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcGxhY2VJdGVtKGluc3RhbmNlSWQsIGl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpdGVtLnNob3dQcm9taXNlO1xuICB9O1xuXG4gIHZhciBoaWRlID0gZnVuY3Rpb24gaGlkZSgpIHtcbiAgICB2YXIgc3Bhd25PcHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgaW5zdGFuY2VJZCA9IHNwYXduT3B0cy5pZCB8fCBtT3B0aW9ucy5kZWZhdWx0SWQ7XG4gICAgdmFyIGl0ZW0gPSBtT3B0aW9ucy5xdWV1ZSAmJiBpdGVtcy5sZW5ndGggPyBpdGVtc1swXSA6IGZpbmRJdGVtKGluc3RhbmNlSWQpO1xuXG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGl0ZW0uaGlkZSA9IHRydWU7XG4gICAgfVxuXG4gICAgb25DaGFuZ2Uoe1xuICAgICAgaWQ6IGluc3RhbmNlSWQsXG4gICAgICBuYW1lOiBcImhpZGVcIlxuICAgIH0pO1xuICAgIHJldHVybiBpdGVtID8gaXRlbS5oaWRlUHJvbWlzZSA6IFByb21pc2UucmVzb2x2ZShpbnN0YW5jZUlkKTtcbiAgfTtcblxuICB2YXIgY2xlYXIgPSByZW1vdmVBbGw7XG5cbiAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcihfcmVmMikge1xuICAgIHZhciBoID0gX3JlZjIuaCxcbiAgICAgICAgdXNlU3RhdGUgPSBfcmVmMi51c2VTdGF0ZSxcbiAgICAgICAgdXNlRWZmZWN0ID0gX3JlZjIudXNlRWZmZWN0LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmMiwgW1wiaFwiLCBcInVzZVN0YXRlXCIsIFwidXNlRWZmZWN0XCJdKTtcblxuICAgIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSgpLFxuICAgICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgICAgc2V0Q3VycmVudCA9IF91c2VTdGF0ZTJbMV07XG5cbiAgICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaWJlKG1PcHRpb25zLm5hbWUsIHNldEN1cnJlbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdW5zdWJzY3JpYmUobU9wdGlvbnMubmFtZSwgc2V0Q3VycmVudCk7XG4gICAgICB9O1xuICAgIH0sIFtdKTtcbiAgICB2YXIgc3Bhd24gPSBwcm9wcy5zcGF3biB8fCBtT3B0aW9ucy5kZWZhdWx0SWQ7XG4gICAgdmFyIGNhbmRpZGF0ZXMgPSBpdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLnNob3cgJiYgaXRlbS5zcGF3biA9PT0gc3Bhd247XG4gICAgfSk7XG5cbiAgICBpZiAobU9wdGlvbnMuaHRtbFNob3dDbGFzcyAmJiBpc0NsaWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3RbY2FuZGlkYXRlcy5sZW5ndGggPyBcImFkZFwiIDogXCJyZW1vdmVcIl0obU9wdGlvbnMuaHRtbFNob3dDbGFzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFjYW5kaWRhdGVzLmxlbmd0aCA/IGgobU9wdGlvbnMucGxhY2Vob2xkZXIpIC8vIHBsYWNlaG9sZGVyIGJlY2F1c2Ugd2UgY2Fubm90IHJldHVybiBudWxsXG4gICAgOiBoKG1PcHRpb25zLmhvbGRlclNlbGVjdG9yLCB7XG4gICAgICBjbGFzc05hbWU6IHByb3BzLnBvc2l0aW9uID09PSBcImNvbnRhaW5lclwiID8gXCJwZS1tdWx0aXBsZS0tY29udGFpbmVyXCIgOiBcInBlLW11bHRpcGxlLS1zY3JlZW5cIlxuICAgIH0sIGNhbmRpZGF0ZXMubWFwKGZ1bmN0aW9uIChpdGVtRGF0YSkge1xuICAgICAgcmV0dXJuIGgobU9wdGlvbnMuaW5zdGFuY2UsIF9vYmplY3RTcHJlYWQyKHt9LCB1bnBhY2tBdHRycyhwcm9wcyksIHtcbiAgICAgICAgZnJvbU11bHRpcGxlQ2xlYXI6IGNsZWFyLFxuICAgICAgICBzcGF3bklkOiBzcGF3bixcbiAgICAgICAgLy8gZnJvbSBtT3B0aW9uczpcbiAgICAgICAgZnJvbU11bHRpcGxlQ2xhc3NOYW1lOiBtT3B0aW9ucy5jbGFzc05hbWUsXG4gICAgICAgIGhvbGRlclNlbGVjdG9yOiBtT3B0aW9ucy5ob2xkZXJTZWxlY3RvcixcbiAgICAgICAgdHJhbnNpdGlvbnM6IG1PcHRpb25zLnRyYW5zaXRpb25zLFxuICAgICAgICAvLyBmcm9tIGl0ZW1EYXRhOlxuICAgICAgICBmcm9tTXVsdGlwbGVEaWRIaWRlOiBpdGVtRGF0YS5kaWRIaWRlLFxuICAgICAgICBmcm9tTXVsdGlwbGVEaWRTaG93OiBpdGVtRGF0YS5kaWRTaG93LFxuICAgICAgICBoaWRlOiBpdGVtRGF0YS5oaWRlLFxuICAgICAgICBpbnN0YW5jZUlkOiBpdGVtRGF0YS5pbnN0YW5jZUlkLFxuICAgICAgICBrZXk6IGl0ZW1EYXRhLmtleSAhPT0gdW5kZWZpbmVkID8gaXRlbURhdGEua2V5IDogaXRlbURhdGEua2V5SWQsXG4gICAgICAgIHBhdXNlOiBpdGVtRGF0YS5wYXVzZSxcbiAgICAgICAgc2hvdzogaXRlbURhdGEuc2hvdyxcbiAgICAgICAgdW5wYXVzZTogaXRlbURhdGEudW5wYXVzZVxuICAgICAgfSwgdW5wYWNrQXR0cnMoaXRlbURhdGEucHJvcHMpKSk7XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGNsZWFyLFxuICAgIGNvdW50OiBjb3VudCxcbiAgICBoaWRlOiBoaWRlLFxuICAgIHBhdXNlOiBwYXVzZSxcbiAgICByZW1vdmU6IHJlbW92ZSxcbiAgICBzaG93OiBzaG93LFxuICAgIHVucGF1c2U6IHVucGF1c2UsXG4gICAgcmVuZGVyOiByZW5kZXJcbiAgfTtcbn07XG5NdWx0aVtcImRpc3BsYXlOYW1lXCJdID0gXCJNdWx0aVwiO1xuXG52YXIgVFJBTlNJVElPTl9UWVBFUyA9IHtcbiAgU0hPVzogXCJzaG93XCIsXG4gIEhJREU6IFwiaGlkZVwiLFxuICBTSE9XX0RPTkU6IFwic2hvdy1kb25lXCIsXG4gIEhJREVfRE9ORTogXCJoaWRlLWRvbmVcIlxufTtcbnZhciBpbml0aWFsVHJhbnNpdGlvblN0YXRlID0ge1xuICBpc1Zpc2libGU6IGZhbHNlLFxuICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlXG59O1xudmFyIHRyYW5zaXRpb25TdGF0ZVJlZHVjZXIgPSBmdW5jdGlvbiB0cmFuc2l0aW9uU3RhdGVSZWR1Y2VyKHN0YXRlLCB0eXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgVFJBTlNJVElPTl9UWVBFUy5TSE9XOlxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBzdGF0ZSwge1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgIGlzVmlzaWJsZTogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICBjYXNlIFRSQU5TSVRJT05fVFlQRVMuSElERTpcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkMih7fSwgc3RhdGUsIHtcbiAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiB0cnVlXG4gICAgICB9KTtcblxuICAgIGNhc2UgVFJBTlNJVElPTl9UWVBFUy5TSE9XX0RPTkU6XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0YXRlLCB7XG4gICAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2UsXG4gICAgICAgIGlzVmlzaWJsZTogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICBjYXNlIFRSQU5TSVRJT05fVFlQRVMuSElERV9ET05FOlxuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBzdGF0ZSwge1xuICAgICAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlLFxuICAgICAgICBpc1Zpc2libGU6IGZhbHNlXG4gICAgICB9KTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmhhbmRsZWQgYWN0aW9uIHR5cGU6IFwiLmNvbmNhdCh0eXBlKSk7XG4gIH1cbn07XG4vKipcbiAqIFxuICogQHR5cGVkZWYge3sgZWw/OiBIVE1MRWxlbWVudCwgZHVyYXRpb24/OiBudW1iZXIsIGhhc0R1cmF0aW9uPzogYm9vbGVhbiwgZGVsYXk/OiBudW1iZXIsIGhhc0RlbGF5PzogYm9vbGVhbiwgdGltaW5nRnVuY3Rpb24/OiBzdHJpbmcsIHRyYW5zaXRpb25DbGFzcz86IHN0cmluZywgYmVmb3JlPzogKCkgPT4gdm9pZCwgYWZ0ZXI/OiAoKSA9PiB2b2lkLCB0cmFuc2l0aW9uPzogKCkgPT4gdm9pZCwgc2hvd0NsYXNzPzogc3RyaW5nLCBzaG93Q2xhc3NFbGVtZW50PzogSFRNTEVsZW1lbnQgIH19IFRyYW5zaXRpb25PcHRzXG4gKi9cblxudmFyIERFRkFVTFRfRFVSQVRJT04gPSAuMjQwO1xudmFyIERFRkFVTFRfREVMQVkgPSAwO1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7VHJhbnNpdGlvbk9wdHN9IG9wdHMgXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuXG52YXIgc2hvdyA9IGZ1bmN0aW9uIHNob3cob3B0cykge1xuICByZXR1cm4gdHJhbnNpdGlvbihvcHRzLCBcInNob3dcIik7XG59O1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7VHJhbnNpdGlvbk9wdHN9IG9wdHNcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBcbiAqL1xuXG52YXIgaGlkZSA9IGZ1bmN0aW9uIGhpZGUob3B0cykge1xuICByZXR1cm4gdHJhbnNpdGlvbihvcHRzLCBcImhpZGVcIik7XG59O1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7VHJhbnNpdGlvbk9wdHN9IG9wdHMgXG4gKiBAcGFyYW0ge1wic2hvd1wifFwiaGlkZVwifSBzdGF0ZSBcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG5cbnZhciB0cmFuc2l0aW9uID0gZnVuY3Rpb24gdHJhbnNpdGlvbihvcHRzLCBzdGF0ZSkge1xuICB2YXIgZWwgPSBvcHRzLmVsO1xuXG4gIGlmICghZWwpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICB2YXIgc3R5bGUgPSBlbC5zdHlsZTtcbiAgICAgIC8qKlxuICAgICAgICogQHR5cGUge29iamVjdH0gY29tcHV0ZWRTdHlsZVxuICAgICAgICovXG5cbiAgICAgIHZhciBjb21wdXRlZFN0eWxlID0gaXNDbGllbnQgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkgOiB7fTtcbiAgICAgIHZhciBkdXJhdGlvbiA9IG9wdHMuaGFzRHVyYXRpb24gJiYgb3B0cy5kdXJhdGlvbiAhPT0gdW5kZWZpbmVkID8gb3B0cy5kdXJhdGlvbiAqIDEwMDAuMCA6IHN0eWxlRHVyYXRpb25Ub01zKGNvbXB1dGVkU3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIHZhciBkZWxheSA9IG9wdHMuaGFzRGVsYXkgJiYgb3B0cy5kZWxheSAhPT0gdW5kZWZpbmVkID8gb3B0cy5kZWxheSAqIDEwMDAuMCA6IHN0eWxlRHVyYXRpb25Ub01zKGNvbXB1dGVkU3R5bGUudHJhbnNpdGlvbkRlbGF5KTtcbiAgICAgIHZhciB0aW1pbmdGdW5jdGlvbiA9IG9wdHMudGltaW5nRnVuY3Rpb24gfHwgY29tcHV0ZWRTdHlsZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb247XG5cbiAgICAgIGlmIChvcHRzLnRyYW5zaXRpb25DbGFzcykge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKG9wdHMudHJhbnNpdGlvbkNsYXNzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJlZm9yZSA9IGZ1bmN0aW9uIGJlZm9yZSgpIHtcbiAgICAgICAgc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gXCIwbXNcIjtcbiAgICAgICAgc3R5bGUudHJhbnNpdGlvbkRlbGF5ID0gXCIwbXNcIjtcblxuICAgICAgICBpZiAob3B0cy5iZWZvcmUgJiYgdHlwZW9mIG9wdHMuYmVmb3JlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBvcHRzLmJlZm9yZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWF5YmVCZWZvcmUgPSBvcHRzLmJlZm9yZSAmJiBzdGF0ZSA9PT0gXCJzaG93XCIgPyBiZWZvcmUgOiBvcHRzLmJlZm9yZSAmJiBzdGF0ZSA9PT0gXCJoaWRlXCIgPyBiZWZvcmUgOiBudWxsO1xuXG4gICAgICB2YXIgYWZ0ZXIgPSBmdW5jdGlvbiBhZnRlcigpIHtcbiAgICAgICAgaWYgKG9wdHMuYWZ0ZXIgJiYgdHlwZW9mIG9wdHMuYWZ0ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIG9wdHMuYWZ0ZXIoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIGFwcGx5VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIGFwcGx5VHJhbnNpdGlvbigpIHtcbiAgICAgICAgc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb24gKyBcIm1zXCI7XG4gICAgICAgIHN0eWxlLnRyYW5zaXRpb25EZWxheSA9IGRlbGF5ICsgXCJtc1wiO1xuXG4gICAgICAgIGlmICh0aW1pbmdGdW5jdGlvbikge1xuICAgICAgICAgIHN0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiA9IHRpbWluZ0Z1bmN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdHMuc2hvd0NsYXNzKSB7XG4gICAgICAgICAgdmFyIHNob3dDbGFzc0VsZW1lbnQgPSBvcHRzLnNob3dDbGFzc0VsZW1lbnQgfHwgZWw7XG4gICAgICAgICAgc2hvd0NsYXNzRWxlbWVudC5jbGFzc0xpc3Rbc3RhdGUgPT09IFwic2hvd1wiID8gXCJhZGRcIiA6IFwicmVtb3ZlXCJdKG9wdHMuc2hvd0NsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRzLnRyYW5zaXRpb24pIHtcbiAgICAgICAgICBvcHRzLnRyYW5zaXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIGRvVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIGRvVHJhbnNpdGlvbigpIHtcbiAgICAgICAgYXBwbHlUcmFuc2l0aW9uKCk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChhZnRlcikge1xuICAgICAgICAgICAgYWZ0ZXIoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3B0cy50cmFuc2l0aW9uQ2xhc3MpIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUob3B0cy50cmFuc2l0aW9uQ2xhc3MpO1xuICAgICAgICAgICAgZWwub2Zmc2V0SGVpZ2h0OyAvLyBmb3JjZSByZWZsb3dcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0sIGR1cmF0aW9uICsgZGVsYXkpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1heWJlRGVsYXlUcmFuc2l0aW9uID0gZnVuY3Rpb24gbWF5YmVEZWxheVRyYW5zaXRpb24oKSB7XG4gICAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgIGRvVHJhbnNpdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldFRpbWVvdXQoZG9UcmFuc2l0aW9uLCAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKG1heWJlQmVmb3JlKSB7XG4gICAgICAgIG1heWJlQmVmb3JlKCk7XG4gICAgICAgIGVsLm9mZnNldEhlaWdodDsgLy8gZm9yY2UgcmVmbG93XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbWF5YmVEZWxheVRyYW5zaXRpb24oKTtcbiAgICAgICAgfSwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXliZURlbGF5VHJhbnNpdGlvbigpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7KHN0cmluZykgPT4gdm9pZH0gW3BhcmFtcy5kaXNwYXRjaFRyYW5zaXRpb25TdGF0ZV1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtcy5pc1Nob3ddXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXJhbXMuaXNUcmFuc2l0aW9uaW5nXVxuICogQHBhcmFtIHtzdHJpbmd9IFtwYXJhbXMuaW5zdGFuY2VJZF1cbiAqIEBwYXJhbSB7KGJvb2xlYW4pID0+IHZvaWR9IFtwYXJhbXMuc2V0SXNUcmFuc2l0aW9uaW5nXVxuICogQHBhcmFtIHsoYm9vbGVhbikgPT4gdm9pZH0gW3BhcmFtcy5zZXRJc1Zpc2libGVdXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtcy5wcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zLmRvbUVsZW1lbnRzXVxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSBbcGFyYW1zLmJlZm9yZVRyYW5zaXRpb25dXG4gKiBAcGFyYW0geygpID0+IHZvaWR9IFtwYXJhbXMuYWZ0ZXJUcmFuc2l0aW9uXVxuICogQHBhcmFtIHtzdHJpbmd9IFtwYXJhbXMuc2hvd0NsYXNzXVxuICogQHBhcmFtIHtzdHJpbmd9IFtwYXJhbXMudHJhbnNpdGlvbkNsYXNzXVxuICogQHBhcmFtIHtzdHJpbmd9IFtwYXJhbXMucmVmZXJyZXJdXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuXG5cbnZhciB0cmFuc2l0aW9uQ29tcG9uZW50ID0gZnVuY3Rpb24gdHJhbnNpdGlvbkNvbXBvbmVudChfcmVmKSB7XG4gIHZhciBkaXNwYXRjaFRyYW5zaXRpb25TdGF0ZSA9IF9yZWYuZGlzcGF0Y2hUcmFuc2l0aW9uU3RhdGUsXG4gICAgICBpc1RyYW5zaXRpb25pbmcgPSBfcmVmLmlzVHJhbnNpdGlvbmluZyxcbiAgICAgIGluc3RhbmNlSWQgPSBfcmVmLmluc3RhbmNlSWQsXG4gICAgICBpc1Nob3cgPSBfcmVmLmlzU2hvdyxcbiAgICAgIHByb3BzID0gX3JlZi5wcm9wcyxcbiAgICAgIGRvbUVsZW1lbnRzID0gX3JlZi5kb21FbGVtZW50cyxcbiAgICAgIGJlZm9yZVRyYW5zaXRpb24gPSBfcmVmLmJlZm9yZVRyYW5zaXRpb24sXG4gICAgICBhZnRlclRyYW5zaXRpb24gPSBfcmVmLmFmdGVyVHJhbnNpdGlvbixcbiAgICAgIHNob3dDbGFzcyA9IF9yZWYuc2hvd0NsYXNzLFxuICAgICAgdHJhbnNpdGlvbkNsYXNzID0gX3JlZi50cmFuc2l0aW9uQ2xhc3MsXG4gICAgICByZWZlcnJlciA9IF9yZWYucmVmZXJyZXI7XG5cbiAgaWYgKGlzVHJhbnNpdGlvbmluZykge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgfVxuXG4gIGRpc3BhdGNoVHJhbnNpdGlvblN0YXRlKGlzU2hvdyA/IFRSQU5TSVRJT05fVFlQRVMuU0hPVyA6IFRSQU5TSVRJT05fVFlQRVMuSElERSk7XG5cbiAgaWYgKGJlZm9yZVRyYW5zaXRpb24pIHtcbiAgICBiZWZvcmVUcmFuc2l0aW9uKCk7XG4gIH1cblxuICB2YXIgZHVyYXRpb24gPSBpc1Nob3cgPyBwcm9wcy5zaG93RHVyYXRpb24gOiBwcm9wcy5oaWRlRHVyYXRpb247XG4gIHZhciBkZWxheSA9IGlzU2hvdyA/IHByb3BzLnNob3dEZWxheSA6IHByb3BzLmhpZGVEZWxheTtcbiAgdmFyIHRpbWluZ0Z1bmN0aW9uID0gaXNTaG93ID8gcHJvcHMuc2hvd1RpbWluZ0Z1bmN0aW9uIDogcHJvcHMuaGlkZVRpbWluZ0Z1bmN0aW9uO1xuICB2YXIgdHJhbnNpdGlvbnMgPSBwcm9wcy50cmFuc2l0aW9ucztcbiAgdmFyIGZuID0gaXNTaG93ID8gc2hvdyA6IGhpZGU7XG5cbiAgdmFyIG9wdHMxID0gX29iamVjdFNwcmVhZDIoe30sIHByb3BzLCB7fSwgZG9tRWxlbWVudHMsIHtcbiAgICBzaG93Q2xhc3M6IHNob3dDbGFzcyxcbiAgICB0cmFuc2l0aW9uQ2xhc3M6IHRyYW5zaXRpb25DbGFzcyxcbiAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgZGVsYXk6IGRlbGF5LFxuICAgIHRpbWluZ0Z1bmN0aW9uOiB0aW1pbmdGdW5jdGlvblxuICB9KTtcblxuICB2YXIgb3B0czIgPSBfb2JqZWN0U3ByZWFkMih7fSwgb3B0czEsIHt9LCB0cmFuc2l0aW9ucyA/IChpc1Nob3cgPyB0cmFuc2l0aW9ucy5zaG93IDogdHJhbnNpdGlvbnMuaGlkZSkob3B0czEpIDogdW5kZWZpbmVkKTtcblxuICB2YXIgb3B0czMgPSBfb2JqZWN0U3ByZWFkMih7fSwgb3B0czIsIHt9LCB7XG4gICAgZHVyYXRpb246IG9wdHMyLmR1cmF0aW9uICE9PSB1bmRlZmluZWQgPyBvcHRzMi5kdXJhdGlvbiA6IERFRkFVTFRfRFVSQVRJT04sXG4gICAgaGFzRHVyYXRpb246IG9wdHMyLmR1cmF0aW9uICE9PSB1bmRlZmluZWQsXG4gICAgZGVsYXk6IG9wdHMyLmRlbGF5ICE9PSB1bmRlZmluZWQgPyBvcHRzMi5kZWxheSA6IERFRkFVTFRfREVMQVksXG4gICAgaGFzRGVsYXk6IG9wdHMyLmRlbGF5ICE9PSB1bmRlZmluZWRcbiAgfSk7XG5cbiAgcmV0dXJuIGZuKG9wdHMzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaWQgPSBpbnN0YW5jZUlkO1xuXG4gICAgaWYgKGFmdGVyVHJhbnNpdGlvbikge1xuICAgICAgYWZ0ZXJUcmFuc2l0aW9uKCk7XG4gICAgfSAvLyBDb21wb25lbnQgbWF5IHVubW91bnQgYWZ0ZXIgdGhpcyBwb2ludFxuXG5cbiAgICBpZiAoaXNTaG93ID8gcHJvcHMuZnJvbU11bHRpcGxlRGlkU2hvdyA6IHByb3BzLmZyb21NdWx0aXBsZURpZEhpZGUpIHtcbiAgICAgIChpc1Nob3cgPyBwcm9wcy5mcm9tTXVsdGlwbGVEaWRTaG93IDogcHJvcHMuZnJvbU11bHRpcGxlRGlkSGlkZSkoaWQpOyAvLyB3aGVuIHVzZWQgd2l0aCBNdWx0aXBsZTsgdGhpcyB3aWxsIGNhbGwgcHJvcHMuZGlkU2hvdyAvIHByb3BzLmRpZEhpZGVcbiAgICB9IGVsc2UgaWYgKGlzU2hvdyA/IHByb3BzLmRpZFNob3cgOiBwcm9wcy5kaWRIaWRlKSB7XG4gICAgICAoaXNTaG93ID8gcHJvcHMuZGlkU2hvdyA6IHByb3BzLmRpZEhpZGUpKGlkKTsgLy8gd2hlbiB1c2VkIGRpcmVjdGx5XG4gICAgfVxuXG4gICAgZGlzcGF0Y2hUcmFuc2l0aW9uU3RhdGUoaXNTaG93ID8gVFJBTlNJVElPTl9UWVBFUy5TSE9XX0RPTkUgOiBUUkFOU0lUSU9OX1RZUEVTLkhJREVfRE9ORSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IHsgTXVsdGksIF9Db25kaXRpb25hbCwgY2xhc3NGb3JTaXplLCBkZXByZWNhdGlvbiwgZW1pdCwgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcywgZ2V0QW5pbWF0aW9uRW5kRXZlbnQsIGdldFN0eWxlLCBoaWRlLCBpY29uRHJvcGRvd25Eb3duLCBpY29uRHJvcGRvd25VcCwgaW5pdGlhbFRyYW5zaXRpb25TdGF0ZSwgaXNDbGllbnQsIGlzUlRMLCBpc1NlcnZlciwgaXNUb3VjaCwgcG9pbnRlckVuZERvd25FdmVudCwgcG9pbnRlckVuZEV2ZW50LCBwb2ludGVyTW92ZUV2ZW50LCBwb2ludGVyU3RhcnREb3duRXZlbnQsIHBvaW50ZXJTdGFydEV2ZW50LCBzaG93LCBzdHlsZUR1cmF0aW9uVG9Ncywgc3R5bGVQcm9wQ29tcGFyZSwgc3Vic2NyaWJlLCB0aHJvdHRsZSwgdHJhbnNpdGlvbkNvbXBvbmVudCwgdHJhbnNpdGlvblN0YXRlUmVkdWNlciwgdW5wYWNrQXR0cnMsIHVuc3Vic2NyaWJlIH07XG4iLCJpbXBvcnQgSjJjIGZyb20gJ2oyYyc7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlJztcblxuLy8gQHRzLWNoZWNrXG5cbi8qKlxuICogQHR5cGVkZWYge3tbc2VsZWN0b3I6c3RyaW5nXSA6IG9iamVjdH19IFN0eWxlXG4gKiBAdHlwZWRlZiB7QXJyYXk8U3R5bGU+IHwgU3R5bGV9IFN0eWxlc1xuICovXG5cbi8qKlxuICogQHR5cGUge1N0eWxlc30gbGF5b3V0XG4gKi9cbnZhciBsYXlvdXQgPSBbe1xuICBcImRpc3BsYXlcIjogXCItd2Via2l0LWJveFwiXG59LCB7XG4gIFwiZGlzcGxheVwiOiBcIi1tb3otYm94XCJcbn0sIHtcbiAgXCJkaXNwbGF5XCI6IFwiLW1zLWZsZXhib3hcIlxufSwge1xuICBcImRpc3BsYXlcIjogXCItd2Via2l0LWZsZXhcIlxufSwge1xuICBcImRpc3BsYXlcIjogXCJmbGV4XCJcbn1dO1xuLyoqXG4gKiBAdHlwZSB7U3R5bGVzfSBsYXlvdXRJbmxpbmVcbiAqL1xuXG52YXIgbGF5b3V0SW5saW5lID0gW2xheW91dCwge1xuICBcImRpc3BsYXlcIjogXCItbXMtaW5saW5lLWZsZXhib3hcIlxufSwge1xuICBcImRpc3BsYXlcIjogXCItd2Via2l0LWlubGluZS1mbGV4XCJcbn0sIHtcbiAgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWZsZXhcIlxufV07XG4vKipcbiAqIEB0eXBlIHtTdHlsZXN9IGxheW91dEhvcml6b250YWxcbiAqL1xuXG52YXIgbGF5b3V0SG9yaXpvbnRhbCA9IFtsYXlvdXQsIHtcbiAgXCItbXMtZmxleC1kaXJlY3Rpb25cIjogXCJyb3dcIixcbiAgXCItd2Via2l0LWZsZXgtZGlyZWN0aW9uXCI6IFwicm93XCIsXG4gIFwiZmxleC1kaXJlY3Rpb25cIjogXCJyb3dcIlxufV07XG4vKipcbiAqIEB0eXBlIHtTdHlsZXN9IGxheW91dEhvcml6b250YWxSZXZlcnNlXG4gKi9cblxudmFyIGxheW91dEhvcml6b250YWxSZXZlcnNlID0gW2xheW91dCwge1xuICBcIi1tcy1mbGV4LWRpcmVjdGlvblwiOiBcInJvdy1yZXZlcnNlXCIsXG4gIFwiLXdlYmtpdC1mbGV4LWRpcmVjdGlvblwiOiBcInJvdy1yZXZlcnNlXCIsXG4gIFwiZmxleC1kaXJlY3Rpb25cIjogXCJyb3ctcmV2ZXJzZVwiXG59XTtcbi8qKlxuICogQHR5cGUge1N0eWxlc30gbGF5b3V0VmVydGljYWxcbiAqL1xuXG52YXIgbGF5b3V0VmVydGljYWwgPSBbbGF5b3V0LCB7XG4gIFwiLW1zLWZsZXgtZGlyZWN0aW9uXCI6IFwiY29sdW1uXCIsXG4gIFwiLXdlYmtpdC1mbGV4LWRpcmVjdGlvblwiOiBcImNvbHVtblwiLFxuICBcImZsZXgtZGlyZWN0aW9uXCI6IFwiY29sdW1uXCJcbn1dO1xuLyoqXG4gKiBAdHlwZSB7U3R5bGVzfSBsYXlvdXRWZXJ0aWNhbFJldmVyc2VcbiAqL1xuXG52YXIgbGF5b3V0VmVydGljYWxSZXZlcnNlID0gW2xheW91dCwge1xuICBcIi1tcy1mbGV4LWRpcmVjdGlvblwiOiBcImNvbHVtbi1yZXZlcnNlXCIsXG4gIFwiLXdlYmtpdC1mbGV4LWRpcmVjdGlvblwiOiBcImNvbHVtbi1yZXZlcnNlXCIsXG4gIFwiZmxleC1kaXJlY3Rpb25cIjogXCJjb2x1bW4tcmV2ZXJzZVwiXG59XTtcbi8qKlxuICogQHR5cGUge1N0eWxlc30gbGF5b3V0V3JhcFxuICovXG5cbnZhciBsYXlvdXRXcmFwID0gW2xheW91dCwge1xuICBcIi1tcy1mbGV4LXdyYXBcIjogXCJ3cmFwXCIsXG4gIFwiLXdlYmtpdC1mbGV4LXdyYXBcIjogXCJ3cmFwXCIsXG4gIFwiZmxleC13cmFwXCI6IFwid3JhcFwiXG59XTtcbi8qKlxuICogQHR5cGUge1N0eWxlc30gbGF5b3V0V3JhcFJldmVyc2VcbiAqL1xuXG52YXIgbGF5b3V0V3JhcFJldmVyc2UgPSBbbGF5b3V0LCB7XG4gIFwiLW1zLWZsZXgtd3JhcFwiOiBcIndyYXAtcmV2ZXJzZVwiLFxuICBcIi13ZWJraXQtZmxleC13cmFwXCI6IFwid3JhcC1yZXZlcnNlXCIsXG4gIFwiZmxleC13cmFwXCI6IFwid3JhcC1yZXZlcnNlXCJcbn1dO1xuLyoqXG4gKiBAdHlwZSB7U3R5bGVzfSBsYXlvdXRTdGFydFxuICovXG5cbnZhciBsYXlvdXRTdGFydCA9IFtsYXlvdXQsIHtcbiAgXCItbXMtZmxleC1hbGlnblwiOiBcInN0YXJ0XCIsXG4gIFwiLXdlYmtpdC1hbGlnbi1pdGVtc1wiOiBcImZsZXgtc3RhcnRcIixcbiAgXCJhbGlnbi1pdGVtc1wiOiBcImZsZXgtc3RhcnRcIlxufV07XG4vKipcbiAqIEB0eXBlIHtTdHlsZXN9IGxheW91dENlbnRlclxuICovXG5cbnZhciBsYXlvdXRDZW50ZXIgPSBbbGF5b3V0LCB7XG4gIFwiLW1zLWZsZXgtYWxpZ25cIjogXCJjZW50ZXJcIixcbiAgXCItd2Via2l0LWFsaWduLWl0ZW1zXCI6IFwiY2VudGVyXCIsXG4gIFwiYWxpZ24taXRlbXNcIjogXCJjZW50ZXJcIlxufV07XG4vKipcbiAqIEB0eXBlIHtTdHlsZXN9IGxheW91dEVuZFxuICovXG5cbnZhciBsYXlvdXRFbmQgPSBbbGF5b3V0LCB7XG4gIFwiLW1zLWZsZXgtYWxpZ25cIjogXCJlbmRcIixcbiAgXCItd2Via2l0LWFsaWduLWl0ZW1zXCI6IFwiZmxleC1lbmRcIixcbiAgXCJhbGlnbi1pdGVtc1wiOiBcImZsZXgtZW5kXCJcbn1dO1xuLyoqXG4gKiBAdHlwZSB7U3R5bGVzfSBsYXlvdXRKdXN0aWZpZWRcbiAqL1xuXG52YXIgbGF5b3V0SnVzdGlmaWVkID0gW2xheW91dCwge1xuICBcIi1tcy1mbGV4LXBhY2tcIjogXCJqdXN0aWZ5XCIsXG4gIFwiLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnRcIjogXCJzcGFjZS1iZXR3ZWVuXCIsXG4gIFwianVzdGlmeS1jb250ZW50XCI6IFwic3BhY2UtYmV0d2VlblwiXG59XTtcbi8qKlxuICogQHR5cGUge1N0eWxlc30gbGF5b3V0U3RhcnRKdXN0aWZpZWRcbiAqL1xuXG52YXIgbGF5b3V0U3RhcnRKdXN0aWZpZWQgPSBbbGF5b3V0LCB7XG4gIFwiLW1zLWZsZXgtcGFja1wiOiBcInN0YXJ0XCIsXG4gIFwiLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnRcIjogXCJmbGV4LXN0YXJ0XCIsXG4gIFwianVzdGlmeS1jb250ZW50XCI6IFwiZmxleC1zdGFydFwiXG59XTtcbi8qKlxuICogQHR5cGUge1N0eWxlc30gbGF5b3V0Q2VudGVySnVzdGlmaWVkXG4gKi9cblxudmFyIGxheW91dENlbnRlckp1c3RpZmllZCA9IFtsYXlvdXQsIHtcbiAgXCItbXMtZmxleC1wYWNrXCI6IFwiY2VudGVyXCIsXG4gIFwiLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnRcIjogXCJjZW50ZXJcIixcbiAgXCJqdXN0aWZ5LWNvbnRlbnRcIjogXCJjZW50ZXJcIlxufV07XG4vKipcbiAqIEB0eXBlIHtTdHlsZXN9IGxheW91dEVuZEp1c3RpZmllZFxuICovXG5cbnZhciBsYXlvdXRFbmRKdXN0aWZpZWQgPSBbbGF5b3V0LCB7XG4gIFwiLW1zLWZsZXgtcGFja1wiOiBcImVuZFwiLFxuICBcIi13ZWJraXQtanVzdGlmeS1jb250ZW50XCI6IFwiZmxleC1lbmRcIixcbiAgXCJqdXN0aWZ5LWNvbnRlbnRcIjogXCJmbGV4LWVuZFwiXG59XTtcbi8qKlxuICogQHR5cGUge1N0eWxlc30gbGF5b3V0Q2VudGVyQ2VudGVyXG4gKi9cblxudmFyIGxheW91dENlbnRlckNlbnRlciA9IFtsYXlvdXRDZW50ZXJKdXN0aWZpZWQsIGxheW91dENlbnRlcl07XG4vKipcbiAqIEB0eXBlIHtTdHlsZXN9IGxheW91dEFyb3VuZEp1c3RpZmllZFxuICovXG5cbnZhciBsYXlvdXRBcm91bmRKdXN0aWZpZWQgPSBbbGF5b3V0LCB7XG4gIFwiLW1zLWZsZXgtcGFja1wiOiBcImRpc3RyaWJ1dGVcIixcbiAgXCItd2Via2l0LWp1c3RpZnktY29udGVudFwiOiBcInNwYWNlLWFyb3VuZFwiLFxuICBcImp1c3RpZnktY29udGVudFwiOiBcInNwYWNlLWFyb3VuZFwiXG59XTtcbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IFtudW09MV0gXG4gKiBAcmV0dXJucyB7U3R5bGVzfVxuICovXG5cbnZhciBmbGV4ID0gZnVuY3Rpb24gZmxleCgpIHtcbiAgdmFyIG51bSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTtcbiAgcmV0dXJuIFt7XG4gICAgXCItd2Via2l0LWJveC1mbGV4XCI6IG51bVxuICB9LCB7XG4gICAgXCItbW96LWJveC1mbGV4XCI6IG51bVxuICB9LCB7XG4gICAgXCItd2Via2l0LWZsZXhcIjogbnVtXG4gIH0sIHtcbiAgICBcIi1tcy1mbGV4XCI6IG51bVxuICB9LCB7XG4gICAgXCJmbGV4XCI6IG51bVxuICB9LCBudW0gPT09IDEgPyB7XG4gICAgXCItd2Via2l0LWZsZXgtYmFzaXNcIjogXCIwLjAwMDAwMDAwMXB4XCJcbiAgfSA6IHt9LCBudW0gPT09IDEgPyB7XG4gICAgXCJmbGV4LWJhc2lzXCI6IFwiMC4wMDAwMDAwMDFweFwiXG4gIH0gOiB7fV07XG59O1xuLyoqXG4gKiBAdHlwZSB7U3R5bGVzfSBmbGV4QXV0b1xuICovXG5cblxudmFyIGZsZXhBdXRvID0ge1xuICBcIi1tcy1mbGV4XCI6IFwiMSAxIGF1dG9cIixcbiAgXCItd2Via2l0LWZsZXgtYmFzaXNcIjogXCJhdXRvXCIsXG4gIFwiZmxleC1iYXNpc1wiOiBcImF1dG9cIlxufTtcbi8qKlxuICogQHR5cGUge1N0eWxlc30gZmxleEF1dG9WZXJ0aWNhbFxuICovXG5cbnZhciBmbGV4QXV0b1ZlcnRpY2FsID0ge1xuICBcIi1tcy1mbGV4XCI6IFwiMSAxIGF1dG9cIixcbiAgXCItd2Via2l0LWZsZXgtYmFzaXNcIjogXCJhdXRvXCIsXG4gIFwiZmxleC1iYXNpc1wiOiBcImF1dG9cIlxufTtcbi8qKlxuICogXG4gKiBAcGFyYW0ge251bWJlcnxcIm5vbmVcIn0gaW5kZXggXG4gKiBAcmV0dXJucyB7U3R5bGVzfVxuICovXG5cbnZhciBmbGV4SW5kZXggPSBmdW5jdGlvbiBmbGV4SW5kZXgoaW5kZXgpIHtcbiAgcmV0dXJuIHtcbiAgICBcIi1tcy1mbGV4XCI6IGluZGV4LFxuICAgIFwiLXdlYmtpdC1mbGV4XCI6IGluZGV4LFxuICAgIFwiZmxleFwiOiBpbmRleFxuICB9O1xufTtcbi8qKlxuICogXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgXG4gKiBAcmV0dXJucyB7U3R5bGVzfVxuICovXG5cblxudmFyIGZsZXhHcm93ID0gZnVuY3Rpb24gZmxleEdyb3codmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBcIi13ZWJraXQtZmxleC1ncm93XCI6IHZhbHVlLFxuICAgIFwiZmxleC1ncm93XCI6IHZhbHVlXG4gIH07XG59O1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBcbiAqIEByZXR1cm5zIHtTdHlsZXN9XG4gKi9cblxuXG52YXIgZmxleFNocmluayA9IGZ1bmN0aW9uIGZsZXhTaHJpbmsodmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBcIi13ZWJraXQtZmxleC1zaHJpbmtcIjogdmFsdWUsXG4gICAgXCJmbGV4LXNocmlua1wiOiB2YWx1ZVxuICB9O1xufTtcbi8qKlxuICogQHR5cGUge1N0eWxlc30gc2VsZlN0YXJ0XG4gKi9cblxuXG52YXIgc2VsZlN0YXJ0ID0ge1xuICBcIi1tcy1hbGlnbi1zZWxmXCI6IFwiZmxleC1zdGFydFwiLFxuICBcIi13ZWJraXQtYWxpZ24tc2VsZlwiOiBcImZsZXgtc3RhcnRcIixcbiAgXCJhbGlnbi1zZWxmXCI6IFwiZmxleC1zdGFydFwiXG59O1xuLyoqXG4gKiBAdHlwZSB7U3R5bGVzfSBzZWxmQ2VudGVyXG4gKi9cblxudmFyIHNlbGZDZW50ZXIgPSB7XG4gIFwiLW1zLWFsaWduLXNlbGZcIjogXCJjZW50ZXJcIixcbiAgXCItd2Via2l0LWFsaWduLXNlbGZcIjogXCJjZW50ZXJcIixcbiAgXCJhbGlnbi1zZWxmXCI6IFwiY2VudGVyXCJcbn07XG4vKipcbiAqIEB0eXBlIHtTdHlsZXN9IHNlbGZFbmRcbiAqL1xuXG52YXIgc2VsZkVuZCA9IHtcbiAgXCItbXMtYWxpZ24tc2VsZlwiOiBcImZsZXgtZW5kXCIsXG4gIFwiLXdlYmtpdC1hbGlnbi1zZWxmXCI6IFwiZmxleC1lbmRcIixcbiAgXCJhbGlnbi1zZWxmXCI6IFwiZmxleC1lbmRcIlxufTtcbi8qKlxuICogQHR5cGUge1N0eWxlc30gc2VsZlN0cmV0Y2hcbiAqL1xuXG52YXIgc2VsZlN0cmV0Y2ggPSB7XG4gIFwiLW1zLWFsaWduLXNlbGZcIjogXCJzdHJldGNoXCIsXG4gIFwiLXdlYmtpdC1hbGlnbi1zZWxmXCI6IFwic3RyZXRjaFwiLFxuICBcImFsaWduLXNlbGZcIjogXCJzdHJldGNoXCJcbn07XG52YXIgZmxleCQxID0ge1xuICBmbGV4OiBmbGV4LFxuICBmbGV4QXV0bzogZmxleEF1dG8sXG4gIGZsZXhBdXRvVmVydGljYWw6IGZsZXhBdXRvVmVydGljYWwsXG4gIGZsZXhJbmRleDogZmxleEluZGV4LFxuICBmbGV4R3JvdzogZmxleEdyb3csXG4gIGZsZXhTaHJpbms6IGZsZXhTaHJpbmssXG4gIGxheW91dDogbGF5b3V0LFxuICBsYXlvdXRBcm91bmRKdXN0aWZpZWQ6IGxheW91dEFyb3VuZEp1c3RpZmllZCxcbiAgbGF5b3V0Q2VudGVyOiBsYXlvdXRDZW50ZXIsXG4gIGxheW91dENlbnRlckNlbnRlcjogbGF5b3V0Q2VudGVyQ2VudGVyLFxuICBsYXlvdXRDZW50ZXJKdXN0aWZpZWQ6IGxheW91dENlbnRlckp1c3RpZmllZCxcbiAgbGF5b3V0RW5kOiBsYXlvdXRFbmQsXG4gIGxheW91dEVuZEp1c3RpZmllZDogbGF5b3V0RW5kSnVzdGlmaWVkLFxuICBsYXlvdXRIb3Jpem9udGFsOiBsYXlvdXRIb3Jpem9udGFsLFxuICBsYXlvdXRIb3Jpem9udGFsUmV2ZXJzZTogbGF5b3V0SG9yaXpvbnRhbFJldmVyc2UsXG4gIGxheW91dElubGluZTogbGF5b3V0SW5saW5lLFxuICBsYXlvdXRKdXN0aWZpZWQ6IGxheW91dEp1c3RpZmllZCxcbiAgbGF5b3V0U3RhcnQ6IGxheW91dFN0YXJ0LFxuICBsYXlvdXRTdGFydEp1c3RpZmllZDogbGF5b3V0U3RhcnRKdXN0aWZpZWQsXG4gIGxheW91dFZlcnRpY2FsOiBsYXlvdXRWZXJ0aWNhbCxcbiAgbGF5b3V0VmVydGljYWxSZXZlcnNlOiBsYXlvdXRWZXJ0aWNhbFJldmVyc2UsXG4gIGxheW91dFdyYXA6IGxheW91dFdyYXAsXG4gIGxheW91dFdyYXBSZXZlcnNlOiBsYXlvdXRXcmFwUmV2ZXJzZSxcbiAgc2VsZkNlbnRlcjogc2VsZkNlbnRlcixcbiAgc2VsZkVuZDogc2VsZkVuZCxcbiAgc2VsZlN0YXJ0OiBzZWxmU3RhcnQsXG4gIHNlbGZTdHJldGNoOiBzZWxmU3RyZXRjaFxufTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KTtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG4vLyBAdHMtY2hlY2tcblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBTdHlsZU9iamVjdCBcbiAqL1xuXG4vKipcbiAqIENlbnRlcnMgYW4gaXRlbSBhYnNvbHV0ZWx5IHdpdGhpbiByZWxhdGl2ZSBwYXJlbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXSBcbiAqIEByZXR1cm5zIHtTdHlsZU9iamVjdH1cbiAqL1xudmFyIGZpdCA9IGZ1bmN0aW9uIGZpdCgpIHtcbiAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcbiAgdmFyIG9mZnNldFB4ID0gb2Zmc2V0ICsgXCJweFwiO1xuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgdG9wOiBvZmZzZXRQeCxcbiAgICByaWdodDogb2Zmc2V0UHgsXG4gICAgYm90dG9tOiBvZmZzZXRQeCxcbiAgICBsZWZ0OiBvZmZzZXRQeFxuICB9O1xufTtcbi8qKlxuICogQnJlYWtzIG9mZiBhIGxpbmUgd2l0aCAuLi4gdW5sZXNzIGxpbmVzIGlzIFwibm9uZVwiXG4gKiBAcGFyYW0ge251bWJlcnxcIm5vbmVcIn0gbGluZXMgXG4gKiBAcGFyYW0ge251bWJlcn0gbGluZUhlaWdodCBcbiAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdD1weF1cbiAqIEBleGFtcGxlXG4gKiAvLyBtYXggMSBsaW5lLCAxNnB4IGhpZ2hcbiAqIG1peGluLmVsbGlwc2lzKDEsIDE2KVxuICogQGV4YW1wbGUgXG4gKiAvLyBtYXggMiBsaW5lcywgMi42ZW0gaGlnaFxuICogbWl4aW4uZWxsaXBzaXMoMiwgMS4zLCBcImVtXCIpXG4gKiBAcmV0dXJucyB7U3R5bGVPYmplY3R9IFxuICovXG5cblxudmFyIGVsbGlwc2lzID0gZnVuY3Rpb24gZWxsaXBzaXMobGluZXMsIGxpbmVIZWlnaHQpIHtcbiAgdmFyIHVuaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFwicHhcIjtcblxuICBpZiAobGluZXMgPT09IFwibm9uZVwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHRPdmVyZmxvdzogXCJpbml0aWFsXCIsXG4gICAgICBvdmVyZmxvdzogXCJpbml0aWFsXCIsXG4gICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICBoZWlnaHQ6IFwiYXV0b1wiLFxuICAgICAgbWF4SGVpZ2h0OiBcIm5vbmVcIixcbiAgICAgIHdoaXRlU3BhY2U6IFwibm9ybWFsXCJcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIFt7XG4gICAgXCJAc3VwcG9ydHMgKC13ZWJraXQtbGluZS1jbGFtcDogMilcIjogbGluZXMgIT09IHVuZGVmaW5lZCA/IHtcbiAgICAgIFwiLXdlYmtpdC1saW5lLWNsYW1wXCI6IGxpbmVzLFxuICAgICAgXCItd2Via2l0LWJveC1vcmllbnRcIjogXCJ2ZXJ0aWNhbFwiLFxuICAgICAgZGlzcGxheTogXCItd2Via2l0LWJveFwiLFxuICAgICAgd29yZEJyZWFrOiBcImJyZWFrLXdvcmRcIlxuICAgIH0gOiB1bmRlZmluZWRcbiAgfSwgX29iamVjdFNwcmVhZDIoe1xuICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgIHRleHRPdmVyZmxvdzogXCJlbGxpcHNpc1wiLFxuICAgIHRleHRSZW5kZXJpbmc6IFwiYXV0b1wiXG4gIH0sIGxpbmVIZWlnaHQgIT09IHVuZGVmaW5lZCA/IHtcbiAgICBtYXhIZWlnaHQ6IGxpbmVzICogbGluZUhlaWdodCArIHVuaXRcbiAgfSA6IHVuZGVmaW5lZCwge30sIGxpbmVIZWlnaHQgPT09IDEgPyB7XG4gICAgd29yZFdyYXA6IFwibm93cmFwXCJcbiAgfSA6IHVuZGVmaW5lZCldO1xufTtcbi8qKlxuICogQ2xlYXJzIGZsb2F0LlxuICogQHJldHVybnMge1N0eWxlT2JqZWN0fSBcbiAqL1xuXG5cbnZhciBjbGVhcmZpeCA9IGZ1bmN0aW9uIGNsZWFyZml4KCkge1xuICByZXR1cm4ge1xuICAgIFwiJjphZnRlclwiOiB7XG4gICAgICBjb250ZW50OiBcIlxcXCJcXFwiXCIsXG4gICAgICBkaXNwbGF5OiBcInRhYmxlXCIsXG4gICAgICBjbGVhcjogXCJib3RoXCJcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBDcmVhdGVzIHN0aWNreSBoZWFkZXJzIGluIGEgc2Nyb2xsYWJsZSBsaXN0LlxuICogRG9lcyBub3Qgd29yayBpbiBJRSAxMSwgRWRnZSA8IDE2LlxuICogQHBhcmFtIHtudW1iZXJ9IFt6SW5kZXg9MV0gXG4gKiBAcmV0dXJucyB7U3R5bGVPYmplY3R9IFxuICovXG5cblxudmFyIHN0aWNreSA9IGZ1bmN0aW9uIHN0aWNreSgpIHtcbiAgdmFyIHpJbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMTtcbiAgcmV0dXJuIHtcbiAgICBwb3NpdGlvbjogXCJzdGlja3lcIixcbiAgICB0b3A6IDAsXG4gICAgekluZGV4OiB6SW5kZXhcbiAgfTtcbn07XG4vKipcbiAqIENyZWF0ZXMgYSB0cmFuc2l0aW9uIHdpdGggcHJlc2V0c1xuICogQHBhcmFtIHtzdHJpbmd9IFtwcm9wZXJ0aWVzPWFsbF1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbZHVyYXRpb249XCIuMThzXCJdIFxuICogQHBhcmFtIHtzdHJpbmd9IFtjdXJ2ZT1lYXNlLW91dF0gXG4gKiBAZXhhbXBsZVxuICogbWl4aW4uZGVmYXVsdFRyYW5zaXRpb24oXCJvcGFjaXR5XCIsIHZhcnMuYW5pbWF0aW9uX2R1cmF0aW9uKVxuICogQHJldHVybnMge1N0eWxlT2JqZWN0fSBcbiAqL1xuXG5cbnZhciBkZWZhdWx0VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIGRlZmF1bHRUcmFuc2l0aW9uKCkge1xuICB2YXIgcHJvcGVydGllcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCJhbGxcIjtcbiAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBcIi4xOHNcIjtcbiAgdmFyIGN1cnZlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBcImVhc2Utb3V0XCI7XG4gIHJldHVybiB7XG4gICAgdHJhbnNpdGlvbkRlbGF5OiBcIjBtc1wiLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogZHVyYXRpb24sXG4gICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiBjdXJ2ZSxcbiAgICB0cmFuc2l0aW9uUHJvcGVydHk6IHByb3BlcnRpZXNcbiAgfTtcbn07XG5cbnZhciBtaXhpbiA9IHtcbiAgY2xlYXJmaXg6IGNsZWFyZml4LFxuICBkZWZhdWx0VHJhbnNpdGlvbjogZGVmYXVsdFRyYW5zaXRpb24sXG4gIGVsbGlwc2lzOiBlbGxpcHNpcyxcbiAgZml0OiBmaXQsXG4gIHN0aWNreTogc3RpY2t5XG59O1xuXG5mdW5jdGlvbiB1bndyYXBFeHBvcnRzICh4KSB7XG5cdHJldHVybiB4ICYmIHguX19lc01vZHVsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ2RlZmF1bHQnKSA/IHhbJ2RlZmF1bHQnXSA6IHg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG52YXIgajJjUGx1Z2luUHJlZml4QnJvd3Nlcl9jb21tb25qcyA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuLy8gRGVyaXZlZCBmcm9tIExlYSBWZXJvdSdzIFByZWZpeEZyZWVcblxudmFyIGFsbFN0eWxlcztcbnZhciBzdHlsZUF0dHI7XG52YXIgc3R5bGVFbGVtZW50O1xudmFyIHN1cHBvcnRlZFByb3BlcnR5O1xudmFyIHN1cHBvcnRlZERlY2w7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gIGFsbFN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBudWxsKTtcbiAgc3R5bGVBdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpKTtcbiAgc3VwcG9ydGVkRGVjbCA9IF9zdXBwb3J0ZWREZWNsO1xuICBzdXBwb3J0ZWRQcm9wZXJ0eSA9IF9zdXBwb3J0ZWRQcm9wZXJ0eTtcbiAgaWYgKCd6SW5kZXgnIGluIHN0eWxlQXR0ciAmJiAhKCd6LWluZGV4JyBpbiBzdHlsZUF0dHIpKSB7XG4gICAgLy8gU29tZSBicm93c2VycyBsaWtlIGl0IGRhc2gtY2FzZWQsIHNvbWUgY2FtZWxDYXNlZCwgbW9zdCBsaWtlIGJvdGguXG4gICAgc3VwcG9ydGVkRGVjbCA9IGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSkge3JldHVybiBfc3VwcG9ydGVkRGVjbChjYW1lbENhc2UocHJvcGVydHkpLCB2YWx1ZSl9O1xuICAgIHN1cHBvcnRlZFByb3BlcnR5ID0gZnVuY3Rpb24ocHJvcGVydHkpIHtyZXR1cm4gX3N1cHBvcnRlZFByb3BlcnR5KGNhbWVsQ2FzZShwcm9wZXJ0eSkpfTtcbiAgfVxufVxuZnVuY3Rpb24gZmluYWxpemUoKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgLy8gYHN0eWxlQXR0cmAgaXMgdXNlZCBhdCBydW4gdGltZSB2aWEgYHN1cHBvcnRlZFByb3BlcnR5KClgXG4gIC8vIGBhbGxTdHlsZXNgIGFuZCBgc3R5bGVFbGVtZW50YCBjYW4gYmUgZGlzcGxvc2VkIG9mIGFmdGVyIGluaXRpYWxpemF0aW9uLlxuICBhbGxTdHlsZXMgPSBzdHlsZUVsZW1lbnQgPSBudWxsO1xufVxuXG5cbi8vIEhlbHBlcnMsIGluIGFscGhhYmV0aWMgb3JkZXJcblxuZnVuY3Rpb24gY2FtZWxDYXNlKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLy0oW2Etel0pL2csIGZ1bmN0aW9uKCQwLCAkMSkgeyByZXR1cm4gJDEudG9VcHBlckNhc2UoKSB9KS5yZXBsYWNlKCctJywnJylcbn1cbmZ1bmN0aW9uIGRlQ2FtZWxDYXNlKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uKCQwKSB7IHJldHVybiAnLScgKyAkMC50b0xvd2VyQ2FzZSgpIH0pXG59XG5mdW5jdGlvbiBfc3VwcG9ydGVkRGVjbChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgc3R5bGVBdHRyW3Byb3BlcnR5XSA9ICcnO1xuICBzdHlsZUF0dHJbcHJvcGVydHldID0gdmFsdWU7XG4gIHJldHVybiAhIXN0eWxlQXR0cltwcm9wZXJ0eV1cbn1cbmZ1bmN0aW9uIHN1cHBvcnRlZE1lZGlhKHByb3BlcnR5LCB2YWx1ZSkge1xuICBzdHlsZUVsZW1lbnQudGV4dENvbnRlbnQgPSAnQG1lZGlhICgnICsgcHJvcGVydHkgKyAnOicgKyB2YWx1ZSArJyl7fSc7XG4gIC8vIFRoZSAhIX5pbmRleE9mIHRyaWNrLiBGYWxzZSBmb3IgLTEsIHRydWUgb3RoZXJ3aXNlLlxuICByZXR1cm4gISF+c3R5bGVFbGVtZW50LnNoZWV0LmNzc1J1bGVzWzBdLmNzc1RleHQuaW5kZXhPZih2YWx1ZSlcbn1cbmZ1bmN0aW9uIF9zdXBwb3J0ZWRQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkgaW4gc3R5bGVBdHRyXG59XG5mdW5jdGlvbiBzdXBwb3J0ZWRSdWxlKHNlbGVjdG9yKSB7XG4gIHN0eWxlRWxlbWVudC50ZXh0Q29udGVudCA9IHNlbGVjdG9yICsgJ3t9JztcbiAgcmV0dXJuICEhc3R5bGVFbGVtZW50LnNoZWV0LmNzc1J1bGVzLmxlbmd0aFxufVxuXG4vLyBEZXJpdmVkIGZyb20gTGVhIFZlcm91J3MgUHJlZml4RnJlZVxuXG4vLyBUT0RPOiBodHRwOi8vY2FuaXVzZS5jb20vI2ZlYXQ9Y3NzLW1lZGlhLXJlc29sdXRpb25cblxuZnVuY3Rpb24gZGV0ZWN0QXRydWxlcyhmaXhlcnMpIHtcbiAgaWYgKGZpeGVycy5wcmVmaXggPT09ICcnKSByZXR1cm5cbiAgdmFyIGF0cnVsZXMgPSB7XG4gICAgJ2tleWZyYW1lcyc6ICduYW1lJyxcbiAgICAndmlld3BvcnQnOiBudWxsLFxuICAgICdkb2N1bWVudCc6ICdyZWdleHAoXCIuXCIpJ1xuICB9O1xuXG4gIC8vIGJ1aWxkIGEgbWFwIG9mIHsnQHJ1bGVYJzogJ0AtcHJlZml4LXJ1bGVYJ31cbiAgZm9yKHZhciBhdHJ1bGUgaW4gYXRydWxlcykge1xuICAgIHZhciB0ZXN0ID0gYXRydWxlICsgJyAnICsgKGF0cnVsZXNbYXRydWxlXSB8fCAnJyk7XG4gICAgZm9yICh2YXIgaSA9IGZpeGVycy5wcmVmaXhlcy5sZW5ndGg7IGktLTspIHtcbiAgICAgIGlmICghc3VwcG9ydGVkUnVsZSgnQCcgKyB0ZXN0KSAmJiBzdXBwb3J0ZWRSdWxlKCdAJyArIGZpeGVycy5wcmVmaXhlc1tpXSArIHRlc3QpKSB7XG5cbiAgICAgICAgZml4ZXJzLmhhc0F0cnVsZXMgPSB0cnVlO1xuICAgICAgICBmaXhlcnMuYXRydWxlc1snQCcgKyBhdHJ1bGVdID0gJ0AnICsgZml4ZXJzLnByZWZpeGVzW2ldICsgYXRydWxlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFN0YW5kYXJkXG4gIGZpeGVycy5oYXNEcHB4ID0gc3VwcG9ydGVkTWVkaWEoJ3Jlc29sdXRpb24nLCAnMWRwcHgnKTtcbiAgLy8gV2Via2l0XG4gIGZpeGVycy5oYXNQaXhlbFJhdGlvID0gc3VwcG9ydGVkTWVkaWEoZml4ZXJzLnByZWZpeCArICdkZXZpY2UtcGl4ZWwtcmF0aW8nLCAnMScpO1xuICAvLyBPcGVyYVxuICBmaXhlcnMuaGFzUGl4ZWxSYXRpb0ZyYWN0aW9uID0gc3VwcG9ydGVkTWVkaWEoZml4ZXJzLnByZWZpeCArICdkZXZpY2UtcGl4ZWwtcmF0aW8nLCAnMS8xJyk7XG5cbiAgaWYgKGZpeGVycy5oYXNQaXhlbFJhdGlvIHx8IGZpeGVycy5oYXNQaXhlbFJhdGlvRnJhY3Rpb24pIHtcbiAgICBmaXhlcnMucHJvcGVydGllc1sncmVzb2x1dGlvbiddID0gZml4ZXJzLnByZWZpeCArICdkZXZpY2UtcGl4ZWwtcmF0aW8nO1xuICAgIGZpeGVycy5wcm9wZXJ0aWVzWydtaW4tcmVzb2x1dGlvbiddID0gZml4ZXJzLnByZWZpeCArICdtaW4tZGV2aWNlLXBpeGVsLXJhdGlvJztcbiAgICBmaXhlcnMucHJvcGVydGllc1snbWF4LXJlc29sdXRpb24nXSA9IGZpeGVycy5wcmVmaXggKyAnbWF4LWRldmljZS1waXhlbC1yYXRpbyc7XG4gICAgaWYgKHN1cHBvcnRlZE1lZGlhKCdtaW4tJyArIGZpeGVycy5wcmVmaXggKyAnZGV2aWNlLXBpeGVsLXJhdGlvJywgJzEnKSkge1xuICAgICAgLy8gTW96aWxsYS9GaXJlZm94IHR1bnJlZCBhIHZlbmRvciBwcmVmaXggaW50byBhIHZlbmRvciBpbmZpeFxuICAgICAgZml4ZXJzLnByb3BlcnRpZXNbJ21pbi1yZXNvbHV0aW9uJ10gPSAnbWluLScgKyBmaXhlcnMucHJlZml4ICsgJ2RldmljZS1waXhlbC1yYXRpbyc7XG4gICAgICBmaXhlcnMucHJvcGVydGllc1snbWF4LXJlc29sdXRpb24nXSA9ICdtYXgtJyArIGZpeGVycy5wcmVmaXggKyAnZGV2aWNlLXBpeGVsLXJhdGlvJztcbiAgICB9XG4gIH1cbn1cblxuLy8gRGVyaXZlZCBmcm9tIExlYSBWZXJvdSdzIFByZWZpeEZyZWVcblxuZnVuY3Rpb24gZGV0ZWN0RnVuY3Rpb25zKGZpeGVycykge1xuICAvLyBWYWx1ZXMgdGhhdCBtaWdodCBuZWVkIHByZWZpeGluZ1xuICBpZiAoZml4ZXJzLnByZWZpeCA9PT0gJycpIHJldHVyblxuICB2YXIgZnVuY3Rpb25zID0ge1xuICAgICdsaW5lYXItZ3JhZGllbnQnOiB7XG4gICAgICBwcm9wZXJ0eTogJ2JhY2tncm91bmQtaW1hZ2UnLFxuICAgICAgcGFyYW1zOiAncmVkLCB0ZWFsJ1xuICAgIH0sXG4gICAgJ2NhbGMnOiB7XG4gICAgICBwcm9wZXJ0eTogJ3dpZHRoJyxcbiAgICAgIHBhcmFtczogJzFweCArIDUlJ1xuICAgIH0sXG4gICAgJ2VsZW1lbnQnOiB7XG4gICAgICBwcm9wZXJ0eTogJ2JhY2tncm91bmQtaW1hZ2UnLFxuICAgICAgcGFyYW1zOiAnI2ZvbydcbiAgICB9LFxuICAgICdjcm9zcy1mYWRlJzoge1xuICAgICAgcHJvcGVydHk6ICdiYWNrZ3JvdW5kSW1hZ2UnLFxuICAgICAgcGFyYW1zOiAndXJsKGEucG5nKSwgdXJsKGIucG5nKSwgNTAlJ1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb25zWydyZXBlYXRpbmctbGluZWFyLWdyYWRpZW50J10gPVxuICBmdW5jdGlvbnNbJ3JlcGVhdGluZy1yYWRpYWwtZ3JhZGllbnQnXSA9XG4gIGZ1bmN0aW9uc1sncmFkaWFsLWdyYWRpZW50J10gPVxuICBmdW5jdGlvbnNbJ2xpbmVhci1ncmFkaWVudCddO1xuXG4gIC8vIGJ1aWxkIGFuIGFycmF5IG9mIHByZWZpeGFibGUgZnVuY3Rpb25zXG4gIGZvciAodmFyIGZ1bmMgaW4gZnVuY3Rpb25zKSB7XG4gICAgdmFyIHRlc3QgPSBmdW5jdGlvbnNbZnVuY10sXG4gICAgICBwcm9wZXJ0eSA9IHRlc3QucHJvcGVydHksXG4gICAgICB2YWx1ZSA9IGZ1bmMgKyAnKCcgKyB0ZXN0LnBhcmFtcyArICcpJztcblxuICAgIGlmICghc3VwcG9ydGVkRGVjbChwcm9wZXJ0eSwgdmFsdWUpICYmIHN1cHBvcnRlZERlY2wocHJvcGVydHksIGZpeGVycy5wcmVmaXggKyB2YWx1ZSkpIHtcbiAgICAgIC8vIEl0J3Mgb25seSBzdXBwb3J0ZWQgd2l0aCBhIHByZWZpeFxuICAgICAgZml4ZXJzLmZ1bmN0aW9ucy5wdXNoKGZ1bmMpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBEZXJpdmVkIGZyb20gTGVhIFZlcm91J3MgUHJlZml4RnJlZSBhbmQgUm9iaW4gRnJpc2NobWFubidzIElubGluZSBTdHlsZSBQcmVmaXhlclxuXG4vLyBUT0RPOiBodHRwOi8vY2FuaXVzZS5jb20vI2ZlYXQ9Y3NzLXdyaXRpbmctbW9kZVxuXG4vLyBkYiBvZiBwcm9wL3ZhbHVlIHBhaXJzIHdob3NlIHZhbHVlcyBtYXkgbmVlZCB0cmVhdG1lbnQuXG5cbnZhciBrZXl3b3JkcyA9IFtcblxuICAvLyBgaW5pdGlhbGAgYXBwbGllcyB0byBhbGwgcHJvcGVydGllcyBhbmQgaXMgdGh1cyBoYW5kbGVkIHNlcGFyYXRlbHkuXG4gIHtcbiAgICBwcm9wczogWydjdXJzb3InXSxcbiAgICB2YWx1ZXM6IFsgJ2dyYWInLCAnZ3JhYmJpbmcnLCAnem9vbS1pbicsICd6b29tLW91dCddXG4gIH0sXG4gIHtcbiAgICBwcm9wczogWydkaXNwbGF5J10sXG4gICAgdmFsdWVzOlsnYm94JywgJ2lubGluZS1ib3gnLCAnZmxleGJveCcsICdpbmxpbmUtZmxleGJveCcsICdmbGV4JywgJ2lubGluZS1mbGV4JywgJ2dyaWQnLCAnaW5saW5lLWdyaWQnXVxuICB9LFxuICB7XG4gICAgcHJvcHM6IFsncG9zaXRpb24nXSxcbiAgICB2YWx1ZXM6IFsgJ3N0aWNreScgXVxuICB9LFxuICB7XG4gICAgcHJvcHM6IFsnd2lkdGgnLCAnY29sdW1uLXdpZHRoJywgJ2hlaWdodCcsICdtYXgtaGVpZ2h0JywgJ21heC13aWR0aCcsICdtaW4taGVpZ2h0JywgJ21pbi13aWR0aCddLFxuICAgIHZhbHVlczogWydjb250YWluLWZsb2F0cycsICdmaWxsLWF2YWlsYWJsZScsICdmaXQtY29udGVudCcsICdtYXgtY29udGVudCcsICdtaW4tY29udGVudCddXG4gIH1cbl07XG4vLyBUaGUgZmxleGJveCB6b29cbi8vXG4vLyAjIyBTcGVjczpcbi8vIC0gYm94ICAgICAoMjAwOS9vbGQpOiAgaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDkvV0QtY3NzMy1mbGV4Ym94LTIwMDkwNzIzL1xuLy8gLSBmbGV4Ym94ICgyMDEyL2llMTApOiBodHRwczovL3d3dy53My5vcmcvVFIvMjAxMi9XRC1jc3MzLWZsZXhib3gtMjAxMjAzMjIvXG4vLyAtIGZsZXggICAgKGZpbmFsKTogICAgIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtZmxleGJveC0xL1xudmFyIGZsZXgyMDA5UHJvcHMgPSB7XG4gIC8vID9hbGlnbi1jb250ZW50ID0+XG4gIC8vID9hbGlnbi1zZWxmID0+XG4gICdhbGlnbi1pdGVtcyc6ICdib3gtYWxpZ24nLFxuICAnZmxleCc6ICdib3gtZmxleCcsIC8vIGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvY3NzL2EtZ3VpZGUtdG8tZmxleGJveC8jY29tbWVudC0zNzEwMjUsXG4gIC8vID9mbGV4LWJhc2lzID0+XG4gIC8vICEhZmxleC1kaXJlY3Rpb24gPT4gYm94LWRpcmVjdGlvbiArIGJveC1vcmllbnQsIGNvdmVyZWQgaW4gYHBsdWdpbi5qc2BcbiAgJ2JveC1kaXJlY3Rpb24nIDogJ2JveC1kaXJlY3Rpb24nLCAvLyB3ZSBwcmVwb3B1bGF0ZSB0aGUgY2FjaGUgZm9yIHRoZSBhYm92ZSBjYXNlLlxuICAnYm94LW9yaWVudCc6ICdib3gtb3JpZW50JyxcbiAgLy8gISFmbGV4LWZsb3cgPT4gZmxleC1kaXJlY3Rpb24gYW5kL29yIGZsZXgtd3JhcCwgY292ZXJlZCBpbiBgcGx1Z2luLmpzYFxuICAnZmxleC1ncm93JzogJ2JveC1mbGV4JywgLy8gaHR0cHM6Ly9jb21wYXQuc3BlYy53aGF0d2cub3JnLyNwcm9wZGVmLS13ZWJraXQtYm94LWZsZXhcbiAgLy8gP2ZsZXgtc2hyaW5rID0+XG4gICdmbGV4LXdyYXAnOiAnYm94LWxpbmVzJyxcbiAgJ2p1c3RpZnktY29udGVudCc6ICdib3gtcGFjaycsXG4gICdvcmRlcic6ICdib3gtb3JkaW5hbC1ncm91cCcgLy8gaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvYS1ndWlkZS10by1mbGV4Ym94LyNjb21tZW50LTM3MTAyNVxufTtcbnZhciBmbGV4MjAwOVZhbHVlcyA9IHtcbiAgLy8gZmxleCA9PiBib3ggfHwgb25seSBmb3IgZGlzcGxheT8gaGFuZGxlZCBpbiB0aGUgY29kZVxuICAnZmxleC1lbmQnOiAnZW5kJyxcbiAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAvLyBpbmxpbmUtZmxleCA9PiBpbmxpbmUtYm94IHx8IHNlZSBmbGV4XG4gICdub3dyYXAnOiAnc2luZ2xlJyxcbiAgJ3NwYWNlLWFyb3VuZCc6ICdqdXN0aWZ5JyxcbiAgJ3NwYWNlLWJldHdlZW4nOiAnanVzdGlmeScsXG4gICd3cmFwJzogJ211bHRpcGxlJyxcbiAgJ3dyYXAtcmV2ZXJzZSc6ICdtdWx0aXBsZSdcbn07XG52YXIgZmxleDIwMTJQcm9wcyA9IHtcbiAgJ2FsaWduLWNvbnRlbnQnOiAnLW1zLWZsZXgtbGluZS1wYWNrJyxcbiAgJ2FsaWduLWl0ZW1zJzogJy1tcy1mbGV4LWFsaWduJyxcbiAgJ2FsaWduLXNlbGYnOiAnLW1zLWZsZXgtaXRlbS1hbGlnbicsXG4gIC8vIGZsZXggPT4gLW1zLWZsZXhcbiAgJ2ZsZXgtYmFzaXMnOiAnLW1zLXByZWZlcnJlZC1zaXplJyxcbiAgLy8gZmxleC1kaXJlY3Rpb24gPT4gLW1zLWZsZXgtZGlyZWN0aW9uXG4gIC8vIGZsZXgtZmxvdyA9PiAtbXMtZmxleC1mbG93XG4gICdmbGV4LWdyb3cnOiAnLW1zLWZsZXgtcG9zaXRpdmUnLFxuICAnZmxleC1zaHJpbmsnOiAnLW1zLWZsZXgtbmVnYXRpdmUnLFxuICAvLyBmbGV4LXdyYXAgPT4gLW1zLWZsZXgtd3JhcFxuICAnanVzdGlmeS1jb250ZW50JzogJy1tcy1mbGV4LXBhY2snLFxuICAnb3JkZXInOiAnLW1zLWZsZXgtb3JkZXInXG59O1xudmFyIGZsZXgyMDEyVmFsdWVzID0ge1xuICAvLyBmbGV4ID0+IGZsZXhib3ggfHwgb25seSBmb3IgZGlzcGxheT8gaGFuZGxlZCBpbiB0aGUgY29kZVxuICAnZmxleC1lbmQnOiAnZW5kJyxcbiAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAvLyBpbmxpbmUtZmxleCA9PiBpbmxpbmUtZmxleGJveCB8fCBzZWUgJ2ZsZXgnXG4gIC8vIG5vd3JhcCA9PiBub3dyYXBcbiAgJ3NwYWNlLWFyb3VuZCc6ICdkaXN0cmlidXRlJyxcbiAgJ3NwYWNlLWJldHdlZW4nOiAnanVzdGlmeSdcbiAgLy8gd3JhcCA9PiB3cmFwXG4gIC8vIHdyYXAtcmV2ZXJzZSA9PiB3cmFwLXJldmVyc2Vcbn07XG5cbmZ1bmN0aW9uIGRldGVjdEtleXdvcmRzKGZpeGVycykge1xuICBpZiAoZml4ZXJzLnByZWZpeGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuXG5cbiAgLy8gYnVpbGQgYSBtYXAgb2Yge3Byb3BlcnR5SToge2tleXdvcmRKOiBwcmV2aXhlZEtleXdvcmRKLCAuLi59LCAuLi59XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5d29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWFwID0ge30sIHByb3BlcnR5ID0ga2V5d29yZHNbaV0ucHJvcHNbMF07XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgZm9yICh2YXIgaiA9IDAsIGtleXdvcmQ7IGtleXdvcmQgPSBrZXl3b3Jkc1tpXS52YWx1ZXNbal07IGorKykge1xuICAgICAgZm9yICh2YXIgayA9IGZpeGVycy5wcmVmaXhlcy5sZW5ndGg7IGstLTspIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICFzdXBwb3J0ZWREZWNsKHByb3BlcnR5LCBrZXl3b3JkKSAmJlxuICAgICAgICAgIHN1cHBvcnRlZERlY2wocHJvcGVydHksIGZpeGVycy5wcmVmaXhlc1trXSArIGtleXdvcmQpXG4gICAgICAgICkge1xuICAgICAgICAgIGZpeGVycy5oYXNLZXl3b3JkcyA9IHRydWU7XG4gICAgICAgICAgbWFwW2tleXdvcmRdID0gZml4ZXJzLnByZWZpeGVzW2tdICsga2V5d29yZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBmb3IgKGogPSAwOyBwcm9wZXJ0eSA9IGtleXdvcmRzW2ldLnByb3BzW2pdOyBqKyspIHtcbiAgICAgIGZpeGVycy5rZXl3b3Jkc1twcm9wZXJ0eV0gPSBtYXA7XG4gICAgfVxuICB9XG4gIGlmIChmaXhlcnMua2V5d29yZHMuZGlzcGxheSAmJiBmaXhlcnMua2V5d29yZHMuZGlzcGxheS5mbGV4Ym94ICYmICFzdXBwb3J0ZWREZWNsKCdkaXNwbGF5JywgJ2ZsZXgnKSkge1xuICAgIC8vIElFIDEwLCBGbGV4Ym94IDIwMTJcbiAgICBmaXhlcnMua2V5d29yZHMuZGlzcGxheS5mbGV4ID0gZml4ZXJzLmtleXdvcmRzLmRpc3BsYXkuZmxleGJveDtcbiAgICBmaXhlcnMua2V5d29yZHMuZGlzcGxheVsnaW5saW5lLWZsZXgnXSA9IGZpeGVycy5rZXl3b3Jkcy5kaXNwbGF5WydpbmxpbmUtZmxleGJveCddO1xuICAgIGZpeGVycy5mbGV4Ym94MjAxMiA9IHRydWU7XG4gICAgZm9yIChrIGluIGZsZXgyMDEyUHJvcHMpIHtcbiAgICAgIGZpeGVycy5wcm9wZXJ0aWVzW2tdID0gZmxleDIwMTJQcm9wc1trXTtcbiAgICAgIGZpeGVycy5rZXl3b3Jkc1trXSA9IGZsZXgyMDEyVmFsdWVzO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcbiAgICBmaXhlcnMua2V5d29yZHMuZGlzcGxheSAmJlxuICAgIGZpeGVycy5rZXl3b3Jkcy5kaXNwbGF5LmJveCAmJlxuICAgICFzdXBwb3J0ZWREZWNsKCdkaXNwbGF5JywgJ2ZsZXgnKSAmJlxuICAgICFzdXBwb3J0ZWREZWNsKCdkaXNwbGF5JywgZml4ZXJzLnByZWZpeCArICdmbGV4JylcbiAgKSB7XG4gICAgLy8gb2xkIGZsZXhib3ggc3BlY1xuICAgIGZpeGVycy5rZXl3b3Jkcy5kaXNwbGF5LmZsZXggPSBmaXhlcnMua2V5d29yZHMuZGlzcGxheS5ib3g7XG4gICAgZml4ZXJzLmtleXdvcmRzLmRpc3BsYXlbJ2lubGluZS1mbGV4J10gPSBmaXhlcnMua2V5d29yZHMuZGlzcGxheVsnaW5saW5lLWJveCddO1xuICAgIGZpeGVycy5mbGV4Ym94MjAwOSA9IHRydWU7XG4gICAgZm9yIChrIGluIGZsZXgyMDA5UHJvcHMpIHtcbiAgICAgIGZpeGVycy5wcm9wZXJ0aWVzW2tdID0gZml4ZXJzLnByZWZpeCArIGZsZXgyMDA5UHJvcHNba107XG4gICAgICBmaXhlcnMua2V5d29yZHNba10gPSBmbGV4MjAwOVZhbHVlcztcbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgZml4ZXJzLmtleXdvcmRzLmRpc3BsYXkgJiZcbiAgICAhZml4ZXJzLmtleXdvcmRzLmRpc3BsYXkuYm94ICYmXG4gICAgIWZpeGVycy5rZXl3b3Jkcy5kaXNwbGF5LmZsZXggJiZcbiAgICAhZml4ZXJzLmtleXdvcmRzLmRpc3BsYXkuZmxleGJveCAmJlxuICAgICFzdXBwb3J0ZWREZWNsKCdkaXNwbGF5JywgJ2ZsZXgnKVxuICApIHtcbiAgICBmaXhlcnMuanNGbGV4ID0gdHJ1ZTtcbiAgfVxuICBpZiAoXG4gICAgIXN1cHBvcnRlZERlY2woJ2NvbG9yJywgJ2luaXRpYWwnKSAmJlxuICAgIHN1cHBvcnRlZERlY2woJ2NvbG9yJywgZml4ZXJzLnByZWZpeCArICdpbml0aWFsJylcbiAgKSB7XG4gICAgLy8gYGluaXRpYWxgIGRvZXMgbm90IHVzZSB0aGUgYGhhc0tleXdvcmRzYCBicmFuY2gsIG5vIG5lZWQgdG8gc2V0IGl0IHRvIHRydWUuXG4gICAgZml4ZXJzLmluaXRpYWwgPSBmaXhlcnMucHJlZml4ICsgJ2luaXRpYWwnO1xuICB9XG59XG5cbi8vIERlcml2ZWQgZnJvbSBMZWEgVmVyb3UncyBQcmVmaXhGcmVlXG5cbmZ1bmN0aW9uIGRldGVjdFByZWZpeChmaXhlcnMpIHtcbiAgdmFyIHByZWZpeENvdW50ZXJzID0ge307XG4gIC8vIFdoeSBhcmUgd2UgZG9pbmcgdGhpcyBpbnN0ZWFkIG9mIGl0ZXJhdGluZyBvdmVyIHByb3BlcnRpZXMgaW4gYSAuc3R5bGUgb2JqZWN0PyBCZWNhdXNlIFdlYmtpdC5cbiAgLy8gMS4gT2xkZXIgV2Via2l0IHdvbid0IGl0ZXJhdGUgb3ZlciB0aG9zZS5cbiAgLy8gMi4gUmVjZW50IFdlYmtpdCB3aWxsLCBidXQgdGhlICdXZWJraXQnLXByZWZpeGVkIHByb3BlcnRpZXMgYXJlIG5vdCBlbnVtZXJhYmxlLiBUaGUgJ3dlYmtpdCdcbiAgLy8gICAgKGxvd2VyIGNhc2UgJ3cnKSBvbmVzIGFyZSwgYnV0IHRoZXkgZG9uJ3QgYGRlQ2FtZWxDYXNlKClgIGludG8gYSBwcmVmaXggdGhhdCB3ZSBjYW4gZGV0ZWN0LlxuXG4gIGZ1bmN0aW9uIGl0ZXJhdGlvbihwcm9wZXJ0eSkge1xuICAgIGlmKHByb3BlcnR5LmNoYXJBdCgwKSA9PT0gJy0nKSB7XG4gICAgICB2YXIgcHJlZml4ID0gcHJvcGVydHkuc3BsaXQoJy0nKVsxXTtcblxuICAgICAgLy8gQ291bnQgcHJlZml4IHVzZXNcbiAgICAgIHByZWZpeENvdW50ZXJzW3ByZWZpeF0gPSArK3ByZWZpeENvdW50ZXJzW3ByZWZpeF0gfHwgMTtcbiAgICB9XG4gIH1cblxuICAvLyBTb21lIGJyb3dzZXJzIGhhdmUgbnVtZXJpY2FsIGluZGljZXMgZm9yIHRoZSBwcm9wZXJ0aWVzLCBzb21lIGRvbid0XG4gIGlmKGFsbFN0eWxlcyAmJiBhbGxTdHlsZXMubGVuZ3RoID4gMCkge1xuICAgIGZvcih2YXIgaT0wOyBpPGFsbFN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaXRlcmF0aW9uKGFsbFN0eWxlc1tpXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvcih2YXIgcHJvcGVydHkgaW4gYWxsU3R5bGVzKSB7XG4gICAgICBpdGVyYXRpb24oZGVDYW1lbENhc2UocHJvcGVydHkpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcHJlZml4ZXMgPSBbXTtcbiAgZm9yICh2YXIgcCBpbiBwcmVmaXhDb3VudGVycykgcHJlZml4ZXMucHVzaChwKTtcbiAgcHJlZml4ZXMuc29ydChmdW5jdGlvbihhLGIpIHtyZXR1cm4gcHJlZml4Q291bnRlcnNbYl0gLSBwcmVmaXhDb3VudGVyc1thXX0pO1xuXG4gIGZpeGVycy5wcmVmaXhlcyA9IHByZWZpeGVzLm1hcChmdW5jdGlvbihwKXtyZXR1cm4gJy0nICsgcCArICctJ30pO1xuICBmaXhlcnMucHJlZml4ID0gZml4ZXJzLnByZWZpeGVzWzBdIHx8ICcnO1xuICAvLyBFZGdlIHN1cHBvcnRzIGJvdGggYHdlYmtpdGAgYW5kIGBtc2AgcHJlZml4ZXMsIGJ1dCBgbXNgIGlzbid0IGRldGVjdGVkIHdpdGggdGhlIG1ldGhvZCBhYm92ZS5cbiAgLy8gdGhlIHNlbGVjdG9yIGNvbWVzIGZyb20gaHR0cDovL2Jyb3dzZXJzdHJhbmdlbmVzcy5jb20vY3NzX2hhY2tzLmh0bWxcbiAgaWYgKHN1cHBvcnRlZFJ1bGUoJ186LW1zLWxhbmcoeCksIF86LXdlYmtpdC1mdWxsLXNjcmVlbicpKSBmaXhlcnMucHJlZml4ZXMucHVzaCgnLW1zLScpO1xuICBmaXhlcnMuUHJlZml4ID0gY2FtZWxDYXNlKGZpeGVycy5wcmVmaXgpO1xufVxuXG4vLyBEZXJpdmVkIGZyb20gTGVhIFZlcm91J3MgUHJlZml4RnJlZVxuXG5mdW5jdGlvbiBkZXRlY3RTZWxlY3RvcnMoZml4ZXJzKSB7XG4gIHZhciBzZWxlY3RvciwgcHJlZml4ZWQ7XG4gIGZ1bmN0aW9uIHByZWZpeFNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yLnJlcGxhY2UoL146Oj8vLCBmdW5jdGlvbigkMCkgeyByZXR1cm4gJDAgKyBmaXhlcnMucHJlZml4IH0pXG4gIH1cblxuICBpZiAoZml4ZXJzLnByZWZpeCA9PT0gJycpIHJldHVyblxuICB2YXIgc2VsZWN0b3JzID0ge1xuICAgICc6YW55LWxpbmsnOiBudWxsLFxuICAgICc6OmJhY2tkcm9wJzogbnVsbCxcbiAgICAnOmZ1bGxzY3JlZW4nOiBudWxsLCAvL1RPRE8gc29ydCBvdXQgd2hhdCBjaGFuZ2VkIGJldHdlZW4gc3BlY3NcbiAgICAnOmZ1bGwtc2NyZWVuJzogJzpmdWxsc2NyZWVuJyxcbiAgICAvL3NpZ2hcbiAgICAnOjpwbGFjZWhvbGRlcic6IG51bGwsXG4gICAgJzpwbGFjZWhvbGRlcic6ICc6OnBsYWNlaG9sZGVyJyxcbiAgICAnOjppbnB1dC1wbGFjZWhvbGRlcic6ICc6OnBsYWNlaG9sZGVyJyxcbiAgICAnOmlucHV0LXBsYWNlaG9sZGVyJzogJzo6cGxhY2Vob2xkZXInLFxuICAgICc6cmVhZC1vbmx5JzogbnVsbCxcbiAgICAnOnJlYWQtd3JpdGUnOiBudWxsLFxuICAgICc6OnNlbGVjdGlvbic6IG51bGxcbiAgfTtcblxuICAvLyBidWlsZHMgYW4gYXJyYXkgb2Ygc2VsZWN0b3JzIHRoYXQgbmVlZCBhIHByZWZpeC5cbiAgZm9yIChzZWxlY3RvciBpbiBzZWxlY3RvcnMpIHtcbiAgICBwcmVmaXhlZCA9IHByZWZpeFNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICBpZighc3VwcG9ydGVkUnVsZShzZWxlY3RvcnNbc2VsZWN0b3JdIHx8IHNlbGVjdG9yKSAmJiBzdXBwb3J0ZWRSdWxlKHByZWZpeGVkKSkge1xuICAgICAgZml4ZXJzLmhhc1NlbGVjdG9ycyA9IHRydWU7XG4gICAgICBmaXhlcnMuc2VsZWN0b3JMaXN0LnB1c2goc2VsZWN0b3JzW3NlbGVjdG9yXSB8fCBzZWxlY3Rvcik7XG4gICAgICBmaXhlcnMuc2VsZWN0b3JNYXBbc2VsZWN0b3JzW3NlbGVjdG9yXSB8fCBzZWxlY3Rvcl0gPSBwcmVmaXhlZDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGV0ZWN0V2Via2l0Q29tcGF0KGZpeGVycykge1xuICBpZiAoIXN1cHBvcnRlZERlY2woJ2JhY2tncm91bmQtY2xpcCcsICd0ZXh0JykgJiYgc3VwcG9ydGVkRGVjbCgnLXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXAnLCAndGV4dCcpKSBmaXhlcnMuV2tCQ1R4dCA9IHRydWVcbiAgO1snYmFja2dyb3VuZC1jbGlwJywgJ3RleHQtZmlsbC1jb2xvcicsICd0ZXh0LXN0cm9rZS1jb2xvcicsICd0ZXh0LXN0cm9rZS13aWR0aCcsICd0ZXh0LXN0cm9rZSddLmZvckVhY2goZnVuY3Rpb24ocHJvcCl7XG4gICAgaWYoIXN1cHBvcnRlZFByb3BlcnR5KHByb3ApICYmIHN1cHBvcnRlZFByb3BlcnR5KCctd2Via2l0LScgKyBwcm9wKSkgZml4ZXJzLnByb3BlcnRpZXNbcHJvcF0gPSAnLXdlYmtpdC0nICsgcHJvcDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGJsYW5rRml4ZXJzKCkge1xuICByZXR1cm4ge1xuICAgIGF0cnVsZXM6IHt9LFxuICAgIGhhc0F0cnVsZXM6IGZhbHNlLFxuICAgIGhhc0RwcHg6IG51bGwsXG4gICAgaGFzS2V5d29yZHM6IGZhbHNlLFxuICAgIGhhc1BpeGVsUmF0aW86IGZhbHNlLFxuICAgIGhhc1BpeGVsUmF0aW9GcmFjdGlvbjogZmFsc2UsXG4gICAgaGFzU2VsZWN0b3JzOiBmYWxzZSxcbiAgICBoYXNWYWx1ZXM6IGZhbHNlLFxuICAgIGZpeEF0TWVkaWFQYXJhbXM6IG51bGwsXG4gICAgZml4QXRTdXBwb3J0c1BhcmFtczogbnVsbCxcbiAgICBmaXhQcm9wZXJ0eTogbnVsbCxcbiAgICBmaXhTZWxlY3RvcjogbnVsbCxcbiAgICBmaXhWYWx1ZTogbnVsbCxcbiAgICBmbGV4Ym94MjAwOTogZmFsc2UsXG4gICAgZmxleGJveDIwMTI6IGZhbHNlLFxuICAgIGZ1bmN0aW9uczogW10sXG4gICAgaW5pdGlhbDogbnVsbCxcbiAgICBqc0ZsZXg6IGZhbHNlLFxuICAgIGtleXdvcmRzOiB7fSxcbiAgICBwbGFjZWhvbGRlcjogbnVsbCxcbiAgICBwcmVmaXg6ICcnLFxuICAgIHByZWZpeGVzOiBbXSxcbiAgICBQcmVmaXg6ICcnLFxuICAgIHByb3BlcnRpZXM6IHt9LFxuICAgIHNlbGVjdG9yTGlzdDogW10sXG4gICAgc2VsZWN0b3JNYXA6IHt9LFxuICAgIHZhbHVlUHJvcGVydGllczoge1xuICAgICAgJ3RyYW5zaXRpb24nOiAxLFxuICAgICAgJ3RyYW5zaXRpb24tcHJvcGVydHknOiAxLFxuICAgICAgJ3dpbGwtY2hhbmdlJzogMVxuICAgIH0sXG4gICAgV2tCQ1R4dDogZmFsc2UgLy8gLXdlYmtpdC1iYWNrZ3JvdW5kLWNsaXA6IHRleHRcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGJyb3dzZXJEZXRlY3RvcihmaXhlcnMpIHtcbiAgLy8gYWRkIHRoZSByZXF1aXJlZCBkYXRhIHRvIHRoZSBmaXhlcnMgb2JqZWN0LlxuICBpbml0KCk7XG4gIGRldGVjdFByZWZpeChmaXhlcnMpO1xuICBkZXRlY3RTZWxlY3RvcnMoZml4ZXJzKTtcbiAgZGV0ZWN0QXRydWxlcyhmaXhlcnMpO1xuICBkZXRlY3RLZXl3b3JkcyhmaXhlcnMpO1xuICBkZXRlY3RGdW5jdGlvbnMoZml4ZXJzKTtcbiAgZGV0ZWN0V2Via2l0Q29tcGF0KGZpeGVycyk7XG4gIGZpbmFsaXplKCk7XG59XG5cbnZhciBlbXB0eVNldCA9IHt9O1xuXG52YXIgdmFsdWVUb2tlbml6ZXIgPSAvWygpLF18XFwvXFwqW1xcc1xcU10qP1xcKlxcLy9nO1xuXG4vKipcbiAqIEZvciBwcm9wZXJ0aWVzIHdob3NlIHZhbHVlcyBhcmUgYWxzbyBwcm9wZXJ0aWVzLCB0aGlzIHdpbGwgc3BsaXQgYSBjb21hLXNlcGFyYXRlZFxuICogdmFsdWUgbGlzdCBpbnRvIGluZGl2aWR1YWwgdmFsdWVzLCBpZ25vcmluZyBjb21hcyBpbiBjb21tZW50cyBhbmQgaW5cbiAqIGZ1bmN0aW9ucyhwYXJhbWV0ZXIsIGxpc3RzKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5cbmZ1bmN0aW9uIHNwbGl0VmFsdWUodmFsdWUpIHtcbiAgdmFyIGluZGljZXMgPSBbXSwgcmVzID0gW10sIGluUGFyZW4gPSAwLCBvO1xuICAvKmVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduKi9cbiAgd2hpbGUgKG8gPSB2YWx1ZVRva2VuaXplci5leGVjKHZhbHVlKSkge1xuICAvKmVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24qL1xuICAgIHN3aXRjaCAob1swXSkge1xuICAgIGNhc2UgJygnOiBpblBhcmVuKys7IGJyZWFrXG4gICAgY2FzZSAnKSc6IGluUGFyZW4tLTsgYnJlYWtcbiAgICBjYXNlICcsJzogaWYgKGluUGFyZW4pIGJyZWFrOyBpbmRpY2VzLnB1c2goby5pbmRleCk7XG4gICAgfVxuICB9XG4gIGZvciAobyA9IGluZGljZXMubGVuZ3RoOyBvLS07KXtcbiAgICByZXMudW5zaGlmdCh2YWx1ZS5zbGljZShpbmRpY2VzW29dICsgMSkpO1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaW5kaWNlc1tvXSk7XG4gIH1cbiAgcmVzLnVuc2hpZnQodmFsdWUpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG1ha2VEZXRlY3RvciAoYmVmb3JlLCB0YXJnZXRzLCBhZnRlcikge1xuICByZXR1cm4gbmV3IFJlZ0V4cChiZWZvcmUgKyAnKD86JyArIHRhcmdldHMuam9pbignfCcpICsgJyknICsgYWZ0ZXIpXG59XG5cbmZ1bmN0aW9uIG1ha2VMZXhlciAoYmVmb3JlLCB0YXJnZXRzLCBhZnRlcikge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcbiAgICAgICAgXCJcXFwiKD86XFxcXFxcXFxbXFxcXFNcXFxcc118W15cXFwiXSkqXFxcInwnKD86XFxcXFxcXFxbXFxcXFNcXFxcc118W14nXSkqJ3xcXFxcL1xcXFwqW1xcXFxTXFxcXHNdKj9cXFxcKlxcXFwvfFwiICtcbiAgICAgICAgICAgIGJlZm9yZSArICcoKD86JyArXG4gICAgICAgICAgICB0YXJnZXRzLmpvaW4oJ3wnKSArXG4gICAgICAgICAgICAnKSknICsgYWZ0ZXIsXG4gICAgICAgICdnaSdcbiAgICApXG59XG5cbi8vIGRlY2xhcmF0aW9uc1xuLy8gLS0tLS0tLS0tLS0tXG4vLyBmdW5jdGlvbiB0cmltKHMpIHtcbi8vICAgcmV0dXJuIHMucmVwbGFjZSgvXlxccyooLio/KVxccyokLywgJyQxJylcbi8vIH1cblxuZnVuY3Rpb24gZml4RGVjbChmaXhlcnMsIGVtaXQsIHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHByb3BlcnR5ICE9PSAnc3RyaW5nJyB8fCBwcm9wZXJ0eS5jaGFyQXQoMCkgPT09ICctJykgcmV0dXJuIGVtaXQocHJvcGVydHksIHZhbHVlKVxuXG4gIGlmICghKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykpe1xuICAgIHJldHVybiBlbWl0KGZpeGVycy5wcm9wZXJ0aWVzW3Byb3BlcnR5XSB8fCBmaXhlcnMuZml4UHJvcGVydHkocHJvcGVydHkpLCB2YWx1ZSlcbiAgfVxuXG4gIHZhbHVlID0gdmFsdWUgKyAnJztcbiAgaWYgKGZpeGVycy5qc0ZsZXgpIHtcbiAgICBpZiAocHJvcGVydHkgPT09ICdkaXNwbGF5JyAmJiAodmFsdWUgPT09ICdmbGV4JyB8fCB2YWx1ZSA9PT0gJ2lubGluZS1mbGV4JykpIHtcbiAgICAgIGVtaXQoJy1qcy1kaXNwbGF5JywgdmFsdWUpO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKGZpeGVycy5mbGV4Ym94MjAwOSkge1xuICAgICAgLy8gVE9ETzogZmxleCBvbmx5IHRha2VzIG9uZSB2YWx1ZSBpbiB0aGUgMjAwOSBzcGVjXG4gICAgLy8gaWYgKHByb3BlcnR5ID09PSAnZmxleCcpIHtcbiAgICAvLyAgIHZhbHVlID0gdHJpbSh2YWx1ZSlcbiAgICAvLyAgIGlmICh2YWx1ZSA9PT0gJ25vbmUnIHx8IHZhbHVlID09PSAnaW5pdGlhbCcpIGVtaXQocHJvcGVydHksICcwJylcbiAgICAvLyAgIGVsc2UgaWYgKHZhbHVlID09PSAnYXV0bycpIGVtaXQocHJvcGVydHksICcxJylcbiAgICAvLyAgIGVsc2UgZW1pdChwcm9wZXJ0eSwgdmFsdWUucmVwbGFjZSgvXihcXGQrKSg/PVxcV3wkKS4qLywgJyQxJykpXG4gICAgLy8gICByZXR1cm5cbiAgICAvLyB9IGVsc2VcbiAgICBpZiAocHJvcGVydHkgPT09ICdmbGV4LWZsb3cnKSB7XG4gICAgICB2YWx1ZS5zcGxpdCgvXFxzKy8pLmZvckVhY2goZnVuY3Rpb24odil7XG4gICAgICAgIC8vIHJlY3Vyc2UhIFRoZSBsYWNrIG9mIGBuZXh0LmAgaXMgaW50ZW50aW9uYWwuXG4gICAgICAgIGlmICh2LmluZGV4T2YoJ3dyYXAnKSA+IC0xKSBmaXhEZWNsKGZpeGVycywgZW1pdCwgJ2ZsZXgtd3JhcCcsIHYpO1xuICAgICAgICBlbHNlIGlmKHYgIT09ICcnKSBmaXhEZWNsKGZpeGVycywgZW1pdCwgJ2ZsZXgtZGlyZWN0aW9uJywgdik7XG4gICAgICB9KTtcbiAgICAgIHJldHVyblxuICAgIH0gZWxzZSBpZiAocHJvcGVydHkgPT09ICdmbGV4LWRpcmVjdGlvbicpIHtcbiAgICAgIGVtaXQoZml4ZXJzLnByb3BlcnRpZXNbJ2JveC1vcmllbnQnXSwgdmFsdWUuaW5kZXhPZignY29sdW1uJykgPiAtMSA/ICdibG9jay1heGlzJyA6ICdpbmxpbmUtYXhpcycpO1xuICAgICAgZW1pdChmaXhlcnMucHJvcGVydGllc1snYm94LWRpcmVjdGlvbiddLCB2YWx1ZS5pbmRleE9mKCctcmV2ZXJzZScpID4gLTEgPyAncmV2ZXJzZScgOiAnbm9ybWFsJyk7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgLy8gZWxzZSBpZiAoZml4ZXJzLmZsZXhib3gyMDEyKSB7XG4gIC8vICAgLy8gaWYgKHByb3BlcnR5ID09PSAnZmxleCcgJiYgdmFsdWUuaW5kZXhPZignY2FsYygnKSAhPT0gLTEpIHtcbiAgLy8gICAvLyAgIHZhciBwYXJzZWQgPVxuICAvLyAgIC8vIH1cbiAgLy8gfVxuICBpZihmaXhlcnMuV2tCQ1R4dCAmJiBwcm9wZXJ0eSA9PT0gJ2JhY2tncm91bmQtY2xpcCcgJiYgdmFsdWUgPT09ICd0ZXh0Jykge1xuICAgIGVtaXQoJy13ZWJraXQtYmFja2dyb3VuZC1jbGlwJywgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGVtaXQoXG4gICAgICBmaXhlcnMucHJvcGVydGllc1twcm9wZXJ0eV0gfHwgZml4ZXJzLmZpeFByb3BlcnR5KHByb3BlcnR5KSxcbiAgICAgIGZpeGVycy5maXhWYWx1ZSh2YWx1ZSwgcHJvcGVydHkpXG4gICAgKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGZpbmFsaXplRml4ZXJzKGZpeGVycykge1xuICB2YXIgcHJlZml4ID0gZml4ZXJzLnByZWZpeDtcblxuXG4gIC8vIHByb3BlcnRpZXNcbiAgLy8gLS0tLS0tLS0tLVxuXG4gIGZpeGVycy5maXhQcm9wZXJ0eSA9IGZpeGVycy5maXhQcm9wZXJ0eSB8fCBmdW5jdGlvbihwcm9wKSB7XG4gICAgdmFyIHByZWZpeGVkO1xuICAgIHJldHVybiBmaXhlcnMucHJvcGVydGllc1twcm9wXSA9IChcbiAgICAgIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHx8XG4gICAgICAhc3VwcG9ydGVkUHJvcGVydHkocHJlZml4ZWQgPSBwcmVmaXggKyBwcm9wKVxuICAgICkgPyBwcm9wIDogcHJlZml4ZWRcbiAgfTtcblxuXG4gIC8vIHNlbGVjdG9yc1xuICAvLyAtLS0tLS0tLS0tXG5cbiAgdmFyIHNlbGVjdG9yRGV0ZWN0b3IgPSBtYWtlRGV0ZWN0b3IoJycsIGZpeGVycy5zZWxlY3Rvckxpc3QsICcoPzpcXFxcYnwkfFteLV0pJyk7XG4gIHZhciBzZWxlY3Rvck1hdGNoZXIgPSBtYWtlTGV4ZXIoJycsIGZpeGVycy5zZWxlY3Rvckxpc3QsICcoPzpcXFxcYnwkfFteLV0pJyk7XG4gIHZhciBzZWxlY3RvclJlcGxhY2VyID0gZnVuY3Rpb24obWF0Y2gsIHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yICE9IG51bGwgPyBmaXhlcnMuc2VsZWN0b3JNYXBbc2VsZWN0b3JdIDogbWF0Y2hcbiAgfTtcbiAgZml4ZXJzLmZpeFNlbGVjdG9yID0gZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gc2VsZWN0b3JEZXRlY3Rvci50ZXN0KHNlbGVjdG9yKSA/IHNlbGVjdG9yLnJlcGxhY2Uoc2VsZWN0b3JNYXRjaGVyLCBzZWxlY3RvclJlcGxhY2VyKSA6IHNlbGVjdG9yXG4gIH07XG5cblxuICAvLyB2YWx1ZXNcbiAgLy8gLS0tLS0tXG5cbiAgLy8gV2hlbiBncmFkaWVudHMgYXJlIHN1cHBvcnRlZCB3aXRoIGEgcHJlZml4LCBjb252ZXJ0IGFuZ2xlcyB0byBsZWdhY3lcbiAgLy8gKGZyb20gY2xvY2t3aXNlIHRvIHRyaWdvbm9tZXRyaWMpXG4gIHZhciBoYXNHcmFkaWVudHMgPSBmaXhlcnMuZnVuY3Rpb25zLmluZGV4T2YoJ2xpbmVhci1ncmFkaWVudCcpID4gLTE7XG4gIHZhciBncmFkaWVudERldGVjdG9yID0gL1xcYmxpbmVhci1ncmFkaWVudFxcKC87XG4gIHZhciBncmFkaWVudE1hdGNoZXIgPSAvKF58XFxzfCx8XFwoKSgoPzpyZXBlYXRpbmctKT9saW5lYXItZ3JhZGllbnRcXCgpXFxzKigtP1xcZCpcXC4/XFxkKilkZWcvaWc7XG4gIHZhciBncmFkaWVudFJlcGxhY2VyID0gZnVuY3Rpb24gKG1hdGNoLCBkZWxpbSwgZ3JhZGllbnQsIGRlZykge1xuICAgIHJldHVybiBkZWxpbSArIGdyYWRpZW50ICsgKDkwLWRlZykgKyAnZGVnJ1xuICB9O1xuXG4gIC8vIGZ1bmN0aW9uc1xuICB2YXIgaGFzRnVuY3Rpb25zID0gISFmaXhlcnMuZnVuY3Rpb25zLmxlbmd0aDtcbiAgdmFyIGZ1bmN0aW9uc0RldGVjdG9yID0gbWFrZURldGVjdG9yKCcoPzpefFxcXFxzfCx8XFxcXCgpJywgZml4ZXJzLmZ1bmN0aW9ucywgJ1xcXFxzKlxcXFwoJyk7XG4gIHZhciBmdW5jdGlvbnNNYXRjaGVyID0gbWFrZUxleGVyKCcoXnxcXFxcc3wsfFxcXFwoKScsIGZpeGVycy5mdW5jdGlvbnMsICcoPz1cXFxccypcXFxcKCknKTtcbiAgZnVuY3Rpb24gZnVuY3Rpb25SZXBsYWNlciAobWF0Y2gsICQxLCAkMikge1xuICAgIHJldHVybiAkMSArIHByZWZpeCArICQyXG4gIH1cblxuICAvLyBwcm9wZXJ0aWVzIGFzIHZhbHVlcyAoZm9yIHRyYW5zaXRpb24sIC4uLilcbiAgLy8gTm8gbmVlZCB0byBsb29rIGZvciBzdHJpbmdzIGluIHRoZXNlIHByb3BlcnRpZXMuIFdlIG1heSBpbnNlcnQgcHJlZml4ZXMgaW4gY29tbWVudHMuIE9oIHRoZSBodW1hbml0eS5cbiAgdmFyIHZhbHVlUHJvcGVydGllc01hdGNoZXIgPSAvXlxccyooWy1cXHddKykvZ2k7XG4gIHZhciB2YWx1ZVByb3BlcnRpZXNSZXBsYWNlciA9IGZ1bmN0aW9uKG1hdGNoLCBwcm9wKXtcbiAgICByZXR1cm4gZml4ZXJzLnByb3BlcnRpZXNbcHJvcF0gfHwgZml4ZXJzLmZpeFByb3BlcnR5KHByb3ApXG4gIH07XG5cbiAgZml4ZXJzLmZpeFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBwcm9wZXJ0eSkge1xuICAgIHZhciByZXM7XG4gICAgaWYgKGZpeGVycy5pbml0aWFsICE9IG51bGwgJiYgdmFsdWUgPT09ICdpbml0aWFsJykgcmV0dXJuIGZpeGVycy5pbml0aWFsXG5cbiAgICBpZiAoZml4ZXJzLmhhc0tleXdvcmRzICYmIChyZXMgPSAoZml4ZXJzLmtleXdvcmRzW3Byb3BlcnR5XSB8fCBlbXB0eVNldClbdmFsdWVdKSkgcmV0dXJuIHJlc1xuXG4gICAgcmVzID0gdmFsdWU7XG5cbiAgICBpZiAoZml4ZXJzLnZhbHVlUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgIHJlcyA9ICh2YWx1ZS5pbmRleE9mKCcsJykgPT09IC0xKSA/XG4gICAgICAgIHZhbHVlLnJlcGxhY2UodmFsdWVQcm9wZXJ0aWVzTWF0Y2hlciwgdmFsdWVQcm9wZXJ0aWVzUmVwbGFjZXIpIDpcbiAgICAgICAgc3BsaXRWYWx1ZSh2YWx1ZSkubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4gdi5yZXBsYWNlKHZhbHVlUHJvcGVydGllc01hdGNoZXIsIHZhbHVlUHJvcGVydGllc1JlcGxhY2VyKVxuICAgICAgICB9KS5qb2luKCcsJyk7XG4gICAgfVxuXG4gICAgaWYgKGhhc0Z1bmN0aW9ucyAmJiBmdW5jdGlvbnNEZXRlY3Rvci50ZXN0KHZhbHVlKSkge1xuICAgICAgaWYgKGhhc0dyYWRpZW50cyAmJiBncmFkaWVudERldGVjdG9yLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJlcyA9IHJlcy5yZXBsYWNlKGdyYWRpZW50TWF0Y2hlciwgZ3JhZGllbnRSZXBsYWNlcik7XG4gICAgICB9XG4gICAgICByZXMgPSByZXMucmVwbGFjZShmdW5jdGlvbnNNYXRjaGVyLCBmdW5jdGlvblJlcGxhY2VyKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9O1xuXG4gIC8vIEBtZWRpYSAocmVzb2x1dGlvbjouLi4pIHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIHZhciByZXNvbHV0aW9uTWF0Y2hlciA9IC8oKD86bWluLXxtYXgtKT9yZXNvbHV0aW9uKVxccyo6XFxzKigoPzpcXGQqXFwuKT9cXGQrKWRwcHgvZztcbiAgdmFyIHJlc29sdXRpb25SZXBsYWNlciA9IChcbiAgICBmaXhlcnMuaGFzUGl4ZWxSYXRpbyA/IGZ1bmN0aW9uKF8sIHByb3AsIHBhcmFtKXtyZXR1cm4gZml4ZXJzLnByb3BlcnRpZXNbcHJvcF0gKyAnOicgKyBwYXJhbX0gOlxuICAgIGZpeGVycy5oYXNQaXhlbFJhdGlvRnJhY3Rpb24gPyBmdW5jdGlvbihfLCBwcm9wLCBwYXJhbSl7cmV0dXJuIGZpeGVycy5wcm9wZXJ0aWVzW3Byb3BdICsgJzonICsgTWF0aC5yb3VuZChwYXJhbSoxMCkgKyAnLzEwJ30gOlxuICAgIGZ1bmN0aW9uKF8sIHByb3AsIHBhcmFtKXtyZXR1cm4gcHJvcCArICc6JyArIE1hdGgucm91bmQocGFyYW0gKiA5NikgKydkcGknfVxuICApO1xuXG4gIGZpeGVycy5maXhBdE1lZGlhUGFyYW1zID0gZml4ZXJzLmhhc0RwcHggIT09IGZhbHNlIC8qaXQgbWF5IGJlIG51bGwqLyA/XG4gICAgZnVuY3Rpb24ocCkge3JldHVybiBwfSA6XG4gICAgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgcmV0dXJuIChwYXJhbXMuaW5kZXhPZigncmVzbycpICE9PSAtMSkgP1xuICAgICAgICBwYXJhbXMucmVwbGFjZShyZXNvbHV0aW9uTWF0Y2hlciwgcmVzb2x1dGlvblJlcGxhY2VyKSA6XG4gICAgICAgIHBhcmFtc1xuICAgIH07XG5cblxuICAvLyBAc3VwcG9ydHMgLi4uIHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG5cbiAgdmFyIHN1cHBvcnRzUHJvcCwgc3VwcG9ydHNWYWx1ZTtcbiAgdmFyIGF0U3VwcG9ydHNQYXJhbXNGaXhlciA9IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBzdXBwb3J0c1Byb3AgPSBwcm9wZXJ0eTtcbiAgICBzdXBwb3J0c1ZhbHVlID0gdmFsdWU7XG4gIH07XG4gIC8vIHJlZ2V4cCBidWlsdCBieSBzY3JpcHRzL3JlZ2V4cHMuanNcbiAgdmFyIGF0U3VwcG9ydHNQYXJhbXNNYXRjaGVyID0gIC9cXChcXHMqKFstXFx3XSspXFxzKjpcXHMqKCg/OicoPzpcXFxcW1xcU1xcc118W14nXSkqJ3xcIig/OlxcXFxbXFxTXFxzXXxbXlwiXSkqXCJ8XFwvXFwqW1xcU1xcc10qP1xcKlxcL3xcXCgoPzonKD86XFxcXFtcXFNcXHNdfFteJ10pKid8XCIoPzpcXFxcW1xcU1xcc118W15cIl0pKlwifFxcL1xcKltcXFNcXHNdKj9cXCpcXC98XFwoKD86Jyg/OlxcXFxbXFxTXFxzXXxbXiddKSonfFwiKD86XFxcXFtcXFNcXHNdfFteXCJdKSpcInxcXC9cXCpbXFxTXFxzXSo/XFwqXFwvfFxcKCg/OicoPzpcXFxcW1xcU1xcc118W14nXSkqJ3xcIig/OlxcXFxbXFxTXFxzXXxbXlwiXSkqXCJ8XFwvXFwqW1xcU1xcc10qP1xcKlxcL3xcXCgoPzonKD86XFxcXFtcXFNcXHNdfFteJ10pKid8XCIoPzpcXFxcW1xcU1xcc118W15cIl0pKlwifFxcL1xcKltcXFNcXHNdKj9cXCpcXC98XFwoKD86Jyg/OlxcXFxbXFxTXFxzXXxbXiddKSonfFwiKD86XFxcXFtcXFNcXHNdfFteXCJdKSpcInxcXC9cXCpbXFxTXFxzXSo/XFwqXFwvfFxcKCg/OicoPzpcXFxcW1xcU1xcc118W14nXSkqJ3xcIig/OlxcXFxbXFxTXFxzXXxbXlwiXSkqXCJ8XFwvXFwqW1xcU1xcc10qP1xcKlxcL3xbXlxcKV0pKlxcKXxbXlxcKV0pKlxcKXxbXlxcKV0pKlxcKXxbXlxcKV0pKlxcKXxbXlxcKV0pKlxcKXxbXlxcKV0pKlxcKXxbXlxcKV0pKikvZztcbiAgZnVuY3Rpb24gYXRTdXBwb3J0c1BhcmFtc1JlcGxhY2VyKG1hdGNoLCBwcm9wLCB2YWx1ZSkge1xuICAgIGZpeERlY2woZml4ZXJzLCBhdFN1cHBvcnRzUGFyYW1zRml4ZXIsIHByb3AsIHZhbHVlKTtcbiAgICByZXR1cm4gJygnICsgc3VwcG9ydHNQcm9wICsgJzonICsgc3VwcG9ydHNWYWx1ZVxuICB9XG4gIGZpeGVycy5maXhBdFN1cHBvcnRzUGFyYW1zID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gICAgcmV0dXJuIHBhcmFtcy5yZXBsYWNlKGF0U3VwcG9ydHNQYXJhbXNNYXRjaGVyLCBhdFN1cHBvcnRzUGFyYW1zUmVwbGFjZXIpXG4gIH07XG59XG5cbnZhciBjb21tb25GaXhlcnM7XG5cbmZ1bmN0aW9uIGluaXRCcm93c2VyKCkgeyAvLyBleHBvcnRlZCBmb3IgdGhlIHRlc3Qgc3VpdGVcbiAgY29tbW9uRml4ZXJzID0gYmxhbmtGaXhlcnMoKTtcbiAgaWYgKHR5cGVvZiBnZXRDb21wdXRlZFN0eWxlID09PSAnZnVuY3Rpb24nKSBicm93c2VyRGV0ZWN0b3IoY29tbW9uRml4ZXJzKTtcbiAgZmluYWxpemVGaXhlcnMoY29tbW9uRml4ZXJzKTtcbn1cbmluaXRCcm93c2VyKCk7XG5cbmZ1bmN0aW9uIHByZWZpeFBsdWdpbigpe1xuICB2YXIgZml4ZXJzID0gY29tbW9uRml4ZXJzO1xuICB2YXIgY2FjaGUgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBzZXQ6IHtcbiAgICAgIHNldFByZWZpeERiOiBmdW5jdGlvbihmKSB7XG4gICAgICAgIGlmIChjYWNoZS5pbmRleE9mKGYpID09PSAtMSkge1xuICAgICAgICAgIGZpbmFsaXplRml4ZXJzKGYpO1xuICAgICAgICAgIGNhY2hlLnB1c2goZik7XG4gICAgICAgIH1cbiAgICAgICAgZml4ZXJzID0gZjtcbiAgICAgICAgcmV0dXJuIHByZWZpeFBsdWdpblxuICAgICAgfVxuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbihuZXh0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhdHJ1bGU6IGZ1bmN0aW9uKHJ1bGUsIGtpbmQsIHBhcmFtcywgaGFzQmxvY2spIHtcbiAgICAgICAgICBuZXh0LmF0cnVsZShcbiAgICAgICAgICAgIGZpeGVycy5oYXNBdHJ1bGVzICYmIGZpeGVycy5hdHJ1bGVzW3J1bGVdIHx8IHJ1bGUsXG4gICAgICAgICAgICBraW5kLFxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICBydWxlID09PSAnQG1lZGlhJyAgICA/IGZpeGVycy5maXhBdE1lZGlhUGFyYW1zKHBhcmFtcykgOlxuICAgICAgICAgICAgICBydWxlID09PSAnQHN1cHBvcnRzJyA/IGZpeGVycy5maXhBdFN1cHBvcnRzUGFyYW1zKHBhcmFtcykgOlxuICAgICAgICAgICAgICBwYXJhbXNcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBoYXNCbG9ja1xuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlY2w6IGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSkge1xuICAgICAgICAgIGZpeERlY2woZml4ZXJzLCBuZXh0LmRlY2wsIHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJ1bGU6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICAgICAgbmV4dC5ydWxlKFxuICAgICAgICAgICAgZml4ZXJzLmhhc1NlbGVjdG9ycyA/IGZpeGVycy5maXhTZWxlY3RvcihzZWxlY3RvcikgOiBzZWxlY3RvclxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0cy5wcmVmaXhQbHVnaW4gPSBwcmVmaXhQbHVnaW47XG59KTtcblxudW53cmFwRXhwb3J0cyhqMmNQbHVnaW5QcmVmaXhCcm93c2VyX2NvbW1vbmpzKTtcbnZhciBqMmNQbHVnaW5QcmVmaXhCcm93c2VyX2NvbW1vbmpzXzEgPSBqMmNQbHVnaW5QcmVmaXhCcm93c2VyX2NvbW1vbmpzLnByZWZpeFBsdWdpbjtcblxuLy8gQHRzLWlnbm9yZVxudmFyIGoyYyA9IG5ldyBKMmMoajJjUGx1Z2luUHJlZml4QnJvd3Nlcl9jb21tb25qc18xKTtcblxudmFyIElEX1JFR0VYID0gL1teYS16MC05XFxcXC1dL2c7XG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IFN0eWxlT2JqZWN0IFxuICogQHR5cGVkZWYgeyhzZWxlY3Rvcjogc3RyaW5nfEFycmF5PHN0cmluZz4sIHZhcnM6IG9iamVjdCwgY3VzdG9tVmFycz86IG9iamVjdCkgPT4gQXJyYXk8b2JqZWN0Pn0gU3R5bGVGblxuICovXG5cbi8qKlxuICogQWRkcyBzdHlsZXMgdG8gaGVhZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIElkZW50aWZpZXIsIHVzZWQgYXMgSFRNTEVsZW1lbnQgaWQgZm9yIHRoZSBhdHRhY2hlZCA8c3R5bGU+PC9zdHlsZT4gZWxlbWVudC5cbiAqIEBwYXJhbSB7Li4uQXJyYXk8U3R5bGVPYmplY3Q+fSBzdHlsZXMgLSBMaXN0IG9mIHN0eWxlIE9iamVjdHNcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5cbnZhciBhZGQgPSBmdW5jdGlvbiBhZGQoaWQpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHN0eWxlcyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3R5bGVzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBhZGRUb0RvY3VtZW50LmFwcGx5KHZvaWQgMCwgW3tcbiAgICBpZDogaWRcbiAgfV0uY29uY2F0KHN0eWxlcykpO1xufTtcbi8qKlxuICogUmVtb3ZlcyBhIHN0eWxlIGZyb20gaGVhZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIElkZW50aWZpZXIsIHVzZWQgYXMgSFRNTEVsZW1lbnQgaWQgZm9yIHRoZSBhdHRhY2hlZCA8c3R5bGU+PC9zdHlsZT4gZWxlbWVudC5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5cblxudmFyIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShpZCkge1xuICBpZiAoaXNTZXJ2ZXIpIHJldHVybjtcblxuICBpZiAoaWQpIHtcbiAgICB2YXIgb2xkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXG4gICAgaWYgKG9sZCAmJiBvbGQucGFyZW50Tm9kZSkge1xuICAgICAgb2xkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob2xkKTtcbiAgICB9XG4gIH1cbn07XG4vKipcbiAqIEFkZHMgc3R5bGVzIHRvIHRoZSBoZWFkLlxuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5pZCAtIElkZW50aWZpZXIsIHVzZWQgYXMgSFRNTEVsZW1lbnQgaWQgZm9yIHRoZSBhdHRhY2hlZCA8c3R5bGU+PC9zdHlsZT4gZWxlbWVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zLmRvY3VtZW50XSAtIERvY3VtZW50IHJlZmVyZW5jZS5cbiAqIEBwYXJhbSB7Li4uQXJyYXk8U3R5bGVPYmplY3Q+fSBzdHlsZXMgLSBMaXN0IG9mIHN0eWxlIE9iamVjdHMuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG5cbnZhciBhZGRUb0RvY3VtZW50ID0gZnVuY3Rpb24gYWRkVG9Eb2N1bWVudChfcmVmKSB7XG4gIHZhciBpZCA9IF9yZWYuaWQsXG4gICAgICBkb2N1bWVudCA9IF9yZWYuZG9jdW1lbnQ7XG4gIGlmIChpc1NlcnZlcikgcmV0dXJuO1xuICB2YXIgc2FmZUlkID0gaWQucmVwbGFjZShJRF9SRUdFWCwgXCJfXCIpO1xuICByZW1vdmUoc2FmZUlkKTtcbiAgdmFyIGRvY3VtZW50UmVmID0gZG9jdW1lbnQgfHwgd2luZG93LmRvY3VtZW50O1xuICB2YXIgc3R5bGVFbCA9IGRvY3VtZW50UmVmLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuICBpZiAoc2FmZUlkKSB7XG4gICAgc3R5bGVFbC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBzYWZlSWQpO1xuICB9XG5cbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZXMgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgIHN0eWxlc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIHN0eWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZXMpIHtcbiAgICAvLyBlYWNoIHN0eWxlIHJldHVybnMgYSBsaXN0XG4gICAgaWYgKE9iamVjdC5rZXlzKHN0eWxlcykubGVuZ3RoKSB7XG4gICAgICBzdHlsZXMuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgICAgdmFyIHNjb3BlZCA9IHtcbiAgICAgICAgICBcIkBnbG9iYWxcIjogc3R5bGVcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHNoZWV0ID0gajJjLnNoZWV0KHNjb3BlZCk7XG4gICAgICAgIHN0eWxlRWwuYXBwZW5kQ2hpbGQoZG9jdW1lbnRSZWYuY3JlYXRlVGV4dE5vZGUoc2hlZXQpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIGRvY3VtZW50UmVmLmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbCk7XG59O1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7U3R5bGVPYmplY3R8QXJyYXk8U3R5bGVPYmplY3Q+fSBwYXJhbXMuc3R5bGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhcmFtcy5zY29wZV1cbiAqIEByZXR1cm5zIHtBcnJheTxTdHlsZU9iamVjdD59XG4gKi9cblxuXG52YXIgd3JhcEluU2NvcGUgPSBmdW5jdGlvbiB3cmFwSW5TY29wZShfcmVmMikge1xuICB2YXIgc3R5bGVzID0gX3JlZjIuc3R5bGVzLFxuICAgICAgc2NvcGUgPSBfcmVmMi5zY29wZTtcbiAgcmV0dXJuIHNjb3BlID8gW19kZWZpbmVQcm9wZXJ0eSh7fSwgc2NvcGUsIHN0eWxlcyldIDogc3R5bGVzO1xufTtcbi8qKlxuICogQWRkcyBjb21wb25lbnQgc3R5bGVzIHRvIGhlYWQuXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHBhcmFtcy5zZWxlY3RvcnNcbiAqIEBwYXJhbSB7QXJyYXk8U3R5bGVGbj59IHBhcmFtcy5mbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMudmFyc1xuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXMuY3VzdG9tVmFyc11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLm1lZGlhUXVlcnldXG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhcmFtcy5zY29wZV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLmlkZW50aWZpZXJdXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG5cbnZhciBhZGRTdHlsZSA9IGZ1bmN0aW9uIGFkZFN0eWxlKF9yZWY0KSB7XG4gIHZhciBzZWxlY3RvcnMgPSBfcmVmNC5zZWxlY3RvcnMsXG4gICAgICBzdHlsZUZucyA9IF9yZWY0LmZucyxcbiAgICAgIHZhcnMgPSBfcmVmNC52YXJzLFxuICAgICAgY3VzdG9tVmFycyA9IF9yZWY0LmN1c3RvbVZhcnMsXG4gICAgICBtZWRpYVF1ZXJ5ID0gX3JlZjQubWVkaWFRdWVyeSxcbiAgICAgIHNjb3BlID0gX3JlZjQuc2NvcGUsXG4gICAgICBpZGVudGlmaWVyID0gX3JlZjQuaWRlbnRpZmllcjtcbiAgdmFyIHByZWZpeCA9IHNjb3BlID8gXCIgXCIgOiBcIlwiO1xuICB2YXIgc2VsZWN0b3IgPSBwcmVmaXggKyBzZWxlY3RvcnMuam9pbihcIlwiKTtcbiAgdmFyIHN0eWxlcyA9IHN0eWxlRm5zLm1hcChmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gZm4oc2VsZWN0b3IsIHZhcnMsIGN1c3RvbVZhcnMpO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGxpc3QpIHtcbiAgICByZXR1cm4gbGlzdC5sZW5ndGggPiAwO1xuICB9KTtcblxuICBpZiAoc3R5bGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBpZCA9IGlkZW50aWZpZXIgfHwgc2VsZWN0b3IudHJpbSgpLnJlcGxhY2UoL15bXmEtel0/KC4qKS8sIFwiJDFcIik7XG4gIGFkZChpZCwgd3JhcEluU2NvcGUoe1xuICAgIHN0eWxlczogd3JhcEluU2NvcGUoe1xuICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICBzY29wZTogc2NvcGVcbiAgICB9KSxcbiAgICBzY29wZTogbWVkaWFRdWVyeVxuICB9KSk7XG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiBzdHlsZSBvYmplY3RzIGZvciBhIGNvbXBvbmVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gcGFyYW1zLnNlbGVjdG9yc1xuICogQHBhcmFtIHtBcnJheTxTdHlsZUZuPn0gcGFyYW1zLmZuc1xuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcy52YXJzIC0gU3R5bGUgY29uZmlndXJhdGlvbiB2YXJpYWJsZXNcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zLmN1c3RvbVZhcnNdIC0gU3R5bGUgY29uZmlndXJhdGlvbiB2YXJpYWJsZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLm1lZGlhUXVlcnldIC0gTWVkaWFxdWVyeSBzdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLnNjb3BlXSAtIFNjb3BlIHNlbGVjdG9yXG4gKiBAcmV0dXJucyB7QXJyYXk8U3R5bGVPYmplY3Q+fVxuICovXG5cblxudmFyIGdldFN0eWxlID0gZnVuY3Rpb24gZ2V0U3R5bGUoX3JlZjUpIHtcbiAgdmFyIHNlbGVjdG9ycyA9IF9yZWY1LnNlbGVjdG9ycyxcbiAgICAgIHN0eWxlRm5zID0gX3JlZjUuZm5zLFxuICAgICAgdmFycyA9IF9yZWY1LnZhcnMsXG4gICAgICBjdXN0b21WYXJzID0gX3JlZjUuY3VzdG9tVmFycyxcbiAgICAgIG1lZGlhUXVlcnkgPSBfcmVmNS5tZWRpYVF1ZXJ5LFxuICAgICAgc2NvcGUgPSBfcmVmNS5zY29wZTtcbiAgdmFyIHByZWZpeCA9IHNjb3BlID8gXCIgXCIgOiBcIlwiO1xuICB2YXIgc2VsZWN0b3IgPSBwcmVmaXggKyBzZWxlY3RvcnMuam9pbihcIlwiKTtcbiAgdmFyIHN0eWxlcyA9IHN0eWxlRm5zLm1hcChmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gZm4oc2VsZWN0b3IsIHZhcnMsIGN1c3RvbVZhcnMpO1xuICB9KTtcbiAgcmV0dXJuIHdyYXBJblNjb3BlKHtcbiAgICBzdHlsZXM6IHdyYXBJblNjb3BlKHtcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgc2NvcGU6IHNjb3BlXG4gICAgfSksXG4gICAgc2NvcGU6IG1lZGlhUXVlcnlcbiAgfSk7XG59O1xuLyoqXG4gKiBBZGRzIGNvbXBvbmVudCBzdHlsZXMgdG8gaGVhZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciBcbiAqIEBwYXJhbSB7QXJyYXk8U3R5bGVGbj59IGZucyBcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YXJzIC0gU3R5bGUgY29uZmlndXJhdGlvbiB2YXJpYWJsZXNcbiAqL1xuXG5cbnZhciBjcmVhdGVBZGRTdHlsZSA9IGZ1bmN0aW9uIGNyZWF0ZUFkZFN0eWxlKHNlbGVjdG9yLCBmbnMsIHZhcnMpIHtcbiAgcmV0dXJuIChcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2N1c3RvbVNlbGVjdG9yPVwiXCJdXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGN1c3RvbVZhcnNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW3Njb3Bpbmc9e31dXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzY29waW5nLm1lZGlhUXVlcnldXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzY29waW5nLnNjb3BlXVxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXN0b21TZWxlY3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCJcIjtcbiAgICAgIHZhciBjdXN0b21WYXJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBfcmVmNiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge30sXG4gICAgICAgICAgbWVkaWFRdWVyeSA9IF9yZWY2Lm1lZGlhUXVlcnksXG4gICAgICAgICAgc2NvcGUgPSBfcmVmNi5zY29wZTtcblxuICAgICAgcmV0dXJuIGFkZFN0eWxlKHtcbiAgICAgICAgc2VsZWN0b3JzOiBbc2VsZWN0b3IsIGN1c3RvbVNlbGVjdG9yXSxcbiAgICAgICAgZm5zOiBmbnMsXG4gICAgICAgIHZhcnM6IHZhcnMsXG4gICAgICAgIGN1c3RvbVZhcnM6IGN1c3RvbVZhcnMsXG4gICAgICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgICAgIHNjb3BlOiBzY29wZVxuICAgICAgfSk7XG4gICAgfVxuICApO1xufTtcbi8qKlxuICogUmV0dXJucyBzdHlsZXMgZm9yIGEgY29tcG9uZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFxuICogQHBhcmFtIHtBcnJheTxTdHlsZUZuPn0gZm5zIFxuICogQHBhcmFtIHtvYmplY3R9IHZhcnMgLSBTdHlsZSBjb25maWd1cmF0aW9uIHZhcmlhYmxlc1xuICovXG5cblxudmFyIGNyZWF0ZUdldFN0eWxlID0gZnVuY3Rpb24gY3JlYXRlR2V0U3R5bGUoc2VsZWN0b3IsIGZucywgdmFycykge1xuICByZXR1cm4gKFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY3VzdG9tU2VsZWN0b3I9XCJcIl1cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY3VzdG9tVmFyc1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbc2NvcGluZz17fV1cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Njb3BpbmcubWVkaWFRdWVyeV1cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Njb3Bpbmcuc2NvcGVdXG4gICAgICogQHJldHVybnMge0FycmF5PFN0eWxlT2JqZWN0Pn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY3VzdG9tU2VsZWN0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFwiXCI7XG4gICAgICB2YXIgY3VzdG9tVmFycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgX3JlZjcgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgICAgIG1lZGlhUXVlcnkgPSBfcmVmNy5tZWRpYVF1ZXJ5LFxuICAgICAgICAgIHNjb3BlID0gX3JlZjcuc2NvcGU7XG5cbiAgICAgIHJldHVybiBbZ2V0U3R5bGUoe1xuICAgICAgICBzZWxlY3RvcnM6IFtzZWxlY3RvciwgY3VzdG9tU2VsZWN0b3JdLFxuICAgICAgICBmbnM6IGZucyxcbiAgICAgICAgdmFyczogdmFycyxcbiAgICAgICAgY3VzdG9tVmFyczogY3VzdG9tVmFycyxcbiAgICAgICAgbWVkaWFRdWVyeTogbWVkaWFRdWVyeSxcbiAgICAgICAgc2NvcGU6IHNjb3BlXG4gICAgICB9KV07XG4gICAgfVxuICApO1xufTtcblxudmFyIHN0eWxlciA9IHtcbiAgYWRkOiBhZGQsXG4gIGFkZFN0eWxlOiBhZGRTdHlsZSxcbiAgYWRkVG9Eb2N1bWVudDogYWRkVG9Eb2N1bWVudCxcbiAgY3JlYXRlQWRkU3R5bGU6IGNyZWF0ZUFkZFN0eWxlLFxuICBjcmVhdGVHZXRTdHlsZTogY3JlYXRlR2V0U3R5bGUsXG4gIGdldFN0eWxlOiBnZXRTdHlsZSxcbiAgcmVtb3ZlOiByZW1vdmVcbn07XG5cbi8vIEB0cy1jaGVja1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoc2VsZWN0b3I6IHN0cmluZywgdmFyczogb2JqZWN0LCBjdXN0b21WYXJzPzogb2JqZWN0KSA9PiBBcnJheTxvYmplY3Q+fSBTdHlsZUZuXG4gKiBAdHlwZWRlZiB7e1tzOiBzdHJpbmddOiBTdHlsZUZufX0gU3R5bGVDb2xsZWN0aW9uXG4gKi9cblxuLyoqXG4gKiBXcmFwcyBhbiBvYmplY3Qgd2l0aCBhIHNlbGVjdG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFxuICogQHBhcmFtIHtvYmplY3R9IG8gXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG52YXIgc2VsID0gZnVuY3Rpb24gc2VsKHNlbGVjdG9yLCBvKSB7XG4gIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIHNlbGVjdG9yLCBvKTtcbn07XG4vKipcbiAqIENyZWF0ZXMgYSByaWdodC10by1sZWZ0IHNlbGVjdG9yLlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5cbnZhciBzZWxlY3RvclJUTCA9IGZ1bmN0aW9uIHNlbGVjdG9yUlRMKHNlbGVjdG9yKSB7XG4gIHJldHVybiBcIipbZGlyPXJ0bF0gXCIuY29uY2F0KHNlbGVjdG9yLCBcIiwgLnBlLXJ0bCBcIikuY29uY2F0KHNlbGVjdG9yKTtcbn07XG4vKipcbiAqIENyZWF0ZXMgYSByZ2JhIENTUyBjb2xvciBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3JTdHIgXG4gKiBAcGFyYW0ge251bWJlcn0gb3BhY2l0eSBcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblxudmFyIHJnYmEgPSBmdW5jdGlvbiByZ2JhKGNvbG9yU3RyKSB7XG4gIHZhciBvcGFjaXR5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxO1xuICByZXR1cm4gXCJyZ2JhKFwiLmNvbmNhdChjb2xvclN0ciwgXCIsIFwiKS5jb25jYXQob3BhY2l0eSwgXCIpXCIpO1xufTtcbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmd9IFtwYXJhbXMuc2VsZWN0b3JdXG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhcmFtcy5zY29wZWRTZWxlY3Rvcl1cbiAqIEBwYXJhbSB7U3R5bGVDb2xsZWN0aW9ufSBbcGFyYW1zLnZhckZuc11cbiAqIEBwYXJhbSB7U3R5bGVDb2xsZWN0aW9ufSBbcGFyYW1zLmN1c3RvbVZhckZuc11cbiAqIEBwYXJhbSB7U3R5bGVGbn0gW3BhcmFtcy5zdXBlclN0eWxlXVxuICogQHBhcmFtIHsoXzphbnkpID0+IFN0eWxlQ29sbGVjdGlvbn0gW3BhcmFtcy52YXJNaXhpbl1cbiAqIEBwYXJhbSB7U3R5bGVDb2xsZWN0aW9ufSBbcGFyYW1zLmNvbXBvbmVudFZhcnNdXG4gKiBAcGFyYW0ge1N0eWxlQ29sbGVjdGlvbn0gW3BhcmFtcy5jdXN0b21WYXJzXVxuICogQHJldHVybnMge0FycmF5PG9iamVjdD59XG4gKi9cblxudmFyIGNyZWF0ZVN0eWxlID0gZnVuY3Rpb24gY3JlYXRlU3R5bGUoX3JlZjIpIHtcbiAgdmFyIHZhckZucyA9IF9yZWYyLnZhckZucyxcbiAgICAgIGN1c3RvbVZhckZucyA9IF9yZWYyLmN1c3RvbVZhckZucyxcbiAgICAgIHN1cGVyU3R5bGUgPSBfcmVmMi5zdXBlclN0eWxlLFxuICAgICAgdmFyTWl4aW4gPSBfcmVmMi52YXJNaXhpbixcbiAgICAgIHNlbGVjdG9yID0gX3JlZjIuc2VsZWN0b3IsXG4gICAgICBzY29wZWRTZWxlY3RvciA9IF9yZWYyLnNjb3BlZFNlbGVjdG9yLFxuICAgICAgX3JlZjIkY29tcG9uZW50VmFycyA9IF9yZWYyLmNvbXBvbmVudFZhcnMsXG4gICAgICBjb21wb25lbnRWYXJzID0gX3JlZjIkY29tcG9uZW50VmFycyA9PT0gdm9pZCAwID8ge30gOiBfcmVmMiRjb21wb25lbnRWYXJzLFxuICAgICAgY3VzdG9tVmFycyA9IF9yZWYyLmN1c3RvbVZhcnM7XG5cbiAgdmFyIGFsbFZhcnMgPSBfb2JqZWN0U3ByZWFkMih7fSwgY29tcG9uZW50VmFycywge30sIGN1c3RvbVZhcnMpO1xuXG4gIHZhciBjdXJyZW50VmFycyA9IGN1c3RvbVZhcnMgPyBjdXN0b21WYXJzIDogYWxsVmFycztcblxuICB2YXIgZ2VuZXJhbF9zdHlsZXMgPSBjb21wb25lbnRWYXJzLmdlbmVyYWxfc3R5bGVzLFxuICAgICAgb3RoZXJWYXJzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKGNvbXBvbmVudFZhcnMsIFtcImdlbmVyYWxfc3R5bGVzXCJdKTtcblxuICB2YXIgYmFzZUxheW91dCA9IHN1cGVyU3R5bGUgIT09IHVuZGVmaW5lZCA/IGN1c3RvbVZhcnMgIT09IHVuZGVmaW5lZCA/IHN1cGVyU3R5bGUoc2VsZWN0b3IsIGNvbXBvbmVudFZhcnMsIGN1c3RvbVZhcnMpIDogc3VwZXJTdHlsZShzZWxlY3Rvciwgb3RoZXJWYXJzKSA6IFtdO1xuXG4gIHZhciBmbnMgPSBfb2JqZWN0U3ByZWFkMih7fSwgY3VzdG9tVmFycyA/IGN1c3RvbVZhckZucyA6IHt9LCB7fSwgdmFyRm5zKTtcblxuICByZXR1cm4gYmFzZUxheW91dC5jb25jYXQoT2JqZWN0LmtleXModmFyTWl4aW4oY3VycmVudFZhcnMpKS5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gZm5zICYmIGZuc1t2XSAhPT0gdW5kZWZpbmVkID8gZm5zW3ZdKHNjb3BlZFNlbGVjdG9yLCBhbGxWYXJzKSA6IG51bGw7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzO1xuICB9KSk7XG59O1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7U3R5bGVDb2xsZWN0aW9ufSBbcGFyYW1zLnZhckZuc11cbiAqIEBwYXJhbSB7U3R5bGVDb2xsZWN0aW9ufSBbcGFyYW1zLmN1c3RvbVZhckZuc11cbiAqIEBwYXJhbSB7U3R5bGVGbn0gW3BhcmFtcy5zdXBlckxheW91dF1cbiAqIEBwYXJhbSB7KF86YW55KSA9PiBTdHlsZUNvbGxlY3Rpb259IFtwYXJhbXMudmFyTWl4aW5dXG4gKiBAcmV0dXJucyB7U3R5bGVGbn1cbiAqL1xuXG5cbnZhciBjcmVhdGVMYXlvdXQgPSBmdW5jdGlvbiBjcmVhdGVMYXlvdXQoX3JlZjMpIHtcbiAgdmFyIHZhckZucyA9IF9yZWYzLnZhckZucyxcbiAgICAgIGN1c3RvbVZhckZucyA9IF9yZWYzLmN1c3RvbVZhckZucyxcbiAgICAgIHN1cGVyTGF5b3V0ID0gX3JlZjMuc3VwZXJMYXlvdXQsXG4gICAgICBfcmVmMyR2YXJNaXhpbiA9IF9yZWYzLnZhck1peGluLFxuICAgICAgdmFyTWl4aW4gPSBfcmVmMyR2YXJNaXhpbiA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbztcbiAgfSA6IF9yZWYzJHZhck1peGluO1xuICByZXR1cm4gKFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnRWYXJzXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtjdXN0b21WYXJzXVxuICAgICAqIEByZXR1cm5zIHtBcnJheTxvYmplY3Q+fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChzZWxlY3RvciwgY29tcG9uZW50VmFycywgY3VzdG9tVmFycykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVN0eWxlKHtcbiAgICAgICAgdmFyRm5zOiB2YXJGbnMsXG4gICAgICAgIGN1c3RvbVZhckZuczogY3VzdG9tVmFyRm5zLFxuICAgICAgICBzdXBlclN0eWxlOiBzdXBlckxheW91dCxcbiAgICAgICAgdmFyTWl4aW46IHZhck1peGluLFxuICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgICAgIHNjb3BlZFNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICAgICAgY29tcG9uZW50VmFyczogY29tcG9uZW50VmFycyxcbiAgICAgICAgY3VzdG9tVmFyczogY3VzdG9tVmFyc1xuICAgICAgfSk7XG4gICAgfVxuICApO1xufTtcbi8qKlxuICogXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge3N0cmluZ30gW3BhcmFtcy5zZWxlY3Rvcl1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLnNjb3BlZFNlbGVjdG9yXVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXMuY29tcG9uZW50VmFyc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zLmN1c3RvbVZhcnNdICBcbiAqIEBwYXJhbSB7U3R5bGVGbn0gW3BhcmFtcy5zdXBlckNvbG9yXVxuICogQHBhcmFtIHtTdHlsZUNvbGxlY3Rpb259IFtwYXJhbXMudmFyRm5zXVxuICogQHBhcmFtIHsoXzphbnkpID0+IFN0eWxlQ29sbGVjdGlvbn0gW3BhcmFtcy52YXJNaXhpbl1cbiAqIEByZXR1cm5zIHtBcnJheTxvYmplY3Q+fVxuICovXG5cbnZhciBjcmVhdGVDb2xvclN0eWxlID0gZnVuY3Rpb24gY3JlYXRlQ29sb3JTdHlsZShfcmVmNCkge1xuICB2YXIgc2VsZWN0b3IgPSBfcmVmNC5zZWxlY3RvcixcbiAgICAgIHNjb3BlZFNlbGVjdG9yID0gX3JlZjQuc2NvcGVkU2VsZWN0b3IsXG4gICAgICBjb21wb25lbnRWYXJzID0gX3JlZjQuY29tcG9uZW50VmFycyxcbiAgICAgIGN1c3RvbVZhcnMgPSBfcmVmNC5jdXN0b21WYXJzLFxuICAgICAgdmFyRm5zID0gX3JlZjQudmFyRm5zLFxuICAgICAgc3VwZXJDb2xvciA9IF9yZWY0LnN1cGVyQ29sb3IsXG4gICAgICB2YXJNaXhpbiA9IF9yZWY0LnZhck1peGluO1xuICByZXR1cm4gY3JlYXRlU3R5bGUoe1xuICAgIHZhckZuczogdmFyRm5zLFxuICAgIHN1cGVyU3R5bGU6IHN1cGVyQ29sb3IsXG4gICAgdmFyTWl4aW46IHZhck1peGluLFxuICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICBzY29wZWRTZWxlY3Rvcjogc2NvcGVkU2VsZWN0b3IsXG4gICAgY29tcG9uZW50VmFyczogY29tcG9uZW50VmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzXG4gIH0pO1xufTtcbi8qKlxuICogXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIFxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBwYXJhbXMuc2NvcGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLnNlbGVjdG9yXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHBhcmFtcy5pc05vVG91Y2hcbiogQHJldHVybnMge3N0cmluZ31cbiAqL1xuXG52YXIgYXBwZW5kUHNldWRvQ2xhc3MgPSBmdW5jdGlvbiBhcHBlbmRQc2V1ZG9DbGFzcyhfcmVmNSkge1xuICB2YXIgc2NvcGVzID0gX3JlZjUuc2NvcGVzLFxuICAgICAgc2VsZWN0b3IgPSBfcmVmNS5zZWxlY3RvcixcbiAgICAgIGlzTm9Ub3VjaCA9IF9yZWY1LmlzTm9Ub3VjaDtcbiAgcmV0dXJuIGlzTm9Ub3VjaCA/IHNjb3Blcy5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gcyArIHNlbGVjdG9yICsgXCI6aG92ZXJcIjtcbiAgfSkuam9pbihcIixcIikgOiBzY29wZXMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyBzZWxlY3RvcjtcbiAgfSkuam9pbihcIixcIik7XG59O1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMgXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHBhcmFtcy5zY29wZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuc2VsZWN0b3JcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtcy5pc05vVG91Y2hdXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5cblxudmFyIGNyZWF0ZVNjb3BlZFNlbGVjdG9yID0gZnVuY3Rpb24gY3JlYXRlU2NvcGVkU2VsZWN0b3IoX3JlZjYpIHtcbiAgdmFyIHNjb3BlcyA9IF9yZWY2LnNjb3BlcyxcbiAgICAgIHNlbGVjdG9yID0gX3JlZjYuc2VsZWN0b3IsXG4gICAgICBfcmVmNiRpc05vVG91Y2ggPSBfcmVmNi5pc05vVG91Y2gsXG4gICAgICBpc05vVG91Y2ggPSBfcmVmNiRpc05vVG91Y2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjYkaXNOb1RvdWNoO1xuICByZXR1cm4gc2VsZWN0b3Iuc3BsaXQoL1xccyosXFxzKi8pLm1hcChmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBhcHBlbmRQc2V1ZG9DbGFzcyh7XG4gICAgICBzY29wZXM6IHNjb3BlcyxcbiAgICAgIHNlbGVjdG9yOiBzLFxuICAgICAgaXNOb1RvdWNoOiBpc05vVG91Y2hcbiAgICB9KTtcbiAgfSkuam9pbihcIlwiKTtcbn07XG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IENvbG9yU2NvcGVPYmplY3RcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nPn0gc2NvcGVzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdmFyRm5OYW1lXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzTm9Ub3VjaFxuICovXG5cbi8qKlxuICogQHR5cGUge0FycmF5PENvbG9yU2NvcGVPYmplY3Q+fSBjb2xvclNjb3Blc1xuICovXG5cblxudmFyIGNvbG9yU2NvcGVzID0gW3tcbiAgLy8gaGFzL2luc2lkZSBkYXJrIHRvbmVcbiAgc2NvcGVzOiBbXCIucGUtZGFyay10b25lXCIsIFwiLnBlLWRhcmstdG9uZSBcIl0sXG4gIHZhckZuTmFtZTogXCJkYXJrVGludEZuc1wiLFxuICBpc05vVG91Y2g6IGZhbHNlXG59LCB7XG4gIC8vIG5vcm1hbCwgaGFzL2luc2lkZSBsaWdodCB0b25lXG4gIHNjb3BlczogW1wiXCIsIFwiLnBlLWxpZ2h0LXRvbmVcIiwgXCIucGUtbGlnaHQtdG9uZSBcIl0sXG4gIHZhckZuTmFtZTogXCJsaWdodFRpbnRGbnNcIixcbiAgaXNOb1RvdWNoOiBmYWxzZVxufSwge1xuICAvLyBoYXMvaW5zaWRlIGRhcmsgdG9uZVxuICBzY29wZXM6IFtcIi5wZS1uby10b3VjaCAucGUtZGFyay10b25lIFwiXSxcbiAgdmFyRm5OYW1lOiBcImRhcmtUaW50SG92ZXJGbnNcIixcbiAgaXNOb1RvdWNoOiB0cnVlXG59LCB7XG4gIC8vIG5vcm1hbCwgaGFzL2luc2lkZSBsaWdodCB0b25lXG4gIHNjb3BlczogW1wiLnBlLW5vLXRvdWNoIFwiLCBcIi5wZS1uby10b3VjaCAucGUtbGlnaHQtdG9uZSBcIl0sXG4gIHZhckZuTmFtZTogXCJsaWdodFRpbnRIb3ZlckZuc1wiLFxuICBpc05vVG91Y2g6IHRydWVcbn1dO1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zLnZhckZuc11cbiAqIEBwYXJhbSB7U3R5bGVGbn0gW3BhcmFtcy5zdXBlckNvbG9yXVxuICogQHBhcmFtIHsoXzphbnkpID0+IFN0eWxlQ29sbGVjdGlvbn0gW3BhcmFtcy52YXJNaXhpbl1cbiAqIEByZXR1cm5zIHtTdHlsZUZufVxuICovXG5cbnZhciBjcmVhdGVDb2xvciA9IGZ1bmN0aW9uIGNyZWF0ZUNvbG9yKF9yZWY3KSB7XG4gIHZhciBfcmVmNyR2YXJGbnMgPSBfcmVmNy52YXJGbnMsXG4gICAgICB2YXJGbnMgPSBfcmVmNyR2YXJGbnMgPT09IHZvaWQgMCA/IHt9IDogX3JlZjckdmFyRm5zLFxuICAgICAgc3VwZXJDb2xvciA9IF9yZWY3LnN1cGVyQ29sb3IsXG4gICAgICBfcmVmNyR2YXJNaXhpbiA9IF9yZWY3LnZhck1peGluLFxuICAgICAgdmFyTWl4aW4gPSBfcmVmNyR2YXJNaXhpbiA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbztcbiAgfSA6IF9yZWY3JHZhck1peGluO1xuICByZXR1cm4gKFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnRWYXJzXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtjdXN0b21WYXJzXVxuICAgICAqIEByZXR1cm5zIHtBcnJheTxvYmplY3Q+fVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIChzZWxlY3RvciwgY29tcG9uZW50VmFycywgY3VzdG9tVmFycykge1xuICAgICAgcmV0dXJuIGNvbG9yU2NvcGVzLm1hcChmdW5jdGlvbiAoX3JlZjgpIHtcbiAgICAgICAgdmFyIHNjb3BlcyA9IF9yZWY4LnNjb3BlcyxcbiAgICAgICAgICAgIHZhckZuTmFtZSA9IF9yZWY4LnZhckZuTmFtZSxcbiAgICAgICAgICAgIGlzTm9Ub3VjaCA9IF9yZWY4LmlzTm9Ub3VjaDtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbG9yU3R5bGUoe1xuICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICAgICAgICBzY29wZWRTZWxlY3RvcjogY3JlYXRlU2NvcGVkU2VsZWN0b3Ioe1xuICAgICAgICAgICAgc2NvcGVzOiBzY29wZXMsXG4gICAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgICAgICAgICBpc05vVG91Y2g6IGlzTm9Ub3VjaFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGNvbXBvbmVudFZhcnM6IGNvbXBvbmVudFZhcnMsXG4gICAgICAgICAgY3VzdG9tVmFyczogY3VzdG9tVmFycyxcbiAgICAgICAgICB2YXJGbnM6IHZhckZuc1t2YXJGbk5hbWVdLFxuICAgICAgICAgIHN1cGVyQ29sb3I6IHN1cGVyQ29sb3IsXG4gICAgICAgICAgdmFyTWl4aW46IHZhck1peGluXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xufTtcbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHZhcnMgXG4gKiBAcGFyYW0ge29iamVjdH0gYmVoYXZpb3JWYXJzXG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gXG4gKi9cblxudmFyIGNyZWF0ZU1hcmtlclZhbHVlID0gZnVuY3Rpb24gY3JlYXRlTWFya2VyVmFsdWUodmFycywgYmVoYXZpb3JWYXJzKSB7XG4gIHZhciBtYXJrZXIgPSBPYmplY3Qua2V5cyhiZWhhdmlvclZhcnMpLmZpbHRlcihmdW5jdGlvbiAoYnZhcikge1xuICAgIHJldHVybiB2YXJzW2J2YXJdID09PSB0cnVlO1xuICB9KS5qb2luKFwiLlwiKTtcbiAgcmV0dXJuIG1hcmtlciA/IFwiXFxcIlwiLmNvbmNhdChtYXJrZXIsIFwiXFxcIlwiKSA6IHVuZGVmaW5lZDtcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBDU1Mgc3R5bGUgZnJvbSB3aGljaCB0aGUga2V5IGNhbiBiZSByZWFkIGZyb20gdGhlIGBjb250ZW50YCBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB7b2JqZWN0fSB2YXJzIFxuICogQHBhcmFtIHtvYmplY3R9IGJlaGF2aW9yVmFycyBcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuXG52YXIgY3JlYXRlTWFya2VyID0gZnVuY3Rpb24gY3JlYXRlTWFya2VyKHZhcnMsIGJlaGF2aW9yVmFycykge1xuICBpZiAoIXZhcnMpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiY3JlYXRlTWFya2VyIHJlcXVpcmVzIHBhcmFtIGB2YXJzYFwiKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gIH1cblxuICB2YXIgdmFsdWUgPSBjcmVhdGVNYXJrZXJWYWx1ZSh2YXJzLCBiZWhhdmlvclZhcnMpO1xuICByZXR1cm4gdmFsdWUgPyB7XG4gICAgXCI6YmVmb3JlXCI6IHtcbiAgICAgIGNvbnRlbnQ6IHZhbHVlLFxuICAgICAgZGlzcGxheTogXCJub25lXCJcbiAgICB9XG4gIH0gOiB1bmRlZmluZWQ7XG59O1xuXG4vLyBAdHMtY2hlY2tcbi8qKlxuICogQHR5cGVkZWYge3tbc2VsZWN0b3I6c3RyaW5nXSA6IFN0eWxlIHwgYW55fX0gU3R5bGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlIHtBcnJheTxTdHlsZT59IGNsYXNzZXNcbiAqL1xuXG52YXIgY2xhc3NlcyA9IFt7XG4gIFwiLmxheW91dCwgLmxheW91dC5ob3Jpem9udGFsXCI6IGZsZXgkMS5sYXlvdXQsXG4gIFwiLmxheW91dC5ob3Jpem9udGFsLmlubGluZSwgLmxheW91dC52ZXJ0aWNhbC5pbmxpbmVcIjogZmxleCQxLmxheW91dElubGluZSxcbiAgXCIubGF5b3V0Lmhvcml6b250YWxcIjogZmxleCQxLmxheW91dEhvcml6b250YWwsXG4gIFwiLmxheW91dC5ob3Jpem9udGFsLnJldmVyc2VcIjogZmxleCQxLmxheW91dEhvcml6b250YWxSZXZlcnNlLFxuICBcIi5sYXlvdXQudmVydGljYWxcIjogZmxleCQxLmxheW91dFZlcnRpY2FsLFxuICBcIi5sYXlvdXQudmVydGljYWwucmV2ZXJzZVwiOiBmbGV4JDEubGF5b3V0VmVydGljYWxSZXZlcnNlLFxuICBcIi5sYXlvdXQud3JhcFwiOiBmbGV4JDEubGF5b3V0V3JhcCxcbiAgXCIubGF5b3V0LndyYXAucmV2ZXJzZVwiOiBmbGV4JDEubGF5b3V0V3JhcFJldmVyc2UsXG4gIFwiLmZsZXhcIjogZmxleCQxLmZsZXgoMSksXG4gIFwiLnNwYW4uZmxleFwiOiB7XG4gICAgXCJkaXNwbGF5XCI6IFwiYmxvY2tcIlxuICB9LFxuICAvLyBmb3IgSUUgMTBcbiAgXCIuZmxleC5hdXRvLXZlcnRpY2FsXCI6IGZsZXgkMS5mbGV4QXV0b1ZlcnRpY2FsLFxuICBcIi5mbGV4LmF1dG9cIjogZmxleCQxLmZsZXhBdXRvLFxuICBcIi5mbGV4Lm5vbmVcIjogZmxleCQxLmZsZXhJbmRleChcIm5vbmVcIiksXG4gIFwiLmZsZXgub25lXCI6IGZsZXgkMS5mbGV4SW5kZXgoMSksXG4gIFwiLmZsZXgudHdvXCI6IGZsZXgkMS5mbGV4SW5kZXgoMiksXG4gIFwiLmZsZXgudGhyZWVcIjogZmxleCQxLmZsZXhJbmRleCgzKSxcbiAgXCIuZmxleC5mb3VyXCI6IGZsZXgkMS5mbGV4SW5kZXgoNCksXG4gIFwiLmZsZXguZml2ZVwiOiBmbGV4JDEuZmxleEluZGV4KDUpLFxuICBcIi5mbGV4LnNpeFwiOiBmbGV4JDEuZmxleEluZGV4KDYpLFxuICBcIi5mbGV4LnNldmVuXCI6IGZsZXgkMS5mbGV4SW5kZXgoNyksXG4gIFwiLmZsZXguZWlnaHRcIjogZmxleCQxLmZsZXhJbmRleCg4KSxcbiAgXCIuZmxleC5uaW5lXCI6IGZsZXgkMS5mbGV4SW5kZXgoOSksXG4gIFwiLmZsZXgudGVuXCI6IGZsZXgkMS5mbGV4SW5kZXgoMTApLFxuICBcIi5mbGV4LmVsZXZlblwiOiBmbGV4JDEuZmxleEluZGV4KDExKSxcbiAgXCIuZmxleC50d2VsdmVcIjogZmxleCQxLmZsZXhJbmRleCgxMiksXG4gIC8vIGFsaWdubWVudCBpbiBjcm9zcyBheGlzXG4gIFwiLmxheW91dC5zdGFydFwiOiBmbGV4JDEubGF5b3V0U3RhcnQsXG4gIFwiLmxheW91dC5jZW50ZXIsIC5sYXlvdXQuY2VudGVyLWNlbnRlclwiOiBmbGV4JDEubGF5b3V0Q2VudGVyLFxuICBcIi5sYXlvdXQuZW5kXCI6IGZsZXgkMS5sYXlvdXRFbmQsXG4gIC8vIGFsaWdubWVudCBpbiBtYWluIGF4aXNcbiAgXCIubGF5b3V0LnN0YXJ0LWp1c3RpZmllZFwiOiBmbGV4JDEubGF5b3V0U3RhcnRKdXN0aWZpZWQsXG4gIFwiLmxheW91dC5jZW50ZXItanVzdGlmaWVkLCAubGF5b3V0LmNlbnRlci1jZW50ZXJcIjogZmxleCQxLmxheW91dENlbnRlckp1c3RpZmllZCxcbiAgXCIubGF5b3V0LmVuZC1qdXN0aWZpZWRcIjogZmxleCQxLmxheW91dEVuZEp1c3RpZmllZCxcbiAgXCIubGF5b3V0LmFyb3VuZC1qdXN0aWZpZWRcIjogZmxleCQxLmxheW91dEFyb3VuZEp1c3RpZmllZCxcbiAgXCIubGF5b3V0Lmp1c3RpZmllZFwiOiBmbGV4JDEubGF5b3V0SnVzdGlmaWVkLFxuICAvLyBzZWxmIGFsaWdubWVudFxuICBcIi5zZWxmLXN0YXJ0XCI6IGZsZXgkMS5zZWxmU3RhcnQsXG4gIFwiLnNlbGYtY2VudGVyXCI6IGZsZXgkMS5zZWxmQ2VudGVyLFxuICBcIi5zZWxmLWVuZFwiOiBmbGV4JDEuc2VsZkVuZCxcbiAgXCIuc2VsZi1zdHJldGNoXCI6IGZsZXgkMS5zZWxmU3RyZXRjaFxufV07XG5cbi8vIEB0cy1jaGVja1xuXG4vKipcbiAqIEB0eXBlZGVmIHt7W3NlbGVjdG9yOnN0cmluZ10gOiBvYmplY3R9fSBTdHlsZVxuICogQHR5cGUge0FycmF5PFN0eWxlPn0gY2xhc3Nlc1xuICovXG52YXIgY2xhc3NlcyQxID0gW3tcbiAgXCIucGUtYmxvY2tcIjoge1xuICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICB9LFxuICBcIi5wZS1pbmxpbmUtYmxvY2tcIjoge1xuICAgIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCJcbiAgfSxcbiAgLy8gaWUgc3VwcG9ydCBmb3IgaGlkZGVuXG4gIFwiLnBlLWhpZGRlblwiOiB7XG4gICAgZGlzcGxheTogXCJub25lICFpbXBvcnRhbnRcIlxuICB9LFxuICBcIi5wZS1yZWxhdGl2ZVwiOiB7XG4gICAgcG9zaXRpb246IFwicmVsYXRpdmVcIlxuICB9LFxuICBcIi5wZS1hYnNvbHV0ZVwiOiB7XG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIlxuICB9LFxuICBcIi5wZS1maXRcIjoge1xuICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH0sXG4gIFwiLnBlLWZ1bGxibGVlZFwiOiB7XG4gICAgbWFyZ2luOiAwLFxuICAgIGhlaWdodDogXCIxMDB2aFwiXG4gIH0sXG4gIFwiLnBlLXJ0bFwiOiB7XG4gICAgZGlyZWN0aW9uOiBcInJ0bFwiXG4gIH0sXG4gIC8vIGZsaXAgZGlyZWN0aW9uYWwgaWNvbiBpZiBuZWVkZWRcbiAgXCIqW2Rpcj1ydGxdLCAucGUtcnRsIFwiOiB7XG4gICAgXCIgLnBlLXJ0bC0tZmxpcFwiOiB7XG4gICAgICB0cmFuc2Zvcm06IFwic2NhbGVYKC0xKVwiXG4gICAgfVxuICB9XG59XTtcblxuLy8gQHRzLWNoZWNrXG4vKipcbiAqIEB0eXBlZGVmIHt7W3NlbGVjdG9yOnN0cmluZ10gOiBvYmplY3R9fSBTdHlsZVxuICogXG5cbi8qKlxuICogQHR5cGUge0FycmF5PFN0eWxlPn0gbGF5b3V0U3R5bGVzXG4gKi9cblxudmFyIGxheW91dFN0eWxlcyA9IFtjbGFzc2VzLCBjbGFzc2VzJDFdO1xuLyoqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuXG52YXIgYWRkTGF5b3V0U3R5bGVzID0gZnVuY3Rpb24gYWRkTGF5b3V0U3R5bGVzKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZChcInBlLWxheW91dFwiLCBjbGFzc2VzLCBjbGFzc2VzJDEpO1xufTtcblxuZXhwb3J0IHsgYWRkTGF5b3V0U3R5bGVzLCBjcmVhdGVDb2xvciwgY3JlYXRlTGF5b3V0LCBjcmVhdGVNYXJrZXIsIGZsZXgkMSBhcyBmbGV4LCBsYXlvdXRTdHlsZXMsIG1peGluLCByZ2JhLCBzZWwsIHNlbGVjdG9yUlRMLCBzdHlsZXIgfTtcbiIsImltcG9ydCB7IHN0eWxlciB9IGZyb20gXCJwb2x5dGhlbmUtY29yZS1jc3NcIjtcblxuY29uc3Qgc3R5bGVzID0gW1xuICB7XG4gICAgYm9keToge1xuICAgICAgXCJiYWNrZ3JvdW5kLWNvbG9yXCI6IFwid2hpdGVzbW9rZVwiLFxuICAgICAgcGFkZGluZzogXCIwcHhcIixcbiAgICAgIG1hcmdpbjogXCIwcHhcIixcbiAgICB9LFxuICAgIFwiLmNpbm90ZXBhZC1jYW5kaWRhdGVzLWJ1dHRvblwiOiB7XG4gICAgICBcInZlcnRpY2FsLWFsaWduXCI6IFwiYm90dG9tXCIsXG4gICAgfSxcbiAgfSxcbl07XG5cbnN0eWxlci5hZGQoXCJhcHBfc3R5bGVzXCIsIHN0eWxlcyk7XG4iLCJ0eXBlIFREU1RyYW5zZm9ybWVyID0ge1xuICBzdGFydCgpOiB2b2lkO1xuICB0cmFuc2Zvcm0oXG4gICAgY2h1bms6IEFsbG93U2hhcmVkQnVmZmVyU291cmNlLFxuICAgIGNvbnRyb2xsZXI6IFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyXG4gICk6IHZvaWQ7XG4gIGRlY29kZXI/OiBUZXh0RGVjb2RlcjtcbiAgZW5jb2Rpbmc/OiBzdHJpbmc7XG4gIG9wdGlvbnM/OiBvYmplY3Q7XG59O1xuXG5jb25zdCB0ZHM6IFREU1RyYW5zZm9ybWVyID0ge1xuICBzdGFydCgpIHtcbiAgICB0aGlzLmRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIodGhpcy5lbmNvZGluZywgdGhpcy5vcHRpb25zKTtcbiAgfSxcbiAgdHJhbnNmb3JtKFxuICAgIGNodW5rOiBBbGxvd1NoYXJlZEJ1ZmZlclNvdXJjZSxcbiAgICBjb250cm9sbGVyOiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclxuICApIHtcbiAgICBpZiAodGhpcy5kZWNvZGVyKSB7XG4gICAgICBjb250cm9sbGVyLmVucXVldWUoXG4gICAgICAgICh0aGlzLmRlY29kZXIgYXMgVGV4dERlY29kZXIpLmRlY29kZShjaHVuaywgeyBzdHJlYW06IHRydWUgfSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShjaHVuayk7XG4gICAgfVxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSlNUZXh0RGVjb2RlclN0cmVhbSBleHRlbmRzIFRyYW5zZm9ybVN0cmVhbSB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihlbmNvZGluZyA9IFwidXRmLThcIiwgeyAuLi5vcHRpb25zIH0gPSB7fSkge1xuICAgIGxldCB0OiBURFNUcmFuc2Zvcm1lciA9IHsgLi4udGRzLCBlbmNvZGluZywgb3B0aW9ucyB9O1xuXG4gICAgc3VwZXIodCk7XG4gICAgdGhpcy50ZHMgPSB0O1xuICB9XG5cbiAgcHJpdmF0ZSB0ZHM6IFREU1RyYW5zZm9ybWVyO1xuXG4gIHB1YmxpYyBnZXQgZW5jb2RpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy50ZHMuZGVjb2Rlcj8uZW5jb2RpbmcgPz8gXCJ1dGYtOFwiO1xuICB9XG5cbiAgcHVibGljIGdldCBmYXRhbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50ZHMuZGVjb2Rlcj8uZmF0YWwgPz8gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGlnbm9yZUJPTSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50ZHMuZGVjb2Rlcj8uaWdub3JlQk9NID8/IGZhbHNlO1xuICB9XG59XG4iLCJ0eXBlIExTVHJhbnNmb3JtZXIgPSB7XG4gIHRyYW5zZm9ybShjaHVuazogc3RyaW5nLCBjb250cm9sbGVyOiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcik6IHZvaWQ7XG4gIGZsdXNoKGNvbnRyb2xsZXI6IFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyKTogdm9pZDtcbiAgb3B0aW9ucz86IG9iamVjdDtcbiAgcmVtYWluQ2h1bms/OiBzdHJpbmc7XG59O1xuXG5jb25zdCBsczogTFNUcmFuc2Zvcm1lciA9IHtcbiAgdHJhbnNmb3JtKGNodW5rOiBzdHJpbmcsIGNvbnRyb2xsZXI6IFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyKSB7XG4gICAgbGV0IHN0YXJ0SW5kZXg6IG51bWJlciA9IDA7XG4gICAgbGV0IGVuZEluZGV4OiBudW1iZXI7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGVuZEluZGV4ID0gY2h1bmsuaW5kZXhPZihcIlxcblwiLCBzdGFydEluZGV4KTtcbiAgICAgIGlmIChlbmRJbmRleCA+IC0xKSB7XG4gICAgICAgIGxldCBsaW5lOiBzdHJpbmcgPSBjaHVuay5zdWJzdHJpbmcoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgICAgICBsaW5lID0gbGluZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJcXFxcclwiLCBcImdcIiksIFwiXCIpO1xuICAgICAgICBpZiAodGhpcy5yZW1haW5DaHVuaykge1xuICAgICAgICAgIGxpbmUgPSAodGhpcy5yZW1haW5DaHVuayBhcyBzdHJpbmcpICsgbGluZTtcbiAgICAgICAgICBkZWxldGUgdGhpcy5yZW1haW5DaHVuaztcbiAgICAgICAgfVxuICAgICAgICBjb250cm9sbGVyLmVucXVldWUobGluZSk7XG4gICAgICAgIHN0YXJ0SW5kZXggPSBlbmRJbmRleCArIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgbGluZTogc3RyaW5nID0gY2h1bmsuc3Vic3RyaW5nKHN0YXJ0SW5kZXgpO1xuICAgICAgICBsaW5lID0gbGluZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJcXFxcclwiLCBcImdcIiksIFwiXCIpO1xuICAgICAgICBpZiAobGluZS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgIGlmICh0aGlzLnJlbWFpbkNodW5rKSB7XG4gICAgICAgICAgICBsaW5lID0gKHRoaXMucmVtYWluQ2h1bmsgYXMgc3RyaW5nKSArIGxpbmU7XG4gICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUobGluZSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5yZW1haW5DaHVuaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZW1haW5DaHVuayA9IHRoaXMucmVtYWluQ2h1bmsgPz8gXCJcIiArIGxpbmU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBmbHVzaChjb250cm9sbGVyOiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcikge1xuICAgIGlmICh0aGlzLnJlbWFpbkNodW5rKSB7XG4gICAgICBjb250cm9sbGVyLmVucXVldWUodGhpcy5yZW1haW5DaHVuayBhcyBzdHJpbmcpO1xuICAgICAgZGVsZXRlIHRoaXMucmVtYWluQ2h1bms7XG4gICAgfVxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSlNMaW5lU3RyZWFtIGV4dGVuZHMgVHJhbnNmb3JtU3RyZWFtIHtcbiAgcHVibGljIGNvbnN0cnVjdG9yKHsgLi4ub3B0aW9ucyB9ID0ge30pIHtcbiAgICBsZXQgdDogTFNUcmFuc2Zvcm1lciA9IHsgLi4ubHMsIG9wdGlvbnMgfTtcblxuICAgIHN1cGVyKHQpO1xuICB9XG59XG4iLCIvLyB0eXBlIGRlZmluaXRpb25cbnR5cGUgU3BhY2VTdHlsZSA9IDEgfCAyIHwgNDtcbnR5cGUgS2V5bmFtZXMgPSB7XG4gIFtpbmRleDogc3RyaW5nXTogc3RyaW5nO1xufTtcbnR5cGUgUXVpY2tSZWNvcmQgPSB7IGtleWNvZGU6IHN0cmluZzsgY2FuZGlkYXRlczogc3RyaW5nIH07XG50eXBlIENoYXJEZWZSZWNvcmQgPSB7IGtleWNvZGU6IHN0cmluZzsgY2FuZGlkYXRlOiBzdHJpbmcgfTtcbi8vIGVuZCBvZiB0eXBlIGRlZmluaXRpb25cblxuLy8gZW51bVxuZW51bSBTdGF0dXMge1xuICBJTlBVVCxcbiAgU0VMRUNULFxufVxuXG4vLyBhY3R1YWwgY2luIGNsYXNzIGRlZmluaXRpb25cbmNsYXNzIENpbiB7XG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNhbmRpZGF0ZUxpc3QgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRQYWdlID0gMDtcbiAgICB0aGlzLm1heE51bU9mS2V5cyA9IDE7XG5cbiAgICB0aGlzLmVuYW1lID0gXCJcIjtcbiAgICB0aGlzLmNuYW1lID0gXCJcIjtcbiAgICB0aGlzLnByb21wdCA9IFwiXCI7XG5cbiAgICAvLyBpbml0IGRlZmF1bHQgc2V0dGluZ1xuICAgIHRoaXMuc2Vsa2V5ID0gXCIxMjM0NTY3ODkwXCI7XG4gICAgdGhpcy5kdXBzZWwgPSB0aGlzLnNlbGtleS5sZW5ndGg7XG4gICAgdGhpcy5lbmRrZXkgPSBcIlwiO1xuICAgIHRoaXMuc3BhY2VTdHlsZSA9IDQ7XG4gICAgdGhpcy5rZWVwS2V5Q2FzZSA9IGZhbHNlO1xuICAgIHRoaXMuc3ltYm9sS2JtID0gZmFsc2U7IC8vTm90IGltcGxlbWVudCB5ZXQuXG4gICAgdGhpcy5waGFzZUF1dG9Ta2lwRW5kS2V5ID0gZmFsc2U7IC8vIFVudXNlZDogTm8gaW1wbGVtZW50YXRpb24gb2YgcGhyYXNlIGlucHV0XG4gICAgdGhpcy5mbGFnQXV0b1NlbGVjdEJ5UGhhc2UgPSBmYWxzZTsgLy8gVW51c2VkOiBObyBpbXBsZW1lbnRhdGlvbiBvZiBwaHJhc2UgaW5wdXRcbiAgICB0aGlzLmZsYWdEaXNwUGFydGlhbE1hdGNoID0gZmFsc2U7IC8vTm90IGltcGxlbWVudCB5ZXQuXG4gICAgdGhpcy5mbGFnRGlzcEZ1bGxNYXRjaCA9IGZhbHNlO1xuICAgIHRoaXMuZmxhZ1ZlcnRpY2FsU2VsZWN0aW9uID0gZmFsc2U7IC8vTm90IGltcGxlbWVudCB5ZXQuXG4gICAgdGhpcy5mbGFnUHJlc3NGdWxsQXV0b1NlbmQgPSBmYWxzZTsgLy9Ob3QgaW1wbGVtZW50IHlldC5cbiAgICB0aGlzLmZsYWdVbmlxdWVBdXRvU2VuZCA9IGZhbHNlOyAvL05vdCBpbXBsZW1lbnQgeWV0LlxuICAgIC8vIGVuZCBvZiBpbml0IGRlZmF1bHQgc2V0dGluZ1xuXG4gICAgdGhpcy5fZW5hYmxlID0gdHJ1ZTtcbiAgICB0aGlzLl9zdGF0dXMgPSBTdGF0dXMuSU5QVVQ7XG4gICAgdGhpcy5fa2V5cyA9IFwiXCI7XG4gIH1cblxuICAvLyBQcml2YXRlIG1lbWJlcnMgZGVjbGFyYXRpb25cbiAgcHJpdmF0ZSBfZW5hYmxlOiBib29sZWFuO1xuICBwcml2YXRlIF9zdGF0dXM6IFN0YXR1cztcbiAgcHJpdmF0ZSBfa2V5czogc3RyaW5nO1xuICAvLyBFbmQgb2YgcHJpdmF0ZSBtZW1iZXJzIGRlY2xhcmF0aW9uXG5cbiAgLy8gUHVibGljIG1lbWJlcnMgZGVjbGFyYXRpb25cbiAgcHVibGljIGRiTmFtZT86IHN0cmluZztcbiAgcHVibGljIGRiPzogSURCRGF0YWJhc2U7XG5cbiAgcHVibGljIGNhbmRpZGF0ZUxpc3Q6IHN0cmluZ1tdO1xuICBwdWJsaWMgY3VycmVudFBhZ2U6IG51bWJlcjtcbiAgcHVibGljIG1heE51bU9mS2V5czogbnVtYmVyO1xuXG4gIC8vIFB1YmxpYyBtZW1iZXJzIGRlY2xhcmF0aW9uIChjaW4gZmlsZSBmaWVsZHMpXG4gIHB1YmxpYyBlbmFtZTogc3RyaW5nO1xuICBwdWJsaWMgY25hbWU6IHN0cmluZztcbiAgcHVibGljIHByb21wdDogc3RyaW5nO1xuICBwdWJsaWMgc2Vsa2V5OiBzdHJpbmc7XG4gIHB1YmxpYyBkdXBzZWw6IG51bWJlcjtcbiAgcHVibGljIGVuZGtleTogc3RyaW5nO1xuICAvLyBzcGFjZSBzdHlsZTpcbiAgLy8gMSBmb3IgZGF5aSwgbm9zZWVpbmdcbiAgLy8gMiBmb3Igc2ltcGxleFxuICAvLyA0IGZvciBjYW5namllLCBhcnJheSAoZGVmYXVsdClcbiAgcHVibGljIHNwYWNlU3R5bGU6IFNwYWNlU3R5bGU7XG4gIHB1YmxpYyBrZWVwS2V5Q2FzZTogYm9vbGVhbjtcbiAgcHVibGljIHN5bWJvbEtibTogYm9vbGVhbjsgLy9Ob3QgaW1wbGVtZW50IHlldC5cbiAgcHVibGljIHBoYXNlQXV0b1NraXBFbmRLZXk6IGJvb2xlYW47IC8vIFVudXNlZDogTm8gaW1wbGVtZW50YXRpb24gb2YgcGhyYXNlIGlucHV0XG4gIHB1YmxpYyBmbGFnQXV0b1NlbGVjdEJ5UGhhc2U6IGJvb2xlYW47IC8vIFVudXNlZDogTm8gaW1wbGVtZW50YXRpb24gb2YgcGhyYXNlIGlucHV0XG4gIHB1YmxpYyBmbGFnRGlzcFBhcnRpYWxNYXRjaDogYm9vbGVhbjsgLy9Ob3QgaW1wbGVtZW50IHlldC5cbiAgcHVibGljIGZsYWdEaXNwRnVsbE1hdGNoOiBib29sZWFuO1xuICBwdWJsaWMgZmxhZ1ZlcnRpY2FsU2VsZWN0aW9uOiBib29sZWFuOyAvL05vdCBpbXBsZW1lbnQgeWV0LlxuICBwdWJsaWMgZmxhZ1ByZXNzRnVsbEF1dG9TZW5kOiBib29sZWFuOyAvL05vdCBpbXBsZW1lbnQgeWV0LlxuICBwdWJsaWMgZmxhZ1VuaXF1ZUF1dG9TZW5kOiBib29sZWFuOyAvL05vdCBpbXBsZW1lbnQgeWV0LlxuXG4gIHB1YmxpYyBrZXluYW1lOiBLZXluYW1lcyA9IHt9O1xuICBwdWJsaWMgdW53cml0dGVuUXVpY2tMaXN0PzogUXVpY2tSZWNvcmRbXTtcbiAgcHVibGljIHVud3JpdHRlbkNoYXJEZWZMaXN0PzogQ2hhckRlZlJlY29yZFtdO1xuICAvLyBFbmQgb2YgcHVibGljIG1lbWJlcnMgZGVjbGFyYXRpb24gKGNpbiBmaWxlIGZpZWxkcylcbiAgLy8gRW5kIG9mIHB1YmxpYyBtZW1iZXJzIGRlY2xhcmF0aW9uXG5cbiAgLy8gUHVibGljIGdldHRlcnMvc2V0dGVycyBpbXBsZW1lbnRhdGlvblxuICBwdWJsaWMgc2V0IGVuYWJsZSh2OiBib29sZWFuKSB7XG4gICAgdGhpcy5fZW5hYmxlID0gdjtcbiAgICBpZiAoIXRoaXMuX2VuYWJsZSkge1xuICAgICAgdGhpcy5yZXNldEtleXMoKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0IGVuYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZW5hYmxlO1xuICB9XG5cbiAgcHVibGljIGdldCB0b3RhbFBhZ2UoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuY2FuZGlkYXRlTGlzdCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBsaXN0U2l6ZSA9IHRoaXMuZHVwc2VsO1xuICAgICAgaWYgKHRoaXMuc3BhY2VTdHlsZSA9PSAxKSB7XG4gICAgICAgIGxpc3RTaXplKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuY2FuZGlkYXRlTGlzdC5sZW5ndGggLyBsaXN0U2l6ZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCBjdXJyZW50Q2FuZGlkYXRlTGlzdCgpOiBzdHJpbmdbXSB7XG4gICAgaWYgKHRoaXMuY2FuZGlkYXRlTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgbGlzdFNpemUgPSB0aGlzLmR1cHNlbDtcbiAgICAgIGlmICh0aGlzLnNwYWNlU3R5bGUgPT0gMSkge1xuICAgICAgICBsaXN0U2l6ZSsrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY2FuZGlkYXRlTGlzdC5zbGljZShcbiAgICAgICAgKHRoaXMuY3VycmVudFBhZ2UgLSAxKSAqIGxpc3RTaXplLFxuICAgICAgICBNYXRoLm1pbih0aGlzLmN1cnJlbnRQYWdlICogbGlzdFNpemUsIHRoaXMuY2FuZGlkYXRlTGlzdC5sZW5ndGgpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5jYW5kaWRhdGVMaXN0O1xuICAgIH1cbiAgfVxuICAvLyBFbmQgb2YgcHVibGljIGdldHRlcnMvc2V0dGVycyBpbXBsZW1lbnRhdGlvblxuXG4gIC8vIFByaXZhdGUgdXNlZCBtZXRob2RcbiAgcHJpdmF0ZSBfZmlyZUNhbmRpZGF0ZUNoYW5nZSgpIHtcbiAgICBpZiAodGhpcy50b3RhbFBhZ2UgPT0gMCkge1xuICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAxO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRoaXMub25DdXJyZW50Q2FuZGlkYXRlc0NoYW5nZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMub25DdXJyZW50Q2FuZGlkYXRlc0NoYW5nZSh0aGlzLmN1cnJlbnRDYW5kaWRhdGVMaXN0KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9uQ2FuZGlkYXRlc0NoYW5nZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMub25DYW5kaWRhdGVzQ2hhbmdlKHRoaXMuY2FuZGlkYXRlTGlzdCk7XG4gICAgfVxuICB9XG4gIC8vIEVuZCBvZiBwcml2YXRlIHVzZWQgbWV0aG9kXG5cbiAgLy8gUHVibGljIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbiAgcHVibGljIHJlc2V0S2V5cygpIHtcbiAgICB0aGlzLl9rZXlzID0gXCJcIjtcbiAgICB0aGlzLmNhbmRpZGF0ZUxpc3QgPSBbXTtcbiAgICB0aGlzLl9zdGF0dXMgPSBTdGF0dXMuSU5QVVQ7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9uS2V5bmFtZXNDaGFuZ2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLm9uS2V5bmFtZXNDaGFuZ2UoXCJcIik7XG4gICAgfVxuICAgIHRoaXMuX2ZpcmVDYW5kaWRhdGVDaGFuZ2UoKTtcbiAgfVxuXG4gIHB1YmxpYyBkZWxldGVDb250ZW50QmFja3dhcmQoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuZW5hYmxlKSB7XG4gICAgICBpZiAodGhpcy5fc3RhdHVzID09IFN0YXR1cy5JTlBVVCkge1xuICAgICAgICBpZiAodGhpcy5fa2V5cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgY29uc3QgdGhlTGFzdEtleTogc3RyaW5nID0gdGhpcy5fa2V5cy5jaGFyQXQodGhpcy5fa2V5cy5sZW5ndGggLSAyKTtcbiAgICAgICAgICB0aGlzLl9rZXlzID0gdGhpcy5fa2V5cy5zdWJzdHJpbmcoMCwgdGhpcy5fa2V5cy5sZW5ndGggLSAyKTtcbiAgICAgICAgICB0aGlzLnB1c2hLZXkodGhlTGFzdEtleSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fa2V5cy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgIHRoaXMucmVzZXRLZXlzKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXR1cyA9PSBTdGF0dXMuU0VMRUNUKSB7XG4gICAgICAgIHRoaXMucmVzZXRLZXlzKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHB1c2hLZXkoa2V5OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBjaW46IENpbiA9IHRoaXM7XG5cbiAgICBjb25zdCBjb21taXRUZXh0ID0gZnVuY3Rpb24gKHRleHQ6IHN0cmluZykge1xuICAgICAgY2luLl9rZXlzID0gXCJcIjtcbiAgICAgIGNpbi5jYW5kaWRhdGVMaXN0ID0gW107XG4gICAgICBjaW4uX3N0YXR1cyA9IFN0YXR1cy5JTlBVVDtcbiAgICAgIGlmICh0eXBlb2YgY2luLm9uS2V5bmFtZXNDaGFuZ2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNpbi5vbktleW5hbWVzQ2hhbmdlKFwiXCIpO1xuICAgICAgfVxuICAgICAgY2luLl9maXJlQ2FuZGlkYXRlQ2hhbmdlKCk7XG4gICAgICBpZiAodHlwZW9mIGNpbi5vbkNvbW1pdCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2luLm9uQ29tbWl0KHRleHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWNpbi5lbmFibGUgfHwgIWNpbi5kYikge1xuICAgICAgY29tbWl0VGV4dChrZXkpO1xuICAgICAgY29uc29sZS5sb2coYENvbW1pdCB0ZXh0OiR7a2V5fWApO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhgUHVzaCBrZXk6JHtrZXl9YCk7XG4gICAgfVxuXG4gICAgLy8gbG9va3VwIGNhbmRpZGF0ZSBmcm9tIGluZGV4ZWREQlxuICAgIGNvbnN0IHRyYW5zYWN0aW9uOiBJREJUcmFuc2FjdGlvbiA9IChjaW4uZGIgYXMgSURCRGF0YWJhc2UpLnRyYW5zYWN0aW9uKFtcbiAgICAgIFwicXVpY2tcIixcbiAgICAgIFwiY2hhcmRlZlwiLFxuICAgIF0pO1xuICAgIGNvbnN0IGlzU3BhY2U6IGJvb2xlYW4gPSBrZXkgPT0gXCIgXCI7XG4gICAgY29uc3QgaXNFbmRLZXk6IGJvb2xlYW4gPSBjaW4uZW5ka2V5LmluZGV4T2Yoa2V5KSA+IC0xO1xuICAgIGNvbnN0IGlzU2VsS2V5OiBib29sZWFuID0gY2luLnNlbGtleS5pbmRleE9mKGtleSkgPiAtMTtcbiAgICBjb25zdCBpc0tleW5hbWU6IGJvb2xlYW4gPSB0eXBlb2YgY2luLmtleW5hbWVba2V5XSA9PSBcInN0cmluZ1wiO1xuXG4gICAgY29uc3QgZ2V0S2V5bmFtZXNGcm9tS2V5cyA9IGZ1bmN0aW9uIChrZXlzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgcmV0dXJuIGtleXNcbiAgICAgICAgLnNwbGl0KFwiXCIpXG4gICAgICAgIC5tYXAoKHYpID0+IGNpbi5rZXluYW1lW3ZdKVxuICAgICAgICAuam9pbihcIlwiKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0Q2FuZGlkYXRlc0Zyb21RdWljayA9IGFzeW5jIGZ1bmN0aW9uIChcbiAgICAgIGtleXM6IHN0cmluZ1xuICAgICk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmdbXT4oZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBsZXQgY2FuZGlkYXRlTGlzdDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoXCJxdWlja1wiKS5nZXQoa2V5cykub25zdWNjZXNzID0gZnVuY3Rpb24gKFxuICAgICAgICAgIGV2ZW50OiBFdmVudFxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoKGV2ZW50LnRhcmdldCBhcyBJREJSZXF1ZXN0KS5yZXN1bHQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbmRpZGF0ZXNTdHIgPSAoZXZlbnQudGFyZ2V0IGFzIElEQlJlcXVlc3QpLnJlc3VsdFxuICAgICAgICAgICAgICAuY2FuZGlkYXRlcztcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FuZGlkYXRlc1N0ciA9PSBcInN0cmluZ1wiICYmIGNhbmRpZGF0ZXNTdHIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBjYW5kaWRhdGVMaXN0ID0gY2FuZGlkYXRlTGlzdC5jb25jYXQoY2FuZGlkYXRlc1N0ci5zcGxpdChcIlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc29sdmUoY2FuZGlkYXRlTGlzdCk7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0Q2FuZGlkYXRlc0Zyb21DaGFyZGVmID0gYXN5bmMgZnVuY3Rpb24gKFxuICAgICAga2V5czogc3RyaW5nXG4gICAgKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZ1tdPihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGNvbnN0IGNhbmRpZGF0ZUxpc3Q6IHN0cmluZ1tdID0gW107XG4gICAgICAgIHRyYW5zYWN0aW9uXG4gICAgICAgICAgLm9iamVjdFN0b3JlKFwiY2hhcmRlZlwiKVxuICAgICAgICAgIC5pbmRleChcImtleWNvZGVcIilcbiAgICAgICAgICAub3BlbkN1cnNvcihJREJLZXlSYW5nZS5vbmx5KGtleXMpKS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoXG4gICAgICAgICAgZXZlbnQ6IEV2ZW50XG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IGN1cnNvciA9IChldmVudC50YXJnZXQgYXMgSURCUmVxdWVzdCkucmVzdWx0O1xuICAgICAgICAgIGlmIChjdXJzb3IpIHtcbiAgICAgICAgICAgIGNhbmRpZGF0ZUxpc3QucHVzaChjdXJzb3IudmFsdWUuY2FuZGlkYXRlKTtcbiAgICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKGNhbmRpZGF0ZUxpc3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBzdGFydCBwdXNoIGtleSBsb2dpY1xuICAgIGNvbnN0IG9yaWdpbmFsS2V5czogc3RyaW5nID0gY2luLl9rZXlzO1xuICAgIGNvbnN0IG9yaWdpbmFsQ2FuZGlkYXRlTGlzdDogc3RyaW5nW10gPSBjaW4uY2FuZGlkYXRlTGlzdDtcbiAgICBzd2l0Y2ggKGNpbi5fc3RhdHVzKSB7XG4gICAgICBjYXNlIFN0YXR1cy5JTlBVVDpcbiAgICAgICAgbGV0IHF1aWNrQ2FuZGlkYXRlTGlzdDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgbGV0IGNoYXJkZWZDYW5kaWRhdGVMaXN0OiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBjaW4uY2FuZGlkYXRlTGlzdCA9IFtdO1xuXG4gICAgICAgIGlmIChpc0tleW5hbWUpIHtcbiAgICAgICAgICBjaW4uX2tleXMgKz0ga2V5O1xuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY2luLmZsYWdEaXNwRnVsbE1hdGNoIHx8XG4gICAgICAgICAgICBpc0VuZEtleSB8fFxuICAgICAgICAgICAgKGNpbi5zcGFjZVN0eWxlID09IDIgJiYgY2luLl9rZXlzLmxlbmd0aCA9PSBjaW4ubWF4TnVtT2ZLZXlzKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcXVpY2tDYW5kaWRhdGVMaXN0ID0gYXdhaXQgZ2V0Q2FuZGlkYXRlc0Zyb21RdWljayhjaW4uX2tleXMpO1xuXG4gICAgICAgICAgICBpZiAocXVpY2tDYW5kaWRhdGVMaXN0Lmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgICAgY2hhcmRlZkNhbmRpZGF0ZUxpc3QgPSBhd2FpdCBnZXRDYW5kaWRhdGVzRnJvbUNoYXJkZWYoY2luLl9rZXlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNTcGFjZSkge1xuICAgICAgICAgIGNoYXJkZWZDYW5kaWRhdGVMaXN0ID0gYXdhaXQgZ2V0Q2FuZGlkYXRlc0Zyb21DaGFyZGVmKGNpbi5fa2V5cyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocXVpY2tDYW5kaWRhdGVMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjaW4uY2FuZGlkYXRlTGlzdCA9IHF1aWNrQ2FuZGlkYXRlTGlzdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaW4uY2FuZGlkYXRlTGlzdCA9IGNoYXJkZWZDYW5kaWRhdGVMaXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHR5cGVvZiBjaW4ub25LZXluYW1lc0NoYW5nZSA9PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgICAoIWlzU2VsS2V5IHx8IG9yaWdpbmFsQ2FuZGlkYXRlTGlzdC5sZW5ndGggPT0gMClcbiAgICAgICAgKSB7XG4gICAgICAgICAgY2luLm9uS2V5bmFtZXNDaGFuZ2UoZ2V0S2V5bmFtZXNGcm9tS2V5cyhjaW4uX2tleXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBjaW4uZmxhZ0Rpc3BGdWxsTWF0Y2ggJiZcbiAgICAgICAgICAhKGNpbi5jYW5kaWRhdGVMaXN0Lmxlbmd0aCA9PSAwICYmIG9yaWdpbmFsQ2FuZGlkYXRlTGlzdC5sZW5ndGggPT0gMClcbiAgICAgICAgKSB7XG4gICAgICAgICAgY2luLl9maXJlQ2FuZGlkYXRlQ2hhbmdlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNFbmRLZXkgfHxcbiAgICAgICAgICBpc1NwYWNlIHx8XG4gICAgICAgICAgKGNpbi5zcGFjZVN0eWxlID09IDIgJiYgY2luLl9rZXlzLmxlbmd0aCA9PSBjaW4ubWF4TnVtT2ZLZXlzKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAoY2luLmNhbmRpZGF0ZUxpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgaWYgKGlzU3BhY2UgJiYgY2luLnNwYWNlU3R5bGUgPT0gMSkge1xuICAgICAgICAgICAgICBjb21taXRUZXh0KGNpbi5jYW5kaWRhdGVMaXN0WzBdKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2luLl9zdGF0dXMgPSBTdGF0dXMuU0VMRUNUO1xuICAgICAgICAgICAgICBpZiAoIWNpbi5mbGFnRGlzcEZ1bGxNYXRjaCkge1xuICAgICAgICAgICAgICAgIGNpbi5fZmlyZUNhbmRpZGF0ZUNoYW5nZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY2luLm9uRW5kS2V5ID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGNpbi5vbkVuZEtleShjaW4uY3VycmVudENhbmRpZGF0ZUxpc3QpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGNpbi5jYW5kaWRhdGVMaXN0Lmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICBjb21taXRUZXh0KGNpbi5jYW5kaWRhdGVMaXN0WzBdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgaXNTZWxLZXkgJiZcbiAgICAgICAgICBvcmlnaW5hbEtleXMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgIG9yaWdpbmFsQ2FuZGlkYXRlTGlzdC5sZW5ndGggPiAwXG4gICAgICAgICkge1xuICAgICAgICAgIGNpbi5fa2V5cyA9IG9yaWdpbmFsS2V5cztcbiAgICAgICAgICBjaW4uY2FuZGlkYXRlTGlzdCA9IG9yaWdpbmFsQ2FuZGlkYXRlTGlzdDtcbiAgICAgICAgICBjaW4uX2ZpcmVDYW5kaWRhdGVDaGFuZ2UoKTtcblxuICAgICAgICAgIGxldCBzZWxlY3RJbmRleDogbnVtYmVyID0gY2luLnNlbGtleS5pbmRleE9mKGtleSk7XG4gICAgICAgICAgaWYgKGNpbi5zcGFjZVN0eWxlID09IDEpIHtcbiAgICAgICAgICAgIHNlbGVjdEluZGV4Kys7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNpbi5jdXJyZW50Q2FuZGlkYXRlTGlzdC5sZW5ndGggPiBzZWxlY3RJbmRleCkge1xuICAgICAgICAgICAgY29tbWl0VGV4dChjaW4uY3VycmVudENhbmRpZGF0ZUxpc3Rbc2VsZWN0SW5kZXhdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0tleW5hbWUpIHtcbiAgICAgICAgICBjb21taXRUZXh0KGtleSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGlydHkgaGFuZGxpbmcgb2YgZW5ka2V5XG4gICAgICAgIC8vIGlmIHRoZSBtYXBwaW5nIGlzIG5vdCBkZWZpbmVkIGluIGNpbiBmaWxlLlxuICAgICAgICAvLyBJdCBzaG91bGQgYmUgaGFuZGxlZCBpbiBjaW4gZmlsZS5cbiAgICAgICAgaWYgKGlzRW5kS2V5ICYmIGNpbi5fa2V5cy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgIGNvbW1pdFRleHQoa2V5KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5kIG9mIGRpcnR5IGhhbmRsaW5nXG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU3RhdHVzLlNFTEVDVDpcbiAgICAgICAgaWYgKGlzU2VsS2V5KSB7XG4gICAgICAgICAgbGV0IHNlbGVjdEluZGV4OiBudW1iZXIgPSBjaW4uc2Vsa2V5LmluZGV4T2Yoa2V5KTtcbiAgICAgICAgICBpZiAoY2luLnNwYWNlU3R5bGUgPT0gMSkge1xuICAgICAgICAgICAgc2VsZWN0SW5kZXgrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNpbi5jdXJyZW50Q2FuZGlkYXRlTGlzdC5sZW5ndGggPiBzZWxlY3RJbmRleCkge1xuICAgICAgICAgICAgY29tbWl0VGV4dChjaW4uY3VycmVudENhbmRpZGF0ZUxpc3Rbc2VsZWN0SW5kZXhdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGlzU3BhY2UpIHtcbiAgICAgICAgICBpZiAoY2luLnRvdGFsUGFnZSA+IDEpIHtcbiAgICAgICAgICAgIGNpbi5uZXh0Q2FuZGlkYXRlTGlzdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUT0RPIG1heSBiZSBiYXNlZCBvbiBzcGFjZSBzdHlsZSAoZS5nLiBjYW5namllKSwgbm8gYWN0aW9uXG4gICAgICAgICAgICBjb21taXRUZXh0KGNpbi5jdXJyZW50Q2FuZGlkYXRlTGlzdFswXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbW1pdFRleHQoY2luLmN1cnJlbnRDYW5kaWRhdGVMaXN0WzBdKTtcbiAgICAgICAgICBjaW4ucHVzaEtleShrZXkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvL2VuZCBwdXNoIGtleSBsb2dpY1xuICB9XG5cbiAgcHVibGljIHByZXZpb3VzQ2FuZGlkYXRlTGlzdCgpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy50b3RhbFBhZ2UgPT0gMCkge1xuICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDA7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnRQYWdlID09IDEpIHtcbiAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSB0aGlzLnRvdGFsUGFnZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJyZW50UGFnZS0tO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRoaXMub25DdXJyZW50Q2FuZGlkYXRlc0NoYW5nZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMub25DdXJyZW50Q2FuZGlkYXRlc0NoYW5nZSh0aGlzLmN1cnJlbnRDYW5kaWRhdGVMaXN0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwdWJsaWMgbmV4dENhbmRpZGF0ZUxpc3QoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMudG90YWxQYWdlID09IDApIHtcbiAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAwO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50UGFnZSA9PSB0aGlzLnRvdGFsUGFnZSkge1xuICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudFBhZ2UrKztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9uQ3VycmVudENhbmRpZGF0ZXNDaGFuZ2UgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aGlzLm9uQ3VycmVudENhbmRpZGF0ZXNDaGFuZ2UodGhpcy5jdXJyZW50Q2FuZGlkYXRlTGlzdCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8vIEVuZCBvZiBwdWJsaWMgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxuXG4gIC8vIE92ZXJyaWRlZCBtZXRob2RzXG4gIHB1YmxpYyBvbktleW5hbWVzQ2hhbmdlKGtleW5hbWVzOiBzdHJpbmcpIHt9XG4gIHB1YmxpYyBvbkNhbmRpZGF0ZXNDaGFuZ2UoY2FuZGlkYXRlczogc3RyaW5nW10pIHt9XG4gIHB1YmxpYyBvbkN1cnJlbnRDYW5kaWRhdGVzQ2hhbmdlKGNhbmRpZGF0ZXM6IHN0cmluZ1tdKSB7fVxuICBwdWJsaWMgb25FbmRLZXkoY2FuZGlkYXRlczogc3RyaW5nW10pIHt9XG4gIHB1YmxpYyBvbkNvbW1pdCh0ZXh0OiBzdHJpbmcpIHt9XG4gIC8vIEVuZCBvZiBvdmVycmlkZWQgbWV0aG9kc1xufVxuXG5leHBvcnQgeyBTcGFjZVN0eWxlLCBLZXluYW1lcywgUXVpY2tSZWNvcmQsIENoYXJEZWZSZWNvcmQsIENpbiB9O1xuIiwiaW1wb3J0IEpTVGV4dERlY29kZXJTdHJlYW0gZnJvbSBcIi4uL3N0cmVhbS9qc3RleHRkZWNvZGVyc3RyZWFtXCI7XG5pbXBvcnQgSlNMaW5lU3RyZWFtIGZyb20gXCIuLi9zdHJlYW0vanNsaW5lc3RyZWFtXCI7XG5pbXBvcnQgeyBTcGFjZVN0eWxlLCBLZXluYW1lcywgUXVpY2tSZWNvcmQsIENoYXJEZWZSZWNvcmQsIENpbiB9IGZyb20gXCIuL2NpblwiO1xuXG5mdW5jdGlvbiBpbmRleE9mV2hpdGVTcGFjZShsaW5lOiBzdHJpbmcpOiBudW1iZXIge1xuICBsZXQgd3NwSWR4OiBudW1iZXI7XG4gIGNvbnN0IHNwSWR4OiBudW1iZXIgPSBsaW5lLmluZGV4T2YoXCIgXCIpO1xuICBjb25zdCB0YWJJZHg6IG51bWJlciA9IGxpbmUuaW5kZXhPZihcIlxcdFwiKTtcbiAgaWYgKHRhYklkeCA9PSAtMSB8fCAoc3BJZHggPiAtMSAmJiBzcElkeCA8IHRhYklkeCkpIHtcbiAgICB3c3BJZHggPSBzcElkeDtcbiAgfSBlbHNlIHtcbiAgICB3c3BJZHggPSB0YWJJZHg7XG4gIH1cbiAgcmV0dXJuIHdzcElkeDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ29tbWVudChsaW5lOiBzdHJpbmcpOiBzdHJpbmcge1xuICBsZXQgaTogbnVtYmVyID0gbGluZS5pbmRleE9mKFwiI1wiKTtcbiAgaWYgKGkgPiAtMSkge1xuICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCk7XG4gIH1cbiAgcmV0dXJuIGxpbmU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUtleW5hbWVTZWN0aW9uKFxuICByZWFkZXI6IFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcixcbiAgY2luOiBDaW5cbik6IFByb21pc2U8Q2luPiB7XG4gIGNvbnN0IHsgZG9uZSwgdmFsdWUgfTogUmVhZGFibGVTdHJlYW1SZWFkUmVzdWx0PGFueT4gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICBpZiAoZG9uZSkge1xuICAgIHJldHVybiBjaW47XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCBsaW5lID0gdmFsdWUgYXMgc3RyaW5nO1xuICAgICAgaWYgKGxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAobGluZS5zdGFydHNXaXRoKFwiJWtleW5hbWUgZW5kXCIpKSB7XG4gICAgICAgICAgcmV0dXJuIGNpbjtcbiAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoXCIgIyBcIikgJiYgbGluZS5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgY2luLmtleW5hbWVbXCIjXCJdID0gbGluZS5zdWJzdHJpbmcoMyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgd2hpdGVzcGFjZUluZGV4OiBudW1iZXIgPSBpbmRleE9mV2hpdGVTcGFjZShsaW5lKTtcbiAgICAgICAgICBpZiAod2hpdGVzcGFjZUluZGV4ID4gMCAmJiB3aGl0ZXNwYWNlSW5kZXggPCBsaW5lLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGNpbi5rZXluYW1lW2xpbmUuc3Vic3RyaW5nKDAsIHdoaXRlc3BhY2VJbmRleCldID0gbGluZVxuICAgICAgICAgICAgICAuc3Vic3RyaW5nKHdoaXRlc3BhY2VJbmRleCArIDEpXG4gICAgICAgICAgICAgIC50cmltKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBoYW5kbGVLZXluYW1lU2VjdGlvbihyZWFkZXIsIGNpbik7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlUXVpY2tTZWN0aW9uKFxuICByZWFkZXI6IFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcixcbiAgY2luOiBDaW5cbik6IFByb21pc2U8Q2luPiB7XG4gIGNvbnN0IHsgZG9uZSwgdmFsdWUgfTogUmVhZGFibGVTdHJlYW1SZWFkUmVzdWx0PGFueT4gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICBpZiAoZG9uZSkge1xuICAgIHJldHVybiBjaW47XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCBsaW5lID0gdmFsdWUgYXMgc3RyaW5nO1xuICAgICAgbGV0IGtleWNvZGU6IHN0cmluZywgY2FuZGlkYXRlczogc3RyaW5nO1xuICAgICAgaWYgKGxpbmUubGVuZ3RoID4gMCAmJiBjaW4udW53cml0dGVuUXVpY2tMaXN0KSB7XG4gICAgICAgIGNvbnN0IHVud3JpdHRlblF1aWNrTGlzdCA9IGNpbi51bndyaXR0ZW5RdWlja0xpc3QgYXMgUXVpY2tSZWNvcmRbXTtcbiAgICAgICAgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVxdWljayBlbmRcIikpIHtcbiAgICAgICAgICByZXR1cm4gY2luO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiAjIFwiKSAmJiBsaW5lLmxlbmd0aCA+IDMpIHtcbiAgICAgICAgICBrZXljb2RlID0gXCIjXCI7XG4gICAgICAgICAgY2FuZGlkYXRlcyA9IGxpbmUuc3Vic3RyaW5nKDMpLnRyaW0oKTtcbiAgICAgICAgICB1bndyaXR0ZW5RdWlja0xpc3QucHVzaCh7IGtleWNvZGUsIGNhbmRpZGF0ZXMgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgd2hpdGVzcGFjZUluZGV4OiBudW1iZXIgPSBpbmRleE9mV2hpdGVTcGFjZShsaW5lKTtcbiAgICAgICAgICBpZiAod2hpdGVzcGFjZUluZGV4ID4gMCAmJiB3aGl0ZXNwYWNlSW5kZXggPCBsaW5lLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGtleWNvZGUgPSBsaW5lLnN1YnN0cmluZygwLCB3aGl0ZXNwYWNlSW5kZXgpO1xuICAgICAgICAgICAgY2FuZGlkYXRlcyA9IGxpbmUuc3Vic3RyaW5nKHdoaXRlc3BhY2VJbmRleCArIDEpLnRyaW0oKTtcbiAgICAgICAgICAgIHVud3JpdHRlblF1aWNrTGlzdC5wdXNoKHsga2V5Y29kZSwgY2FuZGlkYXRlcyB9KTtcbiAgICAgICAgICAgIGNpbi5tYXhOdW1PZktleXMgPSBNYXRoLm1heChjaW4ubWF4TnVtT2ZLZXlzLCBrZXljb2RlLmxlbmd0aCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBoYW5kbGVRdWlja1NlY3Rpb24ocmVhZGVyLCBjaW4pO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUNoYXJEZWZTZWN0aW9uKFxuICByZWFkZXI6IFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcixcbiAgY2luOiBDaW5cbik6IFByb21pc2U8Q2luPiB7XG4gIGNvbnN0IHsgZG9uZSwgdmFsdWUgfTogUmVhZGFibGVTdHJlYW1SZWFkUmVzdWx0PGFueT4gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICBpZiAoZG9uZSkge1xuICAgIHJldHVybiBjaW47XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb25zdCBsaW5lID0gdmFsdWUgYXMgc3RyaW5nO1xuICAgICAgbGV0IGtleWNvZGU6IHN0cmluZywgY2FuZGlkYXRlOiBzdHJpbmc7XG4gICAgICBpZiAobGluZS5sZW5ndGggPiAwICYmIGNpbi51bndyaXR0ZW5DaGFyRGVmTGlzdCkge1xuICAgICAgICBjb25zdCB1bndyaXR0ZW5DaGFyRGVmTGlzdCA9XG4gICAgICAgICAgY2luLnVud3JpdHRlbkNoYXJEZWZMaXN0IGFzIENoYXJEZWZSZWNvcmRbXTtcbiAgICAgICAgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVjaGFyZGVmIGVuZFwiKSkge1xuICAgICAgICAgIHJldHVybiBjaW47XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiICMgXCIpICYmIGxpbmUubGVuZ3RoID4gMykge1xuICAgICAgICAgIGtleWNvZGUgPSBcIiNcIjtcbiAgICAgICAgICBjYW5kaWRhdGUgPSBsaW5lLnN1YnN0cmluZygzKS50cmltKCk7XG4gICAgICAgICAgdW53cml0dGVuQ2hhckRlZkxpc3QucHVzaCh7IGtleWNvZGUsIGNhbmRpZGF0ZSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB3aGl0ZXNwYWNlSW5kZXg6IG51bWJlciA9IGluZGV4T2ZXaGl0ZVNwYWNlKGxpbmUpO1xuICAgICAgICAgIGlmICh3aGl0ZXNwYWNlSW5kZXggPiAwICYmIHdoaXRlc3BhY2VJbmRleCA8IGxpbmUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAga2V5Y29kZSA9IGxpbmUuc3Vic3RyaW5nKDAsIHdoaXRlc3BhY2VJbmRleCk7XG4gICAgICAgICAgICBjYW5kaWRhdGUgPSBsaW5lLnN1YnN0cmluZyh3aGl0ZXNwYWNlSW5kZXggKyAxKS50cmltKCk7XG4gICAgICAgICAgICB1bndyaXR0ZW5DaGFyRGVmTGlzdC5wdXNoKHsga2V5Y29kZSwgY2FuZGlkYXRlIH0pO1xuICAgICAgICAgICAgY2luLm1heE51bU9mS2V5cyA9IE1hdGgubWF4KGNpbi5tYXhOdW1PZktleXMsIGtleWNvZGUubGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IGhhbmRsZUNoYXJEZWZTZWN0aW9uKHJlYWRlciwgY2luKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVTZWN0aW9uKFxuICByZWFkZXI6IFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcixcbiAgY2luOiBDaW5cbik6IFByb21pc2U8Q2luPiB7XG4gIGNvbnN0IHsgZG9uZSwgdmFsdWUgfTogUmVhZGFibGVTdHJlYW1SZWFkUmVzdWx0PGFueT4gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICBpZiAoZG9uZSkge1xuICAgIGlmIChjaW4uY25hbWUubGVuZ3RoID09IDApIHtcbiAgICAgIGNpbi5jbmFtZSA9IGNpbi5lbmFtZTtcbiAgICB9XG4gICAgaWYgKGNpbi5kdXBzZWwgPCAwIHx8IGlzTmFOKGNpbi5kdXBzZWwpKSB7XG4gICAgICBjaW4uZHVwc2VsID0gY2luLnNlbGtleS5sZW5ndGg7XG4gICAgfVxuICAgIGlmICghY2luLmtlZXBLZXlDYXNlKSB7XG4gICAgICBjb25zdCBvbGRLZXluYW1lOiBLZXluYW1lcyA9IGNpbi5rZXluYW1lO1xuICAgICAgY2luLmtleW5hbWUgPSB7fTtcbiAgICAgIGZvciAobGV0IGtleSBpbiBvbGRLZXluYW1lKSB7XG4gICAgICAgIGNpbi5rZXluYW1lW2tleS50b0xvd2VyQ2FzZSgpXSA9IG9sZEtleW5hbWVba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChjaW4udW53cml0dGVuUXVpY2tMaXN0KSB7XG4gICAgICAgIGNvbnN0IHVud3JpdHRlblF1aWNrTGlzdCA9IGNpbi51bndyaXR0ZW5RdWlja0xpc3QgYXMgUXVpY2tSZWNvcmRbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bndyaXR0ZW5RdWlja0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB1bndyaXR0ZW5RdWlja0xpc3RbaV0ua2V5Y29kZSA9XG4gICAgICAgICAgICB1bndyaXR0ZW5RdWlja0xpc3RbaV0ua2V5Y29kZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2luLnVud3JpdHRlbkNoYXJEZWZMaXN0KSB7XG4gICAgICAgIGNvbnN0IHVud3JpdHRlbkNoYXJEZWZMaXN0ID1cbiAgICAgICAgICBjaW4udW53cml0dGVuQ2hhckRlZkxpc3QgYXMgQ2hhckRlZlJlY29yZFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVud3JpdHRlbkNoYXJEZWZMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdW53cml0dGVuQ2hhckRlZkxpc3RbaV0ua2V5Y29kZSA9XG4gICAgICAgICAgICB1bndyaXR0ZW5DaGFyRGVmTGlzdFtpXS5rZXljb2RlLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNpbjtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGxldCBsaW5lID0gdmFsdWUgYXMgc3RyaW5nO1xuICAgICAgbGluZSA9IGhhbmRsZUNvbW1lbnQobGluZSk7XG4gICAgICBpZiAobGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChsaW5lLnN0YXJ0c1dpdGgoXCIlZ2VuX2lucFwiKSkge1xuICAgICAgICAgIC8vIHRlbXBvcmFyaWx5IHVudXNlZCAobWVhbnMgZ2VuZXJhbCBpbnB1dCBtb2R1bGUpXG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJWVuYW1lIFwiKSkge1xuICAgICAgICAgIGNpbi5lbmFtZSA9IGxpbmUuc3Vic3RyaW5nKFwiJWVuYW1lIFwiLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJWNuYW1lIFwiKSkge1xuICAgICAgICAgIGNpbi5jbmFtZSA9IGxpbmUuc3Vic3RyaW5nKFwiJWNuYW1lIFwiLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJXByb21wdCBcIikpIHtcbiAgICAgICAgICBjaW4ucHJvbXB0ID0gbGluZS5zdWJzdHJpbmcoXCIlcHJvbXB0IFwiLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJXNlbGtleSBcIikpIHtcbiAgICAgICAgICBjaW4uc2Vsa2V5ID0gbGluZS5zdWJzdHJpbmcoXCIlc2Vsa2V5IFwiLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJWR1cHNlbCBcIikpIHtcbiAgICAgICAgICBjaW4uZHVwc2VsID0gcGFyc2VJbnQobGluZS5zdWJzdHJpbmcoXCIlZHVwc2VsIFwiLmxlbmd0aCkpOyAvL2UuZy4gJWR1cHNlbCA5XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJWVuZGtleSBcIikpIHtcbiAgICAgICAgICBjaW4uZW5ka2V5ID0gbGluZS5zdWJzdHJpbmcoXCIlZW5ka2V5IFwiLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJXNwYWNlX3N0eWxlIFwiKSkge1xuICAgICAgICAgIGxldCBzcGFjZVN0eWxlID0gcGFyc2VJbnQobGluZS5zdWJzdHJpbmcoXCIlc3BhY2Vfc3R5bGUgXCIubGVuZ3RoKSk7XG4gICAgICAgICAgaWYgKFsxLCAyLCA0XS5pbmRleE9mKHNwYWNlU3R5bGUpIDwgMCkge1xuICAgICAgICAgICAgY2luLnNwYWNlU3R5bGUgPSA0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaW4uc3BhY2VTdHlsZSA9IHNwYWNlU3R5bGUgYXMgU3BhY2VTdHlsZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJWtlZXBfa2V5X2Nhc2VcIikpIHtcbiAgICAgICAgICBjaW4ua2VlcEtleUNhc2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVzeW1ib2xfa2JtXCIpKSB7XG4gICAgICAgICAgY2luLnN5bWJvbEtibSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJXBoYXNlX2F1dG9fc2tpcF9lbmRrZXlcIikpIHtcbiAgICAgICAgICBjaW4ucGhhc2VBdXRvU2tpcEVuZEtleSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJWZsYWdfYXV0b19zZWxlY3RfYnlfcGhyYXNlXCIpKSB7XG4gICAgICAgICAgY2luLmZsYWdBdXRvU2VsZWN0QnlQaGFzZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJWZsYWdfZGlzcF9wYXJ0aWFsX21hdGNoXCIpKSB7XG4gICAgICAgICAgY2luLmZsYWdEaXNwUGFydGlhbE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChsaW5lLnN0YXJ0c1dpdGgoXCIlZmxhZ19kaXNwX2Z1bGxfbWF0Y2hcIikpIHtcbiAgICAgICAgICBjaW4uZmxhZ0Rpc3BGdWxsTWF0Y2ggPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVmbGFnX3ZlcnRpY2FsX3NlbGVjdGlvblwiKSkge1xuICAgICAgICAgIGNpbi5mbGFnVmVydGljYWxTZWxlY3Rpb24gPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVmbGFnX3ByZXNzX2Z1bGxfYXV0b19zZW5kXCIpKSB7XG4gICAgICAgICAgY2luLmZsYWdQcmVzc0Z1bGxBdXRvU2VuZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJWZsYWdfdW5pcXVlX2F1dG9fc2VuZFwiKSkge1xuICAgICAgICAgIGNpbi5mbGFnVW5pcXVlQXV0b1NlbmQgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGxpbmUuc3RhcnRzV2l0aChcIiVrZXluYW1lIGJlZ2luXCIpKSB7XG4gICAgICAgICAgY2luLmtleW5hbWUgPSB7fTtcbiAgICAgICAgICBjaW4gPSBhd2FpdCBoYW5kbGVLZXluYW1lU2VjdGlvbihyZWFkZXIsIGNpbik7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJXF1aWNrIGJlZ2luXCIpKSB7XG4gICAgICAgICAgY2luLnVud3JpdHRlblF1aWNrTGlzdCA9IFtdO1xuICAgICAgICAgIGNpbiA9IGF3YWl0IGhhbmRsZVF1aWNrU2VjdGlvbihyZWFkZXIsIGNpbik7XG4gICAgICAgIH0gZWxzZSBpZiAobGluZS5zdGFydHNXaXRoKFwiJWNoYXJkZWYgYmVnaW5cIikpIHtcbiAgICAgICAgICBjaW4udW53cml0dGVuQ2hhckRlZkxpc3QgPSBbXTtcbiAgICAgICAgICBjaW4gPSBhd2FpdCBoYW5kbGVDaGFyRGVmU2VjdGlvbihyZWFkZXIsIGNpbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IGhhbmRsZVNlY3Rpb24ocmVhZGVyLCBjaW4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2luKGNpbjogQ2luKTogdm9pZCB7XG4gIGlmIChcbiAgICBjaW4uZW5hbWUubGVuZ3RoID09IDAgfHxcbiAgICBPYmplY3Qua2V5cyhjaW4ua2V5bmFtZSkubGVuZ3RoID09IDAgfHxcbiAgICAhY2luLnVud3JpdHRlbkNoYXJEZWZMaXN0XG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIueEoeaViOeahENJTuaqlOahiFwiKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiB3cml0ZVRvREIoY2luOiBDaW4sIGRiTmFtZTogc3RyaW5nKTogUHJvbWlzZTxDaW4+IHtcbiAgLy8gT3BlbiBkYXRhYmFzZSBmaXJzdFxuICBsZXQgZGI6IElEQkRhdGFiYXNlID0gYXdhaXQgbmV3IFByb21pc2U8SURCRGF0YWJhc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgb3BlblJlcTogSURCT3BlbkRCUmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKGRiTmFtZSk7XG4gICAgb3BlblJlcS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJlc29sdmUob3BlblJlcS5yZXN1bHQgYXMgSURCRGF0YWJhc2UpO1xuICAgIH07XG4gICAgb3BlblJlcS5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIC8vIFRPRE8gb25seSBjcmVhdGUgc3RvcmUgd2hlbiBpdCBpcyBub3QgY3JlYXRlZC5cbiAgICAgIC8vIFRPRE8gbWF5IG5lZWQgdG8gY2hlY2sgdmVyc2lvbiBmb3IgZnVydGhlciB1cGRhdGVzLlxuICAgICAgY29uc3QgZGI6IElEQkRhdGFiYXNlID0gb3BlblJlcS5yZXN1bHQ7XG4gICAgICBsZXQgb2JqUzogSURCT2JqZWN0U3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZShcInNldHRpbmdzXCIsIHtcbiAgICAgICAga2V5UGF0aDogXCJuYW1lXCIsXG4gICAgICB9KTtcbiAgICAgIG9ialMgPSBkYi5jcmVhdGVPYmplY3RTdG9yZShcImtleW5hbWVcIiwgeyBrZXlQYXRoOiBcImtleVwiIH0pO1xuICAgICAgb2JqUyA9IGRiLmNyZWF0ZU9iamVjdFN0b3JlKFwicXVpY2tcIiwgeyBrZXlQYXRoOiBcImtleWNvZGVcIiB9KTtcbiAgICAgIG9ialMgPSBkYi5jcmVhdGVPYmplY3RTdG9yZShcImNoYXJkZWZcIiwgeyBhdXRvSW5jcmVtZW50OiB0cnVlIH0pO1xuICAgICAgb2JqUy5jcmVhdGVJbmRleChcImtleWNvZGVcIiwgXCJrZXljb2RlXCIsIHsgdW5pcXVlOiBmYWxzZSB9KTtcbiAgICB9O1xuICAgIG9wZW5SZXEub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoYENhbm5vdCBvcGVuIEluZGV4ZWREQiBmb3IgdGhlIGZpbGUgJHtkYk5hbWV9YCkpO1xuICAgIH07XG4gIH0pO1xuXG4gIGNpbi5kYiA9IGRiO1xuICBjaW4uZGJOYW1lID0gZGJOYW1lO1xuXG4gIC8vIHRydW5jIHRhYmxlcyBpZiB0aGV5IGV4aXN0XG4gIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgdHJhbnNhY3Rpb246IElEQlRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oXG4gICAgICBbXCJzZXR0aW5nc1wiLCBcImtleW5hbWVcIiwgXCJxdWlja1wiLCBcImNoYXJkZWZcIl0sXG4gICAgICBcInJlYWR3cml0ZVwiXG4gICAgKTtcbiAgICB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpLmNsZWFyKCk7XG4gICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoXCJrZXluYW1lXCIpLmNsZWFyKCk7XG4gICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoXCJxdWlja1wiKS5jbGVhcigpO1xuICAgIHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKFwiY2hhcmRlZlwiKS5jbGVhcigpO1xuICAgIHRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfTtcbiAgICB0cmFuc2FjdGlvbi5vbmVycm9yID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkVycm9yIHdoZW4gY2xlYXJpbmcgb2xkIGRhdGEuLi5cIikpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIHdyaXRlIHRvIGRiXG4gIC8vIDEuIHdyaXRlIHNldHRpbmdzXG4gIGxldCBwcm9taXNlU2V0dGluZ3MgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgbGV0IHRyYW5zYWN0aW9uOiBJREJUcmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKFwic2V0dGluZ3NcIiwgXCJyZWFkd3JpdGVcIik7XG4gICAgdHJhbnNhY3Rpb25cbiAgICAgIC5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpXG4gICAgICAuYWRkKHsgbmFtZTogXCIlZW5hbWVcIiwgdmFsdWU6IGNpbi5lbmFtZSB9KTtcbiAgICB0cmFuc2FjdGlvblxuICAgICAgLm9iamVjdFN0b3JlKFwic2V0dGluZ3NcIilcbiAgICAgIC5hZGQoeyBuYW1lOiBcIiVjbmFtZVwiLCB2YWx1ZTogY2luLmNuYW1lIH0pO1xuICAgIHRyYW5zYWN0aW9uXG4gICAgICAub2JqZWN0U3RvcmUoXCJzZXR0aW5nc1wiKVxuICAgICAgLmFkZCh7IG5hbWU6IFwiJXByb21wdFwiLCB2YWx1ZTogY2luLnByb21wdCB9KTtcbiAgICB0cmFuc2FjdGlvblxuICAgICAgLm9iamVjdFN0b3JlKFwic2V0dGluZ3NcIilcbiAgICAgIC5hZGQoeyBuYW1lOiBcIiVzZWxrZXlcIiwgdmFsdWU6IGNpbi5zZWxrZXkgfSk7XG4gICAgdHJhbnNhY3Rpb25cbiAgICAgIC5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpXG4gICAgICAuYWRkKHsgbmFtZTogXCIlZHVwc2VsXCIsIHZhbHVlOiBjaW4uZHVwc2VsIH0pO1xuICAgIHRyYW5zYWN0aW9uXG4gICAgICAub2JqZWN0U3RvcmUoXCJzZXR0aW5nc1wiKVxuICAgICAgLmFkZCh7IG5hbWU6IFwiJWVuZGtleVwiLCB2YWx1ZTogY2luLmVuZGtleSB9KTtcbiAgICB0cmFuc2FjdGlvblxuICAgICAgLm9iamVjdFN0b3JlKFwic2V0dGluZ3NcIilcbiAgICAgIC5hZGQoeyBuYW1lOiBcIiVzcGFjZV9zdHlsZVwiLCB2YWx1ZTogY2luLnNwYWNlU3R5bGUgfSk7XG4gICAgdHJhbnNhY3Rpb25cbiAgICAgIC5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpXG4gICAgICAuYWRkKHsgbmFtZTogXCIla2VlcF9rZXlfY2FzZVwiLCB2YWx1ZTogY2luLmtlZXBLZXlDYXNlIH0pO1xuICAgIHRyYW5zYWN0aW9uXG4gICAgICAub2JqZWN0U3RvcmUoXCJzZXR0aW5nc1wiKVxuICAgICAgLmFkZCh7IG5hbWU6IFwiJXN5bWJvbF9rYm1cIiwgdmFsdWU6IGNpbi5zeW1ib2xLYm0gfSk7XG4gICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoXCJzZXR0aW5nc1wiKS5hZGQoe1xuICAgICAgbmFtZTogXCIlcGhhc2VfYXV0b19za2lwX2VuZGtleVwiLFxuICAgICAgdmFsdWU6IGNpbi5waGFzZUF1dG9Ta2lwRW5kS2V5LFxuICAgIH0pO1xuICAgIHRyYW5zYWN0aW9uLm9iamVjdFN0b3JlKFwic2V0dGluZ3NcIikuYWRkKHtcbiAgICAgIG5hbWU6IFwiJWZsYWdfYXV0b19zZWxlY3RfYnlfcGhyYXNlXCIsXG4gICAgICB2YWx1ZTogY2luLmZsYWdBdXRvU2VsZWN0QnlQaGFzZSxcbiAgICB9KTtcbiAgICB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpLmFkZCh7XG4gICAgICBuYW1lOiBcIiVmbGFnX2Rpc3BfcGFydGlhbF9tYXRjaFwiLFxuICAgICAgdmFsdWU6IGNpbi5mbGFnRGlzcFBhcnRpYWxNYXRjaCxcbiAgICB9KTtcbiAgICB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpLmFkZCh7XG4gICAgICBuYW1lOiBcIiVmbGFnX2Rpc3BfZnVsbF9tYXRjaFwiLFxuICAgICAgdmFsdWU6IGNpbi5mbGFnRGlzcEZ1bGxNYXRjaCxcbiAgICB9KTtcbiAgICB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpLmFkZCh7XG4gICAgICBuYW1lOiBcIiVmbGFnX3ZlcnRpY2FsX3NlbGVjdGlvblwiLFxuICAgICAgdmFsdWU6IGNpbi5mbGFnVmVydGljYWxTZWxlY3Rpb24sXG4gICAgfSk7XG4gICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoXCJzZXR0aW5nc1wiKS5hZGQoe1xuICAgICAgbmFtZTogXCIlZmxhZ19wcmVzc19mdWxsX2F1dG9fc2VuZFwiLFxuICAgICAgdmFsdWU6IGNpbi5mbGFnUHJlc3NGdWxsQXV0b1NlbmQsXG4gICAgfSk7XG4gICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoXCJzZXR0aW5nc1wiKS5hZGQoe1xuICAgICAgbmFtZTogXCIlZmxhZ191bmlxdWVfYXV0b19zZW5kXCIsXG4gICAgICB2YWx1ZTogY2luLmZsYWdVbmlxdWVBdXRvU2VuZCxcbiAgICB9KTtcbiAgICAvLyBcIiVtYXhfbnVtX29mX2tleXNcIjogY3VzdG9taXplZCBzZXR0aW5nXG4gICAgLy8gVXNlZCBhdCBDSU5vdGVwYWQgb25seS5cbiAgICAvLyBDYWxjdWxhdGVkIGZyb20gcXVpY2sgYW5kIGNoYXJkZWYgcmVjb3Jkcy5cbiAgICB0cmFuc2FjdGlvblxuICAgICAgLm9iamVjdFN0b3JlKFwic2V0dGluZ3NcIilcbiAgICAgIC5hZGQoeyBuYW1lOiBcIiVtYXhfbnVtX29mX2tleXNcIiwgdmFsdWU6IGNpbi5tYXhOdW1PZktleXMgfSk7XG4gICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9O1xuICAgIHRyYW5zYWN0aW9uLm9uZXJyb3IgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICByZWplY3QobmV3IEVycm9yKFwiQ2Fubm90IGhhbmRsZSBzZXR0aW5ncy4uLlwiKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gMi4gd3JpdGUga2V5bmFtZXNcbiAgbGV0IHByb21pc2VLZXluYW1lID0gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGlmIChPYmplY3Qua2V5cyhjaW4ua2V5bmFtZSkubGVuZ3RoID09IDApIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRyYW5zYWN0aW9uOiBJREJUcmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKFwia2V5bmFtZVwiLCBcInJlYWR3cml0ZVwiKTtcbiAgICAgIGZvciAobGV0IGtleSBpbiBjaW4ua2V5bmFtZSkge1xuICAgICAgICB0cmFuc2FjdGlvbi5vYmplY3RTdG9yZShcImtleW5hbWVcIikuYWRkKHtcbiAgICAgICAgICBrZXksXG4gICAgICAgICAga2V5bmFtZTogY2luLmtleW5hbWVba2V5XSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgdHJhbnNhY3Rpb24ub25lcnJvciA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkNhbm5vdCBoYW5kbGUga2V5bmFtZSBzZWN0aW9uLi4uXCIpKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbiAgLy8gMy4gd3JpdGUgcXVpY2tcbiAgbGV0IHByb21pc2VRdWljayA9IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAoXG4gICAgICAhY2luLnVud3JpdHRlblF1aWNrTGlzdCB8fFxuICAgICAgKGNpbi51bndyaXR0ZW5RdWlja0xpc3QgYXMgUXVpY2tSZWNvcmRbXSkubGVuZ3RoID09IDBcbiAgICApIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRyYW5zYWN0aW9uOiBJREJUcmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKFwicXVpY2tcIiwgXCJyZWFkd3JpdGVcIik7XG4gICAgICBmb3IgKGxldCB2YWx1ZSBvZiBjaW4udW53cml0dGVuUXVpY2tMaXN0IGFzIFF1aWNrUmVjb3JkW10pIHtcbiAgICAgICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoXCJxdWlja1wiKS5hZGQodmFsdWUpO1xuICAgICAgfVxuICAgICAgdHJhbnNhY3Rpb24ub25jb21wbGV0ZSA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIHRyYW5zYWN0aW9uLm9uZXJyb3IgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJDYW5ub3QgaGFuZGxlIHF1aWNrIHNlY3Rpb24uLi5cIikpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuICAvLyA0LiB3cml0ZSBjaGFyZGVmXG4gIGxldCBwcm9taXNlQ2hhckRlZiA9IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBpZiAoXG4gICAgICAhY2luLnVud3JpdHRlbkNoYXJEZWZMaXN0IHx8XG4gICAgICAoY2luLnVud3JpdHRlbkNoYXJEZWZMaXN0IGFzIENoYXJEZWZSZWNvcmRbXSkubGVuZ3RoID09IDBcbiAgICApIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRyYW5zYWN0aW9uOiBJREJUcmFuc2FjdGlvbiA9IGRiLnRyYW5zYWN0aW9uKFwiY2hhcmRlZlwiLCBcInJlYWR3cml0ZVwiKTtcbiAgICAgIGZvciAobGV0IHZhbHVlIG9mIGNpbi51bndyaXR0ZW5DaGFyRGVmTGlzdCBhcyBDaGFyRGVmUmVjb3JkW10pIHtcbiAgICAgICAgdHJhbnNhY3Rpb24ub2JqZWN0U3RvcmUoXCJjaGFyZGVmXCIpLmFkZCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB0cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgdHJhbnNhY3Rpb24ub25lcnJvciA9IChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkNhbm5vdCBoYW5kbGUgY2hhcmRlZiBzZWN0aW9uLi4uXCIpKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbiAgLy8gNS4gY2xlYXIgcXVpY2sgYW5kIGNoYXJkZWYgYXJyYXlzXG4gIGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICBwcm9taXNlU2V0dGluZ3MsXG4gICAgcHJvbWlzZUtleW5hbWUsXG4gICAgcHJvbWlzZVF1aWNrLFxuICAgIHByb21pc2VDaGFyRGVmLFxuICBdKTtcbiAgZGVsZXRlIGNpbi51bndyaXR0ZW5RdWlja0xpc3Q7XG4gIGRlbGV0ZSBjaW4udW53cml0dGVuQ2hhckRlZkxpc3Q7XG4gIHJldHVybiBjaW47XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRGcm9tU3RyZWFtKFxuICBjaW5JRDogc3RyaW5nLFxuICByZWFkU3RyZWFtOiBSZWFkYWJsZVN0cmVhbVxuKTogUHJvbWlzZTxDaW4+IHtcbiAgY29uc3QgbGluZVJlYWRTdHJlYW06IFJlYWRhYmxlU3RyZWFtID0gcmVhZFN0cmVhbVxuICAgIC5waXBlVGhyb3VnaChuZXcgSlNUZXh0RGVjb2RlclN0cmVhbSgpKVxuICAgIC5waXBlVGhyb3VnaChuZXcgSlNMaW5lU3RyZWFtKCkpO1xuICBjb25zdCByZWFkZXIgPSBsaW5lUmVhZFN0cmVhbS5nZXRSZWFkZXIoKSBhcyBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXI7XG5cbiAgY29uc3QgZGJOYW1lOiBzdHJpbmcgPSBgY2luXyR7Y2luSUR9YDsgLy8gVE9ETzogdXNlIFVSTCByZXNvdXJjZSBuYW1lIGFzIGZpbGVuYW1lIGZvciB4aHIgc3RyZWFtXG5cbiAgbGV0IGNpbiA9IG5ldyBDaW4oKTtcbiAgY2luLmR1cHNlbCA9IC0xOyAvLyBVbnNldCBkdXBzZWwgYmVmb3JlIHJlYWRpbmcgZGF0YSBmcm9tIGNpbiBmaWxlLlxuICBjaW4gPSBhd2FpdCBoYW5kbGVTZWN0aW9uKHJlYWRlciwgY2luKTtcbiAgdmFsaWRhdGVDaW4oY2luKTtcbiAgY2luID0gYXdhaXQgd3JpdGVUb0RCKGNpbiwgZGJOYW1lKTtcbiAgcmV0dXJuIGNpbjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZEZyb21EQihkYk5hbWU6IHN0cmluZyk6IFByb21pc2U8Q2luPiB7XG4gIC8vIE9wZW4gZGF0YWJhc2UgZmlyc3RcbiAgY29uc3QgZGI6IElEQkRhdGFiYXNlID0gYXdhaXQgbmV3IFByb21pc2U8SURCRGF0YWJhc2U+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBvcGVuUmVxOiBJREJPcGVuREJSZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lKTtcbiAgICBvcGVuUmVxLm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgcmVzb2x2ZShvcGVuUmVxLnJlc3VsdCBhcyBJREJEYXRhYmFzZSk7XG4gICAgfTtcbiAgICBvcGVuUmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKGBDYW5ub3Qgb3BlbiBJbmRleGVkREIgZm9yIHRoZSBmaWxlICR7ZGJOYW1lfWApKTtcbiAgICB9O1xuICB9KTtcblxuICBjb25zdCBjaW4gPSBuZXcgQ2luKCk7XG4gIGNpbi5kYiA9IGRiO1xuICBjaW4uZGJOYW1lID0gZGJOYW1lO1xuICAvLyBsb2FkIGZyb20gZGJcbiAgLy8gMS4gcmVhZCBzZXR0aW5nc1xuICBjb25zdCBwcm9taXNlU2V0dGluZ3MgPSBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZGIudHJhbnNhY3Rpb24oXCJzZXR0aW5nc1wiKS5vYmplY3RTdG9yZShcInNldHRpbmdzXCIpLmdldEFsbCgpLm9uc3VjY2VzcyA9XG4gICAgICBmdW5jdGlvbiAoZTogRXZlbnQpIHtcbiAgICAgICAgY29uc3QgcmVjb3JkTGlzdCA9IChldmVudC50YXJnZXQgYXMgSURCUmVxdWVzdCkucmVzdWx0O1xuICAgICAgICBmb3IgKGxldCByZWNvcmQgb2YgcmVjb3JkTGlzdCkge1xuICAgICAgICAgIHN3aXRjaCAocmVjb3JkLm5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCIlZW5hbWVcIjpcbiAgICAgICAgICAgICAgY2luLmVuYW1lID0gcmVjb3JkLnZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIlY25hbWVcIjpcbiAgICAgICAgICAgICAgY2luLmNuYW1lID0gcmVjb3JkLnZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIlcHJvbXB0XCI6XG4gICAgICAgICAgICAgIGNpbi5wcm9tcHQgPSByZWNvcmQudmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIiVzZWxrZXlcIjpcbiAgICAgICAgICAgICAgY2luLnNlbGtleSA9IHJlY29yZC52YWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiJWR1cHNlbFwiOlxuICAgICAgICAgICAgICBjaW4uZHVwc2VsID0gcmVjb3JkLnZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIlZW5ka2V5XCI6XG4gICAgICAgICAgICAgIGNpbi5lbmRrZXkgPSByZWNvcmQudmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIiVzcGFjZV9zdHlsZVwiOlxuICAgICAgICAgICAgICBjaW4uc3BhY2VTdHlsZSA9IHJlY29yZC52YWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiJWtlZXBfa2V5X2Nhc2VcIjpcbiAgICAgICAgICAgICAgY2luLmtlZXBLZXlDYXNlID0gcmVjb3JkLnZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIlc3ltYm9sX2tibVwiOlxuICAgICAgICAgICAgICBjaW4uc3ltYm9sS2JtID0gcmVjb3JkLnZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIlcGhhc2VfYXV0b19za2lwX2VuZGtleVwiOlxuICAgICAgICAgICAgICBjaW4ucGhhc2VBdXRvU2tpcEVuZEtleSA9IHJlY29yZC52YWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiJWZsYWdfYXV0b19zZWxlY3RfYnlfcGhyYXNlXCI6XG4gICAgICAgICAgICAgIGNpbi5mbGFnQXV0b1NlbGVjdEJ5UGhhc2UgPSByZWNvcmQudmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIiVmbGFnX2Rpc3BfcGFydGlhbF9tYXRjaFwiOlxuICAgICAgICAgICAgICBjaW4uZmxhZ0Rpc3BQYXJ0aWFsTWF0Y2ggPSByZWNvcmQudmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIiVmbGFnX2Rpc3BfZnVsbF9tYXRjaFwiOlxuICAgICAgICAgICAgICBjaW4uZmxhZ0Rpc3BGdWxsTWF0Y2ggPSByZWNvcmQudmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIiVmbGFnX3ZlcnRpY2FsX3NlbGVjdGlvblwiOlxuICAgICAgICAgICAgICBjaW4uZmxhZ1ZlcnRpY2FsU2VsZWN0aW9uID0gcmVjb3JkLnZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIlZmxhZ19wcmVzc19mdWxsX2F1dG9fc2VuZFwiOlxuICAgICAgICAgICAgICBjaW4uZmxhZ1ByZXNzRnVsbEF1dG9TZW5kID0gcmVjb3JkLnZhbHVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCIlZmxhZ191bmlxdWVfYXV0b19zZW5kXCI6XG4gICAgICAgICAgICAgIGNpbi5mbGFnVW5pcXVlQXV0b1NlbmQgPSByZWNvcmQudmFsdWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIiVtYXhfbnVtX29mX2tleXNcIjpcbiAgICAgICAgICAgICAgY2luLm1heE51bU9mS2V5cyA9IHJlY29yZC52YWx1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gIH0pO1xuICAvLyAyLiByZWFkIGtleW5hbWVzXG4gIGNvbnN0IHByb21pc2VLZXluYW1lID0gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGRiLnRyYW5zYWN0aW9uKFwia2V5bmFtZVwiKS5vYmplY3RTdG9yZShcImtleW5hbWVcIikuZ2V0QWxsKCkub25zdWNjZXNzID1cbiAgICAgIGZ1bmN0aW9uIChlOiBFdmVudCkge1xuICAgICAgICBjb25zdCByZWNvcmRMaXN0ID0gKGV2ZW50LnRhcmdldCBhcyBJREJSZXF1ZXN0KS5yZXN1bHQ7XG4gICAgICAgIGZvciAobGV0IHJlY29yZCBvZiByZWNvcmRMaXN0KSB7XG4gICAgICAgICAgY2luLmtleW5hbWVbcmVjb3JkLmtleV0gPSByZWNvcmQua2V5bmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICB9KTtcbiAgYXdhaXQgUHJvbWlzZS5hbGwoW3Byb21pc2VTZXR0aW5ncywgcHJvbWlzZUtleW5hbWVdKTtcbiAgcmV0dXJuIGNpbjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZEFsbEZyb21EQigpOiBQcm9taXNlPENpbltdPiB7XG4gIGxldCBkYnMgPSBhd2FpdCBpbmRleGVkREIuZGF0YWJhc2VzKCk7XG4gIGRicyA9IGRicy5maWx0ZXIoXG4gICAgKGRiKSA9PiBkYi5uYW1lLnN0YXJ0c1dpdGgoXCJjaW5fXCIpICYmIGRiLm5hbWUuZW5kc1dpdGgoXCIuY2luXCIpXG4gICk7XG4gIHJldHVybiBQcm9taXNlLmFsbChcbiAgICBkYnMubWFwKGFzeW5jIChkYik6IFByb21pc2U8Q2luPiA9PiBhd2FpdCBsb2FkRnJvbURCKGRiLm5hbWUpKVxuICApO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVGcm9tREIoY2luOiBDaW4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKGNpbi5kYikge1xuICAgIGNpbi5kYi5jbG9zZSgpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNJTiBmaWxlIHdhcyBub3QgbG9hZGVkIHRvIEluZGV4ZWREQiBiZWZvcmUuXCIpO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaWYgKGNpbi5kYk5hbWUpIHtcbiAgICAgIGNvbnN0IGRlbGV0ZVJlcTogSURCT3BlbkRCUmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShcbiAgICAgICAgY2luLmRiTmFtZSBhcyBzdHJpbmdcbiAgICAgICk7XG4gICAgICBkZWxldGVSZXEub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgZGVsZXRlUmVxLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYENhbm5vdCBkZWxldGUgSW5kZXhlZERCIGZvciB0aGUgZmlsZSAke2Npbi5kYk5hbWV9YCkpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkNJTiBmaWxlIHdhcyBub3QgbG9hZGVkIHRvIEluZGV4ZWREQiBiZWZvcmUuXCIpKTtcbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgeyBsb2FkRnJvbVN0cmVhbSwgbG9hZEZyb21EQiwgbG9hZEFsbEZyb21EQiwgZGVsZXRlRnJvbURCIH07XG4iLCJpbXBvcnQgeyBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzIH0gZnJvbSAncG9seXRoZW5lLWNvcmUnO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG5cbiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuXG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbnZhciBjbGFzc2VzID0ge1xuICAvLyBUb29sYmFyXG4gIGNvbXBvbmVudDogXCJwZS10b29sYmFyXCIsXG4gIC8vIHN0YXRlc1xuICBjb21wYWN0OiBcInBlLXRvb2xiYXItLWNvbXBhY3RcIixcbiAgYXBwQmFyOiBcInBlLXRvb2xiYXItLWFwcC1iYXJcIixcbiAgLy8gVG9vbGJhciB0aXRsZVxuICAvLyBlbGVtZW50c1xuICB0aXRsZTogXCJwZS10b29sYmFyX190aXRsZVwiLFxuICAvLyBzdGF0ZXNcbiAgY2VudGVyZWRUaXRsZTogXCJwZS10b29sYmFyX190aXRsZS0tY2VudGVyXCIsXG4gIGluZGVudGVkVGl0bGU6IFwicGUtdG9vbGJhcl9fdGl0bGUtLWluZGVudFwiLFxuICBmdWxsYmxlZWQ6IFwicGUtdG9vbGJhci0tZnVsbGJsZWVkXCIsXG4gIGJvcmRlcjogXCJwZS10b29sYmFyLS1ib3JkZXJcIlxufTtcblxudmFyIF9Ub29sYmFyID0gZnVuY3Rpb24gX1Rvb2xiYXIoX3JlZikge1xuICB2YXIgaCA9IF9yZWYuaCxcbiAgICAgIGEgPSBfcmVmLmEsXG4gICAgICBTaGFkb3cgPSBfcmVmLlNoYWRvdyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImhcIiwgXCJhXCIsIFwiU2hhZG93XCJdKTtcblxuICB2YXIgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7fSwgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyhwcm9wcyksIHByb3BzLnRlc3RJZCAmJiB7XG4gICAgXCJkYXRhLXRlc3QtaWRcIjogcHJvcHMudGVzdElkXG4gIH0sIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLmNvbXBvbmVudCwgcHJvcHMuY29tcGFjdCA/IGNsYXNzZXMuY29tcGFjdCA6IG51bGwsIHByb3BzLmZ1bGxibGVlZCA/IGNsYXNzZXMuZnVsbGJsZWVkIDogbnVsbCwgcHJvcHMuYm9yZGVyID8gY2xhc3Nlcy5ib3JkZXIgOiBudWxsLCBwcm9wcy50b25lID09PSBcImRhcmtcIiA/IFwicGUtZGFyay10b25lXCIgOiBudWxsLCBwcm9wcy50b25lID09PSBcImxpZ2h0XCIgPyBcInBlLWxpZ2h0LXRvbmVcIiA6IG51bGwsIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wc1thW1wiY2xhc3NcIl1dXS5qb2luKFwiIFwiKVxuICB9LCBwcm9wcy5ldmVudHMpO1xuXG4gIHZhciBjb21wb25lbnRDb250ZW50ID0gcHJvcHMuY29udGVudCB8fCBwcm9wcy5jaGlsZHJlbjtcbiAgdmFyIHNoYWRvdyA9IHByb3BzLnNoYWRvd0RlcHRoICE9PSB1bmRlZmluZWQgPyBoKFNoYWRvdywge1xuICAgIHNoYWRvd0RlcHRoOiBwcm9wcy5zaGFkb3dEZXB0aCxcbiAgICBhbmltYXRlZDogdHJ1ZVxuICB9KSA6IG51bGw7XG4gIHZhciBjb250ZW50ID0gW3Byb3BzLmJlZm9yZSwgY29tcG9uZW50Q29udGVudCwgcHJvcHMuYWZ0ZXIsIHNoYWRvd107XG4gIHJldHVybiBoKHByb3BzLmVsZW1lbnQgfHwgXCJkaXZcIiwgY29tcG9uZW50UHJvcHMsIGNvbnRlbnQpO1xufTtcblxudmFyIF9Ub29sYmFyVGl0bGUgPSBmdW5jdGlvbiBfVG9vbGJhclRpdGxlKF9yZWYpIHtcbiAgdmFyIGggPSBfcmVmLmgsXG4gICAgICBhID0gX3JlZi5hLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiaFwiLCBcImFcIl0pO1xuXG4gIHZhciBlbGVtZW50ID0gcHJvcHMuZWxlbWVudCA/IHByb3BzLmVsZW1lbnQgOiBwcm9wcy51cmwgPyBcImFcIiA6IFwiZGl2XCI7XG5cbiAgdmFyIGNvbXBvbmVudFByb3BzID0gX2V4dGVuZHMoe30sIGZpbHRlclN1cHBvcnRlZEF0dHJpYnV0ZXMocHJvcHMpLCBwcm9wcy50ZXN0SWQgJiYge1xuICAgIFwiZGF0YS10ZXN0LWlkXCI6IHByb3BzLnRlc3RJZFxuICB9LCB7XG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy50aXRsZSwgcHJvcHMuaW5kZW50ID8gY2xhc3Nlcy5pbmRlbnRlZFRpdGxlIDogbnVsbCwgcHJvcHMuY2VudGVyID8gY2xhc3Nlcy5jZW50ZXJlZFRpdGxlIDogbnVsbCwgcHJvcHMudG9uZSA9PT0gXCJkYXJrXCIgPyBcInBlLWRhcmstdG9uZVwiIDogbnVsbCwgcHJvcHMudG9uZSA9PT0gXCJsaWdodFwiID8gXCJwZS1saWdodC10b25lXCIgOiBudWxsLCBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHNbYVtcImNsYXNzXCJdXV0uam9pbihcIiBcIilcbiAgfSwgcHJvcHMuZXZlbnRzLCBwcm9wcy51cmwpO1xuXG4gIHZhciBjb250ZW50ID0gcHJvcHMudGV4dCA/IHByb3BzLnRleHQgOiBwcm9wcy5jb250ZW50ID8gcHJvcHMuY29udGVudCA6IHByb3BzLmNoaWxkcmVuO1xuICByZXR1cm4gaChlbGVtZW50LCBjb21wb25lbnRQcm9wcywgY29udGVudCk7XG59O1xuXG5leHBvcnQgeyBfVG9vbGJhciwgX1Rvb2xiYXJUaXRsZSB9O1xuIiwiaW1wb3J0IHsgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLXNoYWRvd1wiLFxuICAvLyBlbGVtZW50cyAgICAgIFxuICBib3R0b21TaGFkb3c6IFwicGUtc2hhZG93X19ib3R0b21cIixcbiAgdG9wU2hhZG93OiBcInBlLXNoYWRvd19fdG9wXCIsXG4gIC8vIHN0YXRlc1xuICBhbmltYXRlZDogXCJwZS1zaGFkb3ctLWFuaW1hdGVkXCIsXG4gIGRlcHRoX246IFwicGUtc2hhZG93LS1kZXB0aC1cIixcbiAgd2l0aF9hY3RpdmVfc2hhZG93OiBcInBlLXdpdGgtYWN0aXZlLXNoYWRvd1wiXG59O1xuXG52YXIgREVGQVVMVF9TSEFET1dfREVQVEggPSAxO1xudmFyIGdldERlcHRoQ2xhc3MgPSBmdW5jdGlvbiBnZXREZXB0aENsYXNzKHNoYWRvd0RlcHRoKSB7XG4gIHJldHVybiBzaGFkb3dEZXB0aCAhPT0gdW5kZWZpbmVkID8gXCJcIi5jb25jYXQoY2xhc3Nlcy5kZXB0aF9uKS5jb25jYXQoTWF0aC5taW4oNSwgc2hhZG93RGVwdGgpKSA6IERFRkFVTFRfU0hBRE9XX0RFUFRIO1xufTtcbnZhciBfU2hhZG93ID0gZnVuY3Rpb24gX1NoYWRvdyhfcmVmKSB7XG4gIHZhciBoID0gX3JlZi5oLFxuICAgICAgYSA9IF9yZWYuYSxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImhcIiwgXCJhXCJdKTtcblxuICB2YXIgZGVwdGhDbGFzcyA9IGdldERlcHRoQ2xhc3MocHJvcHMuc2hhZG93RGVwdGgpO1xuXG4gIHZhciBjb21wb25lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzKHByb3BzKSwgcHJvcHMudGVzdElkICYmIHtcbiAgICBcImRhdGEtdGVzdC1pZFwiOiBwcm9wcy50ZXN0SWRcbiAgfSwge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMuY29tcG9uZW50LCBkZXB0aENsYXNzLCBwcm9wcy5hbmltYXRlZCAmJiBjbGFzc2VzLmFuaW1hdGVkLCBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHNbYVtcImNsYXNzXCJdXV0uam9pbihcIiBcIilcbiAgfSk7XG5cbiAgdmFyIGNvbnRlbnQgPSBbcHJvcHMuYmVmb3JlLCBwcm9wcy5jb250ZW50ID8gcHJvcHMuY29udGVudCA6IHByb3BzLmNoaWxkcmVuLCBwcm9wcy5hZnRlcl07XG4gIHJldHVybiBoKHByb3BzLmVsZW1lbnQgfHwgXCJkaXZcIiwgY29tcG9uZW50UHJvcHMsIFtjb250ZW50LCBoKFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLmJvdHRvbVNoYWRvd10uam9pbihcIiBcIilcbiAgfSksIGgoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMudG9wU2hhZG93XS5qb2luKFwiIFwiKVxuICB9KV0pO1xufTtcblxuZXhwb3J0IHsgX1NoYWRvdywgZ2V0RGVwdGhDbGFzcyB9O1xuIiwiaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcblxuICAgIGlmIChlbnVtZXJhYmxlT25seSkge1xuICAgICAgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciAmJiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdKTtcblxuICBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuO1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcblxuICB2YXIgX3MsIF9lO1xuXG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHtcbiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gIHJldHVybiBhcnIyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG4vKiEgKGMpIDIwMjAgQW5kcmVhIEdpYW1tYXJjaGkgKi9cbnZhciAkc3RyaW5naWZ5ID0gSlNPTi5zdHJpbmdpZnk7XG52YXIgUHJpbWl0aXZlID0gU3RyaW5nOyAvLyBpdCBjb3VsZCBiZSBOdW1iZXJcblxudmFyIHByaW1pdGl2ZSA9ICdzdHJpbmcnOyAvLyBpdCBjb3VsZCBiZSAnbnVtYmVyJ1xudmFyIG9iamVjdCA9ICdvYmplY3QnO1xuXG52YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoXywgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIHNldCA9IGZ1bmN0aW9uIHNldChrbm93biwgaW5wdXQsIHZhbHVlKSB7XG4gIHZhciBpbmRleCA9IFByaW1pdGl2ZShpbnB1dC5wdXNoKHZhbHVlKSAtIDEpO1xuICBrbm93bi5zZXQodmFsdWUsIGluZGV4KTtcbiAgcmV0dXJuIGluZGV4O1xufTtcbnZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUsIHJlcGxhY2VyLCBzcGFjZSkge1xuICB2YXIgJCA9IHJlcGxhY2VyICYmIF90eXBlb2YocmVwbGFjZXIpID09PSBvYmplY3QgPyBmdW5jdGlvbiAoaywgdikge1xuICAgIHJldHVybiBrID09PSAnJyB8fCAtMSA8IHJlcGxhY2VyLmluZGV4T2YoaykgPyB2IDogdm9pZCAwO1xuICB9IDogcmVwbGFjZXIgfHwgbm9vcDtcbiAgdmFyIGtub3duID0gbmV3IE1hcCgpO1xuICB2YXIgaW5wdXQgPSBbXTtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICB2YXIgaSA9ICtzZXQoa25vd24sIGlucHV0LCAkLmNhbGwoe1xuICAgICcnOiB2YWx1ZVxuICB9LCAnJywgdmFsdWUpKTtcbiAgdmFyIGZpcnN0UnVuID0gIWk7XG5cbiAgd2hpbGUgKGkgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICBmaXJzdFJ1biA9IHRydWU7XG4gICAgb3V0cHV0W2ldID0gJHN0cmluZ2lmeShpbnB1dFtpKytdLCByZXBsYWNlLCBzcGFjZSk7XG4gIH1cblxuICByZXR1cm4gJ1snICsgb3V0cHV0LmpvaW4oJywnKSArICddJztcblxuICBmdW5jdGlvbiByZXBsYWNlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoZmlyc3RSdW4pIHtcbiAgICAgIGZpcnN0UnVuID0gIWZpcnN0UnVuO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHZhciBhZnRlciA9ICQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcblxuICAgIHN3aXRjaCAoX3R5cGVvZihhZnRlcikpIHtcbiAgICAgIGNhc2Ugb2JqZWN0OlxuICAgICAgICBpZiAoYWZ0ZXIgPT09IG51bGwpIHJldHVybiBhZnRlcjtcblxuICAgICAgY2FzZSBwcmltaXRpdmU6XG4gICAgICAgIHJldHVybiBrbm93bi5nZXQoYWZ0ZXIpIHx8IHNldChrbm93biwgaW5wdXQsIGFmdGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWZ0ZXI7XG4gIH1cbn07XG5cbnZhciBjdXJyZW50U3RhdGU7XG52YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLmJpbmQoRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwpO1xuXG52YXIgc2NoZWR1bGVSZW5kZXIgPSBmdW5jdGlvbiBzY2hlZHVsZVJlbmRlcigpIHtcbiAgcmV0dXJuICgvLyBDYWxsIG0gd2l0aGluIHRoZSBmdW5jdGlvbiBib2R5IHNvIGVudmlyb25tZW50cyB3aXRoIGEgZ2xvYmFsIGluc3RhbmNlIG9mIG0gKGxpa2UgZmxlbXMuaW8pIGRvbid0IGNvbXBsYWluXG4gICAgbS5yZWRyYXcoKVxuICApO1xufTtcblxudmFyIHVwZGF0ZURlcHMgPSBmdW5jdGlvbiB1cGRhdGVEZXBzKGRlcHMpIHtcbiAgdmFyIHN0YXRlID0gY3VycmVudFN0YXRlO1xuICB2YXIgZGVwc0luZGV4ID0gc3RhdGUuZGVwc0luZGV4O1xuICBzdGF0ZS5kZXBzSW5kZXggKz0gMTtcbiAgdmFyIHByZXZEZXBzID0gc3RhdGUuZGVwc1N0YXRlc1tkZXBzSW5kZXhdIHx8IFtdO1xuICB2YXIgc2hvdWxkUmVjb21wdXRlID0gZGVwcyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSAvLyBBbHdheXMgY29tcHV0ZVxuICA6IEFycmF5LmlzQXJyYXkoZGVwcykgPyBkZXBzLmxlbmd0aCA+IDAgPyAhZGVwcy5ldmVyeShmdW5jdGlvbiAoeCwgaSkge1xuICAgIHJldHVybiB4ID09PSBwcmV2RGVwc1tpXTtcbiAgfSkgLy8gT25seSBjb21wdXRlIHdoZW4gb25lIG9mIHRoZSBkZXBzIGhhcyBjaGFuZ2VkXG4gIDogIXN0YXRlLnNldHVwIC8vIEVtcHR5IGFycmF5OiBvbmx5IGNvbXB1dGUgYXQgbW91bnRcbiAgOiBmYWxzZTsgLy8gSW52YWxpZCB2YWx1ZSwgZG8gbm90aGluZ1xuXG4gIGlmIChkZXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICBzdGF0ZS5kZXBzU3RhdGVzW2RlcHNJbmRleF0gPSBkZXBzO1xuICB9XG5cbiAgcmV0dXJuIHNob3VsZFJlY29tcHV0ZTtcbn07XG5cbnZhciBlZmZlY3QgPSBmdW5jdGlvbiBlZmZlY3QoKSB7XG4gIHZhciBpc0FzeW5jID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgZGVwcykge1xuICAgIHZhciBzdGF0ZSA9IGN1cnJlbnRTdGF0ZTtcbiAgICB2YXIgc2hvdWxkUmVjb21wdXRlID0gdXBkYXRlRGVwcyhkZXBzKTtcblxuICAgIGlmIChzaG91bGRSZWNvbXB1dGUpIHtcbiAgICAgIHZhciBkZXBzSW5kZXggPSBzdGF0ZS5kZXBzSW5kZXg7XG5cbiAgICAgIHZhciBydW5DYWxsYmFja0ZuID0gZnVuY3Rpb24gcnVuQ2FsbGJhY2tGbigpIHtcbiAgICAgICAgdmFyIHRlYXJkb3duID0gZm4oKTsgLy8gQSBjYWxsYmFjayBtYXkgcmV0dXJuIGEgZnVuY3Rpb24uIElmIGFueSwgYWRkIGl0IHRvIHRoZSB0ZWFyZG93bnM6XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0ZWFyZG93biA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIC8vIFN0b3JlIHRoaXMgdGhpcyBmdW5jdGlvbiB0byBiZSBjYWxsZWQgYXQgY2xlYW51cCBhbmQgdW5tb3VudFxuICAgICAgICAgIHN0YXRlLnRlYXJkb3ducy5zZXQoZGVwc0luZGV4LCB0ZWFyZG93bik7IC8vIEF0IHVubW91bnQsIGNhbGwgcmUtcmVuZGVyIGF0IGxlYXN0IG9uY2VcblxuICAgICAgICAgIHN0YXRlLnRlYXJkb3ducy5zZXQoJ18nLCBzY2hlZHVsZVJlbmRlcik7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIEZpcnN0IGNsZWFuIHVwIGFueSBwcmV2aW91cyBjbGVhbnVwIGZ1bmN0aW9uXG5cblxuICAgICAgdmFyIHRlYXJkb3duID0gc3RhdGUudGVhcmRvd25zLmdldChkZXBzSW5kZXgpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHRlYXJkb3duID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGVhcmRvd24oKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc3RhdGUudGVhcmRvd25zW1wiZGVsZXRlXCJdKGRlcHNJbmRleCk7XG4gICAgICB9XG5cbiAgICAgIHN0YXRlLnVwZGF0ZXMucHVzaChpc0FzeW5jID8gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc29sdmUpO1xuICAgICAgICB9KS50aGVuKHJ1bkNhbGxiYWNrRm4pO1xuICAgICAgfSA6IHJ1bkNhbGxiYWNrRm4pO1xuICAgIH1cbiAgfTtcbn07XG5cbnZhciB1cGRhdGVTdGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKGluaXRpYWxTdGF0ZSwgbmV3VmFsdWVGbikge1xuICB2YXIgc3RhdGUgPSBjdXJyZW50U3RhdGU7XG4gIHZhciBpbmRleCA9IHN0YXRlLnN0YXRlc0luZGV4O1xuICBzdGF0ZS5zdGF0ZXNJbmRleCArPSAxO1xuXG4gIGlmICghc3RhdGUuc2V0dXApIHtcbiAgICBzdGF0ZS5zdGF0ZXNbaW5kZXhdID0gaW5pdGlhbFN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIFtzdGF0ZS5zdGF0ZXNbaW5kZXhdLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IHN0YXRlLnN0YXRlc1tpbmRleF07XG4gICAgdmFyIG5ld1ZhbHVlID0gbmV3VmFsdWVGbiA/IG5ld1ZhbHVlRm4odmFsdWUsIGluZGV4KSA6IHZhbHVlO1xuICAgIHN0YXRlLnN0YXRlc1tpbmRleF0gPSBuZXdWYWx1ZTtcblxuICAgIGlmIChzdHJpbmdpZnkobmV3VmFsdWUpICE9PSBzdHJpbmdpZnkocHJldmlvdXNWYWx1ZSkpIHtcbiAgICAgIHNjaGVkdWxlUmVuZGVyKCk7IC8vIENhbGxpbmcgcmVkcmF3IG11bHRpcGxlIHRpbWVzOiBNaXRocmlsIHdpbGwgZHJvcCBleHRyYW5lb3VzIHJlZHJhdyBjYWxscywgc28gcGVyZm9ybWFuY2Ugc2hvdWxkIG5vdCBiZSBhbiBpc3N1ZVxuICAgIH1cbiAgfSwgaW5kZXhdO1xufTtcblxudmFyIHVzZVN0YXRlID0gZnVuY3Rpb24gdXNlU3RhdGUoaW5pdGlhbFN0YXRlKSB7XG4gIHZhciBzdGF0ZSA9IGN1cnJlbnRTdGF0ZTtcblxuICB2YXIgbmV3VmFsdWVGbiA9IGZ1bmN0aW9uIG5ld1ZhbHVlRm4odmFsdWUsIGluZGV4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IHZhbHVlKHN0YXRlLnN0YXRlc1tpbmRleF0sIGluZGV4KSA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiB1cGRhdGVTdGF0ZShpbml0aWFsU3RhdGUsIG5ld1ZhbHVlRm4pO1xufTtcblxudmFyIHVzZUVmZmVjdCA9IGVmZmVjdCh0cnVlKTtcbnZhciB1c2VMYXlvdXRFZmZlY3QgPSBlZmZlY3QoKTtcblxuZnVuY3Rpb24gdXNlUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsU3RhdGUsIGluaXRGbikge1xuICB2YXIgc3RhdGUgPSBjdXJyZW50U3RhdGU7IC8vIEZyb20gdGhlIFJlYWN0IGRvY3M6IFlvdSBjYW4gYWxzbyBjcmVhdGUgdGhlIGluaXRpYWwgc3RhdGUgbGF6aWx5LiBUbyBkbyB0aGlzLCB5b3UgY2FuIHBhc3MgYW4gaW5pdCBmdW5jdGlvbiBhcyB0aGUgdGhpcmQgYXJndW1lbnQuIFRoZSBpbml0aWFsIHN0YXRlIHdpbGwgYmUgc2V0IHRvIGluaXQoaW5pdGlhbFZhbHVlKS5cblxuICB2YXIgaW5pdFZhbHVlID0gIXN0YXRlLnNldHVwICYmIGluaXRGbiA/IGluaXRGbihpbml0aWFsU3RhdGUpIDogaW5pdGlhbFN0YXRlO1xuXG4gIHZhciBnZXRWYWx1ZURpc3BhdGNoID0gZnVuY3Rpb24gZ2V0VmFsdWVEaXNwYXRjaCgpIHtcbiAgICB2YXIgX3VwZGF0ZVN0YXRlID0gdXBkYXRlU3RhdGUoaW5pdFZhbHVlKSxcbiAgICAgICAgX3VwZGF0ZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91cGRhdGVTdGF0ZSwgMyksXG4gICAgICAgIHZhbHVlID0gX3VwZGF0ZVN0YXRlMlswXSxcbiAgICAgICAgc2V0VmFsdWUgPSBfdXBkYXRlU3RhdGUyWzFdLFxuICAgICAgICBpbmRleCA9IF91cGRhdGVTdGF0ZTJbMl07XG5cbiAgICB2YXIgZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICAgIHZhciBwcmV2aW91c1ZhbHVlID0gc3RhdGUuc3RhdGVzW2luZGV4XTtcbiAgICAgIHJldHVybiBzZXRWYWx1ZSggLy8gTmV4dCBzdGF0ZTpcbiAgICAgIHJlZHVjZXIocHJldmlvdXNWYWx1ZSwgYWN0aW9uKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBbdmFsdWUsIGRpc3BhdGNoXTtcbiAgfTtcblxuICByZXR1cm4gZ2V0VmFsdWVEaXNwYXRjaCgpO1xufVxuXG52YXIgdXNlUmVmID0gZnVuY3Rpb24gdXNlUmVmKGluaXRpYWxWYWx1ZSkge1xuICAvLyBBIHJlZiBpcyBhIHBlcnNpc3RlZCBvYmplY3QgdGhhdCB3aWxsIG5vdCBiZSB1cGRhdGVkLCBzbyBpdCBoYXMgbm8gc2V0dGVyXG4gIHZhciBfdXBkYXRlU3RhdGUzID0gdXBkYXRlU3RhdGUoe1xuICAgIGN1cnJlbnQ6IGluaXRpYWxWYWx1ZVxuICB9KSxcbiAgICAgIF91cGRhdGVTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXBkYXRlU3RhdGUzLCAxKSxcbiAgICAgIHZhbHVlID0gX3VwZGF0ZVN0YXRlNFswXTtcblxuICByZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgdXNlTWVtbyA9IGZ1bmN0aW9uIHVzZU1lbW8oZm4sIGRlcHMpIHtcbiAgdmFyIHN0YXRlID0gY3VycmVudFN0YXRlO1xuICB2YXIgc2hvdWxkUmVjb21wdXRlID0gdXBkYXRlRGVwcyhkZXBzKTtcblxuICB2YXIgX3JlZiA9ICFzdGF0ZS5zZXR1cCA/IHVwZGF0ZVN0YXRlKGZuKCkpIDogdXBkYXRlU3RhdGUoKSxcbiAgICAgIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICBtZW1vaXplZCA9IF9yZWYyWzBdLFxuICAgICAgc2V0TWVtb2l6ZWQgPSBfcmVmMlsxXTtcblxuICBpZiAoc3RhdGUuc2V0dXAgJiYgc2hvdWxkUmVjb21wdXRlKSB7XG4gICAgc2V0TWVtb2l6ZWQoZm4oKSk7XG4gIH1cblxuICByZXR1cm4gbWVtb2l6ZWQ7XG59O1xuXG52YXIgdXNlQ2FsbGJhY2sgPSBmdW5jdGlvbiB1c2VDYWxsYmFjayhjYWxsYmFjaywgZGVwcykge1xuICByZXR1cm4gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9LCBkZXBzKTtcbn07XG5cbnZhciB3aXRoSG9va3MgPSBmdW5jdGlvbiB3aXRoSG9va3MocmVuZGVyRnVuY3Rpb24sIGluaXRpYWxBdHRycykge1xuICB2YXIgaW5pdCA9IGZ1bmN0aW9uIGluaXQodm5vZGUpIHtcbiAgICBfZXh0ZW5kcyh2bm9kZS5zdGF0ZSwge1xuICAgICAgc2V0dXA6IGZhbHNlLFxuICAgICAgc3RhdGVzOiBbXSxcbiAgICAgIHN0YXRlc0luZGV4OiAwLFxuICAgICAgZGVwc1N0YXRlczogW10sXG4gICAgICBkZXBzSW5kZXg6IDAsXG4gICAgICB1cGRhdGVzOiBbXSxcbiAgICAgIGNsZWFudXBzOiBuZXcgTWFwKCksXG4gICAgICB0ZWFyZG93bnM6IG5ldyBNYXAoKSAvLyBLZWVwIHRyYWNrIG9mIHRlYXJkb3ducyBldmVuIHdoZW4gdGhlIHVwZGF0ZSB3YXMgcnVuIG9ubHkgb25jZVxuXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSh2bm9kZSkge1xuICAgIHZhciBwcmV2U3RhdGUgPSBjdXJyZW50U3RhdGU7XG4gICAgY3VycmVudFN0YXRlID0gdm5vZGUuc3RhdGU7XG5cbiAgICB0cnkge1xuICAgICAgdm5vZGUuc3RhdGUudXBkYXRlcy5mb3JFYWNoKGNhbGwpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBfZXh0ZW5kcyh2bm9kZS5zdGF0ZSwge1xuICAgICAgICBzZXR1cDogdHJ1ZSxcbiAgICAgICAgdXBkYXRlczogW10sXG4gICAgICAgIGRlcHNJbmRleDogMCxcbiAgICAgICAgc3RhdGVzSW5kZXg6IDBcbiAgICAgIH0pO1xuXG4gICAgICBjdXJyZW50U3RhdGUgPSBwcmV2U3RhdGU7XG4gICAgfVxuICB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblxuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIodm5vZGUpIHtcbiAgICB2YXIgcHJldlN0YXRlID0gY3VycmVudFN0YXRlO1xuICAgIGN1cnJlbnRTdGF0ZSA9IHZub2RlLnN0YXRlO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiByZW5kZXJGdW5jdGlvbihfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgaW5pdGlhbEF0dHJzKSwgdm5vZGUuYXR0cnMpLCB7fSwge1xuICAgICAgICB2bm9kZTogdm5vZGUsXG4gICAgICAgIGNoaWxkcmVuOiB2bm9kZS5jaGlsZHJlblxuICAgICAgfSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50U3RhdGUgPSBwcmV2U3RhdGU7XG4gICAgfVxuICB9O1xuXG4gIHZhciB0ZWFyZG93biA9IGZ1bmN0aW9uIHRlYXJkb3duKHZub2RlKSB7XG4gICAgdmFyIHByZXZTdGF0ZSA9IGN1cnJlbnRTdGF0ZTtcbiAgICBjdXJyZW50U3RhdGUgPSB2bm9kZS5zdGF0ZTtcblxuICAgIHRyeSB7XG4gICAgICB2bm9kZS5zdGF0ZS50ZWFyZG93bnMuZm9yRWFjaChjYWxsKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFN0YXRlID0gcHJldlN0YXRlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG9uaW5pdDogaW5pdCxcbiAgICBvbmNyZWF0ZTogdXBkYXRlLFxuICAgIG9udXBkYXRlOiB1cGRhdGUsXG4gICAgdmlldzogcmVuZGVyLFxuICAgIG9ucmVtb3ZlOiB0ZWFyZG93blxuICB9O1xufTtcblxudmFyIGh0bWxBdHRyaWJ1dGVzID0ge1xuICBhY2NlcHQ6IFwiYWNjZXB0XCIsXG4gIGFjY2VwdGNoYXJzZXQ6IFwiYWNjZXB0Y2hhcnNldFwiLFxuICBhY2Nlc3NrZXk6IFwiYWNjZXNza2V5XCIsXG4gIGFjdGlvbjogXCJhY3Rpb25cIixcbiAgYWxsb3dmdWxsc2NyZWVuOiBcImFsbG93ZnVsbHNjcmVlblwiLFxuICBhbGxvd3RyYW5zcGFyZW5jeTogXCJhbGxvd3RyYW5zcGFyZW5jeVwiLFxuICBhbHQ6IFwiYWx0XCIsXG4gIGFzeW5jOiBcImFzeW5jXCIsXG4gIGF1dG9jb21wbGV0ZTogXCJhdXRvY29tcGxldGVcIixcbiAgYXV0b2ZvY3VzOiBcImF1dG9mb2N1c1wiLFxuICBhdXRvcGxheTogXCJhdXRvcGxheVwiLFxuICBjYXB0dXJlOiBcImNhcHR1cmVcIixcbiAgY2VsbHBhZGRpbmc6IFwiY2VsbHBhZGRpbmdcIixcbiAgY2VsbHNwYWNpbmc6IFwiY2VsbHNwYWNpbmdcIixcbiAgY2hhbGxlbmdlOiBcImNoYWxsZW5nZVwiLFxuICBjaGFyc2V0OiBcImNoYXJzZXRcIixcbiAgY2hlY2tlZDogXCJjaGVja2VkXCIsXG4gIFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIixcbiAgY2xhc3NpZDogXCJjbGFzc2lkXCIsXG4gIGNsYXNzbmFtZTogXCJjbGFzc05hbWVcIixcbiAgLy8gU3BlY2lhbCBjYXNlOlxuICBjbGFzc05hbWU6IFwiY2xhc3NOYW1lXCIsXG4gIGNvbHNwYW46IFwiY29sc3BhblwiLFxuICBjb2xzOiBcImNvbHNcIixcbiAgY29udGVudDogXCJjb250ZW50XCIsXG4gIGNvbnRlbnRlZGl0YWJsZTogXCJjb250ZW50ZWRpdGFibGVcIixcbiAgY29udGV4dG1lbnU6IFwiY29udGV4dG1lbnVcIixcbiAgY29udHJvbHM6IFwiY29udHJvbHNcIixcbiAgY29vcmRzOiBcImNvb3Jkc1wiLFxuICBjcm9zc29yaWdpbjogXCJjcm9zc29yaWdpblwiLFxuICBkYXRhOiBcImRhdGFcIixcbiAgZGF0ZXRpbWU6IFwiZGF0ZXRpbWVcIixcbiAgXCJkZWZhdWx0XCI6IFwiZGVmYXVsdFwiLFxuICBkZWZlcjogXCJkZWZlclwiLFxuICBkaXI6IFwiZGlyXCIsXG4gIGRpc2FibGVkOiBcImRpc2FibGVkXCIsXG4gIGRvd25sb2FkOiBcImRvd25sb2FkXCIsXG4gIGRyYWdnYWJsZTogXCJkcmFnZ2FibGVcIixcbiAgZW5jdHlwZTogXCJlbmN0eXBlXCIsXG4gIFwiZm9yXCI6IFwiZm9yXCIsXG4gIGZvcm06IFwiZm9ybVwiLFxuICBmb3JtYWN0aW9uOiBcImZvcm1hY3Rpb25cIixcbiAgZm9ybWVuY3R5cGU6IFwiZm9ybWVuY3R5cGVcIixcbiAgZm9ybW1ldGhvZDogXCJmb3JtbWV0aG9kXCIsXG4gIGZvcm1ub3ZhbGlkYXRlOiBcImZvcm1ub3ZhbGlkYXRlXCIsXG4gIGZvcm10YXJnZXQ6IFwiZm9ybXRhcmdldFwiLFxuICBmcmFtZWJvcmRlcjogXCJmcmFtZWJvcmRlclwiLFxuICBoZWFkZXJzOiBcImhlYWRlcnNcIixcbiAgaGVpZ2h0OiBcImhlaWdodFwiLFxuICBoaWRkZW46IFwiaGlkZGVuXCIsXG4gIGhpZ2g6IFwiaGlnaFwiLFxuICBocmVmOiBcImhyZWZcIixcbiAgaHJlZmxhbmc6IFwiaHJlZmxhbmdcIixcbiAgaHRtbGZvcjogXCJodG1sZm9yXCIsXG4gIGh0dHBlcXVpdjogXCJodHRwZXF1aXZcIixcbiAgaWNvbjogXCJpY29uXCIsXG4gIGlkOiBcImlkXCIsXG4gIGlucHV0bW9kZTogXCJpbnB1dG1vZGVcIixcbiAgaW50ZWdyaXR5OiBcImludGVncml0eVwiLFxuICBpczogXCJpc1wiLFxuICBrZXlwYXJhbXM6IFwia2V5cGFyYW1zXCIsXG4gIGtleXR5cGU6IFwia2V5dHlwZVwiLFxuICBraW5kOiBcImtpbmRcIixcbiAgbGFiZWw6IFwibGFiZWxcIixcbiAgbGFuZzogXCJsYW5nXCIsXG4gIGxpc3Q6IFwibGlzdFwiLFxuICBsb29wOiBcImxvb3BcIixcbiAgbG93OiBcImxvd1wiLFxuICBtYW5pZmVzdDogXCJtYW5pZmVzdFwiLFxuICBtYXJnaW5oZWlnaHQ6IFwibWFyZ2luaGVpZ2h0XCIsXG4gIG1hcmdpbndpZHRoOiBcIm1hcmdpbndpZHRoXCIsXG4gIG1heDogXCJtYXhcIixcbiAgbWF4bGVuZ3RoOiBcIm1heGxlbmd0aFwiLFxuICBtZWRpYTogXCJtZWRpYVwiLFxuICBtZWRpYWdyb3VwOiBcIm1lZGlhZ3JvdXBcIixcbiAgbWV0aG9kOiBcIm1ldGhvZFwiLFxuICBtaW46IFwibWluXCIsXG4gIG1pbmxlbmd0aDogXCJtaW5sZW5ndGhcIixcbiAgbXVsdGlwbGU6IFwibXVsdGlwbGVcIixcbiAgbXV0ZWQ6IFwibXV0ZWRcIixcbiAgbmFtZTogXCJuYW1lXCIsXG4gIG5vdmFsaWRhdGU6IFwibm92YWxpZGF0ZVwiLFxuICBub25jZTogXCJub25jZVwiLFxuICBvbmJsdXI6IFwib25ibHVyXCIsXG4gIG9uY2hhbmdlOiBcIm9uY2hhbmdlXCIsXG4gIG9uY2xpY2s6IFwib25jbGlja1wiLFxuICBvbmZvY3VzOiBcIm9uZm9jdXNcIixcbiAgb25pbnB1dDogXCJvbmlucHV0XCIsXG4gIG9ua2V5ZG93bjogXCJvbmtleWRvd25cIixcbiAgb25rZXl1cDogXCJvbmtleXVwXCIsXG4gIG9ubW91c2Vkb3duOiBcIm9ubW91c2Vkb3duXCIsXG4gIG9ubW91c2VvdXQ6IFwib25tb3VzZW91dFwiLFxuICBvbm1vdXNlb3ZlcjogXCJvbm1vdXNlb3ZlclwiLFxuICBvbm1vdXNldXA6IFwib25tb3VzZXVwXCIsXG4gIG9uc2Nyb2xsOiBcIm9uc2Nyb2xsXCIsXG4gIG9uc3VibWl0OiBcIm9uc3VibWl0XCIsXG4gIG9udG91Y2hlbmQ6IFwib250b3VjaGVuZFwiLFxuICBvbnRvdWNobW92ZTogXCJvbnRvdWNobW92ZVwiLFxuICBvbnRvdWNoc3RhcnQ6IFwib250b3VjaHN0YXJ0XCIsXG4gIG9wZW46IFwib3BlblwiLFxuICBvcHRpbXVtOiBcIm9wdGltdW1cIixcbiAgcGF0dGVybjogXCJwYXR0ZXJuXCIsXG4gIHBsYWNlaG9sZGVyOiBcInBsYWNlaG9sZGVyXCIsXG4gIHBvc3RlcjogXCJwb3N0ZXJcIixcbiAgcHJlbG9hZDogXCJwcmVsb2FkXCIsXG4gIHJhZGlvZ3JvdXA6IFwicmFkaW9ncm91cFwiLFxuICByZWFkb25seTogXCJyZWFkb25seVwiLFxuICByZWw6IFwicmVsXCIsXG4gIHJlcXVpcmVkOiBcInJlcXVpcmVkXCIsXG4gIHJldmVyc2VkOiBcInJldmVyc2VkXCIsXG4gIHJvbGU6IFwicm9sZVwiLFxuICByb3dzcGFuOiBcInJvd3NwYW5cIixcbiAgcm93czogXCJyb3dzXCIsXG4gIHNhbmRib3g6IFwic2FuZGJveFwiLFxuICBzY29wZTogXCJzY29wZVwiLFxuICBzY29wZWQ6IFwic2NvcGVkXCIsXG4gIHNjcm9sbGluZzogXCJzY3JvbGxpbmdcIixcbiAgc2VhbWxlc3M6IFwic2VhbWxlc3NcIixcbiAgc2VsZWN0ZWQ6IFwic2VsZWN0ZWRcIixcbiAgc2hhcGU6IFwic2hhcGVcIixcbiAgc2l6ZTogXCJzaXplXCIsXG4gIHNpemVzOiBcInNpemVzXCIsXG4gIHNwYW46IFwic3BhblwiLFxuICBzcGVsbGNoZWNrOiBcInNwZWxsY2hlY2tcIixcbiAgc3JjOiBcInNyY1wiLFxuICBzcmNkb2M6IFwic3JjZG9jXCIsXG4gIHNyY2xhbmc6IFwic3JjbGFuZ1wiLFxuICBzcmNzZXQ6IFwic3Jjc2V0XCIsXG4gIHN0YXJ0OiBcInN0YXJ0XCIsXG4gIHN0ZXA6IFwic3RlcFwiLFxuICBzdHlsZTogXCJzdHlsZVwiLFxuICBzdW1tYXJ5OiBcInN1bW1hcnlcIixcbiAgdGFiaW5kZXg6IFwidGFiaW5kZXhcIixcbiAgdGFyZ2V0OiBcInRhcmdldFwiLFxuICB0aXRsZTogXCJ0aXRsZVwiLFxuICB0eXBlOiBcInR5cGVcIixcbiAgdXNlbWFwOiBcInVzZW1hcFwiLFxuICB2YWx1ZTogXCJ2YWx1ZVwiLFxuICB3aWR0aDogXCJ3aWR0aFwiLFxuICB3bW9kZTogXCJ3bW9kZVwiLFxuICB3cmFwOiBcIndyYXBcIlxufTtcblxudmFyIGEgPSBodG1sQXR0cmlidXRlcztcbnZhciBoID0gbSB8fCB7fTtcbnZhciB0cnVzdCA9IGgudHJ1c3Q7XG5cbmgudHJ1c3QgPSBmdW5jdGlvbiAoaHRtbCwgd3JhcHBlcikge1xuICByZXR1cm4gd3JhcHBlciA/IG0od3JhcHBlciwgdHJ1c3QoaHRtbCkpIDogdHJ1c3QoaHRtbCk7XG59O1xuXG5oLmRpc3BsYXlOYW1lID0gXCJtaXRocmlsXCI7XG5oLmZyYWdtZW50ID0gbS5mcmFnbWVudDtcbnZhciBqc3ggPSBtO1xudmFyIGdldFJlZiA9IGZ1bmN0aW9uIGdldFJlZihmbikge1xuICByZXR1cm4ge1xuICAgIG9uY3JlYXRlOiBmdW5jdGlvbiBvbmNyZWF0ZSh2bm9kZSkge1xuICAgICAgcmV0dXJuIGZuKHZub2RlLmRvbSk7XG4gICAgfVxuICB9O1xufTtcbnZhciBjYXN0ID0gd2l0aEhvb2tzO1xuXG5leHBvcnQgeyBhLCBjYXN0LCBnZXRSZWYsIGgsIGpzeCwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0LCB1c2VNZW1vLCB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZVN0YXRlIH07XG4iLCJpbXBvcnQgeyBfU2hhZG93IH0gZnJvbSAncG9seXRoZW5lLWNvcmUtc2hhZG93JztcbmltcG9ydCB7IGNhc3QsIGgsIGEgfSBmcm9tICdjeWFuby1taXRocmlsJztcblxudmFyIFNoYWRvdyA9IGNhc3QoX1NoYWRvdywge1xuICBoOiBoLFxuICBhOiBhXG59KTtcblNoYWRvd1tcImRpc3BsYXlOYW1lXCJdID0gXCJTaGFkb3dcIjtcblxuZXhwb3J0IHsgU2hhZG93IH07XG4iLCJpbXBvcnQgeyBfVG9vbGJhciwgX1Rvb2xiYXJUaXRsZSB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLXRvb2xiYXInO1xuaW1wb3J0IHsgU2hhZG93IH0gZnJvbSAncG9seXRoZW5lLW1pdGhyaWwtc2hhZG93JztcbmltcG9ydCB7IGNhc3QsIGgsIGEgfSBmcm9tICdjeWFuby1taXRocmlsJztcblxudmFyIFRvb2xiYXIgPSBjYXN0KF9Ub29sYmFyLCB7XG4gIGg6IGgsXG4gIGE6IGEsXG4gIFNoYWRvdzogU2hhZG93XG59KTtcblxudmFyIFRvb2xiYXJUaXRsZSA9IGNhc3QoX1Rvb2xiYXJUaXRsZSwge1xuICBoOiBoLFxuICBhOiBhXG59KTtcblxuZXhwb3J0IHsgVG9vbGJhciwgVG9vbGJhclRpdGxlIH07XG4iLCJpbXBvcnQgeyB0cmFuc2l0aW9uU3RhdGVSZWR1Y2VyLCBpbml0aWFsVHJhbnNpdGlvblN0YXRlLCBzdWJzY3JpYmUsIHVuc3Vic2NyaWJlLCB0cmFuc2l0aW9uQ29tcG9uZW50LCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzLCBzdHlsZVByb3BDb21wYXJlIH0gZnJvbSAncG9seXRoZW5lLWNvcmUnO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbnZhciBsaXN0VGlsZUNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1saXN0LXRpbGVcIixcbiAgLy8gZWxlbWVudHNcbiAgY29udGVudDogXCJwZS1saXN0LXRpbGVfX2NvbnRlbnRcIixcbiAgaGlnaFN1YnRpdGxlOiBcInBlLWxpc3QtdGlsZV9faGlnaC1zdWJ0aXRsZVwiLFxuICBwcmltYXJ5OiBcInBlLWxpc3QtdGlsZV9fcHJpbWFyeVwiLFxuICBzZWNvbmRhcnk6IFwicGUtbGlzdC10aWxlX19zZWNvbmRhcnlcIixcbiAgc3VidGl0bGU6IFwicGUtbGlzdC10aWxlX19zdWJ0aXRsZVwiLFxuICB0aXRsZTogXCJwZS1saXN0LXRpbGVfX3RpdGxlXCIsXG4gIGNvbnRlbnRGcm9udDogXCJwZS1saXN0LXRpbGVfX2NvbnRlbnQtZnJvbnRcIixcbiAgLy8gc3RhdGVzICBcbiAgY29tcGFjdDogXCJwZS1saXN0LXRpbGUtLWNvbXBhY3RcIixcbiAgY29tcGFjdEZyb250OiBcInBlLWxpc3QtdGlsZS0tY29tcGFjdC1mcm9udFwiLFxuICBkaXNhYmxlZDogXCJwZS1saXN0LXRpbGUtLWRpc2FibGVkXCIsXG4gIGhhc0Zyb250OiBcInBlLWxpc3QtdGlsZS0tZnJvbnRcIixcbiAgaGFzSGlnaFN1YnRpdGxlOiBcInBlLWxpc3QtdGlsZS0taGlnaC1zdWJ0aXRsZVwiLFxuICBoYXNTdWJ0aXRsZTogXCJwZS1saXN0LXRpbGUtLXN1YnRpdGxlXCIsXG4gIGhlYWRlcjogXCJwZS1saXN0LXRpbGUtLWhlYWRlclwiLFxuICBob3ZlcmFibGU6IFwicGUtbGlzdC10aWxlLS1ob3ZlcmFibGVcIixcbiAgaW5zZXRIOiBcInBlLWxpc3QtdGlsZS0taW5zZXQtaFwiLFxuICBpbnNldFY6IFwicGUtbGlzdC10aWxlLS1pbnNldC12XCIsXG4gIHNlbGVjdGFibGU6IFwicGUtbGlzdC10aWxlLS1zZWxlY3RhYmxlXCIsXG4gIHNlbGVjdGVkOiBcInBlLWxpc3QtdGlsZS0tc2VsZWN0ZWRcIixcbiAgcm91bmRlZDogXCJwZS1saXN0LXRpbGUtLXJvdW5kZWRcIixcbiAgaGlnaGxpZ2h0OiBcInBlLWxpc3QtdGlsZS0taGlnaGxpZ2h0XCIsXG4gIHN0aWNreTogXCJwZS1saXN0LXRpbGUtLXN0aWNreVwiLFxuICBuYXZpZ2F0aW9uOiBcInBlLWxpc3QtdGlsZS0tbmF2aWdhdGlvblwiXG59O1xuXG52YXIgbWVudUNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1tZW51XCIsXG4gIC8vIGVsZW1lbnRzXG4gIHBhbmVsOiBcInBlLW1lbnVfX3BhbmVsXCIsXG4gIGNvbnRlbnQ6IFwicGUtbWVudV9fY29udGVudFwiLFxuICBwbGFjZWhvbGRlcjogXCJwZS1tZW51X19wbGFjZWhvbGRlclwiLFxuICBiYWNrZHJvcDogXCJwZS1tZW51X19iYWNrZHJvcFwiLFxuICAvLyBzdGF0ZXNcbiAgZmxvYXRpbmc6IFwicGUtbWVudS0tZmxvYXRpbmdcIixcbiAgb3JpZ2luOiBcInBlLW1lbnUtLW9yaWdpblwiLFxuICBwZXJtYW5lbnQ6IFwicGUtbWVudS0tcGVybWFuZW50XCIsXG4gIHNob3dCYWNrZHJvcDogXCJwZS1tZW51LS1iYWNrZHJvcFwiLFxuICB2aXNpYmxlOiBcInBlLW1lbnUtLXZpc2libGVcIixcbiAgd2lkdGhfYXV0bzogXCJwZS1tZW51LS13aWR0aC1hdXRvXCIsXG4gIHdpZHRoX246IFwicGUtbWVudS0td2lkdGgtXCIsXG4gIGlzVG9wTWVudTogXCJwZS1tZW51LS10b3AtbWVudVwiLFxuICAvLyBsb29rdXBcbiAgbGlzdFRpbGU6IGxpc3RUaWxlQ2xhc3Nlcy5jb21wb25lbnQsXG4gIHNlbGVjdGVkTGlzdFRpbGU6IGxpc3RUaWxlQ2xhc3Nlcy5zZWxlY3RlZFxufTtcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1kaWFsb2dcIixcbiAgLy8gZWxlbWVudHNcbiAgcGxhY2Vob2xkZXI6IFwicGUtZGlhbG9nX19wbGFjZWhvbGRlclwiLFxuICBob2xkZXI6IFwicGUtZGlhbG9nX19ob2xkZXJcIixcbiAgY29udGVudDogXCJwZS1kaWFsb2dfX2NvbnRlbnRcIixcbiAgYmFja2Ryb3A6IFwicGUtZGlhbG9nX19iYWNrZHJvcFwiLFxuICB0b3VjaDogXCJwZS1kaWFsb2dfX3RvdWNoXCIsXG4gIC8vIHN0YXRlc1xuICBmdWxsU2NyZWVuOiBcInBlLWRpYWxvZy0tZnVsbC1zY3JlZW5cIixcbiAgbW9kYWw6IFwicGUtZGlhbG9nLS1tb2RhbFwiLFxuICBvcGVuOiBcInBlLWRpYWxvZy0tb3BlblwiLFxuICAvLyBjbGFzcyBzZXQgdG8gaHRtbCBlbGVtZW50XG4gIHZpc2libGU6IFwicGUtZGlhbG9nLS12aXNpYmxlXCIsXG4gIC8vIGNsYXNzIHNldCB0byBkaWFsb2cgZWxlbWVudFxuICBzaG93QmFja2Ryb3A6IFwicGUtZGlhbG9nLS1iYWNrZHJvcFwiLFxuICB0cmFuc2l0aW9uOiBcInBlLWRpYWxvZy0tdHJhbnNpdGlvblwiLFxuICAvLyBsb29rdXBcbiAgbWVudUNvbnRlbnQ6IG1lbnVDbGFzc2VzLmNvbnRlbnRcbn07XG5cbnZhciBERUZBVUxUX1NIQURPV19ERVBUSCA9IDM7XG52YXIgb3BlbkRpYWxvZ3NTZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudCk7XG5cbnZhciBjcmVhdGVQYW5lID0gZnVuY3Rpb24gY3JlYXRlUGFuZShfcmVmKSB7XG4gIHZhciBoID0gX3JlZi5oLFxuICAgICAgUGFuZSA9IF9yZWYuUGFuZSxcbiAgICAgIHByb3BzID0gX3JlZi5wcm9wcztcbiAgcmV0dXJuIGgoUGFuZSwge1xuICAgIGJvZHk6IHByb3BzLmNvbnRlbnQgfHwgcHJvcHMuYm9keSB8fCBwcm9wcy5tZW51IHx8IHByb3BzLmNoaWxkcmVuLFxuICAgIGVsZW1lbnQ6IHByb3BzLmVsZW1lbnQsXG4gICAgYm9yZGVyczogcHJvcHMuYm9yZGVycyxcbiAgICBjbGFzc05hbWU6IHByb3BzLmNsYXNzTmFtZSxcbiAgICBmb290ZXI6IHByb3BzLmZvb3RlcixcbiAgICBmb290ZXJCdXR0b25zOiBwcm9wcy5mb290ZXJCdXR0b25zLFxuICAgIGZvcm1PcHRpb25zOiBwcm9wcy5mb3JtT3B0aW9ucyxcbiAgICBmdWxsQmxlZWQ6IHByb3BzLmZ1bGxCbGVlZCxcbiAgICBoZWFkZXI6IHByb3BzLmhlYWRlcixcbiAgICBzdHlsZTogcHJvcHMuc3R5bGUsXG4gICAgdGl0bGU6IHByb3BzLnRpdGxlXG4gIH0pO1xufTtcblxudmFyIF9EaWFsb2cgPSBmdW5jdGlvbiBfRGlhbG9nKF9yZWYyKSB7XG4gIHZhciBoID0gX3JlZjIuaCxcbiAgICAgIGEgPSBfcmVmMi5hLFxuICAgICAgdXNlU3RhdGUgPSBfcmVmMi51c2VTdGF0ZSxcbiAgICAgIHVzZUVmZmVjdCA9IF9yZWYyLnVzZUVmZmVjdCxcbiAgICAgIHVzZVJlZiA9IF9yZWYyLnVzZVJlZixcbiAgICAgIGdldFJlZiA9IF9yZWYyLmdldFJlZixcbiAgICAgIHVzZVJlZHVjZXIgPSBfcmVmMi51c2VSZWR1Y2VyLFxuICAgICAgUGFuZSA9IF9yZWYyLlBhbmUsXG4gICAgICBTaGFkb3cgPSBfcmVmMi5TaGFkb3csXG4gICAgICBvcGVuRGlhbG9nc1NlbGVjdG9yID0gX3JlZjIub3BlbkRpYWxvZ3NTZWxlY3RvcixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYyLCBbXCJoXCIsIFwiYVwiLCBcInVzZVN0YXRlXCIsIFwidXNlRWZmZWN0XCIsIFwidXNlUmVmXCIsIFwiZ2V0UmVmXCIsIFwidXNlUmVkdWNlclwiLCBcIlBhbmVcIiwgXCJTaGFkb3dcIiwgXCJvcGVuRGlhbG9nc1NlbGVjdG9yXCJdKTtcblxuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHRyYW5zaXRpb25TdGF0ZVJlZHVjZXIsIGluaXRpYWxUcmFuc2l0aW9uU3RhdGUpLFxuICAgICAgX3VzZVJlZHVjZXIyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVJlZHVjZXIsIDIpLFxuICAgICAgdHJhbnNpdGlvblN0YXRlID0gX3VzZVJlZHVjZXIyWzBdLFxuICAgICAgZGlzcGF0Y2hUcmFuc2l0aW9uU3RhdGUgPSBfdXNlUmVkdWNlcjJbMV07XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKCksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIGRvbUVsZW1lbnQgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0RG9tRWxlbWVudCA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIGJhY2tkcm9wRWxSZWYgPSB1c2VSZWYoKTtcbiAgdmFyIHRvdWNoRWxSZWYgPSB1c2VSZWYoKTtcbiAgdmFyIGNvbnRlbnRFbFJlZiA9IHVzZVJlZigpO1xuICB2YXIgaXNWaXNpYmxlID0gKHRyYW5zaXRpb25TdGF0ZSB8fCBpbml0aWFsVHJhbnNpdGlvblN0YXRlKS5pc1Zpc2libGU7XG4gIHZhciBpc1RyYW5zaXRpb25pbmcgPSAodHJhbnNpdGlvblN0YXRlIHx8IGluaXRpYWxUcmFuc2l0aW9uU3RhdGUpLmlzVHJhbnNpdGlvbmluZztcblxuICB2YXIgdHJhbnNpdGlvbk9wdGlvbnMgPSBmdW5jdGlvbiB0cmFuc2l0aW9uT3B0aW9ucyhfcmVmMykge1xuICAgIHZhciBpc1Nob3cgPSBfcmVmMy5pc1Nob3csXG4gICAgICAgIF9yZWYzJGhpZGVEZWxheSA9IF9yZWYzLmhpZGVEZWxheSxcbiAgICAgICAgaGlkZURlbGF5ID0gX3JlZjMkaGlkZURlbGF5ID09PSB2b2lkIDAgPyBwcm9wcy5oaWRlRGVsYXkgOiBfcmVmMyRoaWRlRGVsYXksXG4gICAgICAgIHJlZmVycmVyID0gX3JlZjMucmVmZXJyZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zaXRpb25TdGF0ZTogdHJhbnNpdGlvblN0YXRlLFxuICAgICAgZGlzcGF0Y2hUcmFuc2l0aW9uU3RhdGU6IGRpc3BhdGNoVHJhbnNpdGlvblN0YXRlLFxuICAgICAgaW5zdGFuY2VJZDogcHJvcHMuaW5zdGFuY2VJZCxcbiAgICAgIHByb3BzOiBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgaGlkZURlbGF5OiBoaWRlRGVsYXlcbiAgICAgIH0pLFxuICAgICAgaXNTaG93OiBpc1Nob3csXG4gICAgICBkb21FbGVtZW50czoge1xuICAgICAgICBlbDogZG9tRWxlbWVudCxcbiAgICAgICAgY29udGVudEVsOiBjb250ZW50RWxSZWYuY3VycmVudCxcbiAgICAgICAgYmFja2Ryb3BFbDogYmFja2Ryb3BFbFJlZi5jdXJyZW50XG4gICAgICB9LFxuICAgICAgc2hvd0NsYXNzOiBjbGFzc2VzLnZpc2libGUsXG4gICAgICB0cmFuc2l0aW9uQ2xhc3M6IGNsYXNzZXMudHJhbnNpdGlvbixcbiAgICAgIHJlZmVycmVyOiByZWZlcnJlclxuICAgIH07XG4gIH07XG5cbiAgdmFyIHNob3dEaWFsb2cgPSBmdW5jdGlvbiBzaG93RGlhbG9nKCkge1xuICAgIHJldHVybiB0cmFuc2l0aW9uQ29tcG9uZW50KHRyYW5zaXRpb25PcHRpb25zKHtcbiAgICAgIGlzU2hvdzogdHJ1ZVxuICAgIH0pKTtcbiAgfTtcblxuICB2YXIgaGlkZURpYWxvZyA9IGZ1bmN0aW9uIGhpZGVEaWFsb2coKSB7XG4gICAgdmFyIF9yZWY0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgaGlkZURlbGF5ID0gX3JlZjQuaGlkZURlbGF5LFxuICAgICAgICByZWZlcnJlciA9IF9yZWY0LnJlZmVycmVyO1xuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25Db21wb25lbnQodHJhbnNpdGlvbk9wdGlvbnMoe1xuICAgICAgaXNTaG93OiBmYWxzZSxcbiAgICAgIGhpZGVEZWxheTogaGlkZURlbGF5LFxuICAgICAgcmVmZXJyZXI6IHJlZmVycmVyXG4gICAgfSkpO1xuICB9O1xuXG4gIHZhciBpc01vZGFsID0gZnVuY3Rpb24gaXNNb2RhbCgpIHtcbiAgICByZXR1cm4gcHJvcHMubW9kYWwgfHwgZG9tRWxlbWVudCAmJiBkb21FbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc2VzLm1vZGFsKSB8fCBzdHlsZVByb3BDb21wYXJlKHtcbiAgICAgIGVsZW1lbnQ6IGRvbUVsZW1lbnQsXG4gICAgICBwc2V1ZG9TZWxlY3RvcjogXCI6YmVmb3JlXCIsXG4gICAgICBwcm9wOiBcImNvbnRlbnRcIixcbiAgICAgIGNvbnRhaW5zOiBcIlxcXCJcIi5jb25jYXQoXCJtb2RhbFwiLCBcIlxcXCJcIilcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgaXNGdWxsU2NyZWVuID0gZnVuY3Rpb24gaXNGdWxsU2NyZWVuKCkge1xuICAgIHJldHVybiBwcm9wcy5mdWxsU2NyZWVuIHx8IGRvbUVsZW1lbnQgJiYgZG9tRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3Nlcy5mdWxsU2NyZWVuKSB8fCBzdHlsZVByb3BDb21wYXJlKHtcbiAgICAgIGVsZW1lbnQ6IGRvbUVsZW1lbnQsXG4gICAgICBwc2V1ZG9TZWxlY3RvcjogXCI6YmVmb3JlXCIsXG4gICAgICBwcm9wOiBcImNvbnRlbnRcIixcbiAgICAgIGNvbnRhaW5zOiBcIlxcXCJcIi5jb25jYXQoXCJmdWxsX3NjcmVlblwiLCBcIlxcXCJcIilcbiAgICB9KTtcbiAgfTsgLy8gRE9NIGVsZW1lbnRzXG5cblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghZG9tRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGJhY2tkcm9wRWxSZWYuY3VycmVudCA9IGRvbUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoY2xhc3Nlcy5iYWNrZHJvcCkpO1xuICAgIHRvdWNoRWxSZWYuY3VycmVudCA9IGRvbUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoY2xhc3Nlcy50b3VjaCkpO1xuICAgIGNvbnRlbnRFbFJlZi5jdXJyZW50ID0gZG9tRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbnRlbnQpKTtcbiAgfSwgW2RvbUVsZW1lbnRdKTsgLy8gSGFuZGxlIEVzY2FwZSBrZXlcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghZG9tRWxlbWVudCB8fCBwcm9wcy5pbmFjdGl2ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVFc2NhcGUgPSBmdW5jdGlvbiBoYW5kbGVFc2NhcGUoZSkge1xuICAgICAgaWYgKHByb3BzLmRpc2FibGVFc2NhcGUgJiYgKGlzRnVsbFNjcmVlbigpIHx8IGlzTW9kYWwoKSkpIHJldHVybjtcblxuICAgICAgaWYgKGUua2V5ID09PSBcIkVzY2FwZVwiIHx8IGUua2V5ID09PSBcIkVzY1wiKSB7XG4gICAgICAgIC8vIFwiRXNjXCIgZm9yIElFMTFcbiAgICAgICAgdmFyIG9wZW5EaWFsb2dzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChvcGVuRGlhbG9nc1NlbGVjdG9yKTtcblxuICAgICAgICBpZiAob3BlbkRpYWxvZ3Nbb3BlbkRpYWxvZ3MubGVuZ3RoIC0gMV0gPT09IGRvbUVsZW1lbnQpIHtcbiAgICAgICAgICBoaWRlRGlhbG9nKCk7XG4gICAgICAgICAgdW5zdWJzY3JpYmUoXCJrZXlkb3duXCIsIGhhbmRsZUVzY2FwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc3Vic2NyaWJlKFwia2V5ZG93blwiLCBoYW5kbGVFc2NhcGUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB1bnN1YnNjcmliZShcImtleWRvd25cIiwgaGFuZGxlRXNjYXBlKTtcbiAgICB9O1xuICB9LCBbZG9tRWxlbWVudCwgcHJvcHMuaW5hY3RpdmVdKTsgLy8gU2hvdyAvIGhpZGUgbG9naWNcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghZG9tRWxlbWVudCB8fCBpc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuaGlkZSkge1xuICAgICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgICBoaWRlRGlhbG9nKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9wcy5zaG93KSB7XG4gICAgICBpZiAoIWlzVmlzaWJsZSkge1xuICAgICAgICBzaG93RGlhbG9nKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCBbZG9tRWxlbWVudCwgaXNUcmFuc2l0aW9uaW5nLCBpc1Zpc2libGUsIHByb3BzLmhpZGUsIHByb3BzLnNob3ddKTtcblxuICB2YXIgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7fSwgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyhwcm9wcywge1xuICAgIHJlbW92ZTogW1wic3R5bGVcIl1cbiAgfSksIC8vIHN0eWxlIHNldCBpbiBjb250ZW50LCBhbmQgc2V0IGJ5IHNob3cvaGlkZSB0cmFuc2l0aW9uXG4gIGdldFJlZihmdW5jdGlvbiAoZG9tKSB7XG4gICAgcmV0dXJuIGRvbSAmJiAhZG9tRWxlbWVudCAmJiAoc2V0RG9tRWxlbWVudChkb20pLCBwcm9wcy5yZWYgJiYgcHJvcHMucmVmKGRvbSkpO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KHtcbiAgICBjbGFzc05hbWU6IFtwcm9wcy5wYXJlbnRDbGFzc05hbWUgfHwgY2xhc3Nlcy5jb21wb25lbnQsIHByb3BzLmZyb21NdWx0aXBsZUNsYXNzTmFtZSwgcHJvcHMuZnVsbFNjcmVlbiA/IGNsYXNzZXMuZnVsbFNjcmVlbiA6IG51bGwsIHByb3BzLm1vZGFsID8gY2xhc3Nlcy5tb2RhbCA6IG51bGwsIHByb3BzLmJhY2tkcm9wID8gY2xhc3Nlcy5zaG93QmFja2Ryb3AgOiBudWxsLCAvLyBjbGFzc2VzLnZpc2libGUgaXMgc2V0IGluIHNob3dEaWFsb2cgdGhvdWdoIHRyYW5zaXRpb25cbiAgICBwcm9wcy50b25lID09PSBcImRhcmtcIiA/IFwicGUtZGFyay10b25lXCIgOiBudWxsLCBwcm9wcy50b25lID09PSBcImxpZ2h0XCIgPyBcInBlLWxpZ2h0LXRvbmVcIiA6IG51bGwsIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wc1thW1wiY2xhc3NcIl1dXS5qb2luKFwiIFwiKSxcbiAgICBcImRhdGEtc3Bhd24taWRcIjogcHJvcHMuc3Bhd25JZCxcbiAgICAvLyByZWNlaXZlZCBmcm9tIE11bHRpXG4gICAgXCJkYXRhLWluc3RhbmNlLWlkXCI6IHByb3BzLmluc3RhbmNlSWRcbiAgfSwgYS5vbmNsaWNrLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gZG9tRWxlbWVudCAmJiBlLnRhcmdldCAhPT0gYmFja2Ryb3BFbFJlZi5jdXJyZW50ICYmIGUudGFyZ2V0ICE9PSB0b3VjaEVsUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNNb2RhbCgpKSB7XG4gICAgICAvLyBub3QgYWxsb3dlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGhpZGVEaWFsb2coKTtcbiAgfSkpO1xuXG4gIHZhciBwYW5lID0gcHJvcHMucGFuZXNPcHRpb25zICYmIHByb3BzLnBhbmVzT3B0aW9ucy5sZW5ndGggPyBoKFBhbmUsIHByb3BzLnBhbmVzT3B0aW9uc1swXSkgOiBwcm9wcy5wYW5lcyAmJiBwcm9wcy5wYW5lcy5sZW5ndGggPyBwcm9wcy5wYW5lc1swXSA6IGNyZWF0ZVBhbmUoe1xuICAgIGg6IGgsXG4gICAgUGFuZTogUGFuZSxcbiAgICBwcm9wczogcHJvcHNcbiAgfSk7XG4gIHZhciBzaGFkb3dEZXB0aCA9IHByb3BzLnNoYWRvd0RlcHRoO1xuICB2YXIgY29udGVudCA9IFtoKFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuYmFja2Ryb3BcbiAgfSksIGgoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50b3VjaFxuICB9KSwgaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5jb250ZW50LCBwcm9wcy5tZW51ID8gY2xhc3Nlcy5tZW51Q29udGVudCA6IG51bGxdLmpvaW4oXCIgXCIpXG4gIH0sIFtwcm9wcy5mdWxsU2NyZWVuID8gbnVsbCA6IGgoU2hhZG93LCB7XG4gICAgc2hhZG93RGVwdGg6IHNoYWRvd0RlcHRoICE9PSB1bmRlZmluZWQgPyBzaGFkb3dEZXB0aCA6IERFRkFVTFRfU0hBRE9XX0RFUFRILFxuICAgIGFuaW1hdGVkOiB0cnVlXG4gIH0pLCBwcm9wcy5iZWZvcmUsIHBhbmUsIHByb3BzLmFmdGVyXSldO1xuICByZXR1cm4gaChcImRpdlwiLCBjb21wb25lbnRQcm9wcywgY29udGVudCk7XG59O1xuXG5leHBvcnQgeyBfRGlhbG9nLCBvcGVuRGlhbG9nc1NlbGVjdG9yIH07XG4iLCJpbXBvcnQgeyB1bnBhY2tBdHRycywgc3Vic2NyaWJlLCB1bnN1YnNjcmliZSwgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlJztcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLWRpYWxvZy1wYW5lXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGFjdGlvbnM6IFwicGUtZGlhbG9nLXBhbmVfX2FjdGlvbnNcIixcbiAgYm9keTogXCJwZS1kaWFsb2ctcGFuZV9fYm9keVwiLFxuICBjb250ZW50OiBcInBlLWRpYWxvZy1wYW5lX19jb250ZW50XCIsXG4gIGZvb3RlcjogXCJwZS1kaWFsb2ctcGFuZV9fZm9vdGVyXCIsXG4gIGhlYWRlcjogXCJwZS1kaWFsb2ctcGFuZV9faGVhZGVyXCIsXG4gIHRpdGxlOiBcInBlLWRpYWxvZy1wYW5lX190aXRsZVwiLFxuICAvLyBzdGF0ZXNcbiAgd2l0aEhlYWRlcjogXCJwZS1kaWFsb2ctcGFuZS0taGVhZGVyXCIsXG4gIHdpdGhGb290ZXI6IFwicGUtZGlhbG9nLXBhbmUtLWZvb3RlclwiLFxuICBoZWFkZXJXaXRoVGl0bGU6IFwicGUtZGlhbG9nLXBhbmVfX2hlYWRlci0tdGl0bGVcIixcbiAgZm9vdGVyV2l0aEJ1dHRvbnM6IFwicGUtZGlhbG9nLXBhbmVfX2Zvb3Rlci0tYnV0dG9uc1wiLFxuICBmb290ZXJIaWdoOiBcInBlLWRpYWxvZy1wYW5lX19mb290ZXItLWhpZ2hcIixcbiAgYm9yZGVyQm90dG9tOiBcInBlLWRpYWxvZy1wYW5lLS1ib3JkZXItYm90dG9tXCIsXG4gIGJvcmRlclRvcDogXCJwZS1kaWFsb2ctcGFuZS0tYm9yZGVyLXRvcFwiLFxuICBmdWxsQmxlZWQ6IFwicGUtZGlhbG9nLXBhbmUtLWJvZHktZnVsbC1ibGVlZFwiXG59O1xuXG52YXIgYnV0dG9uQ2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLXRleHQtYnV0dG9uXCIsXG4gIFwic3VwZXJcIjogXCJwZS1idXR0b25cIixcbiAgcm93OiBcInBlLWJ1dHRvbi1yb3dcIixcbiAgLy8gZWxlbWVudHMgICAgICBcbiAgY29udGVudDogXCJwZS1idXR0b25fX2NvbnRlbnRcIixcbiAgbGFiZWw6IFwicGUtYnV0dG9uX19sYWJlbFwiLFxuICB0ZXh0TGFiZWw6IFwicGUtYnV0dG9uX190ZXh0LWxhYmVsXCIsXG4gIHdhc2g6IFwicGUtYnV0dG9uX193YXNoXCIsXG4gIHdhc2hDb2xvcjogXCJwZS1idXR0b25fX3dhc2gtY29sb3JcIixcbiAgZHJvcGRvd246IFwicGUtYnV0dG9uX19kcm9wZG93blwiLFxuICAvLyBzdGF0ZXMgICAgICBcbiAgYm9yZGVyOiBcInBlLWJ1dHRvbi0tYm9yZGVyXCIsXG4gIGNvbnRhaW5lZDogXCJwZS1idXR0b24tLWNvbnRhaW5lZFwiLFxuICBkaXNhYmxlZDogXCJwZS1idXR0b24tLWRpc2FibGVkXCIsXG4gIGRyb3Bkb3duQ2xvc2VkOiBcInBlLWJ1dHRvbi0tZHJvcGRvd24tY2xvc2VkXCIsXG4gIGRyb3Bkb3duT3BlbjogXCJwZS1idXR0b24tLWRyb3Bkb3duLW9wZW5cIixcbiAgZXh0cmFXaWRlOiBcInBlLWJ1dHRvbi0tZXh0cmEtd2lkZVwiLFxuICBoYXNEcm9wZG93bjogXCJwZS1idXR0b24tLWRyb3Bkb3duXCIsXG4gIGhpZ2hMYWJlbDogXCJwZS1idXR0b24tLWhpZ2gtbGFiZWxcIixcbiAgaW5hY3RpdmU6IFwicGUtYnV0dG9uLS1pbmFjdGl2ZVwiLFxuICByYWlzZWQ6IFwicGUtYnV0dG9uLS1yYWlzZWRcIixcbiAgc2VsZWN0ZWQ6IFwicGUtYnV0dG9uLS1zZWxlY3RlZFwiLFxuICBzZXBhcmF0b3JBdFN0YXJ0OiBcInBlLWJ1dHRvbi0tc2VwYXJhdG9yLXN0YXJ0XCIsXG4gIGhhc0hvdmVyOiBcInBlLWJ1dHRvbi0taGFzLWhvdmVyXCJcbn07XG5cbnZhciBTQ1JPTExfV0FUQ0hfRU5EX1RJTUVSID0gNTA7XG52YXIgX0RpYWxvZ1BhbmUgPSBmdW5jdGlvbiBfRGlhbG9nUGFuZShfcmVmKSB7XG4gIHZhciBoID0gX3JlZi5oLFxuICAgICAgYSA9IF9yZWYuYSxcbiAgICAgIHVzZVN0YXRlID0gX3JlZi51c2VTdGF0ZSxcbiAgICAgIHVzZUVmZmVjdCA9IF9yZWYudXNlRWZmZWN0LFxuICAgICAgdXNlUmVmID0gX3JlZi51c2VSZWYsXG4gICAgICBnZXRSZWYgPSBfcmVmLmdldFJlZixcbiAgICAgIHVucGFja2VkUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiaFwiLCBcImFcIiwgXCJ1c2VTdGF0ZVwiLCBcInVzZUVmZmVjdFwiLCBcInVzZVJlZlwiLCBcImdldFJlZlwiXSk7XG5cbiAgdmFyIHByb3BzID0gdW5wYWNrQXR0cnModW5wYWNrZWRQcm9wcyk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKCksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIGRvbUVsZW1lbnQgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0RG9tRWxlbWVudCA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTMgPSB1c2VTdGF0ZShmYWxzZSksXG4gICAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksXG4gICAgICBpc1Njcm9sbGluZyA9IF91c2VTdGF0ZTRbMF0sXG4gICAgICBzZXRJc1Njcm9sbGluZyA9IF91c2VTdGF0ZTRbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTUgPSB1c2VTdGF0ZShmYWxzZSksXG4gICAgICBfdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNSwgMiksXG4gICAgICBoYXNUb3BPdmVyZmxvdyA9IF91c2VTdGF0ZTZbMF0sXG4gICAgICBzZXRIYXNUb3BPdmVyZmxvdyA9IF91c2VTdGF0ZTZbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTcgPSB1c2VTdGF0ZShmYWxzZSksXG4gICAgICBfdXNlU3RhdGU4ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNywgMiksXG4gICAgICBoYXNCb3R0b21PdmVyZmxvdyA9IF91c2VTdGF0ZThbMF0sXG4gICAgICBzZXRIYXNCb3R0b21PdmVyZmxvdyA9IF91c2VTdGF0ZThbMV07XG5cbiAgdmFyIGhlYWRlckVsUmVmID0gdXNlUmVmKCk7XG4gIHZhciBmb290ZXJFbFJlZiA9IHVzZVJlZigpO1xuICB2YXIgc2Nyb2xsRWxSZWYgPSB1c2VSZWYoKTtcbiAgdmFyIHNjcm9sbFdhdGNoSWRSZWYgPSB1c2VSZWYoKTtcblxuICB2YXIgdXBkYXRlU2Nyb2xsT3ZlcmZsb3dTdGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbE92ZXJmbG93U3RhdGUoKSB7XG4gICAgdmFyIHNjcm9sbGVyID0gc2Nyb2xsRWxSZWYuY3VycmVudDtcblxuICAgIGlmICghc2Nyb2xsZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXRIYXNUb3BPdmVyZmxvdyhzY3JvbGxlci5zY3JvbGxUb3AgPiAwKTtcbiAgICBzZXRIYXNCb3R0b21PdmVyZmxvdyhzY3JvbGxlci5zY3JvbGxIZWlnaHQgLSAoc2Nyb2xsZXIuc2Nyb2xsVG9wICsgc2Nyb2xsZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0KSA+IDApO1xuICB9O1xuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkb21FbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaGVhZGVyRWxSZWYuY3VycmVudCA9IGRvbUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5cIi5jb25jYXQoY2xhc3Nlcy5oZWFkZXIpKTtcbiAgICBmb290ZXJFbFJlZi5jdXJyZW50ID0gZG9tRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChjbGFzc2VzLmZvb3RlcikpO1xuICAgIHNjcm9sbEVsUmVmLmN1cnJlbnQgPSBkb21FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuXCIuY29uY2F0KGNsYXNzZXMuYm9keSkpO1xuICB9LCBbZG9tRWxlbWVudF0pO1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2Nyb2xsRWxSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICB1cGRhdGVTY3JvbGxPdmVyZmxvd1N0YXRlKCk7XG4gICAgfTtcblxuICAgIHN1YnNjcmliZShcInJlc2l6ZVwiLCB1cGRhdGUpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB1bnN1YnNjcmliZShcInJlc2l6ZVwiLCB1cGRhdGUpO1xuICAgIH07XG4gIH0sIFtzY3JvbGxFbFJlZi5jdXJyZW50XSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdXBkYXRlU2Nyb2xsT3ZlcmZsb3dTdGF0ZSgpO1xuICB9LCBbc2Nyb2xsRWxSZWYuY3VycmVudCwgaXNTY3JvbGxpbmddKTtcbiAgdmFyIHdpdGhIZWFkZXIgPSBwcm9wcy5oZWFkZXIgIT09IHVuZGVmaW5lZCB8fCBwcm9wcy50aXRsZSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgd2l0aEZvb3RlciA9IHByb3BzLmZvb3RlciAhPT0gdW5kZWZpbmVkIHx8IHByb3BzLmZvb3RlckJ1dHRvbnMgIT09IHVuZGVmaW5lZDtcbiAgdmFyIGJvcmRlcnMgPSBwcm9wcy5ib3JkZXJzIHx8IFwib3ZlcmZsb3dcIjtcbiAgdmFyIHNob3dUb3BCb3JkZXIgPSBib3JkZXJzID09PSBcImFsd2F5c1wiIHx8IHdpdGhIZWFkZXIgJiYgYm9yZGVycyA9PT0gXCJvdmVyZmxvd1wiICYmIGhhc1RvcE92ZXJmbG93O1xuICB2YXIgc2hvd0JvdHRvbUJvcmRlciA9IGJvcmRlcnMgPT09IFwiYWx3YXlzXCIgfHwgd2l0aEZvb3RlciAmJiBib3JkZXJzID09PSBcIm92ZXJmbG93XCIgJiYgaGFzQm90dG9tT3ZlcmZsb3c7XG5cbiAgdmFyIGNvbXBvbmVudFByb3BzID0gX2V4dGVuZHMoe30sIGZpbHRlclN1cHBvcnRlZEF0dHJpYnV0ZXMocHJvcHMsIHtcbiAgICByZW1vdmU6IFtcInN0eWxlXCJdXG4gIH0pLCAvLyBzdHlsZSBzZXQgaW4gY29udGVudCwgYW5kIHNldCBieSBzaG93L2hpZGUgdHJhbnNpdGlvblxuICBwcm9wcy50ZXN0SWQgJiYge1xuICAgIFwiZGF0YS10ZXN0LWlkXCI6IHByb3BzLnRlc3RJZFxuICB9LCBnZXRSZWYoZnVuY3Rpb24gKGRvbSkge1xuICAgIHJldHVybiBkb20gJiYgIWRvbUVsZW1lbnQgJiYgKHNldERvbUVsZW1lbnQoZG9tKSwgcHJvcHMucmVmICYmIHByb3BzLnJlZihkb20pKTtcbiAgfSksIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLmNvbXBvbmVudCwgcHJvcHMuZnVsbEJsZWVkID8gY2xhc3Nlcy5mdWxsQmxlZWQgOiBudWxsLCBzaG93VG9wQm9yZGVyID8gY2xhc3Nlcy5ib3JkZXJUb3AgOiBudWxsLCBzaG93Qm90dG9tQm9yZGVyID8gY2xhc3Nlcy5ib3JkZXJCb3R0b20gOiBudWxsLCB3aXRoSGVhZGVyID8gY2xhc3Nlcy53aXRoSGVhZGVyIDogbnVsbCwgd2l0aEZvb3RlciA/IGNsYXNzZXMud2l0aEZvb3RlciA6IG51bGwsIHByb3BzLnRvbmUgPT09IFwiZGFya1wiID8gXCJwZS1kYXJrLXRvbmVcIiA6IG51bGwsIHByb3BzLnRvbmUgPT09IFwibGlnaHRcIiA/IFwicGUtbGlnaHQtdG9uZVwiIDogbnVsbCwgcHJvcHMuY2xhc3NOYW1lIHx8IHByb3BzW2FbXCJjbGFzc1wiXV1dLmpvaW4oXCIgXCIpXG4gIH0sIHByb3BzLmZvcm1PcHRpb25zKTtcblxuICB2YXIgY29tcG9uZW50Q29udGVudCA9IGgoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMuY29udGVudCwgcHJvcHMubWVudSA/IGNsYXNzZXMubWVudUNvbnRlbnQgOiBudWxsXS5qb2luKFwiIFwiKSxcbiAgICBzdHlsZTogcHJvcHMuc3R5bGVcbiAgfSwgW3Byb3BzLmhlYWRlciA/IHByb3BzLmhlYWRlciA6IHByb3BzLnRpdGxlID8gaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5oZWFkZXIsIGNsYXNzZXMuaGVhZGVyV2l0aFRpdGxlXS5qb2luKFwiIFwiKVxuICB9LCBoKFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMudGl0bGVcbiAgfSwgcHJvcHMudGl0bGUpKSA6IG51bGwsIGgoXCJkaXZcIiwgX2RlZmluZVByb3BlcnR5KHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuYm9keVxuICB9LCBhLm9uc2Nyb2xsLCBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SXNTY3JvbGxpbmcodHJ1ZSk7XG4gICAgY2xlYXJUaW1lb3V0KHNjcm9sbFdhdGNoSWRSZWYuY3VycmVudCk7XG4gICAgc2Nyb2xsV2F0Y2hJZFJlZi5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRJc1Njcm9sbGluZyhmYWxzZSk7XG4gICAgfSwgU0NST0xMX1dBVENIX0VORF9USU1FUik7XG4gIH0pLCBwcm9wcy5jb250ZW50IHx8IHByb3BzLmJvZHkgfHwgcHJvcHMubWVudSksIHByb3BzLmZvb3RlciA/IGgoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5mb290ZXJcbiAgfSwgcHJvcHMuZm9vdGVyKSA6IHByb3BzLmZvb3RlckJ1dHRvbnMgPyBoKFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLmZvb3RlciwgY2xhc3Nlcy5mb290ZXJXaXRoQnV0dG9ucywgYnV0dG9uQ2xhc3Nlcy5yb3ddLmpvaW4oXCIgXCIpXG4gIH0sIGgoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hY3Rpb25zXG4gIH0sIHByb3BzLmZvb3RlckJ1dHRvbnMpKSA6IG51bGxdKTtcbiAgdmFyIGNvbnRlbnQgPSBbcHJvcHMuYmVmb3JlLCBjb21wb25lbnRDb250ZW50LCBwcm9wcy5hZnRlcl07XG4gIHJldHVybiBoKHByb3BzLmVsZW1lbnQgfHwgXCJmb3JtXCIsIGNvbXBvbmVudFByb3BzLCBjb250ZW50KTtcbn07XG5cbmV4cG9ydCB7IF9EaWFsb2dQYW5lIH07XG4iLCJpbXBvcnQgeyBfRGlhbG9nUGFuZSB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWRpYWxvZy1wYW5lJztcbmltcG9ydCB7IGNhc3QsIGgsIGEsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiwgZ2V0UmVmIH0gZnJvbSAnY3lhbm8tbWl0aHJpbCc7XG5cbnZhciBEaWFsb2dQYW5lID0gY2FzdChfRGlhbG9nUGFuZSwge1xuICBoOiBoLFxuICBhOiBhLFxuICB1c2VTdGF0ZTogdXNlU3RhdGUsXG4gIHVzZUVmZmVjdDogdXNlRWZmZWN0LFxuICB1c2VSZWY6IHVzZVJlZixcbiAgZ2V0UmVmOiBnZXRSZWZcbn0pO1xuRGlhbG9nUGFuZVtcImRpc3BsYXlOYW1lXCJdID0gXCJEaWFsb2dQYW5lXCI7XG5cbmV4cG9ydCB7IERpYWxvZ1BhbmUgfTtcbiIsImltcG9ydCB7IGNhc3QsIGgsIGEsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiwgZ2V0UmVmLCB1c2VSZWR1Y2VyIH0gZnJvbSAnY3lhbm8tbWl0aHJpbCc7XG5pbXBvcnQgeyBNdWx0aSB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlJztcbmltcG9ydCB7IF9EaWFsb2csIG9wZW5EaWFsb2dzU2VsZWN0b3IgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1kaWFsb2cnO1xuaW1wb3J0IHsgRGlhbG9nUGFuZSB9IGZyb20gJ3BvbHl0aGVuZS1taXRocmlsLWRpYWxvZy1wYW5lJztcbmltcG9ydCB7IFNoYWRvdyB9IGZyb20gJ3BvbHl0aGVuZS1taXRocmlsLXNoYWRvdyc7XG5cbnZhciBsaXN0VGlsZUNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1saXN0LXRpbGVcIixcbiAgLy8gZWxlbWVudHNcbiAgY29udGVudDogXCJwZS1saXN0LXRpbGVfX2NvbnRlbnRcIixcbiAgaGlnaFN1YnRpdGxlOiBcInBlLWxpc3QtdGlsZV9faGlnaC1zdWJ0aXRsZVwiLFxuICBwcmltYXJ5OiBcInBlLWxpc3QtdGlsZV9fcHJpbWFyeVwiLFxuICBzZWNvbmRhcnk6IFwicGUtbGlzdC10aWxlX19zZWNvbmRhcnlcIixcbiAgc3VidGl0bGU6IFwicGUtbGlzdC10aWxlX19zdWJ0aXRsZVwiLFxuICB0aXRsZTogXCJwZS1saXN0LXRpbGVfX3RpdGxlXCIsXG4gIGNvbnRlbnRGcm9udDogXCJwZS1saXN0LXRpbGVfX2NvbnRlbnQtZnJvbnRcIixcbiAgLy8gc3RhdGVzICBcbiAgY29tcGFjdDogXCJwZS1saXN0LXRpbGUtLWNvbXBhY3RcIixcbiAgY29tcGFjdEZyb250OiBcInBlLWxpc3QtdGlsZS0tY29tcGFjdC1mcm9udFwiLFxuICBkaXNhYmxlZDogXCJwZS1saXN0LXRpbGUtLWRpc2FibGVkXCIsXG4gIGhhc0Zyb250OiBcInBlLWxpc3QtdGlsZS0tZnJvbnRcIixcbiAgaGFzSGlnaFN1YnRpdGxlOiBcInBlLWxpc3QtdGlsZS0taGlnaC1zdWJ0aXRsZVwiLFxuICBoYXNTdWJ0aXRsZTogXCJwZS1saXN0LXRpbGUtLXN1YnRpdGxlXCIsXG4gIGhlYWRlcjogXCJwZS1saXN0LXRpbGUtLWhlYWRlclwiLFxuICBob3ZlcmFibGU6IFwicGUtbGlzdC10aWxlLS1ob3ZlcmFibGVcIixcbiAgaW5zZXRIOiBcInBlLWxpc3QtdGlsZS0taW5zZXQtaFwiLFxuICBpbnNldFY6IFwicGUtbGlzdC10aWxlLS1pbnNldC12XCIsXG4gIHNlbGVjdGFibGU6IFwicGUtbGlzdC10aWxlLS1zZWxlY3RhYmxlXCIsXG4gIHNlbGVjdGVkOiBcInBlLWxpc3QtdGlsZS0tc2VsZWN0ZWRcIixcbiAgcm91bmRlZDogXCJwZS1saXN0LXRpbGUtLXJvdW5kZWRcIixcbiAgaGlnaGxpZ2h0OiBcInBlLWxpc3QtdGlsZS0taGlnaGxpZ2h0XCIsXG4gIHN0aWNreTogXCJwZS1saXN0LXRpbGUtLXN0aWNreVwiLFxuICBuYXZpZ2F0aW9uOiBcInBlLWxpc3QtdGlsZS0tbmF2aWdhdGlvblwiXG59O1xuXG52YXIgbWVudUNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1tZW51XCIsXG4gIC8vIGVsZW1lbnRzXG4gIHBhbmVsOiBcInBlLW1lbnVfX3BhbmVsXCIsXG4gIGNvbnRlbnQ6IFwicGUtbWVudV9fY29udGVudFwiLFxuICBwbGFjZWhvbGRlcjogXCJwZS1tZW51X19wbGFjZWhvbGRlclwiLFxuICBiYWNrZHJvcDogXCJwZS1tZW51X19iYWNrZHJvcFwiLFxuICAvLyBzdGF0ZXNcbiAgZmxvYXRpbmc6IFwicGUtbWVudS0tZmxvYXRpbmdcIixcbiAgb3JpZ2luOiBcInBlLW1lbnUtLW9yaWdpblwiLFxuICBwZXJtYW5lbnQ6IFwicGUtbWVudS0tcGVybWFuZW50XCIsXG4gIHNob3dCYWNrZHJvcDogXCJwZS1tZW51LS1iYWNrZHJvcFwiLFxuICB2aXNpYmxlOiBcInBlLW1lbnUtLXZpc2libGVcIixcbiAgd2lkdGhfYXV0bzogXCJwZS1tZW51LS13aWR0aC1hdXRvXCIsXG4gIHdpZHRoX246IFwicGUtbWVudS0td2lkdGgtXCIsXG4gIGlzVG9wTWVudTogXCJwZS1tZW51LS10b3AtbWVudVwiLFxuICAvLyBsb29rdXBcbiAgbGlzdFRpbGU6IGxpc3RUaWxlQ2xhc3Nlcy5jb21wb25lbnQsXG4gIHNlbGVjdGVkTGlzdFRpbGU6IGxpc3RUaWxlQ2xhc3Nlcy5zZWxlY3RlZFxufTtcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1kaWFsb2dcIixcbiAgLy8gZWxlbWVudHNcbiAgcGxhY2Vob2xkZXI6IFwicGUtZGlhbG9nX19wbGFjZWhvbGRlclwiLFxuICBob2xkZXI6IFwicGUtZGlhbG9nX19ob2xkZXJcIixcbiAgY29udGVudDogXCJwZS1kaWFsb2dfX2NvbnRlbnRcIixcbiAgYmFja2Ryb3A6IFwicGUtZGlhbG9nX19iYWNrZHJvcFwiLFxuICB0b3VjaDogXCJwZS1kaWFsb2dfX3RvdWNoXCIsXG4gIC8vIHN0YXRlc1xuICBmdWxsU2NyZWVuOiBcInBlLWRpYWxvZy0tZnVsbC1zY3JlZW5cIixcbiAgbW9kYWw6IFwicGUtZGlhbG9nLS1tb2RhbFwiLFxuICBvcGVuOiBcInBlLWRpYWxvZy0tb3BlblwiLFxuICAvLyBjbGFzcyBzZXQgdG8gaHRtbCBlbGVtZW50XG4gIHZpc2libGU6IFwicGUtZGlhbG9nLS12aXNpYmxlXCIsXG4gIC8vIGNsYXNzIHNldCB0byBkaWFsb2cgZWxlbWVudFxuICBzaG93QmFja2Ryb3A6IFwicGUtZGlhbG9nLS1iYWNrZHJvcFwiLFxuICB0cmFuc2l0aW9uOiBcInBlLWRpYWxvZy0tdHJhbnNpdGlvblwiLFxuICAvLyBsb29rdXBcbiAgbWVudUNvbnRlbnQ6IG1lbnVDbGFzc2VzLmNvbnRlbnRcbn07XG5cbnZhciBEaWFsb2dJbnN0YW5jZSA9IGNhc3QoX0RpYWxvZywge1xuICBoOiBoLFxuICBhOiBhLFxuICB1c2VTdGF0ZTogdXNlU3RhdGUsXG4gIHVzZUVmZmVjdDogdXNlRWZmZWN0LFxuICB1c2VSZWY6IHVzZVJlZixcbiAgZ2V0UmVmOiBnZXRSZWYsXG4gIHVzZVJlZHVjZXI6IHVzZVJlZHVjZXIsXG4gIFNoYWRvdzogU2hhZG93LFxuICBQYW5lOiBEaWFsb2dQYW5lLFxuICBvcGVuRGlhbG9nc1NlbGVjdG9yOiBvcGVuRGlhbG9nc1NlbGVjdG9yXG59KTtcbkRpYWxvZ0luc3RhbmNlW1wiZGlzcGxheU5hbWVcIl0gPSBcIkRpYWxvZ0luc3RhbmNlXCI7XG52YXIgb3B0aW9ucyA9IHtcbiAgbmFtZTogXCJkaWFsb2dcIixcbiAgaHRtbFNob3dDbGFzczogY2xhc3Nlcy5vcGVuLFxuICBkZWZhdWx0SWQ6IFwiZGVmYXVsdF9kaWFsb2dcIixcbiAgaG9sZGVyU2VsZWN0b3I6IFwiZGl2LlwiLmNvbmNhdChjbGFzc2VzLmhvbGRlciksXG4gIGluc3RhbmNlOiBEaWFsb2dJbnN0YW5jZSxcbiAgcGxhY2Vob2xkZXI6IFwic3Bhbi5cIi5jb25jYXQoY2xhc3Nlcy5wbGFjZWhvbGRlcilcbn07XG52YXIgTXVsdGlwbGVJbnN0YW5jZSA9IE11bHRpKHtcbiAgb3B0aW9uczogb3B0aW9uc1xufSk7XG52YXIgRGlhbG9nID0gY2FzdChNdWx0aXBsZUluc3RhbmNlLnJlbmRlciwge1xuICBoOiBoLFxuICB1c2VTdGF0ZTogdXNlU3RhdGUsXG4gIHVzZUVmZmVjdDogdXNlRWZmZWN0XG59KTtcbk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE11bHRpcGxlSW5zdGFuY2UpLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcCAhPT0gXCJyZW5kZXJcIjtcbn0pLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgcmV0dXJuIERpYWxvZ1twXSA9IE11bHRpcGxlSW5zdGFuY2VbcF07XG59KTtcbkRpYWxvZ1tcImRpc3BsYXlOYW1lXCJdID0gXCJEaWFsb2dcIjtcblxuZXhwb3J0IHsgRGlhbG9nLCBEaWFsb2dJbnN0YW5jZSB9O1xuIiwiaW1wb3J0IHsgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcywgaWNvbkRyb3Bkb3duRG93biB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlJztcbmltcG9ydCB7IGdldERlcHRoQ2xhc3MgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1zaGFkb3cnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLXRleHQtYnV0dG9uXCIsXG4gIFwic3VwZXJcIjogXCJwZS1idXR0b25cIixcbiAgcm93OiBcInBlLWJ1dHRvbi1yb3dcIixcbiAgLy8gZWxlbWVudHMgICAgICBcbiAgY29udGVudDogXCJwZS1idXR0b25fX2NvbnRlbnRcIixcbiAgbGFiZWw6IFwicGUtYnV0dG9uX19sYWJlbFwiLFxuICB0ZXh0TGFiZWw6IFwicGUtYnV0dG9uX190ZXh0LWxhYmVsXCIsXG4gIHdhc2g6IFwicGUtYnV0dG9uX193YXNoXCIsXG4gIHdhc2hDb2xvcjogXCJwZS1idXR0b25fX3dhc2gtY29sb3JcIixcbiAgZHJvcGRvd246IFwicGUtYnV0dG9uX19kcm9wZG93blwiLFxuICAvLyBzdGF0ZXMgICAgICBcbiAgYm9yZGVyOiBcInBlLWJ1dHRvbi0tYm9yZGVyXCIsXG4gIGNvbnRhaW5lZDogXCJwZS1idXR0b24tLWNvbnRhaW5lZFwiLFxuICBkaXNhYmxlZDogXCJwZS1idXR0b24tLWRpc2FibGVkXCIsXG4gIGRyb3Bkb3duQ2xvc2VkOiBcInBlLWJ1dHRvbi0tZHJvcGRvd24tY2xvc2VkXCIsXG4gIGRyb3Bkb3duT3BlbjogXCJwZS1idXR0b24tLWRyb3Bkb3duLW9wZW5cIixcbiAgZXh0cmFXaWRlOiBcInBlLWJ1dHRvbi0tZXh0cmEtd2lkZVwiLFxuICBoYXNEcm9wZG93bjogXCJwZS1idXR0b24tLWRyb3Bkb3duXCIsXG4gIGhpZ2hMYWJlbDogXCJwZS1idXR0b24tLWhpZ2gtbGFiZWxcIixcbiAgaW5hY3RpdmU6IFwicGUtYnV0dG9uLS1pbmFjdGl2ZVwiLFxuICByYWlzZWQ6IFwicGUtYnV0dG9uLS1yYWlzZWRcIixcbiAgc2VsZWN0ZWQ6IFwicGUtYnV0dG9uLS1zZWxlY3RlZFwiLFxuICBzZXBhcmF0b3JBdFN0YXJ0OiBcInBlLWJ1dHRvbi0tc2VwYXJhdG9yLXN0YXJ0XCIsXG4gIGhhc0hvdmVyOiBcInBlLWJ1dHRvbi0taGFzLWhvdmVyXCJcbn07XG5cbnZhciBzaGFkb3dDbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtc2hhZG93XCIsXG4gIC8vIGVsZW1lbnRzICAgICAgXG4gIGJvdHRvbVNoYWRvdzogXCJwZS1zaGFkb3dfX2JvdHRvbVwiLFxuICB0b3BTaGFkb3c6IFwicGUtc2hhZG93X190b3BcIixcbiAgLy8gc3RhdGVzXG4gIGFuaW1hdGVkOiBcInBlLXNoYWRvdy0tYW5pbWF0ZWRcIixcbiAgZGVwdGhfbjogXCJwZS1zaGFkb3ctLWRlcHRoLVwiLFxuICB3aXRoX2FjdGl2ZV9zaGFkb3c6IFwicGUtd2l0aC1hY3RpdmUtc2hhZG93XCJcbn07XG5cbnZhciBERUZBVUxUX1NIQURPV19ERVBUSCA9IDE7XG52YXIgX0J1dHRvbiA9IGZ1bmN0aW9uIF9CdXR0b24oX3JlZikge1xuICB2YXIgX29iamVjdFNwcmVhZDM7XG5cbiAgdmFyIGggPSBfcmVmLmgsXG4gICAgICBhID0gX3JlZi5hLFxuICAgICAgZ2V0UmVmID0gX3JlZi5nZXRSZWYsXG4gICAgICB1c2VTdGF0ZSA9IF9yZWYudXNlU3RhdGUsXG4gICAgICB1c2VFZmZlY3QgPSBfcmVmLnVzZUVmZmVjdCxcbiAgICAgIHVzZVJlZiA9IF9yZWYudXNlUmVmLFxuICAgICAgUmlwcGxlID0gX3JlZi5SaXBwbGUsXG4gICAgICBTaGFkb3cgPSBfcmVmLlNoYWRvdyxcbiAgICAgIEljb24gPSBfcmVmLkljb24sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJoXCIsIFwiYVwiLCBcImdldFJlZlwiLCBcInVzZVN0YXRlXCIsIFwidXNlRWZmZWN0XCIsIFwidXNlUmVmXCIsIFwiUmlwcGxlXCIsIFwiU2hhZG93XCIsIFwiSWNvblwiXSk7XG5cbiAgdmFyIGV2ZW50cyA9IHByb3BzLmV2ZW50cyB8fCB7fTtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoKSxcbiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgICAgZG9tRWxlbWVudCA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXREb21FbGVtZW50ID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgX3VzZVN0YXRlMyA9IHVzZVN0YXRlKHByb3BzLmluYWN0aXZlKSxcbiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSxcbiAgICAgIGlzSW5hY3RpdmUgPSBfdXNlU3RhdGU0WzBdLFxuICAgICAgc2V0SXNJbmFjdGl2ZSA9IF91c2VTdGF0ZTRbMV07XG5cbiAgdmFyIGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQ7XG4gIHZhciBpbmFjdGl2ZSA9IHByb3BzLmluYWN0aXZlIHx8IGlzSW5hY3RpdmU7XG5cbiAgdmFyIG9uQ2xpY2tIYW5kbGVyID0gZXZlbnRzW2Eub25jbGlja10gfHwgZnVuY3Rpb24gKCkge307XG5cbiAgdmFyIG9uS2V5VXBIYW5kbGVyID0gZXZlbnRzW2Eub25rZXl1cF0gfHwgb25DbGlja0hhbmRsZXI7XG4gIHZhciBzaGFkb3dEZXB0aCA9IHByb3BzLnJhaXNlZCA/IHByb3BzLnNoYWRvd0RlcHRoICE9PSB1bmRlZmluZWQgPyBwcm9wcy5zaGFkb3dEZXB0aCA6IERFRkFVTFRfU0hBRE9XX0RFUFRIIDogMDtcbiAgdmFyIGFuaW1hdGVPblRhcCA9IHByb3BzLmFuaW1hdGVPblRhcCAhPT0gZmFsc2UgPyB0cnVlIDogZmFsc2U7XG5cbiAgdmFyIGhhbmRsZUluYWN0aXZhdGUgPSBmdW5jdGlvbiBoYW5kbGVJbmFjdGl2YXRlKCkge1xuICAgIGlmIChwcm9wcy5pbmFjdGl2YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZXRJc0luYWN0aXZlKHRydWUpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHNldElzSW5hY3RpdmUoZmFsc2UpO1xuICAgIH0sIHByb3BzLmluYWN0aXZhdGUgKiAxMDAwKTtcbiAgfTtcblxuICB2YXIgaGFzSG92ZXIgPSAhZGlzYWJsZWQgJiYgIXByb3BzLnNlbGVjdGVkICYmIChwcm9wcy5yYWlzZWQgPyBwcm9wcy53YXNoIDogcHJvcHMud2FzaCAhPT0gZmFsc2UpO1xuXG4gIHZhciBoYW5kbGVNb3VzZUxlYXZlID0gZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZShlKSB7XG4gICAgZG9tRWxlbWVudC5ibHVyKCk7XG4gICAgZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCBoYW5kbGVNb3VzZUxlYXZlKTtcbiAgfTtcblxuICB2YXIgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7fSwgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyhwcm9wcywge1xuICAgIGFkZDogW2EuZm9ybWFjdGlvbiwgXCJ0eXBlXCJdLFxuICAgIHJlbW92ZTogW1wic3R5bGVcIl1cbiAgfSksIC8vIFNldCBzdHlsZSBvbiBjb250ZW50LCBub3Qgb24gY29tcG9uZW50XG4gIGdldFJlZihmdW5jdGlvbiAoZG9tKSB7XG4gICAgaWYgKCFkb20gfHwgZG9tRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldERvbUVsZW1lbnQoZG9tKTtcblxuICAgIGlmIChwcm9wcy5nZXRSZWYpIHtcbiAgICAgIHByb3BzLmdldFJlZihkb20pO1xuICAgIH1cbiAgfSksIHByb3BzLnRlc3RJZCAmJiB7XG4gICAgXCJkYXRhLXRlc3QtaWRcIjogcHJvcHMudGVzdElkXG4gIH0sIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzW1wic3VwZXJcIl0sIHByb3BzLnBhcmVudENsYXNzTmFtZSB8fCBjbGFzc2VzLmNvbXBvbmVudCwgcHJvcHMuY29udGFpbmVkID8gY2xhc3Nlcy5jb250YWluZWQgOiBudWxsLCAvLyBSYWlzZWQgYnV0dG9uIGNsYXNzZXNcbiAgICBwcm9wcy5yYWlzZWQgPyBjbGFzc2VzLmNvbnRhaW5lZCA6IG51bGwsIHByb3BzLnJhaXNlZCA/IGNsYXNzZXMucmFpc2VkIDogbnVsbCwgcHJvcHMucmFpc2VkICYmIGFuaW1hdGVPblRhcCA/IHNoYWRvd0NsYXNzZXMud2l0aF9hY3RpdmVfc2hhZG93IDogbnVsbCwgcHJvcHMucmFpc2VkICYmIGFuaW1hdGVPblRhcCA/IGdldERlcHRoQ2xhc3Moc2hhZG93RGVwdGggKyAxKSA6IG51bGwsIC8vXG4gICAgaGFzSG92ZXIgPyBjbGFzc2VzLmhhc0hvdmVyIDogbnVsbCwgcHJvcHMuc2VsZWN0ZWQgPyBjbGFzc2VzLnNlbGVjdGVkIDogbnVsbCwgcHJvcHMuaGlnaExhYmVsID8gY2xhc3Nlcy5oaWdoTGFiZWwgOiBudWxsLCBwcm9wcy5leHRyYVdpZGUgPyBjbGFzc2VzLmV4dHJhV2lkZSA6IG51bGwsIGRpc2FibGVkID8gY2xhc3Nlcy5kaXNhYmxlZCA6IG51bGwsIGluYWN0aXZlID8gY2xhc3Nlcy5pbmFjdGl2ZSA6IG51bGwsIHByb3BzLnNlcGFyYXRvckF0U3RhcnQgPyBjbGFzc2VzLnNlcGFyYXRvckF0U3RhcnQgOiBudWxsLCBwcm9wcy5ib3JkZXIgfHwgcHJvcHMuYm9yZGVycyA/IGNsYXNzZXMuYm9yZGVyIDogbnVsbCwgcHJvcHMuZHJvcGRvd24gPyBjbGFzc2VzLmhhc0Ryb3Bkb3duIDogbnVsbCwgcHJvcHMuZHJvcGRvd24gPyBwcm9wcy5kcm9wZG93bi5vcGVuID8gY2xhc3Nlcy5kcm9wZG93bk9wZW4gOiBjbGFzc2VzLmRyb3Bkb3duQ2xvc2VkIDogbnVsbCwgcHJvcHMudG9uZSA9PT0gXCJkYXJrXCIgPyBcInBlLWRhcmstdG9uZVwiIDogbnVsbCwgcHJvcHMudG9uZSA9PT0gXCJsaWdodFwiID8gXCJwZS1saWdodC10b25lXCIgOiBudWxsLCBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHNbYVtcImNsYXNzXCJdXV0uam9pbihcIiBcIilcbiAgfSwgaW5hY3RpdmUgPyBudWxsIDogX29iamVjdFNwcmVhZDIoX2RlZmluZVByb3BlcnR5KHt9LCBhLnRhYmluZGV4LCBkaXNhYmxlZCB8fCBpbmFjdGl2ZSA/IC0xIDogcHJvcHNbYS50YWJpbmRleF0gfHwgMCksIGV2ZW50cywgKF9vYmplY3RTcHJlYWQzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfb2JqZWN0U3ByZWFkMywgYS5vbm1vdXNlZG93biwgZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gZG9tRWxlbWVudCAmJiBkb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIgJiYgZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCBoYW5kbGVNb3VzZUxlYXZlKSwgcHJvcHMuZXZlbnRzICYmIHByb3BzLmV2ZW50c1thLm9ubW91c2Vkb3duXSAmJiBwcm9wcy5ldmVudHNbYS5vbm1vdXNlZG93bl0oZSk7XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX29iamVjdFNwcmVhZDMsIGEub25jbGljaywgZnVuY3Rpb24gKGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZG9tRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKSwgaGFuZGxlSW5hY3RpdmF0ZSgpLCBvbkNsaWNrSGFuZGxlcihlKTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfb2JqZWN0U3ByZWFkMywgYS5vbmtleXVwLCBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLmtleUNvZGUgPT09IDEzICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGRvbUVsZW1lbnQpIHtcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuXG4gICAgICBpZiAob25LZXlVcEhhbmRsZXIpIHtcbiAgICAgICAgb25LZXlVcEhhbmRsZXIoZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJvcHMuZXZlbnRzICYmIHByb3BzLmV2ZW50c1thLm9ua2V5dXBdICYmIHByb3BzLmV2ZW50c1thLm9ua2V5dXBdKGUpO1xuICB9KSwgX29iamVjdFNwcmVhZDMpKSwgcHJvcHMudXJsLCBkaXNhYmxlZCA/IHtcbiAgICBkaXNhYmxlZDogdHJ1ZVxuICB9IDogbnVsbCk7XG5cbiAgdmFyIG5vaW5rID0gcHJvcHMuaW5rICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuaW5rID09PSBmYWxzZTtcbiAgdmFyIGJ1dHRvbkNvbnRlbnQgPSBwcm9wcy5jb250ZW50ID8gcHJvcHMuY29udGVudCA6IHByb3BzLmxhYmVsICE9PSB1bmRlZmluZWQgPyBfdHlwZW9mKHByb3BzLmxhYmVsKSA9PT0gXCJvYmplY3RcIiA/IHByb3BzLmxhYmVsIDogaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsXG4gIH0sIGgoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50ZXh0TGFiZWwsXG4gICAgc3R5bGU6IHByb3BzLnRleHRTdHlsZVxuICB9LCBwcm9wcy5sYWJlbCkpIDogcHJvcHMuY2hpbGRyZW47XG4gIHZhciBjb21wb25lbnRDb250ZW50ID0gaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNvbnRlbnQsXG4gICAgc3R5bGU6IHByb3BzLnN0eWxlXG4gIH0sIFtoKFNoYWRvdywge1xuICAgIHNoYWRvd0RlcHRoOiBzaGFkb3dEZXB0aCAhPT0gdW5kZWZpbmVkID8gc2hhZG93RGVwdGggOiAwLFxuICAgIGFuaW1hdGVkOiB0cnVlXG4gIH0pLCBkaXNhYmxlZCB8fCBub2luayA/IG51bGwgOiBoKFJpcHBsZSwgX2V4dGVuZHMoe30sIHtcbiAgICB0YXJnZXQ6IGRvbUVsZW1lbnRcbiAgfSwgcHJvcHMucmlwcGxlKSksIGgoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy53YXNoXG4gIH0sIGgoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy53YXNoQ29sb3JcbiAgfSkpLCBidXR0b25Db250ZW50LCBwcm9wcy5kcm9wZG93biA/IGgoSWNvbiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5kcm9wZG93bixcbiAgICBzdmc6IHtcbiAgICAgIGNvbnRlbnQ6IGgudHJ1c3QoaWNvbkRyb3Bkb3duRG93bilcbiAgICB9XG4gIH0pIDogbnVsbF0pO1xuICByZXR1cm4gaChwcm9wcy5lbGVtZW50IHx8IFwiYVwiLCBjb21wb25lbnRQcm9wcywgW3Byb3BzLmJlZm9yZSwgY29tcG9uZW50Q29udGVudCwgcHJvcHMuYWZ0ZXJdKTtcbn07XG5cbmV4cG9ydCB7IF9CdXR0b24gfTtcbiIsIi8vIEB0cy1jaGVja1xuLy8gR2xvYmFsIHN0eWxlIHZhcmlhYmxlc1xudmFyIGdyaWRfdW5pdCA9IDQ7XG52YXIgZ3JpZF91bml0X2NvbXBvbmVudCA9IDg7XG52YXIgaW5jcmVtZW50ID0gNyAqIGdyaWRfdW5pdF9jb21wb25lbnQ7IC8vIDcgKiA4ID0gNTZcblxudmFyIGluY3JlbWVudF9sYXJnZSA9IDggKiBncmlkX3VuaXRfY29tcG9uZW50OyAvLyA4ICogOCA9IDY0XG5cbnZhciB2YXJzID0ge1xuICAvLyBncmlkXG4gIGdyaWRfdW5pdDogZ3JpZF91bml0LFxuICBncmlkX3VuaXRfY29tcG9uZW50OiBncmlkX3VuaXRfY29tcG9uZW50LFxuICBpbmNyZW1lbnQ6IGluY3JlbWVudCxcbiAgaW5jcmVtZW50X2xhcmdlOiBpbmNyZW1lbnRfbGFyZ2UsXG4gIGdyaWRfdW5pdF9tZW51OiA1NixcbiAgZ3JpZF91bml0X2ljb25fYnV0dG9uOiA2ICogZ3JpZF91bml0X2NvbXBvbmVudCxcbiAgLy8gNDhcbiAgLy8gY29tbW9uIHNpemVzXG4gIHVuaXRfYmxvY2tfYm9yZGVyX3JhZGl1czogNCxcbiAgdW5pdF9pdGVtX2JvcmRlcl9yYWRpdXM6IDQsXG4gIHVuaXRfaW5kZW50OiA3MixcbiAgdW5pdF9pbmRlbnRfbGFyZ2U6IDgwLFxuICB1bml0X3NpZGVfcGFkZGluZzogMTYsXG4gIC8vIGJ1dHRvbnNcbiAgdW5pdF90b3VjaF9oZWlnaHQ6IDQ4LFxuICB1bml0X2ljb25fc2l6ZV9zbWFsbDogMiAqIGdyaWRfdW5pdF9jb21wb25lbnQsXG4gIC8vIDE2XG4gIHVuaXRfaWNvbl9zaXplOiAzICogZ3JpZF91bml0X2NvbXBvbmVudCxcbiAgLy8gMjRcbiAgdW5pdF9pY29uX3NpemVfbWVkaXVtOiA0ICogZ3JpZF91bml0X2NvbXBvbmVudCxcbiAgLy8gMzJcbiAgdW5pdF9pY29uX3NpemVfbGFyZ2U6IDUgKiBncmlkX3VuaXRfY29tcG9uZW50LFxuICAvLyA0MFxuICAvLyBzY3JlZW4gZGltZW5zaW9uc1xuICB1bml0X3NjcmVlbl9zaXplX2V4dHJhX2xhcmdlOiAxMjgwLFxuICB1bml0X3NjcmVlbl9zaXplX2xhcmdlOiA5NjAsXG4gIHVuaXRfc2NyZWVuX3NpemVfbWVkaXVtOiA0ODAsXG4gIHVuaXRfc2NyZWVuX3NpemVfc21hbGw6IDMyMCxcbiAgLy8gdHJhbnNpdGlvbnNcbiAgYW5pbWF0aW9uX2R1cmF0aW9uOiBcIi4xOHNcIixcbiAgYW5pbWF0aW9uX2N1cnZlX3Nsb3dfaW5fZmFzdF9vdXQ6IFwiY3ViaWMtYmV6aWVyKC40LCAwLCAuMiwgMSlcIixcbiAgYW5pbWF0aW9uX2N1cnZlX3Nsb3dfaW5fbGluZWFyX291dDogXCJjdWJpYy1iZXppZXIoMCwgMCwgLjIsIDEpXCIsXG4gIGFuaW1hdGlvbl9jdXJ2ZV9saW5lYXJfaW5fZmFzdF9vdXQ6IFwiY3ViaWMtYmV6aWVyKC40LCAwLCAxLCAxKVwiLFxuICBhbmltYXRpb25fY3VydmVfZGVmYXVsdDogXCJlYXNlLW91dFwiLFxuICAvLyBmb250XG4gIGZvbnRfd2VpZ2h0X2xpZ2h0OiAzMDAsXG4gIGZvbnRfd2VpZ2h0X25vcm1hbDogNDAwLFxuICBmb250X3dlaWdodF9tZWRpdW06IDUwMCxcbiAgZm9udF93ZWlnaHRfYm9sZDogNzAwLFxuICBmb250X3NpemVfdGl0bGU6IDIwLFxuICBsaW5lX2hlaWdodDogMS41LFxuICAvLyBiYXNlIGNvbG9yc1xuICBjb2xvcl9wcmltYXJ5OiBcIjMzLCAxNTAsIDI0M1wiLFxuICAvLyBibHVlIDUwMFxuICBjb2xvcl9wcmltYXJ5X2FjdGl2ZTogXCIzMCwgMTM2LCAyMjlcIixcbiAgLy8gYmx1ZSA2MDBcbiAgY29sb3JfcHJpbWFyeV9kYXJrOiBcIjI1LCAxMTgsIDIxMFwiLFxuICAvLyBibHVlIDcwMFxuICBjb2xvcl9wcmltYXJ5X2ZhZGVkOiBcIjEwMCwgMTgxLCAyNDlcIixcbiAgLy8gYmx1ZSAzMDBcbiAgY29sb3JfcHJpbWFyeV9mb3JlZ3JvdW5kOiBcIjI1NSwgMjU1LCAyNTVcIixcbiAgY29sb3JfbGlnaHRfYmFja2dyb3VuZDogXCIyNTUsIDI1NSwgMjU1XCIsXG4gIGNvbG9yX2xpZ2h0X2ZvcmVncm91bmQ6IFwiMCwgMCwgMFwiLFxuICBjb2xvcl9kYXJrX2JhY2tncm91bmQ6IFwiMzQsIDM0LCAzNFwiLFxuICBjb2xvcl9kYXJrX2ZvcmVncm91bmQ6IFwiMjU1LCAyNTUsIDI1NVwiLFxuICAvLyBibGVuZHNcbiAgYmxlbmRfbGlnaHRfdGV4dF9wcmltYXJ5OiAuODcsXG4gIGJsZW5kX2xpZ2h0X3RleHRfcmVndWxhcjogLjczLFxuICBibGVuZF9saWdodF90ZXh0X3NlY29uZGFyeTogLjU0LFxuICBibGVuZF9saWdodF90ZXh0X3RlcnRpYXJ5OiAuNDAsXG4gIGJsZW5kX2xpZ2h0X3RleHRfZGlzYWJsZWQ6IC4yNixcbiAgYmxlbmRfbGlnaHRfYm9yZGVyX21lZGl1bTogLjI0LFxuICBibGVuZF9saWdodF9ib3JkZXJfbGlnaHQ6IC4xMSxcbiAgYmxlbmRfbGlnaHRfYmFja2dyb3VuZF9hY3RpdmU6IC4xNCxcbiAgYmxlbmRfbGlnaHRfYmFja2dyb3VuZF9ob3ZlcjogLjA2LFxuICBibGVuZF9saWdodF9iYWNrZ3JvdW5kX2hvdmVyX21lZGl1bTogLjEyLFxuICAvLyBmb3IgdGhlIGxpZ2h0ZXIgdGludGVkIGljb24gYnV0dG9uc1xuICBibGVuZF9saWdodF9iYWNrZ3JvdW5kX2Rpc2FibGVkOiAuMDksXG4gIGJsZW5kX2xpZ2h0X292ZXJsYXlfYmFja2dyb3VuZDogLjMsXG4gIGJsZW5kX2RhcmtfdGV4dF9wcmltYXJ5OiAxLFxuICBibGVuZF9kYXJrX3RleHRfcmVndWxhcjogLjg3LFxuICBibGVuZF9kYXJrX3RleHRfc2Vjb25kYXJ5OiAuNzAsXG4gIGJsZW5kX2RhcmtfdGV4dF90ZXJ0aWFyeTogLjQwLFxuICBibGVuZF9kYXJrX3RleHRfZGlzYWJsZWQ6IC4yNixcbiAgYmxlbmRfZGFya19ib3JkZXJfbWVkaXVtOiAuMjIsXG4gIGJsZW5kX2RhcmtfYm9yZGVyX2xpZ2h0OiAuMTAsXG4gIGJsZW5kX2RhcmtfYmFja2dyb3VuZF9hY3RpdmU6IC4xNCxcbiAgYmxlbmRfZGFya19iYWNrZ3JvdW5kX2hvdmVyOiAuMDgsXG4gIGJsZW5kX2RhcmtfYmFja2dyb3VuZF9ob3Zlck1lZGl1bTogLjEyLFxuICAvLyBmb3IgdGhlIGxpZ2h0ZXIgdGludGVkIGljb24gYnV0dG9uc1xuICBibGVuZF9kYXJrX2JhY2tncm91bmRfZGlzYWJsZWQ6IC4xMixcbiAgYmxlbmRfZGFya19vdmVybGF5X2JhY2tncm91bmQ6IC4zLFxuXG4gIC8qXG4gIEJyZWFrcG9pbnRzXG4gIFNwZWNzOiBodHRwczovL21hdGVyaWFsLmlvL2d1aWRlbGluZXMvbGF5b3V0L3Jlc3BvbnNpdmUtdWkuaHRtbCNyZXNwb25zaXZlLXVpLWJyZWFrcG9pbnRzXG4gIEJyZWFrYnBvaW50IG5hbWluZzogaW5zcGlyYXRpb24gZnJvbVxuICBodHRwczovL21lZGl1bS5mcmVlY29kZWNhbXAub3JnL3RoZS0xMDAtY29ycmVjdC13YXktdG8tZG8tY3NzLWJyZWFrcG9pbnRzLTg4ZDZhNWJhMTg2MlxuICAqL1xuICBicmVha3BvaW50X2Zvcl9waG9uZV9vbmx5OiA1OTksXG4gIC8vIHNldCBtYXgtd2lkdGggIGNvbHM6IDQsICBndXR0ZXI6IDE2XG4gIGJyZWFrcG9pbnRfZm9yX3RhYmxldF9wb3J0cmFpdF91cDogNjAwLFxuICAvLyBzZXQgbWluLXdpZHRoICBjb2xzOiA4LCAgZ3V0dGVyOiAyNFxuICBicmVha3BvaW50X2Zvcl90YWJsZXRfbGFuZHNjYXBlX3VwOiA4NDAsXG4gIC8vIGV0Yy4gICAgICAgICAgIGNvbHM6IDEyLCBndXR0ZXI6IDI0XG4gIGJyZWFrcG9pbnRfZm9yX2Rlc2t0b3BfdXA6IDEyODAsXG4gIGJyZWFrcG9pbnRfZm9yX2JpZ19kZXNrdG9wX3VwOiAxNjAwLFxuICBicmVha3BvaW50X2Zvcl90dl91cDogMTkyMCxcbiAgLy8gei1pbmRleFxuICB6X3Rvb2xiYXI6IDEwMCxcbiAgel9tZW51OiAxMDAwLFxuICB6X2FwcF9iYXI6IDIwMDAsXG4gIHpfZHJhd2VyOiAzMDAwLFxuICB6X25vdGlmaWNhdGlvbjogNTAwMCxcbiAgel9kaWFsb2c6IDcwMDBcbn07XG5cbmV4cG9ydCB7IHZhcnMgfTtcbiIsImltcG9ydCB7IGlzVG91Y2gsIGdldEFuaW1hdGlvbkVuZEV2ZW50LCBpc1NlcnZlciwgcG9pbnRlckVuZEV2ZW50LCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzIH0gZnJvbSAncG9seXRoZW5lLWNvcmUnO1xuaW1wb3J0IHsgdmFycyB9IGZyb20gJ3BvbHl0aGVuZS10aGVtZSc7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG52YXIgQU5JTUFUSU9OX0VORF9FVkVOVCA9IGdldEFuaW1hdGlvbkVuZEV2ZW50KCk7XG52YXIgREVGQVVMVF9TVEFSVF9PUEFDSVRZID0gMC4yO1xudmFyIERFRkFVTFRfRU5EX09QQUNJVFkgPSAwLjA7XG52YXIgREVGQVVMVF9TVEFSVF9TQ0FMRSA9IDAuMTtcbnZhciBERUZBVUxUX0VORF9TQ0FMRSA9IDIuMDtcbnZhciBPUEFDSVRZX0RFQ0FZX1ZFTE9DSVRZID0gMC4zNTtcblxudmFyIGFkZFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkU3R5bGVUb0hlYWQoaWQsIHN0eWxlc2hlZXQpIHtcbiAgaWYgKGlzU2VydmVyKSByZXR1cm47XG4gIHZhciBkb2N1bWVudFJlZiA9IHdpbmRvdy5kb2N1bWVudDtcbiAgdmFyIHN0eWxlRWwgPSBkb2N1bWVudFJlZi5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIHN0eWxlRWwuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xuICBzdHlsZUVsLmFwcGVuZENoaWxkKGRvY3VtZW50UmVmLmNyZWF0ZVRleHROb2RlKHN0eWxlc2hlZXQpKTtcbiAgZG9jdW1lbnRSZWYuaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsKTtcbn07XG5cbnZhciByZW1vdmVTdHlsZUZyb21IZWFkID0gZnVuY3Rpb24gcmVtb3ZlU3R5bGVGcm9tSGVhZChpZCkge1xuICBpZiAoaXNTZXJ2ZXIpIHJldHVybjtcbiAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXG4gIGlmIChlbCAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gIH1cbn07XG5cbnZhciByaXBwbGVBbmltYXRpb24gPSAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGUgPSBfcmVmLmUsXG4gICAgICBpZCA9IF9yZWYuaWQsXG4gICAgICBlbCA9IF9yZWYuZWwsXG4gICAgICBwcm9wcyA9IF9yZWYucHJvcHMsXG4gICAgICBjbGFzc2VzID0gX3JlZi5jbGFzc2VzO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgY2xhc3Nlcy5tYXNrKTtcbiAgICBlbC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgIHZhciB3YXZlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgd2F2ZXMuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgY2xhc3Nlcy53YXZlcyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHdhdmVzKTtcbiAgICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciB4ID0gaXNUb3VjaCAmJiBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0ucGFnZVggOiBlLmNsaWVudFg7XG4gICAgdmFyIHkgPSBpc1RvdWNoICYmIGUudG91Y2hlcyA/IGUudG91Y2hlc1swXS5wYWdlWSA6IGUuY2xpZW50WTtcbiAgICB2YXIgdyA9IGVsLm9mZnNldFdpZHRoO1xuICAgIHZhciBoID0gZWwub2Zmc2V0SGVpZ2h0O1xuICAgIHZhciB3YXZlUmFkaXVzID0gTWF0aC5zcXJ0KHcgKiB3ICsgaCAqIGgpO1xuICAgIHZhciBteCA9IHByb3BzLmNlbnRlciA/IHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyIDogeDtcbiAgICB2YXIgbXkgPSBwcm9wcy5jZW50ZXIgPyByZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC8gMiA6IHk7XG4gICAgdmFyIHJ4ID0gbXggLSByZWN0LmxlZnQgLSB3YXZlUmFkaXVzIC8gMjtcbiAgICB2YXIgcnkgPSBteSAtIHJlY3QudG9wIC0gd2F2ZVJhZGl1cyAvIDI7XG4gICAgdmFyIHN0YXJ0T3BhY2l0eSA9IHByb3BzLnN0YXJ0T3BhY2l0eSAhPT0gdW5kZWZpbmVkID8gcHJvcHMuc3RhcnRPcGFjaXR5IDogREVGQVVMVF9TVEFSVF9PUEFDSVRZO1xuICAgIHZhciBvcGFjaXR5RGVjYXlWZWxvY2l0eSA9IHByb3BzLm9wYWNpdHlEZWNheVZlbG9jaXR5ICE9PSB1bmRlZmluZWQgPyBwcm9wcy5vcGFjaXR5RGVjYXlWZWxvY2l0eSA6IE9QQUNJVFlfREVDQVlfVkVMT0NJVFk7XG4gICAgdmFyIGVuZE9wYWNpdHkgPSBwcm9wcy5lbmRPcGFjaXR5IHx8IERFRkFVTFRfRU5EX09QQUNJVFk7XG4gICAgdmFyIHN0YXJ0U2NhbGUgPSBwcm9wcy5zdGFydFNjYWxlIHx8IERFRkFVTFRfU1RBUlRfU0NBTEU7XG4gICAgdmFyIGVuZFNjYWxlID0gcHJvcHMuZW5kU2NhbGUgfHwgREVGQVVMVF9FTkRfU0NBTEU7XG4gICAgdmFyIGR1cmF0aW9uID0gcHJvcHMuZHVyYXRpb24gPyBwcm9wcy5kdXJhdGlvbiA6IDEgLyBvcGFjaXR5RGVjYXlWZWxvY2l0eSAqIDAuMjtcbiAgICB2YXIgY29sb3IgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuY29sb3I7XG4gICAgdmFyIHN0eWxlID0gd2F2ZXMuc3R5bGU7XG4gICAgc3R5bGUud2lkdGggPSBzdHlsZS5oZWlnaHQgPSB3YXZlUmFkaXVzICsgXCJweFwiO1xuICAgIHN0eWxlLnRvcCA9IHJ5ICsgXCJweFwiO1xuICAgIHN0eWxlLmxlZnQgPSByeCArIFwicHhcIjtcbiAgICBzdHlsZVtcImFuaW1hdGlvbi1kdXJhdGlvblwiXSA9IHN0eWxlW1wiLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb25cIl0gPSBzdHlsZVtcIi1tb3otYW5pbWF0aW9uLWR1cmF0aW9uXCJdID0gc3R5bGVbXCItby1hbmltYXRpb24tZHVyYXRpb25cIl0gPSBkdXJhdGlvbiArIFwic1wiO1xuICAgIHN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgIHN0eWxlLm9wYWNpdHkgPSBzdGFydE9wYWNpdHk7XG4gICAgc3R5bGUuYW5pbWF0aW9uTmFtZSA9IGlkO1xuICAgIHN0eWxlLmFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uID0gcHJvcHMuYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24gfHwgdmFycy5hbmltYXRpb25fY3VydmVfZGVmYXVsdDtcbiAgICB2YXIgcmlwcGxlU3R5bGVTaGVldCA9IFwiQGtleWZyYW1lcyBcIi5jb25jYXQoaWQsIFwiIHtcXG4gICAgICAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06c2NhbGUoXCIpLmNvbmNhdChzdGFydFNjYWxlLCBcIik7XFxuICAgICAgICBvcGFjaXR5OiBcIikuY29uY2F0KHN0YXJ0T3BhY2l0eSwgXCJcXG4gICAgICB9XFxuICAgICAgMTAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06c2NhbGUoXCIpLmNvbmNhdChlbmRTY2FsZSwgXCIpO1xcbiAgICAgICAgb3BhY2l0eTogXCIpLmNvbmNhdChlbmRPcGFjaXR5LCBcIjtcXG4gICAgICB9XFxuICAgIH1cIik7XG4gICAgYWRkU3R5bGVUb0hlYWQoaWQsIHJpcHBsZVN0eWxlU2hlZXQpO1xuXG4gICAgdmFyIGFuaW1hdGlvbkRvbmUgPSBmdW5jdGlvbiBhbmltYXRpb25Eb25lKGV2dCkge1xuICAgICAgcmVtb3ZlU3R5bGVGcm9tSGVhZChpZCk7XG4gICAgICB3YXZlcy5yZW1vdmVFdmVudExpc3RlbmVyKEFOSU1BVElPTl9FTkRfRVZFTlQsIGFuaW1hdGlvbkRvbmUsIGZhbHNlKTtcblxuICAgICAgaWYgKHByb3BzLnBlcnNpc3RlbnQpIHtcbiAgICAgICAgc3R5bGUub3BhY2l0eSA9IGVuZE9wYWNpdHk7XG4gICAgICAgIHN0eWxlLnRyYW5zZm9ybSA9IFwic2NhbGUoXCIgKyBlbmRTY2FsZSArIFwiKVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2F2ZXMuY2xhc3NMaXN0LnJlbW92ZShjbGFzc2VzLndhdmVzQW5pbWF0aW5nKTtcbiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKHdhdmVzKTtcbiAgICAgICAgZWwucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZShldnQpO1xuICAgIH07XG5cbiAgICB3YXZlcy5hZGRFdmVudExpc3RlbmVyKEFOSU1BVElPTl9FTkRfRVZFTlQsIGFuaW1hdGlvbkRvbmUsIGZhbHNlKTtcbiAgICB3YXZlcy5jbGFzc0xpc3QuYWRkKGNsYXNzZXMud2F2ZXNBbmltYXRpbmcpO1xuICB9KTtcbn0pO1xuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLXJpcHBsZVwiLFxuICAvLyBlbGVtZW50c1xuICBtYXNrOiBcInBlLXJpcHBsZV9fbWFza1wiLFxuICB3YXZlczogXCJwZS1yaXBwbGVfX3dhdmVzXCIsXG4gIC8vIHN0YXRlc1xuICB1bmNvbnN0cmFpbmVkOiBcInBlLXJpcHBsZS0tdW5jb25zdHJhaW5lZFwiLFxuICB3YXZlc0FuaW1hdGluZzogXCJwZS1yaXBwbGVfX3dhdmVzLS1hbmltYXRpbmdcIlxufTtcblxudmFyIF9SaXBwbGUgPSBmdW5jdGlvbiBfUmlwcGxlKF9yZWYpIHtcbiAgdmFyIGggPSBfcmVmLmgsXG4gICAgICBhID0gX3JlZi5hLFxuICAgICAgZ2V0UmVmID0gX3JlZi5nZXRSZWYsXG4gICAgICB1c2VSZWYgPSBfcmVmLnVzZVJlZixcbiAgICAgIHVzZVN0YXRlID0gX3JlZi51c2VTdGF0ZSxcbiAgICAgIHVzZUVmZmVjdCA9IF9yZWYudXNlRWZmZWN0LFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiaFwiLCBcImFcIiwgXCJnZXRSZWZcIiwgXCJ1c2VSZWZcIiwgXCJ1c2VTdGF0ZVwiLCBcInVzZUVmZmVjdFwiXSk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKCksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIGRvbUVsZW1lbnQgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0RG9tRWxlbWVudCA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIGFuaW1hdGlvbkNvdW50UmVmID0gdXNlUmVmKCk7XG4gIHZhciB0cmlnZ2VyRWwgPSBwcm9wcy50YXJnZXQgfHwgKGRvbUVsZW1lbnQgPyBkb21FbGVtZW50LnBhcmVudEVsZW1lbnQgOiB1bmRlZmluZWQpO1xuXG4gIHZhciB0YXAgPSBmdW5jdGlvbiB0YXAoZSkge1xuICAgIGlmIChwcm9wcy5kaXNhYmxlZCB8fCAhZG9tRWxlbWVudCB8fCAhcHJvcHMubXVsdGkgJiYgYW5pbWF0aW9uQ291bnRSZWYuY3VycmVudCA+IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuc3RhcnQpIHtcbiAgICAgIHByb3BzLnN0YXJ0KGUpO1xuICAgIH1cblxuICAgIHZhciBpZCA9IFwicmlwcGxlX2FuaW1hdGlvbl9cIi5jb25jYXQobmV3IERhdGUoKS5nZXRUaW1lKCkpO1xuICAgIHJpcHBsZUFuaW1hdGlvbih7XG4gICAgICBlOiBlLFxuICAgICAgaWQ6IGlkLFxuICAgICAgZWw6IGRvbUVsZW1lbnQsXG4gICAgICBwcm9wczogcHJvcHMsXG4gICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgfSkudGhlbihmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBpZiAocHJvcHMuZW5kKSB7XG4gICAgICAgIHByb3BzLmVuZChldnQpO1xuICAgICAgfVxuXG4gICAgICBhbmltYXRpb25Db3VudFJlZi5jdXJyZW50LS07XG4gICAgfSk7XG4gICAgYW5pbWF0aW9uQ291bnRSZWYuY3VycmVudCsrO1xuICB9OyAvLyBjb3VudFxuXG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBhbmltYXRpb25Db3VudFJlZi5jdXJyZW50ID0gMDtcbiAgfSwgW10pOyAvLyB0cmlnZ2VyRWxcblxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICh0cmlnZ2VyRWwgJiYgdHJpZ2dlckVsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHBvaW50ZXJFbmRFdmVudC5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgcmV0dXJuIHRyaWdnZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2dCwgdGFwLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHBvaW50ZXJFbmRFdmVudC5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICByZXR1cm4gdHJpZ2dlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0LCB0YXAsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfSwgW3RyaWdnZXJFbF0pO1xuXG4gIHZhciBjb21wb25lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzKHByb3BzKSwgZ2V0UmVmKGZ1bmN0aW9uIChkb20pIHtcbiAgICByZXR1cm4gZG9tICYmICFkb21FbGVtZW50ICYmIHNldERvbUVsZW1lbnQoZG9tKTtcbiAgfSksIHByb3BzLnRlc3RJZCAmJiB7XG4gICAgXCJkYXRhLXRlc3QtaWRcIjogcHJvcHMudGVzdElkXG4gIH0sIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLmNvbXBvbmVudCwgcHJvcHMudW5jb25zdHJhaW5lZCA/IGNsYXNzZXMudW5jb25zdHJhaW5lZCA6IG51bGwsIHByb3BzLnRvbmUgPT09IFwiZGFya1wiID8gXCJwZS1kYXJrLXRvbmVcIiA6IG51bGwsIHByb3BzLnRvbmUgPT09IFwibGlnaHRcIiA/IFwicGUtbGlnaHQtdG9uZVwiIDogbnVsbCwgcHJvcHMuY2xhc3NOYW1lIHx8IHByb3BzW2FbXCJjbGFzc1wiXV1dLmpvaW4oXCIgXCIpXG4gIH0pO1xuXG4gIHZhciBjb250ZW50ID0gW3Byb3BzLmJlZm9yZSwgcHJvcHMuYWZ0ZXJdO1xuICByZXR1cm4gaChwcm9wcy5lbGVtZW50IHx8IFwiZGl2XCIsIGNvbXBvbmVudFByb3BzLCBjb250ZW50KTtcbn07XG5cbmV4cG9ydCB7IF9SaXBwbGUsIHJpcHBsZUFuaW1hdGlvbiB9O1xuIiwiaW1wb3J0IHsgX1JpcHBsZSB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLXJpcHBsZSc7XG5pbXBvcnQgeyBjYXN0LCBoLCBhLCBnZXRSZWYsIHVzZVJlZiwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ2N5YW5vLW1pdGhyaWwnO1xuXG52YXIgUmlwcGxlID0gY2FzdChfUmlwcGxlLCB7XG4gIGg6IGgsXG4gIGE6IGEsXG4gIGdldFJlZjogZ2V0UmVmLFxuICB1c2VSZWY6IHVzZVJlZixcbiAgdXNlU3RhdGU6IHVzZVN0YXRlLFxuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdFxufSk7XG5SaXBwbGVbXCJkaXNwbGF5TmFtZVwiXSA9IFwiUmlwcGxlXCI7XG5cbmV4cG9ydCB7IFJpcHBsZSB9O1xuIiwiaW1wb3J0IHsgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcywgY2xhc3NGb3JTaXplIH0gZnJvbSAncG9seXRoZW5lLWNvcmUnO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG5cbiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuXG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtaWNvblwiLFxuICAvLyBzdGF0ZXNcbiAgYXZhdGFyOiBcInBlLWljb24tLWF2YXRhclwiLFxuICBsYXJnZTogXCJwZS1pY29uLS1sYXJnZVwiLFxuICBtZWRpdW06IFwicGUtaWNvbi0tbWVkaXVtXCIsXG4gIHJlZ3VsYXI6IFwicGUtaWNvbi0tcmVndWxhclwiLFxuICBzbWFsbDogXCJwZS1pY29uLS1zbWFsbFwiXG59O1xuXG52YXIgX0ljb24gPSBmdW5jdGlvbiBfSWNvbihfcmVmKSB7XG4gIHZhciBoID0gX3JlZi5oLFxuICAgICAgYSA9IF9yZWYuYSxcbiAgICAgIFNWRyA9IF9yZWYuU1ZHLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiaFwiLCBcImFcIiwgXCJTVkdcIl0pO1xuXG4gIHZhciBjb21wb25lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzKHByb3BzKSwgcHJvcHMudGVzdElkICYmIHtcbiAgICBcImRhdGEtdGVzdC1pZFwiOiBwcm9wcy50ZXN0SWRcbiAgfSwge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMuY29tcG9uZW50LCBjbGFzc0ZvclNpemUoY2xhc3NlcywgcHJvcHMuc2l6ZSksIHByb3BzLmF2YXRhciA/IGNsYXNzZXMuYXZhdGFyIDogbnVsbCwgcHJvcHMudG9uZSA9PT0gXCJkYXJrXCIgPyBcInBlLWRhcmstdG9uZVwiIDogbnVsbCwgcHJvcHMudG9uZSA9PT0gXCJsaWdodFwiID8gXCJwZS1saWdodC10b25lXCIgOiBudWxsLCBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHNbYVtcImNsYXNzXCJdXV0uam9pbihcIiBcIilcbiAgfSwgcHJvcHMuZXZlbnRzKTtcblxuICB2YXIgY29udGVudCA9IFtwcm9wcy5iZWZvcmUsIHByb3BzLmNvbnRlbnQgPyBwcm9wcy5jb250ZW50IDogcHJvcHMuc3ZnID8gaChTVkcsIHByb3BzLnN2ZykgOiBwcm9wcy5zcmMgPyBoKFwiaW1nXCIsIHtcbiAgICBzcmM6IHByb3BzLnNyY1xuICB9KSA6IHByb3BzLmNoaWxkcmVuLCBwcm9wcy5hZnRlcl07XG4gIHJldHVybiBoKHByb3BzLmVsZW1lbnQgfHwgXCJkaXZcIiwgY29tcG9uZW50UHJvcHMsIGNvbnRlbnQpO1xufTtcblxuZXhwb3J0IHsgX0ljb24gfTtcbiIsImltcG9ydCB7IGZpbHRlclN1cHBvcnRlZEF0dHJpYnV0ZXMgfSBmcm9tICdwb2x5dGhlbmUtY29yZSc7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLXN2Z1wiXG59O1xuXG52YXIgX1NWRyA9IGZ1bmN0aW9uIF9TVkcoX3JlZikge1xuICB2YXIgaCA9IF9yZWYuaCxcbiAgICAgIGEgPSBfcmVmLmEsXG4gICAgICB1c2VFZmZlY3QgPSBfcmVmLnVzZUVmZmVjdCxcbiAgICAgIHVzZVN0YXRlID0gX3JlZi51c2VTdGF0ZSxcbiAgICAgIGdldFJlZiA9IF9yZWYuZ2V0UmVmLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiaFwiLCBcImFcIiwgXCJ1c2VFZmZlY3RcIiwgXCJ1c2VTdGF0ZVwiLCBcImdldFJlZlwiXSk7XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKCksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIGRvbUVsZW1lbnQgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0RG9tRWxlbWVudCA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWRvbUVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFByZXZlbnQgdGhhdCBTVkcgZ2V0cyBrZXlib2FyZCBmb2N1c1xuXG5cbiAgICB2YXIgc3ZnRWxlbWVudCA9IGRvbUVsZW1lbnQucXVlcnlTZWxlY3RvcihcInN2Z1wiKTtcblxuICAgIGlmIChzdmdFbGVtZW50KSB7XG4gICAgICBzdmdFbGVtZW50LnNldEF0dHJpYnV0ZShcImZvY3VzYWJsZVwiLCBcImZhbHNlXCIpO1xuICAgIH1cbiAgfSwgW2RvbUVsZW1lbnRdKTtcblxuICB2YXIgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7fSwgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyhwcm9wcyksIGdldFJlZihmdW5jdGlvbiAoZG9tKSB7XG4gICAgcmV0dXJuIGRvbSAmJiAhZG9tRWxlbWVudCAmJiAoc2V0RG9tRWxlbWVudChkb20pLCBwcm9wcy5nZXRSZWYgJiYgcHJvcHMuZ2V0UmVmKGRvbSkpO1xuICB9KSwgcHJvcHMudGVzdElkICYmIHtcbiAgICBcImRhdGEtdGVzdC1pZFwiOiBwcm9wcy50ZXN0SWRcbiAgfSwge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMuY29tcG9uZW50LCBwcm9wcy50b25lID09PSBcImRhcmtcIiA/IFwicGUtZGFyay10b25lXCIgOiBudWxsLCBwcm9wcy50b25lID09PSBcImxpZ2h0XCIgPyBcInBlLWxpZ2h0LXRvbmVcIiA6IG51bGwsIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wc1thW1wiY2xhc3NcIl1dXS5qb2luKFwiIFwiKVxuICB9KTtcblxuICB2YXIgY29udGVudCA9IFtwcm9wcy5iZWZvcmUsIHByb3BzLmNvbnRlbnQgPyBwcm9wcy5jb250ZW50IDogcHJvcHMuY2hpbGRyZW4sIHByb3BzLmFmdGVyXTtcbiAgcmV0dXJuIGgocHJvcHMuZWxlbWVudCB8fCBcImRpdlwiLCBjb21wb25lbnRQcm9wcywgY29udGVudCk7XG59O1xuXG5leHBvcnQgeyBfU1ZHIH07XG4iLCJpbXBvcnQgeyBfU1ZHIH0gZnJvbSAncG9seXRoZW5lLWNvcmUtc3ZnJztcbmltcG9ydCB7IGNhc3QsIGgsIGEsIHVzZUVmZmVjdCwgdXNlU3RhdGUsIGdldFJlZiB9IGZyb20gJ2N5YW5vLW1pdGhyaWwnO1xuXG52YXIgU1ZHID0gY2FzdChfU1ZHLCB7XG4gIGg6IGgsXG4gIGE6IGEsXG4gIHVzZUVmZmVjdDogdXNlRWZmZWN0LFxuICB1c2VTdGF0ZTogdXNlU3RhdGUsXG4gIGdldFJlZjogZ2V0UmVmXG59KTtcblxuZXhwb3J0IHsgU1ZHIH07XG4iLCJpbXBvcnQgeyBfSWNvbiB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWljb24nO1xuaW1wb3J0IHsgU1ZHIH0gZnJvbSAncG9seXRoZW5lLW1pdGhyaWwtc3ZnJztcbmltcG9ydCB7IGNhc3QsIGgsIGEgfSBmcm9tICdjeWFuby1taXRocmlsJztcblxudmFyIEljb24gPSBjYXN0KF9JY29uLCB7XG4gIGg6IGgsXG4gIGE6IGEsXG4gIFNWRzogU1ZHXG59KTtcbkljb25bXCJkaXNwbGF5TmFtZVwiXSA9IFwiSWNvblwiO1xuXG5leHBvcnQgeyBJY29uIH07XG4iLCJpbXBvcnQgeyBfQnV0dG9uIH0gZnJvbSAncG9seXRoZW5lLWNvcmUtYnV0dG9uJztcbmltcG9ydCB7IFJpcHBsZSB9IGZyb20gJ3BvbHl0aGVuZS1taXRocmlsLXJpcHBsZSc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAncG9seXRoZW5lLW1pdGhyaWwtaWNvbic7XG5pbXBvcnQgeyBTaGFkb3cgfSBmcm9tICdwb2x5dGhlbmUtbWl0aHJpbC1zaGFkb3cnO1xuaW1wb3J0IHsgY2FzdCwgaCwgYSwgZ2V0UmVmLCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdjeWFuby1taXRocmlsJztcblxudmFyIEJ1dHRvbiA9IGNhc3QoX0J1dHRvbiwge1xuICBoOiBoLFxuICBhOiBhLFxuICBnZXRSZWY6IGdldFJlZixcbiAgdXNlU3RhdGU6IHVzZVN0YXRlLFxuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdCxcbiAgdXNlUmVmOiB1c2VSZWYsXG4gIFJpcHBsZTogUmlwcGxlLFxuICBTaGFkb3c6IFNoYWRvdyxcbiAgSWNvbjogSWNvblxufSk7XG5cbmV4cG9ydCB7IEJ1dHRvbiB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29sb3IsIHNlbCwgY3JlYXRlTGF5b3V0LCByZ2JhLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgdmFycyB9IGZyb20gJ3BvbHl0aGVuZS10aGVtZSc7XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtc3Bpbm5lclwiLFxuICAvLyBlbGVtZW50c1xuICBhbmltYXRpb246IFwicGUtc3Bpbm5lcl9fYW5pbWF0aW9uXCIsXG4gIHBsYWNlaG9sZGVyOiBcInBlLXNwaW5uZXJfX3BsYWNlaG9sZGVyXCIsXG4gIC8vIHN0YXRlc1xuICBhbmltYXRlZDogXCJwZS1zcGlubmVyLS1hbmltYXRlZFwiLFxuICBmYWI6IFwicGUtc3Bpbm5lci0tZmFiXCIsXG4gIGxhcmdlOiBcInBlLXNwaW5uZXItLWxhcmdlXCIsXG4gIG1lZGl1bTogXCJwZS1zcGlubmVyLS1tZWRpdW1cIixcbiAgcGVybWFuZW50OiBcInBlLXNwaW5uZXItLXBlcm1hbmVudFwiLFxuICByYWlzZWQ6IFwicGUtc3Bpbm5lci0tcmFpc2VkXCIsXG4gIHJlZ3VsYXI6IFwicGUtc3Bpbm5lci0tcmVndWxhclwiLFxuICBzaW5nbGVDb2xvcjogXCJwZS1zcGlubmVyLS1zaW5nbGUtY29sb3JcIixcbiAgc21hbGw6IFwicGUtc3Bpbm5lci0tc21hbGxcIixcbiAgdmlzaWJsZTogXCJwZS1zcGlubmVyLS12aXNpYmxlXCJcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgZ2VuZXJhbEZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxufTtcblxudmFyIHRpbnRGbnMgPSBmdW5jdGlvbiB0aW50Rm5zKHRpbnQpIHtcbiAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9yYWlzZWRfYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc3Bpbm5lci0tcmFpc2VkXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfcmFpc2VkX2JhY2tncm91bmRcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pO1xufTtcblxudmFyIGxpZ2h0VGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImRhcmtcIikpO1xuXG52YXIgY29sb3IgPSBjcmVhdGVDb2xvcih7XG4gIHZhckZuczoge1xuICAgIGxpZ2h0VGludEZuczogbGlnaHRUaW50Rm5zLFxuICAgIGRhcmtUaW50Rm5zOiBkYXJrVGludEZuc1xuICB9XG59KTtcblxudmFyIHNpemVzID0gZnVuY3Rpb24gc2l6ZXMoc2l6ZSkge1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBzaXplICsgXCJweFwiLFxuICAgIGhlaWdodDogc2l6ZSArIFwicHhcIlxuICB9O1xufTtcblxudmFyIHJhaXNlZFNpemUgPSBmdW5jdGlvbiByYWlzZWRTaXplKHNpemUpIHtcbiAgdmFyIHBhZGRpbmcgPSBNYXRoLnJvdW5kKHNpemUgKiAwLjI1KTsgLy8gb25seSB1c2Ugcm91bmRlZCBudW1iZXIgdG8gcHJldmVudCBzdWItcGl4ZWwgYWxpZ25tZW50IGlzc3Vlc1xuXG4gIHZhciBwYWRkZWRTaXplID0gc2l6ZSArIHBhZGRpbmcgKiAyO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiBwYWRkZWRTaXplICsgXCJweFwiLFxuICAgIGhlaWdodDogcGFkZGVkU2l6ZSArIFwicHhcIixcbiAgICBwYWRkaW5nOiBwYWRkaW5nICsgXCJweFwiXG4gIH07XG59O1xuXG52YXIgdmFyRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiBcImFsbFwiLFxuICAgICAgXCIucGUtc3Bpbm5lci0tcmFpc2VkXCI6IHtcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjUwJVwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25fc2hvd19jc3M6IGZ1bmN0aW9uIGFuaW1hdGlvbl9zaG93X2NzcyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1zcGlubmVyLS12aXNpYmxlLCAmLnBlLXNwaW5uZXItLXBlcm1hbmVudFwiOiBbdmFycy5hbmltYXRpb25fc2hvd19jc3NdXG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25faGlkZV9jc3M6IGZ1bmN0aW9uIGFuaW1hdGlvbl9oaWRlX2NzcyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIHNlbGVjdG9yLCB2YXJzLmFuaW1hdGlvbl9oaWRlX2Nzcyk7XG4gIH0sXG4gIGFuaW1hdGlvbl9kZWxheTogZnVuY3Rpb24gYW5pbWF0aW9uX2RlbGF5KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIHRyYW5zaXRpb25EZWxheTogdmFycy5hbmltYXRpb25fZGVsYXlcbiAgICB9KV07XG4gIH0sXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogZnVuY3Rpb24gYW5pbWF0aW9uX2R1cmF0aW9uKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdmFycy5hbmltYXRpb25fZHVyYXRpb25cbiAgICB9KV07XG4gIH0sXG4gIGFuaW1hdGlvbl90aW1pbmdfZnVuY3Rpb246IGZ1bmN0aW9uIGFuaW1hdGlvbl90aW1pbmdfZnVuY3Rpb24oc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiB2YXJzLmFuaW1hdGlvbl90aW1pbmdfZnVuY3Rpb25cbiAgICB9KV07XG4gIH0sXG4gIHNpemVfc21hbGw6IGZ1bmN0aW9uIHNpemVfc21hbGwoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc3Bpbm5lci0tc21hbGxcIjogc2l6ZXModmFycy5zaXplX3NtYWxsKSxcbiAgICAgIFwiLnBlLXNwaW5uZXItLXJhaXNlZFwiOiB7XG4gICAgICAgIFwiLnBlLXNwaW5uZXItLXNtYWxsXCI6IHJhaXNlZFNpemUodmFycy5zaXplX3NtYWxsKVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgc2l6ZV9yZWd1bGFyOiBmdW5jdGlvbiBzaXplX3JlZ3VsYXIoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc3Bpbm5lci0tcmVndWxhclwiOiBzaXplcyh2YXJzLnNpemVfcmVndWxhciksXG4gICAgICBcIi5wZS1zcGlubmVyLS1yYWlzZWRcIjoge1xuICAgICAgICBcIi5wZS1zcGlubmVyLS1yZWd1bGFyXCI6IHJhaXNlZFNpemUodmFycy5zaXplX3JlZ3VsYXIpXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBzaXplX21lZGl1bTogZnVuY3Rpb24gc2l6ZV9tZWRpdW0oc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc3Bpbm5lci0tbWVkaXVtXCI6IHNpemVzKHZhcnMuc2l6ZV9tZWRpdW0pLFxuICAgICAgXCIucGUtc3Bpbm5lci0tcmFpc2VkXCI6IHtcbiAgICAgICAgXCIucGUtc3Bpbm5lci0tbWVkaXVtXCI6IHJhaXNlZFNpemUodmFycy5zaXplX21lZGl1bSlcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIHNpemVfbGFyZ2U6IGZ1bmN0aW9uIHNpemVfbGFyZ2Uoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc3Bpbm5lci0tbGFyZ2VcIjogc2l6ZXModmFycy5zaXplX2xhcmdlKSxcbiAgICAgIFwiLnBlLXNwaW5uZXItLXJhaXNlZFwiOiB7XG4gICAgICAgIFwiLnBlLXNwaW5uZXItLWxhcmdlXCI6IHJhaXNlZFNpemUodmFycy5zaXplX2xhcmdlKVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgc2l6ZV9mYWI6IGZ1bmN0aW9uIHNpemVfZmFiKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXNwaW5uZXItLWZhYlwiOiBzaXplcyh2YXJzLnNpemVfZmFiKSxcbiAgICAgIFwiLnBlLXNwaW5uZXItLXJhaXNlZFwiOiB7XG4gICAgICAgIFwiLnBlLXNwaW5uZXItLWZhYlwiOiByYWlzZWRTaXplKHZhcnMuc2l6ZV9mYWIpXG4gICAgICB9XG4gICAgfSldO1xuICB9XG59O1xudmFyIGxheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zXG59KTtcblxuLy8gQHRzLWNoZWNrXG4vKipcbiAqIEB0eXBlIHtCYXNlU3Bpbm5lclZhcnN9IGJhc2VTcGlubmVyVmFyc1xuICovXG5cbnZhciBiYXNlU3Bpbm5lclZhcnMgPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBnZW5lcmFsIHN0eWxlcywgbm90IGRlZmluZWQgYnkgdmFyaWFibGVzXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogdHJ1ZSxcbiAgYW5pbWF0aW9uX2RlbGF5OiBcIjBzXCIsXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogXCIuMjIwc1wiLFxuICBhbmltYXRpb25faGlkZV9jc3M6IFwib3BhY2l0eTogMDtcIixcbiAgYW5pbWF0aW9uX3Nob3dfY3NzOiBcIm9wYWNpdHk6IDE7XCIsXG4gIGFuaW1hdGlvbl90aW1pbmdfZnVuY3Rpb246IFwiZWFzZS1pbi1vdXRcIixcbiAgc2l6ZV9mYWI6IDcgKiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQsXG4gIHNpemVfbGFyZ2U6IDYgKiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQsXG4gIHNpemVfbWVkaXVtOiA1ICogdmFycy5ncmlkX3VuaXRfY29tcG9uZW50LFxuICBzaXplX3JlZ3VsYXI6IDQgKiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQsXG4gIHNpemVfc21hbGw6IDMgKiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQsXG4gIGNvbG9yX2xpZ2h0X3JhaXNlZF9iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfYmFja2dyb3VuZCksXG4gIGNvbG9yX2RhcmtfcmFpc2VkX2JhY2tncm91bmQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9iYWNrZ3JvdW5kKSAvLyBhbHNvIHVzZSBsaWdodCBiYWNrZ3JvdW5kIHdpdGggZGFyayB0b25lXG5cbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXQsIGNvbG9yXTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudCk7XG52YXIgYWRkU3R5bGUgPSBzdHlsZXIuY3JlYXRlQWRkU3R5bGUoc2VsZWN0b3IsIGZucywgYmFzZVNwaW5uZXJWYXJzKTtcbnZhciBnZXRTdHlsZSA9IHN0eWxlci5jcmVhdGVHZXRTdHlsZShzZWxlY3RvciwgZm5zLCBiYXNlU3Bpbm5lclZhcnMpO1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogYmFzZVNwaW5uZXJWYXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBsYXlvdXQsIGJhc2VTcGlubmVyVmFycyBhcyB2YXJzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVMYXlvdXQsIHNlbCwgbWl4aW4sIHN0eWxlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNzcyc7XG5pbXBvcnQgeyB2YXJzIGFzIHZhcnMkMSB9IGZyb20gJ3BvbHl0aGVuZS10aGVtZSc7XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtc2hhZG93XCIsXG4gIC8vIGVsZW1lbnRzICAgICAgXG4gIGJvdHRvbVNoYWRvdzogXCJwZS1zaGFkb3dfX2JvdHRvbVwiLFxuICB0b3BTaGFkb3c6IFwicGUtc2hhZG93X190b3BcIixcbiAgLy8gc3RhdGVzXG4gIGFuaW1hdGVkOiBcInBlLXNoYWRvdy0tYW5pbWF0ZWRcIixcbiAgZGVwdGhfbjogXCJwZS1zaGFkb3ctLWRlcHRoLVwiLFxuICB3aXRoX2FjdGl2ZV9zaGFkb3c6IFwicGUtd2l0aC1hY3RpdmUtc2hhZG93XCJcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbnZhciBfY3JlYXRlU2hhZG93Rm9yU2VsZWN0b3IgPSBmdW5jdGlvbiBfY3JlYXRlU2hhZG93Rm9yU2VsZWN0b3Iod2hpY2gsIGRlcHRoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW19jcmVhdGVSZWd1bGFyU2hhZG93Rm9yU2VsZWN0b3Iod2hpY2gsIGRlcHRoLCBzZWxlY3RvciwgdmFycyksIF9jcmVhdGVBY3RpdmVTaGFkb3dGb3JTZWxlY3Rvcih3aGljaCwgZGVwdGgsIHNlbGVjdG9yLCB2YXJzKV07XG4gIH07XG59O1xuXG52YXIgX2NyZWF0ZVJlZ3VsYXJTaGFkb3dGb3JTZWxlY3RvciA9IGZ1bmN0aW9uIF9jcmVhdGVSZWd1bGFyU2hhZG93Rm9yU2VsZWN0b3Iod2hpY2gsIGRlcHRoLCBzZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gc2VsKHNlbGVjdG9yLCBfZGVmaW5lUHJvcGVydHkoe30sIFwiLnBlLXNoYWRvdy0tZGVwdGgtXCIuY29uY2F0KGRlcHRoLCBcIiAucGUtc2hhZG93X19cIikuY29uY2F0KHdoaWNoKSwge1xuICAgIGJveFNoYWRvdzogdmFyc1tcInNoYWRvd19cIi5jb25jYXQod2hpY2gsIFwiX2RlcHRoX1wiKS5jb25jYXQoZGVwdGgpXVxuICB9KSk7XG59O1xuXG52YXIgX2NyZWF0ZUFjdGl2ZVNoYWRvd0ZvclNlbGVjdG9yID0gZnVuY3Rpb24gX2NyZWF0ZUFjdGl2ZVNoYWRvd0ZvclNlbGVjdG9yKHdoaWNoLCBkZXB0aCwgc2VsZWN0b3IsIHZhcnMpIHtcbiAgaWYgKGRlcHRoID09PSA1KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIGhvdmVyRGVwdGggPSBkZXB0aCArIDE7XG4gIHZhciBob3ZlclNlbGVjdG9yID0gXCIucGUtd2l0aC1hY3RpdmUtc2hhZG93LnBlLXNoYWRvdy0tZGVwdGgtXCIuY29uY2F0KGhvdmVyRGVwdGgpO1xuICByZXR1cm4gW3NlbChcIlwiLmNvbmNhdChob3ZlclNlbGVjdG9yLCBcIjpmb2N1cyBcIikuY29uY2F0KHNlbGVjdG9yLCBcIiwgXCIpLmNvbmNhdChob3ZlclNlbGVjdG9yLCBcIjphY3RpdmUgXCIpLmNvbmNhdChzZWxlY3RvciksIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCIgLnBlLXNoYWRvd19fXCIuY29uY2F0KHdoaWNoKSwge1xuICAgIGJveFNoYWRvdzogdmFyc1tcInNoYWRvd19cIi5jb25jYXQod2hpY2gsIFwiX2RlcHRoX1wiKS5jb25jYXQoaG92ZXJEZXB0aCldXG4gIH0pKV07XG59O1xuXG52YXIgX2NyZWF0ZUFjdGl2ZVNoYWRvd1RyYW5zaXRpb24gPSBmdW5jdGlvbiBfY3JlYXRlQWN0aXZlU2hhZG93VHJhbnNpdGlvbihzZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gc2VsKFwiLnBlLXdpdGgtYWN0aXZlLXNoYWRvdyBcIi5jb25jYXQoc2VsZWN0b3IpLCB7XG4gICAgXCIgLnBlLXNoYWRvd19fYm90dG9tLCAucGUtc2hhZG93X190b3BcIjoge1xuICAgICAgdHJhbnNpdGlvbjogdmFycy50cmFuc2l0aW9uXG4gICAgfVxuICB9KTtcbn07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciBcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YXJzIFxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoIFxuICogQHBhcmFtIHtcInRvcFwifFwiYm90dG9tXCJ9IHdoaWNoIFxuICovXG5cblxudmFyIF9jcmVhdGVTaGFkb3cgPSBmdW5jdGlvbiBfY3JlYXRlU2hhZG93KHNlbGVjdG9yLCB2YXJzLCBkZXB0aCwgd2hpY2gpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3RvciwgX2RlZmluZVByb3BlcnR5KHt9LCBcIiAucGUtc2hhZG93X19cIi5jb25jYXQod2hpY2gpLCB7XG4gICAgYm94U2hhZG93OiB2YXJzW1wic2hhZG93X1wiLmNvbmNhdCh3aGljaCwgXCJfZGVwdGhfXCIpLmNvbmNhdChkZXB0aCldXG4gIH0pKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciBcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YXJzIFxuICogQHBhcmFtIHtudW1iZXJ9IGRlcHRoXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cblxudmFyIHNoYWRvdyA9IGZ1bmN0aW9uIHNoYWRvdyhzZWxlY3RvciwgdmFycywgZGVwdGgpIHtcbiAgcmV0dXJuIFtfY3JlYXRlU2hhZG93KHNlbGVjdG9yLCB2YXJzLCBkZXB0aCwgXCJ0b3BcIiksIF9jcmVhdGVTaGFkb3coc2VsZWN0b3IsIHZhcnMsIGRlcHRoLCBcImJvdHRvbVwiKV07XG59O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgXG4gKiBAcGFyYW0ge29iamVjdH0gdmFycyBcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuXG52YXIgc2hhZG93X2RlcHRoID0gZnVuY3Rpb24gc2hhZG93X2RlcHRoKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiB2YXJzLnNoYWRvd19kZXB0aCAhPT0gdW5kZWZpbmVkID8gc2hhZG93KHNlbGVjdG9yLCB2YXJzLCB2YXJzLnNoYWRvd19kZXB0aCkgOiBudWxsO1xufTtcblxudmFyIHRyYW5zaXRpb24gPSBmdW5jdGlvbiB0cmFuc2l0aW9uKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgXCIucGUtc2hhZG93LS1hbmltYXRlZFwiOiB7XG4gICAgICBcIiAucGUtc2hhZG93X19ib3R0b20sIC5wZS1zaGFkb3dfX3RvcFwiOiB7XG4gICAgICAgIHRyYW5zaXRpb246IHZhcnMudHJhbnNpdGlvblxuICAgICAgfVxuICAgIH1cbiAgfSksIF9jcmVhdGVBY3RpdmVTaGFkb3dUcmFuc2l0aW9uKHNlbGVjdG9yLCB2YXJzKV07XG59O1xuXG52YXIgc2hhcmVkVmFyRm5zID0ge1xuICBzaGFkb3dfZGVwdGg6IHNoYWRvd19kZXB0aFxufTtcblxudmFyIHZhckZucyA9IF9leHRlbmRzKHt9LCB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbbWl4aW4uZml0KCksIHNoYWRvdyhzZWxlY3RvciwgdmFycywgMSksIHtcbiAgICAgIGJvcmRlclJhZGl1czogXCJpbmhlcml0XCIsXG4gICAgICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcbiAgICAgIFwiIC5wZS1zaGFkb3dfX2JvdHRvbSwgLnBlLXNoYWRvd19fdG9wXCI6IFttaXhpbi5maXQoKSwge1xuICAgICAgICBib3JkZXJSYWRpdXM6IFwiaW5oZXJpdFwiXG4gICAgICB9XVxuICAgIH1dKV07XG4gIH0sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb24sXG4gIHNoYWRvd19kZXB0aDogc2hhZG93X2RlcHRoXG59LCBbMCwgMSwgMiwgMywgNCwgNV0ucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGRlcHRoKSB7XG4gIHJldHVybiBhY2NbXCJzaGFkb3dfdG9wX2RlcHRoX1wiLmNvbmNhdChkZXB0aCldID0gX2NyZWF0ZVNoYWRvd0ZvclNlbGVjdG9yKFwidG9wXCIsIGRlcHRoKSwgYWNjW1wic2hhZG93X2JvdHRvbV9kZXB0aF9cIi5jb25jYXQoZGVwdGgpXSA9IF9jcmVhdGVTaGFkb3dGb3JTZWxlY3RvcihcImJvdHRvbVwiLCBkZXB0aCksIGFjYztcbn0sIHt9KSk7XG5cbnZhciBsYXlvdXQgPSBjcmVhdGVMYXlvdXQoe1xuICB2YXJGbnM6IHZhckZuc1xufSk7XG5cbnZhciBzaGFyZWRWYXJzID0ge1xuICBzaGFkb3dfdG9wX2RlcHRoXzA6IFwibm9uZVwiLFxuICBzaGFkb3dfYm90dG9tX2RlcHRoXzA6IFwibm9uZVwiLFxuICBzaGFkb3dfdG9wX2RlcHRoXzE6IFwibm9uZVwiLFxuICBzaGFkb3dfYm90dG9tX2RlcHRoXzE6IFwiMCAxcHggNHB4IDAgcmdiYSgwLCAwLCAwLCAwLjM3KVwiLFxuICBzaGFkb3dfdG9wX2RlcHRoXzI6IFwiMCAycHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjIpXCIsXG4gIHNoYWRvd19ib3R0b21fZGVwdGhfMjogXCIwIDZweCAxMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjMpXCIsXG4gIHNoYWRvd190b3BfZGVwdGhfMzogXCIwIDExcHggN3B4IDAgcmdiYSgwLCAwLCAwLCAwLjE5KVwiLFxuICBzaGFkb3dfYm90dG9tX2RlcHRoXzM6IFwiMCAxM3B4IDI1cHggMCByZ2JhKDAsIDAsIDAsIDAuMylcIixcbiAgc2hhZG93X3RvcF9kZXB0aF80OiBcIjAgMTRweCAxMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjE3KVwiLFxuICBzaGFkb3dfYm90dG9tX2RlcHRoXzQ6IFwiMCAyMHB4IDQwcHggMCByZ2JhKDAsIDAsIDAsIDAuMylcIixcbiAgc2hhZG93X3RvcF9kZXB0aF81OiBcIjAgMTdweCAxN3B4IDAgcmdiYSgwLCAwLCAwLCAwLjE1KVwiLFxuICBzaGFkb3dfYm90dG9tX2RlcHRoXzU6IFwiMCAyN3B4IDU1cHggMCByZ2JhKDAsIDAsIDAsIDAuMylcIixcbiAgLy8gdGhlbWUgdmFyc1xuICBzaGFkb3dfZGVwdGg6IHVuZGVmaW5lZFxufTtcbnZhciB2YXJzID0gX29iamVjdFNwcmVhZDIoe1xuICAvKipcbiAgICogR2VuZXJhdGUgZ2VuZXJhbCBzdHlsZXMsIG5vdCBkZWZpbmVkIGJ5IHZhcmlhYmxlc1xuICAgKi9cbiAgZ2VuZXJhbF9zdHlsZXM6IHRydWUsXG4gIHRyYW5zaXRpb246IFwiYm94LXNoYWRvdyBcIi5jb25jYXQodmFycyQxLmFuaW1hdGlvbl9kdXJhdGlvbiwgXCIgZWFzZS1vdXRcIilcbn0sIHNoYXJlZFZhcnMpO1xuXG4vLyBAdHMtY2hlY2tcbnZhciBmbnMgPSBbbGF5b3V0XTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudCk7XG52YXIgYWRkU3R5bGUgPSBzdHlsZXIuY3JlYXRlQWRkU3R5bGUoc2VsZWN0b3IsIGZucywgdmFycyk7XG52YXIgZ2V0U3R5bGUgPSBzdHlsZXIuY3JlYXRlR2V0U3R5bGUoc2VsZWN0b3IsIGZucywgdmFycyk7XG5cbnZhciBhZGRHZW5lcmFsU3R5bGVUb0hlYWQgPSBmdW5jdGlvbiBhZGRHZW5lcmFsU3R5bGVUb0hlYWQoKSB7XG4gIHJldHVybiBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW3NlbGVjdG9yXSxcbiAgICBmbnM6IGZucyxcbiAgICB2YXJzOiB2YXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgZ2V0U3R5bGUsIGxheW91dCwgc2hhcmVkVmFyRm5zLCBzaGFyZWRWYXJzLCB2YXJzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVMYXlvdXQsIHNlbCwgbWl4aW4sIGNyZWF0ZUNvbG9yLCBzZWxlY3RvclJUTCwgcmdiYSwgc3R5bGVyIH0gZnJvbSAncG9seXRoZW5lLWNvcmUtY3NzJztcbmltcG9ydCB7IHNoYXJlZFZhckZucywgc2hhcmVkVmFycyB9IGZyb20gJ3BvbHl0aGVuZS1jc3Mtc2hhZG93JztcbmltcG9ydCB7IHZhcnMgfSBmcm9tICdwb2x5dGhlbmUtdGhlbWUnO1xuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLXRleHQtYnV0dG9uXCIsXG4gIFwic3VwZXJcIjogXCJwZS1idXR0b25cIixcbiAgcm93OiBcInBlLWJ1dHRvbi1yb3dcIixcbiAgLy8gZWxlbWVudHMgICAgICBcbiAgY29udGVudDogXCJwZS1idXR0b25fX2NvbnRlbnRcIixcbiAgbGFiZWw6IFwicGUtYnV0dG9uX19sYWJlbFwiLFxuICB0ZXh0TGFiZWw6IFwicGUtYnV0dG9uX190ZXh0LWxhYmVsXCIsXG4gIHdhc2g6IFwicGUtYnV0dG9uX193YXNoXCIsXG4gIHdhc2hDb2xvcjogXCJwZS1idXR0b25fX3dhc2gtY29sb3JcIixcbiAgZHJvcGRvd246IFwicGUtYnV0dG9uX19kcm9wZG93blwiLFxuICAvLyBzdGF0ZXMgICAgICBcbiAgYm9yZGVyOiBcInBlLWJ1dHRvbi0tYm9yZGVyXCIsXG4gIGNvbnRhaW5lZDogXCJwZS1idXR0b24tLWNvbnRhaW5lZFwiLFxuICBkaXNhYmxlZDogXCJwZS1idXR0b24tLWRpc2FibGVkXCIsXG4gIGRyb3Bkb3duQ2xvc2VkOiBcInBlLWJ1dHRvbi0tZHJvcGRvd24tY2xvc2VkXCIsXG4gIGRyb3Bkb3duT3BlbjogXCJwZS1idXR0b24tLWRyb3Bkb3duLW9wZW5cIixcbiAgZXh0cmFXaWRlOiBcInBlLWJ1dHRvbi0tZXh0cmEtd2lkZVwiLFxuICBoYXNEcm9wZG93bjogXCJwZS1idXR0b24tLWRyb3Bkb3duXCIsXG4gIGhpZ2hMYWJlbDogXCJwZS1idXR0b24tLWhpZ2gtbGFiZWxcIixcbiAgaW5hY3RpdmU6IFwicGUtYnV0dG9uLS1pbmFjdGl2ZVwiLFxuICByYWlzZWQ6IFwicGUtYnV0dG9uLS1yYWlzZWRcIixcbiAgc2VsZWN0ZWQ6IFwicGUtYnV0dG9uLS1zZWxlY3RlZFwiLFxuICBzZXBhcmF0b3JBdFN0YXJ0OiBcInBlLWJ1dHRvbi0tc2VwYXJhdG9yLXN0YXJ0XCIsXG4gIGhhc0hvdmVyOiBcInBlLWJ1dHRvbi0taGFzLWhvdmVyXCJcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbnZhciB2YXJGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICB1c2VyU2VsZWN0OiBcIm5vbmVcIixcbiAgICAgIFwiLW1vei11c2VyLXNlbGVjdFwiOiBcIm5vbmVcIixcbiAgICAgIG91dGxpbmU6IFwibm9uZVwiLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHRleHREZWNvcmF0aW9uOiBcIm5vbmVcIixcbiAgICAgIHRleHRBbGlnbjogXCJjZW50ZXJcIixcbiAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gICAgICBcIi5wZS1idXR0b24tLXNlbGVjdGVkLCAmLnBlLWJ1dHRvbi0tZGlzYWJsZWQsICYucGUtYnV0dG9uLS1pbmFjdGl2ZVwiOiB7XG4gICAgICAgIGN1cnNvcjogXCJkZWZhdWx0XCIsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogXCJpbmhlcml0XCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtYnV0dG9uX19sYWJlbFwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcImluaGVyaXRcIixcbiAgICAgICAgcG9pbnRlckV2ZW50czogXCJub25lXCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtYnV0dG9uX193YXNoLCAucGUtYnV0dG9uX193YXNoLWNvbG9yXCI6IFttaXhpbi5maXQoKSwge1xuICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgIGJvcmRlclJhZGl1czogXCJpbmhlcml0XCIsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiXG4gICAgICB9XVxuICAgIH0pLCB7XG4gICAgICBcIi5wZS1idXR0b24tcm93XCI6IHtcbiAgICAgICAgLy8gcHJldmVudCBpbmxpbmUgYmxvY2sgc3R5bGUgdG8gYWRkIGV4dHJhIHNwYWNlOlxuICAgICAgICBmb250U2l6ZTogMCxcbiAgICAgICAgbGluZUhlaWdodDogMFxuICAgICAgfVxuICAgIH1dO1xuICB9LFxuICByb3dfbWFyZ2luX2g6IGZ1bmN0aW9uIHJvd19tYXJnaW5faChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbe1xuICAgICAgXCIucGUtYnV0dG9uLXJvd1wiOiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgICBtYXJnaW46IFwiMCAtXCIuY29uY2F0KHZhcnMucm93X21hcmdpbl9oLCBcInB4XCIpXG4gICAgICB9LCBcIiBcIi5jb25jYXQoc2VsZWN0b3IpLCB7XG4gICAgICAgIG1hcmdpbjogXCIwIFwiLmNvbmNhdCh2YXJzLnJvd19tYXJnaW5faCwgXCJweFwiKVxuICAgICAgfSlcbiAgICB9XTtcbiAgfVxufTtcbnZhciBzdXBlckxheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zXG59KTtcblxudmFyIF9ib3JkZXIgPSBmdW5jdGlvbiBib3JkZXIoc2VsZWN0b3IsIHZhcnMsIHRpbnQpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiOm5vdCgucGUtYnV0dG9uLS1kaXNhYmxlZClcIjoge1xuICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfYm9yZGVyXCJdXG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBnZW5lcmFsRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuLyoqXG4gKiBAcGFyYW0ge3RpbnR9IHRpbnQgXG4gKi9cblxudmFyIHRpbnRGbnMgPSBmdW5jdGlvbiB0aW50Rm5zKHRpbnQpIHtcbiAgdmFyIF9yZWY7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfdGV4dFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCI6bm90KC5wZS1idXR0b24tLWRpc2FibGVkKVwiOiB7XG4gICAgICAgIFwiJiwgJjpsaW5rLCAmOnZpc2l0ZWRcIjoge1xuICAgICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdGV4dFwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfZGlzYWJsZWRfdGV4dFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtYnV0dG9uLS1kaXNhYmxlZFwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfZGlzYWJsZWRfdGV4dFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2JhY2tncm91bmRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiOm5vdCgucGUtYnV0dG9uLS1kaXNhYmxlZCk6bm90KC5wZS1idXR0b24tLXNlbGVjdGVkKVwiOiB7XG4gICAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2JhY2tncm91bmRcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2FjdGl2ZV9iYWNrZ3JvdW5kXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIjpub3QoLnBlLWJ1dHRvbi0tZGlzYWJsZWQpXCI6IHtcbiAgICAgICAgXCIucGUtYnV0dG9uLS1zZWxlY3RlZFwiOiB7XG4gICAgICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9hY3RpdmVfYmFja2dyb3VuZFwiXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2Rpc2FibGVkX2JhY2tncm91bmRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWJ1dHRvbi0tZGlzYWJsZWRcIjoge1xuICAgICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9kaXNhYmxlZF9iYWNrZ3JvdW5kXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl93YXNoX2JhY2tncm91bmRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX3dhc2gtY29sb3JcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl93YXNoX2JhY2tncm91bmRcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl93YXNoX29wYWNpdHlcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX3dhc2gtY29sb3JcIjoge1xuICAgICAgICBvcGFjaXR5OiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfd2FzaF9vcGFjaXR5XCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfYm9yZGVyXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbX2JvcmRlcihcIlwiLmNvbmNhdChzZWxlY3RvciwgXCIucGUtYnV0dG9uLS1ib3JkZXJcIiksIHZhcnMsIHRpbnQpXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImJvcmRlclwiLCBmdW5jdGlvbiBib3JkZXIoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW19ib3JkZXIoc2VsZWN0b3IsIHZhcnMsIHRpbnQpXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2FjdGl2ZV9ib3JkZXJcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWJ1dHRvbi0tYm9yZGVyLnBlLWJ1dHRvbi0tc2VsZWN0ZWRcIjoge1xuICAgICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgICBib3JkZXJDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2FjdGl2ZV9ib3JkZXJcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2Rpc2FibGVkX2JvcmRlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtYnV0dG9uLS1ib3JkZXIucGUtYnV0dG9uLS1kaXNhYmxlZFwiOiB7XG4gICAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICAgIGJvcmRlckNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfZGlzYWJsZWRfYm9yZGVyXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9pY29uXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtYnV0dG9uX19kcm9wZG93blwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaWNvblwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3NlcGFyYXRvclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtYnV0dG9uLS1zZXBhcmF0b3Itc3RhcnRcIjoge1xuICAgICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgICBib3JkZXJDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3NlcGFyYXRvclwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX3JlZjtcbn07XG4vKipcbiAqIEBwYXJhbSB7dGludH0gdGludCBcbiAqL1xuXG5cbnZhciBob3ZlclRpbnRGbnMgPSBmdW5jdGlvbiBob3ZlclRpbnRGbnModGludCkge1xuICB2YXIgX3JlZjI7XG5cbiAgcmV0dXJuIF9yZWYyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ob3ZlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCI6bm90KC5wZS1idXR0b24tLWRpc2FibGVkKTpub3QoLnBlLWJ1dHRvbi0tc2VsZWN0ZWQpXCI6IHtcbiAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ob3ZlclwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ob3Zlcl9ib3JkZXJcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiOm5vdCgucGUtYnV0dG9uLS1kaXNhYmxlZCk6bm90KC5wZS1idXR0b24tLXNlbGVjdGVkKVwiOiB7XG4gICAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICAgIGJvcmRlckNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaG92ZXJfYm9yZGVyXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZjIsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfaG92ZXJfYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCI6bm90KC5wZS1idXR0b24tLWRpc2FibGVkKTpub3QoLnBlLWJ1dHRvbi0tc2VsZWN0ZWQpXCI6IHtcbiAgICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaG92ZXJfYmFja2dyb3VuZFwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYyLCBcImNvbG9yX1wiICsgdGludCArIFwiX2hvdmVyX2ljb25cIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX2Ryb3Bkb3duXCI6IHtcbiAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ob3Zlcl9pY29uXCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX3JlZjI7XG59O1xuXG52YXIgbGlnaHRUaW50Rm5zID0gX29iamVjdFNwcmVhZDIoe30sIGdlbmVyYWxGbnMsIHt9LCB0aW50Rm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfb2JqZWN0U3ByZWFkMih7fSwgZ2VuZXJhbEZucywge30sIHRpbnRGbnMoXCJkYXJrXCIpKTtcblxudmFyIGxpZ2h0VGludEhvdmVyRm5zID0gaG92ZXJUaW50Rm5zKFwibGlnaHRcIik7XG52YXIgZGFya1RpbnRIb3ZlckZucyA9IGhvdmVyVGludEZucyhcImRhcmtcIik7XG52YXIgc3VwZXJDb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgdmFyRm5zOiB7XG4gICAgbGlnaHRUaW50Rm5zOiBsaWdodFRpbnRGbnMsXG4gICAgZGFya1RpbnRGbnM6IGRhcmtUaW50Rm5zLFxuICAgIGxpZ2h0VGludEhvdmVyRm5zOiBsaWdodFRpbnRIb3ZlckZucyxcbiAgICBkYXJrVGludEhvdmVyRm5zOiBkYXJrVGludEhvdmVyRm5zXG4gIH1cbn0pO1xuXG4vKiogXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzUlRMIFxuICovXG5cbnZhciBhbGlnblNpZGUgPSBmdW5jdGlvbiBhbGlnblNpZGUoaXNSVEwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCIucGUtYnV0dG9uLS1zZXBhcmF0b3Itc3RhcnQgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgIGJvcmRlclN0eWxlOiBpc1JUTCA/IFwibm9uZSBzb2xpZCBub25lIG5vbmVcIiA6IFwibm9uZSBub25lIG5vbmUgc29saWRcIlxuICAgICAgfVxuICAgIH07XG4gIH07XG59O1xuXG52YXIgYWxpZ25MZWZ0ID0gYWxpZ25TaWRlKGZhbHNlKTtcbnZhciBhbGlnblJpZ2h0ID0gYWxpZ25TaWRlKHRydWUpO1xuXG52YXIgbGluZV9oZWlnaHRfbGFiZWxfcGFkZGluZ192ID0gZnVuY3Rpb24gbGluZV9oZWlnaHRfbGFiZWxfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtYnV0dG9uX19kcm9wZG93blwiOiB7XG4gICAgICBtaW5IZWlnaHQ6IFwiY2FsYygoMWVtICogXCIuY29uY2F0KHZhcnMubGluZV9oZWlnaHQsIFwiKSArIDIgKiBcIikuY29uY2F0KHZhcnMubGFiZWxfcGFkZGluZ192LCBcInB4KVwiKVxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgb3V0ZXJfcGFkZGluZ192X2xhYmVsX3BhZGRpbmdfdiA9IGZ1bmN0aW9uIG91dGVyX3BhZGRpbmdfdl9sYWJlbF9wYWRkaW5nX3Yoc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiLnBlLWJ1dHRvbi0taGlnaC1sYWJlbFwiOiB7XG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgXCIgLnBlLWJ1dHRvbl9fbGFiZWxcIjoge1xuICAgICAgICBwYWRkaW5nOiB2YXJzLm91dGVyX3BhZGRpbmdfdiArIHZhcnMubGFiZWxfcGFkZGluZ192ICsgXCJweCAwXCJcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGxpbmVfaGVpZ2h0X291dGVyX3BhZGRpbmdfdl9sYWJlbF9wYWRkaW5nX3YgPSBmdW5jdGlvbiBsaW5lX2hlaWdodF9vdXRlcl9wYWRkaW5nX3ZfbGFiZWxfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIi5wZS1idXR0b24tLWhpZ2gtbGFiZWxcIjoge1xuICAgICAgXCIgLnBlLWJ1dHRvbl9fbGFiZWwsIC5wZS1idXR0b25fX2Ryb3Bkb3duXCI6IHtcbiAgICAgICAgbWluSGVpZ2h0OiBcImNhbGMoKDFlbSAqIFwiLmNvbmNhdCh2YXJzLmxpbmVfaGVpZ2h0LCBcIikgKyAyICogXCIpLmNvbmNhdCh2YXJzLm91dGVyX3BhZGRpbmdfdiArIHZhcnMubGFiZWxfcGFkZGluZ192LCBcInB4KVwiKVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgYm9yZGVyX3JhZGl1c19idXR0b25fZ3JvdXAgPSBmdW5jdGlvbiBib3JkZXJfcmFkaXVzX2J1dHRvbl9ncm91cChzZWxlY3RvciwgdmFycywgaXNSVEwpIHtcbiAgdmFyIF9wZUJ1dHRvbl9fY29udGVudCwgX3BlQnV0dG9uX19jb250ZW50MjtcblxuICByZXR1cm4gc2VsKHNlbGVjdG9yLCB7XG4gICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IHZhcnMuYm9yZGVyX3JhZGl1cyArIFwicHhcIlxuICAgIH0sXG4gICAgXCI6bm90KDpmaXJzdC1jaGlsZClcIjoge1xuICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiAoX3BlQnV0dG9uX19jb250ZW50ID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcGVCdXR0b25fX2NvbnRlbnQsIGlzUlRMID8gXCJib3JkZXJUb3BSaWdodFJhZGl1c1wiIDogXCJib3JkZXJUb3BMZWZ0UmFkaXVzXCIsIDApLCBfZGVmaW5lUHJvcGVydHkoX3BlQnV0dG9uX19jb250ZW50LCBpc1JUTCA/IFwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXNcIiA6IFwiYm9yZGVyQm90dG9tTGVmdFJhZGl1c1wiLCAwKSwgX3BlQnV0dG9uX19jb250ZW50KVxuICAgIH0sXG4gICAgXCI6bm90KDpsYXN0LWNoaWxkKVwiOiB7XG4gICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IChfcGVCdXR0b25fX2NvbnRlbnQyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcGVCdXR0b25fX2NvbnRlbnQyLCBpc1JUTCA/IFwiYm9yZGVyVG9wTGVmdFJhZGl1c1wiIDogXCJib3JkZXJUb3BSaWdodFJhZGl1c1wiLCAwKSwgX2RlZmluZVByb3BlcnR5KF9wZUJ1dHRvbl9fY29udGVudDIsIGlzUlRMID8gXCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzXCIgOiBcImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCIsIDApLCBfcGVCdXR0b25fX2NvbnRlbnQyKVxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgX2JvcmRlciQxID0gZnVuY3Rpb24gYm9yZGVyKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtYnV0dG9uX193YXNoLCAucGUtcmlwcGxlXCI6IG1peGluLmZpdCgtMSksXG4gICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICBib3JkZXJTdHlsZTogXCJzb2xpZFwiXG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBfYm9yZGVyX3dpZHRoID0gZnVuY3Rpb24gYm9yZGVyX3dpZHRoKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgIGJvcmRlcldpZHRoOiB2YXJzLmJvcmRlcl93aWR0aCArIFwicHhcIlxuICAgIH0sXG4gICAgXCIgLnBlLWJ1dHRvbi1ncm91cCAmICsgJlwiOiB7XG4gICAgICBtYXJnaW5MZWZ0OiAtdmFycy5ib3JkZXJfd2lkdGggKyBcInB4XCJcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIF9jb250YWluZWQgPSBmdW5jdGlvbiBjb250YWluZWQoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwgey8vXG4gIH0pO1xufTtcblxudmFyIHZhckZucyQxID0gX29iamVjdFNwcmVhZDIoe1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3RvciwgW2FsaWduTGVmdCgpLCB7XG4gICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgYmFja2dyb3VuZDogXCJ0cmFuc3BhcmVudFwiLFxuICAgICAgYm9yZGVyOiBcIm5vbmVcIixcbiAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBib3JkZXJXaWR0aDogXCIxcHhcIixcbiAgICAgICAgLy8gZGVmYXVsdFxuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDBcbiAgICAgIH0sXG4gICAgICBcIi5wZS1idXR0b24tLWJvcmRlclwiOiBfYm9yZGVyJDEoc2VsZWN0b3IpLFxuICAgICAgLy8gVE9ETzogbW92ZSB3YXNoIHN0eWxlcyB0byBiYXNlIGJ1dHRvblxuICAgICAgXCIgLnBlLWJ1dHRvbl9fd2FzaFwiOiB7XG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH0sXG4gICAgICAvLyBBbHdheXMgc2hvdyB3YXNoIG9uIGZvY3VzIGJ1dCBub3Qgb24gY2xpY2tcbiAgICAgIFwiJjpmb2N1czpub3QoOmFjdGl2ZSkgLnBlLWJ1dHRvbl9fd2FzaFwiOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICAvLyBPbmx5IHNob3cgd2FzaCBvbiBob3ZlciB3aGVuIFwiaGFzIGhvdmVyXCIgY2xhc3Mgc2V0XG4gICAgICBcIi5wZS1idXR0b24tLWhhcy1ob3Zlcjpob3ZlclwiOiB7XG4gICAgICAgIFwiIC5wZS1idXR0b25fX3dhc2hcIjoge1xuICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1idXR0b25fX2xhYmVsLCAucGUtYnV0dG9uX19kcm9wZG93blwiOiB7XG4gICAgICAgIHdoaXRlU3BhY2U6IFwicHJlXCIsXG4gICAgICAgIHVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuICAgICAgICBcIi1tb3otdXNlci1zZWxlY3RcIjogXCJub25lXCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtYnV0dG9uX190ZXh0LWxhYmVsXCI6IHtcbiAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgICAgbGluZUhlaWdodDogMVxuICAgICAgfSxcbiAgICAgIFwiLnBlLWJ1dHRvbi0tZHJvcGRvd25cIjoge1xuICAgICAgICBtaW5XaWR0aDogXCIwXCIsXG4gICAgICAgIC8vIElFIDExIGRvZXMgbm90IHJlY29nbml6ZSBcImluaXRpYWxcIiBoZXJlXG4gICAgICAgIFwiIC5wZS1idXR0b25fX2Ryb3Bkb3duXCI6IHtcbiAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiIC5wZS1zdmdcIjoge1xuICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICB0b3A6IFwiNTAlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIgLnBlLWJ1dHRvbl9fbGFiZWwgKyAucGUtYnV0dG9uX19kcm9wZG93blwiOiB7XG4gICAgICAgICAgbWFyZ2luTGVmdDogXCI2cHhcIixcbiAgICAgICAgICBtaW5XaWR0aDogMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIgLnBlLWJ1dHRvbi1ncm91cCAmXCI6IHtcbiAgICAgICAgbWluV2lkdGg6IDBcbiAgICAgIH0sXG4gICAgICBcIiAucGUtYnV0dG9uX19kcm9wZG93biAucGUtc3ZnXCI6IG1peGluLmRlZmF1bHRUcmFuc2l0aW9uKFwidHJhbnNmb3JtXCIpLFxuICAgICAgXCIucGUtYnV0dG9uLS1kcm9wZG93bi1vcGVuXCI6IHtcbiAgICAgICAgXCIgLnBlLWJ1dHRvbl9fZHJvcGRvd24gLnBlLXN2Z1wiOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZSgtMTgwZGVnKVwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSksIFtzZWwoc2VsZWN0b3JSVEwoc2VsZWN0b3IpLCBhbGlnblJpZ2h0KCkpXV07XG4gIH0sXG4gIGJvcmRlcl9yYWRpdXM6IGZ1bmN0aW9uIGJvcmRlcl9yYWRpdXMoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogdmFycy5ib3JkZXJfcmFkaXVzICsgXCJweFwiXG4gICAgICB9XG4gICAgfSksIGJvcmRlcl9yYWRpdXNfYnV0dG9uX2dyb3VwKFwiLnBlLWJ1dHRvbi1ncm91cCBcIi5jb25jYXQoc2VsZWN0b3IpLCB2YXJzLCBmYWxzZSksIGJvcmRlcl9yYWRpdXNfYnV0dG9uX2dyb3VwKHNlbGVjdG9yUlRMKFwiLnBlLWJ1dHRvbi1ncm91cCBcIi5jb25jYXQoc2VsZWN0b3IpKSwgdmFycywgdHJ1ZSldO1xuICB9LFxuICBib3JkZXJfd2lkdGg6IGZ1bmN0aW9uIGJvcmRlcl93aWR0aChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbX2JvcmRlcl93aWR0aChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBtaW5fd2lkdGg6IGZ1bmN0aW9uIG1pbl93aWR0aChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBtaW5XaWR0aDogdmFycy5taW5fd2lkdGggKyBcInB4XCJcbiAgICB9KV07XG4gIH0sXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogZnVuY3Rpb24gYW5pbWF0aW9uX2R1cmF0aW9uKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnQsIC5wZS1idXR0b25fX3dhc2hcIjogW21peGluLmRlZmF1bHRUcmFuc2l0aW9uKFwiYWxsXCIsIHZhcnMuYW5pbWF0aW9uX2R1cmF0aW9uKV1cbiAgICB9KV07XG4gIH0sXG4gIHBhZGRpbmdfaDogZnVuY3Rpb24gcGFkZGluZ19oKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICBwYWRkaW5nTGVmdDogdmFycy5wYWRkaW5nX2ggKyBcInB4XCIsXG4gICAgICAgIHBhZGRpbmdSaWdodDogdmFycy5wYWRkaW5nX2ggKyBcInB4XCIsXG4gICAgICAgIFwiIC5wZS1idXR0b25fX2Ryb3Bkb3duXCI6IHtcbiAgICAgICAgICBtaW5XaWR0aDogXCJjYWxjKDM2cHggLSAyICogXCIuY29uY2F0KHZhcnMucGFkZGluZ19oLCBcInB4KVwiKVxuICAgICAgICB9LFxuICAgICAgICBcIi5wZS1idXR0b24tLWRyb3Bkb3duXCI6IHtcbiAgICAgICAgICBcIiAucGUtYnV0dG9uX19sYWJlbCArIC5wZS1idXR0b25fX2Ryb3Bkb3duXCI6IHtcbiAgICAgICAgICAgIG1hcmdpblJpZ2h0OiBcImNhbGMoN3B4IC0gXCIuY29uY2F0KHZhcnMucGFkZGluZ19oLCBcInB4KVwiKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgcGFkZGluZ19oX2V4dHJhX3dpZGU6IGZ1bmN0aW9uIHBhZGRpbmdfaF9leHRyYV93aWRlKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWJ1dHRvbi0tZXh0cmEtd2lkZSAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgcGFkZGluZzogXCIwIFwiICsgdmFycy5wYWRkaW5nX2hfZXh0cmFfd2lkZSArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgbGFiZWxfcGFkZGluZ192OiBmdW5jdGlvbiBsYWJlbF9wYWRkaW5nX3Yoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWJ1dHRvbl9fbGFiZWxcIjoge1xuICAgICAgICBwYWRkaW5nOiB2YXJzLmxhYmVsX3BhZGRpbmdfdiArIFwicHggMFwiXG4gICAgICB9LFxuICAgICAgXCIucGUtYnV0dG9uLS1ib3JkZXJcIjoge1xuICAgICAgICBcIiAucGUtYnV0dG9uX19sYWJlbFwiOiB7XG4gICAgICAgICAgcGFkZGluZzogdmFycy5sYWJlbF9wYWRkaW5nX3YgLSAxICsgXCJweCAwXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLCB2YXJzLmxpbmVfaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgbGluZV9oZWlnaHRfbGFiZWxfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSwgdmFycy5vdXRlcl9wYWRkaW5nX3YgIT09IHVuZGVmaW5lZCAmJiBvdXRlcl9wYWRkaW5nX3ZfbGFiZWxfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSwgdmFycy5saW5lX2hlaWdodCAhPT0gdW5kZWZpbmVkICYmIHZhcnMub3V0ZXJfcGFkZGluZ192ICE9PSB1bmRlZmluZWQgJiYgdmFycy5sYWJlbF9wYWRkaW5nX3YgIT09IHVuZGVmaW5lZCAmJiBsaW5lX2hlaWdodF9vdXRlcl9wYWRkaW5nX3ZfbGFiZWxfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIGZvbnRfd2VpZ2h0OiBmdW5jdGlvbiBmb250X3dlaWdodChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtYnV0dG9uX19sYWJlbFwiOiB7XG4gICAgICAgIGZvbnRXZWlnaHQ6IHZhcnMuZm9udF93ZWlnaHRcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIHRleHRfdHJhbnNmb3JtOiBmdW5jdGlvbiB0ZXh0X3RyYW5zZm9ybShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtYnV0dG9uX19sYWJlbFwiOiB7XG4gICAgICAgIHRleHRUcmFuc2Zvcm06IHZhcnMudGV4dF90cmFuc2Zvcm1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGZvbnRfc2l6ZTogZnVuY3Rpb24gZm9udF9zaXplKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX2xhYmVsLCAucGUtYnV0dG9uX19kcm9wZG93blwiOiB7XG4gICAgICAgIGZvbnRTaXplOiB2YXJzLmZvbnRfc2l6ZSArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgbGluZV9oZWlnaHQ6IGZ1bmN0aW9uIGxpbmVfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX2xhYmVsLCAucGUtYnV0dG9uX19kcm9wZG93blwiOiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IHZhcnMubGluZV9oZWlnaHRcbiAgICAgIH1cbiAgICB9KSwgdmFycy5sYWJlbF9wYWRkaW5nX3YgIT09IHVuZGVmaW5lZCAmJiBsaW5lX2hlaWdodF9sYWJlbF9wYWRkaW5nX3Yoc2VsZWN0b3IsIHZhcnMpLCB2YXJzLm91dGVyX3BhZGRpbmdfdiAhPT0gdW5kZWZpbmVkICYmIHZhcnMubGFiZWxfcGFkZGluZ192ICE9PSB1bmRlZmluZWQgJiYgbGluZV9oZWlnaHRfb3V0ZXJfcGFkZGluZ192X2xhYmVsX3BhZGRpbmdfdihzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBkcm9wZG93bl9pY29uX3NpemU6IGZ1bmN0aW9uIGRyb3Bkb3duX2ljb25fc2l6ZShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1idXR0b24tLWRyb3Bkb3duXCI6IHtcbiAgICAgICAgXCIgLnBlLWJ1dHRvbl9fZHJvcGRvd25cIjoge1xuICAgICAgICAgIHdpZHRoOiB2YXJzLmRyb3Bkb3duX2ljb25fc2l6ZSArIFwicHhcIlxuICAgICAgICB9LFxuICAgICAgICBcIiAucGUtc3ZnXCI6IHtcbiAgICAgICAgICB3aWR0aDogdmFycy5kcm9wZG93bl9pY29uX3NpemUgKyBcInB4XCIsXG4gICAgICAgICAgaGVpZ2h0OiB2YXJzLmRyb3Bkb3duX2ljb25fc2l6ZSArIFwicHhcIixcbiAgICAgICAgICBtYXJnaW5Ub3A6IC12YXJzLmRyb3Bkb3duX2ljb25fc2l6ZSAvIDIgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgb3V0ZXJfcGFkZGluZ192OiBmdW5jdGlvbiBvdXRlcl9wYWRkaW5nX3Yoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgcGFkZGluZzogdmFycy5vdXRlcl9wYWRkaW5nX3YgKyBcInB4IDBcIixcbiAgICAgIFwiLnBlLWJ1dHRvbi0taGlnaC1sYWJlbFwiOiB7XG4gICAgICAgIHBhZGRpbmc6IDBcbiAgICAgIH1cbiAgICB9KSwgdmFycy5sYWJlbF9wYWRkaW5nX3YgIT09IHVuZGVmaW5lZCAmJiBvdXRlcl9wYWRkaW5nX3ZfbGFiZWxfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSwgdmFycy5saW5lX2hlaWdodCAhPT0gdW5kZWZpbmVkICYmIHZhcnMub3V0ZXJfcGFkZGluZ192ICE9PSB1bmRlZmluZWQgJiYgdmFycy5sYWJlbF9wYWRkaW5nX3YgIT09IHVuZGVmaW5lZCAmJiBsaW5lX2hlaWdodF9vdXRlcl9wYWRkaW5nX3ZfbGFiZWxfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIHNlcGFyYXRvcl93aWR0aDogZnVuY3Rpb24gc2VwYXJhdG9yX3dpZHRoKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWJ1dHRvbi0tc2VwYXJhdG9yLXN0YXJ0XCI6IHtcbiAgICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgYm9yZGVyV2lkdGg6IHZhcnMuc2VwYXJhdG9yX3dpZHRoICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGxldHRlcl9zcGFjaW5nOiBmdW5jdGlvbiBsZXR0ZXJfc3BhY2luZyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBsZXR0ZXJTcGFjaW5nOiB2YXJzLmxldHRlcl9zcGFjaW5nICsgXCJweFwiXG4gICAgfSldO1xuICB9LFxuICAvLyBUaGVtZSB2YXJzXG4gIGJvcmRlcjogZnVuY3Rpb24gYm9yZGVyKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIHZhcnMuYm9yZGVyICYmIF9ib3JkZXIkMShzZWxlY3Rvcik7XG4gIH0sXG4gIGNvbnRhaW5lZDogZnVuY3Rpb24gY29udGFpbmVkKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIHZhcnMuY29udGFpbmVkICYmIF9jb250YWluZWQoc2VsZWN0b3IpO1xuICB9XG59LCBzaGFyZWRWYXJGbnMpO1xuXG52YXIgc3VwZXJMYXlvdXQkMSA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zJDFcbn0pO1xuXG52YXIgdG91Y2hfaGVpZ2h0ID0gdmFycy51bml0X3RvdWNoX2hlaWdodDsgLy8gNDhcblxudmFyIGhlaWdodCA9IDM2O1xudmFyIGJvcmRlcl93aWR0aCA9IDE7XG5cbnZhciB0aGVtZVZhcnMgPSBfZXh0ZW5kcyh7fSwge1xuICBib3JkZXI6IGZhbHNlLFxuICBjb250YWluZWQ6IGZhbHNlXG59LCBzaGFyZWRWYXJzKTtcblxudmFyIGJvcmRlclZhcnMgPSB7XG4gIGJvcmRlcl93aWR0aDogYm9yZGVyX3dpZHRoLFxuICBjb2xvcl9saWdodF9ib3JkZXI6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X2JvcmRlcl9tZWRpdW0pLFxuICAvLyBvbmx5IHNwZWNpZnkgdGhpcyB2YXJpYWJsZSB0byBnZXQgYWxsIDQgc3RhdGVzXG4gIC8vIGNvbG9yX2xpZ2h0X2hvdmVyX2JvcmRlcjogICAgICAgICAgICAgXCJ0cmFuc3BhcmVudFwiLFxuICAvLyBjb2xvcl9saWdodF9hY3RpdmVfYm9yZGVyOiAgICAgICAgICAgIFwidHJhbnNwYXJlbnRcIixcbiAgY29sb3JfbGlnaHRfZGlzYWJsZWRfYm9yZGVyOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X2Rpc2FibGVkKSxcbiAgLy9cbiAgY29sb3JfZGFya19ib3JkZXI6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya19ib3JkZXJfbWVkaXVtKSxcbiAgLy8gb25seSBzcGVjaWZ5IHRoaXMgdmFyaWFibGUgdG8gZ2V0IGFsbCA0IHN0YXRlc1xuICAvLyBjb2xvcl9kYXJrX2hvdmVyX2JvcmRlcjogICAgICAgICAgICAgIFwidHJhbnNwYXJlbnRcIixcbiAgLy8gY29sb3JfZGFya19hY3RpdmVfYm9yZGVyOiAgICAgICAgICAgICBcInRyYW5zcGFyZW50XCIsXG4gIGNvbG9yX2RhcmtfZGlzYWJsZWRfYm9yZGVyOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfdGV4dF9kaXNhYmxlZClcbn07XG4vKipcbiAqIEB0eXBlIHtUZXh0QnV0dG9uVmFyc30gdGV4dEJ1dHRvblZhcnNcbiAqL1xuXG52YXIgdGV4dEJ1dHRvblZhcnMgPSBfb2JqZWN0U3ByZWFkMih7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBnZW5lcmFsIHN0eWxlcywgbm90IGRlZmluZWQgYnkgdmFyaWFibGVzXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogdHJ1ZSxcbiAgYW5pbWF0aW9uX2R1cmF0aW9uOiB2YXJzLmFuaW1hdGlvbl9kdXJhdGlvbixcbiAgYm9yZGVyX3JhZGl1czogdmFycy51bml0X2l0ZW1fYm9yZGVyX3JhZGl1cyxcbiAgZHJvcGRvd25faWNvbl9zaXplOiAyNCxcbiAgZm9udF9zaXplOiAxNCxcbiAgZm9udF93ZWlnaHQ6IDUwMCxcbiAgbGFiZWxfcGFkZGluZ192OiAxMSxcbiAgbGV0dGVyX3NwYWNpbmc6IDAuNzUsXG4gIGxpbmVfaGVpZ2h0OiAxLFxuICBtaW5fd2lkdGg6IDggKiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQsXG4gIG91dGVyX3BhZGRpbmdfdjogKHRvdWNoX2hlaWdodCAtIGhlaWdodCkgLyAyLFxuICAvLyAoNDggLSAzNikgLyAyID0gNlxuICBwYWRkaW5nX2g6IDIgKiB2YXJzLmdyaWRfdW5pdCxcbiAgLy8gOFxuICBwYWRkaW5nX2hfZXh0cmFfd2lkZTogNiAqIHZhcnMuZ3JpZF91bml0LFxuICAvLyAyNFxuICByb3dfbWFyZ2luX2g6IHZhcnMuZ3JpZF91bml0LFxuICBzZXBhcmF0b3Jfd2lkdGg6IGJvcmRlcl93aWR0aCxcbiAgdGV4dF90cmFuc2Zvcm06IFwidXBwZXJjYXNlXCIsXG4gIGNvbG9yX2xpZ2h0X2JhY2tncm91bmQ6IFwidHJhbnNwYXJlbnRcIixcbiAgY29sb3JfbGlnaHRfdGV4dDogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfdGV4dF9wcmltYXJ5KSxcbiAgY29sb3JfbGlnaHRfd2FzaF9iYWNrZ3JvdW5kOiBcImN1cnJlbnRDb2xvclwiLFxuICBjb2xvcl9saWdodF93YXNoX29wYWNpdHk6IDAuMSxcbiAgY29sb3JfbGlnaHRfYWN0aXZlX2JhY2tncm91bmQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X2JhY2tncm91bmRfYWN0aXZlKSxcbiAgY29sb3JfbGlnaHRfZGlzYWJsZWRfYmFja2dyb3VuZDogXCJ0cmFuc3BhcmVudFwiLFxuICBjb2xvcl9saWdodF9kaXNhYmxlZF90ZXh0OiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X2Rpc2FibGVkKSxcbiAgY29sb3JfbGlnaHRfaWNvbjogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfdGV4dF9zZWNvbmRhcnkpLFxuICBjb2xvcl9saWdodF9zZXBhcmF0b3I6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X2JvcmRlcl9saWdodCksXG4gIGNvbG9yX2RhcmtfYmFja2dyb3VuZDogXCJ0cmFuc3BhcmVudFwiLFxuICBjb2xvcl9kYXJrX3RleHQ6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3ByaW1hcnkpLFxuICBjb2xvcl9kYXJrX3dhc2hfYmFja2dyb3VuZDogXCJjdXJyZW50Q29sb3JcIixcbiAgY29sb3JfZGFya193YXNoX29wYWNpdHk6IDAuMSxcbiAgY29sb3JfZGFya19hY3RpdmVfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX2JhY2tncm91bmRfYWN0aXZlKSxcbiAgY29sb3JfZGFya19kaXNhYmxlZF9iYWNrZ3JvdW5kOiBcInRyYW5zcGFyZW50XCIsXG4gIGNvbG9yX2RhcmtfZGlzYWJsZWRfdGV4dDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX3RleHRfZGlzYWJsZWQpLFxuICBjb2xvcl9kYXJrX2ljb246IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3NlY29uZGFyeSksXG4gIGNvbG9yX2Rhcmtfc2VwYXJhdG9yOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfYm9yZGVyX2xpZ2h0KVxufSwgYm9yZGVyVmFycywge30sIHRoZW1lVmFycyk7XG5cbnZhciB0aGVtZVZhcnMkMSA9IF9vYmplY3RTcHJlYWQyKHtcbiAgYm9yZGVyOiBmYWxzZSxcbiAgY29udGFpbmVkOiB0cnVlXG59LCBzaGFyZWRWYXJzKTtcbi8qKlxuICogQHR5cGUge0NvbnRhaW5lZEJ1dHRvblZhcnN9IGNvbnRhaW5lZEJ1dHRvblZhcnNcbiAqL1xuXG52YXIgY29udGFpbmVkQnV0dG9uVmFycyA9IF9vYmplY3RTcHJlYWQyKHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICBwYWRkaW5nX2g6IDQgKiB2YXJzLmdyaWRfdW5pdCxcbiAgLy8gMTZcbiAgY29sb3JfbGlnaHRfYmFja2dyb3VuZDogXCIjZmZmXCIsXG4gIGNvbG9yX2xpZ2h0X2Rpc2FibGVkX2JhY2tncm91bmQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X2JhY2tncm91bmRfZGlzYWJsZWQpLFxuICBjb2xvcl9kYXJrX2FjdGl2ZV9iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfcHJpbWFyeV9kYXJrKSxcbiAgY29sb3JfZGFya19iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfcHJpbWFyeSksXG4gIGNvbG9yX2RhcmtfZGlzYWJsZWRfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX2JhY2tncm91bmRfZGlzYWJsZWQpXG59LCB0aGVtZVZhcnMkMSk7XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtzdXBlckxheW91dCQxLCBzdXBlckNvbG9yXTtcbnZhciBzdXBlckZucyA9IFtzdXBlckxheW91dF07XG52YXIgc3VwZXJTZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzW1wic3VwZXJcIl0pO1xudmFyIHNlbGVjdG9yID0gXCIuXCIuY29uY2F0KGNsYXNzZXMuY29tcG9uZW50KTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGN1c3RvbVNlbGVjdG9yIFxuICogQHBhcmFtIHtvYmplY3R9IFtjdXN0b21WYXJzXVxuICogQHBhcmFtIHtvYmplY3R9IFtzY29waW5nXVxuICogQHBhcmFtIHtzdHJpbmd9IFtzY29waW5nLm1lZGlhUXVlcnldXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Njb3Bpbmcuc2NvcGVdXG4gKi9cblxudmFyIGFkZFN0eWxlID0gZnVuY3Rpb24gYWRkU3R5bGUoY3VzdG9tU2VsZWN0b3IsIGN1c3RvbVZhcnMpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgX3JlZiRtZWRpYVF1ZXJ5ID0gX3JlZi5tZWRpYVF1ZXJ5LFxuICAgICAgbWVkaWFRdWVyeSA9IF9yZWYkbWVkaWFRdWVyeSA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYkbWVkaWFRdWVyeSxcbiAgICAgIF9yZWYkc2NvcGUgPSBfcmVmLnNjb3BlLFxuICAgICAgc2NvcGUgPSBfcmVmJHNjb3BlID09PSB2b2lkIDAgPyBcIlwiIDogX3JlZiRzY29wZTtcblxuICB2YXIgZmluYWxWYXJzID0gY3VzdG9tVmFycyAmJiBjdXN0b21WYXJzLmNvbnRhaW5lZCA/IGNvbnRhaW5lZEJ1dHRvblZhcnMgOiB0ZXh0QnV0dG9uVmFycztcbiAgY3VzdG9tU2VsZWN0b3IgJiYgc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzdXBlclNlbGVjdG9yLCBjdXN0b21TZWxlY3Rvcl0sXG4gICAgZm5zOiBzdXBlckZucyxcbiAgICB2YXJzOiBmaW5hbFZhcnMsXG4gICAgY3VzdG9tVmFyczogY3VzdG9tVmFycyxcbiAgICBtZWRpYVF1ZXJ5OiBtZWRpYVF1ZXJ5LFxuICAgIHNjb3BlOiBzY29wZVxuICB9KTtcbiAgY3VzdG9tU2VsZWN0b3IgJiYgc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3RvciwgY3VzdG9tU2VsZWN0b3JdLFxuICAgIGZuczogZm5zLFxuICAgIHZhcnM6IGZpbmFsVmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzLFxuICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0pO1xufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IFtjdXN0b21TZWxlY3Rvcl1cbiAqIEBwYXJhbSB7b2JqZWN0fSBbY3VzdG9tVmFyc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbc2NvcGluZ11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2NvcGluZy5tZWRpYVF1ZXJ5XVxuICogQHBhcmFtIHtzdHJpbmd9IFtzY29waW5nLnNjb3BlXVxuICovXG5cblxudmFyIGdldFN0eWxlID0gZnVuY3Rpb24gZ2V0U3R5bGUoKSB7XG4gIHZhciBjdXN0b21TZWxlY3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCJcIjtcbiAgdmFyIGN1c3RvbVZhcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgX3JlZjIkbWVkaWFRdWVyeSA9IF9yZWYyLm1lZGlhUXVlcnksXG4gICAgICBtZWRpYVF1ZXJ5ID0gX3JlZjIkbWVkaWFRdWVyeSA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYyJG1lZGlhUXVlcnksXG4gICAgICBfcmVmMiRzY29wZSA9IF9yZWYyLnNjb3BlLFxuICAgICAgc2NvcGUgPSBfcmVmMiRzY29wZSA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYyJHNjb3BlO1xuXG4gIHZhciBmaW5hbFZhcnMgPSBjdXN0b21WYXJzICYmIGN1c3RvbVZhcnMuY29udGFpbmVkID8gY29udGFpbmVkQnV0dG9uVmFycyA6IHRleHRCdXR0b25WYXJzO1xuICByZXR1cm4gc3R5bGVyLmdldFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzdXBlclNlbGVjdG9yLCBjdXN0b21TZWxlY3Rvcl0sXG4gICAgZm5zOiBzdXBlckZucyxcbiAgICB2YXJzOiBmaW5hbFZhcnMsXG4gICAgY3VzdG9tVmFyczogY3VzdG9tVmFycyxcbiAgICBtZWRpYVF1ZXJ5OiBtZWRpYVF1ZXJ5LFxuICAgIHNjb3BlOiBzY29wZVxuICB9KS5jb25jYXQoc3R5bGVyLmdldFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3RvciwgY3VzdG9tU2VsZWN0b3JdLFxuICAgIGZuczogZm5zLFxuICAgIHZhcnM6IGZpbmFsVmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzLFxuICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0pKTtcbn07XG5cbnZhciBhZGRHZW5lcmFsU3R5bGVUb0hlYWQgPSBmdW5jdGlvbiBhZGRHZW5lcmFsU3R5bGVUb0hlYWQoKSB7XG4gIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbc3VwZXJTZWxlY3Rvcl0sXG4gICAgZm5zOiBzdXBlckZucyxcbiAgICB2YXJzOiB0ZXh0QnV0dG9uVmFyc1xuICB9KTtcbiAgc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogdGV4dEJ1dHRvblZhcnNcbiAgfSk7XG59O1xuXG4vLyBAdHMtY2hlY2tcbnZhciBjb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgc3VwZXJDb2xvcjogc3VwZXJDb2xvclxufSk7XG5cbi8vIEB0cy1jaGVja1xudmFyIGxheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHN1cGVyTGF5b3V0OiBzdXBlckxheW91dCQxXG59KTtcblxuLy8gQHRzLWNoZWNrXG52YXIgZm5zJDEgPSBbbGF5b3V0LCBjb2xvcl07XG52YXIgc2VsZWN0b3JzID0gW2NsYXNzZXMuY29tcG9uZW50LCBjbGFzc2VzLmNvbnRhaW5lZF0uam9pbihcIiBcIik7XG52YXIgc2VsZWN0b3IkMSA9IFwiLlwiLmNvbmNhdChzZWxlY3RvcnMuc3BsaXQoL1xccy8pLmpvaW4oXCIuXCIpKTtcbnZhciBhZGRTdHlsZSQxID0gc3R5bGVyLmNyZWF0ZUFkZFN0eWxlKHNlbGVjdG9yJDEsIGZucyQxLCBjb250YWluZWRCdXR0b25WYXJzKTtcbnZhciBnZXRTdHlsZSQxID0gc3R5bGVyLmNyZWF0ZUdldFN0eWxlKHNlbGVjdG9yJDEsIGZucyQxLCBjb250YWluZWRCdXR0b25WYXJzKTtcblxudmFyIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCQxID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3RvciQxXSxcbiAgICBmbnM6IGZucyQxLFxuICAgIHZhcnM6IGNvbnRhaW5lZEJ1dHRvblZhcnNcbiAgfSk7XG59O1xuXG4vLyBAdHMtY2hlY2tcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGN1c3RvbVNlbGVjdG9yIFxuICogQHBhcmFtIHtvYmplY3R9IFtjdXN0b21WYXJzXVxuICogQHBhcmFtIHtvYmplY3R9IFtzY29waW5nXVxuICogQHBhcmFtIHtzdHJpbmd9IFtzY29waW5nLm1lZGlhUXVlcnldXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Njb3Bpbmcuc2NvcGVdXG4gKi9cblxudmFyIGFkZFN0eWxlJDIgPSBmdW5jdGlvbiBhZGRTdHlsZSQxKGN1c3RvbVNlbGVjdG9yLCBjdXN0b21WYXJzKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSxcbiAgICAgIF9yZWYkbWVkaWFRdWVyeSA9IF9yZWYubWVkaWFRdWVyeSxcbiAgICAgIG1lZGlhUXVlcnkgPSBfcmVmJG1lZGlhUXVlcnkgPT09IHZvaWQgMCA/IFwiXCIgOiBfcmVmJG1lZGlhUXVlcnksXG4gICAgICBfcmVmJHNjb3BlID0gX3JlZi5zY29wZSxcbiAgICAgIHNjb3BlID0gX3JlZiRzY29wZSA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYkc2NvcGU7XG5cbiAgYWRkU3R5bGUoY3VzdG9tU2VsZWN0b3IsIGN1c3RvbVZhcnMsIHtcbiAgICBtZWRpYVF1ZXJ5OiBtZWRpYVF1ZXJ5LFxuICAgIHNjb3BlOiBzY29wZVxuICB9KTtcbn07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBbY3VzdG9tU2VsZWN0b3JdXG4gKiBAcGFyYW0ge29iamVjdH0gW2N1c3RvbVZhcnNdXG4gKiBAcGFyYW0ge29iamVjdH0gW3Njb3BpbmddXG4gKiBAcGFyYW0ge3N0cmluZ30gW3Njb3BpbmcubWVkaWFRdWVyeV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbc2NvcGluZy5zY29wZV1cbiAqL1xuXG5cbnZhciBnZXRTdHlsZSQyID0gZnVuY3Rpb24gZ2V0U3R5bGUkMigpIHtcbiAgdmFyIGN1c3RvbVNlbGVjdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBcIlwiO1xuICB2YXIgY3VzdG9tVmFycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gIHZhciBfcmVmMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge30sXG4gICAgICBfcmVmMiRtZWRpYVF1ZXJ5ID0gX3JlZjIubWVkaWFRdWVyeSxcbiAgICAgIG1lZGlhUXVlcnkgPSBfcmVmMiRtZWRpYVF1ZXJ5ID09PSB2b2lkIDAgPyBcIlwiIDogX3JlZjIkbWVkaWFRdWVyeSxcbiAgICAgIF9yZWYyJHNjb3BlID0gX3JlZjIuc2NvcGUsXG4gICAgICBzY29wZSA9IF9yZWYyJHNjb3BlID09PSB2b2lkIDAgPyBcIlwiIDogX3JlZjIkc2NvcGU7XG5cbiAgcmV0dXJuIGdldFN0eWxlKGN1c3RvbVNlbGVjdG9yLCBjdXN0b21WYXJzLCB7XG4gICAgbWVkaWFRdWVyeTogbWVkaWFRdWVyeSxcbiAgICBzY29wZTogc2NvcGVcbiAgfSkuY29uY2F0KGdldFN0eWxlJDEoY3VzdG9tU2VsZWN0b3IsIGN1c3RvbVZhcnMsIHtcbiAgICBtZWRpYVF1ZXJ5OiBtZWRpYVF1ZXJ5LFxuICAgIHNjb3BlOiBzY29wZVxuICB9KSk7XG59O1xuXG52YXIgdGV4dEJ1dHRvblZhcnMkMSA9IHRleHRCdXR0b25WYXJzO1xudmFyIHRleHRCdXR0b25Db2xvciA9IHN1cGVyQ29sb3I7XG52YXIgdGV4dEJ1dHRvbkxheW91dCA9IHN1cGVyTGF5b3V0JDE7XG52YXIgY29udGFpbmVkQnV0dG9uVmFycyQxID0gY29udGFpbmVkQnV0dG9uVmFycztcbnZhciBjb250YWluZWRCdXR0b25Db2xvciA9IGNvbG9yO1xudmFyIGNvbnRhaW5lZEJ1dHRvbkxheW91dCA9IGxheW91dDtcblxudmFyIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCQyID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkJDIoKSB7XG4gIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCQxKCk7XG4gIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCgpO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkJDIgYXMgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSQyIGFzIGFkZFN0eWxlLCBjb250YWluZWRCdXR0b25Db2xvciwgY29udGFpbmVkQnV0dG9uTGF5b3V0LCBjb250YWluZWRCdXR0b25WYXJzJDEgYXMgY29udGFpbmVkQnV0dG9uVmFycywgZ2V0U3R5bGUkMiBhcyBnZXRTdHlsZSwgdGV4dEJ1dHRvbkNvbG9yLCB0ZXh0QnV0dG9uTGF5b3V0LCB0ZXh0QnV0dG9uVmFycyQxIGFzIHRleHRCdXR0b25WYXJzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVMYXlvdXQsIHNlbCwgc3R5bGVyIH0gZnJvbSAncG9seXRoZW5lLWNvcmUtY3NzJztcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1idXR0b24tZ3JvdXBcIlxufTtcblxuLy8gQHRzLWNoZWNrXG52YXIgdmFyRm5zID0ge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgZGlzcGxheTogXCJmbGV4XCJcbiAgICB9KV07XG4gIH1cbn07XG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgdmFyRm5zOiB2YXJGbnNcbn0pO1xuXG4vLyBAdHMtY2hlY2tcblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KFwiLi4vaW5kZXhcIikuQnV0dG9uR3JvdXBWYXJzfSBCdXR0b25Hcm91cFZhcnNcbiAqL1xuXG4vKipcbiAqIEB0eXBlIHtCdXR0b25Hcm91cFZhcnN9IGJ1dHRvbkdyb3VwVmFyc1xuICovXG52YXIgYnV0dG9uR3JvdXBWYXJzID0ge1xuICAvKipcbiAgICogR2VuZXJhdGUgZ2VuZXJhbCBzdHlsZXMsIG5vdCBkZWZpbmVkIGJ5IHZhcmlhYmxlc1xuICAgKi9cbiAgZ2VuZXJhbF9zdHlsZXM6IHRydWVcbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXRdO1xudmFyIHNlbGVjdG9yID0gXCIuXCIuY29uY2F0KGNsYXNzZXMuY29tcG9uZW50KTtcbnZhciBhZGRTdHlsZSA9IHN0eWxlci5jcmVhdGVBZGRTdHlsZShzZWxlY3RvciwgZm5zLCBidXR0b25Hcm91cFZhcnMpO1xudmFyIGdldFN0eWxlID0gc3R5bGVyLmNyZWF0ZUdldFN0eWxlKHNlbGVjdG9yLCBmbnMsIGJ1dHRvbkdyb3VwVmFycyk7XG5cbnZhciBhZGRHZW5lcmFsU3R5bGVUb0hlYWQgPSBmdW5jdGlvbiBhZGRHZW5lcmFsU3R5bGVUb0hlYWQoKSB7XG4gIHJldHVybiBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW3NlbGVjdG9yXSxcbiAgICBmbnM6IGZucyxcbiAgICB2YXJzOiBidXR0b25Hcm91cFZhcnNcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBhZGRHZW5lcmFsU3R5bGVUb0hlYWQsIGFkZFN0eWxlLCBnZXRTdHlsZSwgbGF5b3V0LCBidXR0b25Hcm91cFZhcnMgYXMgdmFycyB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29sb3IsIHNlbCwgY3JlYXRlTGF5b3V0LCBtaXhpbiwgZmxleCwgcmdiYSwgc3R5bGVyIH0gZnJvbSAncG9seXRoZW5lLWNvcmUtY3NzJztcbmltcG9ydCB7IHZhcnMgfSBmcm9tICdwb2x5dGhlbmUtdGhlbWUnO1xuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLWNhcmRcIixcbiAgLy8gZWxlbWVudHNcbiAgYWN0aW9uczogXCJwZS1jYXJkX19hY3Rpb25zXCIsXG4gIGFueTogXCJwZS1jYXJkX19hbnlcIixcbiAgY29udGVudDogXCJwZS1jYXJkX19jb250ZW50XCIsXG4gIGhlYWRlcjogXCJwZS1jYXJkX19oZWFkZXJcIixcbiAgaGVhZGVyVGl0bGU6IFwicGUtY2FyZF9faGVhZGVyLXRpdGxlXCIsXG4gIG1lZGlhOiBcInBlLWNhcmRfX21lZGlhXCIsXG4gIG1lZGlhRGltbWVyOiBcInBlLWNhcmRfX21lZGlhX19kaW1tZXJcIixcbiAgb3ZlcmxheTogXCJwZS1jYXJkX19vdmVybGF5XCIsXG4gIG92ZXJsYXlDb250ZW50OiBcInBlLWNhcmRfX292ZXJsYXlfX2NvbnRlbnRcIixcbiAgcHJpbWFyeTogXCJwZS1jYXJkX19wcmltYXJ5XCIsXG4gIHByaW1hcnlNZWRpYTogXCJwZS1jYXJkX19wcmltYXJ5LW1lZGlhXCIsXG4gIHN1YnRpdGxlOiBcInBlLWNhcmRfX3N1YnRpdGxlXCIsXG4gIHRleHQ6IFwicGUtY2FyZF9fdGV4dFwiLFxuICB0aXRsZTogXCJwZS1jYXJkX190aXRsZVwiLFxuICAvLyBzdGF0ZXNcbiAgYWN0aW9uc0JvcmRlcjogXCJwZS1jYXJkX19hY3Rpb25zLS1ib3JkZXJcIixcbiAgYWN0aW9uc0hvcml6b250YWw6IFwicGUtY2FyZF9fYWN0aW9ucy0taG9yaXpvbnRhbFwiLFxuICBhY3Rpb25zSnVzdGlmaWVkOiBcInBlLWNhcmRfX2FjdGlvbnMtLWp1c3RpZmllZFwiLFxuICBhY3Rpb25zVGlnaHQ6IFwicGUtY2FyZF9fYWN0aW9ucy0tdGlnaHRcIixcbiAgYWN0aW9uc1ZlcnRpY2FsOiBcInBlLWNhcmRfX2FjdGlvbnMtLXZlcnRpY2FsXCIsXG4gIG1lZGlhQ3JvcFg6IFwicGUtY2FyZF9fbWVkaWEtLWNyb3AteFwiLFxuICBtZWRpYUNyb3BZOiBcInBlLWNhcmRfX21lZGlhLS1jcm9wLXlcIixcbiAgbWVkaWFPcmlnaW5TdGFydDogXCJwZS1jYXJkX19tZWRpYS0tb3JpZ2luLXN0YXJ0XCIsXG4gIG1lZGlhT3JpZ2luQ2VudGVyOiBcInBlLWNhcmRfX21lZGlhLS1vcmlnaW4tY2VudGVyXCIsXG4gIG1lZGlhT3JpZ2luRW5kOiBcInBlLWNhcmRfX21lZGlhLS1vcmlnaW4tZW5kXCIsXG4gIG1lZGlhTGFyZ2U6IFwicGUtY2FyZF9fbWVkaWEtLWxhcmdlXCIsXG4gIG1lZGlhTWVkaXVtOiBcInBlLWNhcmRfX21lZGlhLS1tZWRpdW1cIixcbiAgbWVkaWFSYXRpb0xhbmRzY2FwZTogXCJwZS1jYXJkX19tZWRpYS0tbGFuZHNjYXBlXCIsXG4gIG1lZGlhUmF0aW9TcXVhcmU6IFwicGUtY2FyZF9fbWVkaWEtLXNxdWFyZVwiLFxuICBtZWRpYVJlZ3VsYXI6IFwicGUtY2FyZF9fbWVkaWEtLXJlZ3VsYXJcIixcbiAgbWVkaWFTbWFsbDogXCJwZS1jYXJkX19tZWRpYS0tc21hbGxcIixcbiAgb3ZlcmxheVNoZWV0OiBcInBlLWNhcmRfX292ZXJsYXktLXNoZWV0XCIsXG4gIHByaW1hcnlIYXNNZWRpYTogXCJwZS1jYXJkX19wcmltYXJ5LS1tZWRpYVwiLFxuICBwcmltYXJ5VGlnaHQ6IFwicGUtY2FyZF9fcHJpbWFyeS0tdGlnaHRcIixcbiAgdGV4dFRpZ2h0OiBcInBlLWNhcmRfX3RleHQtLXRpZ2h0XCJcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgZ2VuZXJhbEZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxufTtcblxudmFyIHRpbnRGbnMgPSBmdW5jdGlvbiB0aW50Rm5zKHRpbnQpIHtcbiAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9tYWluX2JhY2tncm91bmRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX21haW5fYmFja2dyb3VuZFwiXVxuICAgIH0pXTtcbiAgfSk7XG59O1xuXG52YXIgbGlnaHRUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJsaWdodFwiKSk7XG5cbnZhciBkYXJrVGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwiZGFya1wiKSk7XG5cbnZhciBjb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgdmFyRm5zOiB7XG4gICAgbGlnaHRUaW50Rm5zOiBsaWdodFRpbnRGbnMsXG4gICAgZGFya1RpbnRGbnM6IGRhcmtUaW50Rm5zXG4gIH1cbn0pO1xuXG52YXIgZ2VuZXJhbEZucyQxID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW107XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG59O1xuXG52YXIgdGludEZucyQxID0gZnVuY3Rpb24gdGludEZucyh0aW50KSB7XG4gIHZhciBfcmVmO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3RpdGxlX3RleHRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jYXJkX190aXRsZVwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdGl0bGVfdGV4dFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3N1YnRpdGxlX3RleHRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jYXJkX19zdWJ0aXRsZVwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfc3VidGl0bGVfdGV4dFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3RleHRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jYXJkX190ZXh0XCI6IHtcbiAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90ZXh0XCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfYWN0aW9uc19ib3JkZXJcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jYXJkX19hY3Rpb25zLS1ib3JkZXJcIjoge1xuICAgICAgICBib3JkZXJUb3A6IFwiMXB4IHNvbGlkIFwiICsgdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2FjdGlvbnNfYm9yZGVyXCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX3JlZjtcbn07XG5cbnZhciBsaWdodFRpbnRGbnMkMSA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zJDEsIHRpbnRGbnMkMShcImxpZ2h0XCIpKTtcblxudmFyIGRhcmtUaW50Rm5zJDEgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucyQxLCB0aW50Rm5zJDEoXCJkYXJrXCIpKTtcblxudmFyIGNvbnRlbnRDb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgdmFyRm5zOiB7XG4gICAgbGlnaHRUaW50Rm5zOiBsaWdodFRpbnRGbnMkMSxcbiAgICBkYXJrVGludEZuczogZGFya1RpbnRGbnMkMVxuICB9XG59KTtcblxuLyoqIFxuICogQHBhcmFtIHtib29sZWFufSBpc1JUTCBcbiAqL1xuXG52YXIgYWxpZ25TaWRlID0gZnVuY3Rpb24gYWxpZ25TaWRlKGlzUlRMKSB7XG4gIHJldHVybiAoLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzZWxlY3Rvcl1cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW3ZhcnNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICApO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbnZhciBhbGlnbkxlZnQgPSBhbGlnblNpZGUoKTtcbnZhciBhbGlnblJpZ2h0ID0gYWxpZ25TaWRlKCk7XG5cbnZhciB0aWdodF90aXRsZV9wYWRkaW5nX2JvdHRvbV9zdWJ0aXRsZV9saW5lX2hlaWdodF9wYWRkaW5nX2JvdHRvbSA9IGZ1bmN0aW9uIHRpZ2h0X3RpdGxlX3BhZGRpbmdfYm90dG9tX3N1YnRpdGxlX2xpbmVfaGVpZ2h0X3BhZGRpbmdfYm90dG9tKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtY2FyZF9fcHJpbWFyeVwiOiB7XG4gICAgICBcIi5wZS1jYXJkX19wcmltYXJ5LS10aWdodFwiOiB7XG4gICAgICAgIFwiIC5wZS1jYXJkX190aXRsZVwiOiB7XG4gICAgICAgICAgcGFkZGluZ0JvdHRvbTogdmFycy50aWdodF90aXRsZV9wYWRkaW5nX2JvdHRvbSAtIHZhcnMuc3VidGl0bGVfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20gKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgdGl0bGVfcGFkZGluZ192X3RpdGxlX3BhZGRpbmdfaF9zdWJ0aXRsZV9saW5lX2hlaWdodF9wYWRkaW5nX2JvdHRvbSA9IGZ1bmN0aW9uIHRpdGxlX3BhZGRpbmdfdl90aXRsZV9wYWRkaW5nX2hfc3VidGl0bGVfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20oc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiIC5wZS1jYXJkX190aXRsZVwiOiB7XG4gICAgICBwYWRkaW5nOiBbdmFycy50aXRsZV9wYWRkaW5nX3YsIHZhcnMudGl0bGVfcGFkZGluZ19oLCB2YXJzLnRpdGxlX3BhZGRpbmdfdiAtIHZhcnMuc3VidGl0bGVfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20sIHZhcnMudGl0bGVfcGFkZGluZ19oXS5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIHYgKyBcInB4XCI7XG4gICAgICB9KS5qb2luKFwiIFwiKVxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgdGV4dF9wYWRkaW5nX3ZfdGV4dF9saW5lX2hlaWdodF9wYWRkaW5nX3RvcCA9IGZ1bmN0aW9uIHRleHRfcGFkZGluZ192X3RleHRfbGluZV9oZWlnaHRfcGFkZGluZ190b3Aoc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiIC5wZS1jYXJkX190ZXh0XCI6IHtcbiAgICAgIHBhZGRpbmdUb3A6IHZhcnMudGV4dF9wYWRkaW5nX3YgLSB2YXJzLnRleHRfbGluZV9oZWlnaHRfcGFkZGluZ190b3AgKyBcInB4XCJcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIHRleHRfcGFkZGluZ19ib3R0b21fdGV4dF9saW5lX2hlaWdodF9wYWRkaW5nX2JvdHRvbSA9IGZ1bmN0aW9uIHRleHRfcGFkZGluZ19ib3R0b21fdGV4dF9saW5lX2hlaWdodF9wYWRkaW5nX2JvdHRvbShzZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gc2VsKHNlbGVjdG9yLCB7XG4gICAgXCIgLnBlLWNhcmRfX3RleHRcIjoge1xuICAgICAgXCImOmxhc3QtY2hpbGRcIjoge1xuICAgICAgICBwYWRkaW5nQm90dG9tOiB2YXJzLnRleHRfcGFkZGluZ19ib3R0b20gLSB2YXJzLnRleHRfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20gKyBcInB4XCJcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxudmFyIHRpZ2h0X3RleHRfcGFkZGluZ19ib3R0b21fdGV4dF9saW5lX2hlaWdodF9wYWRkaW5nX2JvdHRvbSA9IGZ1bmN0aW9uIHRpZ2h0X3RleHRfcGFkZGluZ19ib3R0b21fdGV4dF9saW5lX2hlaWdodF9wYWRkaW5nX2JvdHRvbShzZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gc2VsKHNlbGVjdG9yLCB7XG4gICAgXCIgLnBlLWNhcmRfX3RleHRcIjoge1xuICAgICAgcGFkZGluZ0JvdHRvbTogdmFycy50aWdodF90ZXh0X3BhZGRpbmdfYm90dG9tIC0gdmFycy50ZXh0X2xpbmVfaGVpZ2h0X3BhZGRpbmdfYm90dG9tICsgXCJweFwiLFxuICAgICAgXCIucGUtY2FyZF9fdGV4dC0tdGlnaHQsICYucGUtY2FyZF9fdGV4dC0tdGlnaHQ6bGFzdC1jaGlsZFwiOiB7XG4gICAgICAgIHBhZGRpbmdCb3R0b206IHZhcnMudGlnaHRfdGV4dF9wYWRkaW5nX2JvdHRvbSAtIHZhcnMudGV4dF9saW5lX2hlaWdodF9wYWRkaW5nX2JvdHRvbSArIFwicHhcIlxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgdmFyRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IsIHZhcnMkMSkge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbYWxpZ25MZWZ0KHZhcnMkMSksIHtcbiAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICBcIiYsIGE6bGluaywgYTp2aXNpdGVkXCI6IHtcbiAgICAgICAgdGV4dERlY29yYXRpb246IFwibm9uZVwiXG4gICAgICB9LFxuICAgICAgLy8gQ29udGVudFxuICAgICAgXCIgLnBlLWNhcmRfX2NvbnRlbnRcIjoge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBib3JkZXJSYWRpdXM6IFwiaW5oZXJpdFwiLFxuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgd2lkdGg6IFwiaW5oZXJpdFwiLFxuICAgICAgICBoZWlnaHQ6IFwiaW5oZXJpdFwiXG4gICAgICB9LFxuICAgICAgLy8gTWVkaWFcbiAgICAgIFwiIC5wZS1jYXJkX19tZWRpYVwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBcImluaGVyaXRcIixcbiAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IFwiaW5oZXJpdFwiLFxuICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlclwiLFxuICAgICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiLFxuICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwiY2VudGVyXCIsXG4gICAgICAgIFwiLnBlLWNhcmRfX21lZGlhLS1sYW5kc2NhcGVcIjoge1xuICAgICAgICAgIHBhZGRpbmdCb3R0b206IDEwMCAvIDE2ICogOSArIFwiJVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiLnBlLWNhcmRfX21lZGlhLS1zcXVhcmVcIjoge1xuICAgICAgICAgIHBhZGRpbmdCb3R0b206IFwiMTAwJVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiLnBlLWNhcmRfX21lZGlhLS1jcm9wLXhcIjoge1xuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiYXV0b1wiLFxuICAgICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgICBcIi5wZS1jYXJkX19tZWRpYS0tb3JpZ2luLXN0YXJ0XCI6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvblk6IFwidG9wXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiLnBlLWNhcmRfX21lZGlhLS1vcmlnaW4tZW5kXCI6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvblk6IFwiYm90dG9tXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiLnBlLWNhcmRfX21lZGlhLS1jcm9wLXlcIjoge1xuICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgd2lkdGg6IFwiYXV0b1wiLFxuICAgICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgICBcIi5wZS1jYXJkX19tZWRpYS0tb3JpZ2luLXN0YXJ0XCI6IHtcbiAgICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvblg6IFwibGVmdFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIi5wZS1jYXJkX19tZWRpYS0tb3JpZ2luLWVuZFwiOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb25YOiBcInJpZ2h0XCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiIGltZywgaWZyYW1lXCI6IFttaXhpbi5maXQoKSwge1xuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICAgIG1heFdpZHRoOiBcIm5vbmVcIlxuICAgICAgICB9XSxcbiAgICAgICAgXCIgaW1nXCI6IHtcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgLyogYWxsb3dzIHJpZ2h0LWNsaWNrIG9uIGltYWdlICovXG5cbiAgICAgICAgfSxcbiAgICAgICAgXCIgLnBlLWNhcmRfX2hlYWRlciArIC5wZS1jYXJkX19tZWRpYVwiOiB7XG4gICAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogMCxcbiAgICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIgLnBlLWNhcmRfX3ByaW1hcnktbWVkaWFcIjoge1xuICAgICAgICBtYXJnaW46IFwiMTZweFwiXG4gICAgICB9LFxuICAgICAgLy8gT3ZlcmxheVxuICAgICAgXCIgLnBlLWNhcmRfX292ZXJsYXlcIjogbWl4aW4uZml0KCksXG4gICAgICAvLyBEaW1tZXJcbiAgICAgIFwiIC5wZS1jYXJkX19tZWRpYV9fZGltbWVyXCI6IFttaXhpbi5maXQoKSwge1xuICAgICAgICB6SW5kZXg6IDEsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6IFwiYWxsXCJcbiAgICAgIH1dLFxuICAgICAgXCIgLnBlLWNhcmRfX292ZXJsYXlfX2NvbnRlbnRcIjoge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIHRvcDogXCJhdXRvXCIsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB6SW5kZXg6IDJcbiAgICAgIH0sXG4gICAgICAvLyBIZWFkZXJcbiAgICAgIFwiIC5wZS1jYXJkX19oZWFkZXJcIjoge1xuICAgICAgICBcIiAucGUtbGlzdC10aWxlX190aXRsZVwiOiB7XG4gICAgICAgICAgZm9udFNpemU6IFwiMTRweFwiLFxuICAgICAgICAgIGZvbnRXZWlnaHQ6IHZhcnMuZm9udF93ZWlnaHRfbm9ybWFsLFxuICAgICAgICAgIGxpbmVIZWlnaHQ6IFwiMjBweFwiLFxuICAgICAgICAgIG1hcmdpblRvcDogXCIycHhcIlxuICAgICAgICB9LFxuICAgICAgICBcIiAucGUtbGlzdC10aWxlX19zdWJ0aXRsZVwiOiB7XG4gICAgICAgICAgbWFyZ2luVG9wOiBcIi0xcHhcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gUHJpbWFyeSBcbiAgICAgIFwiIC5wZS1jYXJkX19wcmltYXJ5XCI6IFtmbGV4LmxheW91dEhvcml6b250YWwsIHtcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgXCImICsgLnBlLWNhcmRfX3RleHRcIjoge1xuICAgICAgICAgIG1hcmdpblRvcDogXCItMTZweFwiXG4gICAgICAgIH1cbiAgICAgIH1dLFxuICAgICAgLy8gVGl0bGVcbiAgICAgIFwiIC5wZS1jYXJkX190aXRsZVwiOiBbZmxleC5mbGV4KCksIHtcbiAgICAgICAgZm9udFNpemU6IFwiMjRweFwiLFxuICAgICAgICBsaW5lSGVpZ2h0OiBcIjI5cHhcIlxuICAgICAgfV0sXG4gICAgICAvLyBTdWJ0aXRsZVxuICAgICAgXCIgLnBlLWNhcmRfX3N1YnRpdGxlXCI6IHtcbiAgICAgICAgZm9udFNpemU6IFwiMTRweFwiLFxuICAgICAgICBsaW5lSGVpZ2h0OiBcIjI0cHhcIlxuICAgICAgfSxcbiAgICAgIC8vIEFjdGlvbnNcbiAgICAgIFwiIC5wZS1jYXJkX19hY3Rpb25zXCI6IHtcbiAgICAgICAgXCIucGUtY2FyZF9fYWN0aW9ucy0tdGlnaHRcIjoge1xuICAgICAgICAgIG1pbkhlaWdodDogMCxcbiAgICAgICAgICBwYWRkaW5nVG9wOiAwLFxuICAgICAgICAgIHBhZGRpbmdCb3R0b206IDAsXG4gICAgICAgICAgXCIucGUtY2FyZF9fYWN0aW9ucy0tdmVydGljYWxcIjoge1xuICAgICAgICAgICAgcGFkZGluZ0xlZnQ6IDAsXG4gICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwiLnBlLWNhcmRfX2FjdGlvbnMtLWhvcml6b250YWxcIjoge1xuICAgICAgICAgIG1pbkhlaWdodDogMzYgKyAyICogOCArIFwicHhcIixcbiAgICAgICAgICBoZWlnaHQ6IDM2ICsgMiAqIDggKyBcInB4XCIgLy8gbWFrZSBhbGlnbi1pdGVtcyB3b3JrIG9uIElFIDExOiBodHRwczovL2dpdGh1Yi5jb20vcGhpbGlwd2FsdG9uL2ZsZXhidWdzL2lzc3Vlcy8yMzFcblxuICAgICAgICB9LFxuICAgICAgICBcIi5wZS1jYXJkX19hY3Rpb25zLS1ob3Jpem9udGFsOm5vdCgucGUtY2FyZF9fYWN0aW9ucy0tanVzdGlmaWVkKVwiOiBbZmxleC5sYXlvdXRIb3Jpem9udGFsLCBmbGV4LmxheW91dENlbnRlciwge1xuICAgICAgICAgIFwiIC5wZS1idXR0b25cIjoge1xuICAgICAgICAgICAgbWluV2lkdGg6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH1dLFxuICAgICAgICBcIi5wZS1jYXJkX19hY3Rpb25zLS1qdXN0aWZpZWRcIjogW2ZsZXgubGF5b3V0SnVzdGlmaWVkXSxcbiAgICAgICAgXCIucGUtY2FyZF9fYWN0aW9ucy0tdmVydGljYWxcIjogW2ZsZXgubGF5b3V0VmVydGljYWwsIHtcbiAgICAgICAgICAvLyBuZXN0ZWRcbiAgICAgICAgICBcIiAucGUtY2FyZF9fYWN0aW9uc1wiOiBbe1xuICAgICAgICAgICAgbWluSGVpZ2h0OiAwXG4gICAgICAgICAgfV0sXG4gICAgICAgICAgXCIgLnBlLWJ1dHRvblwiOiB7XG4gICAgICAgICAgICBoZWlnaHQ6IFwiMzZweFwiLFxuICAgICAgICAgICAgcGFkZGluZzogMFxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCIgLnBlLWxpc3RcIjoge1xuICAgICAgICAgICAgcGFkZGluZzogMFxuICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICAgIH0sXG4gICAgICBcIiAucGUtY2FyZF9fcHJpbWFyeS5wZS1jYXJkX19wcmltYXJ5LS1tZWRpYSArIC5wZS1jYXJkX19hY3Rpb25zXCI6IHtcbiAgICAgICAgbWFyZ2luVG9wOiBcIi0xNnB4XCJcbiAgICAgIH0sXG4gICAgICAvLyBUZXh0XG4gICAgICBcIiAucGUtY2FyZF9fdGV4dFwiOiB7XG4gICAgICAgIGZvbnRTaXplOiBcIjE0cHhcIixcbiAgICAgICAgbGluZUhlaWdodDogXCIyNHB4XCIsXG4gICAgICAgIFwiIC5wZS1jYXJkX19hY3Rpb25zICsgJlwiOiB7XG4gICAgICAgICAgbWFyZ2luVG9wOiBcIjhweFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIiAucGUtY2FyZF9fdGV4dCwgLnBlLWNhcmRfX3ByaW1hcnlcIjoge1xuICAgICAgICBcIiYgKyAucGUtY2FyZF9fYWN0aW9uczpub3QoOmxhc3QtY2hpbGQpXCI6IHtcbiAgICAgICAgICAvLyBMaWZ0IHVwIHNvIHRoYXQgZnVsbCBidXR0b24gYXJlYSBpcyB1c2FibGVcbiAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICAgIHpJbmRleDogMVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgLy8gUlRMXG4gICAgICBcIipbZGlyPXJ0bF0sIC5wZS1ydGwgXCI6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgc2VsZWN0b3IsIGFsaWduUmlnaHQodmFycyQxKSlcbiAgICB9XSldO1xuICB9LFxuICBib3JkZXJfcmFkaXVzOiBmdW5jdGlvbiBib3JkZXJfcmFkaXVzKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIGJvcmRlclJhZGl1czogdmFycy5ib3JkZXJfcmFkaXVzICsgXCJweFwiLFxuICAgICAgXCIgLnBlLWNhcmRfX2NvbnRlbnQgLnBlLWNhcmRfX21lZGlhXCI6IHtcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogMCxcbiAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IDAsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IDAsXG4gICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAwXG4gICAgICB9LFxuICAgICAgXCIgLnBlLWNhcmRfX2NvbnRlbnQgLnBlLWNhcmRfX21lZGlhOm5vdCgucGUtY2FyZF9fbWVkaWEtLXNxdWFyZSk6bm90KC5wZS1jYXJkX19tZWRpYS0tbGFuZHNjYXBlKVwiOiB7XG4gICAgICAgIFwiOmZpcnN0LWNoaWxkXCI6IHtcbiAgICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiB2YXJzLmJvcmRlcl9yYWRpdXMgKyBcInB4XCIsXG4gICAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHZhcnMuYm9yZGVyX3JhZGl1cyArIFwicHhcIlxuICAgICAgICB9LFxuICAgICAgICBcIjpsYXN0LWNoaWxkXCI6IHtcbiAgICAgICAgICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiB2YXJzLmJvcmRlcl9yYWRpdXMgKyBcInB4XCIsXG4gICAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IHZhcnMuYm9yZGVyX3JhZGl1cyArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBpbWFnZV9zaXplX3NtYWxsOiBmdW5jdGlvbiBpbWFnZV9zaXplX3NtYWxsKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jYXJkX19wcmltYXJ5LW1lZGlhXCI6IHtcbiAgICAgICAgXCIgLnBlLWNhcmRfX21lZGlhLS1zbWFsbFwiOiB7XG4gICAgICAgICAgd2lkdGg6IHZhcnMuaW1hZ2Vfc2l6ZV9zbWFsbCArIFwicHhcIixcbiAgICAgICAgICBoZWlnaHQ6IHZhcnMuaW1hZ2Vfc2l6ZV9zbWFsbCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBpbWFnZV9zaXplX3JlZ3VsYXI6IGZ1bmN0aW9uIGltYWdlX3NpemVfcmVndWxhcihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtY2FyZF9fcHJpbWFyeS1tZWRpYVwiOiB7XG4gICAgICAgIFwiIC5wZS1jYXJkX19tZWRpYS0tcmVndWxhclwiOiB7XG4gICAgICAgICAgd2lkdGg6IHZhcnMuaW1hZ2Vfc2l6ZV9yZWd1bGFyICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGltYWdlX3NpemVfbWVkaXVtOiBmdW5jdGlvbiBpbWFnZV9zaXplX21lZGl1bShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtY2FyZF9fcHJpbWFyeS1tZWRpYVwiOiB7XG4gICAgICAgIFwiIC5wZS1jYXJkX19tZWRpYS0tbWVkaXVtXCI6IHtcbiAgICAgICAgICB3aWR0aDogdmFycy5pbWFnZV9zaXplX21lZGl1bSArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBpbWFnZV9zaXplX2xhcmdlOiBmdW5jdGlvbiBpbWFnZV9zaXplX2xhcmdlKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jYXJkX19wcmltYXJ5LW1lZGlhXCI6IHtcbiAgICAgICAgXCIgLnBlLWNhcmRfX21lZGlhLS1sYXJnZVwiOiB7XG4gICAgICAgICAgd2lkdGg6IHZhcnMuaW1hZ2Vfc2l6ZV9sYXJnZSArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBvbmVfbGluZV9oZWlnaHRfd2l0aF9pY29uOiBmdW5jdGlvbiBvbmVfbGluZV9oZWlnaHRfd2l0aF9pY29uKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jYXJkX19oZWFkZXJcIjoge1xuICAgICAgICBoZWlnaHQ6IHZhcnMub25lX2xpbmVfaGVpZ2h0X3dpdGhfaWNvbiArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgdGlnaHRfdGl0bGVfcGFkZGluZ19ib3R0b206IGZ1bmN0aW9uIHRpZ2h0X3RpdGxlX3BhZGRpbmdfYm90dG9tKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHt9KSwgdGlnaHRfdGl0bGVfcGFkZGluZ19ib3R0b21fc3VidGl0bGVfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20oc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgc3VidGl0bGVfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b206IGZ1bmN0aW9uIHN1YnRpdGxlX2xpbmVfaGVpZ2h0X3BhZGRpbmdfYm90dG9tKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHt9KSwgdGlnaHRfdGl0bGVfcGFkZGluZ19ib3R0b21fc3VidGl0bGVfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20oc2VsZWN0b3IsIHZhcnMpLCB0aXRsZV9wYWRkaW5nX3ZfdGl0bGVfcGFkZGluZ19oX3N1YnRpdGxlX2xpbmVfaGVpZ2h0X3BhZGRpbmdfYm90dG9tKHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIHRpdGxlX3BhZGRpbmdfdjogZnVuY3Rpb24gdGl0bGVfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHt9KSwgdGl0bGVfcGFkZGluZ192X3RpdGxlX3BhZGRpbmdfaF9zdWJ0aXRsZV9saW5lX2hlaWdodF9wYWRkaW5nX2JvdHRvbShzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICB0aXRsZV9wYWRkaW5nX2g6IGZ1bmN0aW9uIHRpdGxlX3BhZGRpbmdfaChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7fSksIHRpdGxlX3BhZGRpbmdfdl90aXRsZV9wYWRkaW5nX2hfc3VidGl0bGVfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20oc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgYWN0aW9uc19idXR0b25fbWFyZ2luX2g6IGZ1bmN0aW9uIGFjdGlvbnNfYnV0dG9uX21hcmdpbl9oKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jYXJkX19hY3Rpb25zLnBlLWNhcmRfX2FjdGlvbnMtLWhvcml6b250YWxcIjoge1xuICAgICAgICBtYXJnaW46IFwiMCAtXCIuY29uY2F0KHZhcnMuYWN0aW9uc19idXR0b25fbWFyZ2luX2gsIFwicHhcIiksXG4gICAgICAgIFwiIC5wZS1idXR0b25cIjoge1xuICAgICAgICAgIG1hcmdpbjogXCIwIFwiLmNvbmNhdCh2YXJzLmFjdGlvbnNfYnV0dG9uX21hcmdpbl9oLCBcInB4XCIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGFjdGlvbnNfcGFkZGluZ192OiBmdW5jdGlvbiBhY3Rpb25zX3BhZGRpbmdfdihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtY2FyZF9fYWN0aW9uc1wiOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IHZhcnMuYWN0aW9uc19wYWRkaW5nX3YgKyBcInB4XCIsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IHZhcnMuYWN0aW9uc19wYWRkaW5nX3YgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGFjdGlvbnNfcGFkZGluZ19oOiBmdW5jdGlvbiBhY3Rpb25zX3BhZGRpbmdfaChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtY2FyZF9fYWN0aW9uc1wiOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogdmFycy5hY3Rpb25zX3BhZGRpbmdfaCArIFwicHhcIixcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHZhcnMuYWN0aW9uc19wYWRkaW5nX2ggKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGFjdGlvbnNfYnV0dG9uX21hcmdpbl92OiBmdW5jdGlvbiBhY3Rpb25zX2J1dHRvbl9tYXJnaW5fdihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtY2FyZF9fYWN0aW9uc1wiOiB7XG4gICAgICAgIFwiLnBlLWNhcmRfX2FjdGlvbnMtLXZlcnRpY2FsXCI6IHtcbiAgICAgICAgICBcIiAucGUtYnV0dG9uXCI6IHtcbiAgICAgICAgICAgIG1hcmdpblRvcDogdmFycy5hY3Rpb25zX2J1dHRvbl9tYXJnaW5fdiArIFwicHhcIixcbiAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogdmFycy5hY3Rpb25zX2J1dHRvbl9tYXJnaW5fdiArIFwicHhcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgYWN0aW9uc192ZXJ0aWNhbF9wYWRkaW5nX3Y6IGZ1bmN0aW9uIGFjdGlvbnNfdmVydGljYWxfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jYXJkX19hY3Rpb25zXCI6IHtcbiAgICAgICAgXCIucGUtY2FyZF9fYWN0aW9ucy0tdmVydGljYWxcIjoge1xuICAgICAgICAgIFwiOm5vdCgucGUtY2FyZF9fYWN0aW9ucy0tdGlnaHQpXCI6IHtcbiAgICAgICAgICAgIHBhZGRpbmdUb3A6IHZhcnMuYWN0aW9uc192ZXJ0aWNhbF9wYWRkaW5nX3YgKyBcInB4XCIsXG4gICAgICAgICAgICBwYWRkaW5nQm90dG9tOiB2YXJzLmFjdGlvbnNfdmVydGljYWxfcGFkZGluZ192ICsgXCJweFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICAvLyBuZXN0ZWRcbiAgICAgICAgICBcIiAucGUtY2FyZF9fYWN0aW9uc1wiOiBbe1xuICAgICAgICAgICAgXCImOmZpcnN0LWNoaWxkXCI6IHtcbiAgICAgICAgICAgICAgbWFyZ2luVG9wOiAtdmFycy5hY3Rpb25zX3ZlcnRpY2FsX3BhZGRpbmdfdiArIFwicHhcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiJjpsYXN0LWNoaWxkXCI6IHtcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAtdmFycy5hY3Rpb25zX3ZlcnRpY2FsX3BhZGRpbmdfdiArIFwicHhcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1dXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIG9mZnNldF9zbWFsbF9wYWRkaW5nX3Y6IGZ1bmN0aW9uIG9mZnNldF9zbWFsbF9wYWRkaW5nX3Yoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWNhcmRfX3RleHQsIC5wZS1jYXJkX19wcmltYXJ5XCI6IHtcbiAgICAgICAgXCImICsgLnBlLWNhcmRfX2FjdGlvbnM6bm90KDpsYXN0LWNoaWxkKVwiOiB7XG4gICAgICAgICAgbWFyZ2luVG9wOiAtKHZhcnMub2Zmc2V0X3NtYWxsX3BhZGRpbmdfdiArIDMpICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIHRleHRfcGFkZGluZ19oOiBmdW5jdGlvbiB0ZXh0X3BhZGRpbmdfaChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtY2FyZF9fdGV4dFwiOiB7XG4gICAgICAgIHBhZGRpbmdSaWdodDogdmFycy50ZXh0X3BhZGRpbmdfaCArIFwicHhcIixcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHZhcnMudGV4dF9wYWRkaW5nX2ggKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIHRleHRfcGFkZGluZ192OiBmdW5jdGlvbiB0ZXh0X3BhZGRpbmdfdihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7fSksIHRleHRfcGFkZGluZ192X3RleHRfbGluZV9oZWlnaHRfcGFkZGluZ190b3Aoc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgdGV4dF9saW5lX2hlaWdodF9wYWRkaW5nX3RvcDogZnVuY3Rpb24gdGV4dF9saW5lX2hlaWdodF9wYWRkaW5nX3RvcChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7fSksIHRleHRfcGFkZGluZ192X3RleHRfbGluZV9oZWlnaHRfcGFkZGluZ190b3Aoc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgdGV4dF9wYWRkaW5nX2JvdHRvbTogZnVuY3Rpb24gdGV4dF9wYWRkaW5nX2JvdHRvbShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7fSksIHRleHRfcGFkZGluZ19ib3R0b21fdGV4dF9saW5lX2hlaWdodF9wYWRkaW5nX2JvdHRvbShzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICB0aWdodF90ZXh0X3BhZGRpbmdfYm90dG9tOiBmdW5jdGlvbiB0aWdodF90ZXh0X3BhZGRpbmdfYm90dG9tKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHt9KSwgdGlnaHRfdGV4dF9wYWRkaW5nX2JvdHRvbV90ZXh0X2xpbmVfaGVpZ2h0X3BhZGRpbmdfYm90dG9tKHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIHRleHRfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b206IGZ1bmN0aW9uIHRleHRfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20oc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge30pLCB0ZXh0X3BhZGRpbmdfYm90dG9tX3RleHRfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20oc2VsZWN0b3IsIHZhcnMpLCB0aWdodF90ZXh0X3BhZGRpbmdfYm90dG9tX3RleHRfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20oc2VsZWN0b3IsIHZhcnMpXTtcbiAgfVxufTtcbnZhciBsYXlvdXQgPSBjcmVhdGVMYXlvdXQoe1xuICB2YXJGbnM6IHZhckZuc1xufSk7XG5cbnZhciBnZW5lcmFsRm5zJDIgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cbn07XG5cbnZhciB0aW50Rm5zJDIgPSBmdW5jdGlvbiB0aW50Rm5zKHRpbnQpIHtcbiAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9vdmVybGF5X2JhY2tncm91bmRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jYXJkX19vdmVybGF5X19jb250ZW50XCI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfb3ZlcmxheV9iYWNrZ3JvdW5kXCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KTtcbn07XG5cbnZhciBsaWdodFRpbnRGbnMkMiA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zJDIsIHRpbnRGbnMkMihcImxpZ2h0XCIpKTtcblxudmFyIGRhcmtUaW50Rm5zJDIgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucyQyLCB0aW50Rm5zJDIoXCJkYXJrXCIpKTtcblxudmFyIG92ZXJsYXlDb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgdmFyRm5zOiB7XG4gICAgbGlnaHRUaW50Rm5zOiBsaWdodFRpbnRGbnMkMixcbiAgICBkYXJrVGludEZuczogZGFya1RpbnRGbnMkMlxuICB9XG59KTtcblxuLy8gQHRzLWNoZWNrXG52YXIgcGFkZGluZ192ID0gMjQ7XG52YXIgcGFkZGluZ19hY3Rpb25zX3YgPSA4O1xudmFyIGFjdGlvbnNfYnV0dG9uX21hcmdpbl92ID0gMjtcbi8qKlxuICogQHR5cGUge0NhcmRWYXJzfSBjYXJkVmFyc1xuICovXG5cbnZhciBjYXJkVmFycyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IHRydWUsXG4gIGFjdGlvbnNfYnV0dG9uX21hcmdpbl9oOiB2YXJzLmdyaWRfdW5pdCxcbiAgYWN0aW9uc19idXR0b25fbWFyZ2luX3Y6IGFjdGlvbnNfYnV0dG9uX21hcmdpbl92LFxuICBhY3Rpb25zX3BhZGRpbmdfaDogOCxcbiAgYWN0aW9uc19wYWRkaW5nX3Y6IDAsXG4gIGFjdGlvbnNfdmVydGljYWxfcGFkZGluZ192OiBwYWRkaW5nX2FjdGlvbnNfdiAtIGFjdGlvbnNfYnV0dG9uX21hcmdpbl92LFxuICBib3JkZXJfcmFkaXVzOiB2YXJzLnVuaXRfYmxvY2tfYm9yZGVyX3JhZGl1cyxcbiAgaWNvbl9lbGVtZW50X3dpZHRoOiA3MiAtIDQsXG4gIGltYWdlX3NpemVfbGFyZ2U6IDMgKiA4MCxcbiAgaW1hZ2Vfc2l6ZV9tZWRpdW06IDIgKiA4MCxcbiAgaW1hZ2Vfc2l6ZV9yZWd1bGFyOiAxLjQgKiA4MCxcbiAgaW1hZ2Vfc2l6ZV9zbWFsbDogMSAqIDgwLFxuICBvZmZzZXRfc21hbGxfcGFkZGluZ192OiBwYWRkaW5nX3YgLSAxNixcbiAgb25lX2xpbmVfaGVpZ2h0X3dpdGhfaWNvbjogNzIsXG4gIG9uZV9saW5lX3BhZGRpbmdfdjogOCxcbiAgcGFkZGluZ19oOiAxNixcbiAgc3VidGl0bGVfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b206IDcsXG4gIHRleHRfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b206IDcsXG4gIHRleHRfbGluZV9oZWlnaHRfcGFkZGluZ190b3A6IDYsXG4gIHRleHRfcGFkZGluZ19ib3R0b206IDI0LFxuICB0ZXh0X3BhZGRpbmdfaDogMTYsXG4gIHRleHRfcGFkZGluZ192OiAxNixcbiAgdGlnaHRfdGV4dF9wYWRkaW5nX2JvdHRvbTogMTYsXG4gIHRpZ2h0X3RpdGxlX3BhZGRpbmdfYm90dG9tOiAxNixcbiAgdGl0bGVfcGFkZGluZ19oOiAxNixcbiAgdGl0bGVfcGFkZGluZ192OiAyNCxcbiAgY29sb3JfbGlnaHRfbWFpbl9iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfYmFja2dyb3VuZCksXG4gIGNvbG9yX2xpZ2h0X3RpdGxlX3RleHQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfcHJpbWFyeSksXG4gIGNvbG9yX2xpZ2h0X3N1YnRpdGxlX3RleHQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfc2Vjb25kYXJ5KSxcbiAgY29sb3JfbGlnaHRfdGV4dDogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfdGV4dF9yZWd1bGFyKSxcbiAgY29sb3JfbGlnaHRfYWN0aW9uc19ib3JkZXI6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X2JvcmRlcl9saWdodCksXG4gIGNvbG9yX2xpZ2h0X292ZXJsYXlfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2JhY2tncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfb3ZlcmxheV9iYWNrZ3JvdW5kKSxcbiAgY29sb3JfZGFya19tYWluX2JhY2tncm91bmQ6IHJnYmEodmFycy5jb2xvcl9kYXJrX2JhY2tncm91bmQpLFxuICBjb2xvcl9kYXJrX3RpdGxlX3RleHQ6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3ByaW1hcnkpLFxuICBjb2xvcl9kYXJrX3N1YnRpdGxlX3RleHQ6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3NlY29uZGFyeSksXG4gIGNvbG9yX2RhcmtfdGV4dDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX3RleHRfcmVndWxhciksXG4gIGNvbG9yX2RhcmtfYWN0aW9uc19ib3JkZXI6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya19ib3JkZXJfbGlnaHQpLFxuICBjb2xvcl9kYXJrX292ZXJsYXlfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfYmFja2dyb3VuZCwgdmFycy5ibGVuZF9kYXJrX292ZXJsYXlfYmFja2dyb3VuZClcbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIHNlbGVjdG9yID0gXCIuXCIuY29uY2F0KGNsYXNzZXMuY29tcG9uZW50KTtcbnZhciBjb250ZW50U2VsZWN0b3IgPSBcIi5cIi5jb25jYXQoY2xhc3Nlcy5jb250ZW50KTtcbnZhciBvdmVybGF5U2hlZXRTZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLm92ZXJsYXlTaGVldCk7XG52YXIgb3ZlcmxheUNvbnRlbnRTZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLm92ZXJsYXlDb250ZW50KTtcbnZhciBiYXNlRm5zID0gW2xheW91dCwgY29sb3JdO1xudmFyIG92ZXJsYXlDb2xvckZucyA9IFtvdmVybGF5Q29sb3JdO1xudmFyIGNvbnRlbnRDb2xvckZucyA9IFtjb250ZW50Q29sb3JdO1xuXG52YXIgYWRkU3R5bGUgPSBmdW5jdGlvbiBhZGRTdHlsZShjdXN0b21TZWxlY3RvciwgY3VzdG9tVmFycykge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge30sXG4gICAgICBfcmVmJG1lZGlhUXVlcnkgPSBfcmVmLm1lZGlhUXVlcnksXG4gICAgICBtZWRpYVF1ZXJ5ID0gX3JlZiRtZWRpYVF1ZXJ5ID09PSB2b2lkIDAgPyBcIlwiIDogX3JlZiRtZWRpYVF1ZXJ5LFxuICAgICAgX3JlZiRzY29wZSA9IF9yZWYuc2NvcGUsXG4gICAgICBzY29wZSA9IF9yZWYkc2NvcGUgPT09IHZvaWQgMCA/IFwiXCIgOiBfcmVmJHNjb3BlO1xuXG4gIGN1c3RvbVNlbGVjdG9yICYmIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbY3VzdG9tU2VsZWN0b3IsIHNlbGVjdG9yXSxcbiAgICBmbnM6IGJhc2VGbnMsXG4gICAgdmFyczogY2FyZFZhcnMsXG4gICAgY3VzdG9tVmFyczogY3VzdG9tVmFycyxcbiAgICBtZWRpYVF1ZXJ5OiBtZWRpYVF1ZXJ5LFxuICAgIHNjb3BlOiBzY29wZVxuICB9KTtcbiAgY3VzdG9tU2VsZWN0b3IgJiYgc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtjdXN0b21TZWxlY3RvciwgXCIgXCIgKyBvdmVybGF5U2hlZXRTZWxlY3Rvcl0sXG4gICAgZm5zOiBvdmVybGF5Q29sb3JGbnMsXG4gICAgdmFyczogY2FyZFZhcnMsXG4gICAgY3VzdG9tVmFyczogY3VzdG9tVmFycyxcbiAgICBtZWRpYVF1ZXJ5OiBtZWRpYVF1ZXJ5LFxuICAgIHNjb3BlOiBzY29wZVxuICB9KTtcbiAgY3VzdG9tU2VsZWN0b3IgJiYgc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtjdXN0b21TZWxlY3RvciwgXCIgXCIgKyBjb250ZW50U2VsZWN0b3JdLFxuICAgIGZuczogY29udGVudENvbG9yRm5zLFxuICAgIHZhcnM6IGNhcmRWYXJzLFxuICAgIGN1c3RvbVZhcnM6IGN1c3RvbVZhcnMsXG4gICAgbWVkaWFRdWVyeTogbWVkaWFRdWVyeSxcbiAgICBzY29wZTogc2NvcGVcbiAgfSk7XG4gIGN1c3RvbVNlbGVjdG9yICYmIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbY3VzdG9tU2VsZWN0b3IsIFwiIFwiICsgb3ZlcmxheUNvbnRlbnRTZWxlY3Rvcl0sXG4gICAgZm5zOiBjb250ZW50Q29sb3JGbnMsXG4gICAgdmFyczogY2FyZFZhcnMsXG4gICAgY3VzdG9tVmFyczogY3VzdG9tVmFycyxcbiAgICBtZWRpYVF1ZXJ5OiBtZWRpYVF1ZXJ5LFxuICAgIHNjb3BlOiBzY29wZVxuICB9KTtcbn07XG5cbnZhciBnZXRTdHlsZSA9IGZ1bmN0aW9uIGdldFN0eWxlKCkge1xuICB2YXIgY3VzdG9tU2VsZWN0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFwiXCI7XG4gIHZhciBjdXN0b21WYXJzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSxcbiAgICAgIF9yZWYyJG1lZGlhUXVlcnkgPSBfcmVmMi5tZWRpYVF1ZXJ5LFxuICAgICAgbWVkaWFRdWVyeSA9IF9yZWYyJG1lZGlhUXVlcnkgPT09IHZvaWQgMCA/IFwiXCIgOiBfcmVmMiRtZWRpYVF1ZXJ5LFxuICAgICAgX3JlZjIkc2NvcGUgPSBfcmVmMi5zY29wZSxcbiAgICAgIHNjb3BlID0gX3JlZjIkc2NvcGUgPT09IHZvaWQgMCA/IFwiXCIgOiBfcmVmMiRzY29wZTtcblxuICByZXR1cm4gc3R5bGVyLmdldFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtjdXN0b21TZWxlY3Rvciwgc2VsZWN0b3JdLFxuICAgIGZuczogYmFzZUZucyxcbiAgICB2YXJzOiBjYXJkVmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzLFxuICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0pLmNvbmNhdChzdHlsZXIuZ2V0U3R5bGUoe1xuICAgIHNlbGVjdG9yczogW2N1c3RvbVNlbGVjdG9yLCBjdXN0b21TZWxlY3RvciA/IFwiIFwiIDogXCJcIiwgb3ZlcmxheVNoZWV0U2VsZWN0b3JdLFxuICAgIGZuczogb3ZlcmxheUNvbG9yRm5zLFxuICAgIHZhcnM6IGNhcmRWYXJzLFxuICAgIGN1c3RvbVZhcnM6IGN1c3RvbVZhcnMsXG4gICAgbWVkaWFRdWVyeTogbWVkaWFRdWVyeSxcbiAgICBzY29wZTogc2NvcGVcbiAgfSkpLmNvbmNhdChzdHlsZXIuZ2V0U3R5bGUoe1xuICAgIHNlbGVjdG9yczogW2N1c3RvbVNlbGVjdG9yLCBjdXN0b21TZWxlY3RvciA/IFwiIFwiIDogXCJcIiwgY29udGVudFNlbGVjdG9yXSxcbiAgICBmbnM6IGNvbnRlbnRDb2xvckZucyxcbiAgICB2YXJzOiBjYXJkVmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzLFxuICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0pKS5jb25jYXQoc3R5bGVyLmdldFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtjdXN0b21TZWxlY3RvciwgY3VzdG9tU2VsZWN0b3IgPyBcIiBcIiA6IFwiXCIsIG92ZXJsYXlDb250ZW50U2VsZWN0b3JdLFxuICAgIGZuczogY29udGVudENvbG9yRm5zLFxuICAgIHZhcnM6IGNhcmRWYXJzLFxuICAgIGN1c3RvbVZhcnM6IGN1c3RvbVZhcnMsXG4gICAgbWVkaWFRdWVyeTogbWVkaWFRdWVyeSxcbiAgICBzY29wZTogc2NvcGVcbiAgfSkpO1xufTtcblxudmFyIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCA9IGZ1bmN0aW9uIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCgpIHtcbiAgc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBiYXNlRm5zLFxuICAgIHZhcnM6IGNhcmRWYXJzXG4gIH0pO1xuICBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW292ZXJsYXlTaGVldFNlbGVjdG9yXSxcbiAgICBmbnM6IG92ZXJsYXlDb2xvckZucyxcbiAgICB2YXJzOiBjYXJkVmFyc1xuICB9KTtcbiAgc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtjb250ZW50U2VsZWN0b3JdLFxuICAgIGZuczogY29udGVudENvbG9yRm5zLFxuICAgIHZhcnM6IGNhcmRWYXJzXG4gIH0pO1xuICBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW292ZXJsYXlDb250ZW50U2VsZWN0b3JdLFxuICAgIGZuczogY29udGVudENvbG9yRm5zLFxuICAgIHZhcnM6IGNhcmRWYXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBsYXlvdXQsIGNhcmRWYXJzIGFzIHZhcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbG9yLCBzZWwsIGNyZWF0ZUxheW91dCwgZmxleCwgbWl4aW4sIHNlbGVjdG9yUlRMLCByZ2JhLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgdmFycyB9IGZyb20gJ3BvbHl0aGVuZS10aGVtZSc7XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtY29udHJvbFwiLFxuICAvLyBlbGVtZW50c1xuICBmb3JtTGFiZWw6IFwicGUtY29udHJvbF9fZm9ybS1sYWJlbFwiLFxuICBpbnB1dDogXCJwZS1jb250cm9sX19pbnB1dFwiLFxuICBsYWJlbDogXCJwZS1jb250cm9sX19sYWJlbFwiLFxuICAvLyBzdGF0ZXNcbiAgZGlzYWJsZWQ6IFwicGUtY29udHJvbC0tZGlzYWJsZWRcIixcbiAgaW5hY3RpdmU6IFwicGUtY29udHJvbC0taW5hY3RpdmVcIixcbiAgbGFyZ2U6IFwicGUtY29udHJvbC0tbGFyZ2VcIixcbiAgbWVkaXVtOiBcInBlLWNvbnRyb2wtLW1lZGl1bVwiLFxuICBvZmY6IFwicGUtY29udHJvbC0tb2ZmXCIsXG4gIG9uOiBcInBlLWNvbnRyb2wtLW9uXCIsXG4gIHJlZ3VsYXI6IFwicGUtY29udHJvbC0tcmVndWxhclwiLFxuICBzbWFsbDogXCJwZS1jb250cm9sLS1zbWFsbFwiLFxuICAvLyBjb250cm9sIHZpZXcgZWxlbWVudHNcbiAgYm94OiBcInBlLWNvbnRyb2xfX2JveFwiLFxuICBidXR0b246IFwicGUtY29udHJvbF9fYnV0dG9uXCIsXG4gIC8vIGNvbnRyb2wgdmlldyBzdGF0ZXNcbiAgYnV0dG9uT2ZmOiBcInBlLWNvbnRyb2xfX2J1dHRvbi0tb2ZmXCIsXG4gIGJ1dHRvbk9uOiBcInBlLWNvbnRyb2xfX2J1dHRvbi0tb25cIlxufTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbnZhciBnZW5lcmFsRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWNvbnRyb2xfX2JveFwiOiB7XG4gICAgICAgIFwiIC5wZS1jb250cm9sX19idXR0b25cIjoge1xuICAgICAgICAgIGNvbG9yOiBcImluaGVyaXRcIlxuICAgICAgICB9LFxuICAgICAgICBcIiAucGUtY29udHJvbF9fYnV0dG9uLS1vblwiOiB7XG4gICAgICAgICAgY29sb3I6IFwiaW5oZXJpdFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG5cbnZhciB0aW50Rm5zID0gZnVuY3Rpb24gdGludEZucyh0aW50KSB7XG4gIHZhciBfcmVmO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX29uXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX29uXCJdIC8vIG92ZXJyaWRlIGJ5IHNwZWNpZnlpbmcgXCJjb2xvclwiXG5cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9vZmZcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jb250cm9sX19idXR0b24tLW9mZlwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfb2ZmXCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfZGlzYWJsZWRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWNvbnRyb2wtLWRpc2FibGVkXCI6IHtcbiAgICAgICAgXCIgLnBlLWNvbnRyb2xfX2xhYmVsXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2Rpc2FibGVkXCJdXG4gICAgICAgIH0sXG4gICAgICAgIFwiIC5wZS1jb250cm9sX19ib3hcIjoge1xuICAgICAgICAgIFwiIC5wZS1jb250cm9sX19idXR0b24tLW9uLCAucGUtY29udHJvbF9fYnV0dG9uLS1vZmZcIjoge1xuICAgICAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9kaXNhYmxlZFwiXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2xhYmVsXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtY29udHJvbF9fbGFiZWxcIjoge1xuICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2xhYmVsXCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfb25faWNvblwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWNvbnRyb2xfX2JveFwiOiB7XG4gICAgICAgIFwiIC5wZS1jb250cm9sX19idXR0b24tLW9uXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX29uX2ljb25cIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX29mZl9pY29uXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtY29udHJvbF9fYm94XCI6IHtcbiAgICAgICAgXCIgLnBlLWNvbnRyb2xfX2J1dHRvbi0tb2ZmXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX29mZl9pY29uXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9vbl9sYWJlbFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtY29udHJvbC0tb25cIjoge1xuICAgICAgICBcIiAucGUtY29udHJvbF9fbGFiZWxcIjoge1xuICAgICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfb25fbGFiZWxcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX29mZl9sYWJlbFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtY29udHJvbC0tb2ZmXCI6IHtcbiAgICAgICAgXCIgLnBlLWNvbnRyb2xfX2xhYmVsXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX29mZl9sYWJlbFwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX3JlZjtcbn07XG5cbnZhciBsaWdodFRpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImxpZ2h0XCIpKTtcblxudmFyIGRhcmtUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJkYXJrXCIpKTtcblxudmFyIGNvbG9yID0gY3JlYXRlQ29sb3Ioe1xuICB2YXJGbnM6IHtcbiAgICBsaWdodFRpbnRGbnM6IGxpZ2h0VGludEZucyxcbiAgICBkYXJrVGludEZuczogZGFya1RpbnRGbnNcbiAgfVxufSk7XG5cbnZhciBhbGlnblNpZGUgPSBmdW5jdGlvbiBhbGlnblNpZGUoaXNSVEwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YXJzKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9O1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG5cbnZhciBhbGlnbkxlZnQgPSBhbGlnblNpZGUoKTtcbnZhciBhbGlnblJpZ2h0ID0gYWxpZ25TaWRlKCk7XG5cbnZhciBtYWtlU2l6ZSA9IGZ1bmN0aW9uIG1ha2VTaXplKHZhcnMkMSwgaGVpZ2h0KSB7XG4gIHZhciBpY29uU2l6ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdmFycy51bml0X2ljb25fc2l6ZTtcbiAgdmFyIGxhYmVsU2l6ZSA9IGljb25TaXplICsgdmFycyQxLmxhYmVsX2hlaWdodDtcbiAgdmFyIGljb25PZmZzZXQgPSAobGFiZWxTaXplIC0gaWNvblNpemUpIC8gMjtcbiAgcmV0dXJuIHtcbiAgICBcIiAucGUtY29udHJvbF9fZm9ybS1sYWJlbFwiOiB7XG4gICAgICBoZWlnaHQ6IGhlaWdodCArIFwicHhcIlxuICAgIH0sXG4gICAgXCIgLnBlLWNvbnRyb2xfX2JveFwiOiB7XG4gICAgICB3aWR0aDogaWNvblNpemUgKyBcInB4XCIsXG4gICAgICBoZWlnaHQ6IGljb25TaXplICsgXCJweFwiXG4gICAgfSxcbiAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgIHdpZHRoOiBsYWJlbFNpemUgKyBcInB4XCIsXG4gICAgICBoZWlnaHQ6IGxhYmVsU2l6ZSArIFwicHhcIixcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICBcIiAucGUtaWNvblwiOiBbbWl4aW4uZml0KGljb25PZmZzZXQpXVxuICAgIH1cbiAgfTtcbn07XG5cbnZhciBhY3RpdmVCdXR0b24gPSBmdW5jdGlvbiBhY3RpdmVCdXR0b24oKSB7XG4gIHJldHVybiB7XG4gICAgb3BhY2l0eTogMSxcbiAgICB6SW5kZXg6IDBcbiAgfTtcbn07XG5cbnZhciBpbmFjdGl2ZUJ1dHRvbiA9IGZ1bmN0aW9uIGluYWN0aXZlQnV0dG9uKCkge1xuICByZXR1cm4ge1xuICAgIG9wYWNpdHk6IDAsXG4gICAgekluZGV4OiAtMVxuICB9O1xufTtcblxudmFyIGJ1dHRvbl9zaXplX2ljb25fc2l6ZSA9IGZ1bmN0aW9uIGJ1dHRvbl9zaXplX2ljb25fc2l6ZShzZWxlY3RvciwgdmFycywgaXNSVEwpIHtcbiAgdmFyIF9wZUJ1dHRvblBlQ29udHI7XG5cbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiIC5wZS1idXR0b24ucGUtY29udHJvbF9fYnV0dG9uXCI6IChfcGVCdXR0b25QZUNvbnRyID0ge1xuICAgICAgdG9wOiAtKCh2YXJzLmJ1dHRvbl9zaXplIC0gdmFycy5pY29uX3NpemUpIC8gMikgKyBcInB4XCJcbiAgICB9LCBfZGVmaW5lUHJvcGVydHkoX3BlQnV0dG9uUGVDb250ciwgaXNSVEwgPyBcInJpZ2h0XCIgOiBcImxlZnRcIiwgLSgodmFycy5idXR0b25fc2l6ZSAtIHZhcnMuaWNvbl9zaXplKSAvIDIpICsgXCJweFwiKSwgX2RlZmluZVByb3BlcnR5KF9wZUJ1dHRvblBlQ29udHIsIGlzUlRMID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIsIFwiYXV0b1wiKSwgX3BlQnV0dG9uUGVDb250cilcbiAgfSk7XG59O1xuXG52YXIgX2xhYmVsX3BhZGRpbmdfYmVmb3JlID0gZnVuY3Rpb24gbGFiZWxfcGFkZGluZ19iZWZvcmUoc2VsZWN0b3IsIHZhcnMsIGlzUlRMKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtY29udHJvbF9fbGFiZWxcIjogX2RlZmluZVByb3BlcnR5KHt9LCBpc1JUTCA/IFwicGFkZGluZ1JpZ2h0XCIgOiBcInBhZGRpbmdMZWZ0XCIsIHZhcnMubGFiZWxfcGFkZGluZ19iZWZvcmUgKyBcInB4XCIpXG4gIH0pO1xufTtcblxudmFyIF9sYWJlbF9wYWRkaW5nX2FmdGVyID0gZnVuY3Rpb24gbGFiZWxfcGFkZGluZ19hZnRlcihzZWxlY3RvciwgdmFycywgaXNSVEwpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiIC5wZS1jb250cm9sX19sYWJlbFwiOiBfZGVmaW5lUHJvcGVydHkoe30sIGlzUlRMID8gXCJwYWRkaW5nTGVmdFwiIDogXCJwYWRkaW5nUmlnaHRcIiwgdmFycy5sYWJlbF9wYWRkaW5nX2FmdGVyICsgXCJweFwiKVxuICB9KTtcbn07XG5cbnZhciB2YXJGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbYWxpZ25MZWZ0KHZhcnMpLCB7XG4gICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBcIiBpbnB1dFt0eXBlPWNoZWNrYm94XSwgaW5wdXRbdHlwZT1yYWRpb11cIjoge1xuICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1jb250cm9sX19mb3JtLWxhYmVsXCI6IFtmbGV4LmxheW91dEhvcml6b250YWwsIGZsZXgubGF5b3V0Q2VudGVyLCB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGN1cnNvcjogXCJwb2ludGVyXCIsXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgICBcIjpmb2N1c1wiOiB7XG4gICAgICAgICAgb3V0bGluZTogMFxuICAgICAgICB9XG4gICAgICB9XSxcbiAgICAgIFwiLnBlLWNvbnRyb2wtLWluYWN0aXZlXCI6IHtcbiAgICAgICAgXCIgLnBlLWNvbnRyb2xfX2Zvcm0tbGFiZWxcIjoge1xuICAgICAgICAgIGN1cnNvcjogXCJkZWZhdWx0XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1jb250cm9sX19ib3hcIjoge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgICAgICBjb2xvcjogXCJpbmhlcml0XCIsXG4gICAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICAgIFwiOmZvY3VzXCI6IHtcbiAgICAgICAgICBvdXRsaW5lOiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIiAucGUtYnV0dG9uLnBlLWNvbnRyb2xfX2J1dHRvblwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCJcbiAgICAgIH0sXG4gICAgICBcIi5wZS1jb250cm9sLS1vZmZcIjoge1xuICAgICAgICBcIiAucGUtY29udHJvbF9fYnV0dG9uLS1vblwiOiBpbmFjdGl2ZUJ1dHRvbigpLFxuICAgICAgICBcIiAucGUtY29udHJvbF9fYnV0dG9uLS1vZmZcIjogYWN0aXZlQnV0dG9uKClcbiAgICAgIH0sXG4gICAgICBcIi5wZS1jb250cm9sLS1vblwiOiB7XG4gICAgICAgIFwiIC5wZS1jb250cm9sX19idXR0b24tLW9uXCI6IGFjdGl2ZUJ1dHRvbigpLFxuICAgICAgICBcIiAucGUtY29udHJvbF9fYnV0dG9uLS1vZmZcIjogaW5hY3RpdmVCdXR0b24oKVxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1jb250cm9sX19sYWJlbFwiOiB7XG4gICAgICAgIC8vIHBhZGRpbmc6IFJUTFxuICAgICAgICBhbGlnblNlbGY6IFwiY2VudGVyXCJcbiAgICAgIH0sXG4gICAgICBcIi5wZS1jb250cm9sLS1kaXNhYmxlZFwiOiB7XG4gICAgICAgIFwiIC5wZS1jb250cm9sX19mb3JtLWxhYmVsXCI6IHtcbiAgICAgICAgICBjdXJzb3I6IFwiYXV0b1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiIC5wZS1jb250cm9sX19idXR0b25cIjoge1xuICAgICAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgXCIgLnBlLWljb25cIjoge1xuICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCIqW2Rpcj1ydGxdIFwiLmNvbmNhdChzZWxlY3RvciwgXCIsIC5wZS1ydGwgXCIpLmNvbmNhdChzZWxlY3RvciksIFthbGlnblJpZ2h0KHZhcnMpXSldKV07XG4gIH0sXG4gIGxhYmVsX2ZvbnRfc2l6ZTogZnVuY3Rpb24gbGFiZWxfZm9udF9zaXplKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jb250cm9sX19mb3JtLWxhYmVsXCI6IHtcbiAgICAgICAgZm9udFNpemU6IHZhcnMubGFiZWxfZm9udF9zaXplICsgXCJweFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBsYWJlbF9oZWlnaHQ6IGZ1bmN0aW9uIGxhYmVsX2hlaWdodChzZWxlY3RvciwgdmFycyQxKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1jb250cm9sX19ib3hcIjoge1xuICAgICAgICB3aWR0aDogdmFycyQxLmxhYmVsX2hlaWdodCArIFwicHhcIixcbiAgICAgICAgaGVpZ2h0OiB2YXJzJDEubGFiZWxfaGVpZ2h0ICsgXCJweFwiXG4gICAgICB9LFxuICAgICAgXCIucGUtY29udHJvbC0tc21hbGxcIjogbWFrZVNpemUodmFycyQxLCB2YXJzLnVuaXRfaWNvbl9zaXplX3NtYWxsLCB2YXJzLnVuaXRfaWNvbl9zaXplX3NtYWxsKSxcbiAgICAgIFwiLnBlLWNvbnRyb2wtLXJlZ3VsYXJcIjogbWFrZVNpemUodmFycyQxLCB2YXJzJDEubGFiZWxfaGVpZ2h0LCB2YXJzLnVuaXRfaWNvbl9zaXplKSxcbiAgICAgIFwiLnBlLWNvbnRyb2wtLW1lZGl1bVwiOiBtYWtlU2l6ZSh2YXJzJDEsIHZhcnMudW5pdF9pY29uX3NpemVfbWVkaXVtLCB2YXJzLnVuaXRfaWNvbl9zaXplX21lZGl1bSksXG4gICAgICBcIi5wZS1jb250cm9sLS1sYXJnZVwiOiBtYWtlU2l6ZSh2YXJzJDEsIHZhcnMudW5pdF9pY29uX3NpemVfbGFyZ2UsIHZhcnMudW5pdF9pY29uX3NpemVfbGFyZ2UpXG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25fZHVyYXRpb246IGZ1bmN0aW9uIGFuaW1hdGlvbl9kdXJhdGlvbihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtYnV0dG9uLnBlLWNvbnRyb2xfX2J1dHRvblwiOiBbbWl4aW4uZGVmYXVsdFRyYW5zaXRpb24oXCJvcGFjaXR5XCIsIHZhcnMuYW5pbWF0aW9uX2R1cmF0aW9uKV0sXG4gICAgICBcIiAucGUtY29udHJvbF9fbGFiZWxcIjogW21peGluLmRlZmF1bHRUcmFuc2l0aW9uKFwiYWxsXCIsIHZhcnMuYW5pbWF0aW9uX2R1cmF0aW9uKV1cbiAgICB9KV07XG4gIH0sXG4gIGJ1dHRvbl9zaXplOiBmdW5jdGlvbiBidXR0b25fc2l6ZShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7fSksIGJ1dHRvbl9zaXplX2ljb25fc2l6ZShzZWxlY3RvciwgdmFycywgZmFsc2UpLCBidXR0b25fc2l6ZV9pY29uX3NpemUoc2VsZWN0b3JSVEwoc2VsZWN0b3IpLCB2YXJzLCB0cnVlKV07XG4gIH0sXG4gIGljb25fc2l6ZTogZnVuY3Rpb24gaWNvbl9zaXplKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHt9KSwgYnV0dG9uX3NpemVfaWNvbl9zaXplKHNlbGVjdG9yLCB2YXJzLCBmYWxzZSksIGJ1dHRvbl9zaXplX2ljb25fc2l6ZShzZWxlY3RvclJUTChzZWxlY3RvciksIHZhcnMsIHRydWUpXTtcbiAgfSxcbiAgbGFiZWxfcGFkZGluZ19hZnRlcjogZnVuY3Rpb24gbGFiZWxfcGFkZGluZ19hZnRlcihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7fSksIF9sYWJlbF9wYWRkaW5nX2FmdGVyKHNlbGVjdG9yLCB2YXJzLCBmYWxzZSksIF9sYWJlbF9wYWRkaW5nX2FmdGVyKHNlbGVjdG9yUlRMKHNlbGVjdG9yKSwgdmFycywgdHJ1ZSldO1xuICB9LFxuICBsYWJlbF9wYWRkaW5nX2JlZm9yZTogZnVuY3Rpb24gbGFiZWxfcGFkZGluZ19iZWZvcmUoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge30pLCBfbGFiZWxfcGFkZGluZ19iZWZvcmUoc2VsZWN0b3IsIHZhcnMsIGZhbHNlKSwgX2xhYmVsX3BhZGRpbmdfYmVmb3JlKHNlbGVjdG9yUlRMKHNlbGVjdG9yKSwgdmFycywgdHJ1ZSldO1xuICB9XG59O1xudmFyIGxheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zXG59KTtcblxuLy8gQHRzLWNoZWNrXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi9pbmRleFwiKS5TZWxlY3Rpb25Db250cm9sVmFyc30gU2VsZWN0aW9uQ29udHJvbFZhcnNcbiAqL1xuXG4vKipcbiogQHR5cGUge1NlbGVjdGlvbkNvbnRyb2xWYXJzfSBzZWxlY3Rpb25Db250cm9sVmFyc1xuKi9cblxudmFyIHNlbGVjdGlvbkNvbnRyb2xWYXJzID0ge1xuICAvKipcbiAgICogR2VuZXJhdGUgZ2VuZXJhbCBzdHlsZXMsIG5vdCBkZWZpbmVkIGJ5IHZhcmlhYmxlc1xuICAgKi9cbiAgZ2VuZXJhbF9zdHlsZXM6IHRydWUsXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogdmFycy5hbmltYXRpb25fZHVyYXRpb24sXG4gIGJ1dHRvbl9zaXplOiA2ICogdmFycy5ncmlkX3VuaXRfY29tcG9uZW50LFxuICBpY29uX3NpemU6IDMgKiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQsXG4gIGxhYmVsX2ZvbnRfc2l6ZTogMiAqIHZhcnMuZ3JpZF91bml0X2NvbXBvbmVudCxcbiAgLy8gMTZcbiAgbGFiZWxfaGVpZ2h0OiAzICogdmFycy5ncmlkX3VuaXRfY29tcG9uZW50LFxuICAvLyAyNFxuICBsYWJlbF9wYWRkaW5nX2FmdGVyOiAwLFxuICBsYWJlbF9wYWRkaW5nX2JlZm9yZTogdmFycy5ncmlkX3VuaXQgKiA0LFxuICAvLyAxNlxuICBjb2xvcl9saWdodF9vbjogcmdiYSh2YXJzLmNvbG9yX3ByaW1hcnkpLFxuICBjb2xvcl9saWdodF9vZmY6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfc2Vjb25kYXJ5KSxcbiAgY29sb3JfbGlnaHRfbGFiZWw6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfc2Vjb25kYXJ5KSxcbiAgY29sb3JfbGlnaHRfZGlzYWJsZWQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfZGlzYWJsZWQpLFxuICAvLyBjb2xvcl9saWdodF90aHVtYl9vZmZfZm9jdXNfb3BhY2l0eTogLjA4LFxuICAvLyBjb2xvcl9saWdodF90aHVtYl9vbl9mb2N1c19vcGFjaXR5OiAgLjExLFxuICAvLyBpY29uIGNvbG9ycyBtYXkgYmUgc2V0IGluIHRoZW1lOyBzZXQgdG8gXCJpbmhlcml0XCIgYnkgZGVmYXVsdFxuICBjb2xvcl9saWdodF9vbl9pY29uOiBcImluaGVyaXRcIixcbiAgY29sb3JfbGlnaHRfb2ZmX2ljb246IFwiaW5oZXJpdFwiLFxuICAvLyBsYWJlbCBvbi9vZmYgY29sb3JzIG1heSBiZSBzZXQgaW4gdGhlbWU7IHNldCB0byBjb2xvcl9saWdodF9sYWJlbCBieSBkZWZhdWx0XG4gIGNvbG9yX2xpZ2h0X29uX2xhYmVsOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3NlY29uZGFyeSksXG4gIGNvbG9yX2xpZ2h0X29mZl9sYWJlbDogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfdGV4dF9zZWNvbmRhcnkpLFxuICAvLyBjb2xvcl9saWdodF9mb2N1c19vbjogICAgICAgICAgICAgICAgcmdiYSh2YXJzLmNvbG9yX3ByaW1hcnkpLFxuICAvLyBjb2xvcl9saWdodF9mb2N1c19vbl9vcGFjaXR5OiAgICAgICAgLjExLFxuICAvLyBjb2xvcl9saWdodF9mb2N1c19vZmY6ICAgICAgICAgICAgICAgcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQpLFxuICAvLyBjb2xvcl9saWdodF9mb2N1c19vZmZfb3BhY2l0eTogICAgICAgLjA3LFxuICBjb2xvcl9kYXJrX29uOiByZ2JhKHZhcnMuY29sb3JfcHJpbWFyeSksXG4gIGNvbG9yX2Rhcmtfb2ZmOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfdGV4dF9zZWNvbmRhcnkpLFxuICBjb2xvcl9kYXJrX2xhYmVsOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfdGV4dF9zZWNvbmRhcnkpLFxuICBjb2xvcl9kYXJrX2Rpc2FibGVkOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfdGV4dF9kaXNhYmxlZCksXG4gIC8vIGNvbG9yX2RhcmtfdGh1bWJfb2ZmX2ZvY3VzX29wYWNpdHk6ICAuMDgsXG4gIC8vIGNvbG9yX2RhcmtfdGh1bWJfb25fZm9jdXNfb3BhY2l0eTogICAuMTEsXG4gIC8vIGljb24gY29sb3IgbWF5IGJlIHNldCBpbiB0aGVtZTsgc2V0IHRvIFwiaW5oZXJpdFwiIGJ5IGRlZmF1bHRcbiAgY29sb3JfZGFya19vbl9pY29uOiBcImluaGVyaXRcIixcbiAgY29sb3JfZGFya19vZmZfaWNvbjogXCJpbmhlcml0XCIsXG4gIC8vIGxhYmVsIG9uL29mZiBjb2xvcnMgbWF5IGJlIHNldCBpbiB0aGVtZTsgc2V0IHRvIGNvbG9yX2RhcmtfbGFiZWwgYnkgZGVmYXVsdFxuICBjb2xvcl9kYXJrX29uX2xhYmVsOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfdGV4dF9zZWNvbmRhcnkpLFxuICBjb2xvcl9kYXJrX29mZl9sYWJlbDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX3RleHRfc2Vjb25kYXJ5KSAvLyBjb2xvcl9kYXJrX2ZvY3VzX29uOiAgICAgICAgICAgICAgICAgcmdiYSh2YXJzLmNvbG9yX3ByaW1hcnkpLCAvLyBvciAnIzgwY2JjNCdcbiAgLy8gY29sb3JfZGFya19mb2N1c19vbl9vcGFjaXR5OiAgICAgICAgIC4xNCxcbiAgLy8gY29sb3JfZGFya19mb2N1c19vZmY6ICAgICAgICAgICAgICAgIHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQpLFxuICAvLyBjb2xvcl9kYXJrX2ZvY3VzX29mZl9vcGFjaXR5OiAgICAgICAgLjA5XG5cbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXQsIGNvbG9yXTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudCk7XG52YXIgYWRkU3R5bGUgPSBzdHlsZXIuY3JlYXRlQWRkU3R5bGUoc2VsZWN0b3IsIGZucywgc2VsZWN0aW9uQ29udHJvbFZhcnMpO1xudmFyIGdldFN0eWxlID0gc3R5bGVyLmNyZWF0ZUdldFN0eWxlKHNlbGVjdG9yLCBmbnMsIHNlbGVjdGlvbkNvbnRyb2xWYXJzKTtcblxudmFyIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCA9IGZ1bmN0aW9uIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCgpIHtcbiAgcmV0dXJuIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbc2VsZWN0b3JdLFxuICAgIGZuczogZm5zLFxuICAgIHZhcnM6IHNlbGVjdGlvbkNvbnRyb2xWYXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBsYXlvdXQsIHNlbGVjdGlvbkNvbnRyb2xWYXJzIGFzIHZhcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbG9yLCBjcmVhdGVMYXlvdXQsIHN0eWxlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNzcyc7XG5pbXBvcnQgeyBjb2xvciBhcyBjb2xvciQxLCBsYXlvdXQgYXMgbGF5b3V0JDEgfSBmcm9tICdwb2x5dGhlbmUtY3NzLXNlbGVjdGlvbi1jb250cm9sJztcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1jaGVja2JveC1jb250cm9sXCJcbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIGNvbG9yID0gY3JlYXRlQ29sb3Ioe1xuICBzdXBlckNvbG9yOiBjb2xvciQxXG59KTtcblxuLy8gQHRzLWNoZWNrXG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgc3VwZXJMYXlvdXQ6IGxheW91dCQxXG59KTtcblxuLy8gQHRzLWNoZWNrXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydChcIi4uL2luZGV4XCIpLkNoZWNrYm94VmFyc30gQ2hlY2tib3hWYXJzXG4gKi9cblxuLyoqXG4gKiBAdHlwZSB7Q2hlY2tib3hWYXJzfSBjaGVja2JveFZhcnNcbiAqL1xudmFyIGNoZWNrYm94VmFycyA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlXG59O1xuXG4vLyBAdHMtY2hlY2tcbnZhciBmbnMgPSBbbGF5b3V0LCBjb2xvcl07XG52YXIgc2VsZWN0b3IgPSBcIi5cIi5jb25jYXQoY2xhc3Nlcy5jb21wb25lbnQpO1xudmFyIGFkZFN0eWxlID0gc3R5bGVyLmNyZWF0ZUFkZFN0eWxlKHNlbGVjdG9yLCBmbnMsIGNoZWNrYm94VmFycyk7XG52YXIgZ2V0U3R5bGUgPSBzdHlsZXIuY3JlYXRlR2V0U3R5bGUoc2VsZWN0b3IsIGZucywgY2hlY2tib3hWYXJzKTtcblxudmFyIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCA9IGZ1bmN0aW9uIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCgpIHtcbiAgcmV0dXJuIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbc2VsZWN0b3JdLFxuICAgIGZuczogZm5zLFxuICAgIHZhcnM6IGNoZWNrYm94VmFyc1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IGFkZEdlbmVyYWxTdHlsZVRvSGVhZCwgYWRkU3R5bGUsIGNvbG9yLCBnZXRTdHlsZSwgbGF5b3V0LCBjaGVja2JveFZhcnMgYXMgdmFycyB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29sb3IsIHNlbCwgY3JlYXRlTGF5b3V0LCBmbGV4LCByZ2JhLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgdmFycyB9IGZyb20gJ3BvbHl0aGVuZS10aGVtZSc7XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtZGlhbG9nLXBhbmVcIixcbiAgLy8gZWxlbWVudHNcbiAgYWN0aW9uczogXCJwZS1kaWFsb2ctcGFuZV9fYWN0aW9uc1wiLFxuICBib2R5OiBcInBlLWRpYWxvZy1wYW5lX19ib2R5XCIsXG4gIGNvbnRlbnQ6IFwicGUtZGlhbG9nLXBhbmVfX2NvbnRlbnRcIixcbiAgZm9vdGVyOiBcInBlLWRpYWxvZy1wYW5lX19mb290ZXJcIixcbiAgaGVhZGVyOiBcInBlLWRpYWxvZy1wYW5lX19oZWFkZXJcIixcbiAgdGl0bGU6IFwicGUtZGlhbG9nLXBhbmVfX3RpdGxlXCIsXG4gIC8vIHN0YXRlc1xuICB3aXRoSGVhZGVyOiBcInBlLWRpYWxvZy1wYW5lLS1oZWFkZXJcIixcbiAgd2l0aEZvb3RlcjogXCJwZS1kaWFsb2ctcGFuZS0tZm9vdGVyXCIsXG4gIGhlYWRlcldpdGhUaXRsZTogXCJwZS1kaWFsb2ctcGFuZV9faGVhZGVyLS10aXRsZVwiLFxuICBmb290ZXJXaXRoQnV0dG9uczogXCJwZS1kaWFsb2ctcGFuZV9fZm9vdGVyLS1idXR0b25zXCIsXG4gIGZvb3RlckhpZ2g6IFwicGUtZGlhbG9nLXBhbmVfX2Zvb3Rlci0taGlnaFwiLFxuICBib3JkZXJCb3R0b206IFwicGUtZGlhbG9nLXBhbmUtLWJvcmRlci1ib3R0b21cIixcbiAgYm9yZGVyVG9wOiBcInBlLWRpYWxvZy1wYW5lLS1ib3JkZXItdG9wXCIsXG4gIGZ1bGxCbGVlZDogXCJwZS1kaWFsb2ctcGFuZS0tYm9keS1mdWxsLWJsZWVkXCJcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgZ2VuZXJhbEZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKCkge1xuICAgIHJldHVybiBbe1xuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lX19ib2R5XCI6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IFwidHJhbnNwYXJlbnRcIlxuICAgICAgfVxuICAgIH1dO1xuICB9XG59O1xuXG52YXIgdGludEZucyA9IGZ1bmN0aW9uIHRpbnRGbnModGludCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZ3JvdW5kXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZ3JvdW5kXCJdXG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfdGl0bGVfdGV4dFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lX19oZWFkZXIgLnBlLWRpYWxvZy1wYW5lX190aXRsZVwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdGl0bGVfdGV4dFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2JvZHlfdGV4dFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lX19ib2R5XCI6IHtcbiAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ib2R5X3RleHRcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ib2R5X2JvcmRlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtZGlhbG9nLXBhbmUtLWJvcmRlci10b3AgLnBlLWRpYWxvZy1wYW5lX19ib2R5XCI6IHtcbiAgICAgICAgYm9yZGVyVG9wQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ib2R5X2JvcmRlclwiXVxuICAgICAgfSxcbiAgICAgIFwiLnBlLWRpYWxvZy1wYW5lLS1ib3JkZXItYm90dG9tIC5wZS1kaWFsb2ctcGFuZV9fYm9keVwiOiB7XG4gICAgICAgIGJvcmRlckJvdHRvbVN0eWxlOiBcInNvbGlkXCIsXG4gICAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfYm9keV9ib3JkZXJcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfcmVmO1xufTtcblxudmFyIGxpZ2h0VGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImRhcmtcIikpO1xuXG52YXIgY29sb3IgPSBjcmVhdGVDb2xvcih7XG4gIHZhckZuczoge1xuICAgIGxpZ2h0VGludEZuczogbGlnaHRUaW50Rm5zLFxuICAgIGRhcmtUaW50Rm5zOiBkYXJrVGludEZuc1xuICB9XG59KTtcblxudmFyIG1heF93aWR0aF9zaWRlX3BhZGRpbmdfbW9iaWxlID0gZnVuY3Rpb24gbWF4X3dpZHRoX3NpZGVfcGFkZGluZ19tb2JpbGUoc2VsZWN0b3IsIHZhcnMpIHtcbiAgdmFyIF9yZWYzO1xuXG4gIHZhciBtYXhXaWR0aEJyZWFrcG9pbnRNb2JpbGUgPSB2YXJzLm1heF93aWR0aCArIDIgKiB2YXJzLnNpZGVfcGFkZGluZ19tb2JpbGU7XG4gIHJldHVybiBfcmVmMyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwiQG1lZGlhIChtYXgtd2lkdGg6IFwiICsgbWF4V2lkdGhCcmVha3BvaW50TW9iaWxlICsgXCJweClcIiwgX2RlZmluZVByb3BlcnR5KHt9LCBzZWxlY3Rvciwge1xuICAgIG1heFdpZHRoOiBcImNhbGMoMTAwdncgLSBcIi5jb25jYXQoMiAqIHZhcnMuc2lkZV9wYWRkaW5nX21vYmlsZSwgXCJweClcIilcbiAgfSkpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjMsIFwiQG1lZGlhIChtaW4td2lkdGg6IFwiICsgKG1heFdpZHRoQnJlYWtwb2ludE1vYmlsZSArIDEpICsgXCJweClcIiwgX2RlZmluZVByb3BlcnR5KHt9LCBzZWxlY3Rvciwge1xuICAgIG1heFdpZHRoOiB2YXJzLm1heF93aWR0aCArIFwicHhcIlxuICB9KSksIF9yZWYzO1xufTtcblxudmFyIHBhZGRpbmdfaGVhZGVyX2JvdHRvbSA9IGZ1bmN0aW9uIHBhZGRpbmdfaGVhZGVyX2JvdHRvbShzZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gc2VsKHNlbGVjdG9yLCB7XG4gICAgXCIgLnBlLWRpYWxvZy1wYW5lX19oZWFkZXItLXRpdGxlXCI6IHtcbiAgICAgIHBhZGRpbmdUb3A6IHZhcnMucGFkZGluZyAtIDQgKyBcInB4XCIsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHZhcnMucGFkZGluZyArIFwicHhcIixcbiAgICAgIHBhZGRpbmdCb3R0b206IHZhcnMuaGVhZGVyX2JvdHRvbSAtIDQgKyBcInB4XCIsXG4gICAgICBwYWRkaW5nTGVmdDogdmFycy5wYWRkaW5nICsgXCJweFwiXG4gICAgfVxuICB9KTtcbn07XG4vKlxuU2V0dGluZyBhbiBleHBsaWNpdCBtYXgtaGVpZ2h0IGlzIG5lZWRlZCBmb3IgSUUgMTFcbiovXG5cblxudmFyIGhlYWRlcl9oZWlnaHRfZm9vdGVyX2hlaWdodF9tYXJnaW5fdmVydGljYWwgPSBmdW5jdGlvbiBoZWFkZXJfaGVpZ2h0X2Zvb3Rlcl9oZWlnaHRfbWFyZ2luX3ZlcnRpY2FsKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtZGlhbG9nLXBhbmVfX2JvZHlcIjoge1xuICAgICAgbWF4SGVpZ2h0OiBcImNhbGMoMTAwdmggLSAoXCIuY29uY2F0KHZhcnMuaGVhZGVyX2hlaWdodCwgXCJweCArIFwiKS5jb25jYXQodmFycy5mb290ZXJfaGVpZ2h0LCBcInB4ICsgMiAqIFwiKS5jb25jYXQodmFycy5tYXJnaW5fdmVydGljYWwsIFwicHgpKVwiKVxuICAgIH1cbiAgfSk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgXG4gKi9cblxuXG52YXIgZnVsbFNjcmVlbiA9IGZ1bmN0aW9uIGZ1bGxTY3JlZW4oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiIC5wZS1kaWFsb2ctcGFuZVwiOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDBcbiAgICB9LFxuICAgIFwiIC5wZS1kaWFsb2ctcGFuZV9fY29udGVudFwiOiB7XG4gICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICBtYXhXaWR0aDogXCJub25lXCIsXG4gICAgICBoZWlnaHQ6IFwiMTAwdmhcIixcbiAgICAgIHdpZHRoOiBcIjEwMHZ3XCIsXG4gICAgICBcIiA+ICpcIjoge1xuICAgICAgICBmbGV4U2hyaW5rOiAwXG4gICAgICB9LFxuICAgICAgXCIgPiAucGUtZGlhbG9nLXBhbmVfX2JvZHlcIjoge1xuICAgICAgICBmbGV4U2hyaW5rOiAxLFxuICAgICAgICBtYXhIZWlnaHQ6IFwibm9uZVwiIC8vIElFIDExIGRvZXNuJ3Qga25vdyBcImluaXRpYWxcIlxuXG4gICAgICB9XG4gICAgfSxcbiAgICBcIiAucGUtZGlhbG9nLXBhbmUsIC5wZS1kaWFsb2ctcGFuZV9fYm9keVwiOiB7XG4gICAgICBoZWlnaHQ6IFwiMTAwdmhcIixcbiAgICAgIG1heEhlaWdodDogXCIxMDB2aFwiLFxuICAgICAgYm9yZGVyVG9wU3R5bGU6IFwibm9uZVwiLFxuICAgICAgbWF4V2lkdGg6IFwibm9uZVwiIC8vIElFIDExIGRvZXNuJ3Qga25vdyBcImluaXRpYWxcIlxuXG4gICAgfVxuICB9KTtcbn07XG52YXIgdmFyRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3RvciwgW2ZsZXgubGF5b3V0VmVydGljYWwsIHtcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBcImluaGVyaXRcIixcbiAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBcImluaGVyaXRcIixcbiAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IFwiaW5oZXJpdFwiLFxuICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IFwiaW5oZXJpdFwiLFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lX19jb250ZW50XCI6IHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcbiAgICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogXCJpbmhlcml0XCIsXG4gICAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBcImluaGVyaXRcIixcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogXCJpbmhlcml0XCIsXG4gICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBcImluaGVyaXRcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1kaWFsb2ctcGFuZV9fdGl0bGVcIjoge1xuICAgICAgICBmb250U2l6ZTogdmFycy5mb250X3NpemVfdGl0bGUgKyBcInB4XCIsXG4gICAgICAgIGZvbnRXZWlnaHQ6IHZhcnMuZm9udF93ZWlnaHRfbWVkaXVtLFxuICAgICAgICBcIiYgKyBkaXZcIjoge1xuICAgICAgICAgIG1hcmdpblRvcDogXCIxNnB4XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1kaWFsb2ctcGFuZV9faGVhZGVyLCAucGUtZGlhbG9nLXBhbmVfX2NvbnRlbnQgPiAucGUtdG9vbGJhclwiOiB7XG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IFwiaW5oZXJpdFwiLFxuICAgICAgICBib3JkZXJUb3BSaWdodFJhZGl1czogXCJpbmhlcml0XCIsXG4gICAgICAgIFwiIC5wZS1kaWFsb2ctcGFuZV9fdGl0bGVcIjoge1xuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICB3b3JkQnJlYWs6IFwiYnJlYWstYWxsXCIsXG4gICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCIsXG4gICAgICAgICAgdGV4dE92ZXJmbG93OiBcImVsbGlwc2lzXCIsXG4gICAgICAgICAgd2hpdGVTcGFjZTogXCJub3dyYXBcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lX19ib2R5XCI6IFt7XG4gICAgICAgIG92ZXJmbG93WTogXCJhdXRvXCIsXG4gICAgICAgIFwiLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmdcIjogXCJ0b3VjaFwiLFxuICAgICAgICBib3JkZXJUb3BTdHlsZTogXCJzb2xpZFwiLFxuICAgICAgICBib3JkZXJCb3R0b21TdHlsZTogXCJzb2xpZFwiLFxuICAgICAgICBcIiBwXCI6IHtcbiAgICAgICAgICBtYXJnaW46IDBcbiAgICAgICAgfSxcbiAgICAgICAgXCIgcCArIHBcIjoge1xuICAgICAgICAgIG1hcmdpblRvcDogXCIxNnB4XCJcbiAgICAgICAgfVxuICAgICAgfV0sXG4gICAgICBcIi5wZS1kaWFsb2ctcGFuZS0tYm9keS1mdWxsLWJsZWVkIC5wZS1kaWFsb2ctcGFuZV9fYm9keVwiOiB7XG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIGJvcmRlclN0eWxlOiBcIm5vbmVcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1kaWFsb2ctcGFuZV9faGVhZGVyLS10aXRsZSArIC5wZS1kaWFsb2ctcGFuZV9fYm9keVwiOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDBcbiAgICAgIH0sXG4gICAgICBcIiAucGUtZGlhbG9nLXBhbmVfX2Zvb3RlclwiOiB7XG4gICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxuICAgICAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxuICAgICAgICBmbGV4R3JvdzogMSxcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgIFwiJiwgPiAucGUtdG9vbGJhclwiOiB7XG4gICAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogXCJpbmhlcml0XCIsXG4gICAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IFwiaW5oZXJpdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiLnBlLWRpYWxvZy1wYW5lX19mb290ZXItLWhpZ2hcIjoge1xuICAgICAgICAgIC8vIHdoZW4gYnV0dG9ucyBhcmUgc3RhY2tlZCB2ZXJ0aWNhbGx5XG4gICAgICAgICAgcGFkZGluZ0JvdHRvbTogXCI4cHhcIlxuICAgICAgICB9LFxuICAgICAgICBcIi5wZS1kaWFsb2ctcGFuZV9fZm9vdGVyLS1idXR0b25zXCI6IHtcbiAgICAgICAgICBwYWRkaW5nOiBcIjAgOHB4XCIsXG4gICAgICAgICAgZm9udFNpemU6IDAgLy8gcmVtb3ZlIGlubGluZSBibG9jayBzcGFjaW5nXG5cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1kaWFsb2ctcGFuZV9fYWN0aW9uc1wiOiBbZmxleC5sYXlvdXRIb3Jpem9udGFsLCBmbGV4LmxheW91dEVuZEp1c3RpZmllZCwgZmxleC5sYXlvdXRXcmFwLCB7XG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCJcbiAgICAgIH1dXG4gICAgfV0pLCB7XG4gICAgICBcIiAucGUtZGlhbG9nX19jb250ZW50LnBlLW1lbnVfX2NvbnRlbnRcIjogX2RlZmluZVByb3BlcnR5KHt9LCBcIiBcIi5jb25jYXQoc2VsZWN0b3IpLCB7XG4gICAgICAgIFwiIC5wZS1kaWFsb2ctcGFuZV9fYm9keVwiOiB7XG4gICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICBib3JkZXI6IFwibm9uZVwiXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfV07XG4gIH0sXG4gIG1heF93aWR0aDogZnVuY3Rpb24gbWF4X3dpZHRoKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFt2YXJzLnNpZGVfcGFkZGluZ19tb2JpbGUgIT09IHVuZGVmaW5lZCAmJiBtYXhfd2lkdGhfc2lkZV9wYWRkaW5nX21vYmlsZShzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBzaWRlX3BhZGRpbmdfbW9iaWxlOiBmdW5jdGlvbiBzaWRlX3BhZGRpbmdfbW9iaWxlKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFt2YXJzLnNpZGVfcGFkZGluZ19tb2JpbGUgIT09IHVuZGVmaW5lZCAmJiBtYXhfd2lkdGhfc2lkZV9wYWRkaW5nX21vYmlsZShzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBtaW5fd2lkdGg6IGZ1bmN0aW9uIG1pbl93aWR0aChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBtaW5XaWR0aDogdmFycy5taW5fd2lkdGggKyBcInB4XCJcbiAgICB9KV07XG4gIH0sXG4gIG1hcmdpbl92ZXJ0aWNhbDogZnVuY3Rpb24gbWFyZ2luX3ZlcnRpY2FsKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIG1heEhlaWdodDogXCJjYWxjKDEwMHZoIC0gMiAqIFwiLmNvbmNhdCh2YXJzLm1hcmdpbl92ZXJ0aWNhbCwgXCJweClcIilcbiAgICB9KSwgdmFycy5oZWFkZXJfaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgdmFycy5mb290ZXJfaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgaGVhZGVyX2hlaWdodF9mb290ZXJfaGVpZ2h0X21hcmdpbl92ZXJ0aWNhbChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBsaW5lX2hlaWdodF90aXRsZTogZnVuY3Rpb24gbGluZV9oZWlnaHRfdGl0bGUoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lX190aXRsZVwiOiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IHZhcnMubGluZV9oZWlnaHRfdGl0bGUgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGhlYWRlcl9oZWlnaHQ6IGZ1bmN0aW9uIGhlYWRlcl9oZWlnaHQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lX19oZWFkZXJcIjoge1xuICAgICAgICBoZWlnaHQ6IHZhcnMuaGVhZGVyX2hlaWdodCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pLCB2YXJzLmZvb3Rlcl9oZWlnaHQgIT09IHVuZGVmaW5lZCAmJiB2YXJzLm1hcmdpbl92ZXJ0aWNhbCAhPT0gdW5kZWZpbmVkICYmIGhlYWRlcl9oZWlnaHRfZm9vdGVyX2hlaWdodF9tYXJnaW5fdmVydGljYWwoc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgZm9vdGVyX2hlaWdodDogZnVuY3Rpb24gZm9vdGVyX2hlaWdodChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtZGlhbG9nLXBhbmVfX2Zvb3Rlci0tYnV0dG9ucyAucGUtZGlhbG9nLXBhbmVfX2FjdGlvbnNcIjoge1xuICAgICAgICBtaW5IZWlnaHQ6IHZhcnMuZm9vdGVyX2hlaWdodCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pLCB2YXJzLmhlYWRlcl9oZWlnaHQgIT09IHVuZGVmaW5lZCAmJiB2YXJzLmZvb3Rlcl9oZWlnaHQgIT09IHVuZGVmaW5lZCAmJiB2YXJzLm1hcmdpbl92ZXJ0aWNhbCAhPT0gdW5kZWZpbmVkICYmIGhlYWRlcl9oZWlnaHRfZm9vdGVyX2hlaWdodF9tYXJnaW5fdmVydGljYWwoc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgcGFkZGluZzogZnVuY3Rpb24gcGFkZGluZyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtZGlhbG9nLXBhbmVfX2JvZHlcIjoge1xuICAgICAgICBwYWRkaW5nOiB2YXJzLnBhZGRpbmcgKyBcInB4XCJcbiAgICAgIH0sXG4gICAgICBcIi5wZS1kaWFsb2ctcGFuZS0tZm9vdGVyXCI6IHtcbiAgICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lX19ib2R5XCI6IHtcbiAgICAgICAgICBwYWRkaW5nQm90dG9tOiB2YXJzLnBhZGRpbmcgLSAxMCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSksIHZhcnMuaGVhZGVyX2JvdHRvbSAhPT0gdW5kZWZpbmVkICYmIHBhZGRpbmdfaGVhZGVyX2JvdHRvbShzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBoZWFkZXJfYm90dG9tOiBmdW5jdGlvbiBoZWFkZXJfYm90dG9tKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtwYWRkaW5nX2hlYWRlcl9ib3R0b20oc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgYm9yZGVyX3dpZHRoOiBmdW5jdGlvbiBib3JkZXJfd2lkdGgoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lX19ib2R5XCI6IHtcbiAgICAgICAgYm9yZGVyV2lkdGg6IHZhcnMuYm9yZGVyX3dpZHRoICsgXCJweFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9XG59O1xudmFyIGxheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zXG59KTtcblxuLy8gQHRzLWNoZWNrXG4vKipcbiAqIEB0eXBlIHtEaWFsb2dQYW5lVmFyc30gZGlhbG9nUGFuZVZhcnNcbiAqL1xuXG52YXIgZGlhbG9nUGFuZVZhcnMgPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBnZW5lcmFsIHN0eWxlcywgbm90IGRlZmluZWQgYnkgdmFyaWFibGVzXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogdHJ1ZSxcbiAgYm9yZGVyX3dpZHRoOiAxLFxuICBmb290ZXJfaGVpZ2h0OiA1MixcbiAgaGVhZGVyX2JvdHRvbTogMjAsXG4gIGhlYWRlcl9oZWlnaHQ6IDY0LFxuICBsaW5lX2hlaWdodF90aXRsZTogMjQsXG4gIG1heF93aWR0aDogNyAqIHZhcnMuZ3JpZF91bml0X21lbnUsXG4gIC8vIDcgKiA1NiA9IDM5MiBcbiAgbWluX3dpZHRoOiA1ICogdmFycy5ncmlkX3VuaXRfbWVudSxcbiAgLy8gNSAqIDU2ID0gMjgwXG4gIHBhZGRpbmc6IDMgKiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQsXG4gIC8vIDMgKiA4ID0gMjRcbiAgc2lkZV9wYWRkaW5nX21vYmlsZTogNiAqIHZhcnMuZ3JpZF91bml0LFxuICAvLyA2ICogNCA9IDQ4XG4gIG1heF9oZWlnaHQ6IDggKiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQsXG4gIG1hcmdpbl92ZXJ0aWNhbDogOCAqIHZhcnMuZ3JpZF91bml0X2NvbXBvbmVudCxcbiAgY29sb3JfbGlnaHRfdGl0bGVfdGV4dDogXCJpbmhlcml0XCIsXG4gIGNvbG9yX2xpZ2h0X2JvZHlfdGV4dDogXCJpbmhlcml0XCIsXG4gIGNvbG9yX2xpZ2h0X2JvZHlfYm9yZGVyOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF9ib3JkZXJfbGlnaHQpLFxuICBjb2xvcl9saWdodF9iYWNrZ3JvdW5kOiBcImluaGVyaXRcIixcbiAgY29sb3JfZGFya190aXRsZV90ZXh0OiBcImluaGVyaXRcIixcbiAgY29sb3JfZGFya19ib2R5X3RleHQ6IFwiaW5oZXJpdFwiLFxuICBjb2xvcl9kYXJrX2JvZHlfYm9yZGVyOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfYm9yZGVyX2xpZ2h0KSxcbiAgY29sb3JfZGFya19iYWNrZ3JvdW5kOiBcImluaGVyaXRcIlxufTtcblxuLy8gQHRzLWNoZWNrXG52YXIgZm5zID0gW2xheW91dCwgY29sb3JdO1xudmFyIHNlbGVjdG9yID0gXCIuXCIuY29uY2F0KGNsYXNzZXMuY29tcG9uZW50KTtcbnZhciBhZGRTdHlsZSA9IHN0eWxlci5jcmVhdGVBZGRTdHlsZShzZWxlY3RvciwgZm5zLCBkaWFsb2dQYW5lVmFycyk7XG52YXIgZ2V0U3R5bGUgPSBzdHlsZXIuY3JlYXRlR2V0U3R5bGUoc2VsZWN0b3IsIGZucywgZGlhbG9nUGFuZVZhcnMpO1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogZGlhbG9nUGFuZVZhcnNcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBhZGRHZW5lcmFsU3R5bGVUb0hlYWQsIGFkZFN0eWxlLCBjb2xvciwgZnVsbFNjcmVlbiwgZ2V0U3R5bGUsIGxheW91dCwgZGlhbG9nUGFuZVZhcnMgYXMgdmFycyB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29sb3IsIHNlbCwgcmdiYSwgY3JlYXRlTGF5b3V0LCBmbGV4LCBjcmVhdGVNYXJrZXIsIG1peGluLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgZnVsbFNjcmVlbiBhcyBmdWxsU2NyZWVuJDEgfSBmcm9tICdwb2x5dGhlbmUtY3NzLWRpYWxvZy1wYW5lJztcbmltcG9ydCB7IHNoYXJlZFZhcnMsIHNoYXJlZFZhckZucyB9IGZyb20gJ3BvbHl0aGVuZS1jc3Mtc2hhZG93JztcbmltcG9ydCB7IHZhcnMgfSBmcm9tICdwb2x5dGhlbmUtdGhlbWUnO1xuXG52YXIgbGlzdFRpbGVDbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtbGlzdC10aWxlXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGNvbnRlbnQ6IFwicGUtbGlzdC10aWxlX19jb250ZW50XCIsXG4gIGhpZ2hTdWJ0aXRsZTogXCJwZS1saXN0LXRpbGVfX2hpZ2gtc3VidGl0bGVcIixcbiAgcHJpbWFyeTogXCJwZS1saXN0LXRpbGVfX3ByaW1hcnlcIixcbiAgc2Vjb25kYXJ5OiBcInBlLWxpc3QtdGlsZV9fc2Vjb25kYXJ5XCIsXG4gIHN1YnRpdGxlOiBcInBlLWxpc3QtdGlsZV9fc3VidGl0bGVcIixcbiAgdGl0bGU6IFwicGUtbGlzdC10aWxlX190aXRsZVwiLFxuICBjb250ZW50RnJvbnQ6IFwicGUtbGlzdC10aWxlX19jb250ZW50LWZyb250XCIsXG4gIC8vIHN0YXRlcyAgXG4gIGNvbXBhY3Q6IFwicGUtbGlzdC10aWxlLS1jb21wYWN0XCIsXG4gIGNvbXBhY3RGcm9udDogXCJwZS1saXN0LXRpbGUtLWNvbXBhY3QtZnJvbnRcIixcbiAgZGlzYWJsZWQ6IFwicGUtbGlzdC10aWxlLS1kaXNhYmxlZFwiLFxuICBoYXNGcm9udDogXCJwZS1saXN0LXRpbGUtLWZyb250XCIsXG4gIGhhc0hpZ2hTdWJ0aXRsZTogXCJwZS1saXN0LXRpbGUtLWhpZ2gtc3VidGl0bGVcIixcbiAgaGFzU3VidGl0bGU6IFwicGUtbGlzdC10aWxlLS1zdWJ0aXRsZVwiLFxuICBoZWFkZXI6IFwicGUtbGlzdC10aWxlLS1oZWFkZXJcIixcbiAgaG92ZXJhYmxlOiBcInBlLWxpc3QtdGlsZS0taG92ZXJhYmxlXCIsXG4gIGluc2V0SDogXCJwZS1saXN0LXRpbGUtLWluc2V0LWhcIixcbiAgaW5zZXRWOiBcInBlLWxpc3QtdGlsZS0taW5zZXQtdlwiLFxuICBzZWxlY3RhYmxlOiBcInBlLWxpc3QtdGlsZS0tc2VsZWN0YWJsZVwiLFxuICBzZWxlY3RlZDogXCJwZS1saXN0LXRpbGUtLXNlbGVjdGVkXCIsXG4gIHJvdW5kZWQ6IFwicGUtbGlzdC10aWxlLS1yb3VuZGVkXCIsXG4gIGhpZ2hsaWdodDogXCJwZS1saXN0LXRpbGUtLWhpZ2hsaWdodFwiLFxuICBzdGlja3k6IFwicGUtbGlzdC10aWxlLS1zdGlja3lcIixcbiAgbmF2aWdhdGlvbjogXCJwZS1saXN0LXRpbGUtLW5hdmlnYXRpb25cIlxufTtcblxudmFyIG1lbnVDbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtbWVudVwiLFxuICAvLyBlbGVtZW50c1xuICBwYW5lbDogXCJwZS1tZW51X19wYW5lbFwiLFxuICBjb250ZW50OiBcInBlLW1lbnVfX2NvbnRlbnRcIixcbiAgcGxhY2Vob2xkZXI6IFwicGUtbWVudV9fcGxhY2Vob2xkZXJcIixcbiAgYmFja2Ryb3A6IFwicGUtbWVudV9fYmFja2Ryb3BcIixcbiAgLy8gc3RhdGVzXG4gIGZsb2F0aW5nOiBcInBlLW1lbnUtLWZsb2F0aW5nXCIsXG4gIG9yaWdpbjogXCJwZS1tZW51LS1vcmlnaW5cIixcbiAgcGVybWFuZW50OiBcInBlLW1lbnUtLXBlcm1hbmVudFwiLFxuICBzaG93QmFja2Ryb3A6IFwicGUtbWVudS0tYmFja2Ryb3BcIixcbiAgdmlzaWJsZTogXCJwZS1tZW51LS12aXNpYmxlXCIsXG4gIHdpZHRoX2F1dG86IFwicGUtbWVudS0td2lkdGgtYXV0b1wiLFxuICB3aWR0aF9uOiBcInBlLW1lbnUtLXdpZHRoLVwiLFxuICBpc1RvcE1lbnU6IFwicGUtbWVudS0tdG9wLW1lbnVcIixcbiAgLy8gbG9va3VwXG4gIGxpc3RUaWxlOiBsaXN0VGlsZUNsYXNzZXMuY29tcG9uZW50LFxuICBzZWxlY3RlZExpc3RUaWxlOiBsaXN0VGlsZUNsYXNzZXMuc2VsZWN0ZWRcbn07XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtZGlhbG9nXCIsXG4gIC8vIGVsZW1lbnRzXG4gIHBsYWNlaG9sZGVyOiBcInBlLWRpYWxvZ19fcGxhY2Vob2xkZXJcIixcbiAgaG9sZGVyOiBcInBlLWRpYWxvZ19faG9sZGVyXCIsXG4gIGNvbnRlbnQ6IFwicGUtZGlhbG9nX19jb250ZW50XCIsXG4gIGJhY2tkcm9wOiBcInBlLWRpYWxvZ19fYmFja2Ryb3BcIixcbiAgdG91Y2g6IFwicGUtZGlhbG9nX190b3VjaFwiLFxuICAvLyBzdGF0ZXNcbiAgZnVsbFNjcmVlbjogXCJwZS1kaWFsb2ctLWZ1bGwtc2NyZWVuXCIsXG4gIG1vZGFsOiBcInBlLWRpYWxvZy0tbW9kYWxcIixcbiAgb3BlbjogXCJwZS1kaWFsb2ctLW9wZW5cIixcbiAgLy8gY2xhc3Mgc2V0IHRvIGh0bWwgZWxlbWVudFxuICB2aXNpYmxlOiBcInBlLWRpYWxvZy0tdmlzaWJsZVwiLFxuICAvLyBjbGFzcyBzZXQgdG8gZGlhbG9nIGVsZW1lbnRcbiAgc2hvd0JhY2tkcm9wOiBcInBlLWRpYWxvZy0tYmFja2Ryb3BcIixcbiAgdHJhbnNpdGlvbjogXCJwZS1kaWFsb2ctLXRyYW5zaXRpb25cIixcbiAgLy8gbG9va3VwXG4gIG1lbnVDb250ZW50OiBtZW51Q2xhc3Nlcy5jb250ZW50XG59O1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pO1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG52YXIgZ2VuZXJhbEZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxufTtcblxudmFyIHRpbnRGbnMgPSBmdW5jdGlvbiB0aW50Rm5zKHRpbnQpIHtcbiAgdmFyIF9yZWY7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWRpYWxvZ19fY29udGVudFwiOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2JhY2tncm91bmRcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90ZXh0XCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtZGlhbG9nX19jb250ZW50XCI6IHtcbiAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90ZXh0XCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfYmFja2Ryb3BfYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWRpYWxvZ19fYmFja2Ryb3BcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZHJvcF9iYWNrZ3JvdW5kXCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX3JlZjtcbn07XG5cbnZhciBsaWdodFRpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImxpZ2h0XCIpKTtcblxudmFyIGRhcmtUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJkYXJrXCIpKTtcblxudmFyIGNvbG9yID0gY3JlYXRlQ29sb3Ioe1xuICB2YXJGbnM6IHtcbiAgICBsaWdodFRpbnRGbnM6IGxpZ2h0VGludEZucyxcbiAgICBkYXJrVGludEZuczogZGFya1RpbnRGbnNcbiAgfVxufSk7XG5cbnZhciBiZWhhdmlvclZhcnMgPSB7XG4gIGZ1bGxfc2NyZWVuOiBmYWxzZSxcbiAgbW9kYWw6IGZhbHNlXG59O1xuXG52YXIgdGhlbWVWYXJzID0gX2V4dGVuZHMoe30sIHtcbiAgYmFja2Ryb3A6IGZhbHNlLFxuICB6X2luZGV4OiB2YXJzLnpfZGlhbG9nXG59LCBiZWhhdmlvclZhcnMsIHNoYXJlZFZhcnMpO1xuLyoqXG4gKiBAdHlwZSB7RGlhbG9nVmFyc30gZGlhbG9nVmFyc1xuICovXG5cblxudmFyIGRpYWxvZ1ZhcnMgPSBfb2JqZWN0U3ByZWFkMih7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBnZW5lcmFsIHN0eWxlcywgbm90IGRlZmluZWQgYnkgdmFyaWFibGVzXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogdHJ1ZSxcbiAgYW5pbWF0aW9uX2RlbGF5OiBcIjBzXCIsXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogXCIuMjIwc1wiLFxuICBhbmltYXRpb25faGlkZV9jc3M6IFwib3BhY2l0eTogMDtcIixcbiAgYW5pbWF0aW9uX3Nob3dfY3NzOiBcIm9wYWNpdHk6IDE7XCIsXG4gIGFuaW1hdGlvbl90aW1pbmdfZnVuY3Rpb246IFwiZWFzZS1pbi1vdXRcIixcbiAgYm9yZGVyX3JhZGl1czogdmFycy51bml0X2Jsb2NrX2JvcmRlcl9yYWRpdXMsXG4gIHBvc2l0aW9uOiBcImZpeGVkXCIsXG4gIC8vIGNvbG9yIHZhcnNcbiAgY29sb3JfbGlnaHRfYmFja2Ryb3BfYmFja2dyb3VuZDogXCJyZ2JhKDAsIDAsIDAsIC40KVwiLFxuICBjb2xvcl9kYXJrX2JhY2tkcm9wX2JhY2tncm91bmQ6IFwicmdiYSgwLCAwLCAwLCAuNSlcIixcbiAgY29sb3JfbGlnaHRfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2JhY2tncm91bmQpLFxuICBjb2xvcl9kYXJrX2JhY2tncm91bmQ6IHJnYmEodmFycy5jb2xvcl9kYXJrX2JhY2tncm91bmQpLFxuICBjb2xvcl9saWdodF90ZXh0OiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3JlZ3VsYXIpLFxuICBjb2xvcl9kYXJrX3RleHQ6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3JlZ3VsYXIpXG59LCB0aGVtZVZhcnMpO1xuXG52YXIgbWluV2lkdGggPSBcIjMyMHB4XCI7XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciBcbiAqIEBwYXJhbSB7b2JqZWN0fSB2YXJzIFxuICovXG5cbnZhciBfYmFja2Ryb3AgPSBmdW5jdGlvbiBiYWNrZHJvcChzZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gKC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWRpYWxvZy0tdmlzaWJsZSAucGUtZGlhbG9nX19iYWNrZHJvcFwiOiB7XG4gICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgb3BhY2l0eTogMVxuICAgICAgfVxuICAgIH0pXG4gICk7XG59O1xuXG52YXIgZnVsbFNjcmVlbiA9IGZ1bmN0aW9uIGZ1bGxTY3JlZW4oc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3RvciwgW2NyZWF0ZU1hcmtlcih2YXJzLCBiZWhhdmlvclZhcnMpLCB7XG4gICAgcGFkZGluZzogMCxcbiAgICBcIiAucGUtZGlhbG9nX19jb250ZW50XCI6IHtcbiAgICAgIHdpZHRoOiBcIjEwMCVcIiAvLyBmb3IgSUUgMTFcblxuICAgIH1cbiAgfSwgZnVsbFNjcmVlbiQxKHNlbGVjdG9yLCB2YXJzKV0pO1xufTtcblxudmFyIF9tb2RhbCA9IGZ1bmN0aW9uIG1vZGFsKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIFtjcmVhdGVNYXJrZXIodmFycywgYmVoYXZpb3JWYXJzKV0pO1xufTtcblxudmFyIHZhckZucyA9IF9vYmplY3RTcHJlYWQyKHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvclxuICAgKiBAcGFyYW0ge29iamVjdH0gdmFycyBcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbZmxleC5sYXlvdXRDZW50ZXJDZW50ZXIsIHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIHpJbmRleDogdmFycy56X2luZGV4LFxuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIC8vIDEwMHZoIHdvdWxkIG1ha2UgdGhlIGRpYWxvZyBnbyBiZW5lYXRoIE1vYmlsZSBTYWZhcmkgdG9vbGJhciAgICAgICAgXG4gICAgICB0cmFuc2l0aW9uUHJvcGVydHk6IFwib3BhY2l0eSxiYWNrZ3JvdW5kLWNvbG9yLHRyYW5zZm9ybVwiLFxuICAgICAgXCIucGUtZGlhbG9nLS1mdWxsLXNjcmVlblwiOiBmdWxsU2NyZWVuKHNlbGVjdG9yLCB2YXJzKSxcbiAgICAgIFwiLnBlLWRpYWxvZy0tbW9kYWxcIjogX21vZGFsKHNlbGVjdG9yLCB2YXJzKSxcbiAgICAgIFwiIC5wZS1kaWFsb2dfX2NvbnRlbnRcIjoge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB0cmFuc2l0aW9uUHJvcGVydHk6IFwiYWxsXCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtZGlhbG9nX19iYWNrZHJvcFwiOiBbbWl4aW4uZGVmYXVsdFRyYW5zaXRpb24oXCJhbGxcIiksIC8vIGFuaW1hdGlvbiBkdXJhdGlvbiBpcyBzZXQgaW4gY29tcG9uZW50IG9wdGlvbnNcbiAgICAgIHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIlxuICAgICAgfV0sXG4gICAgICBcIi5wZS1kaWFsb2ctLWJhY2tkcm9wXCI6IF9iYWNrZHJvcChzZWxlY3RvcilcbiAgICB9XSksIHtcbiAgICAgIFwiLnBlLWRpYWxvZ19faG9sZGVyXCI6IHtcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgbWluV2lkdGg6IG1pbldpZHRoXG4gICAgICB9XG4gICAgfV07XG4gIH0sXG4gIGFuaW1hdGlvbl9oaWRlX2NzczogZnVuY3Rpb24gYW5pbWF0aW9uX2hpZGVfY3NzKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIFt2YXJzLmFuaW1hdGlvbl9oaWRlX2Nzc10pXTtcbiAgfSxcbiAgcG9zaXRpb246IGZ1bmN0aW9uIHBvc2l0aW9uKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIHBvc2l0aW9uOiB2YXJzLnBvc2l0aW9uXG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25fZGVsYXk6IGZ1bmN0aW9uIGFuaW1hdGlvbl9kZWxheShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiYsIC5wZS1kaWFsb2dfX2NvbnRlbnRcIjoge1xuICAgICAgICB0cmFuc2l0aW9uRGVsYXk6IHZhcnMuYW5pbWF0aW9uX2RlbGF5XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25fZHVyYXRpb246IGZ1bmN0aW9uIGFuaW1hdGlvbl9kdXJhdGlvbihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiYsIC5wZS1kaWFsb2dfX2NvbnRlbnRcIjoge1xuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHZhcnMuYW5pbWF0aW9uX2R1cmF0aW9uXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25fdGltaW5nX2Z1bmN0aW9uOiBmdW5jdGlvbiBhbmltYXRpb25fdGltaW5nX2Z1bmN0aW9uKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiJiwgLnBlLWRpYWxvZ19fY29udGVudFwiOiB7XG4gICAgICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogdmFycy5hbmltYXRpb25fdGltaW5nX2Z1bmN0aW9uXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25fc2hvd19jc3M6IGZ1bmN0aW9uIGFuaW1hdGlvbl9zaG93X2NzcyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1kaWFsb2ctLXZpc2libGVcIjogdmFycy5hbmltYXRpb25fc2hvd19jc3NcbiAgICB9KV07XG4gIH0sXG4gIGJvcmRlcl9yYWRpdXM6IGZ1bmN0aW9uIGJvcmRlcl9yYWRpdXMoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gWyF2YXJzLmZ1bGxfc2NyZWVuICYmIHNlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWRpYWxvZ19fY29udGVudFwiOiB7XG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IHZhcnMuYm9yZGVyX3JhZGl1cyArIFwicHhcIixcbiAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHZhcnMuYm9yZGVyX3JhZGl1cyArIFwicHhcIixcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogdmFycy5ib3JkZXJfcmFkaXVzICsgXCJweFwiLFxuICAgICAgICBib3JkZXJCb3R0b21SaWdodFJhZGl1czogdmFycy5ib3JkZXJfcmFkaXVzICsgXCJweFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICAvLyBUaGVtZSB2YXJzXG4gIGJhY2tkcm9wOiBmdW5jdGlvbiBiYWNrZHJvcChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiB2YXJzLmJhY2tkcm9wICYmIF9iYWNrZHJvcChzZWxlY3Rvcik7XG4gIH0sXG4gIGZ1bGxfc2NyZWVuOiBmdW5jdGlvbiBmdWxsX3NjcmVlbihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiB2YXJzLmZ1bGxfc2NyZWVuICYmIGZ1bGxTY3JlZW4oc2VsZWN0b3IsIHZhcnMpO1xuICB9LFxuICBtb2RhbDogZnVuY3Rpb24gbW9kYWwoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gdmFycy5tb2RhbCAmJiBfbW9kYWwoc2VsZWN0b3IsIHZhcnMpO1xuICB9XG59LCBzaGFyZWRWYXJGbnMpO1xuXG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgdmFyRm5zOiB2YXJGbnNcbn0pO1xuXG4vLyBAdHMtY2hlY2tcbnZhciBmbnMgPSBbbGF5b3V0LCBjb2xvcl07XG52YXIgc2VsZWN0b3IgPSBcIi5cIi5jb25jYXQoY2xhc3Nlcy5jb21wb25lbnQpO1xudmFyIGFkZFN0eWxlID0gc3R5bGVyLmNyZWF0ZUFkZFN0eWxlKHNlbGVjdG9yLCBmbnMsIGRpYWxvZ1ZhcnMpO1xudmFyIGdldFN0eWxlID0gc3R5bGVyLmNyZWF0ZUdldFN0eWxlKHNlbGVjdG9yLCBmbnMsIGRpYWxvZ1ZhcnMpO1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogZGlhbG9nVmFyc1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IGFkZEdlbmVyYWxTdHlsZVRvSGVhZCwgYWRkU3R5bGUsIGNvbG9yLCBnZXRTdHlsZSwgbGF5b3V0LCBkaWFsb2dWYXJzIGFzIHZhcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbG9yLCBzZWwsIGNyZWF0ZUxheW91dCwgc2VsZWN0b3JSVEwsIHJnYmEsIHN0eWxlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNzcyc7XG5pbXBvcnQgeyB2YXJzIH0gZnJvbSAncG9seXRoZW5lLXRoZW1lJztcbmltcG9ydCB7IHNoYXJlZFZhckZucywgc2hhcmVkVmFycyB9IGZyb20gJ3BvbHl0aGVuZS1jc3Mtc2hhZG93JztcblxudmFyIGxpc3RUaWxlQ2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLWxpc3QtdGlsZVwiLFxuICAvLyBlbGVtZW50c1xuICBjb250ZW50OiBcInBlLWxpc3QtdGlsZV9fY29udGVudFwiLFxuICBoaWdoU3VidGl0bGU6IFwicGUtbGlzdC10aWxlX19oaWdoLXN1YnRpdGxlXCIsXG4gIHByaW1hcnk6IFwicGUtbGlzdC10aWxlX19wcmltYXJ5XCIsXG4gIHNlY29uZGFyeTogXCJwZS1saXN0LXRpbGVfX3NlY29uZGFyeVwiLFxuICBzdWJ0aXRsZTogXCJwZS1saXN0LXRpbGVfX3N1YnRpdGxlXCIsXG4gIHRpdGxlOiBcInBlLWxpc3QtdGlsZV9fdGl0bGVcIixcbiAgY29udGVudEZyb250OiBcInBlLWxpc3QtdGlsZV9fY29udGVudC1mcm9udFwiLFxuICAvLyBzdGF0ZXMgIFxuICBjb21wYWN0OiBcInBlLWxpc3QtdGlsZS0tY29tcGFjdFwiLFxuICBjb21wYWN0RnJvbnQ6IFwicGUtbGlzdC10aWxlLS1jb21wYWN0LWZyb250XCIsXG4gIGRpc2FibGVkOiBcInBlLWxpc3QtdGlsZS0tZGlzYWJsZWRcIixcbiAgaGFzRnJvbnQ6IFwicGUtbGlzdC10aWxlLS1mcm9udFwiLFxuICBoYXNIaWdoU3VidGl0bGU6IFwicGUtbGlzdC10aWxlLS1oaWdoLXN1YnRpdGxlXCIsXG4gIGhhc1N1YnRpdGxlOiBcInBlLWxpc3QtdGlsZS0tc3VidGl0bGVcIixcbiAgaGVhZGVyOiBcInBlLWxpc3QtdGlsZS0taGVhZGVyXCIsXG4gIGhvdmVyYWJsZTogXCJwZS1saXN0LXRpbGUtLWhvdmVyYWJsZVwiLFxuICBpbnNldEg6IFwicGUtbGlzdC10aWxlLS1pbnNldC1oXCIsXG4gIGluc2V0VjogXCJwZS1saXN0LXRpbGUtLWluc2V0LXZcIixcbiAgc2VsZWN0YWJsZTogXCJwZS1saXN0LXRpbGUtLXNlbGVjdGFibGVcIixcbiAgc2VsZWN0ZWQ6IFwicGUtbGlzdC10aWxlLS1zZWxlY3RlZFwiLFxuICByb3VuZGVkOiBcInBlLWxpc3QtdGlsZS0tcm91bmRlZFwiLFxuICBoaWdobGlnaHQ6IFwicGUtbGlzdC10aWxlLS1oaWdobGlnaHRcIixcbiAgc3RpY2t5OiBcInBlLWxpc3QtdGlsZS0tc3RpY2t5XCIsXG4gIG5hdmlnYXRpb246IFwicGUtbGlzdC10aWxlLS1uYXZpZ2F0aW9uXCJcbn07XG5cbnZhciBtZW51Q2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLW1lbnVcIixcbiAgLy8gZWxlbWVudHNcbiAgcGFuZWw6IFwicGUtbWVudV9fcGFuZWxcIixcbiAgY29udGVudDogXCJwZS1tZW51X19jb250ZW50XCIsXG4gIHBsYWNlaG9sZGVyOiBcInBlLW1lbnVfX3BsYWNlaG9sZGVyXCIsXG4gIGJhY2tkcm9wOiBcInBlLW1lbnVfX2JhY2tkcm9wXCIsXG4gIC8vIHN0YXRlc1xuICBmbG9hdGluZzogXCJwZS1tZW51LS1mbG9hdGluZ1wiLFxuICBvcmlnaW46IFwicGUtbWVudS0tb3JpZ2luXCIsXG4gIHBlcm1hbmVudDogXCJwZS1tZW51LS1wZXJtYW5lbnRcIixcbiAgc2hvd0JhY2tkcm9wOiBcInBlLW1lbnUtLWJhY2tkcm9wXCIsXG4gIHZpc2libGU6IFwicGUtbWVudS0tdmlzaWJsZVwiLFxuICB3aWR0aF9hdXRvOiBcInBlLW1lbnUtLXdpZHRoLWF1dG9cIixcbiAgd2lkdGhfbjogXCJwZS1tZW51LS13aWR0aC1cIixcbiAgaXNUb3BNZW51OiBcInBlLW1lbnUtLXRvcC1tZW51XCIsXG4gIC8vIGxvb2t1cFxuICBsaXN0VGlsZTogbGlzdFRpbGVDbGFzc2VzLmNvbXBvbmVudCxcbiAgc2VsZWN0ZWRMaXN0VGlsZTogbGlzdFRpbGVDbGFzc2VzLnNlbGVjdGVkXG59O1xuXG52YXIgZGlhbG9nQ2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLWRpYWxvZ1wiLFxuICAvLyBlbGVtZW50c1xuICBwbGFjZWhvbGRlcjogXCJwZS1kaWFsb2dfX3BsYWNlaG9sZGVyXCIsXG4gIGhvbGRlcjogXCJwZS1kaWFsb2dfX2hvbGRlclwiLFxuICBjb250ZW50OiBcInBlLWRpYWxvZ19fY29udGVudFwiLFxuICBiYWNrZHJvcDogXCJwZS1kaWFsb2dfX2JhY2tkcm9wXCIsXG4gIHRvdWNoOiBcInBlLWRpYWxvZ19fdG91Y2hcIixcbiAgLy8gc3RhdGVzXG4gIGZ1bGxTY3JlZW46IFwicGUtZGlhbG9nLS1mdWxsLXNjcmVlblwiLFxuICBtb2RhbDogXCJwZS1kaWFsb2ctLW1vZGFsXCIsXG4gIG9wZW46IFwicGUtZGlhbG9nLS1vcGVuXCIsXG4gIC8vIGNsYXNzIHNldCB0byBodG1sIGVsZW1lbnRcbiAgdmlzaWJsZTogXCJwZS1kaWFsb2ctLXZpc2libGVcIixcbiAgLy8gY2xhc3Mgc2V0IHRvIGRpYWxvZyBlbGVtZW50XG4gIHNob3dCYWNrZHJvcDogXCJwZS1kaWFsb2ctLWJhY2tkcm9wXCIsXG4gIHRyYW5zaXRpb246IFwicGUtZGlhbG9nLS10cmFuc2l0aW9uXCIsXG4gIC8vIGxvb2t1cFxuICBtZW51Q29udGVudDogbWVudUNsYXNzZXMuY29udGVudFxufTtcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1kaWFsb2cgcGUtZHJhd2VyXCIsXG4gIC8vIHN0YXRlc1xuICBjb3ZlcjogXCJwZS1kcmF3ZXItLWNvdmVyXCIsXG4gIHB1c2g6IFwicGUtZHJhd2VyLS1wdXNoXCIsXG4gIG1pbmk6IFwicGUtZHJhd2VyLS1taW5pXCIsXG4gIHBlcm1hbmVudDogXCJwZS1kcmF3ZXItLXBlcm1hbmVudFwiLFxuICBib3JkZXI6IFwicGUtZHJhd2VyLS1ib3JkZXJcIixcbiAgZmxvYXRpbmc6IFwicGUtZHJhd2VyLS1mbG9hdGluZ1wiLFxuICBmaXhlZDogXCJwZS1kcmF3ZXItLWZpeGVkXCIsXG4gIGFuY2hvckVuZDogXCJwZS1kcmF3ZXItLWFuY2hvci1lbmRcIixcbiAgdmlzaWJsZTogZGlhbG9nQ2xhc3Nlcy52aXNpYmxlXG59O1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgIGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pO1xuICAgIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuXG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcblxuICAgIGlmIChpICUgMikge1xuICAgICAgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG52YXIgZ2VuZXJhbEZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKCkge1xuICAgIHJldHVybiBbe1xuICAgICAgXCIgLnBlLWRpYWxvZ19fY29udGVudFwiOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IFwibm9uZVwiXG4gICAgICB9XG4gICAgfV07XG4gIH1cbn07XG5cbnZhciB0aW50Rm5zID0gZnVuY3Rpb24gdGludEZucyh0aW50KSB7XG4gIHZhciBfcmVmO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2JvcmRlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWRpYWxvZ19fY29udGVudFwiOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfYm9yZGVyXCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfYmFja2dyb3VuZFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2JhY2tkcm9wX2JhY2tncm91bmRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1kaWFsb2dfX2JhY2tkcm9wXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfYmFja2Ryb3BfYmFja2dyb3VuZFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9yZWY7XG59O1xuXG52YXIgbGlnaHRUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJsaWdodFwiKSk7XG5cbnZhciBkYXJrVGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwiZGFya1wiKSk7XG5cbnZhciBjb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgdmFyRm5zOiB7XG4gICAgbGlnaHRUaW50Rm5zOiBsaWdodFRpbnRGbnMsXG4gICAgZGFya1RpbnRGbnM6IGRhcmtUaW50Rm5zXG4gIH1cbn0pO1xuXG52YXIgU0hBRE9XX1dJRFRIID0gMTU7XG5cbnZhciBfYm9yZGVyID0gZnVuY3Rpb24gX2JvcmRlcihzZWxlY3RvciwgdmFycywgaXNSVEwpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiIC5wZS1kaWFsb2dfX2NvbnRlbnRcIjoge1xuICAgICAgYm9yZGVyV2lkdGg6IFwiXCIuY29uY2F0KHZhcnMuYm9yZGVyID8gMSA6IDAsIFwicHhcIiksXG4gICAgICBib3JkZXJTdHlsZTogaXNSVEwgPyBcIm5vbmUgbm9uZSBub25lIHNvbGlkXCIgOiBcIm5vbmUgc29saWQgbm9uZSBub25lXCJcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIF9ib3JkZXIyID0gZnVuY3Rpb24gYm9yZGVyKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBbX2JvcmRlcihzZWxlY3RvciwgdmFycywgZmFsc2UpLCBfYm9yZGVyKHNlbGVjdG9yUlRMKHNlbGVjdG9yKSwgdmFycywgdHJ1ZSldO1xufTtcblxudmFyIGFsaWduU2lkZSA9IGZ1bmN0aW9uIGFsaWduU2lkZShpc1JUTCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgdmFyIF9wZURyYXdlckZpeGVkO1xuXG4gICAgcmV0dXJuIFt7XG4gICAgICAvLyBGaXhlZFxuICAgICAgXCIucGUtZHJhd2VyLS1maXhlZFwiOiAoX3BlRHJhd2VyRml4ZWQgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9wZURyYXdlckZpeGVkLCBpc1JUTCA/IFwicmlnaHRcIiA6IFwibGVmdFwiLCAwKSwgX2RlZmluZVByb3BlcnR5KF9wZURyYXdlckZpeGVkLCBpc1JUTCA/IFwibGVmdFwiIDogXCJyaWdodFwiLCBcImF1dG9cIiksIF9wZURyYXdlckZpeGVkKVxuICAgIH0sIF9ib3JkZXIoXCJcIi5jb25jYXQoc2VsZWN0b3IsIFwiLnBlLWRyYXdlci0tYm9yZGVyXCIpLCBfZXh0ZW5kcyh7fSwgdmFycywge1xuICAgICAgYm9yZGVyOiB0cnVlXG4gICAgfSksIGlzUlRMKV07XG4gIH07XG59O1xuXG52YXIgYWxpZ25MZWZ0ID0gYWxpZ25TaWRlKGZhbHNlKTtcbnZhciBhbGlnblJpZ2h0ID0gYWxpZ25TaWRlKHRydWUpO1xuXG52YXIgX2JhY2tkcm9wID0gZnVuY3Rpb24gYmFja2Ryb3Aoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiLnBlLWRpYWxvZy0tdmlzaWJsZSAucGUtZGlhbG9nX19iYWNrZHJvcFwiOiB7XG4gICAgICBvcGFjaXR5OiAxXG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBzZWxlY3RvckFuY2hvckVuZCA9IGZ1bmN0aW9uIHNlbGVjdG9yQW5jaG9yRW5kKHNlbGVjdG9yKSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChzZWxlY3RvciwgXCIucGUtZHJhd2VyLS1hbmNob3ItZW5kXCIpO1xufTsgLy8gZm46IG1pbmlTZWxlY3RvciBjb250YWlucyAucGUtZHJhd2VyLS1taW5pXG5cblxudmFyIF9jb250ZW50X3dpZHRoX21pbmlfY29sbGFwc2VkID0gZnVuY3Rpb24gY29udGVudF93aWR0aF9taW5pX2NvbGxhcHNlZChtaW5pU2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIHNlbChtaW5pU2VsZWN0b3IsIHtcbiAgICBcIjpub3QoLnBlLWRpYWxvZy0tdmlzaWJsZSkgLnBlLWRpYWxvZ19fY29udGVudFwiOiB7XG4gICAgICB3aWR0aDogXCJcIi5jb25jYXQodmFycy5jb250ZW50X3dpZHRoX21pbmlfY29sbGFwc2VkLCBcInB4XCIpXG4gICAgfVxuICB9KTtcbn07IC8vIGZuOiBjb3ZlclNlbGVjdG9yIGNvbnRhaW5zIC5wZS1kcmF3ZXItLWNvdmVyXG5cblxudmFyIF9jb3Zlcl9jb250ZW50X21heF93aWR0aCA9IGZ1bmN0aW9uIF9jb3Zlcl9jb250ZW50X21heF93aWR0aChjb3ZlclNlbGVjdG9yLCB2YXJzLCBpc1JUTCkge1xuICB2YXIgX3BlRGlhbG9nX19jb250ZW50LCBfcGVEaWFsb2dWaXNpYmxlO1xuXG4gIHJldHVybiBzZWwoY292ZXJTZWxlY3Rvciwge1xuICAgIFwiIC5wZS1kaWFsb2dfX2NvbnRlbnRcIjogKF9wZURpYWxvZ19fY29udGVudCA9IHtcbiAgICAgIG1heFdpZHRoOiBcIlwiLmNvbmNhdCh2YXJzLmNvbnRlbnRfbWF4X3dpZHRoLCBcInB4XCIpXG4gICAgfSwgX2RlZmluZVByb3BlcnR5KF9wZURpYWxvZ19fY29udGVudCwgaXNSVEwgPyBcInJpZ2h0XCIgOiBcImxlZnRcIiwgXCJcIi5jb25jYXQoLXZhcnMuY29udGVudF9tYXhfd2lkdGggLSBTSEFET1dfV0lEVEgsIFwicHhcIikpLCBfZGVmaW5lUHJvcGVydHkoX3BlRGlhbG9nX19jb250ZW50LCBpc1JUTCA/IFwibGVmdFwiIDogXCJyaWdodFwiLCBcImF1dG9cIiksIF9wZURpYWxvZ19fY29udGVudCksXG4gICAgXCIucGUtZGlhbG9nLS12aXNpYmxlIC5wZS1kaWFsb2dfX2NvbnRlbnRcIjogKF9wZURpYWxvZ1Zpc2libGUgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9wZURpYWxvZ1Zpc2libGUsIGlzUlRMID8gXCJyaWdodFwiIDogXCJsZWZ0XCIsIDApLCBfZGVmaW5lUHJvcGVydHkoX3BlRGlhbG9nVmlzaWJsZSwgaXNSVEwgPyBcImxlZnRcIiA6IFwicmlnaHRcIiwgXCJhdXRvXCIpLCBfcGVEaWFsb2dWaXNpYmxlKVxuICB9KTtcbn07XG5cbnZhciBjb3Zlcl9jb250ZW50X21heF93aWR0aCA9IGZ1bmN0aW9uIGNvdmVyX2NvbnRlbnRfbWF4X3dpZHRoKGNvdmVyU2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIFtfY292ZXJfY29udGVudF9tYXhfd2lkdGgoY292ZXJTZWxlY3RvciwgdmFycywgZmFsc2UpLCBfY292ZXJfY29udGVudF9tYXhfd2lkdGgoc2VsZWN0b3JSVEwoY292ZXJTZWxlY3RvciksIHZhcnMsIHRydWUpLCBfY292ZXJfY29udGVudF9tYXhfd2lkdGgoc2VsZWN0b3JBbmNob3JFbmQoY292ZXJTZWxlY3RvciksIHZhcnMsIHRydWUpLCBfY292ZXJfY29udGVudF9tYXhfd2lkdGgoc2VsZWN0b3JBbmNob3JFbmQoc2VsZWN0b3JSVEwoY292ZXJTZWxlY3RvcikpLCB2YXJzLCBmYWxzZSldO1xufTsgLy8gZm46IHNlbGVjdG9yIGNvbnRhaW5zIC5wZS1kcmF3ZXItLXBlcm1hbmVudFxuXG5cbnZhciBfY29udGVudF93aWR0aCA9IGZ1bmN0aW9uIGNvbnRlbnRfd2lkdGgoc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiIC5wZS1kaWFsb2dfX2NvbnRlbnRcIjoge1xuICAgICAgd2lkdGg6IFwiXCIuY29uY2F0KHZhcnMuY29udGVudF93aWR0aCwgXCJweFwiKVxuICAgIH1cbiAgfSk7XG59OyAvLyBmbjogcHVzaFNlbGVjdG9yIGNvbnRhaW5zIC5wZS1kcmF3ZXItLXB1c2hcblxuXG52YXIgX3B1c2hfY29udGVudF93aWR0aCA9IGZ1bmN0aW9uIF9wdXNoX2NvbnRlbnRfd2lkdGgocHVzaFNlbGVjdG9yLCB2YXJzLCBpc1JUTCkge1xuICB2YXIgX3BlRGlhbG9nX19jb250ZW50MiwgX3BlRGlhbG9nVmlzaWJsZTI7XG5cbiAgcmV0dXJuIHNlbChwdXNoU2VsZWN0b3IsIHtcbiAgICBcIiAucGUtZGlhbG9nX19jb250ZW50XCI6IChfcGVEaWFsb2dfX2NvbnRlbnQyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcGVEaWFsb2dfX2NvbnRlbnQyLCBpc1JUTCA/IFwibWFyZ2luUmlnaHRcIiA6IFwibWFyZ2luTGVmdFwiLCBcIlwiLmNvbmNhdCgtdmFycy5jb250ZW50X3dpZHRoIC0gU0hBRE9XX1dJRFRILCBcInB4XCIpKSwgX2RlZmluZVByb3BlcnR5KF9wZURpYWxvZ19fY29udGVudDIsIGlzUlRMID8gXCJtYXJnaW5MZWZ0XCIgOiBcIm1hcmdpblJpZ2h0XCIsIFwiYXV0b1wiKSwgX3BlRGlhbG9nX19jb250ZW50MiksXG4gICAgXCIucGUtZGlhbG9nLS12aXNpYmxlIC5wZS1kaWFsb2dfX2NvbnRlbnRcIjogKF9wZURpYWxvZ1Zpc2libGUyID0ge1xuICAgICAgd2lkdGg6IFwiXCIuY29uY2F0KHZhcnMuY29udGVudF93aWR0aCwgXCJweFwiKVxuICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfcGVEaWFsb2dWaXNpYmxlMiwgaXNSVEwgPyBcIm1hcmdpblJpZ2h0XCIgOiBcIm1hcmdpbkxlZnRcIiwgMCksIF9kZWZpbmVQcm9wZXJ0eShfcGVEaWFsb2dWaXNpYmxlMiwgaXNSVEwgPyBcIm1hcmdpbkxlZnRcIiA6IFwibWFyZ2luUmlnaHRcIiwgXCJhdXRvXCIpLCBfcGVEaWFsb2dWaXNpYmxlMilcbiAgfSk7XG59O1xuXG52YXIgcHVzaF9jb250ZW50X3dpZHRoID0gZnVuY3Rpb24gcHVzaF9jb250ZW50X3dpZHRoKHB1c2hTZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gW19wdXNoX2NvbnRlbnRfd2lkdGgocHVzaFNlbGVjdG9yLCB2YXJzLCBmYWxzZSksIF9wdXNoX2NvbnRlbnRfd2lkdGgoc2VsZWN0b3JSVEwocHVzaFNlbGVjdG9yKSwgdmFycywgdHJ1ZSksIF9wdXNoX2NvbnRlbnRfd2lkdGgoc2VsZWN0b3JBbmNob3JFbmQocHVzaFNlbGVjdG9yKSwgdmFycywgdHJ1ZSksIF9wdXNoX2NvbnRlbnRfd2lkdGgoc2VsZWN0b3JBbmNob3JFbmQoc2VsZWN0b3JSVEwocHVzaFNlbGVjdG9yKSksIHZhcnMsIGZhbHNlKV07XG59O1xuXG52YXIgX2NvdmVyID0gZnVuY3Rpb24gY292ZXIoc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiIC5wZS1kaWFsb2dfX2NvbnRlbnRcIjoge1xuICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgIHRvcDogMCxcbiAgICAgIHpJbmRleDogdmFycy56X2luZGV4XG4gICAgfSxcbiAgICBcIi5wZS1kaWFsb2ctLXZpc2libGVcIjoge1xuICAgICAgXCIgLnBlLWRpYWxvZ19fdG91Y2hcIjoge1xuICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG1pbmlTZWxlY3RvciBcbiAqIEBwYXJhbSB7b2JqZWN0fSBbdmFyc10gXG4gKi9cblxuXG52YXIgX21pbmkgPSBmdW5jdGlvbiBtaW5pKG1pbmlTZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gKC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBzZWwobWluaVNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtZGlhbG9nX19jb250ZW50XCI6IHtcbiAgICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IDBcbiAgICAgIH1cbiAgICB9KVxuICApO1xufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHBlcm1hbmVudFNlbGVjdG9yIFxuICogQHBhcmFtIHtvYmplY3R9IFt2YXJzXSBcbiAqL1xuXG5cbnZhciBfcGVybWFuZW50ID0gZnVuY3Rpb24gcGVybWFuZW50KHBlcm1hbmVudFNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiAoLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHNlbChwZXJtYW5lbnRTZWxlY3Rvciwge1xuICAgICAgcG9zaXRpb246IFwic3RhdGljXCIsXG4gICAgICBkaXNwbGF5OiBcImJsb2NrXCIsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgb3ZlcmZsb3c6IFwiaW5pdGlhbFwiLFxuICAgICAgXCIgLnBlLWRpYWxvZ19fY29udGVudFwiOiB7XG4gICAgICAgIG92ZXJmbG93OiBcInZpc2libGVcIixcbiAgICAgICAgbWF4SGVpZ2h0OiBcImluaXRpYWxcIixcbiAgICAgICAgbWFyZ2luTGVmdDogMCxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IDBcbiAgICAgIH1cbiAgICB9KVxuICApO1xufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHB1c2hTZWxlY3RvciBcbiAqIEBwYXJhbSB7b2JqZWN0fSBbdmFyc10gXG4gKi9cbi8vIGZuOiBwdXNoU2VsZWN0b3IgY29udGFpbnMgLnBlLWRyYXdlci0tcHVzaFxuXG5cbnZhciBfcHVzaCA9IGZ1bmN0aW9uIHB1c2gocHVzaFNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiAoLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHNlbChwdXNoU2VsZWN0b3IsIHtcbiAgICAgIHBvc2l0aW9uOiBcInN0YXRpY1wiXG4gICAgfSlcbiAgKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciBcbiAqIEBwYXJhbSB7b2JqZWN0fSBbdmFyc10gXG4gKi9cblxuXG52YXIgYm9yZGVyUmFkaXVzID0gZnVuY3Rpb24gYm9yZGVyUmFkaXVzKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtZGlhbG9nX19jb250ZW50XCI6IHtcbiAgICAgIGJvcmRlclJhZGl1czogdmFycy5ib3JkZXJfcmFkaXVzICsgXCJweFwiXG4gICAgfVxuICB9KTtcbn07XG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciBcbiAqIEBwYXJhbSB7b2JqZWN0fSBbdmFyc10gXG4gKi9cblxuXG52YXIgX2Zsb2F0aW5nID0gZnVuY3Rpb24gZmxvYXRpbmcoc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuICgvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgc2VsKHNlbGVjdG9yLCB7XG4gICAgICBoZWlnaHQ6IFwiYXV0b1wiLFxuICAgICAgXCIgLnBlLWRpYWxvZ19fY29udGVudFwiOiB7XG4gICAgICAgIGhlaWdodDogXCJhdXRvXCJcbiAgICAgIH1cbiAgICB9KVxuICApO1xufTtcblxudmFyIHZhckZucyA9IF9vYmplY3RTcHJlYWQyKHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciBcbiAgICogQHBhcmFtIHtvYmplY3R9IFt2YXJzXSBcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3RvciwgdmFycyQxKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIFthbGlnbkxlZnQoc2VsZWN0b3IsIHZhcnMkMSksIHtcbiAgICAgIGp1c3RpZnlDb250ZW50OiBcImZsZXgtc3RhcnRcIixcbiAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICB6SW5kZXg6IDEsXG4gICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgbWluV2lkdGg6IDAsXG4gICAgICAvLyBJRSAxMSBkb2VzIG5vdCBhY2NlcHQgXCJub25lXCIgb3IgXCJpbml0YWxcIiBoZXJlXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICB0cmFuc2l0aW9uUHJvcGVydHk6IFwiYWxsXCIsXG4gICAgICBcIjpub3QoLnBlLWRpYWxvZy0tdHJhbnNpdGlvbilcIjoge1xuICAgICAgICBcIiAucGUtZGlhbG9nX19jb250ZW50XCI6IHtcbiAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IFwiMHNcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIgLnBlLWRpYWxvZ19fY29udGVudFwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIC8vIHRyYW5zaXRpb25Qcm9wZXJ0eTogXCJhbGxcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgb3ZlcmZsb3c6IFwidmlzaWJsZVwiLFxuICAgICAgICBtaW5XaWR0aDogMCxcbiAgICAgICAgLy8gSUUgMTEgZG9lcyBub3QgYWNjZXB0IFwibm9uZVwiIG9yIFwiaW5pdGFsXCIgaGVyZVxuICAgICAgICBmbGV4U2hyaW5rOiAwXG4gICAgICB9LFxuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lX19jb250ZW50XCI6IHtcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgb3ZlcmZsb3dZOiBcImF1dG9cIixcbiAgICAgICAgb3ZlcmZsb3dYOiBcImhpZGRlblwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lXCI6IHtcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgbWF4SGVpZ2h0OiBcIm5vbmVcIixcbiAgICAgICAgbWluV2lkdGg6IDAgLy8gSUUgMTEgZG9lcyBub3QgYWNjZXB0IFwibm9uZVwiIG9yIFwiaW5pdGFsXCIgaGVyZVxuXG4gICAgICB9LFxuICAgICAgXCIgLnBlLWRpYWxvZy1wYW5lX19ib2R5XCI6IHtcbiAgICAgICAgb3ZlcmZsb3c6IFwidmlzaWJsZVwiLFxuICAgICAgICBtYXhIZWlnaHQ6IFwibm9uZVwiLFxuICAgICAgICBib3JkZXI6IFwibm9uZVwiXG4gICAgICB9LFxuICAgICAgLy8gRml4ZWRcbiAgICAgIFwiLnBlLWRyYXdlci0tZml4ZWRcIjoge1xuICAgICAgICBwb3NpdGlvbjogXCJmaXhlZFwiLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgekluZGV4OiB2YXJzLnpfZHJhd2VyXG4gICAgICB9LFxuICAgICAgLy8gTWluaVxuICAgICAgXCIucGUtZHJhd2VyLS1taW5pXCI6IF9taW5pKHNlbGVjdG9yKSxcbiAgICAgIC8vIFBlcm1hbmVudFxuICAgICAgXCIucGUtZHJhd2VyLS1wZXJtYW5lbnRcIjogX3Blcm1hbmVudChzZWxlY3RvciksXG4gICAgICAvLyBGbG9hdGluZ1xuICAgICAgXCIucGUtZHJhd2VyLS1mbG9hdGluZ1wiOiBfZmxvYXRpbmcoc2VsZWN0b3IpLFxuICAgICAgLy8gQ292ZXIgKGRlZmF1bHQpXG4gICAgICBcIi5wZS1kcmF3ZXItLWNvdmVyXCI6IF9jb3ZlcihzZWxlY3RvciwgdmFycyQxKSxcbiAgICAgIC8vIFB1c2hcbiAgICAgIFwiLnBlLWRyYXdlci0tcHVzaFwiOiBfcHVzaChzZWxlY3RvciksXG4gICAgICAvLyBCYWNrZHJvcFxuICAgICAgXCIgLnBlLWRpYWxvZ19fYmFja2Ryb3BcIjoge1xuICAgICAgICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcbiAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLWRpYWxvZ19fdG91Y2hcIjoge1xuICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIixcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgYm90dG9tOiAwXG4gICAgICB9LFxuICAgICAgXCIucGUtZGlhbG9nLS1iYWNrZHJvcFwiOiBfYmFja2Ryb3Aoc2VsZWN0b3IpXG4gICAgfV0pLCBbc2VsKHNlbGVjdG9yUlRMKHNlbGVjdG9yKSwgYWxpZ25SaWdodChzZWxlY3RvciwgdmFycyQxKSldXTtcbiAgfSxcbiAgYW5pbWF0aW9uX2RlbGF5OiBmdW5jdGlvbiBhbmltYXRpb25fZGVsYXkoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCImLCAucGUtZGlhbG9nX19jb250ZW50LCAucGUtZGlhbG9nX19iYWNrZHJvcFwiOiB7XG4gICAgICAgIHRyYW5zaXRpb25EZWxheTogdmFycy5hbmltYXRpb25fZGVsYXlcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogZnVuY3Rpb24gYW5pbWF0aW9uX2R1cmF0aW9uKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiJiwgLnBlLWRpYWxvZ19fY29udGVudCwgLnBlLWRpYWxvZ19fYmFja2Ryb3BcIjoge1xuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHZhcnMuYW5pbWF0aW9uX2R1cmF0aW9uXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25fdGltaW5nX2Z1bmN0aW9uOiBmdW5jdGlvbiBhbmltYXRpb25fdGltaW5nX2Z1bmN0aW9uKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiJiwgLnBlLWRpYWxvZ19fY29udGVudCwgLnBlLWRpYWxvZ19fYmFja2Ryb3BcIjoge1xuICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IHZhcnMuYW5pbWF0aW9uX3RpbWluZ19mdW5jdGlvblxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgYm9yZGVyX3JhZGl1czogZnVuY3Rpb24gYm9yZGVyX3JhZGl1cyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbYm9yZGVyUmFkaXVzKHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIGNvbnRlbnRfbWF4X3dpZHRoOiBmdW5jdGlvbiBjb250ZW50X21heF93aWR0aChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbY292ZXJfY29udGVudF9tYXhfd2lkdGgoXCJcIi5jb25jYXQoc2VsZWN0b3IsIFwiLnBlLWRyYXdlci0tY292ZXJcIiksIHZhcnMpXTtcbiAgfSxcbiAgY29udGVudF93aWR0aDogZnVuY3Rpb24gY29udGVudF93aWR0aChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbX2NvbnRlbnRfd2lkdGgoc2VsZWN0b3IsIHZhcnMpLCBfY29udGVudF93aWR0aChcIlwiLmNvbmNhdChzZWxlY3RvciwgXCIucGUtZGlhbG9nLS12aXNpYmxlXCIpLCB2YXJzKSwgX2NvbnRlbnRfd2lkdGgoXCJcIi5jb25jYXQoc2VsZWN0b3IsIFwiLnBlLWRyYXdlci0tcGVybWFuZW50XCIpLCB2YXJzKSwgcHVzaF9jb250ZW50X3dpZHRoKFwiXCIuY29uY2F0KHNlbGVjdG9yLCBcIi5wZS1kcmF3ZXItLXB1c2hcIiksIHZhcnMpXTtcbiAgfSxcbiAgY29udGVudF93aWR0aF9taW5pX2NvbGxhcHNlZDogZnVuY3Rpb24gY29udGVudF93aWR0aF9taW5pX2NvbGxhcHNlZChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbX2NvbnRlbnRfd2lkdGhfbWluaV9jb2xsYXBzZWQoXCJcIi5jb25jYXQoc2VsZWN0b3IsIFwiLnBlLWRyYXdlci0tbWluaVwiKSwgdmFycyldO1xuICB9LFxuICAvLyBUaGVtZSB2YXJzXG4gIGNvdmVyOiBmdW5jdGlvbiBjb3ZlcihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiB2YXJzLmNvdmVyICYmIFtfY292ZXIoc2VsZWN0b3IsIHZhcnMpLCBjb3Zlcl9jb250ZW50X21heF93aWR0aChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBiYWNrZHJvcDogZnVuY3Rpb24gYmFja2Ryb3Aoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3ZhcnMuYmFja2Ryb3AgJiYgX2JhY2tkcm9wKHNlbGVjdG9yKV07XG4gIH0sXG4gIGJvcmRlcjogZnVuY3Rpb24gYm9yZGVyKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtfYm9yZGVyMihzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBtaW5pOiBmdW5jdGlvbiBtaW5pKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIHZhcnMubWluaSAmJiBbX21pbmkoc2VsZWN0b3IpLCBfY29udGVudF93aWR0aF9taW5pX2NvbGxhcHNlZChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBwZXJtYW5lbnQ6IGZ1bmN0aW9uIHBlcm1hbmVudChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbdmFycy5wZXJtYW5lbnQgJiYgX3Blcm1hbmVudChzZWxlY3RvcildO1xuICB9LFxuICBmbG9hdGluZzogZnVuY3Rpb24gZmxvYXRpbmcoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3ZhcnMuZmxvYXRpbmcgJiYgX2Zsb2F0aW5nKHNlbGVjdG9yKV07XG4gIH0sXG4gIHB1c2g6IGZ1bmN0aW9uIHB1c2goc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gdmFycy5wdXNoICYmIFtfcHVzaChzZWxlY3RvciksIHB1c2hfY29udGVudF93aWR0aChzZWxlY3RvciwgdmFycyldO1xuICB9XG59LCBzaGFyZWRWYXJGbnMpO1xuXG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgdmFyRm5zOiB2YXJGbnNcbn0pO1xuXG52YXIgdGhlbWVWYXJzID0gX29iamVjdFNwcmVhZDIoe1xuICBiYWNrZHJvcDogZmFsc2UsXG4gIGJvcmRlcjogdW5kZWZpbmVkLFxuICAvLyBzZXQgdG8gYHRydWVgIG9yIGBmYWxzZWBcbiAgY292ZXI6IGZhbHNlLFxuICBmbG9hdGluZzogZmFsc2UsXG4gIG1pbmk6IGZhbHNlLFxuICBwZXJtYW5lbnQ6IGZhbHNlLFxuICBwdXNoOiBmYWxzZSxcbiAgel9pbmRleDogdmFycy56X2RyYXdlclxufSwgc2hhcmVkVmFycyk7XG4vKipcbiAqIEB0eXBlIHtEcmF3ZXJWYXJzfSBkcmF3ZXJWYXJzXG4gKi9cblxuXG52YXIgZHJhd2VyVmFycyA9IF9vYmplY3RTcHJlYWQyKHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICBhbmltYXRpb25fZGVsYXk6IFwiMHNcIixcbiAgYW5pbWF0aW9uX2R1cmF0aW9uOiBcIi4yNjBzXCIsXG4gIGFuaW1hdGlvbl90aW1pbmdfZnVuY3Rpb246IFwiZWFzZS1pbi1vdXRcIixcbiAgYm9yZGVyX3JhZGl1czogMCxcbiAgY29udGVudF9tYXhfd2lkdGg6IDUgKiB2YXJzLmluY3JlbWVudCxcbiAgLy8gNSAqIDU2XG4gIGNvbnRlbnRfd2lkdGg6IDI0MCxcbiAgY29udGVudF93aWR0aF9taW5pX2NvbGxhcHNlZDogdmFycy5pbmNyZW1lbnQsXG4gIC8vIDEgKiA1NlxuICAvLyBjb2xvciB2YXJzXG4gIGNvbG9yX2xpZ2h0X2JhY2tkcm9wX2JhY2tncm91bmQ6IFwicmdiYSgwLCAwLCAwLCAuNClcIixcbiAgY29sb3JfZGFya19iYWNrZHJvcF9iYWNrZ3JvdW5kOiBcInJnYmEoMCwgMCwgMCwgLjUpXCIsXG4gIGNvbG9yX2xpZ2h0X2JhY2tncm91bmQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9iYWNrZ3JvdW5kKSxcbiAgY29sb3JfZGFya19iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfZGFya19iYWNrZ3JvdW5kKSxcbiAgY29sb3JfbGlnaHRfYm9yZGVyOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF9ib3JkZXJfbGlnaHQpLFxuICBjb2xvcl9kYXJrX2JvcmRlcjogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX2JvcmRlcl9saWdodClcbn0sIHRoZW1lVmFycyk7XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXQsIGNvbG9yXTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudC5yZXBsYWNlKC8gL2csIFwiLlwiKSk7XG52YXIgYWRkU3R5bGUgPSBzdHlsZXIuY3JlYXRlQWRkU3R5bGUoc2VsZWN0b3IsIGZucywgZHJhd2VyVmFycyk7XG52YXIgZ2V0U3R5bGUgPSBzdHlsZXIuY3JlYXRlR2V0U3R5bGUoc2VsZWN0b3IsIGZucywgZHJhd2VyVmFycyk7XG5cbnZhciBhZGRHZW5lcmFsU3R5bGVUb0hlYWQgPSBmdW5jdGlvbiBhZGRHZW5lcmFsU3R5bGVUb0hlYWQoKSB7XG4gIHJldHVybiBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW3NlbGVjdG9yXSxcbiAgICBmbnM6IGZucyxcbiAgICB2YXJzOiBkcmF3ZXJWYXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBsYXlvdXQsIGRyYXdlclZhcnMgYXMgdmFycyB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29sb3IsIHNlbCwgY3JlYXRlTGF5b3V0LCBtaXhpbiwgcmdiYSwgc3R5bGVyIH0gZnJvbSAncG9seXRoZW5lLWNvcmUtY3NzJztcbmltcG9ydCB7IHZhcnMgfSBmcm9tICdwb2x5dGhlbmUtdGhlbWUnO1xuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLWZhYlwiLFxuICAvLyBlbGVtZW50c1xuICBjb250ZW50OiBcInBlLWZhYl9fY29udGVudFwiLFxuICAvLyBzdGF0ZXNcbiAgbWluaTogXCJwZS1mYWItLW1pbmlcIlxufTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbnZhciBnZW5lcmFsRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn07XG5cbnZhciB0aW50Rm5zID0gZnVuY3Rpb24gdGludEZucyh0aW50KSB7XG4gIHZhciBfcmVmO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludF1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZ3JvdW5kXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfYmFja2dyb3VuZFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3dhc2hfYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWJ1dHRvbl9fd2FzaC1jb2xvclwiOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3dhc2hfYmFja2dyb3VuZFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3dhc2hfb3BhY2l0eVwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWJ1dHRvbl9fd2FzaC1jb2xvclwiOiB7XG4gICAgICAgIG9wYWNpdHk6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl93YXNoX29wYWNpdHlcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfcmVmO1xufTtcblxudmFyIGxpZ2h0VGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImRhcmtcIikpO1xuXG52YXIgY29sb3IgPSBjcmVhdGVDb2xvcih7XG4gIHZhckZuczoge1xuICAgIGxpZ2h0VGludEZuczogbGlnaHRUaW50Rm5zLFxuICAgIGRhcmtUaW50Rm5zOiBkYXJrVGludEZuc1xuICB9XG59KTtcblxuLy8gQHRzLWNoZWNrXG52YXIgdmFyRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgdXNlclNlbGVjdDogXCJub25lXCIsXG4gICAgICBcIi1tb3otdXNlci1zZWxlY3RcIjogXCJub25lXCIsXG4gICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgIG91dGxpbmU6IFwibm9uZVwiLFxuICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1mYWJfX2NvbnRlbnRcIjoge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1yaXBwbGVcIjoge1xuICAgICAgICBib3JkZXJSYWRpdXM6IFwiaW5oZXJpdFwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLWJ1dHRvbl9fd2FzaFwiOiBbbWl4aW4uZml0KCksIHtcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcImluaGVyaXRcIixcbiAgICAgICAgdHJhbnNpdGlvbjogXCJiYWNrZ3JvdW5kLWNvbG9yIFwiICsgdmFycy5hbmltYXRpb25fZHVyYXRpb24gKyBcIiBlYXNlLWluLW91dFwiLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50XCJcbiAgICAgIH1dXG4gICAgfSldO1xuICB9LFxuICBzaXplX3JlZ3VsYXI6IGZ1bmN0aW9uIHNpemVfcmVndWxhcihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgd2lkdGg6IHZhcnMuc2l6ZV9yZWd1bGFyICsgXCJweFwiLFxuICAgICAgICBoZWlnaHQ6IHZhcnMuc2l6ZV9yZWd1bGFyICsgXCJweFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBzaXplX21pbmk6IGZ1bmN0aW9uIHNpemVfbWluaShzZWxlY3RvciwgdmFycyQxKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWZhYi0tbWluaVwiOiB7XG4gICAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICAgIHdpZHRoOiB2YXJzJDEuc2l6ZV9taW5pICsgXCJweFwiLFxuICAgICAgICAgIGhlaWdodDogdmFycyQxLnNpemVfbWluaSArIFwicHhcIixcbiAgICAgICAgICBwYWRkaW5nOiAodmFycyQxLnNpemVfbWluaSAtIHZhcnMudW5pdF9pY29uX3NpemUpIC8gMiArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9XG59O1xudmFyIGxheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zXG59KTtcblxuLy8gQHRzLWNoZWNrXG4vKipcbiAqIEB0eXBlIHtEcmF3ZXJWYXJzfSBkcmF3ZXJWYXJzXG4gKi9cblxudmFyIGRyYXdlclZhcnMgPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBnZW5lcmFsIHN0eWxlcywgbm90IGRlZmluZWQgYnkgdmFyaWFibGVzXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogdHJ1ZSxcbiAgc2l6ZV9taW5pOiA1ICogdmFycy5ncmlkX3VuaXRfY29tcG9uZW50LFxuICAvLyA1ICogOCA9IDQwXG4gIHNpemVfcmVndWxhcjogNyAqIHZhcnMuZ3JpZF91bml0X2NvbXBvbmVudCxcbiAgLy8gNyAqIDggPSA1NlxuICBjb2xvcl9saWdodDogcmdiYSh2YXJzLmNvbG9yX3ByaW1hcnlfZm9yZWdyb3VuZCksXG4gIGNvbG9yX2xpZ2h0X2JhY2tncm91bmQ6IHJnYmEodmFycy5jb2xvcl9wcmltYXJ5KSxcbiAgY29sb3JfbGlnaHRfd2FzaF9iYWNrZ3JvdW5kOiBcImN1cnJlbnRDb2xvclwiLFxuICBjb2xvcl9saWdodF93YXNoX29wYWNpdHk6IDAuMSxcbiAgY29sb3JfZGFyazogcmdiYSh2YXJzLmNvbG9yX3ByaW1hcnlfZm9yZWdyb3VuZCksXG4gIGNvbG9yX2RhcmtfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX3ByaW1hcnkpLFxuICBjb2xvcl9kYXJrX3dhc2hfYmFja2dyb3VuZDogXCJjdXJyZW50Q29sb3JcIixcbiAgY29sb3JfZGFya193YXNoX29wYWNpdHk6IDAuMVxufTtcblxuLy8gQHRzLWNoZWNrXG52YXIgZm5zID0gW2xheW91dCwgY29sb3JdO1xudmFyIHNlbGVjdG9yID0gXCIuXCIuY29uY2F0KGNsYXNzZXMuY29tcG9uZW50KTtcbnZhciBhZGRTdHlsZSA9IHN0eWxlci5jcmVhdGVBZGRTdHlsZShzZWxlY3RvciwgZm5zLCBkcmF3ZXJWYXJzKTtcbnZhciBnZXRTdHlsZSA9IHN0eWxlci5jcmVhdGVHZXRTdHlsZShzZWxlY3RvciwgZm5zLCBkcmF3ZXJWYXJzKTtcblxudmFyIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCA9IGZ1bmN0aW9uIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCgpIHtcbiAgcmV0dXJuIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbc2VsZWN0b3JdLFxuICAgIGZuczogZm5zLFxuICAgIHZhcnM6IGRyYXdlclZhcnNcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBhZGRHZW5lcmFsU3R5bGVUb0hlYWQsIGFkZFN0eWxlLCBjb2xvciwgZ2V0U3R5bGUsIGxheW91dCwgZHJhd2VyVmFycyBhcyB2YXJzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb2xvciwgc2VsLCBjcmVhdGVMYXlvdXQsIHJnYmEsIHN0eWxlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNzcyc7XG5pbXBvcnQgeyB2YXJzIH0gZnJvbSAncG9seXRoZW5lLXRoZW1lJztcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1pY29uXCIsXG4gIC8vIHN0YXRlc1xuICBhdmF0YXI6IFwicGUtaWNvbi0tYXZhdGFyXCIsXG4gIGxhcmdlOiBcInBlLWljb24tLWxhcmdlXCIsXG4gIG1lZGl1bTogXCJwZS1pY29uLS1tZWRpdW1cIixcbiAgcmVndWxhcjogXCJwZS1pY29uLS1yZWd1bGFyXCIsXG4gIHNtYWxsOiBcInBlLWljb24tLXNtYWxsXCJcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgZ2VuZXJhbEZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIGNvbG9yOiBcImN1cnJlbnRDb2xvclwiXG4gICAgfSldO1xuICB9XG59O1xuXG52YXIgdGludEZucyA9IGZ1bmN0aW9uIHRpbnRGbnModGludCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludF1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9hdmF0YXJfYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtaWNvbi0tYXZhdGFyXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfYXZhdGFyX2JhY2tncm91bmRcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfcmVmO1xufTtcblxudmFyIGxpZ2h0VGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImRhcmtcIikpO1xuXG52YXIgY29sb3IgPSBjcmVhdGVDb2xvcih7XG4gIHZhckZuczoge1xuICAgIGxpZ2h0VGludEZuczogbGlnaHRUaW50Rm5zLFxuICAgIGRhcmtUaW50Rm5zOiBkYXJrVGludEZuc1xuICB9XG59KTtcblxudmFyIHNpemVEaXJlY3RpdmUgPSBmdW5jdGlvbiBzaXplRGlyZWN0aXZlKHNpemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBzZWwoc2VsZWN0b3IsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCIucGUtaWNvbi0tXCIuY29uY2F0KHNpemUpLCB7XG4gICAgICB3aWR0aDogdmFyc1tcInNpemVfXCIuY29uY2F0KHNpemUpXSArIFwicHhcIixcbiAgICAgIGhlaWdodDogdmFyc1tcInNpemVfXCIuY29uY2F0KHNpemUpXSArIFwicHhcIlxuICAgIH0pKTtcbiAgfTtcbn07XG5cbnZhciB2YXJGbnMgPSBfZXh0ZW5kcyh7fSwge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgIHZlcnRpY2FsQWxpZ246IFwibWlkZGxlXCIsXG4gICAgICBiYWNrZ3JvdW5kUmVwZWF0OiBcIm5vLXJlcGVhdFwiLFxuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgIGZvbnRTaXplOiAwLFxuICAgICAgbGluZUhlaWdodDogMCxcbiAgICAgIFwiLnBlLWljb24tLWF2YXRhclwiOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIlxuICAgICAgfSxcbiAgICAgIFwiLnBlLWljb24tLWF2YXRhciBpbWdcIjoge1xuICAgICAgICBib3JkZXI6IFwibm9uZVwiLFxuICAgICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXG4gICAgICAgIHdpZHRoOiBcImluaGVyaXRcIixcbiAgICAgICAgaGVpZ2h0OiBcImluaGVyaXRcIlxuICAgICAgfSxcbiAgICAgIFwiIGltZ1wiOiB7XG4gICAgICAgIGhlaWdodDogXCJpbmhlcml0XCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtc3ZnLCAucGUtc3ZnID4gZGl2XCI6IHtcbiAgICAgICAgLyogUmVhY3QgY3JlYXRlcyBhbiBhZGRpdGlvbmFsIGRpdiB3aGVuIHdyYXBwaW5nIGFuIFNWRyAqL1xuICAgICAgICB3aWR0aDogXCJpbmhlcml0XCIsXG4gICAgICAgIGhlaWdodDogXCJpbmhlcml0XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn0sIFtcInNtYWxsXCIsIFwicmVndWxhclwiLCBcIm1lZGl1bVwiLCBcImxhcmdlXCJdLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzaXplKSB7XG4gIHJldHVybiBhY2NbXCJzaXplX1wiLmNvbmNhdChzaXplKV0gPSBzaXplRGlyZWN0aXZlKHNpemUpLCBhY2M7XG59LCB7fSkpO1xuXG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgdmFyRm5zOiB2YXJGbnNcbn0pO1xuXG4vLyBAdHMtY2hlY2tcbi8qKlxuICogQHR5cGUge0ljb25WYXJzfSBpY29uVmFyc1xuICovXG5cbnZhciBpY29uVmFycyA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICBzaXplX3NtYWxsOiB2YXJzLnVuaXRfaWNvbl9zaXplX3NtYWxsLFxuICAvLyAxNiBcbiAgc2l6ZV9yZWd1bGFyOiB2YXJzLnVuaXRfaWNvbl9zaXplLFxuICAvLyAyNFxuICBzaXplX21lZGl1bTogdmFycy51bml0X2ljb25fc2l6ZV9tZWRpdW0sXG4gIC8vIDMyXG4gIHNpemVfbGFyZ2U6IHZhcnMudW5pdF9pY29uX3NpemVfbGFyZ2UsXG4gIC8vIDQwXG4gIC8vIGF2YXRhciBiYWNrZ3JvdW5kIGlzIHZpc2libGUgd2hlbiBpbWFnZSBpcyBub3QgeWV0IGxvYWRlZFxuICBjb2xvcl9saWdodF9hdmF0YXJfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfYmFja2dyb3VuZF9kaXNhYmxlZCksXG4gIGNvbG9yX2RhcmtfYXZhdGFyX2JhY2tncm91bmQ6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya19iYWNrZ3JvdW5kX2Rpc2FibGVkKSxcbiAgY29sb3JfbGlnaHQ6IFwiY3VycmVudGNvbG9yXCIsXG4gIGNvbG9yX2Rhcms6IFwiY3VycmVudGNvbG9yXCJcbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXQsIGNvbG9yXTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudCk7XG52YXIgYWRkU3R5bGUgPSBzdHlsZXIuY3JlYXRlQWRkU3R5bGUoc2VsZWN0b3IsIGZucywgaWNvblZhcnMpO1xudmFyIGdldFN0eWxlID0gc3R5bGVyLmNyZWF0ZUdldFN0eWxlKHNlbGVjdG9yLCBmbnMsIGljb25WYXJzKTtcblxudmFyIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCA9IGZ1bmN0aW9uIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCgpIHtcbiAgcmV0dXJuIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbc2VsZWN0b3JdLFxuICAgIGZuczogZm5zLFxuICAgIHZhcnM6IGljb25WYXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBsYXlvdXQsIGljb25WYXJzIGFzIHZhcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbG9yLCBzZWwsIGNyZWF0ZUxheW91dCwgbWl4aW4sIHNlbGVjdG9yUlRMLCByZ2JhLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgdmFycyB9IGZyb20gJ3BvbHl0aGVuZS10aGVtZSc7XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtYnV0dG9uIHBlLWljb24tYnV0dG9uXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGNvbnRlbnQ6IFwicGUtaWNvbi1idXR0b25fX2NvbnRlbnRcIixcbiAgbGFiZWw6IFwicGUtaWNvbi1idXR0b25fX2xhYmVsXCIsXG4gIC8vIHN0YXRlc1xuICBjb21wYWN0OiBcInBlLWljb24tYnV0dG9uLS1jb21wYWN0XCJcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgZ2VuZXJhbEZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuXG52YXIgdGludEZucyA9IGZ1bmN0aW9uIHRpbnRGbnModGludCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiYsIC5wZS1pY29uLWJ1dHRvbl9fbGFiZWxcIjoge1xuICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludF1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZ3JvdW5kXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtaWNvbi1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZ3JvdW5kXCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfZGlzYWJsZWRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWJ1dHRvbi0tZGlzYWJsZWRcIjoge1xuICAgICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50LCAucGUtaWNvbi1idXR0b25fX2xhYmVsXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2Rpc2FibGVkXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl93YXNoX2JhY2tncm91bmRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX3dhc2gtY29sb3JcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl93YXNoX2JhY2tncm91bmRcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl93YXNoX29wYWNpdHlcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX3dhc2gtY29sb3JcIjoge1xuICAgICAgICBvcGFjaXR5OiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfd2FzaF9vcGFjaXR5XCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX3JlZjtcbn07XG5cbnZhciBob3ZlclRpbnRGbnMgPSBmdW5jdGlvbiBob3ZlclRpbnRGbnModGludCkge1xuICB2YXIgX3JlZjI7XG5cbiAgcmV0dXJuIF9yZWYyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ob3ZlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWljb24tYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ob3ZlclwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9sYWJlbF9ob3ZlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWljb24tYnV0dG9uX19sYWJlbFwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfbGFiZWxfaG92ZXJcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZjIsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfYmFja2dyb3VuZF9ob3ZlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWljb24tYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfYmFja2dyb3VuZF9ob3ZlclwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9yZWYyO1xufTtcblxudmFyIGxpZ2h0VGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImRhcmtcIikpO1xuXG52YXIgbGlnaHRUaW50SG92ZXJGbnMgPSBob3ZlclRpbnRGbnMoXCJsaWdodFwiKTtcbnZhciBkYXJrVGludEhvdmVyRm5zID0gaG92ZXJUaW50Rm5zKFwiZGFya1wiKTtcbnZhciBjb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgdmFyRm5zOiB7XG4gICAgbGlnaHRUaW50Rm5zOiBsaWdodFRpbnRGbnMsXG4gICAgZGFya1RpbnRGbnM6IGRhcmtUaW50Rm5zLFxuICAgIGxpZ2h0VGludEhvdmVyRm5zOiBsaWdodFRpbnRIb3ZlckZucyxcbiAgICBkYXJrVGludEhvdmVyRm5zOiBkYXJrVGludEhvdmVyRm5zXG4gIH1cbn0pO1xuXG52YXIgYWxpZ25TaWRlID0gZnVuY3Rpb24gYWxpZ25TaWRlKGlzUlRMKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodmFycykge1xuICAgIHJldHVybiB7fTtcbiAgfTtcbn07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuXG52YXIgYWxpZ25MZWZ0ID0gYWxpZ25TaWRlKCk7XG52YXIgYWxpZ25SaWdodCA9IGFsaWduU2lkZSgpO1xuXG52YXIgX2xhYmVsX3BhZGRpbmdfYmVmb3JlID0gZnVuY3Rpb24gbGFiZWxfcGFkZGluZ19iZWZvcmUoc2VsZWN0b3IsIHZhcnMsIGlzUlRMKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtaWNvbi1idXR0b25fX2xhYmVsXCI6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXNSVEwgPyBcInBhZGRpbmdSaWdodFwiIDogXCJwYWRkaW5nTGVmdFwiLCB2YXJzLmxhYmVsX3BhZGRpbmdfYmVmb3JlICsgXCJweFwiKVxuICB9KTtcbn07XG5cbnZhciBfbGFiZWxfcGFkZGluZ19hZnRlciA9IGZ1bmN0aW9uIGxhYmVsX3BhZGRpbmdfYWZ0ZXIoc2VsZWN0b3IsIHZhcnMsIGlzUlRMKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtaWNvbi1idXR0b25fX2xhYmVsXCI6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXNSVEwgPyBcInBhZGRpbmdMZWZ0XCIgOiBcInBhZGRpbmdSaWdodFwiLCB2YXJzLmxhYmVsX3BhZGRpbmdfYWZ0ZXIgKyBcInB4XCIpXG4gIH0pO1xufTtcblxudmFyIHZhckZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIFthbGlnbkxlZnQodmFycyksIHtcbiAgICAgIC8vIGRvbid0IHNldCBidXR0b24gc2l6ZSB0byBmYWNpbGl0YXRlIGRpZmZlcmVudCBpY29uIHNpemVzXG4gICAgICBkaXNwbGF5OiBcImlubGluZS1mbGV4XCIsXG4gICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgIGJvcmRlcjogXCJub25lXCIsXG4gICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXG4gICAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICAgIGZvbnRTaXplOiBcIjFyZW1cIixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjUwJVwiLFxuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLWljb24tYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgbGluZUhlaWdodDogMSxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjUwJVwiLFxuICAgICAgICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIlxuICAgICAgfSxcbiAgICAgIC8vIFRPRE86IG1vdmUgd2FzaCBzdHlsZXMgdG8gYmFzZSBidXR0b25cbiAgICAgIFwiIC5wZS1idXR0b25fX3dhc2hcIjogW21peGluLmZpdCgpLCB7XG4gICAgICAgIHpJbmRleDogMCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcImluaGVyaXRcIixcbiAgICAgICAgcG9pbnRlckV2ZW50czogXCJub25lXCIsXG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH1dLFxuICAgICAgLy8gQWx3YXlzIHNob3cgd2FzaCBvbiBmb2N1cyBidXQgbm90IG9uIGNsaWNrXG4gICAgICBcIiY6Zm9jdXM6bm90KDphY3RpdmUpXCI6IHtcbiAgICAgICAgXCIgLnBlLWJ1dHRvbl9fd2FzaFwiOiB7XG4gICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gT25seSBzaG93IHdhc2ggb24gaG92ZXIgd2hlbiBcImhhcyBob3ZlclwiIGNsYXNzIHNldFxuICAgICAgXCIucGUtYnV0dG9uLS1oYXMtaG92ZXI6aG92ZXJcIjoge1xuICAgICAgICBcIiAucGUtYnV0dG9uX193YXNoXCI6IHtcbiAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfZGVmaW5lUHJvcGVydHkoe30sIFwiKltkaXI9cnRsXSBcIi5jb25jYXQoc2VsZWN0b3IsIFwiLCAucGUtcnRsIFwiKS5jb25jYXQoc2VsZWN0b3IpLCBbYWxpZ25SaWdodCh2YXJzKV0pXSldO1xuICB9LFxuICBwYWRkaW5nOiBmdW5jdGlvbiBwYWRkaW5nKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1pY29uLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgIHBhZGRpbmc6IHZhcnMucGFkZGluZyArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgcGFkZGluZ19jb21wYWN0OiBmdW5jdGlvbiBwYWRkaW5nX2NvbXBhY3Qoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtaWNvbi1idXR0b24tLWNvbXBhY3RcIjoge1xuICAgICAgICBcIiAucGUtaWNvbi1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICAgIHBhZGRpbmc6IHZhcnMucGFkZGluZ19jb21wYWN0ICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogZnVuY3Rpb24gYW5pbWF0aW9uX2R1cmF0aW9uKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnQsIC5wZS1idXR0b25fX3dhc2hcIjogW21peGluLmRlZmF1bHRUcmFuc2l0aW9uKFwiYWxsXCIsIHZhcnMuYW5pbWF0aW9uX2R1cmF0aW9uKV1cbiAgICB9KV07XG4gIH0sXG4gIGxhYmVsX2ZvbnRfc2l6ZTogZnVuY3Rpb24gbGFiZWxfZm9udF9zaXplKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1pY29uLWJ1dHRvbl9fbGFiZWxcIjoge1xuICAgICAgICBmb250U2l6ZTogdmFycy5sYWJlbF9mb250X3NpemUgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGxhYmVsX2xpbmVfaGVpZ2h0OiBmdW5jdGlvbiBsYWJlbF9saW5lX2hlaWdodChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtaWNvbi1idXR0b25fX2xhYmVsXCI6IHtcbiAgICAgICAgbGluZUhlaWdodDogdmFycy5sYWJlbF9saW5lX2hlaWdodCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgbGFiZWxfZm9udF93ZWlnaHQ6IGZ1bmN0aW9uIGxhYmVsX2ZvbnRfd2VpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1pY29uLWJ1dHRvbl9fbGFiZWxcIjoge1xuICAgICAgICBmb250V2VpZ2h0OiB2YXJzLmxhYmVsX2ZvbnRfd2VpZ2h0XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBsYWJlbF90ZXh0X3RyYW5zZm9ybTogZnVuY3Rpb24gbGFiZWxfdGV4dF90cmFuc2Zvcm0oc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWljb24tYnV0dG9uX19sYWJlbFwiOiB7XG4gICAgICAgIHRleHRUcmFuc2Zvcm06IHZhcnMubGFiZWxfdGV4dF90cmFuc2Zvcm1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGxhYmVsX3BhZGRpbmdfYWZ0ZXI6IGZ1bmN0aW9uIGxhYmVsX3BhZGRpbmdfYWZ0ZXIoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge30pLCBfbGFiZWxfcGFkZGluZ19hZnRlcihzZWxlY3RvciwgdmFycywgZmFsc2UpLCBfbGFiZWxfcGFkZGluZ19hZnRlcihzZWxlY3RvclJUTChzZWxlY3RvciksIHZhcnMsIHRydWUpXTtcbiAgfSxcbiAgbGFiZWxfcGFkZGluZ19iZWZvcmU6IGZ1bmN0aW9uIGxhYmVsX3BhZGRpbmdfYmVmb3JlKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHt9KSwgX2xhYmVsX3BhZGRpbmdfYmVmb3JlKHNlbGVjdG9yLCB2YXJzLCBmYWxzZSksIF9sYWJlbF9wYWRkaW5nX2JlZm9yZShzZWxlY3RvclJUTChzZWxlY3RvciksIHZhcnMsIHRydWUpXTtcbiAgfVxufTtcbnZhciBsYXlvdXQgPSBjcmVhdGVMYXlvdXQoe1xuICB2YXJGbnM6IHZhckZuc1xufSk7XG5cbi8vIEB0cy1jaGVja1xuLyoqXG4gKiBAdHlwZSB7SWNvbkJ1dHRvblZhcnN9IGljb25CdXR0b25WYXJzXG4gKi9cblxudmFyIGljb25CdXR0b25WYXJzID0ge1xuICAvKipcbiAgICogR2VuZXJhdGUgZ2VuZXJhbCBzdHlsZXMsIG5vdCBkZWZpbmVkIGJ5IHZhcmlhYmxlc1xuICAgKi9cbiAgZ2VuZXJhbF9zdHlsZXM6IHRydWUsXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogdmFycy5hbmltYXRpb25fZHVyYXRpb24sXG4gIGxhYmVsX2ZvbnRfc2l6ZTogMTYsXG4gIGxhYmVsX2ZvbnRfd2VpZ2h0OiA0MDAsXG4gIGxhYmVsX2xpbmVfaGVpZ2h0OiAyMCxcbiAgbGFiZWxfcGFkZGluZ19hZnRlcjogMCxcbiAgbGFiZWxfcGFkZGluZ19iZWZvcmU6IHZhcnMuZ3JpZF91bml0ICogMSxcbiAgLy8gNFxuICBsYWJlbF90ZXh0X3RyYW5zZm9ybTogXCJpbml0aWFsXCIsXG4gIGxhYmVsX3RvcF9tYXJnaW5fZmFjdG9yOiAxIC8gMTIsXG4gIC8vIGFsaWduIHdpdGggaWNvblxuICBwYWRkaW5nOiAodmFycy5ncmlkX3VuaXRfaWNvbl9idXR0b24gLSB2YXJzLnVuaXRfaWNvbl9zaXplKSAvIDIsXG4gIC8vIDEyXG4gIHBhZGRpbmdfY29tcGFjdDogKHZhcnMuZ3JpZF91bml0X2ljb25fYnV0dG9uIC0gdmFycy51bml0X2ljb25fc2l6ZSkgLyAzLFxuICAvLyA4XG4gIGNvbG9yX2JhY2tncm91bmQ6IFwidHJhbnNwYXJlbnRcIixcbiAgLy8gb25seSBzcGVjaWZ5IHRoaXMgdmFyaWFibGUgdG8gZ2V0IGFsbCAyIHN0YXRlc1xuICAvLyB0aGVtZSBzcGVjaWZpYyBiYWNrZ3JvdW5kIGNvbG9ycyBtYXkgYmUgc2V0IGluIHRoZW1lOyBkaXNhYmxlZCBieSBkZWZhdWx0XG4gIC8vIGNvbG9yX2xpZ2h0X2JhY2tncm91bmQ6ICAgIFwibm9uZVwiLFxuICAvLyBjb2xvcl9kYXJrX2JhY2tncm91bmQ6ICAgICBcIm5vbmVcIixcbiAgLy8gY29sb3JfbGlnaHRfaG92ZXI6ICAgICAgICAgXCJpbmhlcml0XCIsXG4gIC8vIGNvbG9yX2RhcmtfaG92ZXI6ICAgICAgICAgIFwiaW5oZXJpdFwiLFxuICAvLyBjb2xvcl9saWdodF9sYWJlbF9ob3ZlcjogICBcImluaGVyaXRcIixcbiAgLy8gY29sb3JfZGFya19sYWJlbF9ob3ZlcjogICAgXCJpbmhlcml0XCIsXG4gIGNvbG9yX2xpZ2h0OiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3NlY29uZGFyeSksXG4gIGNvbG9yX2xpZ2h0X2xhYmVsOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3NlY29uZGFyeSksXG4gIGNvbG9yX2xpZ2h0X2Rpc2FibGVkOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X2Rpc2FibGVkKSxcbiAgY29sb3JfbGlnaHRfd2FzaF9iYWNrZ3JvdW5kOiBcImN1cnJlbnRDb2xvclwiLFxuICBjb2xvcl9saWdodF93YXNoX29wYWNpdHk6IDAuMSxcbiAgY29sb3JfZGFyazogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX3RleHRfc2Vjb25kYXJ5KSxcbiAgY29sb3JfZGFya19sYWJlbDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX3RleHRfc2Vjb25kYXJ5KSxcbiAgY29sb3JfZGFya19kaXNhYmxlZDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX3RleHRfZGlzYWJsZWQpLFxuICBjb2xvcl9kYXJrX3dhc2hfYmFja2dyb3VuZDogXCJjdXJyZW50Q29sb3JcIixcbiAgY29sb3JfZGFya193YXNoX29wYWNpdHk6IDAuMSAvLyBob3ZlciBjb2xvcnMgbWF5IGJlIHNldCBpbiB0aGVtZTsgZGlzYWJsZWQgYnkgZGVmYXVsdFxuICAvLyBjb2xvcl9saWdodF9iYWNrZ3JvdW5kX2hvdmVyOiAgICAgICAgIFwiY3VycmVudENvbG9yXCIsXG4gIC8vIGNvbG9yX2RhcmtfYmFja2dyb3VuZF9ob3ZlcjogICAgICAgICAgXCJjdXJyZW50Q29sb3JcIixcblxufTtcblxuLy8gQHRzLWNoZWNrXG52YXIgZm5zID0gW2xheW91dCwgY29sb3JdO1xudmFyIHNlbGVjdG9yID0gXCIuXCIuY29uY2F0KGNsYXNzZXMuY29tcG9uZW50LnJlcGxhY2UoLyAvZywgXCIuXCIpKTtcbnZhciBhZGRTdHlsZSA9IHN0eWxlci5jcmVhdGVBZGRTdHlsZShzZWxlY3RvciwgZm5zLCBpY29uQnV0dG9uVmFycyk7XG52YXIgZ2V0U3R5bGUgPSBzdHlsZXIuY3JlYXRlR2V0U3R5bGUoc2VsZWN0b3IsIGZucywgaWNvbkJ1dHRvblZhcnMpO1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogaWNvbkJ1dHRvblZhcnNcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBhZGRHZW5lcmFsU3R5bGVUb0hlYWQsIGFkZFN0eWxlLCBjb2xvciwgZ2V0U3R5bGUsIGxheW91dCwgaWNvbkJ1dHRvblZhcnMgYXMgdmFycyB9O1xuIiwiaW1wb3J0IHsgY29sb3IgYXMgY29sb3IkMSwgbGF5b3V0IGFzIGxheW91dCQxIH0gZnJvbSAncG9seXRoZW5lLWNzcy1iYXNlLXNwaW5uZXInO1xuaW1wb3J0IHsgY3JlYXRlQ29sb3IsIHNlbCwgY3JlYXRlTGF5b3V0LCByZ2JhLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgc3R5bGVEdXJhdGlvblRvTXMgfSBmcm9tICdwb2x5dGhlbmUtY29yZSc7XG5pbXBvcnQgeyB2YXJzIH0gZnJvbSAncG9seXRoZW5lLXRoZW1lJztcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1pb3Mtc3Bpbm5lclwiLFxuICAvLyBlbGVtZW50c1xuICBibGFkZXM6IFwicGUtaW9zLXNwaW5uZXJfX2JsYWRlc1wiLFxuICBibGFkZTogXCJwZS1pb3Mtc3Bpbm5lcl9fYmxhZGVcIlxufTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbnZhciBnZW5lcmFsRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWlvcy1zcGlubmVyX19ibGFkZVwiOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IFwiY3VycmVudGNvbG9yXCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG5cbnZhciB0aW50Rm5zID0gZnVuY3Rpb24gdGludEZucyh0aW50KSB7XG4gIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIFwiY29sb3JfXCIgKyB0aW50LCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnRdXG4gICAgfSldO1xuICB9KTtcbn07XG5cbnZhciBsaWdodFRpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImxpZ2h0XCIpKTtcblxudmFyIGRhcmtUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJkYXJrXCIpKTtcblxudmFyIGNvbG9yID0gY3JlYXRlQ29sb3Ioe1xuICB2YXJGbnM6IHtcbiAgICBsaWdodFRpbnRGbnM6IGxpZ2h0VGludEZucyxcbiAgICBkYXJrVGludEZuczogZGFya1RpbnRGbnNcbiAgfSxcbiAgc3VwZXJDb2xvcjogY29sb3IkMVxufSk7XG5cbnZhciBibGFkZVdpZHRoID0gOTsgLy8gcGVyY2VudFxuXG52YXIgYmxhZGVIZWlnaHQgPSAyODsgLy8gcGVyY2VudFxuXG52YXIga2ZGYWRlID0gZnVuY3Rpb24ga2ZGYWRlKCkge1xuICByZXR1cm4ge1xuICAgIFwiIDAlXCI6IHtcbiAgICAgIG9wYWNpdHk6IC42NDBcbiAgICB9LFxuICAgIFwiIDEwMCVcIjoge1xuICAgICAgb3BhY2l0eTogLjAzNVxuICAgIH1cbiAgfTtcbn07XG5cbnZhciBwb3NpdGlvbkJsYWRlcyA9IGZ1bmN0aW9uIHBvc2l0aW9uQmxhZGVzKHZhcnMpIHtcbiAgcmV0dXJuIFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTFdLm1hcChmdW5jdGlvbiAoaSkge1xuICAgIC8vIHJldmVyc2UgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZSBvbiBpT1NcbiAgICB2YXIgZGVsYXkgPSAtMSAvIDEyICogaSAqIHN0eWxlRHVyYXRpb25Ub01zKHZhcnMucm90YXRpb25fYW5pbWF0aW9uX2R1cmF0aW9uKTtcbiAgICB2YXIgcm90YXRpb24gPSAzNjAgLSAzNjAgLyAxMiAqIGk7XG4gICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCIgLnBlLWlvcy1zcGlubmVyX19ibGFkZTpudGgtb2YtdHlwZShcIiArIChpICsgMSkgKyBcIilcIiwge1xuICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZShcIiArIHJvdGF0aW9uICsgXCJkZWcpIHRyYW5zbGF0ZTNkKDAsLTE0MCUsMClcIixcbiAgICAgIGFuaW1hdGlvbjogXCJpb3NTcGlubmVyRmFkZSBcIiArIHZhcnMucm90YXRpb25fYW5pbWF0aW9uX2R1cmF0aW9uICsgXCIgXCIgKyBkZWxheSArIFwibXMgbGluZWFyIGluZmluaXRlXCJcbiAgICB9KTtcbiAgfSk7XG59O1xuXG52YXIgdmFyRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWlvcy1zcGlubmVyX19ibGFkZXNcIjoge1xuICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoMCwwLDApXCIsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1pb3Mtc3Bpbm5lcl9fYmxhZGVcIjoge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICB3aWR0aDogYmxhZGVXaWR0aCArIFwiJVwiLFxuICAgICAgICBoZWlnaHQ6IGJsYWRlSGVpZ2h0ICsgXCIlXCIsXG4gICAgICAgIGxlZnQ6ICgxMDAgLSBibGFkZVdpZHRoKSAvIDIgKyBcIiVcIixcbiAgICAgICAgdG9wOiAoMTAwIC0gYmxhZGVIZWlnaHQpIC8gMiArIFwiJVwiLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBib3JkZXJSYWRpdXM6IFwiNTBweFwiXG4gICAgICB9LFxuICAgICAgXCJAa2V5ZnJhbWVzIGlvc1NwaW5uZXJGYWRlXCI6IGtmRmFkZSgpXG4gICAgfSldO1xuICB9LFxuICByb3RhdGlvbl9hbmltYXRpb25fZHVyYXRpb246IGZ1bmN0aW9uIHJvdGF0aW9uX2FuaW1hdGlvbl9kdXJhdGlvbihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtaW9zLXNwaW5uZXJfX2JsYWRlc1wiOiBbcG9zaXRpb25CbGFkZXModmFycyldXG4gICAgfSldO1xuICB9XG59O1xudmFyIGxheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zLFxuICBzdXBlckxheW91dDogbGF5b3V0JDFcbn0pO1xuXG4vLyBAdHMtY2hlY2tcbi8qKlxuICogQHR5cGUge0lPU1NwaW5uZXJWYXJzfSBpT1NTcGlubmVyVmFyc1xuICovXG5cbnZhciBpT1NTcGlubmVyVmFycyA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICByb3RhdGlvbl9hbmltYXRpb25fZHVyYXRpb246IFwiMXNcIixcbiAgY29sb3JfbGlnaHQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kKSxcbiAgY29sb3JfZGFyazogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZClcbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXQsIGNvbG9yXTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudCk7XG52YXIgYWRkU3R5bGUgPSBzdHlsZXIuY3JlYXRlQWRkU3R5bGUoc2VsZWN0b3IsIGZucywgaU9TU3Bpbm5lclZhcnMpO1xudmFyIGdldFN0eWxlID0gc3R5bGVyLmNyZWF0ZUdldFN0eWxlKHNlbGVjdG9yLCBmbnMsIGlPU1NwaW5uZXJWYXJzKTtcblxudmFyIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCA9IGZ1bmN0aW9uIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCgpIHtcbiAgcmV0dXJuIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbc2VsZWN0b3JdLFxuICAgIGZuczogZm5zLFxuICAgIHZhcnM6IGlPU1NwaW5uZXJWYXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBsYXlvdXQsIGlPU1NwaW5uZXJWYXJzIGFzIHZhcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbG9yLCBzZWwsIGNyZWF0ZUxheW91dCwgcmdiYSwgc3R5bGVyIH0gZnJvbSAncG9seXRoZW5lLWNvcmUtY3NzJztcbmltcG9ydCB7IHZhcnMgfSBmcm9tICdwb2x5dGhlbmUtdGhlbWUnO1xuXG52YXIgbGlzdFRpbGVDbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtbGlzdC10aWxlXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGNvbnRlbnQ6IFwicGUtbGlzdC10aWxlX19jb250ZW50XCIsXG4gIGhpZ2hTdWJ0aXRsZTogXCJwZS1saXN0LXRpbGVfX2hpZ2gtc3VidGl0bGVcIixcbiAgcHJpbWFyeTogXCJwZS1saXN0LXRpbGVfX3ByaW1hcnlcIixcbiAgc2Vjb25kYXJ5OiBcInBlLWxpc3QtdGlsZV9fc2Vjb25kYXJ5XCIsXG4gIHN1YnRpdGxlOiBcInBlLWxpc3QtdGlsZV9fc3VidGl0bGVcIixcbiAgdGl0bGU6IFwicGUtbGlzdC10aWxlX190aXRsZVwiLFxuICBjb250ZW50RnJvbnQ6IFwicGUtbGlzdC10aWxlX19jb250ZW50LWZyb250XCIsXG4gIC8vIHN0YXRlcyAgXG4gIGNvbXBhY3Q6IFwicGUtbGlzdC10aWxlLS1jb21wYWN0XCIsXG4gIGNvbXBhY3RGcm9udDogXCJwZS1saXN0LXRpbGUtLWNvbXBhY3QtZnJvbnRcIixcbiAgZGlzYWJsZWQ6IFwicGUtbGlzdC10aWxlLS1kaXNhYmxlZFwiLFxuICBoYXNGcm9udDogXCJwZS1saXN0LXRpbGUtLWZyb250XCIsXG4gIGhhc0hpZ2hTdWJ0aXRsZTogXCJwZS1saXN0LXRpbGUtLWhpZ2gtc3VidGl0bGVcIixcbiAgaGFzU3VidGl0bGU6IFwicGUtbGlzdC10aWxlLS1zdWJ0aXRsZVwiLFxuICBoZWFkZXI6IFwicGUtbGlzdC10aWxlLS1oZWFkZXJcIixcbiAgaG92ZXJhYmxlOiBcInBlLWxpc3QtdGlsZS0taG92ZXJhYmxlXCIsXG4gIGluc2V0SDogXCJwZS1saXN0LXRpbGUtLWluc2V0LWhcIixcbiAgaW5zZXRWOiBcInBlLWxpc3QtdGlsZS0taW5zZXQtdlwiLFxuICBzZWxlY3RhYmxlOiBcInBlLWxpc3QtdGlsZS0tc2VsZWN0YWJsZVwiLFxuICBzZWxlY3RlZDogXCJwZS1saXN0LXRpbGUtLXNlbGVjdGVkXCIsXG4gIHJvdW5kZWQ6IFwicGUtbGlzdC10aWxlLS1yb3VuZGVkXCIsXG4gIGhpZ2hsaWdodDogXCJwZS1saXN0LXRpbGUtLWhpZ2hsaWdodFwiLFxuICBzdGlja3k6IFwicGUtbGlzdC10aWxlLS1zdGlja3lcIixcbiAgbmF2aWdhdGlvbjogXCJwZS1saXN0LXRpbGUtLW5hdmlnYXRpb25cIlxufTtcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1saXN0XCIsXG4gIC8vIHN0YXRlc1xuICBib3JkZXI6IFwicGUtbGlzdC0tYm9yZGVyXCIsXG4gIGNvbXBhY3Q6IFwicGUtbGlzdC0tY29tcGFjdFwiLFxuICBoYXNIZWFkZXI6IFwicGUtbGlzdC0taGVhZGVyXCIsXG4gIGluZGVudGVkQm9yZGVyOiBcInBlLWxpc3QtLWluZGVudGVkLWJvcmRlclwiLFxuICBwYWRkaW5nOiBcInBlLWxpc3QtLXBhZGRpbmdcIixcbiAgcGFkZGluZ1RvcDogXCJwZS1saXN0LS1wYWRkaW5nLXRvcFwiLFxuICBwYWRkaW5nQm90dG9tOiBcInBlLWxpc3QtLXBhZGRpbmctYm90dG9tXCIsXG4gIC8vIGxvb2t1cFxuICBoZWFkZXI6IGxpc3RUaWxlQ2xhc3Nlcy5oZWFkZXJcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgZ2VuZXJhbEZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxufTtcblxudmFyIHRpbnRGbnMgPSBmdW5jdGlvbiB0aW50Rm5zKHRpbnQpIHtcbiAgdmFyIF9yZWY7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfYmFja2dyb3VuZFwiXVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2JvcmRlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICB2YXIgX3NlbDtcblxuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCAoX3NlbCA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3NlbCwgXCImICsgLnBlLWxpc3RcIiwge1xuICAgICAgYm9yZGVyVG9wQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ib3JkZXJcIl1cbiAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9zZWwsIFwiLnBlLWxpc3QtLWJvcmRlclwiLCB7XG4gICAgICBcIiAucGUtbGlzdC10aWxlXCI6IHtcbiAgICAgICAgXCI6bm90KDpsYXN0LWNoaWxkKVwiOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ib3JkZXJcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX3NlbCwgXCIucGUtbGlzdC0taW5kZW50ZWQtYm9yZGVyXCIsIHtcbiAgICAgIFwiIC5wZS1saXN0LXRpbGVcIjoge1xuICAgICAgICBcIiAucGUtbGlzdC10aWxlX19jb250ZW50Om5vdCgucGUtbGlzdC10aWxlX19jb250ZW50LWZyb250KVwiOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ib3JkZXJcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLCBfc2VsKSldO1xuICB9KSwgX3JlZjtcbn07XG5cbnZhciBsaWdodFRpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImxpZ2h0XCIpKTtcblxudmFyIGRhcmtUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJkYXJrXCIpKTtcblxudmFyIGNvbG9yID0gY3JlYXRlQ29sb3Ioe1xuICB2YXJGbnM6IHtcbiAgICBsaWdodFRpbnRGbnM6IGxpZ2h0VGludEZucyxcbiAgICBkYXJrVGludEZuczogZGFya1RpbnRGbnNcbiAgfVxufSk7XG5cbi8vIEB0cy1jaGVja1xuXG52YXIgYm9yZGVyU3R5bGUgPSBmdW5jdGlvbiBib3JkZXJTdHlsZSh2YXJzKSB7XG4gIHJldHVybiB7XG4gICAgYm9yZGVyU3R5bGU6IFwibm9uZSBub25lIHNvbGlkIG5vbmVcIixcbiAgICBib3JkZXJXaWR0aDogdmFycy5ib3JkZXJfd2lkdGhfYm9yZGVyZWQgKyBcInB4XCJcbiAgfTtcbn07XG5cbnZhciB2YXJGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBmbGV4R3JvdzogMSxcbiAgICAgIFwiLnBlLWxpc3QtLWhlYWRlclwiOiB7XG4gICAgICAgIHBhZGRpbmdUb3A6IDBcbiAgICAgIH0sXG4gICAgICBcIi5wZS1saXN0LS1pbmRlbnRlZC1ib3JkZXJcIjoge1xuICAgICAgICBib3JkZXJUb3A6IFwibm9uZVwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBwYWRkaW5nOiBmdW5jdGlvbiBwYWRkaW5nKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWxpc3QtLXBhZGRpbmdcIjoge1xuICAgICAgICBwYWRkaW5nOiB2YXJzLnBhZGRpbmcgKyBcInB4IDBcIlxuICAgICAgfSxcbiAgICAgIFwiLnBlLWxpc3QtLXBhZGRpbmctdG9wXCI6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogdmFycy5wYWRkaW5nICsgXCJweFwiXG4gICAgICB9LFxuICAgICAgXCIucGUtbGlzdC0tcGFkZGluZy1ib3R0b21cIjoge1xuICAgICAgICBwYWRkaW5nQm90dG9tOiB2YXJzLnBhZGRpbmcgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIHBhZGRpbmdfY29tcGFjdDogZnVuY3Rpb24gcGFkZGluZ19jb21wYWN0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWxpc3QtLWNvbXBhY3RcIjoge1xuICAgICAgICBwYWRkaW5nOiB2YXJzLnBhZGRpbmdfY29tcGFjdCArIFwicHggMFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBib3JkZXJfd2lkdGhfc3RhY2tlZDogZnVuY3Rpb24gYm9yZGVyX3dpZHRoX3N0YWNrZWQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCImICsgJlwiOiB7XG4gICAgICAgIGJvcmRlclN0eWxlOiBcInNvbGlkIG5vbmUgbm9uZSBub25lXCIsXG4gICAgICAgIGJvcmRlcldpZHRoOiB2YXJzLmJvcmRlcl93aWR0aF9zdGFja2VkICsgXCJweFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBib3JkZXJfd2lkdGhfYm9yZGVyZWQ6IGZ1bmN0aW9uIGJvcmRlcl93aWR0aF9ib3JkZXJlZChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1saXN0LS1ib3JkZXJcIjoge1xuICAgICAgICBcIiAucGUtbGlzdC10aWxlXCI6IHtcbiAgICAgICAgICBcIjpub3QoLnBlLWxpc3QtdGlsZS0taGVhZGVyKTpub3QoOmxhc3QtY2hpbGQpXCI6IHtcbiAgICAgICAgICAgIFwiJlwiOiBib3JkZXJTdHlsZSh2YXJzKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiLnBlLWxpc3QtLWluZGVudGVkLWJvcmRlclwiOiB7XG4gICAgICAgIFwiIC5wZS1saXN0LXRpbGVcIjoge1xuICAgICAgICAgIFwiOm5vdCgucGUtbGlzdC10aWxlLS1oZWFkZXIpOm5vdCg6bGFzdC1jaGlsZClcIjoge1xuICAgICAgICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fY29udGVudDpub3QoLnBlLWxpc3QtdGlsZV9fY29udGVudC1mcm9udClcIjogYm9yZGVyU3R5bGUodmFycylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgdmFyRm5zOiB2YXJGbnNcbn0pO1xuXG4vLyBAdHMtY2hlY2tcbi8qKlxuICogQHR5cGUge0xpc3RWYXJzfSBsaXN0VmFyc1xuICovXG5cbnZhciBsaXN0VmFycyA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICBib3JkZXJfd2lkdGhfYm9yZGVyZWQ6IDEsXG4gIGJvcmRlcl93aWR0aF9zdGFja2VkOiAxLFxuICBwYWRkaW5nOiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQsXG4gIC8vIHZlcnRpY2FsIHBhZGRpbmdcbiAgcGFkZGluZ19jb21wYWN0OiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQgKiAzIC8gNCxcbiAgY29sb3JfbGlnaHRfYm9yZGVyOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF9ib3JkZXJfbGlnaHQpLFxuICBjb2xvcl9kYXJrX2JvcmRlcjogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX2JvcmRlcl9saWdodCkgLy8gYmFja2dyb3VuZCBjb2xvciBtYXkgYmUgc2V0IGluIHRoZW1lOyBkaXNhYmxlZCBieSBkZWZhdWx0XG4gIC8vIGNvbG9yX2xpZ2h0X2JhY2tncm91bmQ6IFwiaW5oZXJpdFwiLFxuICAvLyBjb2xvcl9kYXJrX2JhY2tncm91bmQ6ICBcImluaGVyaXRcIlxuXG59O1xuXG4vLyBAdHMtY2hlY2tcbnZhciBmbnMgPSBbbGF5b3V0LCBjb2xvcl07XG52YXIgc2VsZWN0b3IgPSBcIi5cIi5jb25jYXQoY2xhc3Nlcy5jb21wb25lbnQpO1xudmFyIGFkZFN0eWxlID0gc3R5bGVyLmNyZWF0ZUFkZFN0eWxlKHNlbGVjdG9yLCBmbnMsIGxpc3RWYXJzKTtcbnZhciBnZXRTdHlsZSA9IHN0eWxlci5jcmVhdGVHZXRTdHlsZShzZWxlY3RvciwgZm5zLCBsaXN0VmFycyk7XG5cbnZhciBhZGRHZW5lcmFsU3R5bGVUb0hlYWQgPSBmdW5jdGlvbiBhZGRHZW5lcmFsU3R5bGVUb0hlYWQoKSB7XG4gIHJldHVybiBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW3NlbGVjdG9yXSxcbiAgICBmbnM6IGZucyxcbiAgICB2YXJzOiBsaXN0VmFyc1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IGFkZEdlbmVyYWxTdHlsZVRvSGVhZCwgYWRkU3R5bGUsIGNvbG9yLCBnZXRTdHlsZSwgbGF5b3V0LCBsaXN0VmFycyBhcyB2YXJzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb2xvciwgc2VsLCBjcmVhdGVMYXlvdXQsIGZsZXgsIG1peGluLCBzZWxlY3RvclJUTCwgcmdiYSwgc3R5bGVyIH0gZnJvbSAncG9seXRoZW5lLWNvcmUtY3NzJztcbmltcG9ydCB7IHZhcnMgfSBmcm9tICdwb2x5dGhlbmUtdGhlbWUnO1xuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLWxpc3QtdGlsZVwiLFxuICAvLyBlbGVtZW50c1xuICBjb250ZW50OiBcInBlLWxpc3QtdGlsZV9fY29udGVudFwiLFxuICBoaWdoU3VidGl0bGU6IFwicGUtbGlzdC10aWxlX19oaWdoLXN1YnRpdGxlXCIsXG4gIHByaW1hcnk6IFwicGUtbGlzdC10aWxlX19wcmltYXJ5XCIsXG4gIHNlY29uZGFyeTogXCJwZS1saXN0LXRpbGVfX3NlY29uZGFyeVwiLFxuICBzdWJ0aXRsZTogXCJwZS1saXN0LXRpbGVfX3N1YnRpdGxlXCIsXG4gIHRpdGxlOiBcInBlLWxpc3QtdGlsZV9fdGl0bGVcIixcbiAgY29udGVudEZyb250OiBcInBlLWxpc3QtdGlsZV9fY29udGVudC1mcm9udFwiLFxuICAvLyBzdGF0ZXMgIFxuICBjb21wYWN0OiBcInBlLWxpc3QtdGlsZS0tY29tcGFjdFwiLFxuICBjb21wYWN0RnJvbnQ6IFwicGUtbGlzdC10aWxlLS1jb21wYWN0LWZyb250XCIsXG4gIGRpc2FibGVkOiBcInBlLWxpc3QtdGlsZS0tZGlzYWJsZWRcIixcbiAgaGFzRnJvbnQ6IFwicGUtbGlzdC10aWxlLS1mcm9udFwiLFxuICBoYXNIaWdoU3VidGl0bGU6IFwicGUtbGlzdC10aWxlLS1oaWdoLXN1YnRpdGxlXCIsXG4gIGhhc1N1YnRpdGxlOiBcInBlLWxpc3QtdGlsZS0tc3VidGl0bGVcIixcbiAgaGVhZGVyOiBcInBlLWxpc3QtdGlsZS0taGVhZGVyXCIsXG4gIGhvdmVyYWJsZTogXCJwZS1saXN0LXRpbGUtLWhvdmVyYWJsZVwiLFxuICBpbnNldEg6IFwicGUtbGlzdC10aWxlLS1pbnNldC1oXCIsXG4gIGluc2V0VjogXCJwZS1saXN0LXRpbGUtLWluc2V0LXZcIixcbiAgc2VsZWN0YWJsZTogXCJwZS1saXN0LXRpbGUtLXNlbGVjdGFibGVcIixcbiAgc2VsZWN0ZWQ6IFwicGUtbGlzdC10aWxlLS1zZWxlY3RlZFwiLFxuICByb3VuZGVkOiBcInBlLWxpc3QtdGlsZS0tcm91bmRlZFwiLFxuICBoaWdobGlnaHQ6IFwicGUtbGlzdC10aWxlLS1oaWdobGlnaHRcIixcbiAgc3RpY2t5OiBcInBlLWxpc3QtdGlsZS0tc3RpY2t5XCIsXG4gIG5hdmlnYXRpb246IFwicGUtbGlzdC10aWxlLS1uYXZpZ2F0aW9uXCJcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbnZhciBfc2VsZWN0ZWQgPSBmdW5jdGlvbiBzZWxlY3RlZChzZWxlY3RvciwgdmFycywgdGludCkge1xuICB2YXIgc2VsZWN0ZWRUZXh0Q29sb3IgPSB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfc2VsZWN0ZWRfdGV4dFwiXTtcbiAgcmV0dXJuIHNlbChzZWxlY3RvciwgX29iamVjdFNwcmVhZDIoe30sIHNlbGVjdGVkVGV4dENvbG9yICE9PSBcImluaGVyaXRcIiA/IHtcbiAgICBcIiYsIC5wZS1saXN0LXRpbGVfX3RpdGxlLCAucGUtbGlzdC10aWxlX19jb250ZW50LCAucGUtbGlzdC10aWxlX19zdWJ0aXRsZVwiOiB7XG4gICAgICBjb2xvcjogc2VsZWN0ZWRUZXh0Q29sb3JcbiAgICB9XG4gIH0gOiB1bmRlZmluZWQsIHtcbiAgICBcIiAucGUtbGlzdC10aWxlX19wcmltYXJ5LCBwZS1saXN0LXRpbGVfX3NlY29uZGFyeVwiOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9zZWxlY3RlZF9iYWNrZ3JvdW5kXCJdXG4gICAgfVxuICB9KSk7XG59O1xuXG52YXIgZ2VuZXJhbEZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWxpc3QtdGlsZS0taGVhZGVyXCI6IHtcbiAgICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fcHJpbWFyeSwgcGUtbGlzdC10aWxlX19zZWNvbmRhcnlcIjoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJpbmhlcml0XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiOm5vdCgucGUtbGlzdC10aWxlLS1kaXNhYmxlZCk6bm90KC5wZS1saXN0LXRpbGUtLXNlbGVjdGVkKVwiOiB7XG4gICAgICAgIFwiIGEucGUtbGlzdC10aWxlX19wcmltYXJ5OmZvY3VzLCBhLnBlLWxpc3QtdGlsZV9fc2Vjb25kYXJ5OmZvY3VzXCI6IHtcbiAgICAgICAgICBvdXRsaW5lOiBcIm5vbmVcIixcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiaW5oZXJpdFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIiYucGUtbGlzdC10aWxlLS1zdGlja3lcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiaW5oZXJpdFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9XG59O1xuXG52YXIgdGludEZucyA9IGZ1bmN0aW9uIHRpbnRGbnModGludCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90aXRsZVwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90aXRsZVwiXVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2JhY2tncm91bmRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2JhY2tncm91bmRcIl0sXG4gICAgICBcIiYucGUtbGlzdC10aWxlLS1zdGlja3lcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZ3JvdW5kXCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfbGlzdF9oZWFkZXJcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWxpc3QtdGlsZS0taGVhZGVyXCI6IHtcbiAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9saXN0X2hlYWRlclwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3N1YnRpdGxlXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbGlzdC10aWxlX19zdWJ0aXRsZVwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfc3VidGl0bGVcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9zZWNvbmRhcnlcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1saXN0LXRpbGVfX3NlY29uZGFyeVwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfc2Vjb25kYXJ5XCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfZnJvbnRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1saXN0LXRpbGVfX2NvbnRlbnQtZnJvbnRcIjoge1xuICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2Zyb250XCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfdGV4dF9kaXNhYmxlZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbGlzdC10aWxlLS1kaXNhYmxlZFwiOiB7XG4gICAgICAgIFwiJiwgLnBlLWxpc3QtdGlsZV9fdGl0bGUsIC5wZS1saXN0LXRpbGVfX2NvbnRlbnQsIC5wZS1saXN0LXRpbGVfX3N1YnRpdGxlXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3RleHRfZGlzYWJsZWRcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2hpZ2hsaWdodF9iYWNrZ3JvdW5kXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1saXN0LXRpbGUtLWhpZ2hsaWdodDpub3QoLnBlLWxpc3QtdGlsZS0tc2VsZWN0ZWQpXCI6IHtcbiAgICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fcHJpbWFyeSwgcGUtbGlzdC10aWxlX19zZWNvbmRhcnlcIjoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2hpZ2hsaWdodF9iYWNrZ3JvdW5kXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9mb2N1c19iYWNrZ3JvdW5kXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIjpub3QoLnBlLWxpc3QtdGlsZS0tZGlzYWJsZWQpOm5vdCgucGUtbGlzdC10aWxlLS1zZWxlY3RlZClcIjoge1xuICAgICAgICBcIiBhLnBlLWxpc3QtdGlsZV9fcHJpbWFyeTpmb2N1cywgYS5wZS1saXN0LXRpbGVfX3NlY29uZGFyeTpmb2N1c1wiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfZm9jdXNfYmFja2dyb3VuZFwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfc2VsZWN0ZWRfdGV4dFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbGlzdC10aWxlLS1zZWxlY3RlZFwiOiBfc2VsZWN0ZWQoc2VsZWN0b3IsIHZhcnMsIHRpbnQpXG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfc2VsZWN0ZWRfYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbGlzdC10aWxlLS1zZWxlY3RlZFwiOiBfc2VsZWN0ZWQoc2VsZWN0b3IsIHZhcnMsIHRpbnQpXG4gICAgfSldO1xuICB9KSwgX3JlZjtcbn07XG5cbnZhciBob3ZlclRpbnRGbnMgPSBmdW5jdGlvbiBob3ZlclRpbnRGbnModGludCkge1xuICB2YXIgX3JlZjI7XG5cbiAgcmV0dXJuIF9yZWYyID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmMiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9ob3ZlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbGlzdC10aWxlLS1ob3ZlcmFibGU6bm90KC5wZS1saXN0LXRpbGUtLXNlbGVjdGVkKVwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaG92ZXJcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZjIsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfaG92ZXJfYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbGlzdC10aWxlLS1ob3ZlcmFibGU6bm90KC5wZS1saXN0LXRpbGUtLXNlbGVjdGVkKVwiOiB7XG4gICAgICAgIFwiIC5wZS1saXN0LXRpbGVfX3ByaW1hcnksIC5wZS1saXN0LXRpbGVfX3NlY29uZGFyeVwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaG92ZXJfYmFja2dyb3VuZFwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYyLCBcImNvbG9yX1wiICsgdGludCArIFwiX2hvdmVyX2Zyb250XCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1saXN0LXRpbGUtLWhvdmVyYWJsZTpub3QoLnBlLWxpc3QtdGlsZS0tc2VsZWN0ZWQpXCI6IHtcbiAgICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fcHJpbWFyeSAucGUtbGlzdC10aWxlX19jb250ZW50LWZyb250XCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2hvdmVyX2Zyb250XCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfcmVmMjtcbn07XG5cbnZhciB0aGVtZUZucyA9IGZ1bmN0aW9uIHRoZW1lRm5zKHRpbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzZWxlY3RlZDogZnVuY3Rpb24gc2VsZWN0ZWQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICAgIHJldHVybiB2YXJzLnNlbGVjdGVkICYmIF9zZWxlY3RlZChzZWxlY3RvciwgdmFycywgdGludCk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGxpZ2h0VGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwibGlnaHRcIiksIHRoZW1lRm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImRhcmtcIiksIHRoZW1lRm5zKFwiZGFya1wiKSk7XG5cbnZhciBsaWdodFRpbnRIb3ZlckZucyA9IGhvdmVyVGludEZucyhcImxpZ2h0XCIpO1xudmFyIGRhcmtUaW50SG92ZXJGbnMgPSBob3ZlclRpbnRGbnMoXCJkYXJrXCIpO1xudmFyIGNvbG9yID0gY3JlYXRlQ29sb3Ioe1xuICB2YXJGbnM6IHtcbiAgICBsaWdodFRpbnRGbnM6IGxpZ2h0VGludEZucyxcbiAgICBkYXJrVGludEZuczogZGFya1RpbnRGbnMsXG4gICAgbGlnaHRUaW50SG92ZXJGbnM6IGxpZ2h0VGludEhvdmVyRm5zLFxuICAgIGRhcmtUaW50SG92ZXJGbnM6IGRhcmtUaW50SG92ZXJGbnNcbiAgfVxufSk7XG5cbnZhciBhbGlnblNpZGUgPSBmdW5jdGlvbiBhbGlnblNpZGUoaXNSVEwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YXJzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIFwiIC5wZS1saXN0LXRpbGVfX2NvbnRlbnQtZnJvbnQgKyAucGUtbGlzdC10aWxlX19jb250ZW50XCI6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXNSVEwgPyBcInBhZGRpbmdSaWdodFwiIDogXCJwYWRkaW5nTGVmdFwiLCAwKVxuICAgIH07XG4gIH07XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5cblxudmFyIGFsaWduTGVmdCA9IGFsaWduU2lkZShmYWxzZSk7XG52YXIgYWxpZ25SaWdodCA9IGFsaWduU2lkZSh0cnVlKTtcbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGxlZnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBbcmlnaHRdXG4gKi9cblxudmFyIHBhZGRpbmdIID0gZnVuY3Rpb24gcGFkZGluZ0gobGVmdCkge1xuICB2YXIgcmlnaHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGxlZnQ7XG4gIHJldHVybiB7XG4gICAgXCJwYWRkaW5nLWxlZnRcIjogbGVmdCArIFwicHhcIixcbiAgICBcInBhZGRpbmctcmlnaHRcIjogcmlnaHQgKyBcInB4XCJcbiAgfTtcbn07XG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0b3AgXG4gKiBAcGFyYW0ge251bWJlcn0gW2JvdHRvbV0gXG4gKi9cblxuXG52YXIgcGFkZGluZ1YgPSBmdW5jdGlvbiBwYWRkaW5nVih0b3ApIHtcbiAgdmFyIGJvdHRvbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdG9wO1xuICByZXR1cm4ge1xuICAgIFwicGFkZGluZy10b3BcIjogdG9wICsgXCJweFwiLFxuICAgIFwicGFkZGluZy1ib3R0b21cIjogYm90dG9tICsgXCJweFwiXG4gIH07XG59O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgXG4gKiBAcGFyYW0ge0xpc3RUaWxlVmFyc30gdmFycyBcbiAqL1xuXG5cbnZhciB0aXRsZV9saW5lX2NvdW50X3NpbmdsZV9saW5lX2hlaWdodCA9IGZ1bmN0aW9uIHRpdGxlX2xpbmVfY291bnRfc2luZ2xlX2xpbmVfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBsaW5lSGVpZ2h0OiB2YXJzLnNpbmdsZV9saW5lX2hlaWdodCArIFwicHhcIixcbiAgICBcIi5wZS1saXN0LXRpbGUtLW5hdmlnYXRpb25cIjoge1xuICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fdGl0bGVcIjoge1xuICAgICAgICBtaW5IZWlnaHQ6IHZhcnMuc2luZ2xlX2xpbmVfaGVpZ2h0ICsgXCJweFwiXG4gICAgICB9XG4gICAgfSxcbiAgICBcIiAucGUtbGlzdC10aWxlX190aXRsZVwiOiBbbWl4aW4uZWxsaXBzaXModmFycy50aXRsZV9saW5lX2NvdW50LCB2YXJzLnNpbmdsZV9saW5lX2hlaWdodCwgXCJweFwiKV1cbiAgfSk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgXG4gKiBAcGFyYW0ge0xpc3RUaWxlVmFyc30gdmFycyBcbiAqL1xuXG5cbnZhciB1blNlbGVjdGFibGUgPSBmdW5jdGlvbiB1blNlbGVjdGFibGUoc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuICgvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzIFxuICAgIHNlbChzZWxlY3Rvciwge1xuICAgICAgXCImLCBhXCI6IHtcbiAgICAgICAgcG9pbnRlckV2ZW50czogXCJub25lXCJcbiAgICAgIH1cbiAgICB9KVxuICApO1xufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFxuICogQHBhcmFtIHtMaXN0VGlsZVZhcnN9IHZhcnMgXG4gKi9cblxuXG52YXIgX2luc2V0ID0gZnVuY3Rpb24gaW5zZXQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIGluc2V0SChzZWxlY3RvciwgdmFycyksIGluc2V0VihzZWxlY3RvciwgdmFycyk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3IgXG4gKiBAcGFyYW0ge0xpc3RUaWxlVmFyc30gdmFycyBcbiAqL1xuXG5cbnZhciBpbnNldEggPSBmdW5jdGlvbiBpbnNldEgoc2VsZWN0b3IsIHZhcnMpIHtcbiAgdmFyIG1hcmdpbiA9IHZhcnMuaW5zZXRfaF9zaXplO1xuICByZXR1cm4gc2VsKHNlbGVjdG9yLCB7XG4gICAgbWFyZ2luTGVmdDogbWFyZ2luICsgXCJweFwiLFxuICAgIG1hcmdpblJpZ2h0OiBtYXJnaW4gKyBcInB4XCIsXG4gICAgXCIgLnBlLWxpc3QtdGlsZV9fY29udGVudFwiOiB7XG4gICAgICBtYXJnaW5MZWZ0OiAtbWFyZ2luICsgXCJweFwiLFxuICAgICAgbWFyZ2luUmlnaHQ6IC1tYXJnaW4gKyBcInB4XCJcbiAgICB9XG4gIH0pO1xufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFxuICogQHBhcmFtIHtMaXN0VGlsZVZhcnN9IHZhcnMgXG4gKi9cblxuXG52YXIgaW5zZXRWID0gZnVuY3Rpb24gaW5zZXRWKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHZhciBtYXJnaW4gPSB2YXJzLmluc2V0X3Zfc2l6ZTtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIG1hcmdpblRvcDogbWFyZ2luICsgXCJweFwiLFxuICAgIG1hcmdpbkJvdHRvbTogbWFyZ2luICsgXCJweFwiXG4gIH0pO1xufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFxuICogQHBhcmFtIHtMaXN0VGlsZVZhcnN9IHZhcnMgXG4gKi9cblxuXG52YXIgX3JvdW5kZWQgPSBmdW5jdGlvbiByb3VuZGVkKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiYsIC5wZS1saXN0LXRpbGVfX3ByaW1hcnlcIjoge1xuICAgICAgYm9yZGVyUmFkaXVzOiB2YXJzLnJvdW5kZWRfYm9yZGVyX3JhZGl1cyArIFwicHhcIlxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgdmFyRm5zID0ge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIFxuICAgKiBAcGFyYW0ge0xpc3RUaWxlVmFyc30gdmFycyBcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbYWxpZ25MZWZ0KHZhcnMpLCBmbGV4LmxheW91dCwge1xuICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgIFwiLnBlLWxpc3QtdGlsZS0tbmF2aWdhdGlvblwiOiB7XG4gICAgICAgIFwiIC5wZS1saXN0LXRpbGVfX3RpdGxlXCI6IHtcbiAgICAgICAgICB3aGl0ZVNwYWNlOiBcInByZS13cmFwXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiLnBlLWxpc3QtdGlsZS0tc3RpY2t5XCI6IG1peGluLnN0aWNreSgyKSxcbiAgICAgIFwiLnBlLWxpc3QtdGlsZS0taW5zZXQtaFwiOiBpbnNldEgoc2VsZWN0b3IsIHZhcnMpLFxuICAgICAgXCIucGUtbGlzdC10aWxlLS1pbnNldC12XCI6IGluc2V0VihzZWxlY3RvciwgdmFycyksXG4gICAgICBcIiAucGUtbGlzdC10aWxlX19wcmltYXJ5XCI6IHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fcHJpbWFyeSwgLnBlLWxpc3QtdGlsZV9fc2Vjb25kYXJ5XCI6IFtmbGV4LmxheW91dEhvcml6b250YWwsIG1peGluLmRlZmF1bHRUcmFuc2l0aW9uKFwiYmFja2dyb3VuZFwiLCBcIi4yMDBzXCIpLCB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uOiBcIm5vbmVcIixcbiAgICAgICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgICBib3JkZXI6IFwibm9uZVwiXG4gICAgICB9XSxcbiAgICAgIFwiOm5vdCgucGUtbGlzdC10aWxlLS1oZWFkZXIpIC5wZS1saXN0LXRpbGVfX3ByaW1hcnlcIjogW2ZsZXguZmxleCgpLCB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIFwiIC5wZS1saXN0LXRpbGVfX2NvbnRlbnQ6bm90KC5wZS1saXN0LXRpbGVfX2NvbnRlbnQtZnJvbnQpXCI6IFtmbGV4LmZsZXgoKV1cbiAgICAgIH1dLFxuICAgICAgXCI6bm90KC5wZS1saXN0LXRpbGUtLWRpc2FibGVkKVwiOiB7XG4gICAgICAgIG91dGxpbmU6IFwibm9uZVwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fc2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgdGV4dEFsaWduOiBcInJpZ2h0XCIsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtbGlzdC10aWxlX19jb250ZW50XCI6IFtmbGV4LmxheW91dFZlcnRpY2FsLCBmbGV4LnNlbGZDZW50ZXIsIHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBcIi5wZS1saXN0LXRpbGVfX2NvbnRlbnQtZnJvbnRcIjoge1xuICAgICAgICAgIGZsZXhTaHJpbms6IDBcbiAgICAgICAgfVxuICAgICAgfV0sXG4gICAgICBcIiAucGUtbGlzdC10aWxlX190aXRsZVwiOiB7XG4gICAgICAgIHdoaXRlU3BhY2U6IFwibm9ybWFsXCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtbGlzdC10aWxlX19zdWJ0aXRsZVwiOiBbbWl4aW4uZWxsaXBzaXModmFycy5zdWJ0aXRsZV9saW5lX2NvdW50LCB2YXJzLmxpbmVfaGVpZ2h0X3N1YnRpdGxlLCBcInB4XCIpLCB7XG4gICAgICAgIGZvbnRTaXplOiB2YXJzLmZvbnRfc2l6ZV9zdWJ0aXRsZSArIFwicHhcIixcbiAgICAgICAgZm9udFdlaWdodDogdmFycy5mb250X3dlaWdodF9zdWJ0aXRsZSxcbiAgICAgICAgbGluZUhlaWdodDogdmFycy5saW5lX2hlaWdodF9zdWJ0aXRsZSArIFwicHhcIixcbiAgICAgICAgXCIucGUtbGlzdC10aWxlX19oaWdoLXN1YnRpdGxlXCI6IFttaXhpbi5lbGxpcHNpcyh2YXJzLmhpZ2hfc3VidGl0bGVfbGluZV9jb3VudCwgdmFycy5saW5lX2hlaWdodF9zdWJ0aXRsZSwgXCJweFwiKSwge1xuICAgICAgICAgIHdoaXRlU3BhY2U6IFwibm9ybWFsXCJcbiAgICAgICAgfV1cbiAgICAgIH1dLFxuICAgICAgXCIucGUtbGlzdC10aWxlLS1zZWxlY3RlZCwgJi5wZS1saXN0LXRpbGUtLWRpc2FibGVkXCI6IHVuU2VsZWN0YWJsZShzZWxlY3RvciksXG4gICAgICBcIi5wZS1saXN0LXRpbGUtLXN1YnRpdGxlXCI6IHtcbiAgICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fY29udGVudFwiOiB7XG4gICAgICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fdGl0bGVcIjoge1xuICAgICAgICAgICAgcGFkZGluZzogMFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiLnBlLWxpc3QtdGlsZS0taGlnaC1zdWJ0aXRsZVwiOiB7XG4gICAgICAgIFwiIC5wZS1saXN0LXRpbGUtLWhpZ2gtc3VidGl0bGUgLnBlLWxpc3QtdGlsZV9fc2Vjb25kYXJ5XCI6IFtmbGV4LmxheW91dEhvcml6b250YWwsIGZsZXgubGF5b3V0U3RhcnRdLFxuICAgICAgICBcIiAucGUtbGlzdC10aWxlX19jb250ZW50XCI6IFtmbGV4LnNlbGZTdGFydCwge1xuICAgICAgICAgIFwiIC5wZS1saXN0LXRpbGVfX3RpdGxlXCI6IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDBcbiAgICAgICAgICB9XG4gICAgICAgIH1dXG4gICAgICB9LFxuICAgICAgLy8gTGlzdCBoZWFkZXJcbiAgICAgIFwiLnBlLWxpc3QtdGlsZS0taGVhZGVyXCI6IHtcbiAgICAgICAgcG9pbnRlckV2ZW50czogXCJub25lXCIsXG4gICAgICAgIFwiIC5wZS1saXN0LXRpbGVfX2NvbnRlbnRcIjoge1xuICAgICAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICAgICAgcGFkZGluZ0JvdHRvbTogMFxuICAgICAgICB9LFxuICAgICAgICBcIiAucGUtbGlzdC10aWxlX190aXRsZVwiOiB7XG4gICAgICAgICAgcGFkZGluZzogMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gRmlyZWZveCBvbmx5XG4gICAgICBcIkBzdXBwb3J0cyAoLW1vei1hcHBlYXJhbmNlOm5vbmUpIGFuZCAoZGlzcGxheTpjb250ZW50cylcIjoge1xuICAgICAgICBcIiAucGUtbGlzdC10aWxlX19wcmltYXJ5LCAucGUtbGlzdC10aWxlX19jb250ZW50XCI6IHtcbiAgICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gTWVudVxuICAgICAgXCIucGUtZGlhbG9nIC5wZS1tZW51X19jb250ZW50ICZcIjoge1xuICAgICAgICBcIiAucGUtbGlzdC10aWxlX19jb250ZW50XCI6IHtcbiAgICAgICAgICBwYWRkaW5nTGVmdDogXCIyNHB4XCIsXG4gICAgICAgICAgcGFkZGluZ1JpZ2h0OiBcIjI0cHhcIlxuICAgICAgICB9LFxuICAgICAgICBcIiAucGUtbGlzdC10aWxlX19jb250ZW50LWZyb250XCI6IHtcbiAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDAsXG4gICAgICAgICAgd2lkdGg6IFwiNjRweFwiLFxuICAgICAgICAgIG1hcmdpblJpZ2h0OiBcIi03cHhcIlxuICAgICAgICB9LFxuICAgICAgICBcIiAucGUtbGlzdC10aWxlX190aXRsZVwiOiBtaXhpbi5lbGxpcHNpcyhcIm5vbmVcIilcbiAgICAgIH0sXG4gICAgICBcIi5wZS1tZW51X19jb250ZW50ICZcIjoge1xuICAgICAgICBcIjpub3QoLnBlLWxpc3QtdGlsZS0tZGlzYWJsZWQpXCI6IHtcbiAgICAgICAgICBjdXJzb3I6IFwiZGVmYXVsdFwiLFxuICAgICAgICAgIFwiJiwgLnBlLWxpc3QtdGlsZV9fcHJpbWFyeSwgLnBlLWxpc3QtdGlsZV9fc2Vjb25kYXJ5XCI6IHtcbiAgICAgICAgICAgIFwiIC5wZS1saXN0LXRpbGVfX3RpdGxlLCAucGUtbGlzdC10aWxlX19zdWJ0aXRsZVwiOiB7XG4gICAgICAgICAgICAgIHVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuICAgICAgICAgICAgICBcIi1tb3otdXNlci1zZWxlY3RcIjogXCJub25lXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBOb24tdG91Y2hcbiAgICAgIFwiaHRtbC5wZS1uby10b3VjaCAmLnBlLWxpc3QtdGlsZS0taG92ZXJhYmxlLCBcXFxuICAgICAgICBodG1sLnBlLW5vLXRvdWNoICYucGUtbGlzdC10aWxlLS1zZWxlY3RhYmxlXCI6IHtcbiAgICAgICAgXCI6bm90KC5wZS1saXN0LXRpbGUtLWhlYWRlcik6bm90KC5wZS1saXN0LXRpbGUtLWRpc2FibGVkKTpub3QoLnBlLWxpc3QtdGlsZS0tc2VsZWN0ZWQpOmhvdmVyXCI6IHtcbiAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSksIF9kZWZpbmVQcm9wZXJ0eSh7fSwgc2VsZWN0b3JSVEwoc2VsZWN0b3IpLCBhbGlnblJpZ2h0KHZhcnMpKV07XG4gIH0sXG4gIHRpdGxlX2xpbmVfY291bnQ6IGZ1bmN0aW9uIHRpdGxlX2xpbmVfY291bnQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3RpdGxlX2xpbmVfY291bnRfc2luZ2xlX2xpbmVfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIHNpbmdsZV9saW5lX2hlaWdodDogZnVuY3Rpb24gc2luZ2xlX2xpbmVfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFt0aXRsZV9saW5lX2NvdW50X3NpbmdsZV9saW5lX2hlaWdodChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBmb250X3NpemVfdGl0bGU6IGZ1bmN0aW9uIGZvbnRfc2l6ZV90aXRsZShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBmb250U2l6ZTogdmFycy5mb250X3NpemVfdGl0bGUgKyBcInB4XCIsXG4gICAgICBcIiAucGUtbGlzdC10aWxlX19zZWNvbmRhcnlcIjoge1xuICAgICAgICBmb250U2l6ZTogdmFycy5mb250X3NpemVfdGl0bGUgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGZvbnRfd2VpZ2h0X3RpdGxlOiBmdW5jdGlvbiBmb250X3dlaWdodF90aXRsZShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBmb250V2VpZ2h0OiB2YXJzLmZvbnRfd2VpZ2h0X3RpdGxlXG4gICAgfSldO1xuICB9LFxuICBmb250X3NpemVfbmF2aWdhdGlvbl90aXRsZTogZnVuY3Rpb24gZm9udF9zaXplX25hdmlnYXRpb25fdGl0bGUoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbGlzdC10aWxlLS1uYXZpZ2F0aW9uXCI6IHtcbiAgICAgICAgZm9udFNpemU6IHZhcnMuZm9udF9zaXplX25hdmlnYXRpb25fdGl0bGUgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGZvbnRfd2VpZ2h0X25hdmlnYXRpb25fdGl0bGU6IGZ1bmN0aW9uIGZvbnRfd2VpZ2h0X25hdmlnYXRpb25fdGl0bGUoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbGlzdC10aWxlLS1uYXZpZ2F0aW9uXCI6IHtcbiAgICAgICAgZm9udFdlaWdodDogdmFycy5mb250X3dlaWdodF9uYXZpZ2F0aW9uX3RpdGxlXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBwYWRkaW5nOiBmdW5jdGlvbiBwYWRkaW5nKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiOm5vdCgucGUtbGlzdC10aWxlLS1oZWFkZXIpXCI6IHtcbiAgICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fY29udGVudDpub3QoLnBlLWxpc3QtdGlsZV9fY29udGVudC1mcm9udClcIjogW3BhZGRpbmdWKHZhcnMucGFkZGluZywgdmFycy5wYWRkaW5nICsgMSldXG4gICAgICB9LFxuICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fY29udGVudFwiOiB7XG4gICAgICAgIFwiLnBlLWxpc3QtdGlsZV9fY29udGVudC1mcm9udFwiOiBbcGFkZGluZ1YodmFycy5wYWRkaW5nIC0gNSldXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBzaWRlX3BhZGRpbmc6IGZ1bmN0aW9uIHNpZGVfcGFkZGluZyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbGlzdC10aWxlX19jb250ZW50XCI6IFtwYWRkaW5nSCh2YXJzLnNpZGVfcGFkZGluZyldXG4gICAgfSldO1xuICB9LFxuICBpbnNldF9zaXplOiBmdW5jdGlvbiBpbnNldF9zaXplKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWxpc3QtdGlsZS0taW5zZXRcIjogX2luc2V0KHNlbGVjdG9yLCB2YXJzKVxuICAgIH0pXTtcbiAgfSxcbiAgcm91bmRlZF9ib3JkZXJfcmFkaXVzOiBmdW5jdGlvbiByb3VuZGVkX2JvcmRlcl9yYWRpdXMoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbGlzdC10aWxlLS1yb3VuZGVkXCI6IF9yb3VuZGVkKHNlbGVjdG9yLCB2YXJzKVxuICAgIH0pXTtcbiAgfSxcbiAgY29tcGFjdF9mcm9udF9pdGVtX3dpZHRoOiBmdW5jdGlvbiBjb21wYWN0X2Zyb250X2l0ZW1fd2lkdGgoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fY29udGVudC1mcm9udFwiOiB7XG4gICAgICAgIFwiLnBlLWxpc3QtdGlsZS0tY29tcGFjdC1mcm9udFwiOiB7XG4gICAgICAgICAgd2lkdGg6IHZhcnMuY29tcGFjdF9mcm9udF9pdGVtX3dpZHRoICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGZyb250X2l0ZW1fd2lkdGg6IGZ1bmN0aW9uIGZyb250X2l0ZW1fd2lkdGgoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fY29udGVudC1mcm9udFwiOiB7XG4gICAgICAgIFwiOm5vdCgucGUtbGlzdC10aWxlLS1jb21wYWN0LWZyb250KVwiOiB7XG4gICAgICAgICAgd2lkdGg6IHZhcnMuZnJvbnRfaXRlbV93aWR0aCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBmb250X3NpemVfc21hbGw6IGZ1bmN0aW9uIGZvbnRfc2l6ZV9zbWFsbChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbGlzdC10aWxlX19jb250ZW50XCI6IHtcbiAgICAgICAgXCIgc21hbGxcIjoge1xuICAgICAgICAgIGZvbnRTaXplOiB2YXJzLmZvbnRfc2l6ZV9zbWFsbCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBoYXNfaGlnaF9zdWJ0aXRsZV9wYWRkaW5nOiBmdW5jdGlvbiBoYXNfaGlnaF9zdWJ0aXRsZV9wYWRkaW5nKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWxpc3QtdGlsZS0taGlnaC1zdWJ0aXRsZVwiOiB7XG4gICAgICAgIFwiIC5wZS1saXN0LXRpbGVfX2NvbnRlbnRcIjogW3BhZGRpbmdWKHZhcnMuaGFzX2hpZ2hfc3VidGl0bGVfcGFkZGluZywgdmFycy5oYXNfaGlnaF9zdWJ0aXRsZV9wYWRkaW5nICsgMSldXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBoYXNfc3VidGl0bGVfcGFkZGluZzogZnVuY3Rpb24gaGFzX3N1YnRpdGxlX3BhZGRpbmcoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbGlzdC10aWxlLS1zdWJ0aXRsZVwiOiB7XG4gICAgICAgIFwiIC5wZS1saXN0LXRpbGVfX2NvbnRlbnRcIjogW3BhZGRpbmdWKHZhcnMuaGFzX3N1YnRpdGxlX3BhZGRpbmcsIHZhcnMuaGFzX3N1YnRpdGxlX3BhZGRpbmcgKyAxKV1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIHNpbmdsZV9oZWlnaHQ6IGZ1bmN0aW9uIHNpbmdsZV9oZWlnaHQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbGlzdC10aWxlLS1oZWFkZXJcIjoge1xuICAgICAgICBoZWlnaHQ6IHZhcnMuc2luZ2xlX2hlaWdodCArIFwicHhcIixcbiAgICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fdGl0bGVcIjogW21peGluLmVsbGlwc2lzKDEsIHZhcnMuc2luZ2xlX2hlaWdodCwgXCJweFwiKSwge1xuICAgICAgICAgIGxpbmVIZWlnaHQ6IHZhcnMuc2luZ2xlX2hlaWdodCArIFwicHhcIixcbiAgICAgICAgICBwYWRkaW5nOiAwXG4gICAgICAgIH1dXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBmb250X3NpemVfbGlzdF9oZWFkZXI6IGZ1bmN0aW9uIGZvbnRfc2l6ZV9saXN0X2hlYWRlcihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1saXN0LXRpbGUtLWhlYWRlclwiOiB7XG4gICAgICAgIFwiIC5wZS1saXN0LXRpbGVfX3RpdGxlXCI6IHtcbiAgICAgICAgICBmb250U2l6ZTogdmFycy5mb250X3NpemVfbGlzdF9oZWFkZXIgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgZm9udF93ZWlnaHRfbGlzdF9oZWFkZXI6IGZ1bmN0aW9uIGZvbnRfd2VpZ2h0X2xpc3RfaGVhZGVyKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWxpc3QtdGlsZS0taGVhZGVyXCI6IHtcbiAgICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fdGl0bGVcIjoge1xuICAgICAgICAgIGZvbnRXZWlnaHQ6IHZhcnMuZm9udF93ZWlnaHRfbGlzdF9oZWFkZXJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgY29tcGFjdF9wYWRkaW5nOiBmdW5jdGlvbiBjb21wYWN0X3BhZGRpbmcoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWxpc3QtLWNvbXBhY3QgJiwgJi5wZS1saXN0LXRpbGUtLWNvbXBhY3RcIjoge1xuICAgICAgICBcIjpub3QoLnBlLWxpc3QtdGlsZS0taGVhZGVyKVwiOiB7XG4gICAgICAgICAgXCIgLnBlLWxpc3QtdGlsZV9fY29udGVudDpub3QoLnBlLWxpc3QtdGlsZV9fY29udGVudC1mcm9udClcIjogcGFkZGluZ1YodmFycy5jb21wYWN0X3BhZGRpbmcsIHZhcnMuY29tcGFjdF9wYWRkaW5nICsgMSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgLy8gVGhlbWUgdmFyc1xuICBpbnNldDogZnVuY3Rpb24gaW5zZXQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gdmFycy5pbnNldCAmJiBfaW5zZXQoc2VsZWN0b3IsIHZhcnMpO1xuICB9LFxuICBpbnNldF9oOiBmdW5jdGlvbiBpbnNldF9oKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIHZhcnMuaW5zZXRfaCAmJiBpbnNldEgoc2VsZWN0b3IsIHZhcnMpO1xuICB9LFxuICBpbnNldF92OiBmdW5jdGlvbiBpbnNldF92KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIHZhcnMuaW5zZXRfaCAmJiBpbnNldFYoc2VsZWN0b3IsIHZhcnMpO1xuICB9LFxuICByb3VuZGVkOiBmdW5jdGlvbiByb3VuZGVkKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIHZhcnMucm91bmRlZCAmJiBfcm91bmRlZChzZWxlY3RvciwgdmFycyk7XG4gIH0sXG4gIHNlbGVjdGVkOiBmdW5jdGlvbiBzZWxlY3RlZChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiB2YXJzLnNlbGVjdGVkICYmIHVuU2VsZWN0YWJsZShzZWxlY3Rvcik7XG4gIH1cbn07XG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgdmFyRm5zOiB2YXJGbnNcbn0pO1xuXG4vL1xuLy8gaGVpZ2h0czpcbi8vIHNpbmdsZSBsaW5lOiA0OFxuLy8gc2luZ2xlIGxpbmUsIGRlbnNlOiA0MFxuLy8gc2luZ2xlIGxpbmUsIHdpdGggaWNvbjogNDhcbi8vIHNpbmdsZSBsaW5lLCB3aXRoIGljb24sIGRlbnNlOiA0MFxuLy8gc2luZ2xlIGxpbmUsIHdpdGggYXZhdGFyOiA1NlxuLy8gc2luZ2xlIGxpbmUsIHdpdGggYXZhdGFyLCBkZW5zZTogNDhcbi8vIHR3by1saW5lOiA3MlxuLy8gdHdvLWxpbmUsIGRlbnNlOiA2MFxuLy8gdGhyZWUtbGluZTogODhcbi8vIHRocmVlLWxpbmUsIGRlbnNlOiA3NlxuXG52YXIgc2luZ2xlX2hlaWdodCA9IDQ4O1xudmFyIHBhZGRpbmcgPSA4O1xudmFyIHNpbmdsZV93aXRoX2ljb25faGVpZ2h0ID0gNTY7XG52YXIgdGhlbWVWYXJzID0ge1xuICBpbnNldDogZmFsc2UsXG4gIGluc2V0X2g6IGZhbHNlLFxuICBpbnNldF92OiBmYWxzZSxcbiAgc2VsZWN0ZWQ6IGZhbHNlLFxuICByb3VuZGVkOiBmYWxzZVxufTtcbi8qKlxuICogQHR5cGUge0xpc3RUaWxlVmFyc30gbGlzdFRpbGVWYXJzXG4gKi9cblxudmFyIGxpc3RUaWxlVmFycyA9IF9vYmplY3RTcHJlYWQyKHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICBjb21wYWN0X2Zyb250X2l0ZW1fd2lkdGg6IDY0LFxuICBjb21wYWN0X3BhZGRpbmc6IDksXG4gIGNvbXBhY3Rfc2lkZV9wYWRkaW5nOiAxICogdmFycy5ncmlkX3VuaXRfY29tcG9uZW50LFxuICBmb250X3NpemVfbGlzdF9oZWFkZXI6IDE0LFxuICBmb250X3NpemVfbmF2aWdhdGlvbl90aXRsZTogMTQsXG4gIGZvbnRfc2l6ZV9zbWFsbDogMTIsXG4gIGZvbnRfc2l6ZV9zdWJ0aXRsZTogMTQsXG4gIGZvbnRfc2l6ZV90aXRsZTogMTYsXG4gIGZvbnRfd2VpZ2h0X2xpc3RfaGVhZGVyOiB2YXJzLmZvbnRfd2VpZ2h0X21lZGl1bSxcbiAgZm9udF93ZWlnaHRfbmF2aWdhdGlvbl90aXRsZTogdmFycy5mb250X3dlaWdodF9tZWRpdW0sXG4gIGZvbnRfd2VpZ2h0X3N1YnRpdGxlOiB2YXJzLmZvbnRfd2VpZ2h0X25vcm1hbCxcbiAgZm9udF93ZWlnaHRfdGl0bGU6IHZhcnMuZm9udF93ZWlnaHRfbm9ybWFsLFxuICBmcm9udF9pdGVtX3dpZHRoOiA3MixcbiAgaGFzX2hpZ2hfc3VidGl0bGVfcGFkZGluZzogMTMsXG4gIGhhc19zdWJ0aXRsZV9wYWRkaW5nOiAxNSxcbiAgaGlnaF9zdWJ0aXRsZV9saW5lX2NvdW50OiAyLFxuICBpbnNldF9oX3NpemU6IDEgKiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQsXG4gIC8vIDhcbiAgaW5zZXRfdl9zaXplOiAxICogdmFycy5ncmlkX3VuaXRfY29tcG9uZW50LFxuICAvLyA4XG4gIGxpbmVfaGVpZ2h0X3N1YnRpdGxlOiAyMCxcbiAgcGFkZGluZzogMTMsXG4gIHJvdW5kZWRfYm9yZGVyX3JhZGl1czogdmFycy51bml0X2l0ZW1fYm9yZGVyX3JhZGl1cyxcbiAgc2lkZV9wYWRkaW5nOiAyICogdmFycy5ncmlkX3VuaXRfY29tcG9uZW50LFxuICAvLyAxNlxuICBzaW5nbGVfaGVpZ2h0OiBzaW5nbGVfaGVpZ2h0LFxuICBzaW5nbGVfbGluZV9oZWlnaHQ6IHNpbmdsZV9oZWlnaHQgLSAyICogcGFkZGluZyAtICgyICogNSArIDEpLFxuICBzaW5nbGVfd2l0aF9pY29uX2hlaWdodDogc2luZ2xlX3dpdGhfaWNvbl9oZWlnaHQsXG4gIHNpbmdsZV93aXRoX2ljb25fbGluZV9oZWlnaHQ6IHNpbmdsZV93aXRoX2ljb25faGVpZ2h0IC0gMiAqIHBhZGRpbmcgLSAoMiAqIDUgKyAxKSxcbiAgc3VidGl0bGVfbGluZV9jb3VudDogMSxcbiAgdGl0bGVfbGluZV9jb3VudDogMSxcbiAgY29sb3JfbGlnaHRfdGl0bGU6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfcHJpbWFyeSksXG4gIGNvbG9yX2xpZ2h0X3N1YnRpdGxlOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3NlY29uZGFyeSksXG4gIGNvbG9yX2xpZ2h0X2luZm86IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfdGVydGlhcnkpLFxuICBjb2xvcl9saWdodF9mcm9udDogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfdGV4dF9zZWNvbmRhcnkpLFxuICBjb2xvcl9saWdodF90ZXh0X2Rpc2FibGVkOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X2Rpc2FibGVkKSxcbiAgY29sb3JfbGlnaHRfbGlzdF9oZWFkZXI6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfdGVydGlhcnkpLFxuICBjb2xvcl9saWdodF9zZWNvbmRhcnk6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfc2Vjb25kYXJ5KSxcbiAgY29sb3JfbGlnaHRfaG92ZXI6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfcHJpbWFyeSksXG4gIGNvbG9yX2xpZ2h0X2hvdmVyX2Zyb250OiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3ByaW1hcnkpLFxuICBjb2xvcl9saWdodF9ob3Zlcl9iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF9iYWNrZ3JvdW5kX2hvdmVyKSxcbiAgY29sb3JfbGlnaHRfZm9jdXNfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfYmFja2dyb3VuZF9ob3ZlciksXG4gIGNvbG9yX2xpZ2h0X3NlbGVjdGVkX3RleHQ6IFwiaW5oZXJpdFwiLFxuICBjb2xvcl9saWdodF9zZWxlY3RlZF9iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF9iYWNrZ3JvdW5kX2hvdmVyKSxcbiAgY29sb3JfbGlnaHRfaGlnaGxpZ2h0X2JhY2tncm91bmQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X2JhY2tncm91bmRfaG92ZXIpLFxuICAvLyBiYWNrZ3JvdW5kIGNvbG9yIG1heSBiZSBzZXQgaW4gdGhlbWU7IGRpc2FibGVkIGJ5IGRlZmF1bHRcbiAgLy8gY29sb3JfbGlnaHRfYmFja2dyb3VuZDogICAgICAgICAgXCJpbmhlcml0XCIsXG4gIGNvbG9yX2RhcmtfdGl0bGU6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3ByaW1hcnkpLFxuICBjb2xvcl9kYXJrX3N1YnRpdGxlOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfdGV4dF9zZWNvbmRhcnkpLFxuICBjb2xvcl9kYXJrX2luZm86IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3RlcnRpYXJ5KSxcbiAgY29sb3JfZGFya19mcm9udDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX3RleHRfc2Vjb25kYXJ5KSxcbiAgY29sb3JfZGFya190ZXh0X2Rpc2FibGVkOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfdGV4dF9kaXNhYmxlZCksXG4gIGNvbG9yX2RhcmtfbGlzdF9oZWFkZXI6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3RlcnRpYXJ5KSxcbiAgY29sb3JfZGFya19zZWNvbmRhcnk6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3NlY29uZGFyeSksXG4gIGNvbG9yX2RhcmtfaG92ZXI6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3ByaW1hcnkpLFxuICBjb2xvcl9kYXJrX2hvdmVyX2Zyb250OiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfdGV4dF9wcmltYXJ5KSxcbiAgY29sb3JfZGFya19ob3Zlcl9iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfYmFja2dyb3VuZF9ob3ZlciksXG4gIGNvbG9yX2Rhcmtfc2VsZWN0ZWRfdGV4dDogXCJpbmhlcml0XCIsXG4gIGNvbG9yX2Rhcmtfc2VsZWN0ZWRfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX2JhY2tncm91bmRfaG92ZXIpLFxuICBjb2xvcl9kYXJrX2hpZ2hsaWdodF9iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfYmFja2dyb3VuZF9ob3Zlcilcbn0sIHRoZW1lVmFycyk7XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXQsIGNvbG9yXTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudCk7XG52YXIgYWRkU3R5bGUgPSBzdHlsZXIuY3JlYXRlQWRkU3R5bGUoc2VsZWN0b3IsIGZucywgbGlzdFRpbGVWYXJzKTtcbnZhciBnZXRTdHlsZSA9IHN0eWxlci5jcmVhdGVHZXRTdHlsZShzZWxlY3RvciwgZm5zLCBsaXN0VGlsZVZhcnMpO1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogbGlzdFRpbGVWYXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBsYXlvdXQsIGxpc3RUaWxlVmFycyBhcyB2YXJzIH07XG4iLCJpbXBvcnQgeyBjb2xvciBhcyBjb2xvciQxLCBsYXlvdXQgYXMgbGF5b3V0JDEsIHZhcnMgfSBmcm9tICdwb2x5dGhlbmUtY3NzLWJhc2Utc3Bpbm5lcic7XG5pbXBvcnQgeyBjcmVhdGVDb2xvciwgc2VsLCBjcmVhdGVMYXlvdXQsIG1peGluLCByZ2JhLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgdmFycyBhcyB2YXJzJDEgfSBmcm9tICdwb2x5dGhlbmUtdGhlbWUnO1xuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLW1kLXNwaW5uZXJcIixcbiAgLy8gZWxlbWVudHNcbiAgYW5pbWF0aW9uOiBcInBlLW1kLXNwaW5uZXJfX2FuaW1hdGlvblwiLFxuICBjaXJjbGU6IFwicGUtbWQtc3Bpbm5lcl9fY2lyY2xlXCIsXG4gIGNpcmNsZUNsaXBwZXI6IFwicGUtbWQtc3Bpbm5lcl9fY2lyY2xlLWNsaXBwZXJcIixcbiAgY2lyY2xlQ2xpcHBlckxlZnQ6IFwicGUtbWQtc3Bpbm5lcl9fY2lyY2xlLWNsaXBwZXItbGVmdFwiLFxuICBjaXJjbGVDbGlwcGVyUmlnaHQ6IFwicGUtbWQtc3Bpbm5lcl9fY2lyY2xlLWNsaXBwZXItcmlnaHRcIixcbiAgZ2FwUGF0Y2g6IFwicGUtbWQtc3Bpbm5lcl9fZ2FwLXBhdGNoXCIsXG4gIGxheWVyOiBcInBlLW1kLXNwaW5uZXJfX2xheWVyXCIsXG4gIGxheWVyTjogXCJwZS1tZC1zcGlubmVyX19sYXllci1cIlxufTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8qXG5TdHlsaW5nIGRlcml2ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lckVsZW1lbnRzL3BhcGVyLXNwaW5uZXJcblxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxNSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG5Db2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG5cbnZhciBnZW5lcmFsRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLW1kLXNwaW5uZXJfX2xheWVyXCI6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IFwiY3VycmVudGNvbG9yXCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG5cbnZhciB0aW50Rm5zID0gZnVuY3Rpb24gdGludEZucyh0aW50KSB7XG4gIHZhciBfcmVmO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3NpbmdsZVwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9zaW5nbGVcIl1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl8xXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIjpub3QoLnBlLXNwaW5uZXItLXNpbmdsZS1jb2xvcilcIjoge1xuICAgICAgICBcIiAucGUtbWQtc3Bpbm5lcl9fbGF5ZXItMVwiOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl8xXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl8yXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIjpub3QoLnBlLXNwaW5uZXItLXNpbmdsZS1jb2xvcilcIjoge1xuICAgICAgICBcIiAucGUtbWQtc3Bpbm5lcl9fbGF5ZXItMlwiOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl8yXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl8zXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIjpub3QoLnBlLXNwaW5uZXItLXNpbmdsZS1jb2xvcilcIjoge1xuICAgICAgICBcIiAucGUtbWQtc3Bpbm5lcl9fbGF5ZXItM1wiOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl8zXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl80XCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIjpub3QoLnBlLXNwaW5uZXItLXNpbmdsZS1jb2xvcilcIjoge1xuICAgICAgICBcIiAucGUtbWQtc3Bpbm5lcl9fbGF5ZXItNFwiOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl80XCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfcmVmO1xufTtcblxudmFyIGxpZ2h0VGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImRhcmtcIikpO1xuXG52YXIgY29sb3IgPSBjcmVhdGVDb2xvcih7XG4gIHZhckZuczoge1xuICAgIGxpZ2h0VGludEZuczogbGlnaHRUaW50Rm5zLFxuICAgIGRhcmtUaW50Rm5zOiBkYXJrVGludEZuc1xuICB9LFxuICBzdXBlckNvbG9yOiBjb2xvciQxXG59KTtcblxudmFyIE9QQUNJVFlfTUlOID0gMDtcbnZhciBPUEFDSVRZX01BWCA9IC45OTtcbnZhciBDVVJWRV9JTkZJTklURSA9IFwiY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAwLjIsIDEpIGluZmluaXRlIGJvdGhcIjtcblxudmFyIGtmUm90YXRlID0gZnVuY3Rpb24ga2ZSb3RhdGUoKSB7XG4gIHJldHVybiB7XG4gICAgXCIgdG9cIjoge1xuICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZSgzNjBkZWcpXCJcbiAgICB9XG4gIH07XG59O1xuXG52YXIga2ZMZWZ0U3BpbiA9IGZ1bmN0aW9uIGtmTGVmdFNwaW4oKSB7XG4gIHJldHVybiBrZlNwaW4oMSk7XG59O1xuXG52YXIga2ZSaWdodFNwaW4gPSBmdW5jdGlvbiBrZlJpZ2h0U3BpbigpIHtcbiAgcmV0dXJuIGtmU3BpbigtMSk7XG59O1xuXG52YXIga2ZTcGluID0gZnVuY3Rpb24ga2ZTcGluKGRpcmVjdGlvbikge1xuICByZXR1cm4ge1xuICAgIFwiIGZyb21cIjoge1xuICAgICAgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoXCIgKyBkaXJlY3Rpb24gKiAxMzAgKyBcImRlZylcIlxuICAgIH0sXG4gICAgXCIgNTAlXCI6IHtcbiAgICAgIFwidHJhbnNmb3JtXCI6IFwicm90YXRlKFwiICsgZGlyZWN0aW9uICogLTUgKyBcImRlZylcIlxuICAgIH0sXG4gICAgXCIgdG9cIjoge1xuICAgICAgXCJ0cmFuc2Zvcm1cIjogXCJyb3RhdGUoXCIgKyBkaXJlY3Rpb24gKiAxMzAgKyBcImRlZylcIlxuICAgIH1cbiAgfTtcbn07XG5cbnZhciBrZkZhZGVPdXQgPSBmdW5jdGlvbiBrZkZhZGVPdXQoKSB7XG4gIHJldHVybiB7XG4gICAgXCIgZnJvbVwiOiB7XG4gICAgICBvcGFjaXR5OiBPUEFDSVRZX01BWFxuICAgIH0sXG4gICAgXCIgdG9cIjoge1xuICAgICAgb3BhY2l0eTogT1BBQ0lUWV9NSU5cbiAgICB9XG4gIH07XG59O1xuXG52YXIga2ZGaWxsVW5maWxsUm90YXRlID0gZnVuY3Rpb24ga2ZGaWxsVW5maWxsUm90YXRlKGFyY1NpemUpIHtcbiAgcmV0dXJuIHtcbiAgICBcIiAxMi41JVwiOiB7XG4gICAgICB0cmFuc2Zvcm06IFwicm90YXRlKFwiICsgMC41ICogYXJjU2l6ZSArIFwiZGVnKVwiXG4gICAgfSxcbiAgICBcIiAyNSVcIjoge1xuICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZShcIiArIDEuMCAqIGFyY1NpemUgKyBcImRlZylcIlxuICAgIH0sXG4gICAgXCIgMzcuNSVcIjoge1xuICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZShcIiArIDEuNSAqIGFyY1NpemUgKyBcImRlZylcIlxuICAgIH0sXG4gICAgXCIgNTAlXCI6IHtcbiAgICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoXCIgKyAyLjAgKiBhcmNTaXplICsgXCJkZWcpXCJcbiAgICB9LFxuICAgIFwiIDYyLjUlXCI6IHtcbiAgICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoXCIgKyAyLjUgKiBhcmNTaXplICsgXCJkZWcpXCJcbiAgICB9LFxuICAgIFwiIDc1JVwiOiB7XG4gICAgICB0cmFuc2Zvcm06IFwicm90YXRlKFwiICsgMy4wICogYXJjU2l6ZSArIFwiZGVnKVwiXG4gICAgfSxcbiAgICBcIiA4Ny41JVwiOiB7XG4gICAgICB0cmFuc2Zvcm06IFwicm90YXRlKFwiICsgMy41ICogYXJjU2l6ZSArIFwiZGVnKVwiXG4gICAgfSxcbiAgICBcIiB0b1wiOiB7XG4gICAgICB0cmFuc2Zvcm06IFwicm90YXRlKFwiICsgNC4wICogYXJjU2l6ZSArIFwiZGVnKVwiXG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogSEFDSzogRXZlbiB0aG91Z2ggdGhlIGludGVudGlvbiBpcyB0byBoYXZlIHRoZSBjdXJyZW50IC5wZS1tZC1zcGlubmVyX19sYXllciBhdFxuICogYG9wYWNpdHk6IDFgLCB3ZSBzZXQgaXQgdG8gYG9wYWNpdHk6IDAuOTlgIGluc3RlYWQgc2luY2UgdGhpcyBmb3JjZXMgQ2hyb21lXG4gKiB0byBkbyBwcm9wZXIgc3VicGl4ZWwgcmVuZGVyaW5nIGZvciB0aGUgZWxlbWVudHMgYmVpbmcgYW5pbWF0ZWQuIFRoaXMgaXNcbiAqIGVzcGVjaWFsbHkgdmlzaWJsZSBpbiBDaHJvbWUgMzkgb24gVWJ1bnR1IDE0LjA0LiBTZWU6XG4gKlxuICogLSBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lci9wYXBlci1zcGlubmVyL2lzc3Vlcy85XG4gKiAtIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00MzYyNTVcbiAqL1xuXG5cbnZhciBrZkxheWVyMUZhZGVJbk91dCA9IGZ1bmN0aW9uIGtmTGF5ZXIxRmFkZUluT3V0KCkge1xuICByZXR1cm4ge1xuICAgIFwiIGZyb21cIjoge1xuICAgICAgb3BhY2l0eTogT1BBQ0lUWV9NQVhcbiAgICB9LFxuICAgIFwiIDI1JVwiOiB7XG4gICAgICBvcGFjaXR5OiBPUEFDSVRZX01BWFxuICAgIH0sXG4gICAgXCIgMjYlXCI6IHtcbiAgICAgIG9wYWNpdHk6IE9QQUNJVFlfTUlOXG4gICAgfSxcbiAgICBcIiA4OSVcIjoge1xuICAgICAgb3BhY2l0eTogT1BBQ0lUWV9NSU5cbiAgICB9LFxuICAgIFwiIDkwJVwiOiB7XG4gICAgICBvcGFjaXR5OiBPUEFDSVRZX01BWFxuICAgIH0sXG4gICAgXCIgMTAwJVwiOiB7XG4gICAgICBvcGFjaXR5OiBPUEFDSVRZX01BWFxuICAgIH1cbiAgfTtcbn07XG5cbnZhciBrZkxheWVyMkZhZGVJbk91dCA9IGZ1bmN0aW9uIGtmTGF5ZXIyRmFkZUluT3V0KCkge1xuICByZXR1cm4ge1xuICAgIFwiIGZyb21cIjoge1xuICAgICAgb3BhY2l0eTogT1BBQ0lUWV9NSU5cbiAgICB9LFxuICAgIFwiIDE1JVwiOiB7XG4gICAgICBvcGFjaXR5OiBPUEFDSVRZX01JTlxuICAgIH0sXG4gICAgXCIgMjUlXCI6IHtcbiAgICAgIG9wYWNpdHk6IE9QQUNJVFlfTUFYXG4gICAgfSxcbiAgICBcIiA1MCVcIjoge1xuICAgICAgb3BhY2l0eTogT1BBQ0lUWV9NQVhcbiAgICB9LFxuICAgIFwiIDUxJVwiOiB7XG4gICAgICBvcGFjaXR5OiBPUEFDSVRZX01JTlxuICAgIH1cbiAgfTtcbn07XG5cbnZhciBrZkxheWVyM0ZhZGVJbk91dCA9IGZ1bmN0aW9uIGtmTGF5ZXIzRmFkZUluT3V0KCkge1xuICByZXR1cm4ge1xuICAgIFwiIGZyb21cIjoge1xuICAgICAgb3BhY2l0eTogT1BBQ0lUWV9NSU5cbiAgICB9LFxuICAgIFwiIDQwJVwiOiB7XG4gICAgICBvcGFjaXR5OiBPUEFDSVRZX01JTlxuICAgIH0sXG4gICAgXCIgNTAlXCI6IHtcbiAgICAgIG9wYWNpdHk6IE9QQUNJVFlfTUFYXG4gICAgfSxcbiAgICBcIiA3NSVcIjoge1xuICAgICAgb3BhY2l0eTogT1BBQ0lUWV9NQVhcbiAgICB9LFxuICAgIFwiIDc2JVwiOiB7XG4gICAgICBvcGFjaXR5OiBPUEFDSVRZX01JTlxuICAgIH1cbiAgfTtcbn07XG5cbnZhciBrZkxheWVyNEZhZGVJbk91dCA9IGZ1bmN0aW9uIGtmTGF5ZXI0RmFkZUluT3V0KCkge1xuICByZXR1cm4ge1xuICAgIFwiIGZyb21cIjoge1xuICAgICAgb3BhY2l0eTogT1BBQ0lUWV9NSU5cbiAgICB9LFxuICAgIFwiIDY1JVwiOiB7XG4gICAgICBvcGFjaXR5OiBPUEFDSVRZX01JTlxuICAgIH0sXG4gICAgXCIgNzUlXCI6IHtcbiAgICAgIG9wYWNpdHk6IE9QQUNJVFlfTUFYXG4gICAgfSxcbiAgICBcIiA5MCVcIjoge1xuICAgICAgb3BhY2l0eTogT1BBQ0lUWV9NQVhcbiAgICB9LFxuICAgIFwiIDEwMCVcIjoge1xuICAgICAgb3BhY2l0eTogT1BBQ0lUWV9NSU5cbiAgICB9XG4gIH07XG59O1xuXG52YXIgbGF5ZXJBbmltYXRpb24gPSBmdW5jdGlvbiBsYXllckFuaW1hdGlvbih2YXJzLCBudW0pIHtcbiAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCIucGUtbWQtc3Bpbm5lcl9fbGF5ZXItXCIgKyBudW0sIHtcbiAgICBhbmltYXRpb246IFwibWRTcGlubmVyRmlsbFVuZmlsbFJvdGF0ZSBcIiArIDQgKiB2YXJzLmFyY190aW1lICsgXCJzIFwiICsgQ1VSVkVfSU5GSU5JVEUgKyBcIiwgIG1kU3Bpbm5lckxheWVyXCIgKyBudW0gKyBcIkZhZGVJbk91dCBcIiArIDQgKiB2YXJzLmFyY190aW1lICsgXCJzIFwiICsgQ1VSVkVfSU5GSU5JVEVcbiAgfSk7XG59O1xuXG52YXIgdmFyRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCJAa2V5ZnJhbWVzIG1kU3Bpbm5lclJvdGF0ZVwiOiBrZlJvdGF0ZSgpLFxuICAgICAgXCJAa2V5ZnJhbWVzIG1kU3Bpbm5lclJpZ2h0U3BpblwiOiBrZlJpZ2h0U3BpbigpLFxuICAgICAgXCJAa2V5ZnJhbWVzIG1kU3Bpbm5lckxlZnRTcGluXCI6IGtmTGVmdFNwaW4oKSxcbiAgICAgIFwiQGtleWZyYW1lcyBtZFNwaW5uZXJGYWRlT3V0XCI6IGtmRmFkZU91dCgpLFxuICAgICAgXCJAa2V5ZnJhbWVzIG1kU3Bpbm5lckxheWVyMUZhZGVJbk91dFwiOiBrZkxheWVyMUZhZGVJbk91dCgpLFxuICAgICAgXCJAa2V5ZnJhbWVzIG1kU3Bpbm5lckxheWVyMkZhZGVJbk91dFwiOiBrZkxheWVyMkZhZGVJbk91dCgpLFxuICAgICAgXCJAa2V5ZnJhbWVzIG1kU3Bpbm5lckxheWVyM0ZhZGVJbk91dFwiOiBrZkxheWVyM0ZhZGVJbk91dCgpLFxuICAgICAgXCJAa2V5ZnJhbWVzIG1kU3Bpbm5lckxheWVyNEZhZGVJbk91dFwiOiBrZkxheWVyNEZhZGVJbk91dCgpLFxuICAgICAgXCIgLnBlLW1kLXNwaW5uZXJfX2FuaW1hdGlvblwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcblxuICAgICAgICAvKiBUaGUgc3Bpbm5lciBkb2VzIG5vdCBoYXZlIGFueSBjb250ZW50cyB0aGF0IHdvdWxkIGhhdmUgdG8gYmVcbiAgICAgICAgKiBmbGlwcGVkIGlmIHRoZSBkaXJlY3Rpb24gY2hhbmdlcy4gQWx3YXlzIHVzZSBsdHIgc28gdGhhdCB0aGVcbiAgICAgICAgKiBzdHlsZSB3b3JrcyBvdXQgY29ycmVjdGx5IGluIGJvdGggY2FzZXMuICovXG4gICAgICAgIGRpcmVjdGlvbjogXCJsdHJcIlxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAqIFBhdGNoIHRoZSBnYXAgdGhhdCBhcHBlYXIgYmV0d2VlbiB0aGUgdHdvIGFkamFjZW50IGRpdi5wZS1tZC1zcGlubmVyX19jaXJjbGUtY2xpcHBlciB3aGlsZSB0aGVcbiAgICAgICogc3Bpbm5lciBpcyByb3RhdGluZyAoYXBwZWFycyBvbiBDaHJvbWUgMzgsIFNhZmFyaSA3LjEsIGFuZCBJRSAxMSkuXG4gICAgICAqXG4gICAgICAqIFVwZGF0ZTogdGhlIGdhcCBubyBsb25nZXIgYXBwZWFycyBvbiBDaHJvbWUgd2hlbiAucGUtbWQtc3Bpbm5lcl9fbGF5ZXJcInMgb3BhY2l0eSBpcyAwLjk5LFxuICAgICAgKiBidXQgc3RpbGwgZG9lcyBvbiBTYWZhcmkgYW5kIElFLlxuICAgICAgKi9cbiAgICAgIFwiIC5wZS1tZC1zcGlubmVyX19nYXAtcGF0Y2hcIjoge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IFwiNDUlXCIsXG4gICAgICAgIHdpZHRoOiBcIjEwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgYm9yZGVyQ29sb3I6IFwiaW5oZXJpdFwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLW1kLXNwaW5uZXJfX2dhcC1wYXRjaCAucGUtbWQtc3Bpbm5lcl9fY2lyY2xlXCI6IHtcbiAgICAgICAgd2lkdGg6IFwiMTAwMCVcIixcbiAgICAgICAgbGVmdDogXCItNDUwJVwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLW1kLXNwaW5uZXJfX2NpcmNsZS1jbGlwcGVyXCI6IHtcbiAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgICAgZm9udFNpemU6IDAsXG4gICAgICAgIGxpbmVIZWlnaHQ6IDAsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIHdpZHRoOiBcIjUwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgYm9yZGVyQ29sb3I6IFwiaW5oZXJpdFwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLW1kLXNwaW5uZXJfX2NpcmNsZS1jbGlwcGVyIC5wZS1tZC1zcGlubmVyX19jaXJjbGVcIjoge1xuICAgICAgICB3aWR0aDogXCIyMDAlXCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtbWQtc3Bpbm5lcl9fY2lyY2xlXCI6IFttaXhpbi5maXQoKSwge1xuICAgICAgICBhbmltYXRpb246IFwibm9uZVwiLFxuICAgICAgICBib3hTaXppbmc6IFwiYm9yZGVyLWJveFwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICBib3JkZXJTdHlsZTogXCJzb2xpZFwiLFxuICAgICAgICBib3JkZXJDb2xvcjogXCJpbmhlcml0XCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIixcbiAgICAgICAgYm9yZGVyQm90dG9tQ29sb3I6IFwidHJhbnNwYXJlbnQgIWltcG9ydGFudFwiXG4gICAgICB9XSxcbiAgICAgIFwiIC5wZS1tZC1zcGlubmVyX19jaXJjbGUtY2xpcHBlci1sZWZ0IC5wZS1tZC1zcGlubmVyX19jaXJjbGVcIjoge1xuICAgICAgICB0cmFuc2Zvcm06IFwicm90YXRlKDEyOWRlZylcIixcbiAgICAgICAgYm9yZGVyUmlnaHRDb2xvcjogXCJ0cmFuc3BhcmVudCAhaW1wb3J0YW50XCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtbWQtc3Bpbm5lcl9fY2lyY2xlLWNsaXBwZXItcmlnaHQgLnBlLW1kLXNwaW5uZXJfX2NpcmNsZVwiOiB7XG4gICAgICAgIHRyYW5zZm9ybTogXCJyb3RhdGUoLTEyOWRlZylcIixcbiAgICAgICAgbGVmdDogXCItMTAwJVwiLFxuICAgICAgICBib3JkZXJMZWZ0Q29sb3I6IFwidHJhbnNwYXJlbnQgIWltcG9ydGFudFwiXG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICogSU1QT1JUQU5UIE5PVEUgQUJPVVQgQ1NTIEFOSU1BVElPTiBQUk9QRVJUSUVTIChrZWFudWxlZSk6XG4gICAgICAqXG4gICAgICAqIGlPUyBTYWZhcmkgKHRlc3RlZCBvbiBpT1MgOC4xKSBkb2VzIG5vdCBoYW5kbGUgYW5pbWF0aW9uLWRlbGF5IHZlcnkgd2VsbCAtIGl0IGRvZXNuXCJ0XG4gICAgICAqIGd1YXJhbnRlZSB0aGF0IHRoZSBhbmltYXRpb24gd2lsbCBzdGFydCBfZXhhY3RseV8gYWZ0ZXIgdGhhdCB2YWx1ZS4gU28gd2UgYXZvaWQgdXNpbmdcbiAgICAgICogYW5pbWF0aW9uLWRlbGF5IGFuZCBpbnN0ZWFkIHNldCBjdXN0b20ga2V5ZnJhbWVzIGZvciBlYWNoIGNvbG9yIChhcyByZWR1bmRhbnQgYXMgaXRcbiAgICAgICogc2VlbXMpLlxuICAgICAgKlxuICAgICAgKiBXZSB3cml0ZSBvdXQgZWFjaCBhbmltYXRpb24gaW4gZnVsbCAoaW5zdGVhZCBvZiBzZXBhcmF0aW5nIGFuaW1hdGlvbi1uYW1lLFxuICAgICAgKiBhbmltYXRpb24tZHVyYXRpb24sIGV0Yy4pIGJlY2F1c2UgdW5kZXIgdGhlIHBvbHlmaWxsLCBTYWZhcmkgZG9lcyBub3QgcmVjb2duaXplIHRob3NlXG4gICAgICAqIHNwZWNpZmljIHByb3BlcnRpZXMgcHJvcGVybHksIHRyZWF0cyB0aGVtIGFzIC13ZWJraXQtYW5pbWF0aW9uLCBhbmQgb3ZlcnJpZGVzIHRoZVxuICAgICAgKiBvdGhlciBhbmltYXRpb24gcnVsZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lci9wbGF0Zm9ybS9pc3N1ZXMvNTMuXG4gICAgICAqL1xuICAgICAgXCIgLnBlLW1kLXNwaW5uZXJfX2xheWVyXCI6IFtbMSwgMiwgMywgNF0ubWFwKGZ1bmN0aW9uIChudW0pIHtcbiAgICAgICAgcmV0dXJuIGxheWVyQW5pbWF0aW9uKHZhcnMsIG51bSk7XG4gICAgICB9KSwge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIHdoaXRlU3BhY2U6IFwibm93cmFwXCJcbiAgICAgIH1dXG4gICAgfSldO1xuICB9LFxuICByb3RhdGlvbl9kdXJhdGlvbjogZnVuY3Rpb24gcm90YXRpb25fZHVyYXRpb24oc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLW1kLXNwaW5uZXJfX2FuaW1hdGlvblwiOiB7XG4gICAgICAgIGFuaW1hdGlvbjogXCJtZFNwaW5uZXJSb3RhdGUgXCIgKyB2YXJzLnJvdGF0aW9uX2R1cmF0aW9uICsgXCJzIGxpbmVhciBpbmZpbml0ZVwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBib3JkZXJfd2lkdGhfc21hbGw6IGZ1bmN0aW9uIGJvcmRlcl93aWR0aF9zbWFsbChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1zcGlubmVyLS1zbWFsbFwiOiB7XG4gICAgICAgIFwiIC5wZS1tZC1zcGlubmVyX19jaXJjbGVcIjoge1xuICAgICAgICAgIGJvcmRlcldpZHRoOiB2YXJzLmJvcmRlcl93aWR0aF9zbWFsbCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBib3JkZXJfd2lkdGhfcmVndWxhcjogZnVuY3Rpb24gYm9yZGVyX3dpZHRoX3JlZ3VsYXIoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc3Bpbm5lci0tcmVndWxhclwiOiB7XG4gICAgICAgIFwiIC5wZS1tZC1zcGlubmVyX19jaXJjbGVcIjoge1xuICAgICAgICAgIGJvcmRlcldpZHRoOiB2YXJzLmJvcmRlcl93aWR0aF9yZWd1bGFyICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGJvcmRlcl93aWR0aF9tZWRpdW06IGZ1bmN0aW9uIGJvcmRlcl93aWR0aF9tZWRpdW0oc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc3Bpbm5lci0tbWVkaXVtXCI6IHtcbiAgICAgICAgXCIgLnBlLW1kLXNwaW5uZXJfX2NpcmNsZVwiOiB7XG4gICAgICAgICAgYm9yZGVyV2lkdGg6IHZhcnMuYm9yZGVyX3dpZHRoX21lZGl1bSArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBib3JkZXJfd2lkdGhfbGFyZ2U6IGZ1bmN0aW9uIGJvcmRlcl93aWR0aF9sYXJnZShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1zcGlubmVyLS1sYXJnZVwiOiB7XG4gICAgICAgIFwiIC5wZS1tZC1zcGlubmVyX19jaXJjbGVcIjoge1xuICAgICAgICAgIGJvcmRlcldpZHRoOiB2YXJzLmJvcmRlcl93aWR0aF9sYXJnZSArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBib3JkZXJfd2lkdGhfZmFiOiBmdW5jdGlvbiBib3JkZXJfd2lkdGhfZmFiKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXNwaW5uZXItLWZhYlwiOiB7XG4gICAgICAgIFwiIC5wZS1tZC1zcGlubmVyX19jaXJjbGVcIjoge1xuICAgICAgICAgIGJvcmRlcldpZHRoOiB2YXJzLmJvcmRlcl93aWR0aF9mYWIgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgYXJjX3NpemU6IGZ1bmN0aW9uIGFyY19zaXplKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiQGtleWZyYW1lcyBtZFNwaW5uZXJGaWxsVW5maWxsUm90YXRlXCI6IGtmRmlsbFVuZmlsbFJvdGF0ZSh2YXJzLmFyY19zaXplKVxuICAgIH0pXTtcbiAgfSxcbiAgYXJjX3RpbWU6IGZ1bmN0aW9uIGFyY190aW1lKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1tZC1zcGlubmVyX19jaXJjbGUtY2xpcHBlci1sZWZ0IC5wZS1tZC1zcGlubmVyX19jaXJjbGVcIjoge1xuICAgICAgICBhbmltYXRpb246IFwibWRTcGlubmVyTGVmdFNwaW4gXCIgKyB2YXJzLmFyY190aW1lICsgXCJzIFwiICsgQ1VSVkVfSU5GSU5JVEVcbiAgICAgIH0sXG4gICAgICBcIiAucGUtbWQtc3Bpbm5lcl9fY2lyY2xlLWNsaXBwZXItcmlnaHQgLnBlLW1kLXNwaW5uZXJfX2NpcmNsZVwiOiB7XG4gICAgICAgIGFuaW1hdGlvbjogXCJtZFNwaW5uZXJSaWdodFNwaW4gXCIgKyB2YXJzLmFyY190aW1lICsgXCJzIFwiICsgQ1VSVkVfSU5GSU5JVEVcbiAgICAgIH0sXG4gICAgICBcIiAucGUtbWQtc3Bpbm5lcl9fbGF5ZXJcIjoge1xuICAgICAgICBhbmltYXRpb246IFwibWRTcGlubmVyRmlsbFVuZmlsbFJvdGF0ZSBcIiArIDQgKiB2YXJzLmFyY190aW1lICsgXCJzIFwiICsgQ1VSVkVfSU5GSU5JVEVcbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgdmFyRm5zOiB2YXJGbnMsXG4gIHN1cGVyTGF5b3V0OiBsYXlvdXQkMVxufSk7XG5cbi8vIEB0cy1jaGVja1xudmFyIGFyY19zaXplID0gMjcwOyAvLyBkZWdyZWVzIC0gYW1vdW50IG9mIGNpcmNsZSB0aGUgYXJjIHRha2VzIHVwXG5cbnZhciBhcmNfdGltZSA9IDEuMzMzOyAvLyBzIC0gdGltZSBpdCB0YWtlcyB0byBleHBhbmQgYW5kIGNvbnRyYWN0IGFyY1xuXG52YXIgYXJjX3N0YXJ0X2RlZ3JlZXMgPSAzNjAgLyA1ICogMzsgLy8gZGVncmVlcyAtIGhvdyBtdWNoIHRoZSBzdGFydCBsb2NhdGlvbiBvZiB0aGUgYXJjIHNob3VsZCByb3RhdGUgZWFjaCB0aW1lLCAyMTYgZ2l2ZXMgdXMgYSA1IHBvaW50ZWQgc3RhciBzaGFwZSAoaXRcInMgMzYwLzUgKiAzKS4gRm9yIGEgNyBwb2ludGVkIHN0YXIsIHdlIG1pZ2h0IGRvIDM2MC83ICogMyA9IDE1NC4yODYuXG5cbnZhciByb3RhdGlvbl9kdXJhdGlvbiA9IDM2MCAqIGFyY190aW1lIC8gKGFyY19zdGFydF9kZWdyZWVzICsgKDM2MCAtIGFyY19zaXplKSk7IC8vIDEuNTY4c1xuXG52YXIgYmx1ZTQwMCA9IFwiIzQyYTVmNVwiO1xudmFyIHJlZDUwMCA9IFwiI2Y0NDMzNlwiO1xudmFyIHllbGxvdzYwMCA9IFwiI2ZkZDgzNVwiO1xudmFyIGdyZWVuNTAwID0gXCIjNGNhZjUwXCI7XG4vKipcbiAqIEB0eXBlIHtNYXRlcmlhbERlc2lnblNwaW5uZXJWYXJzfSBtYXRlcmlhbERlc2lnblNwaW5uZXJWYXJzXG4gKi9cblxudmFyIG1hdGVyaWFsRGVzaWduU3Bpbm5lclZhcnMgPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBnZW5lcmFsIHN0eWxlcywgbm90IGRlZmluZWQgYnkgdmFyaWFibGVzXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogdHJ1ZSxcbiAgYXJjX3NpemU6IGFyY19zaXplLFxuICBhcmNfc3RhcnRfZGVncmVlczogYXJjX3N0YXJ0X2RlZ3JlZXMsXG4gIGFyY190aW1lOiBhcmNfdGltZSxcbiAgYm9yZGVyX3dpZHRoX2ZhYjogdmFycy5zaXplX2ZhYiAvIHZhcnMuc2l6ZV9yZWd1bGFyICogMyxcbiAgYm9yZGVyX3dpZHRoX2xhcmdlOiB2YXJzLnNpemVfbGFyZ2UgLyB2YXJzLnNpemVfcmVndWxhciAqIDMsXG4gIGJvcmRlcl93aWR0aF9tZWRpdW06IHZhcnMuc2l6ZV9tZWRpdW0gLyB2YXJzLnNpemVfcmVndWxhciAqIDMsXG4gIGJvcmRlcl93aWR0aF9yZWd1bGFyOiAzLFxuICBib3JkZXJfd2lkdGhfc21hbGw6IHZhcnMuc2l6ZV9zbWFsbCAvIHZhcnMuc2l6ZV9yZWd1bGFyICogMyxcbiAgcm90YXRpb25fZHVyYXRpb246IHJvdGF0aW9uX2R1cmF0aW9uLFxuICBjb2xvcl9saWdodF9zaW5nbGU6IHJnYmEodmFycyQxLmNvbG9yX3ByaW1hcnkpLFxuICBjb2xvcl9saWdodF8xOiBibHVlNDAwLFxuICBjb2xvcl9saWdodF8yOiByZWQ1MDAsXG4gIGNvbG9yX2xpZ2h0XzM6IHllbGxvdzYwMCxcbiAgY29sb3JfbGlnaHRfNDogZ3JlZW41MDAsXG4gIGNvbG9yX2Rhcmtfc2luZ2xlOiByZ2JhKHZhcnMkMS5jb2xvcl9wcmltYXJ5KSxcbiAgY29sb3JfZGFya18xOiBibHVlNDAwLFxuICBjb2xvcl9kYXJrXzI6IHJlZDUwMCxcbiAgY29sb3JfZGFya18zOiB5ZWxsb3c2MDAsXG4gIGNvbG9yX2RhcmtfNDogZ3JlZW41MDBcbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXQsIGNvbG9yXTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudCk7XG52YXIgYWRkU3R5bGUgPSBzdHlsZXIuY3JlYXRlQWRkU3R5bGUoc2VsZWN0b3IsIGZucywgbWF0ZXJpYWxEZXNpZ25TcGlubmVyVmFycyk7XG52YXIgZ2V0U3R5bGUgPSBzdHlsZXIuY3JlYXRlR2V0U3R5bGUoc2VsZWN0b3IsIGZucywgbWF0ZXJpYWxEZXNpZ25TcGlubmVyVmFycyk7XG5cbnZhciBhZGRHZW5lcmFsU3R5bGVUb0hlYWQgPSBmdW5jdGlvbiBhZGRHZW5lcmFsU3R5bGVUb0hlYWQoKSB7XG4gIHJldHVybiBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW3NlbGVjdG9yXSxcbiAgICBmbnM6IGZucyxcbiAgICB2YXJzOiBtYXRlcmlhbERlc2lnblNwaW5uZXJWYXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBsYXlvdXQsIG1hdGVyaWFsRGVzaWduU3Bpbm5lclZhcnMgYXMgdmFycyB9O1xuIiwiaW1wb3J0IHsgY29sb3IgYXMgY29sb3IkMSwgbGF5b3V0IGFzIGxheW91dCQxIH0gZnJvbSAncG9seXRoZW5lLWNzcy1tYXRlcmlhbC1kZXNpZ24tc3Bpbm5lcic7XG5pbXBvcnQgeyBjcmVhdGVDb2xvciwgc2VsLCBjcmVhdGVMYXlvdXQsIHJnYmEsIHN0eWxlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNzcyc7XG5pbXBvcnQgeyB2YXJzIH0gZnJvbSAncG9seXRoZW5lLXRoZW1lJztcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1tZC1wcm9ncmVzcy1zcGlubmVyXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGFuaW1hdGlvbjogXCJwZS1tZC1wcm9ncmVzcy1zcGlubmVyX19hbmltYXRpb25cIixcbiAgY2lyY2xlOiBcInBlLW1kLXByb2dyZXNzLXNwaW5uZXJfX2NpcmNsZVwiLFxuICBjaXJjbGVSaWdodDogXCJwZS1tZC1wcm9ncmVzcy1zcGlubmVyX19jaXJjbGUtcmlnaHRcIixcbiAgY2lyY2xlTGVmdDogXCJwZS1tZC1wcm9ncmVzcy1zcGlubmVyX19jaXJjbGUtbGVmdFwiXG59O1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxudmFyIGdlbmVyYWxGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbWQtcHJvZ3Jlc3Mtc3Bpbm5lcl9fY2lyY2xlXCI6IHtcbiAgICAgICAgYm9yZGVyQ29sb3I6IFwiY3VycmVudGNvbG9yXCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG5cbnZhciB0aW50Rm5zID0gZnVuY3Rpb24gdGludEZucyh0aW50KSB7XG4gIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIFwiY29sb3JfXCIgKyB0aW50LCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnRdXG4gICAgfSldO1xuICB9KTtcbn07XG5cbnZhciBsaWdodFRpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImxpZ2h0XCIpKTtcblxudmFyIGRhcmtUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJkYXJrXCIpKTtcblxudmFyIGNvbG9yID0gY3JlYXRlQ29sb3Ioe1xuICB2YXJGbnM6IHtcbiAgICBsaWdodFRpbnRGbnM6IGxpZ2h0VGludEZucyxcbiAgICBkYXJrVGludEZuczogZGFya1RpbnRGbnNcbiAgfSxcbiAgc3VwZXJDb2xvcjogY29sb3IkMVxufSk7XG5cbi8vIEB0cy1jaGVja1xudmFyIHZhckZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICBcIiAucGUtbWQtcHJvZ3Jlc3Mtc3Bpbm5lcl9fYW5pbWF0aW9uXCI6IHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLW1kLXByb2dyZXNzLXNwaW5uZXJfX2NpcmNsZVwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgYm9yZGVyU3R5bGU6IFwic29saWRcIixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjUwJVwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLW1kLXByb2dyZXNzLXNwaW5uZXJfX2NpcmNsZS1sZWZ0LCAucGUtbWQtcHJvZ3Jlc3Mtc3Bpbm5lcl9fY2lyY2xlLXJpZ2h0XCI6IHtcbiAgICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZSgwKVwiLFxuICAgICAgICBjbGlwOiBcInJlY3QoMCwgMCwgMCwgMClcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgcHJvZ3Jlc3NfYW5pbWF0aW9uX2R1cmF0aW9uOiBmdW5jdGlvbiBwcm9ncmVzc19hbmltYXRpb25fZHVyYXRpb24oc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLW1kLXByb2dyZXNzLXNwaW5uZXJfX2FuaW1hdGlvblwiOiB7XG4gICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiB2YXJzLnByb2dyZXNzX2FuaW1hdGlvbl9kdXJhdGlvblxuICAgICAgfVxuICAgIH0pXTtcbiAgfVxufTtcbnZhciBsYXlvdXQgPSBjcmVhdGVMYXlvdXQoe1xuICB2YXJGbnM6IHZhckZucyxcbiAgc3VwZXJMYXlvdXQ6IGxheW91dCQxXG59KTtcblxuLy8gQHRzLWNoZWNrXG4vKipcbiAqIEB0eXBlIHtNYXRlcmlhbERlc2lnblByb2dyZXNzU3Bpbm5lclZhcnN9IG1hdGVyaWFsRGVzaWduUHJvZ3Jlc3NTcGlubmVyVmFyc1xuICovXG5cbnZhciBtYXRlcmlhbERlc2lnblByb2dyZXNzU3Bpbm5lclZhcnMgPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBnZW5lcmFsIHN0eWxlcywgbm90IGRlZmluZWQgYnkgdmFyaWFibGVzXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogdHJ1ZSxcbiAgcHJvZ3Jlc3NfYW5pbWF0aW9uX2R1cmF0aW9uOiBcIi44c1wiLFxuICBjb2xvcl9saWdodDogcmdiYSh2YXJzLmNvbG9yX3ByaW1hcnkpLFxuICBjb2xvcl9kYXJrOiByZ2JhKHZhcnMuY29sb3JfcHJpbWFyeSlcbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXQsIGNvbG9yXTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudCk7XG52YXIgYWRkU3R5bGUgPSBzdHlsZXIuY3JlYXRlQWRkU3R5bGUoc2VsZWN0b3IsIGZucywgbWF0ZXJpYWxEZXNpZ25Qcm9ncmVzc1NwaW5uZXJWYXJzKTtcbnZhciBnZXRTdHlsZSA9IHN0eWxlci5jcmVhdGVHZXRTdHlsZShzZWxlY3RvciwgZm5zLCBtYXRlcmlhbERlc2lnblByb2dyZXNzU3Bpbm5lclZhcnMpO1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogbWF0ZXJpYWxEZXNpZ25Qcm9ncmVzc1NwaW5uZXJWYXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBsYXlvdXQsIG1hdGVyaWFsRGVzaWduUHJvZ3Jlc3NTcGlubmVyVmFycyBhcyB2YXJzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb2xvciwgc2VsLCByZ2JhLCBjcmVhdGVMYXlvdXQsIGNyZWF0ZU1hcmtlciwgc2VsZWN0b3JSVEwsIHN0eWxlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNzcyc7XG5pbXBvcnQgeyB2YXJzIH0gZnJvbSAncG9seXRoZW5lLXRoZW1lJztcbmltcG9ydCB7IHNoYXJlZFZhcnMsIHNoYXJlZFZhckZucyB9IGZyb20gJ3BvbHl0aGVuZS1jc3Mtc2hhZG93JztcblxudmFyIGxpc3RUaWxlQ2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLWxpc3QtdGlsZVwiLFxuICAvLyBlbGVtZW50c1xuICBjb250ZW50OiBcInBlLWxpc3QtdGlsZV9fY29udGVudFwiLFxuICBoaWdoU3VidGl0bGU6IFwicGUtbGlzdC10aWxlX19oaWdoLXN1YnRpdGxlXCIsXG4gIHByaW1hcnk6IFwicGUtbGlzdC10aWxlX19wcmltYXJ5XCIsXG4gIHNlY29uZGFyeTogXCJwZS1saXN0LXRpbGVfX3NlY29uZGFyeVwiLFxuICBzdWJ0aXRsZTogXCJwZS1saXN0LXRpbGVfX3N1YnRpdGxlXCIsXG4gIHRpdGxlOiBcInBlLWxpc3QtdGlsZV9fdGl0bGVcIixcbiAgY29udGVudEZyb250OiBcInBlLWxpc3QtdGlsZV9fY29udGVudC1mcm9udFwiLFxuICAvLyBzdGF0ZXMgIFxuICBjb21wYWN0OiBcInBlLWxpc3QtdGlsZS0tY29tcGFjdFwiLFxuICBjb21wYWN0RnJvbnQ6IFwicGUtbGlzdC10aWxlLS1jb21wYWN0LWZyb250XCIsXG4gIGRpc2FibGVkOiBcInBlLWxpc3QtdGlsZS0tZGlzYWJsZWRcIixcbiAgaGFzRnJvbnQ6IFwicGUtbGlzdC10aWxlLS1mcm9udFwiLFxuICBoYXNIaWdoU3VidGl0bGU6IFwicGUtbGlzdC10aWxlLS1oaWdoLXN1YnRpdGxlXCIsXG4gIGhhc1N1YnRpdGxlOiBcInBlLWxpc3QtdGlsZS0tc3VidGl0bGVcIixcbiAgaGVhZGVyOiBcInBlLWxpc3QtdGlsZS0taGVhZGVyXCIsXG4gIGhvdmVyYWJsZTogXCJwZS1saXN0LXRpbGUtLWhvdmVyYWJsZVwiLFxuICBpbnNldEg6IFwicGUtbGlzdC10aWxlLS1pbnNldC1oXCIsXG4gIGluc2V0VjogXCJwZS1saXN0LXRpbGUtLWluc2V0LXZcIixcbiAgc2VsZWN0YWJsZTogXCJwZS1saXN0LXRpbGUtLXNlbGVjdGFibGVcIixcbiAgc2VsZWN0ZWQ6IFwicGUtbGlzdC10aWxlLS1zZWxlY3RlZFwiLFxuICByb3VuZGVkOiBcInBlLWxpc3QtdGlsZS0tcm91bmRlZFwiLFxuICBoaWdobGlnaHQ6IFwicGUtbGlzdC10aWxlLS1oaWdobGlnaHRcIixcbiAgc3RpY2t5OiBcInBlLWxpc3QtdGlsZS0tc3RpY2t5XCIsXG4gIG5hdmlnYXRpb246IFwicGUtbGlzdC10aWxlLS1uYXZpZ2F0aW9uXCJcbn07XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtbWVudVwiLFxuICAvLyBlbGVtZW50c1xuICBwYW5lbDogXCJwZS1tZW51X19wYW5lbFwiLFxuICBjb250ZW50OiBcInBlLW1lbnVfX2NvbnRlbnRcIixcbiAgcGxhY2Vob2xkZXI6IFwicGUtbWVudV9fcGxhY2Vob2xkZXJcIixcbiAgYmFja2Ryb3A6IFwicGUtbWVudV9fYmFja2Ryb3BcIixcbiAgLy8gc3RhdGVzXG4gIGZsb2F0aW5nOiBcInBlLW1lbnUtLWZsb2F0aW5nXCIsXG4gIG9yaWdpbjogXCJwZS1tZW51LS1vcmlnaW5cIixcbiAgcGVybWFuZW50OiBcInBlLW1lbnUtLXBlcm1hbmVudFwiLFxuICBzaG93QmFja2Ryb3A6IFwicGUtbWVudS0tYmFja2Ryb3BcIixcbiAgdmlzaWJsZTogXCJwZS1tZW51LS12aXNpYmxlXCIsXG4gIHdpZHRoX2F1dG86IFwicGUtbWVudS0td2lkdGgtYXV0b1wiLFxuICB3aWR0aF9uOiBcInBlLW1lbnUtLXdpZHRoLVwiLFxuICBpc1RvcE1lbnU6IFwicGUtbWVudS0tdG9wLW1lbnVcIixcbiAgLy8gbG9va3VwXG4gIGxpc3RUaWxlOiBsaXN0VGlsZUNsYXNzZXMuY29tcG9uZW50LFxuICBzZWxlY3RlZExpc3RUaWxlOiBsaXN0VGlsZUNsYXNzZXMuc2VsZWN0ZWRcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbnZhciBnZW5lcmFsRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW107XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuXG59O1xuXG52YXIgdGludEZucyA9IGZ1bmN0aW9uIHRpbnRGbnModGludCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZ3JvdW5kXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbWVudV9fcGFuZWxcIjoge1xuICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2JhY2tncm91bmRcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZHJvcF9iYWNrZ3JvdW5kXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbWVudV9fYmFja2Ryb3BcIjoge1xuICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2JhY2tkcm9wX2JhY2tncm91bmRcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfcmVmO1xufTtcblxudmFyIGxpZ2h0VGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImRhcmtcIikpO1xuXG52YXIgY29sb3IgPSBjcmVhdGVDb2xvcih7XG4gIHZhckZuczoge1xuICAgIGxpZ2h0VGludEZuczogbGlnaHRUaW50Rm5zLFxuICAgIGRhcmtUaW50Rm5zOiBkYXJrVGludEZuc1xuICB9XG59KTtcblxudmFyIGJlaGF2aW9yVmFycyA9IHtcbiAgdG9wX21lbnU6IGZhbHNlIC8vIHNldCB0byB0cnVlIHRvIHBvc2l0aW9uIHRoZSBtZW51IGF0IHRoZSB0b3Agb2YgdGhlIHNjcmVlbiwgZnVsbCB3aWR0aFxuXG59O1xuXG52YXIgdGhlbWVWYXJzID0gX29iamVjdFNwcmVhZDIoe1xuICBiYWNrZHJvcDogdW5kZWZpbmVkLFxuICAvLyAoQm9vbGVhbikgLSBpZiBub3Qgc2V0LCBiYWNrZHJvcCBleGlzdGVuY2UgaXMgc2V0IGJ5IGNvbXBvbmVudCBvcHRpb25cbiAgejogdmFycy56X21lbnVcbn0sIGJlaGF2aW9yVmFycywge30sIHNoYXJlZFZhcnMpO1xuLyoqXG4gKiBAdHlwZSB7TWVudVZhcnN9IG1lbnVWYXJzXG4gKi9cblxuXG52YXIgbWVudVZhcnMgPSBfb2JqZWN0U3ByZWFkMih7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBnZW5lcmFsIHN0eWxlcywgbm90IGRlZmluZWQgYnkgdmFyaWFibGVzXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogdHJ1ZSxcbiAgYW5pbWF0aW9uX2RlbGF5OiBcIjBzXCIsXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogXCIuMTgwc1wiLFxuICBhbmltYXRpb25faGlkZV9jc3M6IFwib3BhY2l0eTogMDtcIixcbiAgYW5pbWF0aW9uX2hpZGVfb3JpZ2luX2VmZmVjdF9jc3M6IFwidHJhbnNmb3JtOiBzY2FsZSgwLjc1KTtcIixcbiAgLy8gc2V0IHRvIFwidHJhbnNmb3JtOiBzY2FsZSgxKVwiIHRvIHJlc2V0IHNjYWxpbmdcbiAgYW5pbWF0aW9uX3Nob3dfY3NzOiBcIm9wYWNpdHk6IDE7XCIsXG4gIGFuaW1hdGlvbl9zaG93X29yaWdpbl9lZmZlY3RfY3NzOiBcInRyYW5zZm9ybTogc2NhbGUoMSk7XCIsXG4gIGFuaW1hdGlvbl90aW1pbmdfZnVuY3Rpb246IFwiZWFzZS1pbi1vdXRcIixcbiAgYm9yZGVyX3JhZGl1czogdmFycy51bml0X2Jsb2NrX2JvcmRlcl9yYWRpdXMsXG4gIGhlaWdodDogdW5kZWZpbmVkLFxuICAvLyAoaGVpZ2h0IHZhbHVlIHdpdGggdW5pdCkgLSBpZiBub3Qgc2V0LCBoZWlnaHQgaXMgc2V0IGJ5IGNvbXBvbmVudCBvcHRpb25cbiAgbWluX3dpZHRoOiAxLjUsXG4gIHdpZHRoX2ZhY3RvcjogdmFycy5ncmlkX3VuaXRfbWVudSxcbiAgd2lkdGhzOiBbMSwgMS41LCAyLCAzLCA0LCA1LCA2LCA3XSxcbiAgLy8gY29sb3IgdmFyc1xuICBjb2xvcl9saWdodF9iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfYmFja2dyb3VuZCksXG4gIGNvbG9yX2RhcmtfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfYmFja2dyb3VuZCksXG4gIGNvbG9yX2xpZ2h0X2JhY2tkcm9wX2JhY2tncm91bmQ6IFwicmdiYSgwLCAwLCAwLCAuMSlcIixcbiAgY29sb3JfZGFya19iYWNrZHJvcF9iYWNrZ3JvdW5kOiBcInJnYmEoMCwgMCwgMCwgLjUpXCJcbn0sIHRoZW1lVmFycyk7XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzUlRMIFxuICovXG5cbnZhciBhbGlnblNpZGUgPSBmdW5jdGlvbiBhbGlnblNpZGUoaXNSVEwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dEFsaWduOiBpc1JUTCA/IFwicmlnaHRcIiA6IFwibGVmdFwiXG4gICAgfTtcbiAgfTtcbn07XG5cbnZhciBhbGlnbkxlZnQgPSBhbGlnblNpZGUoZmFsc2UpO1xudmFyIGFsaWduUmlnaHQgPSBhbGlnblNpZGUodHJ1ZSk7XG5cbnZhciB1bmlmeVdpZHRoID0gZnVuY3Rpb24gdW5pZnlXaWR0aCh2YXJzLCB3aWR0aCkge1xuICByZXR1cm4gd2lkdGggPCB2YXJzLm1pbl93aWR0aCA/IHZhcnMubWluX3dpZHRoIDogd2lkdGg7XG59O1xuXG52YXIgd2lkdGhDbGFzcyA9IGZ1bmN0aW9uIHdpZHRoQ2xhc3Mod2lkdGgpIHtcbiAgdmFyIHdpZHRoU3RyID0gd2lkdGgudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBcIi1cIik7XG4gIHJldHVybiBcInBlLW1lbnUtLXdpZHRoLVwiICsgd2lkdGhTdHI7XG59O1xuLyoqXG4gKiBcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMudmFyc1xuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtcy53aWR0aFxuICogQHBhcmFtIHtzdHJpbmd9IFtwYXJhbXMudmFsdWVdXG4gKi9cblxuXG52YXIgd2lkdGhTdHlsZSA9IGZ1bmN0aW9uIHdpZHRoU3R5bGUoX3JlZikge1xuICB2YXIgdmFycyA9IF9yZWYudmFycyxcbiAgICAgIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIHZhbHVlID0gX3JlZi52YWx1ZTtcbiAgdmFyIHMgPSB1bmlmeVdpZHRoKHZhcnMsIHdpZHRoKTtcbiAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCIuXCIgKyB3aWR0aENsYXNzKHMpLCB7XG4gICAgXCIgLnBlLW1lbnVfX3BhbmVsXCI6IHtcbiAgICAgIHdpZHRoOiB2YWx1ZSB8fCB2YXJzLndpZHRoX2ZhY3RvciAqIHMgKyBcInB4XCIgLy8gV2UgY2FuJ3Qgc2V0IG1heFdpZHRoIGJlY2F1c2Ugd2UgZG9uJ3Qga25vdyB0aGUgd2lkdGggb2YgdGhlIGNvbnRhaW5lclxuXG4gICAgfVxuICB9KTtcbn07XG5cbnZhciB3aWR0aHNfbWluX3dpZHRoX3dpZHRoX2ZhY3RvciA9IGZ1bmN0aW9uIHdpZHRoc19taW5fd2lkdGhfd2lkdGhfZmFjdG9yKHNlbGVjdG9yLCB2YXJzJDEpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3RvciwgW3ZhcnMkMS53aWR0aHMubWFwKGZ1bmN0aW9uICh3aWR0aCkge1xuICAgIHJldHVybiB3aWR0aFN0eWxlKHtcbiAgICAgIHZhcnM6IHZhcnMkMSxcbiAgICAgIHdpZHRoOiB3aWR0aFxuICAgIH0pO1xuICB9KSwge1xuICAgIFwiIC5wZS1tZW51X19wYW5lbFwiOiB7XG4gICAgICBtaW5XaWR0aDogdmFycy5ncmlkX3VuaXRfbWVudSAqIHZhcnMkMS5taW5fd2lkdGggKyBcInB4XCJcbiAgICB9XG4gIH1dKTtcbn07XG5cbnZhciBfYmFja2Ryb3AgPSBmdW5jdGlvbiBiYWNrZHJvcChzZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gKC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1tZW51X19iYWNrZHJvcFwiOiB7XG4gICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgICAgfVxuICAgIH0pXG4gICk7XG59O1xuXG52YXIgX3RvcF9tZW51ID0gZnVuY3Rpb24gdG9wX21lbnUoc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3RvciwgW3ZhcnMud2lkdGhzLm1hcChmdW5jdGlvbiAod2lkdGgpIHtcbiAgICByZXR1cm4gd2lkdGhTdHlsZSh7XG4gICAgICB2YXJzOiB2YXJzLFxuICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgdmFsdWU6IFwiMTAwdndcIlxuICAgIH0pO1xuICB9KSwgY3JlYXRlTWFya2VyKHZhcnMsIGJlaGF2aW9yVmFycyksIHtcbiAgICBcIiAucGUtbWVudV9fcGFuZWxcIjoge1xuICAgICAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgICAgIHdpZHRoOiBcIjEwMHZ3XCIsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IFwiYXV0b1wiLFxuICAgICAgYm9yZGVyVG9wTGVmdFJhZGl1czogMCxcbiAgICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAwXG4gICAgfVxuICB9XSk7XG59O1xuXG52YXIgX3ogPSBmdW5jdGlvbiB6KHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIi5wZS1tZW51LS1mbG9hdGluZ1wiOiB7XG4gICAgICBcIiAucGUtbWVudV9fcGFuZWwsIC5wZS1tZW51X19iYWNrZHJvcFwiOiB7XG4gICAgICAgIHpJbmRleDogdmFycy56XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciB2YXJGbnMgPSBfb2JqZWN0U3ByZWFkMih7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbYWxpZ25MZWZ0KCksIHtcbiAgICAgIHBvc2l0aW9uOiBcInN0YXRpY1wiLFxuICAgICAgXCIucGUtbWVudS0td2lkdGgtYXV0b1wiOiB7XG4gICAgICAgIHdpZHRoOiBcImF1dG9cIlxuICAgICAgfSxcbiAgICAgIFwiLnBlLW1lbnUtLXBlcm1hbmVudFwiOiB7XG4gICAgICAgIFwiIC5wZS1tZW51X19wYW5lbFwiOiB7XG4gICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIi5wZS1tZW51LS1mbG9hdGluZ1wiOiB7XG4gICAgICAgIFwiIC5wZS1tZW51X19wYW5lbFwiOiB7XG4gICAgICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiBcIm9wYWNpdHksIHRyYW5zZm9ybVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIiAucGUtbWVudV9fcGFuZWxcIjoge1xuICAgICAgICB0cmFuc2l0aW9uUHJvcGVydHk6IFwiYWxsXCIsXG4gICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtbWVudV9fYmFja2Ryb3BcIjoge1xuICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIixcbiAgICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiBcImFsbFwiLFxuICAgICAgICBwb3NpdGlvbjogXCJmaXhlZFwiLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICAgIH0sXG4gICAgICBcIi5wZS1tZW51LS1iYWNrZHJvcFwiOiBfYmFja2Ryb3Aoc2VsZWN0b3IpLFxuICAgICAgXCIucGUtbWVudS0tdmlzaWJsZSAucGUtbWVudV9fYmFja2Ryb3BcIjoge1xuICAgICAgICBvcGFjaXR5OiAxXG4gICAgICB9LFxuICAgICAgXCIucGUtbWVudS0tdG9wLW1lbnVcIjogX3RvcF9tZW51KHNlbGVjdG9yLCB2YXJzKSxcbiAgICAgIFwiIC5wZS1tZW51X19jb250ZW50XCI6IHtcbiAgICAgICAgb3ZlcmZsb3dYOiBcImF1dG9cIixcbiAgICAgICAgb3ZlcmZsb3dZOiBcImF1dG9cIixcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiXG4gICAgICB9LFxuICAgICAgXCIucGUtbWVudS0tZnVsbC1oZWlnaHRcIjoge1xuICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxuICAgICAgICBcIiAucGUtbWVudV9fcGFuZWxcIjoge1xuICAgICAgICAgIGhlaWdodDogXCIxMDAlXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKSwgX2RlZmluZVByb3BlcnR5KHt9LCBzZWxlY3RvclJUTChzZWxlY3RvciksIGFsaWduUmlnaHQoKSldO1xuICB9LFxuICBhbmltYXRpb25fZGVsYXk6IGZ1bmN0aW9uIGFuaW1hdGlvbl9kZWxheShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbWVudV9fcGFuZWwsIC5wZS1tZW51X19iYWNrZHJvcFwiOiB7XG4gICAgICAgIHRyYW5zaXRpb25EZWxheTogdmFycy5hbmltYXRpb25fZGVsYXlcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogZnVuY3Rpb24gYW5pbWF0aW9uX2R1cmF0aW9uKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1tZW51X19wYW5lbCwgLnBlLW1lbnVfX2JhY2tkcm9wXCI6IHtcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB2YXJzLmFuaW1hdGlvbl9kdXJhdGlvblxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgYW5pbWF0aW9uX3RpbWluZ19mdW5jdGlvbjogZnVuY3Rpb24gYW5pbWF0aW9uX3RpbWluZ19mdW5jdGlvbihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbWVudV9fcGFuZWwsIC5wZS1tZW51X19iYWNrZHJvcFwiOiB7XG4gICAgICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogdmFycy5hbmltYXRpb25fdGltaW5nX2Z1bmN0aW9uXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25fc2hvd19jc3M6IGZ1bmN0aW9uIGFuaW1hdGlvbl9zaG93X2NzcyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1tZW51LS12aXNpYmxlXCI6IHtcbiAgICAgICAgXCIgLnBlLW1lbnVfX3BhbmVsXCI6IHZhcnMuYW5pbWF0aW9uX3Nob3dfY3NzXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25faGlkZV9jc3M6IGZ1bmN0aW9uIGFuaW1hdGlvbl9oaWRlX2NzcyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbWVudV9fcGFuZWxcIjogdmFycy5hbmltYXRpb25faGlkZV9jc3NcbiAgICB9KV07XG4gIH0sXG4gIGFuaW1hdGlvbl9zaG93X29yaWdpbl9lZmZlY3RfY3NzOiBmdW5jdGlvbiBhbmltYXRpb25fc2hvd19vcmlnaW5fZWZmZWN0X2NzcyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1tZW51LS1vcmlnaW4ucGUtbWVudS0tdmlzaWJsZVwiOiB7XG4gICAgICAgIFwiIC5wZS1tZW51X19wYW5lbFwiOiB2YXJzLmFuaW1hdGlvbl9zaG93X29yaWdpbl9lZmZlY3RfY3NzXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25faGlkZV9vcmlnaW5fZWZmZWN0X2NzczogZnVuY3Rpb24gYW5pbWF0aW9uX2hpZGVfb3JpZ2luX2VmZmVjdF9jc3Moc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbWVudS0tb3JpZ2luOm5vdCgucGUtbWVudS0tdmlzaWJsZSlcIjoge1xuICAgICAgICBcIiAucGUtbWVudV9fcGFuZWxcIjogdmFycy5hbmltYXRpb25faGlkZV9vcmlnaW5fZWZmZWN0X2Nzc1xuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgaGVpZ2h0OiBmdW5jdGlvbiBoZWlnaHQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3ZhcnMuaGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbWVudV9fcGFuZWxcIjoge1xuICAgICAgICBoZWlnaHQ6IHZhcnMuaGVpZ2h0XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICB3aWR0aHM6IGZ1bmN0aW9uIHdpZHRocyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbd2lkdGhzX21pbl93aWR0aF93aWR0aF9mYWN0b3Ioc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgbWluX3dpZHRoOiBmdW5jdGlvbiBtaW5fd2lkdGgoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3dpZHRoc19taW5fd2lkdGhfd2lkdGhfZmFjdG9yKHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIHdpZHRoX2ZhY3RvcjogZnVuY3Rpb24gd2lkdGhfZmFjdG9yKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFt3aWR0aHNfbWluX3dpZHRoX3dpZHRoX2ZhY3RvcihzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBib3JkZXJfcmFkaXVzOiBmdW5jdGlvbiBib3JkZXJfcmFkaXVzKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1tZW51X19wYW5lbFwiOiB7XG4gICAgICAgIGJvcmRlclJhZGl1czogdmFycy5ib3JkZXJfcmFkaXVzICsgXCJweFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICAvLyBUaGVtZSB2YXJzXG4gIGJhY2tkcm9wOiBmdW5jdGlvbiBiYWNrZHJvcChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbdmFycy5iYWNrZHJvcCAmJiBfYmFja2Ryb3Aoc2VsZWN0b3IpXTtcbiAgfSxcbiAgdG9wX21lbnU6IGZ1bmN0aW9uIHRvcF9tZW51KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFt2YXJzLnRvcF9tZW51ICYmIF90b3BfbWVudShzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICB6OiBmdW5jdGlvbiB6KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFt2YXJzLnogJiYgX3ooc2VsZWN0b3IsIHZhcnMpXTtcbiAgfVxufSwgc2hhcmVkVmFyRm5zKTtcblxudmFyIGxheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zXG59KTtcblxuLy8gQHRzLWNoZWNrXG52YXIgZm5zID0gW2xheW91dCwgY29sb3JdO1xudmFyIHNlbGVjdG9yID0gXCIuXCIuY29uY2F0KGNsYXNzZXMuY29tcG9uZW50KTtcbnZhciBhZGRTdHlsZSA9IHN0eWxlci5jcmVhdGVBZGRTdHlsZShzZWxlY3RvciwgZm5zLCBtZW51VmFycyk7XG52YXIgZ2V0U3R5bGUgPSBzdHlsZXIuY3JlYXRlR2V0U3R5bGUoc2VsZWN0b3IsIGZucywgbWVudVZhcnMpO1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogbWVudVZhcnNcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBhZGRHZW5lcmFsU3R5bGVUb0hlYWQsIGFkZFN0eWxlLCBjb2xvciwgZ2V0U3R5bGUsIGxheW91dCwgbWVudVZhcnMgYXMgdmFycyB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29sb3IsIHNlbCwgY3JlYXRlTGF5b3V0LCBmbGV4LCByZ2JhLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgdmFycyB9IGZyb20gJ3BvbHl0aGVuZS10aGVtZSc7XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtbm90aWZpY2F0aW9uXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGFjdGlvbjogXCJwZS1ub3RpZmljYXRpb25fX2FjdGlvblwiLFxuICBjb250ZW50OiBcInBlLW5vdGlmaWNhdGlvbl9fY29udGVudFwiLFxuICBob2xkZXI6IFwicGUtbm90aWZpY2F0aW9uX19ob2xkZXJcIixcbiAgcGxhY2Vob2xkZXI6IFwicGUtbm90aWZpY2F0aW9uX19wbGFjZWhvbGRlclwiLFxuICB0aXRsZTogXCJwZS1ub3RpZmljYXRpb25fX3RpdGxlXCIsXG4gIC8vIHN0YXRlc1xuICBoYXNDb250YWluZXI6IFwicGUtbm90aWZpY2F0aW9uLS1jb250YWluZXJcIixcbiAgaG9yaXpvbnRhbDogXCJwZS1ub3RpZmljYXRpb24tLWhvcml6b250YWxcIixcbiAgbXVsdGlsaW5lVGl0bGU6IFwicGUtbm90aWZpY2F0aW9uX190aXRsZS0tbXVsdGktbGluZVwiLFxuICB2ZXJ0aWNhbDogXCJwZS1ub3RpZmljYXRpb24tLXZlcnRpY2FsXCIsXG4gIHZpc2libGU6IFwicGUtbm90aWZpY2F0aW9uLS12aXNpYmxlXCJcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgZ2VuZXJhbEZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxufTtcblxudmFyIHRpbnRGbnMgPSBmdW5jdGlvbiB0aW50Rm5zKHRpbnQpIHtcbiAgdmFyIF9yZWY7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfdGV4dFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLW5vdGlmaWNhdGlvbl9fY29udGVudFwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdGV4dFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2JhY2tncm91bmRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1ub3RpZmljYXRpb25fX2NvbnRlbnRcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfYmFja2dyb3VuZFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9yZWY7XG59O1xuXG52YXIgbGlnaHRUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJsaWdodFwiKSk7XG5cbnZhciBkYXJrVGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwiZGFya1wiKSk7XG5cbnZhciBjb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgdmFyRm5zOiB7XG4gICAgbGlnaHRUaW50Rm5zOiBsaWdodFRpbnRGbnMsXG4gICAgZGFya1RpbnRGbnM6IGRhcmtUaW50Rm5zXG4gIH1cbn0pO1xuXG4vLyBAdHMtY2hlY2tcbnZhciB2YXJGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbZmxleC5sYXlvdXRDZW50ZXJDZW50ZXIsIHtcbiAgICAgIC8vIGFzc3VtZXMgcG9zaXRpb24gcmVsYXRpdmVcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiLFxuICAgICAganVzdGlmeUNvbnRlbnQ6IFwiZmxleC1zdGFydFwiLFxuICAgICAgLy8gRm9yIElFIDExXG4gICAgICBcIi5wZS1tdWx0aXBsZS0tc2NyZWVuXCI6IHtcbiAgICAgICAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgICAgICAgekluZGV4OiB2YXJzLnpfbm90aWZpY2F0aW9uXG4gICAgICB9XG4gICAgfV0pLCB7XG4gICAgICBcIjpub3QoLnBlLW5vdGlmaWNhdGlvbi0tY29udGFpbmVyKSAucGUtbXVsdGlwbGUtLWNvbnRhaW5lclwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCJcbiAgICAgIH1cbiAgICB9XTtcbiAgfVxufTtcbnZhciBob2xkZXJMYXlvdXQgPSBjcmVhdGVMYXlvdXQoe1xuICB2YXJGbnM6IHZhckZuc1xufSk7XG5cbnZhciB0aXRsZV9zaW5nbGVfcGFkZGluZ192X3RpdGxlX3BhZGRpbmdfaCA9IGZ1bmN0aW9uIHRpdGxlX3NpbmdsZV9wYWRkaW5nX3ZfdGl0bGVfcGFkZGluZ19oKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtbm90aWZpY2F0aW9uX190aXRsZVwiOiB7XG4gICAgICBwYWRkaW5nOiB2YXJzLnRpdGxlX3NpbmdsZV9wYWRkaW5nX3YgKyBcInB4IFwiICsgdmFycy50aXRsZV9wYWRkaW5nX2ggKyBcInB4XCJcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGN1c3RvbUxheW91dEZucyA9IHtcbiAgYW5pbWF0aW9uX2hpZGVfY3NzOiBmdW5jdGlvbiBhbmltYXRpb25faGlkZV9jc3Moc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3RvciwgdmFycy5hbmltYXRpb25faGlkZV9jc3MpXTtcbiAgfSxcbiAgYW5pbWF0aW9uX3Nob3dfY3NzOiBmdW5jdGlvbiBhbmltYXRpb25fc2hvd19jc3Moc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbm90aWZpY2F0aW9uLS12aXNpYmxlXCI6IFt2YXJzLmFuaW1hdGlvbl9zaG93X2Nzc11cbiAgICB9KV07XG4gIH0sXG4gIHdpZHRoOiBmdW5jdGlvbiB3aWR0aChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbm90aWZpY2F0aW9uX19jb250ZW50XCI6IHtcbiAgICAgICAgd2lkdGg6IHZhcnMud2lkdGggKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGFuaW1hdGlvbl9kZWxheTogZnVuY3Rpb24gYW5pbWF0aW9uX2RlbGF5KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIHRyYW5zaXRpb25EZWxheTogdmFycy5hbmltYXRpb25fZGVsYXlcbiAgICB9KV07XG4gIH0sXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogZnVuY3Rpb24gYW5pbWF0aW9uX2R1cmF0aW9uKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdmFycy5hbmltYXRpb25fZHVyYXRpb25cbiAgICB9KV07XG4gIH0sXG4gIGFuaW1hdGlvbl90aW1pbmdfZnVuY3Rpb246IGZ1bmN0aW9uIGFuaW1hdGlvbl90aW1pbmdfZnVuY3Rpb24oc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiB2YXJzLmFuaW1hdGlvbl90aW1pbmdfZnVuY3Rpb25cbiAgICB9KV07XG4gIH0sXG4gIHNpZGVfcGFkZGluZzogZnVuY3Rpb24gc2lkZV9wYWRkaW5nKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1ub3RpZmljYXRpb25fX2NvbnRlbnRcIjoge1xuICAgICAgICBwYWRkaW5nOiBcIjAgXCIgKyB2YXJzLnNpZGVfcGFkZGluZyArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgYm9yZGVyX3JhZGl1czogZnVuY3Rpb24gYm9yZGVyX3JhZGl1cyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbm90aWZpY2F0aW9uX19jb250ZW50XCI6IHtcbiAgICAgICAgYm9yZGVyUmFkaXVzOiB2YXJzLmJvcmRlcl9yYWRpdXMgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIHRpdGxlX3NpbmdsZV9wYWRkaW5nX3Y6IGZ1bmN0aW9uIHRpdGxlX3NpbmdsZV9wYWRkaW5nX3Yoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3RpdGxlX3NpbmdsZV9wYWRkaW5nX3ZfdGl0bGVfcGFkZGluZ19oKHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIHRpdGxlX3BhZGRpbmdfaDogZnVuY3Rpb24gdGl0bGVfcGFkZGluZ19oKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFt0aXRsZV9zaW5nbGVfcGFkZGluZ192X3RpdGxlX3BhZGRpbmdfaChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBmb250X3NpemU6IGZ1bmN0aW9uIGZvbnRfc2l6ZShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbm90aWZpY2F0aW9uX190aXRsZVwiOiB7XG4gICAgICAgIGZvbnRTaXplOiB2YXJzLmZvbnRfc2l6ZSArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgbGluZV9oZWlnaHQ6IGZ1bmN0aW9uIGxpbmVfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1ub3RpZmljYXRpb25fX3RpdGxlXCI6IHtcbiAgICAgICAgbGluZUhlaWdodDogdmFycy5saW5lX2hlaWdodCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgdGl0bGVfbXVsdGlfcGFkZGluZ192OiBmdW5jdGlvbiB0aXRsZV9tdWx0aV9wYWRkaW5nX3Yoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtbm90aWZpY2F0aW9uLS1ob3Jpem9udGFsXCI6IHtcbiAgICAgICAgXCIgLnBlLW5vdGlmaWNhdGlvbl9fdGl0bGUtLW11bHRpLWxpbmVcIjoge1xuICAgICAgICAgIHBhZGRpbmdUb3A6IHZhcnMudGl0bGVfbXVsdGlfcGFkZGluZ192ICsgXCJweFwiLFxuICAgICAgICAgIHBhZGRpbmdCb3R0b206IHZhcnMudGl0bGVfbXVsdGlfcGFkZGluZ192ICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIi5wZS1ub3RpZmljYXRpb24tLXZlcnRpY2FsXCI6IHtcbiAgICAgICAgXCIgLnBlLW5vdGlmaWNhdGlvbl9fdGl0bGUtLW11bHRpLWxpbmVcIjoge1xuICAgICAgICAgIHBhZGRpbmdUb3A6IHZhcnMudGl0bGVfbXVsdGlfcGFkZGluZ192ICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG5cbnZhciB2YXJGbnMkMSA9IF9leHRlbmRzKHt9LCB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbZmxleC5sYXlvdXRDZW50ZXIsIHtcbiAgICAgIHBvaW50ZXJFdmVudHM6IFwiYWxsXCIsXG4gICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcbiAgICAgIG1hcmdpbjogXCIwIGF1dG9cIixcbiAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogXCJhbGxcIixcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBcIiAucGUtbm90aWZpY2F0aW9uX190aXRsZVwiOiB7XG4gICAgICAgIGZsZXg6IFwiMSAwIGF1dG9cIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1ub3RpZmljYXRpb25fX2FjdGlvblwiOiB7XG4gICAgICAgIFwiIC5wZS1idXR0b25cIjoge1xuICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIgLnBlLW5vdGlmaWNhdGlvbl9fY29udGVudFwiOiB7XG4gICAgICAgIG1heFdpZHRoOiBcIjEwMCVcIlxuICAgICAgfSxcbiAgICAgIFwiLnBlLW5vdGlmaWNhdGlvbi0taG9yaXpvbnRhbFwiOiB7XG4gICAgICAgIFwiIC5wZS1ub3RpZmljYXRpb25fX2NvbnRlbnRcIjogZmxleC5sYXlvdXRIb3Jpem9udGFsLFxuICAgICAgICBcIiAucGUtbm90aWZpY2F0aW9uX190aXRsZVwiOiBbZmxleC5mbGV4KCksIHtcbiAgICAgICAgICBhbGlnblNlbGY6IFwiY2VudGVyXCJcbiAgICAgICAgfV0sXG4gICAgICAgIFwiIC5wZS1ub3RpZmljYXRpb25fX2FjdGlvblwiOiBmbGV4LmxheW91dENlbnRlclxuICAgICAgfSxcbiAgICAgIFwiLnBlLW5vdGlmaWNhdGlvbi0tdmVydGljYWxcIjoge1xuICAgICAgICBcIiAucGUtbm90aWZpY2F0aW9uX19jb250ZW50XCI6IFtmbGV4LmxheW91dFZlcnRpY2FsXSxcbiAgICAgICAgXCIgLnBlLW5vdGlmaWNhdGlvbl9fdGl0bGVcIjoge1xuICAgICAgICAgIHBhZGRpbmdCb3R0b206IFwiNnB4XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIgLnBlLW5vdGlmaWNhdGlvbl9fYWN0aW9uXCI6IFtmbGV4LmxheW91dEVuZEp1c3RpZmllZCwge1xuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIlxuICAgICAgICB9XVxuICAgICAgfVxuICAgIH1dKV07XG4gIH1cbn0sIGN1c3RvbUxheW91dEZucyk7XG5cbnZhciBsYXlvdXQgPSBjcmVhdGVMYXlvdXQoe1xuICB2YXJGbnM6IHZhckZucyQxXG59KTtcblxuLy8gQHRzLWNoZWNrXG52YXIgYnV0dG9uUGFkZGluZ0ggPSA4OyAvLyBwYWRkaW5nLCBpbm5lciB0ZXh0IHNwYWNlXG5cbi8qKlxuICogQHR5cGUge05vdGlmaWNhdGlvblZhcnN9IG5vdGlmaWNhdGlvblZhcnNcbiAqL1xuXG52YXIgbm90aWZpY2F0aW9uVmFycyA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICBhbmltYXRpb25fZGVsYXk6IFwiMHNcIixcbiAgYW5pbWF0aW9uX2R1cmF0aW9uOiBcIi4zc1wiLFxuICBhbmltYXRpb25faGlkZV9jc3M6IFwib3BhY2l0eTogMDtcIixcbiAgYW5pbWF0aW9uX3Nob3dfY3NzOiBcIm9wYWNpdHk6IDE7XCIsXG4gIGFuaW1hdGlvbl90aW1pbmdfZnVuY3Rpb246IFwiZWFzZS1pbi1vdXRcIixcbiAgYm9yZGVyX3JhZGl1czogdmFycy51bml0X2Jsb2NrX2JvcmRlcl9yYWRpdXMsXG4gIGZvbnRfc2l6ZTogMTQsXG4gIGxpbmVfaGVpZ2h0OiAyMCxcbiAgbWluX2hlaWdodDogODAsXG4gIHNpZGVfcGFkZGluZzogMjQgLSBidXR0b25QYWRkaW5nSCxcbiAgdGl0bGVfbXVsdGlfcGFkZGluZ192OiAyMCxcbiAgLy8gMjQgLSBuYXR1cmFsIGxpbmUgaGVpZ2h0XG4gIHRpdGxlX3BhZGRpbmdfaDogYnV0dG9uUGFkZGluZ0gsXG4gIHRpdGxlX3NpbmdsZV9wYWRkaW5nX3Y6IDE0LFxuICB3aWR0aDogMjg4LFxuICBjb2xvcl9saWdodF9iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfYmFja2dyb3VuZCksXG4gIGNvbG9yX2xpZ2h0X3RleHQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X2RhcmtfcHJpbWFyeSksXG4gIGNvbG9yX2RhcmtfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfYmFja2dyb3VuZCksXG4gIGNvbG9yX2RhcmtfdGV4dDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3ByaW1hcnkpXG59O1xuXG4vLyBAdHMtY2hlY2tcbnZhciBmbnMgPSBbbGF5b3V0LCBjb2xvcl07XG52YXIgc2VsZWN0b3IgPSBcIi5cIi5jb25jYXQoY2xhc3Nlcy5jb21wb25lbnQpO1xudmFyIGhvbGRlckZucyA9IFtob2xkZXJMYXlvdXRdO1xudmFyIGhvbGRlclNlbGVjdG9yID0gXCIuXCIuY29uY2F0KGNsYXNzZXMuaG9sZGVyKTtcblxudmFyIGFkZFN0eWxlID0gZnVuY3Rpb24gYWRkU3R5bGUoY3VzdG9tU2VsZWN0b3IsIGN1c3RvbVZhcnMpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgX3JlZiRtZWRpYVF1ZXJ5ID0gX3JlZi5tZWRpYVF1ZXJ5LFxuICAgICAgbWVkaWFRdWVyeSA9IF9yZWYkbWVkaWFRdWVyeSA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYkbWVkaWFRdWVyeSxcbiAgICAgIF9yZWYkc2NvcGUgPSBfcmVmLnNjb3BlLFxuICAgICAgc2NvcGUgPSBfcmVmJHNjb3BlID09PSB2b2lkIDAgPyBcIlwiIDogX3JlZiRzY29wZTtcblxuICBjdXN0b21TZWxlY3RvciAmJiBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW2N1c3RvbVNlbGVjdG9yLCBzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogbm90aWZpY2F0aW9uVmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzLFxuICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0pO1xuICBjdXN0b21TZWxlY3RvciAmJiBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW2N1c3RvbVNlbGVjdG9yLCBob2xkZXJTZWxlY3Rvcl0sXG4gICAgZm5zOiBob2xkZXJGbnMsXG4gICAgdmFyczogbm90aWZpY2F0aW9uVmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzLFxuICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0pO1xufTtcblxudmFyIGdldFN0eWxlID0gZnVuY3Rpb24gZ2V0U3R5bGUoKSB7XG4gIHZhciBjdXN0b21TZWxlY3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCJcIjtcbiAgdmFyIGN1c3RvbVZhcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgX3JlZjIkbWVkaWFRdWVyeSA9IF9yZWYyLm1lZGlhUXVlcnksXG4gICAgICBtZWRpYVF1ZXJ5ID0gX3JlZjIkbWVkaWFRdWVyeSA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYyJG1lZGlhUXVlcnksXG4gICAgICBfcmVmMiRzY29wZSA9IF9yZWYyLnNjb3BlLFxuICAgICAgc2NvcGUgPSBfcmVmMiRzY29wZSA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYyJHNjb3BlO1xuXG4gIHJldHVybiBzdHlsZXIuZ2V0U3R5bGUoe1xuICAgIHNlbGVjdG9yczogW2N1c3RvbVNlbGVjdG9yLCBzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogbm90aWZpY2F0aW9uVmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzLFxuICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0pLmNvbmNhdChzdHlsZXIuZ2V0U3R5bGUoe1xuICAgIHNlbGVjdG9yczogW2hvbGRlclNlbGVjdG9yXSxcbiAgICBmbnM6IGhvbGRlckZucyxcbiAgICB2YXJzOiBub3RpZmljYXRpb25WYXJzLFxuICAgIGN1c3RvbVZhcnM6IGN1c3RvbVZhcnMsXG4gICAgbWVkaWFRdWVyeTogbWVkaWFRdWVyeSxcbiAgICBzY29wZTogc2NvcGVcbiAgfSkpO1xufTtcblxudmFyIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCA9IGZ1bmN0aW9uIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCgpIHtcbiAgc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtob2xkZXJTZWxlY3Rvcl0sXG4gICAgZm5zOiBob2xkZXJGbnMsXG4gICAgdmFyczogbm90aWZpY2F0aW9uVmFyc1xuICB9KTtcbiAgc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogbm90aWZpY2F0aW9uVmFyc1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IGFkZEdlbmVyYWxTdHlsZVRvSGVhZCwgYWRkU3R5bGUsIGNvbG9yLCBjdXN0b21MYXlvdXRGbnMsIGdldFN0eWxlLCBob2xkZXJMYXlvdXQsIGxheW91dCwgbm90aWZpY2F0aW9uVmFycyBhcyB2YXJzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb2xvciwgY3JlYXRlTGF5b3V0LCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgY29sb3IgYXMgY29sb3IkMSwgbGF5b3V0IGFzIGxheW91dCQxIH0gZnJvbSAncG9seXRoZW5lLWNzcy1zZWxlY3Rpb24tY29udHJvbCc7XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtcmFkaW8tY29udHJvbFwiXG59O1xuXG4vLyBAdHMtY2hlY2tcbnZhciBjb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgc3VwZXJDb2xvcjogY29sb3IkMVxufSk7XG5cbi8vIEB0cy1jaGVja1xudmFyIHZhckZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBcIiAucGUtcmFkaW8tZ3JvdXBcIjoge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIlxuICAgICAgfVxuICAgIH07XG4gIH1cbn07XG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgdmFyRm5zOiB2YXJGbnMsXG4gIHN1cGVyTGF5b3V0OiBsYXlvdXQkMVxufSk7XG5cbi8vIEB0cy1jaGVja1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi9pbmRleFwiKS5SYWRpb0J1dHRvblZhcnN9IFJhZGlvQnV0dG9uVmFyc1xuICovXG5cbi8qKlxuICogQHR5cGUge1JhZGlvQnV0dG9uVmFyc30gcmFkaW9CdXR0b25WYXJzXG4gKi9cbnZhciByYWRpb0J1dHRvblZhcnMgPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBnZW5lcmFsIHN0eWxlcywgbm90IGRlZmluZWQgYnkgdmFyaWFibGVzXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogdHJ1ZVxufTtcblxuLy8gQHRzLWNoZWNrXG52YXIgZm5zID0gW2xheW91dCwgY29sb3JdO1xudmFyIHNlbGVjdG9yID0gXCIuXCIuY29uY2F0KGNsYXNzZXMuY29tcG9uZW50KTtcbnZhciBhZGRTdHlsZSA9IHN0eWxlci5jcmVhdGVBZGRTdHlsZShzZWxlY3RvciwgZm5zLCByYWRpb0J1dHRvblZhcnMpO1xudmFyIGdldFN0eWxlID0gc3R5bGVyLmNyZWF0ZUdldFN0eWxlKHNlbGVjdG9yLCBmbnMsIHJhZGlvQnV0dG9uVmFycyk7XG5cbnZhciBhZGRHZW5lcmFsU3R5bGVUb0hlYWQgPSBmdW5jdGlvbiBhZGRHZW5lcmFsU3R5bGVUb0hlYWQoKSB7XG4gIHJldHVybiBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW3NlbGVjdG9yXSxcbiAgICBmbnM6IGZucyxcbiAgICB2YXJzOiByYWRpb0J1dHRvblZhcnNcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBhZGRHZW5lcmFsU3R5bGVUb0hlYWQsIGFkZFN0eWxlLCBjb2xvciwgZ2V0U3R5bGUsIGxheW91dCwgcmFkaW9CdXR0b25WYXJzIGFzIHZhcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbG9yLCBzZWwsIGNyZWF0ZUxheW91dCwgbWl4aW4sIHN0eWxlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNzcyc7XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtcmlwcGxlXCIsXG4gIC8vIGVsZW1lbnRzXG4gIG1hc2s6IFwicGUtcmlwcGxlX19tYXNrXCIsXG4gIHdhdmVzOiBcInBlLXJpcHBsZV9fd2F2ZXNcIixcbiAgLy8gc3RhdGVzXG4gIHVuY29uc3RyYWluZWQ6IFwicGUtcmlwcGxlLS11bmNvbnN0cmFpbmVkXCIsXG4gIHdhdmVzQW5pbWF0aW5nOiBcInBlLXJpcHBsZV9fd2F2ZXMtLWFuaW1hdGluZ1wiXG59O1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxudmFyIGdlbmVyYWxGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBjb2xvcjogXCJpbmhlcml0XCJcbiAgICB9KV07XG4gIH1cbn07XG5cbnZhciB0aW50Rm5zID0gZnVuY3Rpb24gdGludEZucyh0aW50KSB7XG4gIHZhciBfcmVmO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yXCIsIGZ1bmN0aW9uIGNvbG9yKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JcIl1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludF1cbiAgICB9KV07XG4gIH0pLCBfcmVmO1xufTtcblxudmFyIGxpZ2h0VGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImRhcmtcIikpO1xuXG52YXIgY29sb3IgPSBjcmVhdGVDb2xvcih7XG4gIHZhckZuczoge1xuICAgIGxpZ2h0VGludEZuczogbGlnaHRUaW50Rm5zLFxuICAgIGRhcmtUaW50Rm5zOiBkYXJrVGludEZuc1xuICB9XG59KTtcblxuLy8gQHRzLWNoZWNrXG52YXIgdmFyRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3RvciwgW21peGluLmZpdCgpLCB7XG4gICAgICBjb2xvcjogXCJpbmhlcml0XCIsXG4gICAgICBib3JkZXJSYWRpdXM6IFwiaW5oZXJpdFwiLFxuICAgICAgcG9pbnRlckV2ZW50czogXCJub25lXCIsXG4gICAgICBcIjpub3QoLnBlLXJpcHBsZS0tdW5jb25zdHJhaW5lZClcIjoge1xuICAgICAgICBib3JkZXJSYWRpdXM6IFwiaW5oZXJpdFwiLFxuICAgICAgICBcIiAucGUtcmlwcGxlX19tYXNrXCI6IHtcbiAgICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIixcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiaW5oZXJpdFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIiAucGUtcmlwcGxlX19tYXNrXCI6IFttaXhpbi5maXQoKSwge1xuICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoMCwwLDApXCJcbiAgICAgIH1dLFxuICAgICAgXCIgLnBlLXJpcHBsZV9fd2F2ZXNcIjoge1xuICAgICAgICBvdXRsaW5lOiBcIjFweCBzb2xpZCB0cmFuc3BhcmVudFwiLFxuICAgICAgICAvLyBmb3IgSUUxMFxuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiLFxuICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1yaXBwbGVfX3dhdmVzLS1hbmltYXRpbmdcIjoge1xuICAgICAgICBkaXNwbGF5OiBcImJsb2NrXCJcbiAgICAgIH1cbiAgICB9XSldO1xuICB9XG59O1xudmFyIGxheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zXG59KTtcblxuLy8gQHRzLWNoZWNrXG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydChcIi4uL2luZGV4XCIpLlJpcHBsZVZhcnN9IFJpcHBsZVZhcnNcbiAqL1xuXG4vKipcbiAqIEB0eXBlIHtSaXBwbGVWYXJzfSByaXBwbGVWYXJzXG4gKi9cbnZhciByaXBwbGVWYXJzID0ge1xuICAvKipcbiAgICogR2VuZXJhdGUgZ2VuZXJhbCBzdHlsZXMsIG5vdCBkZWZpbmVkIGJ5IHZhcmlhYmxlc1xuICAgKi9cbiAgZ2VuZXJhbF9zdHlsZXM6IHRydWUsXG4gIGNvbG9yOiBcImluaGVyaXRcIiAvLyBvbmx5IHNwZWNpZnkgdGhpcyB2YXJpYWJsZSB0byBnZXQgYm90aCBzdGF0ZXNcbiAgLy8gY29sb3JfbGlnaHQ6ICAgXCJpbmhlcml0XCIsXG4gIC8vIGNvbG9yX2Rhcms6ICAgIFwiaW5oZXJpdFwiXG5cbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXQsIGNvbG9yXTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudCk7XG52YXIgYWRkU3R5bGUgPSBzdHlsZXIuY3JlYXRlQWRkU3R5bGUoc2VsZWN0b3IsIGZucywgcmlwcGxlVmFycyk7XG52YXIgZ2V0U3R5bGUgPSBzdHlsZXIuY3JlYXRlR2V0U3R5bGUoc2VsZWN0b3IsIGZucywgcmlwcGxlVmFycyk7XG5cbnZhciBhZGRHZW5lcmFsU3R5bGVUb0hlYWQgPSBmdW5jdGlvbiBhZGRHZW5lcmFsU3R5bGVUb0hlYWQoKSB7XG4gIHJldHVybiBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW3NlbGVjdG9yXSxcbiAgICBmbnM6IGZucyxcbiAgICB2YXJzOiByaXBwbGVWYXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBsYXlvdXQsIHJpcHBsZVZhcnMgYXMgdmFycyB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlQ29sb3IsIHNlbCwgY3JlYXRlTGF5b3V0LCBmbGV4LCByZ2JhLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgdmFycyB9IGZyb20gJ3BvbHl0aGVuZS10aGVtZSc7XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtc2VhcmNoXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGNvbnRlbnQ6IFwicGUtc2VhcmNoX19jb250ZW50XCIsXG4gIC8vIHN0YXRlc1xuICBzZWFyY2hGdWxsV2lkdGg6IFwicGUtc2VhcmNoLS1mdWxsLXdpZHRoXCIsXG4gIHNlYXJjaEluc2V0OiBcInBlLXNlYXJjaC0taW5zZXRcIlxufTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbnZhciBnZW5lcmFsRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQtYXJlYVwiOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9XG59O1xuXG52YXIgdGludEZucyA9IGZ1bmN0aW9uIHRpbnRGbnModGludCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZ3JvdW5kXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZ3JvdW5kXCJdXG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfbGFiZWxfdGV4dFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXRleHRmaWVsZFwiOiB7XG4gICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2xhYmVsX3RleHRcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2lucHV0X3RleHRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRcIjoge1xuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dFwiOiB7XG4gICAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9pbnB1dF90ZXh0XCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfcmVmO1xufTtcblxudmFyIGxpZ2h0VGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImRhcmtcIikpO1xuXG52YXIgY29sb3IgPSBjcmVhdGVDb2xvcih7XG4gIHZhckZuczoge1xuICAgIGxpZ2h0VGludEZuczogbGlnaHRUaW50Rm5zLFxuICAgIGRhcmtUaW50Rm5zOiBkYXJrVGludEZuc1xuICB9XG59KTtcblxuLy8gQHRzLWNoZWNrXG5cbnZhciBpbnNldF9oZWlnaHRfbGluZV9oZWlnaHRfaW5wdXQgPSBmdW5jdGlvbiBpbnNldF9oZWlnaHRfbGluZV9oZWlnaHRfaW5wdXQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgdmFyIGluc2V0X2lucHV0X3BhZGRpbmdfdiA9ICh2YXJzLmluc2V0X2hlaWdodCAtIHZhcnMubGluZV9oZWlnaHRfaW5wdXQpIC8gMjtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiLnBlLXNlYXJjaC0taW5zZXRcIjoge1xuICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQsIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogaW5zZXRfaW5wdXRfcGFkZGluZ192ICsgXCJweFwiLFxuICAgICAgICBwYWRkaW5nQm90dG9tOiBpbnNldF9pbnB1dF9wYWRkaW5nX3YgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGZ1bGxfd2lkdGhfaGVpZ2h0X2xpbmVfaGVpZ2h0X2lucHV0ID0gZnVuY3Rpb24gZnVsbF93aWR0aF9oZWlnaHRfbGluZV9oZWlnaHRfaW5wdXQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgdmFyIGZ1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ192ID0gKHZhcnMuZnVsbF93aWR0aF9oZWlnaHQgLSB2YXJzLmxpbmVfaGVpZ2h0X2lucHV0KSAvIDI7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIi5wZS1zZWFyY2gtLWZ1bGwtd2lkdGhcIjoge1xuICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQsIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgcGFkZGluZ1RvcDogZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX3YgKyBcInB4XCIsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IGZ1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ192ICsgXCJweFwiXG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciB2YXJGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbZmxleC5mbGV4KCksIHtcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAvLyBuZWNlc3Nhcnkgd2hlbiBhIHNoYWRvdyBpcyBhZGRlZFxuICAgICAgXCIgLnBlLXRleHRmaWVsZFwiOiBbZmxleC5mbGV4KCksIHtcbiAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcbiAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgLy8gcHJldmVudCB0aGF0IG5laWdoYm9yaW5nIGljb24gYnV0dG9uIHdpdGggcmlwcGxlIGhpZGVzIHRoZSBjdXJzb3JcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dC1hcmVhXCI6IHtcbiAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgIFwiOmFmdGVyXCI6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IFwibm9uZVwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dFwiOiB7XG4gICAgICAgICAgLy8gcmVzZXRcbiAgICAgICAgICBib3JkZXI6IFwibm9uZVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgICAvLyByZXNldFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgfVxuICAgICAgfV0sXG4gICAgICBcIiAucGUtc2VhcmNoX19jb250ZW50XCI6IHtcbiAgICAgICAgXCImLCAucGUtdGV4dGZpZWxkXCI6IGZsZXgubGF5b3V0SG9yaXpvbnRhbCxcbiAgICAgICAgXCImLCAucGUtdGV4dGZpZWxkX19pbnB1dC1hcmVhXCI6IHtcbiAgICAgICAgICBmbGV4R3JvdzogMVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIgLnBlLXNlYXJjaF9fY29udGVudCA+ICpcIjogW2ZsZXgubGF5b3V0VmVydGljYWwsIGZsZXguc2VsZkNlbnRlcl0sXG4gICAgICBcIi5wZS1zZWFyY2gtLWluc2V0XCI6IHtcbiAgICAgICAgXCImLCAucGUtdGV4dGZpZWxkX19pbnB1dC1hcmVhLCAucGUtdGV4dGZpZWxkX19pbnB1dCwgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIHBhZGRpbmc6IDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKV07XG4gIH0sXG4gIGZvbnRfc2l6ZV9pbnB1dDogZnVuY3Rpb24gZm9udF9zaXplX2lucHV0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRcIjoge1xuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dCwgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIGZvbnRTaXplOiB2YXJzLmZvbnRfc2l6ZV9pbnB1dCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBsaW5lX2hlaWdodF9pbnB1dDogZnVuY3Rpb24gbGluZV9oZWlnaHRfaW5wdXQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQsIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgbGluZUhlaWdodDogdmFycy5saW5lX2hlaWdodF9pbnB1dCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pLCBpbnNldF9oZWlnaHRfbGluZV9oZWlnaHRfaW5wdXQoc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgaW5zZXRfYm9yZGVyX3JhZGl1czogZnVuY3Rpb24gaW5zZXRfYm9yZGVyX3JhZGl1cyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1zZWFyY2gtLWluc2V0XCI6IHtcbiAgICAgICAgXCJib3JkZXItcmFkaXVzXCI6IHZhcnMuaW5zZXRfYm9yZGVyX3JhZGl1cyArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgaW5zZXRfc2lkZV9wYWRkaW5nOiBmdW5jdGlvbiBpbnNldF9zaWRlX3BhZGRpbmcoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc2VhcmNoLS1pbnNldFwiOiB7XG4gICAgICAgIHBhZGRpbmc6IFwiMCBcIiArIHZhcnMuaW5zZXRfc2lkZV9wYWRkaW5nICsgXCJweFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBpbnNldF9oZWlnaHQ6IGZ1bmN0aW9uIGluc2V0X2hlaWdodChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1zZWFyY2gtLWluc2V0XCI6IHtcbiAgICAgICAgXCImLCAucGUtdGV4dGZpZWxkX19pbnB1dC1hcmVhLCAucGUtdGV4dGZpZWxkX19pbnB1dCwgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgaGVpZ2h0OiB2YXJzLmluc2V0X2hlaWdodCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSksIGluc2V0X2hlaWdodF9saW5lX2hlaWdodF9pbnB1dChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBmdWxsX3dpZHRoX2hlaWdodDogZnVuY3Rpb24gZnVsbF93aWR0aF9oZWlnaHQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc2VhcmNoLS1mdWxsLXdpZHRoXCI6IHtcbiAgICAgICAgXCImLCAucGUtdGV4dGZpZWxkX19pbnB1dC1hcmVhLCAucGUtdGV4dGZpZWxkX19pbnB1dCwgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIGhlaWdodDogdmFycy5mdWxsX3dpZHRoX2hlaWdodCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSksIGZ1bGxfd2lkdGhfaGVpZ2h0X2xpbmVfaGVpZ2h0X2lucHV0KHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIGluc2V0X2lucHV0X2luZGVudDogZnVuY3Rpb24gaW5zZXRfaW5wdXRfaW5kZW50KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXNlYXJjaC0taW5zZXRcIjoge1xuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dCwgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIHBhZGRpbmdMZWZ0OiB2YXJzLmluc2V0X2lucHV0X2luZGVudCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBpbnNldF9pbnB1dF9yaWdodF9wYWRkaW5nOiBmdW5jdGlvbiBpbnNldF9pbnB1dF9yaWdodF9wYWRkaW5nKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXNlYXJjaC0taW5zZXRcIjoge1xuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dCwgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIHBhZGRpbmdSaWdodDogdmFycy5pbnNldF9pbnB1dF9yaWdodF9wYWRkaW5nICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGZ1bGxfd2lkdGhfc2lkZV9wYWRkaW5nOiBmdW5jdGlvbiBmdWxsX3dpZHRoX3NpZGVfcGFkZGluZyhzZWxlY3RvciwgdmFycyQxKSB7XG4gICAgdmFyIGZ1bGxfd2lkdGhfaW5wdXRfaW5kZW50ID0gdmFycy51bml0X2luZGVudCAtIHZhcnMkMS5mdWxsX3dpZHRoX3NpZGVfcGFkZGluZyAtIHZhcnMuZ3JpZF91bml0X2ljb25fYnV0dG9uO1xuICAgIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXNlYXJjaC0tZnVsbC13aWR0aFwiOiB7XG4gICAgICAgIHBhZGRpbmc6IFwiMCBcIiArIHZhcnMkMS5mdWxsX3dpZHRoX3NpZGVfcGFkZGluZyArIFwicHhcIixcbiAgICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQsIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgICBwYWRkaW5nTGVmdDogZnVsbF93aWR0aF9pbnB1dF9pbmRlbnQgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiLnBlLXNlYXJjaC0tZnVsbC13aWR0aCArIC5wZS1saXN0IC5wZS1saXN0LXRpbGVcIjoge1xuICAgICAgICBcIj4gOmZpcnN0LWNoaWxkXCI6IHtcbiAgICAgICAgICBwYWRkaW5nTGVmdDogdmFycyQxLmZ1bGxfd2lkdGhfc2lkZV9wYWRkaW5nICsgXCJweFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiPiA6bGFzdC1jaGlsZFwiOiB7XG4gICAgICAgICAgcGFkZGluZ1JpZ2h0OiB2YXJzJDEuZnVsbF93aWR0aF9zaWRlX3BhZGRpbmcgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBmdWxsX3dpZHRoX2JvcmRlcl9yYWRpdXM6IGZ1bmN0aW9uIGZ1bGxfd2lkdGhfYm9yZGVyX3JhZGl1cyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1zZWFyY2gtLWZ1bGwtd2lkdGhcIjoge1xuICAgICAgICBib3JkZXJSYWRpdXM6IHZhcnMuZnVsbF93aWR0aF9ib3JkZXJfcmFkaXVzICsgXCJweFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBmdWxsX3dpZHRoX2lucHV0X3JpZ2h0X3BhZGRpbmc6IGZ1bmN0aW9uIGZ1bGxfd2lkdGhfaW5wdXRfcmlnaHRfcGFkZGluZyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1zZWFyY2gtLWZ1bGwtd2lkdGhcIjoge1xuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dCwgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIHBhZGRpbmdSaWdodDogdmFycy5mdWxsX3dpZHRoX2lucHV0X3JpZ2h0X3BhZGRpbmcgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfVxufTtcbnZhciBsYXlvdXQgPSBjcmVhdGVMYXlvdXQoe1xuICB2YXJGbnM6IHZhckZuc1xufSk7XG5cbi8vIEB0cy1jaGVja1xuLyoqXG4gKiBAdHlwZSB7U2VhcmNoVmFyc30gc2VhcmNoVmFyc1xuICovXG5cbnZhciBzZWFyY2hWYXJzID0ge1xuICAvKipcbiAgICogR2VuZXJhdGUgZ2VuZXJhbCBzdHlsZXMsIG5vdCBkZWZpbmVkIGJ5IHZhcmlhYmxlc1xuICAgKi9cbiAgZ2VuZXJhbF9zdHlsZXM6IHRydWUsXG4gIGZvbnRfc2l6ZV9pbnB1dDogMjAsXG4gIGZ1bGxfd2lkdGhfYm9yZGVyX3JhZGl1czogMCxcbiAgZnVsbF93aWR0aF9oZWlnaHQ6IDU2LFxuICBmdWxsX3dpZHRoX2lucHV0X3JpZ2h0X3BhZGRpbmc6IDAsXG4gIGZ1bGxfd2lkdGhfc2lkZV9tYXJnaW46IDAsXG4gIGZ1bGxfd2lkdGhfc2lkZV9wYWRkaW5nOiA4LFxuICBpbnNldF9ib3JkZXJfcmFkaXVzOiB2YXJzLnVuaXRfYmxvY2tfYm9yZGVyX3JhZGl1cyxcbiAgaW5zZXRfaGVpZ2h0OiA0OCxcbiAgaW5zZXRfaW5wdXRfaW5kZW50OiAxNixcbiAgaW5zZXRfaW5wdXRfcmlnaHRfcGFkZGluZzogMCxcbiAgaW5zZXRfc2lkZV9wYWRkaW5nOiAwLFxuICBsaW5lX2hlaWdodF9pbnB1dDogMjAsXG4gIGNvbG9yX2xpZ2h0X2xhYmVsX3RleHQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfZGlzYWJsZWQpLFxuICBjb2xvcl9saWdodF9pbnB1dF90ZXh0OiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3ByaW1hcnkpLFxuICBjb2xvcl9saWdodF9iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfYmFja2dyb3VuZCksXG4gIGNvbG9yX2RhcmtfbGFiZWxfdGV4dDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX3RleHRfZGlzYWJsZWQpLFxuICBjb2xvcl9kYXJrX2lucHV0X3RleHQ6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3ByaW1hcnkpLFxuICBjb2xvcl9kYXJrX2JhY2tncm91bmQ6IHJnYmEodmFycy5jb2xvcl9kYXJrX2JhY2tncm91bmQpXG59O1xuXG4vLyBAdHMtY2hlY2tcbnZhciBmbnMgPSBbbGF5b3V0LCBjb2xvcl07XG52YXIgc2VsZWN0b3IgPSBcIi5cIi5jb25jYXQoY2xhc3Nlcy5jb21wb25lbnQpO1xudmFyIGFkZFN0eWxlID0gc3R5bGVyLmNyZWF0ZUFkZFN0eWxlKHNlbGVjdG9yLCBmbnMsIHNlYXJjaFZhcnMpO1xudmFyIGdldFN0eWxlID0gc3R5bGVyLmNyZWF0ZUdldFN0eWxlKHNlbGVjdG9yLCBmbnMsIHNlYXJjaFZhcnMpO1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogc2VhcmNoVmFyc1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IGFkZEdlbmVyYWxTdHlsZVRvSGVhZCwgYWRkU3R5bGUsIGNvbG9yLCBnZXRTdHlsZSwgbGF5b3V0LCBzZWFyY2hWYXJzIGFzIHZhcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbG9yLCBzZWwsIGNyZWF0ZUxheW91dCwgZmxleCwgbWl4aW4sIHJnYmEsIHN0eWxlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNzcyc7XG5pbXBvcnQgeyB2YXJzIGFzIHZhcnMkMSB9IGZyb20gJ3BvbHl0aGVuZS10aGVtZSc7XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtc2xpZGVyXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGNvbnRyb2w6IFwicGUtc2xpZGVyX19jb250cm9sXCIsXG4gIGxhYmVsOiBcInBlLXNsaWRlcl9fbGFiZWxcIixcbiAgcGluOiBcInBlLXNsaWRlcl9fcGluXCIsXG4gIHRodW1iOiBcInBlLXNsaWRlcl9fdGh1bWJcIixcbiAgdGljazogXCJwZS1zbGlkZXJfX3RpY2tcIixcbiAgdGlja3M6IFwicGUtc2xpZGVyX190aWNrc1wiLFxuICB0cmFjazogXCJwZS1zbGlkZXJfX3RyYWNrXCIsXG4gIHRyYWNrQmFyOiBcInBlLXNsaWRlcl9fdHJhY2stYmFyXCIsXG4gIHRyYWNrQmFyVmFsdWU6IFwicGUtc2xpZGVyX190cmFjay1iYXItdmFsdWVcIixcbiAgdHJhY2tQYXJ0OiBcInBlLXNsaWRlcl9fdHJhY2stcGFydFwiLFxuICB0cmFja1BhcnRSZXN0OiBcInBlLXNsaWRlcl9fdHJhY2stcmVzdFwiLFxuICB0cmFja1BhcnRWYWx1ZTogXCJwZS1zbGlkZXJfX3RyYWNrLXZhbHVlXCIsXG4gIC8vIHN0YXRlc1xuICBoYXNGb2N1czogXCJwZS1zbGlkZXItLWZvY3VzXCIsXG4gIGhhc1BpbjogXCJwZS1zbGlkZXItLXBpblwiLFxuICBoYXNUaWNrczogXCJwZS1zbGlkZXItLXRpY2tzXCIsXG4gIGhhc1RyYWNrOiBcInBlLXNsaWRlci0tdHJhY2tcIixcbiAgaXNBY3RpdmU6IFwicGUtc2xpZGVyLS1hY3RpdmVcIixcbiAgaXNBdE1pbjogXCJwZS1zbGlkZXItLW1pblwiLFxuICBpc0Rpc2FibGVkOiBcInBlLXNsaWRlci0tZGlzYWJsZWRcIixcbiAgdGlja1ZhbHVlOiBcInBlLXNsaWRlcl9fdGljay0tdmFsdWVcIlxufTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbnZhciBnZW5lcmFsRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXNsaWRlcl9fY29udHJvbFwiOiB7XG4gICAgICAgIFwiOmFmdGVyXCI6IHtcbiAgICAgICAgICBib3JkZXJDb2xvcjogXCJ0cmFuc3BhcmVudFwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIiAucGUtc2xpZGVyX19waW5cIjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiY3VycmVudGNvbG9yXCIsXG4gICAgICAgIFwiOmJlZm9yZVwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcImluaGVyaXRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCI6bm90KC5wZS1zbGlkZXItLWRpc2FibGVkKVwiOiB7XG4gICAgICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2xcIjoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJjdXJyZW50Y29sb3JcIlxuICAgICAgICB9LFxuICAgICAgICBcIiAucGUtc2xpZGVyX190cmFjay12YWx1ZSAucGUtc2xpZGVyX190cmFjay1iYXItdmFsdWVcIjoge1xuICAgICAgICAgIGJhY2tncm91bmQ6IFwiY3VycmVudGNvbG9yXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIucGUtc2xpZGVyLS1mb2N1czpub3QoLnBlLXNsaWRlci0tbWluKTpub3QoLnBlLXNsaWRlci0tcGluKSAucGUtc2xpZGVyX19jb250cm9sOmJlZm9yZSxcXFxuICAgICAgICAmOm5vdCgucGUtc2xpZGVyLS1taW4pOm5vdCgucGUtc2xpZGVyLS1waW4pIC5wZS1zbGlkZXJfX2NvbnRyb2w6Zm9jdXM6YmVmb3JlXCI6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiY3VycmVudGNvbG9yXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiLnBlLXNsaWRlci0tbWluOm5vdCgucGUtc2xpZGVyLS1kaXNhYmxlZCk6bm90KC5wZS1zbGlkZXItLXRpY2tzKVwiOiB7XG4gICAgICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2xcIjoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiIC5wZS1zbGlkZXJfX3RodW1iXCI6IHtcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH0sXG4gICAgICAgIFwiLnBlLXNsaWRlci0tdGlja3NcIjoge1xuICAgICAgICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2w6YWZ0ZXJcIjoge1xuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwidHJhbnNwYXJlbnRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfVxufTtcblxudmFyIHRpbnRGbnMgPSBmdW5jdGlvbiB0aW50Rm5zKHRpbnQpIHtcbiAgdmFyIF9yZWY7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfaWNvblwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCI6bm90KC5wZS1zbGlkZXItLWRpc2FibGVkKVwiOiB7XG4gICAgICAgIFwiIC5wZS1pY29uXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2ljb25cIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2xhYmVsXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIjpub3QoLnBlLXNsaWRlci0tZGlzYWJsZWQpXCI6IHtcbiAgICAgICAgXCIgLnBlLXNsaWRlcl9fbGFiZWxcIjoge1xuICAgICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfbGFiZWxcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3RodW1iX29uXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3RodW1iX29uXCJdIC8vIG92ZXJyaWRlIGJ5IHNwZWNpZnlpbmcgXCJjb2xvclwiXG5cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90cmFja19pbmFjdGl2ZVwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXNsaWRlcl9fdHJhY2stYmFyLXZhbHVlXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3RyYWNrX2luYWN0aXZlXCJdXG4gICAgICB9LFxuICAgICAgXCIucGUtc2xpZGVyLS1taW46bm90KC5wZS1zbGlkZXItLWRpc2FibGVkKTpub3QoLnBlLXNsaWRlci0tdGlja3MpXCI6IHtcbiAgICAgICAgXCIgLnBlLXNsaWRlcl9fY29udHJvbDphZnRlclwiOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90cmFja19pbmFjdGl2ZVwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfdGlja1wiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXNsaWRlcl9fdGlja1wiOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90aWNrXCJdXG4gICAgICB9LFxuICAgICAgXCIucGUtc2xpZGVyLS1taW46bm90KC5wZS1zbGlkZXItLWRpc2FibGVkKVwiOiB7XG4gICAgICAgIFwiLnBlLXNsaWRlci0tdGlja1wiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdGlja1wiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfdGlja192YWx1ZVwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXNsaWRlcl9fdGljay0tdmFsdWVcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdGlja192YWx1ZVwiXVxuICAgICAgfSxcbiAgICAgIFwiLnBlLXNsaWRlci0tbWluOm5vdCgucGUtc2xpZGVyLS1kaXNhYmxlZClcIjoge1xuICAgICAgICBcIi5wZS1zbGlkZXItLXRpY2stLXZhbHVlXCI6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90aWNrX3ZhbHVlXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9kaXNhYmxlZF9pY29uXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtaWNvblwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfZGlzYWJsZWRfaWNvblwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2Rpc2FibGVkX2xhYmVsXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtc2xpZGVyX19sYWJlbFwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfZGlzYWJsZWRfbGFiZWxcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90cmFja19hY3RpdmVcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXNsaWRlci0tYWN0aXZlXCI6IHtcbiAgICAgICAgXCIgLnBlLXNsaWRlcl9fdHJhY2stYmFyLXZhbHVlXCI6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdHJhY2tfYWN0aXZlXCJdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIi5wZS1zbGlkZXItLW1pbjpub3QoLnBlLXNsaWRlci0tZGlzYWJsZWQpXCI6IHtcbiAgICAgICAgXCIucGUtc2xpZGVyLS1hY3RpdmUgLnBlLXNsaWRlcl9fY29udHJvbDphZnRlclwiOiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90cmFja19hY3RpdmVcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3RodW1iX2luYWN0aXZlXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1zbGlkZXItLWRpc2FibGVkXCI6IHtcbiAgICAgICAgXCIgLnBlLXNsaWRlcl9fY29udHJvbFwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZDogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3RodW1iX2luYWN0aXZlXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90aHVtYl9iYWNrZ3JvdW5kXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIjpub3QoLnBlLXNsaWRlci0tZGlzYWJsZWQpXCI6IHtcbiAgICAgICAgXCIgLnBlLXNsaWRlcl9fY29udHJvbFwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdGh1bWJfYmFja2dyb3VuZFwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfdGh1bWJfb2ZmX2ZvY3VzX29wYWNpdHlcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiOm5vdCgucGUtc2xpZGVyLS1kaXNhYmxlZClcIjoge1xuICAgICAgICBcIiAucGUtc2xpZGVyX19jb250cm9sXCI6IHtcbiAgICAgICAgICBcIjpiZWZvcmVcIjoge1xuICAgICAgICAgICAgb3BhY2l0eTogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3RodW1iX29mZl9mb2N1c19vcGFjaXR5XCJdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfdGh1bWJfb2ZmX2ZvY3VzXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIjpub3QoLnBlLXNsaWRlci0tZGlzYWJsZWQpXCI6IHtcbiAgICAgICAgXCIucGUtc2xpZGVyLS1mb2N1cy5wZS1zbGlkZXItLW1pbjpub3QoLnBlLXNsaWRlci0tcGluKSAucGUtc2xpZGVyX19jb250cm9sOmJlZm9yZSxcXFxuICAgICAgICAucGUtc2xpZGVyLS1taW46bm90KC5wZS1zbGlkZXItLXBpbikgLnBlLXNsaWRlcl9fY29udHJvbDpmb2N1czpiZWZvcmVcIjoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3RodW1iX29mZl9mb2N1c1wiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfdGh1bWJfb25fZm9jdXNfb3BhY2l0eVwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCI6bm90KC5wZS1zbGlkZXItLWRpc2FibGVkKVwiOiB7XG4gICAgICAgIFwiLnBlLXNsaWRlci0tZm9jdXM6bm90KC5wZS1zbGlkZXItLW1pbik6bm90KC5wZS1zbGlkZXItLXBpbikgLnBlLXNsaWRlcl9fY29udHJvbDpiZWZvcmUsXFxcbiAgICAgICAgJjpub3QoLnBlLXNsaWRlci0tbWluKTpub3QoLnBlLXNsaWRlci0tcGluKSAucGUtc2xpZGVyX19jb250cm9sOmZvY3VzOmJlZm9yZVwiOiB7XG4gICAgICAgICAgb3BhY2l0eTogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3RodW1iX29uX2ZvY3VzX29wYWNpdHlcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3Bpbl9sYWJlbFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXNsaWRlcl9fcGluOmFmdGVyXCI6IHtcbiAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9waW5fbGFiZWxcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9waW5fYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXNsaWRlcl9fcGluXCI6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfcGluX2JhY2tncm91bmRcIl1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90cmFja192YWx1ZVwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCI6bm90KC5wZS1zbGlkZXItLWRpc2FibGVkKVwiOiB7XG4gICAgICAgIFwiIC5wZS1zbGlkZXJfX3RyYWNrLXZhbHVlIC5wZS1zbGlkZXJfX3RyYWNrLWJhci12YWx1ZVwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdHJhY2tfdmFsdWVcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9yZWY7XG59O1xuXG52YXIgbGlnaHRUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJsaWdodFwiKSk7XG5cbnZhciBkYXJrVGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwiZGFya1wiKSk7XG5cbnZhciBjb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgdmFyRm5zOiB7XG4gICAgbGlnaHRUaW50Rm5zOiBsaWdodFRpbnRGbnMsXG4gICAgZGFya1RpbnRGbnM6IGRhcmtUaW50Rm5zXG4gIH1cbn0pO1xuXG4vLyBAdHMtY2hlY2tcblxudmFyIGdldFRodW1iU2l6ZSA9IGZ1bmN0aW9uIGdldFRodW1iU2l6ZSh2YXJzKSB7XG4gIHZhciB0aHVtYlNpemUgPSBNYXRoLm1heCh2YXJzLnRodW1iX3NpemUsIDIgKiB2YXJzLnRodW1iX2JvcmRlcl93aWR0aCk7XG4gIHZhciBiYXJPZmZzZXQgPSB0aHVtYlNpemUgLyAyO1xuICB2YXIgc3RlcHNPZmZzZXQgPSBiYXJPZmZzZXQgLSAxO1xuICByZXR1cm4ge1xuICAgIG5vcm1hbFRodW1iU2l6ZTogdGh1bWJTaXplLFxuICAgIGRpc2FibGVkVGh1bWJTaXplOiB0aHVtYlNpemUgLSAyICogdmFycy50aHVtYl9ib3JkZXJfd2lkdGgsXG4gICAgYmFyT2Zmc2V0OiBiYXJPZmZzZXQsXG4gICAgc3RlcHNPZmZzZXQ6IHN0ZXBzT2Zmc2V0XG4gIH07XG59O1xuXG52YXIgZ2V0Qm9yZGVyV2lkdGggPSBmdW5jdGlvbiBnZXRCb3JkZXJXaWR0aCh2YXJzKSB7XG4gIHZhciBib3JkZXJXaWR0aCA9IHZhcnMudGh1bWJfYm9yZGVyX3dpZHRoO1xuICB2YXIgc2NhbGVkQm9yZGVyV2lkdGggPSBNYXRoLm1heCgxLCB2YXJzLnRodW1iX2JvcmRlcl93aWR0aCAvIHZhcnMuYWN0aXZlX3RodW1iX3NjYWxlKTtcbiAgcmV0dXJuIHtcbiAgICBub3JtYWxCb3JkZXJXaWR0aDogYm9yZGVyV2lkdGgsXG4gICAgZGlzYWJsZWRCb3JkZXJXaWR0aDogMSAvIHZhcnMuZGlzYWJsZWRfdGh1bWJfc2NhbGUgKiB2YXJzLnRodW1iX2JvcmRlcl93aWR0aCxcbiAgICBzY2FsZWRCb3JkZXJXaWR0aDogc2NhbGVkQm9yZGVyV2lkdGhcbiAgfTtcbn07XG5cbnZhciB0aHVtYl9zaXplX3RodW1iX2JvcmRlcl93aWR0aF9kaXNhYmxlZF90aHVtYl9zY2FsZSA9IGZ1bmN0aW9uIHRodW1iX3NpemVfdGh1bWJfYm9yZGVyX3dpZHRoX2Rpc2FibGVkX3RodW1iX3NjYWxlKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHZhciBfZ2V0VGh1bWJTaXplID0gZ2V0VGh1bWJTaXplKHZhcnMpLFxuICAgICAgbm9ybWFsVGh1bWJTaXplID0gX2dldFRodW1iU2l6ZS5ub3JtYWxUaHVtYlNpemUsXG4gICAgICBkaXNhYmxlZFRodW1iU2l6ZSA9IF9nZXRUaHVtYlNpemUuZGlzYWJsZWRUaHVtYlNpemU7XG5cbiAgdmFyIF9nZXRCb3JkZXJXaWR0aCA9IGdldEJvcmRlcldpZHRoKHZhcnMpLFxuICAgICAgbm9ybWFsQm9yZGVyV2lkdGggPSBfZ2V0Qm9yZGVyV2lkdGgubm9ybWFsQm9yZGVyV2lkdGgsXG4gICAgICBkaXNhYmxlZEJvcmRlcldpZHRoID0gX2dldEJvcmRlcldpZHRoLmRpc2FibGVkQm9yZGVyV2lkdGg7XG5cbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2w6YWZ0ZXJcIjoge1xuICAgICAgYm9yZGVyV2lkdGg6IG5vcm1hbEJvcmRlcldpZHRoICsgXCJweFwiLFxuICAgICAgd2lkdGg6IG5vcm1hbFRodW1iU2l6ZSArIFwicHhcIixcbiAgICAgIGhlaWdodDogbm9ybWFsVGh1bWJTaXplICsgXCJweFwiLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMFxuICAgIH0sXG4gICAgXCIucGUtc2xpZGVyLS1kaXNhYmxlZCAucGUtc2xpZGVyX19jb250cm9sOmFmdGVyXCI6IHtcbiAgICAgIGJvcmRlcldpZHRoOiBkaXNhYmxlZEJvcmRlcldpZHRoICsgXCJweFwiLFxuICAgICAgd2lkdGg6IGRpc2FibGVkVGh1bWJTaXplICsgXCJweFwiLFxuICAgICAgaGVpZ2h0OiBkaXNhYmxlZFRodW1iU2l6ZSArIFwicHhcIixcbiAgICAgIGxlZnQ6IG5vcm1hbFRodW1iU2l6ZSAtIGRpc2FibGVkVGh1bWJTaXplICsgXCJweFwiLFxuICAgICAgdG9wOiBub3JtYWxUaHVtYlNpemUgLSBkaXNhYmxlZFRodW1iU2l6ZSArIFwicHhcIlxuICAgIH0sXG4gICAgXCIucGUtc2xpZGVyLS10aWNrcyAucGUtc2xpZGVyX19jb250cm9sOmFmdGVyXCI6IHtcbiAgICAgIGJvcmRlcldpZHRoOiAwXG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBoZWlnaHRfdHJhY2tfaGVpZ2h0ID0gZnVuY3Rpb24gaGVpZ2h0X3RyYWNrX2hlaWdodChzZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gc2VsKHNlbGVjdG9yLCB7XG4gICAgbWFyZ2luVG9wOiAodmFycy5oZWlnaHQgLSB2YXJzLnRyYWNrX2hlaWdodCkgLyAyICsgXCJweCBcIlxuICB9KTtcbn07XG5cbnZhciB0cmFja19oZWlnaHRfYmFyX2hlaWdodCA9IGZ1bmN0aW9uIHRyYWNrX2hlaWdodF9iYXJfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtc2xpZGVyX190cmFjay1wYXJ0XCI6IHtcbiAgICAgIG1hcmdpbjogKHZhcnMudHJhY2tfaGVpZ2h0IC0gdmFycy5iYXJfaGVpZ2h0KSAvIDIgKyBcInB4IDBcIlxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgdGh1bWJfc2l6ZV90aHVtYl90b3VjaF9zaXplID0gZnVuY3Rpb24gdGh1bWJfc2l6ZV90aHVtYl90b3VjaF9zaXplKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHZhciBfZ2V0VGh1bWJTaXplMiA9IGdldFRodW1iU2l6ZSh2YXJzKSxcbiAgICAgIG5vcm1hbFRodW1iU2l6ZSA9IF9nZXRUaHVtYlNpemUyLm5vcm1hbFRodW1iU2l6ZTtcblxuICByZXR1cm4gc2VsKHNlbGVjdG9yLCB7XG4gICAgXCIgLnBlLXNsaWRlcl9fY29udHJvbDpiZWZvcmVcIjoge1xuICAgICAgbGVmdDogLXZhcnMudGh1bWJfdG91Y2hfc2l6ZSAvIDIgKyBub3JtYWxUaHVtYlNpemUgLyAyICsgXCJweFwiLFxuICAgICAgdG9wOiAtdmFycy50aHVtYl90b3VjaF9zaXplIC8gMiArIG5vcm1hbFRodW1iU2l6ZSAvIDIgKyBcInB4XCJcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIHRodW1iX3NpemVfYWN0aXZlX3RodW1iX3NjYWxlID0gZnVuY3Rpb24gdGh1bWJfc2l6ZV9hY3RpdmVfdGh1bWJfc2NhbGUoc2VsZWN0b3IsIHZhcnMpIHtcbiAgdmFyIF9nZXRUaHVtYlNpemUzID0gZ2V0VGh1bWJTaXplKHZhcnMpLFxuICAgICAgbm9ybWFsVGh1bWJTaXplID0gX2dldFRodW1iU2l6ZTMubm9ybWFsVGh1bWJTaXplO1xuXG4gIHZhciBfZ2V0Qm9yZGVyV2lkdGgyID0gZ2V0Qm9yZGVyV2lkdGgodmFycyksXG4gICAgICBzY2FsZWRCb3JkZXJXaWR0aCA9IF9nZXRCb3JkZXJXaWR0aDIuc2NhbGVkQm9yZGVyV2lkdGg7XG5cbiAgdmFyIHNjYWxlZFRodW1iRGlmZiA9ICh2YXJzLmFjdGl2ZV90aHVtYl9zY2FsZSAtIDEpICogbm9ybWFsVGh1bWJTaXplIC8gMjtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiLnBlLXNsaWRlci0tYWN0aXZlOm5vdCgucGUtc2xpZGVyLS10aWNrcylcIjoge1xuICAgICAgXCIgLnBlLXNsaWRlcl9fY29udHJvbFwiOiB7XG4gICAgICAgIGJvcmRlcldpZHRoOiBzY2FsZWRCb3JkZXJXaWR0aCArIFwicHhcIlxuICAgICAgfSxcbiAgICAgIC8vIGxlZnQgc2lkZVxuICAgICAgXCIgLnBlLXNsaWRlcl9fdHJhY2stdmFsdWUgLnBlLXNsaWRlcl9fdHJhY2stYmFyLXZhbHVlXCI6IHtcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVgoXCIgKyAtc2NhbGVkVGh1bWJEaWZmICsgXCJweClcIlxuICAgICAgfSxcbiAgICAgIC8vIHJpZ2h0IHNpZGVcbiAgICAgIFwiIC5wZS1zbGlkZXJfX3RyYWNrLXJlc3QgLnBlLXNsaWRlcl9fdHJhY2stYmFyLXZhbHVlXCI6IHtcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVgoXCIgKyBzY2FsZWRUaHVtYkRpZmYgKyBcInB4KVwiXG4gICAgICB9XG4gICAgfSxcbiAgICBcIi5wZS1zbGlkZXItLWFjdGl2ZS5wZS1zbGlkZXItLXRpY2tzXCI6IHtcbiAgICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2w6YWZ0ZXJcIjoge1xuICAgICAgICBib3JkZXJXaWR0aDogMFxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgdGh1bWJfc2l6ZV9waW5fd2lkdGggPSBmdW5jdGlvbiB0aHVtYl9zaXplX3Bpbl93aWR0aChzZWxlY3RvciwgdmFycykge1xuICB2YXIgX2dldFRodW1iU2l6ZTQgPSBnZXRUaHVtYlNpemUodmFycyksXG4gICAgICBzdGVwc09mZnNldCA9IF9nZXRUaHVtYlNpemU0LnN0ZXBzT2Zmc2V0O1xuXG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtc2xpZGVyX19waW5cIjoge1xuICAgICAgbWFyZ2luOiBcIjAgXCIgKyBzdGVwc09mZnNldCArIFwicHggMCBcIiArIChzdGVwc09mZnNldCAtIHZhcnMucGluX3dpZHRoIC8gMiArIDEpICsgXCJweFwiXG4gICAgfVxuICB9KTtcbn07XG5cbnZhciB2YXJGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbZmxleC5sYXlvdXRIb3Jpem9udGFsLCBmbGV4LmZsZXhHcm93KDEpLCB7XG4gICAgICB1c2VyU2VsZWN0OiBcIm5vbmVcIixcbiAgICAgIFwiLW1vei11c2VyLXNlbGVjdFwiOiBcIm5vbmVcIixcbiAgICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXG4gICAgICBcIiA+IC5wZS1pY29uXCI6IGZsZXgubGF5b3V0Q2VudGVyLFxuICAgICAgXCIgLnBlLXNsaWRlcl9fdHJhY2tcIjogW2ZsZXgubGF5b3V0SG9yaXpvbnRhbCwgZmxleC5mbGV4R3JvdygxKSwge1xuICAgICAgICB1c2VyU2VsZWN0OiBcIm5vbmVcIixcbiAgICAgICAgXCItbW96LXVzZXItc2VsZWN0XCI6IFwibm9uZVwiLFxuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBvdXRsaW5lOiAwXG4gICAgICB9XSxcbiAgICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2xcIjogW2ZsZXguc2VsZkNlbnRlciwgbWl4aW4uZGVmYXVsdFRyYW5zaXRpb24oXCJ0cmFuc2Zvcm0sIGJhY2tncm91bmRcIiwgXCIuMjAwc1wiKSwge1xuICAgICAgICB0cmFuc2Zvcm06IFwic2NhbGUoMSlcIixcbiAgICAgICAgdXNlclNlbGVjdDogXCJub25lXCIsXG4gICAgICAgIFwiLW1vei11c2VyLXNlbGVjdFwiOiBcIm5vbmVcIixcbiAgICAgICAgbGluZUhlaWdodDogMCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiBcIjUwJVwiLFxuICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICB6SW5kZXg6IDEsXG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIC8vIHRvdWNoIGFyZWFcbiAgICAgICAgXCI6YmVmb3JlXCI6IHtcbiAgICAgICAgICBjb250ZW50OiBcIlxcXCJcXFwiXCIsXG4gICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCJcbiAgICAgICAgfSxcbiAgICAgICAgLy8gYm9yZGVyXG4gICAgICAgIFwiOmFmdGVyXCI6IHtcbiAgICAgICAgICBjb250ZW50OiBcIlxcXCJcXFwiXCIsXG4gICAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXG4gICAgICAgICAgYm9yZGVyU3R5bGU6IFwic29saWRcIlxuICAgICAgICB9XG4gICAgICB9XSxcbiAgICAgIFwiIC5wZS1zbGlkZXJfX3RodW1iXCI6IFttaXhpbi5maXQoKSwge1xuICAgICAgICBcIiYsIC5wZS1pY29uXCI6IHtcbiAgICAgICAgICB3aWR0aDogXCJpbmhlcml0XCIsXG4gICAgICAgICAgaGVpZ2h0OiBcImluaGVyaXRcIlxuICAgICAgICB9XG4gICAgICB9XSxcbiAgICAgIFwiIC5wZS1zbGlkZXJfX2xhYmVsXCI6IHtcbiAgICAgICAgbWluV2lkdGg6IHZhcnMkMS51bml0X2ljb25fc2l6ZSArIFwicHhcIixcbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgICAgICBmb250U2l6ZTogXCIxNnB4XCIsXG4gICAgICAgIGZvbnRXZWlnaHQ6IHZhcnMkMS5mb250X3dlaWdodF9tZWRpdW1cbiAgICAgIH0sXG4gICAgICBcIiAucGUtc2xpZGVyX190cmFjay1wYXJ0XCI6IFtmbGV4LmZsZXgoKSwge1xuICAgICAgICB1c2VyU2VsZWN0OiBcIm5vbmVcIixcbiAgICAgICAgXCItbW96LXVzZXItc2VsZWN0XCI6IFwibm9uZVwiLFxuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIiAvLyBGaXJlZm94IG90aGVyd2lzZSB1c2VzIDZ4IGF0IDAlXG5cbiAgICAgIH1dLFxuICAgICAgXCIgLnBlLXNsaWRlcl9fdHJhY2stdmFsdWUsIC5wZS1zbGlkZXJfX3RyYWNrLXJlc3RcIjogZmxleC5sYXlvdXRIb3Jpem9udGFsLFxuICAgICAgXCIgLnBlLXNsaWRlcl9fdHJhY2stYmFyXCI6IFtmbGV4LmZsZXgoKSwge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIlxuICAgICAgfV0sXG4gICAgICBcIiAucGUtc2xpZGVyX190cmFjay1iYXItdmFsdWVcIjogZmxleC5mbGV4KCksXG4gICAgICBcIiAucGUtc2xpZGVyX190aWNrc1wiOiBbZmxleC5sYXlvdXRKdXN0aWZpZWQsIHtcbiAgICAgICAgdXNlclNlbGVjdDogXCJub25lXCIsXG4gICAgICAgIFwiLW1vei11c2VyLXNlbGVjdFwiOiBcIm5vbmVcIixcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgcG9pbnRlckV2ZW50czogXCJub25lXCJcbiAgICAgIH1dLFxuICAgICAgXCIgLnBlLXNsaWRlcl9fcGluXCI6IFttaXhpbi5kZWZhdWx0VHJhbnNpdGlvbihcInRyYW5zZm9ybVwiLCBcIi4xMXNcIiksIHtcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVooMCkgc2NhbGUoMCkgdHJhbnNsYXRlKDAsIDApXCIsXG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogXCJib3R0b21cIixcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIC8vIHNldCBpbiBqc1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiLFxuICAgICAgICBcIiY6OmJlZm9yZSwgJjo6YWZ0ZXJcIjoge1xuICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgIGxlZnQ6IDBcbiAgICAgICAgfSxcbiAgICAgICAgXCI6OmJlZm9yZVwiOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBcInJvdGF0ZSgtNDVkZWcpXCIsXG4gICAgICAgICAgY29udGVudDogXCJcXFwiXFxcIlwiLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogXCI1MCUgNTAlIDUwJSAwXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCI6OmFmdGVyXCI6IHtcbiAgICAgICAgICBjb250ZW50OiBcImF0dHIodmFsdWUpXCIsXG4gICAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiXG4gICAgICAgIH1cbiAgICAgIH1dLFxuICAgICAgXCIucGUtc2xpZGVyLS1waW4ucGUtc2xpZGVyLS1hY3RpdmUsICYucGUtc2xpZGVyLS1waW4ucGUtc2xpZGVyLS1mb2N1c1wiOiB7XG4gICAgICAgIFwiIC5wZS1zbGlkZXJfX3BpblwiOiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZVooMCkgc2NhbGUoMSkgdHJhbnNsYXRlKDAsIC0yNHB4KVwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIjpub3QoLnBlLXNsaWRlci0tZGlzYWJsZWQpXCI6IHtcbiAgICAgICAgXCIgLnBlLXNsaWRlcl9fY29udHJvbFwiOiB7XG4gICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIlxuICAgICAgICB9LFxuICAgICAgICBcIi5wZS1zbGlkZXItLXRyYWNrXCI6IHtcbiAgICAgICAgICBcIiAucGUtc2xpZGVyX190cmFja1wiOiB7XG4gICAgICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIucGUtc2xpZGVyLS1kaXNhYmxlZFwiOiB7XG4gICAgICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2xcIjoge1xuICAgICAgICAgIGJvcmRlcldpZHRoOiAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSldO1xuICB9LFxuICB0aHVtYl9zaXplOiBmdW5jdGlvbiB0aHVtYl9zaXplKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgdmFyIF9nZXRUaHVtYlNpemU1ID0gZ2V0VGh1bWJTaXplKHZhcnMpLFxuICAgICAgICBub3JtYWxUaHVtYlNpemUgPSBfZ2V0VGh1bWJTaXplNS5ub3JtYWxUaHVtYlNpemUsXG4gICAgICAgIGJhck9mZnNldCA9IF9nZXRUaHVtYlNpemU1LmJhck9mZnNldCxcbiAgICAgICAgc3RlcHNPZmZzZXQgPSBfZ2V0VGh1bWJTaXplNS5zdGVwc09mZnNldDtcblxuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtc2xpZGVyX19jb250cm9sXCI6IHtcbiAgICAgICAgd2lkdGg6IG5vcm1hbFRodW1iU2l6ZSArIFwicHhcIixcbiAgICAgICAgaGVpZ2h0OiBub3JtYWxUaHVtYlNpemUgKyBcInB4XCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtc2xpZGVyX190cmFjay12YWx1ZSAucGUtc2xpZGVyX190cmFjay1iYXJcIjoge1xuICAgICAgICBtYXJnaW5MZWZ0OiBiYXJPZmZzZXQgKyBcInB4XCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtc2xpZGVyX190cmFjay1yZXN0IC5wZS1zbGlkZXJfX3RyYWNrLWJhclwiOiB7XG4gICAgICAgIG1hcmdpblJpZ2h0OiBiYXJPZmZzZXQgKyBcInB4XCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtc2xpZGVyX190aWNrc1wiOiB7XG4gICAgICAgIHdpZHRoOiBcImNhbGMoMTAwJSAtIFwiICsgMiAqIHN0ZXBzT2Zmc2V0ICsgXCJweClcIixcbiAgICAgICAgbWFyZ2luOiBcIjAgXCIgKyBzdGVwc09mZnNldCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pLCB0aHVtYl9zaXplX3RodW1iX2JvcmRlcl93aWR0aF9kaXNhYmxlZF90aHVtYl9zY2FsZShzZWxlY3RvciwgdmFycyksIHRodW1iX3NpemVfdGh1bWJfdG91Y2hfc2l6ZShzZWxlY3RvciwgdmFycyksIHRodW1iX3NpemVfYWN0aXZlX3RodW1iX3NjYWxlKHNlbGVjdG9yLCB2YXJzKSwgdGh1bWJfc2l6ZV9waW5fd2lkdGgoc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgYWN0aXZlX3RodW1iX3NjYWxlOiBmdW5jdGlvbiBhY3RpdmVfdGh1bWJfc2NhbGUoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc2xpZGVyLS1hY3RpdmU6bm90KC5wZS1zbGlkZXItLXRpY2tzKVwiOiB7XG4gICAgICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2xcIjoge1xuICAgICAgICAgIHRyYW5zZm9ybTogXCJzY2FsZShcIiArIHZhcnMuYWN0aXZlX3RodW1iX3NjYWxlICsgXCIpXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLCB0aHVtYl9zaXplX2FjdGl2ZV90aHVtYl9zY2FsZShzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICB0aHVtYl90b3VjaF9zaXplOiBmdW5jdGlvbiB0aHVtYl90b3VjaF9zaXplKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2xcIjoge1xuICAgICAgICBcIjpiZWZvcmVcIjoge1xuICAgICAgICAgIHdpZHRoOiB2YXJzLnRodW1iX3RvdWNoX3NpemUgKyBcInB4XCIsXG4gICAgICAgICAgaGVpZ2h0OiB2YXJzLnRodW1iX3RvdWNoX3NpemUgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLCB0aHVtYl9zaXplX3RodW1iX3RvdWNoX3NpemUoc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgdGh1bWJfYm9yZGVyX3dpZHRoOiBmdW5jdGlvbiB0aHVtYl9ib3JkZXJfd2lkdGgoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge30pLCB0aHVtYl9zaXplX3RodW1iX2JvcmRlcl93aWR0aF9kaXNhYmxlZF90aHVtYl9zY2FsZShzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBkaXNhYmxlZF90aHVtYl9zY2FsZTogZnVuY3Rpb24gZGlzYWJsZWRfdGh1bWJfc2NhbGUoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc2xpZGVyLS1kaXNhYmxlZFwiOiB7XG4gICAgICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2xcIjoge1xuICAgICAgICAgIHRyYW5zZm9ybTogXCJzY2FsZShcIiArIHZhcnMuZGlzYWJsZWRfdGh1bWJfc2NhbGUgKyBcIilcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSksIHRodW1iX3NpemVfdGh1bWJfYm9yZGVyX3dpZHRoX2Rpc2FibGVkX3RodW1iX3NjYWxlKHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIGFjdGl2ZV9waW5fdGh1bWJfc2NhbGU6IGZ1bmN0aW9uIGFjdGl2ZV9waW5fdGh1bWJfc2NhbGUoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtc2xpZGVyLS1waW4ucGUtc2xpZGVyLS1hY3RpdmUsICYucGUtc2xpZGVyLS1waW4ucGUtc2xpZGVyLS1mb2N1c1wiOiB7XG4gICAgICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2xcIjoge1xuICAgICAgICAgIHRyYW5zZm9ybTogXCJzY2FsZShcIiArIHZhcnMuYWN0aXZlX3Bpbl90aHVtYl9zY2FsZSArIFwiKVwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGhlaWdodDogZnVuY3Rpb24gaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIGhlaWdodDogdmFycy5oZWlnaHQgKyBcInB4XCIsXG4gICAgICBcIiA+IC5wZS1pY29uXCI6IHtcbiAgICAgICAgaGVpZ2h0OiB2YXJzLmhlaWdodCArIFwicHhcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1zbGlkZXJfX2xhYmVsXCI6IHtcbiAgICAgICAgaGVpZ2h0OiB2YXJzLmhlaWdodCArIFwicHhcIixcbiAgICAgICAgbGluZUhlaWdodDogdmFycy5oZWlnaHQgKyBcInB4XCJcbiAgICAgIH0sXG4gICAgICBcIiAucGUtc2xpZGVyX190aWNrc1wiOiB7XG4gICAgICAgIHRvcDogdmFycy5oZWlnaHQgLyAyIC0gMSArIFwicHhcIlxuICAgICAgfVxuICAgIH0pLCBoZWlnaHRfdHJhY2tfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIHRyYWNrX2hlaWdodDogZnVuY3Rpb24gdHJhY2tfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1zbGlkZXJfX3RyYWNrXCI6IHtcbiAgICAgICAgaGVpZ2h0OiB2YXJzLnRyYWNrX2hlaWdodCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pLCBoZWlnaHRfdHJhY2tfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSwgdHJhY2tfaGVpZ2h0X2Jhcl9oZWlnaHQoc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgYW5pbWF0aW9uX2R1cmF0aW9uOiBmdW5jdGlvbiBhbmltYXRpb25fZHVyYXRpb24oc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXNsaWRlcl9fdHJhY2tcIjogbWl4aW4uZGVmYXVsdFRyYW5zaXRpb24oXCJ0cmFuc2Zvcm1cIiwgdmFycy5hbmltYXRpb25fZHVyYXRpb24pLFxuICAgICAgXCIgLnBlLXNsaWRlcl9fY29udHJvbDpiZWZvcmVcIjogbWl4aW4uZGVmYXVsdFRyYW5zaXRpb24oXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIHZhcnMuYW5pbWF0aW9uX2R1cmF0aW9uKSxcbiAgICAgIFwiIC5wZS1zbGlkZXJfX2NvbnRyb2w6YWZ0ZXJcIjogbWl4aW4uZGVmYXVsdFRyYW5zaXRpb24oXCJib3JkZXJcIiwgdmFycy5hbmltYXRpb25fZHVyYXRpb24pLFxuICAgICAgXCIgLnBlLXNsaWRlcl9fdGh1bWJcIjogbWl4aW4uZGVmYXVsdFRyYW5zaXRpb24oXCJvcGFjaXR5XCIsIHZhcnMuYW5pbWF0aW9uX2R1cmF0aW9uKSxcbiAgICAgIFwiIC5wZS1zbGlkZXJfX3RyYWNrLWJhci12YWx1ZVwiOiBtaXhpbi5kZWZhdWx0VHJhbnNpdGlvbihcInRyYW5zZm9ybSwgYmFja2dyb3VuZC1jb2xvclwiLCB2YXJzLmFuaW1hdGlvbl9kdXJhdGlvbilcbiAgICB9KV07XG4gIH0sXG4gIHNpZGVfc3BhY2luZzogZnVuY3Rpb24gc2lkZV9zcGFjaW5nKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1zbGlkZXJfX3RyYWNrXCI6IHtcbiAgICAgICAgbWFyZ2luOiBcIjAgXCIgKyB2YXJzLnNpZGVfc3BhY2luZyArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgaG9yaXpvbnRhbF9sYXlvdXRfc2lkZV9zcGFjaW5nOiBmdW5jdGlvbiBob3Jpem9udGFsX2xheW91dF9zaWRlX3NwYWNpbmcoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgZGl2ICsgLnBlLXNsaWRlcl9fdHJhY2tcIjoge1xuICAgICAgICBtYXJnaW46IFwiMCBcIiArIHZhcnMuaG9yaXpvbnRhbF9sYXlvdXRfc2lkZV9zcGFjaW5nICsgXCJweFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBiYXJfaGVpZ2h0OiBmdW5jdGlvbiBiYXJfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1zbGlkZXJfX3RyYWNrLXBhcnQsXFxcbiAgICAgICAgLnBlLXNsaWRlcl9fdHJhY2stYmFyLXZhbHVlLFxcXG4gICAgICAgIC5wZS1zbGlkZXJfX3RpY2tzLFxcXG4gICAgICAgIC5wZS1zbGlkZXJfX3RpY2tcIjoge1xuICAgICAgICBoZWlnaHQ6IHZhcnMuYmFyX2hlaWdodCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pLCB0cmFja19oZWlnaHRfYmFyX2hlaWdodChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBzdGVwX3dpZHRoOiBmdW5jdGlvbiBzdGVwX3dpZHRoKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1zbGlkZXJfX3RpY2tcIjoge1xuICAgICAgICB3aWR0aDogdmFycy5zdGVwX3dpZHRoICsgXCJweFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBwaW5fd2lkdGg6IGZ1bmN0aW9uIHBpbl93aWR0aChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtc2xpZGVyX19waW5cIjoge1xuICAgICAgICB3aWR0aDogdmFycy5waW5fd2lkdGggKyBcInB4XCIsXG4gICAgICAgIFwiOjpiZWZvcmVcIjoge1xuICAgICAgICAgIHdpZHRoOiB2YXJzLnBpbl93aWR0aCArIFwicHhcIixcbiAgICAgICAgICBoZWlnaHQ6IHZhcnMucGluX3dpZHRoICsgXCJweFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiOjphZnRlclwiOiB7XG4gICAgICAgICAgd2lkdGg6IHZhcnMucGluX3dpZHRoICsgXCJweFwiLFxuICAgICAgICAgIGhlaWdodDogdmFycy5waW5faGVpZ2h0ICsgXCJweFwiLFxuICAgICAgICAgIGxpbmVIZWlnaHQ6IHZhcnMucGluX3dpZHRoICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSwgdGh1bWJfc2l6ZV9waW5fd2lkdGgoc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgcGluX2ZvbnRfc2l6ZTogZnVuY3Rpb24gcGluX2ZvbnRfc2l6ZShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtc2xpZGVyX19waW46OmFmdGVyXCI6IHtcbiAgICAgICAgZm9udFNpemU6IHZhcnMucGluX2ZvbnRfc2l6ZSArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfVxufTtcbnZhciBsYXlvdXQgPSBjcmVhdGVMYXlvdXQoe1xuICB2YXJGbnM6IHZhckZuc1xufSk7XG5cbi8vIEB0cy1jaGVja1xudmFyIGxpZ2h0Rm9yZWdyb3VuZCA9IHZhcnMkMS5jb2xvcl9saWdodF9mb3JlZ3JvdW5kO1xudmFyIGRhcmtGb3JlZ3JvdW5kID0gdmFycyQxLmNvbG9yX2RhcmtfZm9yZWdyb3VuZDtcbnZhciBhY3RpdmVDb2xvciA9IHZhcnMkMS5jb2xvcl9wcmltYXJ5OyAvLyBvciBvdmVycmlkZSBpbiBDU1MgYnkgc2V0dGluZyAnY29sb3InIHByb3BlcnR5IG9uICcucGUtc2xpZGVyJ1xuXG52YXIgdGh1bWJfc2l6ZSA9IDEyO1xudmFyIHRodW1iX3RvdWNoX3NpemUgPSBNYXRoLm1heCg0MCwgdGh1bWJfc2l6ZSk7XG52YXIgdGh1bWJfYm9yZGVyX3dpZHRoID0gMjtcbnZhciBhY3RpdmVfdGh1bWJfc2NhbGUgPSAzIC8gMjtcbnZhciBkaXNhYmxlZF90aHVtYl9zY2FsZSA9IDEgLyAyO1xudmFyIGFjdGl2ZV9waW5fdGh1bWJfc2NhbGUgPSAyIC8gNjtcbnZhciBsYXJnZXN0VGh1bWJTaXplID0gYWN0aXZlX3RodW1iX3NjYWxlICogdGh1bWJfc2l6ZTtcbnZhciBsYXJnZXN0RWxlbWVudCA9IE1hdGgubWF4KHRodW1iX3RvdWNoX3NpemUsIGxhcmdlc3RUaHVtYlNpemUpO1xudmFyIGhlaWdodCA9IE1hdGgubWF4KDUyLCBsYXJnZXN0VGh1bWJTaXplKTtcbnZhciBzaWRlX3NwYWNpbmcgPSBNYXRoLm1heCgxMCwgbGFyZ2VzdEVsZW1lbnQgLyAyIC0gdGh1bWJfc2l6ZSAvIDIpO1xudmFyIGhvcml6b250YWxfbGF5b3V0X3NpZGVfc3BhY2luZyA9IHNpZGVfc3BhY2luZyArIDQ7IC8vIG9wdGltaXphdGlvbiBmb3IgaG9yaXpvbnRhbCBsYXlvdXRcblxudmFyIHZhcnMgPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBnZW5lcmFsIHN0eWxlcywgbm90IGRlZmluZWQgYnkgdmFyaWFibGVzXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogdHJ1ZSxcbiAgYWN0aXZlX3Bpbl90aHVtYl9zY2FsZTogYWN0aXZlX3Bpbl90aHVtYl9zY2FsZSxcbiAgYWN0aXZlX3RodW1iX3NjYWxlOiBhY3RpdmVfdGh1bWJfc2NhbGUsXG4gIGFuaW1hdGlvbl9kdXJhdGlvbjogdmFycyQxLmFuaW1hdGlvbl9kdXJhdGlvbixcbiAgYmFyX2hlaWdodDogMixcbiAgZGlzYWJsZWRfdGh1bWJfc2NhbGU6IGRpc2FibGVkX3RodW1iX3NjYWxlLFxuICBoZWlnaHQ6IGhlaWdodCxcbiAgaG9yaXpvbnRhbF9sYXlvdXRfc2lkZV9zcGFjaW5nOiBob3Jpem9udGFsX2xheW91dF9zaWRlX3NwYWNpbmcsXG4gIHBpbl9mb250X3NpemU6IDEwLFxuICBwaW5faGVpZ2h0OiAzMixcbiAgcGluX3dpZHRoOiAyNixcbiAgc2lkZV9zcGFjaW5nOiBzaWRlX3NwYWNpbmcsXG4gIHN0ZXBfd2lkdGg6IDIsXG4gIHRodW1iX2JvcmRlcl93aWR0aDogdGh1bWJfYm9yZGVyX3dpZHRoLFxuICB0aHVtYl9zaXplOiB0aHVtYl9zaXplLFxuICB0aHVtYl90b3VjaF9zaXplOiB0aHVtYl90b3VjaF9zaXplLFxuICB0cmFja19oZWlnaHQ6IGhlaWdodCxcbiAgY29sb3JfbGlnaHRfdHJhY2tfYWN0aXZlOiByZ2JhKGxpZ2h0Rm9yZWdyb3VuZCwgLjM4KSxcbiAgY29sb3JfbGlnaHRfdHJhY2tfaW5hY3RpdmU6IHJnYmEobGlnaHRGb3JlZ3JvdW5kLCAuMjYpLFxuICBjb2xvcl9saWdodF90cmFja192YWx1ZTogXCJjdXJyZW50Q29sb3JcIixcbiAgLy8gYmFja2dyb3VuZCBjb2xvciBtYXkgYmUgc2V0IGluIHRoZW1lOyBkaXNhYmxlZCBieSBkZWZhdWx0XG4gIC8vIGNvbG9yX2xpZ2h0X3RodW1iX2JhY2tncm91bmQ6ICAgICAgICB1bmRlZmluZWQsXG4gIGNvbG9yX2xpZ2h0X3RodW1iX29mZjogcmdiYShsaWdodEZvcmVncm91bmQsIC4yNiksXG4gIGNvbG9yX2xpZ2h0X3RodW1iX29mZl9mb2N1czogcmdiYShsaWdodEZvcmVncm91bmQpLFxuICBjb2xvcl9saWdodF90aHVtYl9vZmZfZm9jdXNfb3BhY2l0eTogLjA4LFxuICBjb2xvcl9saWdodF90aHVtYl9vbjogcmdiYShhY3RpdmVDb2xvciksXG4gIGNvbG9yX2xpZ2h0X3RodW1iX29uX2ZvY3VzX29wYWNpdHk6IC4xMSxcbiAgY29sb3JfbGlnaHRfdGh1bWJfaW5hY3RpdmU6IHJnYmEobGlnaHRGb3JlZ3JvdW5kLCAuMjYpLFxuICBjb2xvcl9saWdodF90aWNrOiByZ2JhKGxpZ2h0Rm9yZWdyb3VuZCwgMSksXG4gIGNvbG9yX2xpZ2h0X3RpY2tfdmFsdWU6IHJnYmEobGlnaHRGb3JlZ3JvdW5kLCAxKSxcbiAgY29sb3JfbGlnaHRfaWNvbjogcmdiYSh2YXJzJDEuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycyQxLmJsZW5kX2xpZ2h0X3RleHRfc2Vjb25kYXJ5KSxcbiAgY29sb3JfbGlnaHRfZGlzYWJsZWRfaWNvbjogcmdiYSh2YXJzJDEuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycyQxLmJsZW5kX2xpZ2h0X3RleHRfZGlzYWJsZWQpLFxuICBjb2xvcl9saWdodF9sYWJlbDogcmdiYSh2YXJzJDEuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycyQxLmJsZW5kX2xpZ2h0X3RleHRfc2Vjb25kYXJ5KSxcbiAgY29sb3JfbGlnaHRfZGlzYWJsZWRfbGFiZWw6IHJnYmEodmFycyQxLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMkMS5ibGVuZF9saWdodF90ZXh0X2Rpc2FibGVkKSxcbiAgY29sb3JfbGlnaHRfcGluX2xhYmVsOiBcIiNmZmZcIixcbiAgY29sb3JfbGlnaHRfcGluX2JhY2tncm91bmQ6IFwiY3VycmVudENvbG9yXCIsXG4gIGNvbG9yX2RhcmtfdHJhY2tfYWN0aXZlOiByZ2JhKGRhcmtGb3JlZ3JvdW5kLCAuMyksXG4gIGNvbG9yX2RhcmtfdHJhY2tfaW5hY3RpdmU6IHJnYmEoZGFya0ZvcmVncm91bmQsIC4yKSxcbiAgY29sb3JfZGFya190cmFja192YWx1ZTogXCJjdXJyZW50Q29sb3JcIixcbiAgLy8gYmFja2dyb3VuZCBjb2xvciBtYXkgYmUgc2V0IGluIHRoZW1lOyBkaXNhYmxlZCBieSBkZWZhdWx0XG4gIC8vIGNvbG9yX2RhcmtfdGh1bWJfYmFja2dyb3VuZDogICAgICAgICB1bmRlZmluZWQsXG4gIGNvbG9yX2RhcmtfdGh1bWJfb2ZmOiByZ2JhKGRhcmtGb3JlZ3JvdW5kLCAuMiksXG4gIGNvbG9yX2RhcmtfdGh1bWJfb2ZmX2ZvY3VzOiByZ2JhKGRhcmtGb3JlZ3JvdW5kKSxcbiAgY29sb3JfZGFya190aHVtYl9vZmZfZm9jdXNfb3BhY2l0eTogLjA4LFxuICBjb2xvcl9kYXJrX3RodW1iX29uOiByZ2JhKGFjdGl2ZUNvbG9yKSxcbiAgY29sb3JfZGFya190aHVtYl9vbl9mb2N1c19vcGFjaXR5OiAuMTEsXG4gIGNvbG9yX2RhcmtfdGh1bWJfaW5hY3RpdmU6IHJnYmEoZGFya0ZvcmVncm91bmQsIC4yKSxcbiAgY29sb3JfZGFya190aWNrOiByZ2JhKGRhcmtGb3JlZ3JvdW5kLCAxKSxcbiAgY29sb3JfZGFya190aWNrX3ZhbHVlOiByZ2JhKGRhcmtGb3JlZ3JvdW5kLCAxKSxcbiAgY29sb3JfZGFya19pY29uOiByZ2JhKHZhcnMkMS5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMkMS5ibGVuZF9kYXJrX3RleHRfc2Vjb25kYXJ5KSxcbiAgY29sb3JfZGFya19kaXNhYmxlZF9pY29uOiByZ2JhKHZhcnMkMS5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMkMS5ibGVuZF9kYXJrX3RleHRfZGlzYWJsZWQpLFxuICBjb2xvcl9kYXJrX2xhYmVsOiByZ2JhKHZhcnMkMS5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMkMS5ibGVuZF9kYXJrX3RleHRfc2Vjb25kYXJ5KSxcbiAgY29sb3JfZGFya19kaXNhYmxlZF9sYWJlbDogcmdiYSh2YXJzJDEuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzJDEuYmxlbmRfZGFya190ZXh0X2Rpc2FibGVkKSxcbiAgY29sb3JfZGFya19waW5fbGFiZWw6IFwiI2ZmZlwiLFxuICBjb2xvcl9kYXJrX3Bpbl9iYWNrZ3JvdW5kOiBcImN1cnJlbnRDb2xvclwiXG59O1xuXG4vLyBAdHMtY2hlY2tcbnZhciBmbnMgPSBbbGF5b3V0LCBjb2xvcl07XG52YXIgc2VsZWN0b3IgPSBcIi5cIi5jb25jYXQoY2xhc3Nlcy5jb21wb25lbnQpO1xudmFyIGFkZFN0eWxlID0gc3R5bGVyLmNyZWF0ZUFkZFN0eWxlKHNlbGVjdG9yLCBmbnMsIHZhcnMpO1xudmFyIGdldFN0eWxlID0gc3R5bGVyLmNyZWF0ZUdldFN0eWxlKHNlbGVjdG9yLCBmbnMsIHZhcnMpO1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogdmFyc1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IGFkZEdlbmVyYWxTdHlsZVRvSGVhZCwgYWRkU3R5bGUsIGNvbG9yLCBnZXRTdHlsZSwgbGF5b3V0LCB2YXJzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb2xvciwgY3JlYXRlTGF5b3V0LCBzZWwsIGZsZXgsIHJnYmEsIHN0eWxlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNzcyc7XG5pbXBvcnQgeyBjb2xvciBhcyBjb2xvciQxLCBjdXN0b21MYXlvdXRGbnMgfSBmcm9tICdwb2x5dGhlbmUtY3NzLW5vdGlmaWNhdGlvbic7XG5pbXBvcnQgeyB2YXJzIH0gZnJvbSAncG9seXRoZW5lLXRoZW1lJztcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KTtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxudmFyIG5vdGlmaWNhdGlvbkNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1ub3RpZmljYXRpb25cIixcbiAgLy8gZWxlbWVudHNcbiAgYWN0aW9uOiBcInBlLW5vdGlmaWNhdGlvbl9fYWN0aW9uXCIsXG4gIGNvbnRlbnQ6IFwicGUtbm90aWZpY2F0aW9uX19jb250ZW50XCIsXG4gIGhvbGRlcjogXCJwZS1ub3RpZmljYXRpb25fX2hvbGRlclwiLFxuICBwbGFjZWhvbGRlcjogXCJwZS1ub3RpZmljYXRpb25fX3BsYWNlaG9sZGVyXCIsXG4gIHRpdGxlOiBcInBlLW5vdGlmaWNhdGlvbl9fdGl0bGVcIixcbiAgLy8gc3RhdGVzXG4gIGhhc0NvbnRhaW5lcjogXCJwZS1ub3RpZmljYXRpb24tLWNvbnRhaW5lclwiLFxuICBob3Jpem9udGFsOiBcInBlLW5vdGlmaWNhdGlvbi0taG9yaXpvbnRhbFwiLFxuICBtdWx0aWxpbmVUaXRsZTogXCJwZS1ub3RpZmljYXRpb25fX3RpdGxlLS1tdWx0aS1saW5lXCIsXG4gIHZlcnRpY2FsOiBcInBlLW5vdGlmaWNhdGlvbi0tdmVydGljYWxcIixcbiAgdmlzaWJsZTogXCJwZS1ub3RpZmljYXRpb24tLXZpc2libGVcIlxufTtcblxudmFyIGNsYXNzZXMgPSBfb2JqZWN0U3ByZWFkMih7fSwgbm90aWZpY2F0aW9uQ2xhc3Nlcywge1xuICBjb21wb25lbnQ6IFwicGUtbm90aWZpY2F0aW9uIHBlLXNuYWNrYmFyXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGhvbGRlcjogXCJwZS1zbmFja2Jhcl9faG9sZGVyXCIsXG4gIHBsYWNlaG9sZGVyOiBcInBlLXNuYWNrYmFyX19wbGFjZWhvbGRlclwiLFxuICAvLyBzdGF0ZXNcbiAgb3BlbjogXCJwZS1zbmFja2Jhci0tb3BlblwiXG59KTtcblxuLy8gQHRzLWNoZWNrXG52YXIgY29sb3IgPSBjcmVhdGVDb2xvcih7XG4gIHN1cGVyQ29sb3I6IGNvbG9yJDFcbn0pO1xuXG52YXIgdmFyRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3RvciwgW2ZsZXgubGF5b3V0Q2VudGVyQ2VudGVyLCB7XG4gICAgICBwb3NpdGlvbjogXCJmaXhlZFwiLFxuICAgICAgdG9wOiBcImF1dG9cIixcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHpJbmRleDogdmFycy56X25vdGlmaWNhdGlvbixcbiAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiLFxuICAgICAganVzdGlmeUNvbnRlbnQ6IFwiZmxleC1zdGFydFwiLFxuICAgICAgLy8gRm9yIElFMTFcbiAgICAgIHdpZHRoOiBcIjEwMCVcIlxuICAgIH1dKSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIi5wZS1ub3RpZmljYXRpb24tLWNvbnRhaW5lciBcIi5jb25jYXQoc2VsZWN0b3IpLCB7XG4gICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiXG4gICAgfSldO1xuICB9XG59O1xudmFyIGhvbGRlckxheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zXG59KTtcblxudmFyIGJyZWFrcG9pbnQgPSBmdW5jdGlvbiBicmVha3BvaW50KGJyZWFrcG9pbnRTZWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzZWxlY3Rvciwgbykge1xuICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIGJyZWFrcG9pbnRTZWwsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgc2VsZWN0b3IsIG8pKTtcbiAgfTtcbn07XG5cbnZhciBicmVha3BvaW50VGFibGV0UG9ydHJhaXRVcCA9IGJyZWFrcG9pbnQoXCJAbWVkaWEgKG1pbi13aWR0aDogXCIuY29uY2F0KHZhcnMuYnJlYWtwb2ludF9mb3JfdGFibGV0X3BvcnRyYWl0X3VwLCBcInB4KVwiKSk7XG52YXIgdmFyRm5zJDEgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgZGlzcGxheTogXCJub25lXCIsXG4gICAgICBcIiAucGUtbm90aWZpY2F0aW9uX19jb250ZW50XCI6IHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBtYXJnaW46IFwiMCBhdXRvXCIsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IDAsXG4gICAgICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAwXG4gICAgICB9XG4gICAgfSksIGJyZWFrcG9pbnRUYWJsZXRQb3J0cmFpdFVwKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1ub3RpZmljYXRpb24tLWhvcml6b250YWxcIjoge1xuICAgICAgICBcIiAucGUtbm90aWZpY2F0aW9uX190aXRsZVwiOiB7XG4gICAgICAgICAgcGFkZGluZ1JpZ2h0OiBcIjMwcHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBtaW5fd2lkdGg6IGZ1bmN0aW9uIG1pbl93aWR0aChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbYnJlYWtwb2ludFRhYmxldFBvcnRyYWl0VXAoc2VsZWN0b3IsIHtcbiAgICAgIG1pbldpZHRoOiB2YXJzLm1pbl93aWR0aCArIFwicHhcIlxuICAgIH0pXTtcbiAgfSxcbiAgbWF4X3dpZHRoOiBmdW5jdGlvbiBtYXhfd2lkdGgoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW2JyZWFrcG9pbnRUYWJsZXRQb3J0cmFpdFVwKHNlbGVjdG9yLCB7XG4gICAgICBtYXhXaWR0aDogdmFycy5tYXhfd2lkdGggKyBcInB4XCJcbiAgICB9KV07XG4gIH0sXG4gIGJvcmRlcl9yYWRpdXM6IGZ1bmN0aW9uIGJvcmRlcl9yYWRpdXMoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLW5vdGlmaWNhdGlvbl9fY29udGVudFwiOiB7XG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IHZhcnMuYm9yZGVyX3JhZGl1cyArIFwicHhcIixcbiAgICAgICAgYm9yZGVyVG9wUmlnaHRSYWRpdXM6IHZhcnMuYm9yZGVyX3JhZGl1cyArIFwicHhcIixcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogMCxcbiAgICAgICAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXM6IDBcbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgdmFyRm5zOiB2YXJGbnMkMSxcbiAgY3VzdG9tVmFyRm5zOiBjdXN0b21MYXlvdXRGbnNcbn0pO1xuXG4vLyBAdHMtY2hlY2tcbi8qKlxuICogQHR5cGUge1NuYWNrYmFyVmFyc30gc25hY2tiYXJWYXJzXG4gKi9cblxudmFyIHNuYWNrYmFyVmFycyA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICBhbmltYXRpb25faGlkZV9jc3M6IFwiXCIsXG4gIGFuaW1hdGlvbl9zaG93X2NzczogXCJcIixcbiAgYm9yZGVyX3JhZGl1czogMCxcbiAgbWF4X3dpZHRoOiA1NjgsXG4gIG1pbl9oZWlnaHQ6IDAsXG4gIG1pbl93aWR0aDogMjg4LFxuICBjb2xvcl9saWdodF9iYWNrZ3JvdW5kOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfYmFja2dyb3VuZCksXG4gIGNvbG9yX2RhcmtfYmFja2dyb3VuZDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfYmFja2dyb3VuZClcbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXQsIGNvbG9yXTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudC5yZXBsYWNlKC8gL2csIFwiLlwiKSk7XG52YXIgaG9sZGVyRm5zID0gW2hvbGRlckxheW91dF07XG52YXIgaG9sZGVyU2VsZWN0b3IgPSBcIi5cIi5jb25jYXQoY2xhc3Nlcy5ob2xkZXIucmVwbGFjZSgvIC9nLCBcIi5cIikpO1xuXG52YXIgYWRkU3R5bGUgPSBmdW5jdGlvbiBhZGRTdHlsZShjdXN0b21TZWxlY3RvciwgY3VzdG9tVmFycykge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge30sXG4gICAgICBfcmVmJG1lZGlhUXVlcnkgPSBfcmVmLm1lZGlhUXVlcnksXG4gICAgICBtZWRpYVF1ZXJ5ID0gX3JlZiRtZWRpYVF1ZXJ5ID09PSB2b2lkIDAgPyBcIlwiIDogX3JlZiRtZWRpYVF1ZXJ5LFxuICAgICAgX3JlZiRzY29wZSA9IF9yZWYuc2NvcGUsXG4gICAgICBzY29wZSA9IF9yZWYkc2NvcGUgPT09IHZvaWQgMCA/IFwiXCIgOiBfcmVmJHNjb3BlO1xuXG4gIGN1c3RvbVNlbGVjdG9yICYmIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbY3VzdG9tU2VsZWN0b3IsIHNlbGVjdG9yXSxcbiAgICBmbnM6IGZucyxcbiAgICB2YXJzOiBzbmFja2JhclZhcnMsXG4gICAgY3VzdG9tVmFyczogY3VzdG9tVmFycyxcbiAgICBtZWRpYVF1ZXJ5OiBtZWRpYVF1ZXJ5LFxuICAgIHNjb3BlOiBzY29wZVxuICB9KTtcbiAgY3VzdG9tU2VsZWN0b3IgJiYgc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtjdXN0b21TZWxlY3RvciwgaG9sZGVyU2VsZWN0b3JdLFxuICAgIGZuczogaG9sZGVyRm5zLFxuICAgIHZhcnM6IHNuYWNrYmFyVmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzLFxuICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0pO1xufTtcblxudmFyIGdldFN0eWxlID0gZnVuY3Rpb24gZ2V0U3R5bGUoKSB7XG4gIHZhciBjdXN0b21TZWxlY3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCJcIjtcbiAgdmFyIGN1c3RvbVZhcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgX3JlZjIkbWVkaWFRdWVyeSA9IF9yZWYyLm1lZGlhUXVlcnksXG4gICAgICBtZWRpYVF1ZXJ5ID0gX3JlZjIkbWVkaWFRdWVyeSA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYyJG1lZGlhUXVlcnksXG4gICAgICBfcmVmMiRzY29wZSA9IF9yZWYyLnNjb3BlLFxuICAgICAgc2NvcGUgPSBfcmVmMiRzY29wZSA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYyJHNjb3BlO1xuXG4gIHJldHVybiBzdHlsZXIuZ2V0U3R5bGUoe1xuICAgIHNlbGVjdG9yczogW2N1c3RvbVNlbGVjdG9yLCBzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogc25hY2tiYXJWYXJzLFxuICAgIGN1c3RvbVZhcnM6IGN1c3RvbVZhcnMsXG4gICAgbWVkaWFRdWVyeTogbWVkaWFRdWVyeSxcbiAgICBzY29wZTogc2NvcGVcbiAgfSkuY29uY2F0KHN0eWxlci5nZXRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbaG9sZGVyU2VsZWN0b3JdLFxuICAgIGZuczogaG9sZGVyRm5zLFxuICAgIHZhcnM6IHNuYWNrYmFyVmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzLFxuICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0pKTtcbn07XG5cbnZhciBhZGRHZW5lcmFsU3R5bGVUb0hlYWQgPSBmdW5jdGlvbiBhZGRHZW5lcmFsU3R5bGVUb0hlYWQoKSB7XG4gIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbaG9sZGVyU2VsZWN0b3JdLFxuICAgIGZuczogaG9sZGVyRm5zLFxuICAgIHZhcnM6IHNuYWNrYmFyVmFyc1xuICB9KTtcbiAgc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogc25hY2tiYXJWYXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBob2xkZXJMYXlvdXQsIGxheW91dCwgc25hY2tiYXJWYXJzIGFzIHZhcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbG9yLCBzZWwsIGNyZWF0ZUxheW91dCwgc3R5bGVyIH0gZnJvbSAncG9seXRoZW5lLWNvcmUtY3NzJztcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1zdmdcIlxufTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbnZhciBnZW5lcmFsRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgXCIgc3ZnXCI6IHtcbiAgICAgICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgICBcIiBwYXRoLCByZWN0LCBjaXJjbGUsIHBvbHlnb25cIjoge1xuICAgICAgICAgIFwiJjpub3QoW2ZpbGw9bm9uZV0pXCI6IHtcbiAgICAgICAgICAgIGZpbGw6IFwiY3VycmVudGNvbG9yXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG5cbnZhciB0aW50Rm5zID0gZnVuY3Rpb24gdGludEZucyh0aW50KSB7XG4gIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIFwiY29sb3JfXCIgKyB0aW50LCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgc3ZnXCI6IHtcbiAgICAgICAgXCIgcGF0aCwgcmVjdCwgY2lyY2xlLCBwb2x5Z29uXCI6IHtcbiAgICAgICAgICBcIiY6bm90KFtmaWxsPW5vbmVdKVwiOiB7XG4gICAgICAgICAgICBmaWxsOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50XVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSk7XG59O1xuXG52YXIgbGlnaHRUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJsaWdodFwiKSk7XG5cbnZhciBkYXJrVGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwiZGFya1wiKSk7XG5cbnZhciBjb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgdmFyRm5zOiB7XG4gICAgbGlnaHRUaW50Rm5zOiBsaWdodFRpbnRGbnMsXG4gICAgZGFya1RpbnRGbnM6IGRhcmtUaW50Rm5zXG4gIH1cbn0pO1xuXG4vLyBAdHMtY2hlY2tcbnZhciB2YXJGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBsaW5lSGVpZ2h0OiAxLFxuICAgICAgXCIgPiBkaXYsIHN2Z1wiOiB7XG4gICAgICAgIHdpZHRoOiBcImluaGVyaXRcIixcbiAgICAgICAgaGVpZ2h0OiBcImluaGVyaXRcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfVxufTtcbnZhciBsYXlvdXQgPSBjcmVhdGVMYXlvdXQoe1xuICB2YXJGbnM6IHZhckZuc1xufSk7XG5cbi8vIEB0cy1jaGVja1xuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoXCIuLi9pbmRleFwiKS5TVkdWYXJzfSBTVkdWYXJzXG4gKi9cblxuLyoqXG4gKiBAdHlwZSB7U1ZHVmFyc30gc3ZnVmFyc1xuICovXG52YXIgc3ZnVmFycyA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICBjb2xvcl9saWdodDogXCJjdXJyZW50Y29sb3JcIixcbiAgY29sb3JfZGFyazogXCJjdXJyZW50Y29sb3JcIlxufTtcblxuLy8gQHRzLWNoZWNrXG52YXIgZm5zID0gW2xheW91dCwgY29sb3JdO1xudmFyIHNlbGVjdG9yID0gXCIuXCIuY29uY2F0KGNsYXNzZXMuY29tcG9uZW50KTtcbnZhciBhZGRTdHlsZSA9IHN0eWxlci5jcmVhdGVBZGRTdHlsZShzZWxlY3RvciwgZm5zLCBzdmdWYXJzKTtcbnZhciBnZXRTdHlsZSA9IHN0eWxlci5jcmVhdGVHZXRTdHlsZShzZWxlY3RvciwgZm5zLCBzdmdWYXJzKTtcblxudmFyIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCA9IGZ1bmN0aW9uIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCgpIHtcbiAgcmV0dXJuIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbc2VsZWN0b3JdLFxuICAgIGZuczogZm5zLFxuICAgIHZhcnM6IHN2Z1ZhcnNcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBhZGRHZW5lcmFsU3R5bGVUb0hlYWQsIGFkZFN0eWxlLCBjb2xvciwgZ2V0U3R5bGUsIGxheW91dCwgc3ZnVmFycyBhcyB2YXJzIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVDb2xvciwgc2VsLCBjcmVhdGVMYXlvdXQsIG1peGluLCByZ2JhLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgbGF5b3V0IGFzIGxheW91dCQxLCB2YXJzIGFzIHZhcnMkMiB9IGZyb20gJ3BvbHl0aGVuZS1jc3Mtc2VsZWN0aW9uLWNvbnRyb2wnO1xuaW1wb3J0IHsgdmFycyB9IGZyb20gJ3BvbHl0aGVuZS10aGVtZSc7XG5pbXBvcnQgeyB2YXJzIGFzIHZhcnMkMSB9IGZyb20gJ3BvbHl0aGVuZS1jc3MtaWNvbi1idXR0b24nO1xuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLXN3aXRjaC1jb250cm9sXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGtub2I6IFwicGUtc3dpdGNoLWNvbnRyb2xfX2tub2JcIixcbiAgdGh1bWI6IFwicGUtc3dpdGNoLWNvbnRyb2xfX3RodW1iXCIsXG4gIHRyYWNrOiBcInBlLXN3aXRjaC1jb250cm9sX190cmFja1wiXG59O1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxudmFyIGdlbmVyYWxGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7fSldO1xuICB9XG59O1xuXG52YXIgdGludEZucyA9IGZ1bmN0aW9uIHRpbnRGbnModGludCkge1xuICB2YXIgX3JlZjtcblxuICByZXR1cm4gX3JlZiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9sYWJlbFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWNvbnRyb2xfX2xhYmVsXCI6IHtcbiAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9sYWJlbFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3RyYWNrX29mZlwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtY29udHJvbC0tb2ZmXCI6IHtcbiAgICAgICAgXCIgLnBlLXN3aXRjaC1jb250cm9sX190cmFja1wiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdHJhY2tfb2ZmXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90cmFja19vZmZfb3BhY2l0eVwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtY29udHJvbC0tb2ZmXCI6IHtcbiAgICAgICAgXCIgLnBlLXN3aXRjaC1jb250cm9sX190cmFja1wiOiB7XG4gICAgICAgICAgb3BhY2l0eTogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3RyYWNrX29mZl9vcGFjaXR5XCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90aHVtYl9vZmZcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWNvbnRyb2wtLW9mZlwiOiB7XG4gICAgICAgIFwiIC5wZS1zd2l0Y2gtY29udHJvbF9fa25vYlwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdGh1bWJfb2ZmXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9pY29uX29mZlwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtY29udHJvbC0tb2ZmXCI6IHtcbiAgICAgICAgXCIgLnBlLWljb25cIjoge1xuICAgICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaWNvbl9vZmZcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX29mZl9sYWJlbFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtY29udHJvbC0tb2ZmXCI6IHtcbiAgICAgICAgXCIgLnBlLWNvbnRyb2xfX2xhYmVsXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX29mZl9sYWJlbFwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfdHJhY2tfb25cIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWNvbnRyb2wtLW9uXCI6IHtcbiAgICAgICAgXCIgLnBlLXN3aXRjaC1jb250cm9sX190cmFja1wiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdHJhY2tfb25cIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3RyYWNrX29uX29wYWNpdHlcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWNvbnRyb2wtLW9uXCI6IHtcbiAgICAgICAgXCIgLnBlLXN3aXRjaC1jb250cm9sX190cmFja1wiOiB7XG4gICAgICAgICAgb3BhY2l0eTogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3RyYWNrX29uX29wYWNpdHlcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3RodW1iX29uXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1jb250cm9sLS1vblwiOiB7XG4gICAgICAgIFwiIC5wZS1zd2l0Y2gtY29udHJvbF9fa25vYlwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdGh1bWJfb25cIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2ljb25fb25cIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWNvbnRyb2wtLW9uXCI6IHtcbiAgICAgICAgXCIgLnBlLWljb25cIjoge1xuICAgICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaWNvbl9vblwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfb25fbGFiZWxcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWNvbnRyb2wtLW9uXCI6IHtcbiAgICAgICAgXCIgLnBlLWNvbnRyb2xfX2xhYmVsXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX29uX2xhYmVsXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9kaXNhYmxlZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtY29udHJvbC0tb24ucGUtY29udHJvbC0tZGlzYWJsZWQsICYucGUtY29udHJvbC0tb2ZmLnBlLWNvbnRyb2wtLWRpc2FibGVkXCI6IHtcbiAgICAgICAgXCIgLnBlLWNvbnRyb2xfX2xhYmVsXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2Rpc2FibGVkXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90cmFja19kaXNhYmxlZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtY29udHJvbC0tb24ucGUtY29udHJvbC0tZGlzYWJsZWQsICYucGUtY29udHJvbC0tb2ZmLnBlLWNvbnRyb2wtLWRpc2FibGVkXCI6IHtcbiAgICAgICAgXCIgLnBlLXN3aXRjaC1jb250cm9sX190cmFja1wiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfdHJhY2tfZGlzYWJsZWRcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3RyYWNrX2Rpc2FibGVkX29wYWNpdHlcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLWNvbnRyb2wtLW9uLnBlLWNvbnRyb2wtLWRpc2FibGVkLCAmLnBlLWNvbnRyb2wtLW9mZi5wZS1jb250cm9sLS1kaXNhYmxlZFwiOiB7XG4gICAgICAgIFwiIC5wZS1zd2l0Y2gtY29udHJvbF9fdHJhY2tcIjoge1xuICAgICAgICAgIG9wYWNpdHk6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90cmFja19kaXNhYmxlZF9vcGFjaXR5XCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90aHVtYl9kaXNhYmxlZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtY29udHJvbC0tb24ucGUtY29udHJvbC0tZGlzYWJsZWQsICYucGUtY29udHJvbC0tb2ZmLnBlLWNvbnRyb2wtLWRpc2FibGVkXCI6IHtcbiAgICAgICAgXCIgLnBlLXN3aXRjaC1jb250cm9sX190aHVtYiwgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90aHVtYl9kaXNhYmxlZFwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX3JlZjtcbn07XG5cbnZhciBob3ZlclRpbnRGbnMgPSBmdW5jdGlvbiBob3ZlclRpbnRGbnModGludCkge1xuICByZXR1cm4gey8vIFtcImNvbG9yX1wiICsgdGludCArIFwiX3dhc2hfb25cIl06IChzZWxlY3RvciwgdmFycykgPT4gW1xuICAgIC8vICAgc2VsKHNlbGVjdG9yLCB7XG4gICAgLy8gICAgIFwiLnBlLWNvbnRyb2wtLW9uXCI6IHtcbiAgICAvLyAgICAgICBcIiAucGUtYnV0dG9uX193YXNoXCI6IHtcbiAgICAvLyAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3dhc2hfb25cIl1cbiAgICAvLyAgICAgICB9XG4gICAgLy8gICAgIH0sXG4gICAgLy8gICB9KVxuICAgIC8vIF0sXG4gICAgLy8gW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfd2FzaF9vZmZcIl06IChzZWxlY3RvciwgdmFycykgPT4gW1xuICAgIC8vICAgc2VsKHNlbGVjdG9yLCB7XG4gICAgLy8gICAgIFwiLnBlLWNvbnRyb2wtLW9mZlwiOiB7XG4gICAgLy8gICAgICAgXCIgLnBlLWJ1dHRvbl9fd2FzaFwiOiB7XG4gICAgLy8gICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl93YXNoX29mZlwiXVxuICAgIC8vICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vICAgfSlcbiAgICAvLyBdLFxuICB9O1xufTtcblxudmFyIGxpZ2h0VGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwibGlnaHRcIikpO1xuXG52YXIgZGFya1RpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImRhcmtcIikpO1xuXG52YXIgbGlnaHRUaW50SG92ZXJGbnMgPSBob3ZlclRpbnRGbnMoKTtcbnZhciBkYXJrVGludEhvdmVyRm5zID0gaG92ZXJUaW50Rm5zKCk7XG52YXIgY29sb3IgPSBjcmVhdGVDb2xvcih7XG4gIHZhckZuczoge1xuICAgIGxpZ2h0VGludEZuczogbGlnaHRUaW50Rm5zLFxuICAgIGRhcmtUaW50Rm5zOiBkYXJrVGludEZucyxcbiAgICBsaWdodFRpbnRIb3ZlckZuczogbGlnaHRUaW50SG92ZXJGbnMsXG4gICAgZGFya1RpbnRIb3ZlckZuczogZGFya1RpbnRIb3ZlckZuc1xuICB9XG59KTtcblxudmFyIHRyYW5zaXRpb24gPSBmdW5jdGlvbiB0cmFuc2l0aW9uKHZhcnMsIHByb3BlcnRpZXMpIHtcbiAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB2YXJzLmFuaW1hdGlvbl9kdXJhdGlvbjtcbiAgcmV0dXJuIG1peGluLmRlZmF1bHRUcmFuc2l0aW9uKHByb3BlcnRpZXMsIGR1cmF0aW9uLCBcImVhc2Utb3V0XCIpO1xufTtcblxudmFyIGdldFNpemVEYXRhID0gZnVuY3Rpb24gZ2V0U2l6ZURhdGEodmFycyQxLCBzaXplKSB7XG4gIHZhciBmYWN0b3IgPSBzaXplIC8gdmFycy51bml0X2ljb25fc2l6ZTtcbiAgdmFyIHRodW1iU2l6ZSA9IE1hdGguZmxvb3IoMC41ICogdmFycyQxLnRodW1iX3NpemUgKiBmYWN0b3IpICogMjsgLy8gcm91bmQgdG8gZXZlblxuXG4gIHZhciBzY2FsZWRUcmFja0hlaWdodCA9IE1hdGguZmxvb3IoMC41ICogdmFycyQxLnRyYWNrX2hlaWdodCAqIGZhY3RvcikgKiAyOyAvLyByb3VuZCB0byBldmVuXG5cbiAgdmFyIHNjYWxlZFRyYWNrV2lkdGggPSBNYXRoLmZsb29yKDAuNSAqIHZhcnMkMS50cmFja19sZW5ndGggKiBmYWN0b3IpICogMjtcbiAgdmFyIHNjYWxlZFRodW1iU2l6ZSA9IE1hdGguZmxvb3IoMC41ICogdmFycyQxLnRodW1iX3NpemUgKiBmYWN0b3IpICogMjtcbiAgdmFyIHRyYWNrVG9wID0gKHZhcnMkMS5sYWJlbF9oZWlnaHQgKiBmYWN0b3IgLSBzY2FsZWRUcmFja0hlaWdodCkgLyAyO1xuICB2YXIgdGh1bWJQYWRkaW5nID0gdmFycyQxLmljb25fYnV0dG9uX3BhZGRpbmc7XG4gIHZhciB0aHVtYk1hcmdpbiA9IChzaXplIC0gc2NhbGVkVGh1bWJTaXplKSAvIDI7XG4gIHZhciB0aHVtYk91dGVyU2l6ZSA9IHNpemUgKyAyICogdGh1bWJQYWRkaW5nO1xuICB2YXIgdGh1bWJPZmZzZXRNaW4gPSAtKHRodW1iT3V0ZXJTaXplIC8gMikgKyB0aHVtYlNpemUgLyAyO1xuICB2YXIgdGh1bWJPZmZzZXRNYXggPSB0aHVtYk9mZnNldE1pbiArIHNjYWxlZFRyYWNrV2lkdGggLSB0aHVtYlNpemU7XG4gIHZhciB0aHVtYk9mZnNldFkgPSB0aHVtYk9mZnNldE1pbiArIHRodW1iTWFyZ2luO1xuICB2YXIgdHJhY2tWaXN1YWxPZmZzZXQgPSAwLjM7IC8vIHByZXZlbnQgc3ViIHBpeGVsIG9mIHRyYWNrIHRvIHNoaW5lIHRocm91Z2gga25vYiBib3JkZXJcblxuICByZXR1cm4ge1xuICAgIGZhY3RvcjogZmFjdG9yLFxuICAgIHNjYWxlZFRodW1iU2l6ZTogc2NhbGVkVGh1bWJTaXplLFxuICAgIHNjYWxlZFRyYWNrSGVpZ2h0OiBzY2FsZWRUcmFja0hlaWdodCxcbiAgICBzY2FsZWRUcmFja1dpZHRoOiBzY2FsZWRUcmFja1dpZHRoLFxuICAgIHNpemU6IHNpemUsXG4gICAgdGh1bWJNYXJnaW46IHRodW1iTWFyZ2luLFxuICAgIHRodW1iT2Zmc2V0TWF4OiB0aHVtYk9mZnNldE1heCxcbiAgICB0aHVtYk9mZnNldE1pbjogdGh1bWJPZmZzZXRNaW4sXG4gICAgdGh1bWJPZmZzZXRZOiB0aHVtYk9mZnNldFksXG4gICAgdGh1bWJQYWRkaW5nOiB0aHVtYlBhZGRpbmcsXG4gICAgdHJhY2tUb3A6IHRyYWNrVG9wLFxuICAgIHRyYWNrVmlzdWFsT2Zmc2V0OiB0cmFja1Zpc3VhbE9mZnNldFxuICB9O1xufTtcblxudmFyIGN1c3RvbVNpemUgPSBmdW5jdGlvbiBjdXN0b21TaXplKHZhcnMsIF9yZWYpIHtcbiAgdmFyIHNjYWxlZFRodW1iU2l6ZSA9IF9yZWYuc2NhbGVkVGh1bWJTaXplLFxuICAgICAgc2NhbGVkVHJhY2tIZWlnaHQgPSBfcmVmLnNjYWxlZFRyYWNrSGVpZ2h0LFxuICAgICAgc2NhbGVkVHJhY2tXaWR0aCA9IF9yZWYuc2NhbGVkVHJhY2tXaWR0aCxcbiAgICAgIHNpemUgPSBfcmVmLnNpemUsXG4gICAgICB0aHVtYk1hcmdpbiA9IF9yZWYudGh1bWJNYXJnaW4sXG4gICAgICB0aHVtYk9mZnNldFkgPSBfcmVmLnRodW1iT2Zmc2V0WSxcbiAgICAgIHRodW1iUGFkZGluZyA9IF9yZWYudGh1bWJQYWRkaW5nLFxuICAgICAgdHJhY2tUb3AgPSBfcmVmLnRyYWNrVG9wLFxuICAgICAgdHJhY2tWaXN1YWxPZmZzZXQgPSBfcmVmLnRyYWNrVmlzdWFsT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIFwiIC5wZS1jb250cm9sX19mb3JtLWxhYmVsXCI6IHtcbiAgICAgIGhlaWdodDogc2l6ZSArIFwicHhcIixcbiAgICAgIG1pbldpZHRoOiBzY2FsZWRUcmFja1dpZHRoICsgXCJweFwiXG4gICAgfSxcbiAgICBcIiAucGUtc3dpdGNoLWNvbnRyb2xfX3RyYWNrXCI6IHtcbiAgICAgIGhlaWdodDogc2NhbGVkVHJhY2tIZWlnaHQgKyBcInB4XCIsXG4gICAgICB3aWR0aDogc2NhbGVkVHJhY2tXaWR0aCAtIDIgKiB0cmFja1Zpc3VhbE9mZnNldCArIFwicHhcIixcbiAgICAgIHRvcDogdHJhY2tUb3AgKyBcInB4XCIsXG4gICAgICBib3JkZXJSYWRpdXM6IHNjYWxlZFRyYWNrSGVpZ2h0ICsgXCJweFwiXG4gICAgfSxcbiAgICBcIiAucGUtc3dpdGNoLWNvbnRyb2xfX3RodW1iXCI6IHtcbiAgICAgIHRvcDogdGh1bWJPZmZzZXRZICsgXCJweFwiXG4gICAgfSxcbiAgICBcIiAucGUtc3dpdGNoLWNvbnRyb2xfX2tub2JcIjoge1xuICAgICAgd2lkdGg6IHNjYWxlZFRodW1iU2l6ZSArIFwicHhcIixcbiAgICAgIGhlaWdodDogc2NhbGVkVGh1bWJTaXplICsgXCJweFwiLFxuICAgICAgbWFyZ2luOiB0aHVtYk1hcmdpbiArIFwicHhcIlxuICAgIH0sXG4gICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICBwYWRkaW5nOiB0aHVtYlBhZGRpbmcgKyBcInB4XCJcbiAgICB9XG4gIH07XG59O1xuXG52YXIgY3VzdG9tU3BhY2luZyA9IGZ1bmN0aW9uIGN1c3RvbVNwYWNpbmcodmFycywgX3JlZjIsIGlzUlRMKSB7XG4gIHZhciBfcGVDb250cm9sX19sYWJlbCwgX3BlU3dpdGNoQ29udHJvbF8sIF9wZVN3aXRjaENvbnRyb2xfMiwgX3BlU3dpdGNoQ29udHJvbF8zO1xuXG4gIHZhciBmYWN0b3IgPSBfcmVmMi5mYWN0b3IsXG4gICAgICBzY2FsZWRUcmFja1dpZHRoID0gX3JlZjIuc2NhbGVkVHJhY2tXaWR0aCxcbiAgICAgIHRodW1iT2Zmc2V0TWF4ID0gX3JlZjIudGh1bWJPZmZzZXRNYXgsXG4gICAgICB0aHVtYk9mZnNldE1pbiA9IF9yZWYyLnRodW1iT2Zmc2V0TWluLFxuICAgICAgdHJhY2tWaXN1YWxPZmZzZXQgPSBfcmVmMi50cmFja1Zpc3VhbE9mZnNldDtcbiAgcmV0dXJuIHtcbiAgICBcIiAucGUtY29udHJvbF9fbGFiZWxcIjogKF9wZUNvbnRyb2xfX2xhYmVsID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcGVDb250cm9sX19sYWJlbCwgaXNSVEwgPyBcInBhZGRpbmdSaWdodFwiIDogXCJwYWRkaW5nTGVmdFwiLCB2YXJzLnBhZGRpbmcgKiBmYWN0b3IgKyA4ICsgc2NhbGVkVHJhY2tXaWR0aCArIFwicHhcIiksIF9kZWZpbmVQcm9wZXJ0eShfcGVDb250cm9sX19sYWJlbCwgaXNSVEwgPyBcInBhZGRpbmdMZWZ0XCIgOiBcInBhZGRpbmdSaWdodFwiLCAwKSwgX3BlQ29udHJvbF9fbGFiZWwpLFxuICAgIFwiIC5wZS1zd2l0Y2gtY29udHJvbF9fdHJhY2tcIjogKF9wZVN3aXRjaENvbnRyb2xfID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcGVTd2l0Y2hDb250cm9sXywgaXNSVEwgPyBcInJpZ2h0XCIgOiBcImxlZnRcIiwgdHJhY2tWaXN1YWxPZmZzZXQgKyBcInB4XCIpLCBfZGVmaW5lUHJvcGVydHkoX3BlU3dpdGNoQ29udHJvbF8sIGlzUlRMID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIsIFwiYXV0b1wiKSwgX3BlU3dpdGNoQ29udHJvbF8pLFxuICAgIFwiIC5wZS1zd2l0Y2gtY29udHJvbF9fdGh1bWJcIjogKF9wZVN3aXRjaENvbnRyb2xfMiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3BlU3dpdGNoQ29udHJvbF8yLCBpc1JUTCA/IFwicmlnaHRcIiA6IFwibGVmdFwiLCB0aHVtYk9mZnNldE1pbiArIFwicHhcIiksIF9kZWZpbmVQcm9wZXJ0eShfcGVTd2l0Y2hDb250cm9sXzIsIGlzUlRMID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIsIFwiYXV0b1wiKSwgX3BlU3dpdGNoQ29udHJvbF8yKSxcbiAgICBcIi5wZS1jb250cm9sLS1vblwiOiB7XG4gICAgICBcIiAucGUtc3dpdGNoLWNvbnRyb2xfX3RodW1iXCI6IChfcGVTd2l0Y2hDb250cm9sXzMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9wZVN3aXRjaENvbnRyb2xfMywgaXNSVEwgPyBcInJpZ2h0XCIgOiBcImxlZnRcIiwgdGh1bWJPZmZzZXRNYXggKyBcInB4XCIpLCBfZGVmaW5lUHJvcGVydHkoX3BlU3dpdGNoQ29udHJvbF8zLCBpc1JUTCA/IFwibGVmdFwiIDogXCJyaWdodFwiLCBcImF1dG9cIiksIF9wZVN3aXRjaENvbnRyb2xfMylcbiAgICB9XG4gIH07XG59O1xuXG52YXIgYWxpZ25TaWRlID0gZnVuY3Rpb24gYWxpZ25TaWRlKGlzUlRMKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9wZVN3aXRjaENvbnRyb2xfNDtcblxuICAgIHJldHVybiB7XG4gICAgICBcIiAucGUtc3dpdGNoLWNvbnRyb2xfX3RyYWNrXCI6IChfcGVTd2l0Y2hDb250cm9sXzQgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9wZVN3aXRjaENvbnRyb2xfNCwgaXNSVEwgPyBcInJpZ2h0XCIgOiBcImxlZnRcIiwgMCksIF9kZWZpbmVQcm9wZXJ0eShfcGVTd2l0Y2hDb250cm9sXzQsIGlzUlRMID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIsIFwiYXV0b1wiKSwgX3BlU3dpdGNoQ29udHJvbF80KVxuICAgIH07XG4gIH07XG59O1xuXG52YXIgYWxpZ25MZWZ0ID0gYWxpZ25TaWRlKGZhbHNlKTtcbnZhciBhbGlnblJpZ2h0ID0gYWxpZ25TaWRlKHRydWUpO1xuXG52YXIgY3JlYXRlU2l6ZSA9IGZ1bmN0aW9uIGNyZWF0ZVNpemUoc2VsZWN0b3IsIHZhcnMkMSkge1xuICB2YXIgc2l6ZURhdGEgPSB7XG4gICAgc21hbGw6IGdldFNpemVEYXRhKHZhcnMkMSwgdmFycy51bml0X2ljb25fc2l6ZV9zbWFsbCksXG4gICAgcmVndWxhcjogZ2V0U2l6ZURhdGEodmFycyQxLCB2YXJzLnVuaXRfaWNvbl9zaXplKSxcbiAgICBtZWRpdW06IGdldFNpemVEYXRhKHZhcnMkMSwgdmFycy51bml0X2ljb25fc2l6ZV9tZWRpdW0pLFxuICAgIGxhcmdlOiBnZXRTaXplRGF0YSh2YXJzJDEsIHZhcnMudW5pdF9pY29uX3NpemVfbGFyZ2UpXG4gIH07XG4gIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgXCIucGUtY29udHJvbC0tc21hbGxcIjogW2N1c3RvbVNpemUodmFycyQxLCBzaXplRGF0YS5zbWFsbCksIGN1c3RvbVNwYWNpbmcodmFycyQxLCBzaXplRGF0YS5zbWFsbCwgZmFsc2UpXSxcbiAgICBcIi5wZS1jb250cm9sLS1yZWd1bGFyXCI6IFtjdXN0b21TaXplKHZhcnMkMSwgc2l6ZURhdGEucmVndWxhciksIGN1c3RvbVNwYWNpbmcodmFycyQxLCBzaXplRGF0YS5yZWd1bGFyLCBmYWxzZSldLFxuICAgIFwiLnBlLWNvbnRyb2wtLW1lZGl1bVwiOiBbY3VzdG9tU2l6ZSh2YXJzJDEsIHNpemVEYXRhLm1lZGl1bSksIGN1c3RvbVNwYWNpbmcodmFycyQxLCBzaXplRGF0YS5tZWRpdW0sIGZhbHNlKV0sXG4gICAgXCIucGUtY29udHJvbC0tbGFyZ2VcIjogW2N1c3RvbVNpemUodmFycyQxLCBzaXplRGF0YS5sYXJnZSksIGN1c3RvbVNwYWNpbmcodmFycyQxLCBzaXplRGF0YS5sYXJnZSwgZmFsc2UpXVxuICB9KSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIipbZGlyPXJ0bF0gXCIuY29uY2F0KHNlbGVjdG9yLCBcIiwgLnBlLXJ0bCBcIikuY29uY2F0KHNlbGVjdG9yKSwgW2FsaWduUmlnaHQoKSwge1xuICAgIFwiLnBlLWNvbnRyb2wtLXNtYWxsXCI6IFtjdXN0b21TcGFjaW5nKHZhcnMkMSwgc2l6ZURhdGEuc21hbGwsIHRydWUpXSxcbiAgICBcIi5wZS1jb250cm9sLS1yZWd1bGFyXCI6IFtjdXN0b21TcGFjaW5nKHZhcnMkMSwgc2l6ZURhdGEucmVndWxhciwgdHJ1ZSldLFxuICAgIFwiLnBlLWNvbnRyb2wtLW1lZGl1bVwiOiBbY3VzdG9tU3BhY2luZyh2YXJzJDEsIHNpemVEYXRhLm1lZGl1bSwgdHJ1ZSldLFxuICAgIFwiLnBlLWNvbnRyb2wtLWxhcmdlXCI6IFtjdXN0b21TcGFjaW5nKHZhcnMkMSwgc2l6ZURhdGEubGFyZ2UsIHRydWUpXVxuICB9XSldO1xufTtcblxudmFyIHZhckZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIFthbGlnbkxlZnQoKSwge1xuICAgICAgXCIgLnBlLXN3aXRjaC1jb250cm9sX190cmFja1wiOiBbe1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiXG4gICAgICB9XSxcbiAgICAgIFwiIC5wZS1zd2l0Y2gtY29udHJvbF9fdGh1bWJcIjoge1xuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICB6SW5kZXg6IDEsXG4gICAgICAgIC8vIFByZXZlbnRzIGZsaWNrZXJpbmcgb2YgdGV4dCBsYWJlbCB3aGVuIHRvZ2dsaW5nXG4gICAgICAgIGNvbG9yOiBcImluaGVyaXRcIixcbiAgICAgICAgXCI6Zm9jdXNcIjoge1xuICAgICAgICAgIG91dGxpbmU6IDBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1zd2l0Y2gtY29udHJvbF9fa25vYlwiOiB7XG4gICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgIGJvcmRlclJhZGl1czogXCI1MCVcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1pY29uLWJ1dHRvbiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgdHJhbnNpdGlvbjogXCJub25lXCIsXG4gICAgICAgIFwiIC5wZS1zd2l0Y2gtY29udHJvbF9fa25vYiAucGUtaWNvblwiOiBbbWl4aW4uZml0KCksIHtcbiAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIlxuICAgICAgICB9XVxuICAgICAgfVxuICAgIH1dKSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIl86LW1zLWZ1bGxzY3JlZW4sIDpyb290IFwiLmNvbmNhdChzZWxlY3RvciksIHtcbiAgICAgIFwiIGlucHV0XCI6IHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgekluZGV4OiAxLFxuICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBjdXJzb3I6IFwicG9pbnRlclwiXG4gICAgICB9LFxuICAgICAgXCIgbGFiZWxcIjoge1xuICAgICAgICBjdXJzb3I6IFwiYXV0b1wiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBhbmltYXRpb25fZHVyYXRpb246IGZ1bmN0aW9uIGFuaW1hdGlvbl9kdXJhdGlvbihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtc3dpdGNoLWNvbnRyb2xfX3RyYWNrLCAucGUtc3dpdGNoLWNvbnRyb2xfX3RodW1iLCAucGUtY29udHJvbF9fbGFiZWxcIjogdHJhbnNpdGlvbih2YXJzLCBcImFsbFwiKVxuICAgIH0pXTtcbiAgfSxcbiAgY3JlYXRlU2l6ZTogY3JlYXRlU2l6ZVxufTtcblxudmFyIHdpdGhDcmVhdGVTaXplVmFyID0gZnVuY3Rpb24gd2l0aENyZWF0ZVNpemVWYXIodmFycykge1xuICByZXR1cm4gdmFycy50aHVtYl9zaXplIHx8IHZhcnMudHJhY2tfaGVpZ2h0IHx8IHZhcnMudHJhY2tfbGVuZ3RoIHx8IHZhcnMubGFiZWxfaGVpZ2h0IHx8IHZhcnMuaWNvbl9idXR0b25fcGFkZGluZyA/IF9leHRlbmRzKHt9LCB2YXJzLCB7XG4gICAgY3JlYXRlU2l6ZTogdHJ1ZVxuICB9KSA6IHZhcnM7XG59O1xuXG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgdmFyRm5zOiB2YXJGbnMsXG4gIHN1cGVyTGF5b3V0OiBsYXlvdXQkMSxcbiAgdmFyTWl4aW46IHdpdGhDcmVhdGVTaXplVmFyXG59KTtcblxuLy8gQHRzLWNoZWNrXG4vKipcbiAqIEB0eXBlIHtTd2l0Y2hWYXJzfSBzd2l0Y2hWYXJzXG4gKi9cblxudmFyIHN3aXRjaFZhcnMgPSB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBnZW5lcmFsIHN0eWxlcywgbm90IGRlZmluZWQgYnkgdmFyaWFibGVzXG4gICAqL1xuICBnZW5lcmFsX3N0eWxlczogdHJ1ZSxcbiAgYW5pbWF0aW9uX2R1cmF0aW9uOiB2YXJzLmFuaW1hdGlvbl9kdXJhdGlvbixcbiAgaGl0X2FyZWFfcGFkZGluZzogKHZhcnMuZ3JpZF91bml0X2ljb25fYnV0dG9uIC0gdmFycy51bml0X2ljb25fc2l6ZSkgLyAyLFxuICAvLyAxMlxuICBpY29uX2J1dHRvbl9wYWRkaW5nOiB2YXJzJDEucGFkZGluZyxcbiAgcGFkZGluZzogdmFycy5ncmlkX3VuaXRfY29tcG9uZW50LFxuICB0aHVtYl9zaXplOiAyMCxcbiAgdHJhY2tfaGVpZ2h0OiAxNCxcbiAgdHJhY2tfbGVuZ3RoOiAzNixcbiAgbGFiZWxfaGVpZ2h0OiB2YXJzJDIubGFiZWxfaGVpZ2h0LFxuICBjb2xvcl9saWdodF90aHVtYl9vbjogcmdiYSh2YXJzLmNvbG9yX3ByaW1hcnkpLFxuICBjb2xvcl9saWdodF90aHVtYl9vZmY6IFwiI2YxZjFmMVwiLFxuICBjb2xvcl9saWdodF90aHVtYl9kaXNhYmxlZDogXCIjZWVlXCIsXG4gIGNvbG9yX2xpZ2h0X3dhc2hfb246IHJnYmEodmFycy5jb2xvcl9wcmltYXJ5LCB2YXJzLmJsZW5kX2xpZ2h0X2JhY2tncm91bmRfYWN0aXZlKSxcbiAgY29sb3JfbGlnaHRfd2FzaF9vZmY6IHZhcnMkMS5jb2xvcl9saWdodF93YXNoX2JhY2tncm91bmQsXG4gIGNvbG9yX2xpZ2h0X3RyYWNrX29uOiByZ2JhKHZhcnMuY29sb3JfcHJpbWFyeV9mYWRlZCksXG4gIGNvbG9yX2xpZ2h0X3RyYWNrX29uX29wYWNpdHk6IC41NSxcbiAgY29sb3JfbGlnaHRfdHJhY2tfb2ZmOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3JlZ3VsYXIpLFxuICBjb2xvcl9saWdodF90cmFja19vZmZfb3BhY2l0eTogLjU1LFxuICBjb2xvcl9saWdodF90cmFja19kaXNhYmxlZDogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfYmFja2dyb3VuZF9kaXNhYmxlZCksXG4gIGNvbG9yX2xpZ2h0X3RyYWNrX2Rpc2FibGVkX29wYWNpdHk6IDEsXG4gIC8vIGljb24gY29sb3IgbWF5IGJlIHNldCBpbiB0aGVtZTsgZGVmYXVsdCBcImN1cnJlbnRjb2xvclwiXG4gIC8vIGNvbG9yX2xpZ2h0X2ljb25fb246ICAgICAgICAgICAgICAgICAgIFwiY3VycmVudGNvbG9yXCIsXG4gIC8vIGNvbG9yX2xpZ2h0X2ljb25fb2ZmOiAgICAgICAgICAgICAgICAgIFwiY3VycmVudGNvbG9yXCIsXG4gIC8vIGNvbG9yX2xpZ2h0X2ZvY3VzX29uIGFuZCBzbyBvbiB0YWtlbiBmcm9tIHNlbGVjdGlvbkNvbnRyb2xWYXJzXG4gIGNvbG9yX2RhcmtfdGh1bWJfb246IHJnYmEodmFycy5jb2xvcl9wcmltYXJ5KSxcbiAgY29sb3JfZGFya190aHVtYl9vZmY6IFwiI2JkYmRiZFwiLFxuICBjb2xvcl9kYXJrX3RodW1iX2Rpc2FibGVkOiBcIiM1NTVcIixcbiAgY29sb3JfZGFya193YXNoX29uOiByZ2JhKHZhcnMuY29sb3JfcHJpbWFyeSwgdmFycy5ibGVuZF9kYXJrX2JhY2tncm91bmRfYWN0aXZlKSxcbiAgY29sb3JfZGFya193YXNoX29mZjogdmFycyQxLmNvbG9yX2Rhcmtfd2FzaF9iYWNrZ3JvdW5kLFxuICBjb2xvcl9kYXJrX3RyYWNrX29uOiByZ2JhKHZhcnMuY29sb3JfcHJpbWFyeV9mYWRlZCwgdmFycy5ibGVuZF9kYXJrX3RleHRfdGVydGlhcnkpLFxuICAvLyBvciBcIiM1YTdmN2NcIlxuICBjb2xvcl9kYXJrX3RyYWNrX29uX29wYWNpdHk6IDksXG4gIGNvbG9yX2RhcmtfdHJhY2tfb2ZmOiBcIiM3MTcxNzFcIixcbiAgY29sb3JfZGFya190cmFja19vZmZfb3BhY2l0eTogLjU1LFxuICBjb2xvcl9kYXJrX3RyYWNrX2Rpc2FibGVkOiBcIiM3MTcxNzFcIixcbiAgY29sb3JfZGFya190cmFja19kaXNhYmxlZF9vcGFjaXR5OiAuMyAvLyBpY29uIGNvbG9yIG1heSBiZSBzZXQgaW4gdGhlbWU7IGRlZmF1bHQgXCJjdXJyZW50Y29sb3JcIlxuICAvLyBjb2xvcl9kYXJrX2ljb25fb246ICAgICAgICAgICAgICAgICAgICBcImN1cnJlbnRjb2xvclwiXG4gIC8vIGNvbG9yX2RhcmtfaWNvbl9vZmY6ICAgICAgICAgICAgICAgICAgIFwiY3VycmVudGNvbG9yXCJcbiAgLy8gY29sb3JfZGFya19mb2N1c19vbiBhbmQgc28gb24gdGFrZW4gZnJvbSBzZWxlY3Rpb25Db250cm9sVmFyc1xuXG59O1xuXG4vLyBAdHMtY2hlY2tcbnZhciBmbnMgPSBbbGF5b3V0LCBjb2xvcl07XG52YXIgc2VsZWN0b3IgPSBcIi5cIi5jb25jYXQoY2xhc3Nlcy5jb21wb25lbnQpO1xudmFyIGFkZFN0eWxlID0gc3R5bGVyLmNyZWF0ZUFkZFN0eWxlKHNlbGVjdG9yLCBmbnMsIHN3aXRjaFZhcnMpO1xudmFyIGdldFN0eWxlID0gc3R5bGVyLmNyZWF0ZUdldFN0eWxlKHNlbGVjdG9yLCBmbnMsIHN3aXRjaFZhcnMpO1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogc3dpdGNoVmFyc1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IGFkZEdlbmVyYWxTdHlsZVRvSGVhZCwgYWRkU3R5bGUsIGNvbG9yLCBnZXRTdHlsZSwgbGF5b3V0LCBzd2l0Y2hWYXJzIGFzIHZhcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbG9yLCBzZWwsIGNyZWF0ZUxheW91dCwgZmxleCwgbWl4aW4sIHNlbGVjdG9yUlRMLCByZ2JhLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgdmFycyB9IGZyb20gJ3BvbHl0aGVuZS10aGVtZSc7XG5pbXBvcnQgeyB0ZXh0QnV0dG9uVmFycyB9IGZyb20gJ3BvbHl0aGVuZS1jc3MtYnV0dG9uJztcbmltcG9ydCB7IHZhcnMgYXMgdmFycyQxIH0gZnJvbSAncG9seXRoZW5lLWNzcy1pY29uLWJ1dHRvbic7XG5cbnZhciBidXR0b25DbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtdGV4dC1idXR0b25cIixcbiAgXCJzdXBlclwiOiBcInBlLWJ1dHRvblwiLFxuICByb3c6IFwicGUtYnV0dG9uLXJvd1wiLFxuICAvLyBlbGVtZW50cyAgICAgIFxuICBjb250ZW50OiBcInBlLWJ1dHRvbl9fY29udGVudFwiLFxuICBsYWJlbDogXCJwZS1idXR0b25fX2xhYmVsXCIsXG4gIHRleHRMYWJlbDogXCJwZS1idXR0b25fX3RleHQtbGFiZWxcIixcbiAgd2FzaDogXCJwZS1idXR0b25fX3dhc2hcIixcbiAgd2FzaENvbG9yOiBcInBlLWJ1dHRvbl9fd2FzaC1jb2xvclwiLFxuICBkcm9wZG93bjogXCJwZS1idXR0b25fX2Ryb3Bkb3duXCIsXG4gIC8vIHN0YXRlcyAgICAgIFxuICBib3JkZXI6IFwicGUtYnV0dG9uLS1ib3JkZXJcIixcbiAgY29udGFpbmVkOiBcInBlLWJ1dHRvbi0tY29udGFpbmVkXCIsXG4gIGRpc2FibGVkOiBcInBlLWJ1dHRvbi0tZGlzYWJsZWRcIixcbiAgZHJvcGRvd25DbG9zZWQ6IFwicGUtYnV0dG9uLS1kcm9wZG93bi1jbG9zZWRcIixcbiAgZHJvcGRvd25PcGVuOiBcInBlLWJ1dHRvbi0tZHJvcGRvd24tb3BlblwiLFxuICBleHRyYVdpZGU6IFwicGUtYnV0dG9uLS1leHRyYS13aWRlXCIsXG4gIGhhc0Ryb3Bkb3duOiBcInBlLWJ1dHRvbi0tZHJvcGRvd25cIixcbiAgaGlnaExhYmVsOiBcInBlLWJ1dHRvbi0taGlnaC1sYWJlbFwiLFxuICBpbmFjdGl2ZTogXCJwZS1idXR0b24tLWluYWN0aXZlXCIsXG4gIHJhaXNlZDogXCJwZS1idXR0b24tLXJhaXNlZFwiLFxuICBzZWxlY3RlZDogXCJwZS1idXR0b24tLXNlbGVjdGVkXCIsXG4gIHNlcGFyYXRvckF0U3RhcnQ6IFwicGUtYnV0dG9uLS1zZXBhcmF0b3Itc3RhcnRcIixcbiAgaGFzSG92ZXI6IFwicGUtYnV0dG9uLS1oYXMtaG92ZXJcIlxufTtcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS10YWJzXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGluZGljYXRvcjogXCJwZS10YWJzX19pbmRpY2F0b3JcIixcbiAgc2Nyb2xsQnV0dG9uOiBcInBlLXRhYnNfX3Njcm9sbC1idXR0b25cIixcbiAgc2Nyb2xsQnV0dG9uQXRFbmQ6IFwicGUtdGFic19fc2Nyb2xsLWJ1dHRvbi1lbmRcIixcbiAgc2Nyb2xsQnV0dG9uQXRTdGFydDogXCJwZS10YWJzX19zY3JvbGwtYnV0dG9uLXN0YXJ0XCIsXG4gIHRhYjogXCJwZS10YWJcIixcbiAgdGFiQ29udGVudDogXCJwZS10YWJzX190YWItY29udGVudFwiLFxuICB0YWJSb3c6IFwicGUtdGFic19fcm93XCIsXG4gIC8vIHN0YXRlc1xuICBhY3RpdmVTZWxlY3RhYmxlOiBcInBlLXRhYnNfX2FjdGl2ZS0tc2VsZWN0YWJsZVwiLFxuICBpc0F0RW5kOiBcInBlLXRhYnMtLWVuZFwiLFxuICBpc0F0U3RhcnQ6IFwicGUtdGFicy0tc3RhcnRcIixcbiAgaXNBdXRvZml0OiBcInBlLXRhYnMtLWF1dG9maXRcIixcbiAgaXNNZW51OiBcInBlLXRhYnMtLW1lbnVcIixcbiAgc2Nyb2xsYWJsZTogXCJwZS10YWJzLS1zY3JvbGxhYmxlXCIsXG4gIGNvbXBhY3RUYWJzOiBcInBlLXRhYnMtLWNvbXBhY3RcIixcbiAgdGFiSGFzSWNvbjogXCJwZS10YWJzX190YWItLWljb25cIixcbiAgdGFiUm93Q2VudGVyZWQ6IFwicGUtdGFic19fcm93LS1jZW50ZXJlZFwiLFxuICB0YWJSb3dJbmRlbnQ6IFwicGUtdGFic19fcm93LS1pbmRlbnRcIixcbiAgLy8gbG9va3VwXG4gIGxhYmVsOiBidXR0b25DbGFzc2VzLmxhYmVsXG59O1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxudmFyIGdlbmVyYWxGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1idXR0b24tLXNlbGVjdGVkXCI6IHtcbiAgICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZDogXCJ0cmFuc3BhcmVudFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG5cbnZhciB0aW50Rm5zID0gZnVuY3Rpb24gdGludEZucyh0aW50KSB7XG4gIHZhciBfcmVmO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3NlbGVjdGVkXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS1idXR0b24tLXNlbGVjdGVkXCI6IHtcbiAgICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9zZWxlY3RlZFwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfc2VsZWN0ZWRfYmFja2dyb3VuZFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtYnV0dG9uLS1zZWxlY3RlZFwiOiB7XG4gICAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICAgIGJhY2tncm91bmQ6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9zZWxlY3RlZF9iYWNrZ3JvdW5kXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9pY29uXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIjpub3QoLnBlLWJ1dHRvbi0tc2VsZWN0ZWQpIC5wZS1pY29uXCI6IHtcbiAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9pY29uXCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX3JlZjtcbn07XG5cbnZhciBsaWdodFRpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImxpZ2h0XCIpKTtcblxudmFyIGRhcmtUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJkYXJrXCIpKTtcblxudmFyIHRhYkNvbG9yID0gY3JlYXRlQ29sb3Ioe1xuICB2YXJGbnM6IHtcbiAgICBsaWdodFRpbnRGbnM6IGxpZ2h0VGludEZucyxcbiAgICBkYXJrVGludEZuczogZGFya1RpbnRGbnNcbiAgfVxufSk7XG5cbnZhciB0YWJfbGFiZWxfdHJhbnNpdGlvbl9wcm9wZXJ0eV9hbmltYXRpb25fZHVyYXRpb24gPSBmdW5jdGlvbiB0YWJfbGFiZWxfdHJhbnNpdGlvbl9wcm9wZXJ0eV9hbmltYXRpb25fZHVyYXRpb24oc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjogbWl4aW4uZGVmYXVsdFRyYW5zaXRpb24odmFycy50YWJfbGFiZWxfdHJhbnNpdGlvbl9wcm9wZXJ0eSwgdmFycy5hbmltYXRpb25fZHVyYXRpb24pXG4gIH0pO1xufTtcblxudmFyIHZhckZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIFtmbGV4LmZsZXgoKSwgZmxleC5mbGV4SW5kZXgoXCJub25lXCIpLCB7XG4gICAgICB1c2VyU2VsZWN0OiBcIm5vbmVcIixcbiAgICAgIFwiLW1vei11c2VyLXNlbGVjdFwiOiBcIm5vbmVcIixcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgbGluZUhlaWdodDogdmFycy5saW5lX2hlaWdodCArIFwiZW1cIixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBcIiAucGUtYnV0dG9uX19sYWJlbCwgLnBlLWljb25cIjoge1xuICAgICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICAgIHdoaXRlU3BhY2U6IFwibm9ybWFsXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIgLnBlLWJ1dHRvbl9fbGFiZWxcIjoge1xuICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgd2lkdGg6IFwiMTAwJVwiIC8vIGZvciBJRSAxMVxuXG4gICAgICAgIH0sXG4gICAgICAgIFwiIC5wZS1pY29uXCI6IHtcbiAgICAgICAgICBtYXJnaW5MZWZ0OiBcImF1dG9cIixcbiAgICAgICAgICBtYXJnaW5SaWdodDogXCJhdXRvXCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiLnBlLXRhYnNfX3RhYi0taWNvblwiOiB7XG4gICAgICAgIFwiJiwgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudCwgLnBlLWljb25cIjoge1xuICAgICAgICAgICAgbWFyZ2luOiBcIjAgYXV0b1wiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIucGUtdGFicy0tbWVudSAmXCI6IHtcbiAgICAgICAgXCImLCAmLnBlLXRhYnNfX3RhYi0taWNvbiwgJi5wZS10ZXh0LWJ1dHRvblwiOiB7XG4gICAgICAgICAgbWluV2lkdGg6IDAsXG4gICAgICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgICBcIiAucGUtaWNvblwiOiB7XG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICAgICAgICBmb250U2l6ZTogXCIxMHB4XCIsXG4gICAgICAgICAgICAgIGxpbmVIZWlnaHQ6IFwiMTJweFwiLFxuICAgICAgICAgICAgICB0ZXh0VHJhbnNmb3JtOiBcIm5vbmVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiLnBlLXRhYnMtLWNvbXBhY3QgJlwiOiB7XG4gICAgICAgIG1pbldpZHRoOiBcImluaXRpYWxcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS10YWJzX190YWItY29udGVudFwiOiBbZmxleC5sYXlvdXRDZW50ZXJDZW50ZXIsIGZsZXgubGF5b3V0VmVydGljYWwsIHtcbiAgICAgICAgaGVpZ2h0OiBcImluaGVyaXRcIlxuICAgICAgfV0sXG4gICAgICBcIi5wZS10YWJzLS1hdXRvZml0ICZcIjogW2ZsZXguZmxleCgpLCB7XG4gICAgICAgIG1pbldpZHRoOiBcImluaXRpYWxcIixcbiAgICAgICAgbWF4V2lkdGg6IFwibm9uZVwiXG4gICAgICB9XSxcbiAgICAgIFwiLnBlLXRhYnNfX2FjdGl2ZS0tc2VsZWN0YWJsZSAmXCI6IHtcbiAgICAgICAgXCIucGUtYnV0dG9uLS1zZWxlY3RlZFwiOiB7XG4gICAgICAgICAgY3Vyc29yOiBcInBvaW50ZXJcIixcbiAgICAgICAgICBwb2ludGVyRXZlbnRzOiBcImluaXRpYWxcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfV0pXTtcbiAgfSxcbiAgdGFiX2hlaWdodDogZnVuY3Rpb24gdGFiX2hlaWdodChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBoZWlnaHQ6IHZhcnMudGFiX2hlaWdodCArIFwicHhcIixcbiAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICBoZWlnaHQ6IHZhcnMudGFiX2hlaWdodCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgdGFiX21pbl93aWR0aDogZnVuY3Rpb24gdGFiX21pbl93aWR0aChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBtaW5XaWR0aDogdmFycy50YWJfbWluX3dpZHRoICsgXCJweFwiIC8vIGZvciBzbWFsbGVyIHNjcmVlbnMsIHNlZSBhbHNvIG1lZGlhIHF1ZXJ5XG5cbiAgICB9KV07XG4gIH0sXG4gIHRhYl9tYXhfd2lkdGg6IGZ1bmN0aW9uIHRhYl9tYXhfd2lkdGgoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgbWF4V2lkdGg6IGlzTmFOKHZhcnMudGFiX21heF93aWR0aCkgPyB2YXJzLnRhYl9tYXhfd2lkdGggOiB2YXJzLnRhYl9tYXhfd2lkdGggKyBcInB4XCJcbiAgICB9KV07XG4gIH0sXG4gIHRhYl9taW5fd2lkdGhfdGFibGV0OiBmdW5jdGlvbiB0YWJfbWluX3dpZHRoX3RhYmxldChzZWxlY3RvciwgdmFycyQxKSB7XG4gICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCJAbWVkaWEgKG1pbi13aWR0aDogXCIgKyB2YXJzLmJyZWFrcG9pbnRfZm9yX3RhYmxldF9sYW5kc2NhcGVfdXAgKyBcInB4KVwiLCBfZGVmaW5lUHJvcGVydHkoe30sIFwiLnBlLXRhYnM6bm90KC5wZS10YWJzLS1zbWFsbCk6bm90KC5wZS10YWJzLS1tZW51KTpub3QoLnBlLXRhYnMtLWF1dG9maXQpOm5vdCgucGUtdGFicy0tc2Nyb2xsYWJsZSk6bm90KC5wZS10YWJzLS1jb21wYWN0KSBcIi5jb25jYXQoc2VsZWN0b3IpLCB7XG4gICAgICBtaW5XaWR0aDogdmFycyQxLnRhYl9taW5fd2lkdGhfdGFibGV0ICsgXCJweFwiXG4gICAgfSkpO1xuICB9LFxuICB0YWJfaWNvbl9sYWJlbF9oZWlnaHQ6IGZ1bmN0aW9uIHRhYl9pY29uX2xhYmVsX2hlaWdodChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS10YWJzX190YWItLWljb25cIjoge1xuICAgICAgICBcIiYsIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICAgIGhlaWdodDogdmFycy50YWJfaWNvbl9sYWJlbF9oZWlnaHQgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgdGFiX2xhYmVsX3RyYW5zaXRpb25fcHJvcGVydHk6IGZ1bmN0aW9uIHRhYl9sYWJlbF90cmFuc2l0aW9uX3Byb3BlcnR5KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFt0YWJfbGFiZWxfdHJhbnNpdGlvbl9wcm9wZXJ0eV9hbmltYXRpb25fZHVyYXRpb24oc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgYW5pbWF0aW9uX2R1cmF0aW9uOiBmdW5jdGlvbiBhbmltYXRpb25fZHVyYXRpb24oc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3RhYl9sYWJlbF90cmFuc2l0aW9uX3Byb3BlcnR5X2FuaW1hdGlvbl9kdXJhdGlvbihzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICB0YWJfY29udGVudF9wYWRkaW5nX3Y6IGZ1bmN0aW9uIHRhYl9jb250ZW50X3BhZGRpbmdfdihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgcGFkZGluZzogXCIwIFwiICsgdmFycy50YWJfY29udGVudF9wYWRkaW5nX3YgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGxhYmVsX21heF93aWR0aDogZnVuY3Rpb24gbGFiZWxfbWF4X3dpZHRoKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICBcIiAucGUtYnV0dG9uX19sYWJlbCwgLnBlLWljb25cIjoge1xuICAgICAgICAgIG1heFdpZHRoOiB2YXJzLmxhYmVsX21heF93aWR0aCArIFwicHhcIiAvLyBvciAucGUtdGFicyB3aWR0aCBtaW51cyA1NmRwXG5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgdGFiX2xhYmVsX2xpbmVfaGVpZ2h0OiBmdW5jdGlvbiB0YWJfbGFiZWxfbGluZV9oZWlnaHQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgIFwiIC5wZS1idXR0b25fX2xhYmVsLCAucGUtaWNvblwiOiB7XG4gICAgICAgICAgbGluZUhlaWdodDogdmFycy50YWJfbGFiZWxfbGluZV9oZWlnaHQgKyBcInB4XCIsXG4gICAgICAgICAgbWF4SGVpZ2h0OiAyICogdmFycy50YWJfbGFiZWxfbGluZV9oZWlnaHQgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgdGFiX2xhYmVsX3ZlcnRpY2FsX29mZnNldDogZnVuY3Rpb24gdGFiX2xhYmVsX3ZlcnRpY2FsX29mZnNldChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgXCIgLnBlLWJ1dHRvbl9fbGFiZWxcIjoge1xuICAgICAgICAgIG1hcmdpbjogdmFycy50YWJfbGFiZWxfdmVydGljYWxfb2Zmc2V0ICsgXCJweCAwIDAgMFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIHRhYl9pY29uX2xhYmVsX2ljb25fc3BhY2luZzogZnVuY3Rpb24gdGFiX2ljb25fbGFiZWxfaWNvbl9zcGFjaW5nKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXRhYnNfX3RhYi0taWNvblwiOiB7XG4gICAgICAgIFwiJiwgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgXCIgLnBlLWljb25cIjoge1xuICAgICAgICAgICAgbWFyZ2luQm90dG9tOiB2YXJzLnRhYl9pY29uX2xhYmVsX2ljb25fc3BhY2luZyArIFwicHhcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgbWVudV90YWJfaGVpZ2h0OiBmdW5jdGlvbiBtZW51X3RhYl9oZWlnaHQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGFicy0tbWVudSAmXCI6IHtcbiAgICAgICAgLy8gcmVzZXQgc2l6ZXMgdG8gZml0IHdpdGhpbiBhIHNtYWxsIHNwYWNlXG4gICAgICAgIGhlaWdodDogdmFycy5tZW51X3RhYl9oZWlnaHQgKyBcInB4XCIsXG4gICAgICAgIFwiJiwgJi5wZS10YWJzX190YWItLWljb24sICYucGUtdGV4dC1idXR0b25cIjoge1xuICAgICAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICAgICAgaGVpZ2h0OiB2YXJzLm1lbnVfdGFiX2hlaWdodCArIFwicHhcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgbWVudV90YWJfaWNvbl9sYWJlbF9oZWlnaHQ6IGZ1bmN0aW9uIG1lbnVfdGFiX2ljb25fbGFiZWxfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXRhYnMtLW1lbnUgJlwiOiB7XG4gICAgICAgIFwiJi5wZS10YWJzX190YWItLWljb25cIjoge1xuICAgICAgICAgIGhlaWdodDogdmFycy5tZW51X3RhYl9pY29uX2xhYmVsX2hlaWdodCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICB0YWJfbWVudV9jb250ZW50X3BhZGRpbmdfdjogZnVuY3Rpb24gdGFiX21lbnVfY29udGVudF9wYWRkaW5nX3Yoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGFicy0tbWVudSAmXCI6IHtcbiAgICAgICAgXCImLCAmLnBlLXRhYnNfX3RhYi0taWNvbiwgJi5wZS10ZXh0LWJ1dHRvblwiOiB7XG4gICAgICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgICBwYWRkaW5nOiBcIjAgXCIgKyB2YXJzLnRhYl9tZW51X2NvbnRlbnRfcGFkZGluZ192ICsgXCJweFwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9XG59O1xudmFyIHRhYkxheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zXG59KTtcblxudmFyIGdlbmVyYWxGbnMkMSA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS10YWJzX19zY3JvbGwtYnV0dG9uXCI6IHtcbiAgICAgICAgY29sb3I6IFwiaW5oZXJpdFwiXG4gICAgICB9LFxuICAgICAgXCIgLnBlLW5vLXRvdWNoICZcIjoge1xuICAgICAgICBcIi5wZS10YWJzLS1zY3JvbGxhYmxlXCI6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiaW5oZXJpdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiIC5wZS10YWJzX19zY3JvbGwtYnV0dG9uXCI6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcImluaGVyaXRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfVxufTtcblxudmFyIHRpbnRGbnMkMSA9IGZ1bmN0aW9uIHRpbnRGbnModGludCkge1xuICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBcImNvbG9yX1wiICsgdGludCArIFwiX3RhYl9pbmRpY2F0b3JcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS10YWJzX19pbmRpY2F0b3JcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90YWJfaW5kaWNhdG9yXCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KTtcbn07XG5cbnZhciBsaWdodFRpbnRGbnMkMSA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zJDEsIHRpbnRGbnMkMShcImxpZ2h0XCIpKTtcblxudmFyIGRhcmtUaW50Rm5zJDEgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucyQxLCB0aW50Rm5zJDEoXCJkYXJrXCIpKTtcblxudmFyIHRhYnNDb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgdmFyRm5zOiB7XG4gICAgbGlnaHRUaW50Rm5zOiBsaWdodFRpbnRGbnMkMSxcbiAgICBkYXJrVGludEZuczogZGFya1RpbnRGbnMkMVxuICB9XG59KTtcblxudmFyIGFsaWduU2lkZSA9IGZ1bmN0aW9uIGFsaWduU2lkZShpc1JUTCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBcIiAucGUtdGFic19faW5kaWNhdG9yXCI6IF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgICAgIHRyYW5zZm9ybU9yaWdpbjogaXNSVEwgPyBcInJpZ2h0IDUwJVwiIDogXCJsZWZ0IDUwJVwiXG4gICAgICB9LCBpc1JUTCA/IFwicmlnaHRcIiA6IFwibGVmdFwiLCAwKVxuICAgIH07XG4gIH07XG59O1xuXG52YXIgYWxpZ25MZWZ0ID0gYWxpZ25TaWRlKGZhbHNlKTtcbnZhciBhbGlnblJpZ2h0ID0gYWxpZ25TaWRlKHRydWUpO1xuXG52YXIgX3RhYnNfaW5kZW50ID0gZnVuY3Rpb24gdGFic19pbmRlbnQoc2VsZWN0b3IsIHZhcnMsIGlzUlRMKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtdGFic19fcm93XCI6IHtcbiAgICAgIFwiLnBlLXRhYnNfX3Jvdy0taW5kZW50XCI6IF9kZWZpbmVQcm9wZXJ0eSh7fSwgaXNSVEwgPyBcInBhZGRpbmdSaWdodFwiIDogXCJwYWRkaW5nTGVmdFwiLCB2YXJzLnRhYnNfaW5kZW50ICsgXCJweFwiKVxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgdmFyRm5zJDEgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbYWxpZ25MZWZ0KCksIHtcbiAgICAgIHVzZXJTZWxlY3Q6IFwibm9uZVwiLFxuICAgICAgXCItbW96LXVzZXItc2VsZWN0XCI6IFwibm9uZVwiLFxuICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsMCwwKVwiLFxuICAgICAgXCItd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZ1wiOiBcInRvdWNoXCIsXG4gICAgICBcIiYgOjotd2Via2l0LXNjcm9sbGJhclwiOiB7XG4gICAgICAgIFwiZGlzcGxheVwiOiBcIm5vbmVcIlxuICAgICAgfSxcbiAgICAgIFwiLnBlLXRhYnMtLXNjcm9sbGFibGVcIjoge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgXCItbXMtb3ZlcmZsb3ctc3R5bGVcIjogXCJub25lXCIsXG4gICAgICAgIFwiIC5wZS10YWJzX19zY3JvbGwtYnV0dG9uXCI6IHtcbiAgICAgICAgICAvLyBkZWZhdWx0IGhpZGUsIHNob3cgd2l0aCBodG1sLnBlLW5vLXRvdWNoXG4gICAgICAgICAgZGlzcGxheTogXCJub25lXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIgLnBlLXRhYnNfX3RhYlwiOiB7XG4gICAgICAgICAgbWluV2lkdGg6IDBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1uby10b3VjaCAmXCI6IHtcbiAgICAgICAgXCIgLnBlLXRhYnNfX3Njcm9sbC1idXR0b25cIjoge1xuICAgICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICAgIHpJbmRleDogMSxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICB0cmFuc2l0aW9uUHJvcGVydHk6IFwiYWxsXCIsXG4gICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IFwiZWFzZS1pbi1vdXRcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCIucGUtdGFicy0tc3RhcnQgLnBlLXRhYnNfX3Njcm9sbC1idXR0b24tc3RhcnRcIjoge1xuICAgICAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiLFxuICAgICAgICAgIGN1cnNvcjogXCJkZWZhdWx0XCIsXG4gICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICB9LFxuICAgICAgICBcIi5wZS10YWJzLS1lbmQgLnBlLXRhYnNfX3Njcm9sbC1idXR0b24tZW5kXCI6IHtcbiAgICAgICAgICBwb2ludGVyRXZlbnRzOiBcIm5vbmVcIixcbiAgICAgICAgICBjdXJzb3I6IFwiZGVmYXVsdFwiLFxuICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiIC5wZS10YWJzX19yb3dcIjogW2ZsZXgubGF5b3V0SG9yaXpvbnRhbCwge1xuICAgICAgICB1c2VyU2VsZWN0OiBcIm5vbmVcIixcbiAgICAgICAgXCItbW96LXVzZXItc2VsZWN0XCI6IFwibm9uZVwiLFxuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiLFxuICAgICAgICBcIi5wZS10YWJzX19yb3ctLWluZGVudFwiOiB7XG4gICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgIG92ZXJmbG93OiBcImF1dG9cIlxuICAgICAgICB9LFxuICAgICAgICBcIi5wZS10YWJzX19yb3ctLWNlbnRlcmVkXCI6IGZsZXgubGF5b3V0Q2VudGVySnVzdGlmaWVkXG4gICAgICB9XSxcbiAgICAgIFwiIC5wZS10YWJzX19zY3JvbGwtYnV0dG9uLW9mZnNldFwiOiBbZmxleC5mbGV4KCksIGZsZXguZmxleEluZGV4KFwibm9uZVwiKV0sXG4gICAgICBcIiAucGUtdGFic19faW5kaWNhdG9yXCI6IHtcbiAgICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZTNkKDAsMCwwKVwiLFxuICAgICAgICAvLyB0cmFuc2Zvcm1PcmlnaW4gc2V0IGluIGFsaWduU2lkZVxuICAgICAgICB0cmFuc2l0aW9uUHJvcGVydHk6IFwiYWxsXCIsXG4gICAgICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogXCJlYXNlLWluLW91dFwiLFxuICAgICAgICBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLFxuICAgICAgICB6SW5kZXg6IDEsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgLy8gbGVmdC9yaWdodCBzZXQgaW4gYWxpZ25TaWRlXG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgLy8gYW5kIHRyYW5zZm9ybWVkIHdpdGgganNcbiAgICAgICAgLy8gYmFja2dyb3VuZC1jb2xvciBkZWZpbmVkIGluIGltcGxlbWVudGF0aW9uL3RoZW1lIGNzc1xuICAgICAgICBvcGFjaXR5OiAwIC8vIHNldCB0byAxIGluIGpzXG5cbiAgICAgIH0sXG4gICAgICBcIiAucGUtdG9vbGJhci0tdGFicyAucGUtdG9vbGJhcl9fYmFyICZcIjogW21peGluLmZpdCgpLCB7XG4gICAgICAgIHdpZHRoOiBcImF1dG9cIixcbiAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICB0b3A6IFwiYXV0b1wiXG4gICAgICB9XVxuICAgIH1dKSwgX2RlZmluZVByb3BlcnR5KHt9LCBcIipbZGlyPXJ0bF0gXCIuY29uY2F0KHNlbGVjdG9yLCBcIiwgLnBlLXJ0bCBcIikuY29uY2F0KHNlbGVjdG9yKSwgW2FsaWduUmlnaHQoKV0pXTtcbiAgfSxcbiAgdGFic19pbmRlbnQ6IGZ1bmN0aW9uIHRhYnNfaW5kZW50KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtfdGFic19pbmRlbnQoc2VsZWN0b3IsIHZhcnMsIGZhbHNlKSwgX3RhYnNfaW5kZW50KHNlbGVjdG9yUlRMKHNlbGVjdG9yKSwgdmFycywgdHJ1ZSldO1xuICB9LFxuICB0YWJfaGVpZ2h0OiBmdW5jdGlvbiB0YWJfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXRhYnMtLXNjcm9sbGFibGVcIjoge1xuICAgICAgICBkaXNwbGF5OiBcImZsZXhcIixcbiAgICAgICAgLy8gaGlkZSBzY3JvbGxiYXIgKHRoaXMgYXBwcm9hY2ggaXMgcmVxdWlyZWQgZm9yIEZpcmVmb3gpXG4gICAgICAgIFwibWF4LWhlaWdodFwiOiB2YXJzLnRhYl9oZWlnaHQgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIHNjcm9sbGJhcl9vZmZzZXQ6IGZ1bmN0aW9uIHNjcm9sbGJhcl9vZmZzZXQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGFicy0tc2Nyb2xsYWJsZVwiOiB7XG4gICAgICAgIFwiIC5wZS10YWJzX19yb3dcIjoge1xuICAgICAgICAgIG1hcmdpbkJvdHRvbTogLXZhcnMuc2Nyb2xsYmFyX29mZnNldCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBzY3JvbGxfYnV0dG9uX3NpemU6IGZ1bmN0aW9uIHNjcm9sbF9idXR0b25fc2l6ZShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbm8tdG91Y2ggJlwiOiB7XG4gICAgICAgIFwiIC5wZS10YWJzX19zY3JvbGwtYnV0dG9uXCI6IHtcbiAgICAgICAgICB3aWR0aDogdmFycy5zY3JvbGxfYnV0dG9uX3NpemUgKyBcInB4XCIsXG4gICAgICAgICAgaGVpZ2h0OiB2YXJzLnNjcm9sbF9idXR0b25fc2l6ZSArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBzY3JvbGxfYnV0dG9uX2ZhZGVfZHVyYXRpb246IGZ1bmN0aW9uIHNjcm9sbF9idXR0b25fZmFkZV9kdXJhdGlvbihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtbm8tdG91Y2ggJlwiOiB7XG4gICAgICAgIFwiIC5wZS10YWJzX19zY3JvbGwtYnV0dG9uXCI6IHtcbiAgICAgICAgICBcIiAucGUtYnV0dG9uX19jb250ZW50XCI6IHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdmFycy5zY3JvbGxfYnV0dG9uX2ZhZGVfZHVyYXRpb25cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIHNjcm9sbF9idXR0b25fZmFkZV9kZWxheTogZnVuY3Rpb24gc2Nyb2xsX2J1dHRvbl9mYWRlX2RlbGF5KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS1uby10b3VjaCAmXCI6IHtcbiAgICAgICAgXCIgLnBlLXRhYnNfX3Njcm9sbC1idXR0b25cIjoge1xuICAgICAgICAgIFwiIC5wZS1idXR0b25fX2NvbnRlbnRcIjoge1xuICAgICAgICAgICAgdHJhbnNpdGlvbkRlbGF5OiB2YXJzLnNjcm9sbF9idXR0b25fZmFkZV9kZWxheVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgc2Nyb2xsX2J1dHRvbl9vcGFjaXR5OiBmdW5jdGlvbiBzY3JvbGxfYnV0dG9uX29wYWNpdHkoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLW5vLXRvdWNoICZcIjoge1xuICAgICAgICBcIiAucGUtdGFic19fc2Nyb2xsLWJ1dHRvblwiOiB7XG4gICAgICAgICAgXCIgLnBlLWJ1dHRvbl9fY29udGVudFwiOiB7XG4gICAgICAgICAgICBvcGFjaXR5OiB2YXJzLnNjcm9sbF9idXR0b25fb3BhY2l0eVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgdGFiX2luZGljYXRvcl9oZWlnaHQ6IGZ1bmN0aW9uIHRhYl9pbmRpY2F0b3JfaGVpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS10YWJzX19pbmRpY2F0b3JcIjoge1xuICAgICAgICBoZWlnaHQ6IHZhcnMudGFiX2luZGljYXRvcl9oZWlnaHQgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG52YXIgdGFic0xheW91dCA9IGNyZWF0ZUxheW91dCh7XG4gIHZhckZuczogdmFyRm5zJDFcbn0pO1xuXG4vLyBAdHMtY2hlY2tcbnZhciBmb250U2l6ZSA9IHRleHRCdXR0b25WYXJzLmZvbnRfc2l6ZTtcbnZhciB0YWJfbGFiZWxfbGluZV9oZWlnaHQgPSAxLjEgKiBmb250U2l6ZTtcbnZhciB0YWJfaGVpZ2h0ID0gNDg7XG52YXIgc2Nyb2xsX2J1dHRvbl9zaXplID0gdGFiX2hlaWdodDtcbi8qKlxuICogQHR5cGUge1RhYnNWYXJzfSB0YWJzVmFyc1xuICovXG5cbnZhciB0YWJzVmFycyA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICBhbmltYXRpb25fZHVyYXRpb246IHRleHRCdXR0b25WYXJzLmFuaW1hdGlvbl9kdXJhdGlvbixcbiAgaW5kaWNhdG9yX3NsaWRlX3NwZWVkOiA2MDAsXG4gIC8vIHB4IHBlciBzZWNvbmRcbiAgbGFiZWxfbWF4X3dpZHRoOiAyNjQsXG4gIG1lbnVfdGFiX2hlaWdodDogNDQsXG4gIG1lbnVfdGFiX2ljb25fbGFiZWxfaGVpZ2h0OiA0NCxcbiAgc2Nyb2xsX2J1dHRvbl9mYWRlX2RlbGF5OiBcIi4yNXNcIixcbiAgc2Nyb2xsX2J1dHRvbl9mYWRlX2R1cmF0aW9uOiBcIi4yc1wiLFxuICBzY3JvbGxfYnV0dG9uX29wYWNpdHk6IC43LFxuICBzY3JvbGxfYnV0dG9uX3NpemU6IHNjcm9sbF9idXR0b25fc2l6ZSxcbiAgc2Nyb2xsYmFyX29mZnNldDogMCxcbiAgdGFiX2NvbnRlbnRfcGFkZGluZ192OiAxMixcbiAgdGFiX2hlaWdodDogdGFiX2hlaWdodCxcbiAgdGFiX2ljb25fbGFiZWxfaGVpZ2h0OiA3MixcbiAgdGFiX2ljb25fbGFiZWxfaWNvbl9zcGFjaW5nOiA3LFxuICB0YWJfaW5kaWNhdG9yX2hlaWdodDogMixcbiAgdGFiX2xhYmVsX2xpbmVfaGVpZ2h0OiB0YWJfbGFiZWxfbGluZV9oZWlnaHQsXG4gIHRhYl9sYWJlbF90cmFuc2l0aW9uX3Byb3BlcnR5OiBcIm9wYWNpdHksIGNvbG9yLCBiYWNrZ3JvdW5kQ29sb3JcIixcbiAgdGFiX2xhYmVsX3ZlcnRpY2FsX29mZnNldDogdGFiX2xhYmVsX2xpbmVfaGVpZ2h0IC0gZm9udFNpemUsXG4gIHRhYl9tYXhfd2lkdGg6IFwiaW5pdGlhbFwiLFxuICB0YWJfbWVudV9jb250ZW50X3BhZGRpbmdfdjogNixcbiAgdGFiX21pbl93aWR0aDogNzIsXG4gIHRhYl9taW5fd2lkdGhfdGFibGV0OiAxNjAsXG4gIHRhYnNfaW5kZW50OiAwLFxuICBjb2xvcl9saWdodF90ZXh0OiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3JlZ3VsYXIpLFxuICBjb2xvcl9saWdodF9zZWxlY3RlZDogcmdiYSh2YXJzLmNvbG9yX3ByaW1hcnkpLFxuICBjb2xvcl9saWdodF9zZWxlY3RlZF9iYWNrZ3JvdW5kOiBcInRyYW5zcGFyZW50XCIsXG4gIGNvbG9yX2xpZ2h0X3RhYl9pbmRpY2F0b3I6IHJnYmEodmFycy5jb2xvcl9wcmltYXJ5KSxcbiAgY29sb3JfbGlnaHRfaWNvbjogdmFycyQxLmNvbG9yX2xpZ2h0LFxuICBjb2xvcl9kYXJrX3RleHQ6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3JlZ3VsYXIpLFxuICBjb2xvcl9kYXJrX3NlbGVjdGVkOiByZ2JhKHZhcnMuY29sb3JfcHJpbWFyeSksXG4gIGNvbG9yX2Rhcmtfc2VsZWN0ZWRfYmFja2dyb3VuZDogXCJ0cmFuc3BhcmVudFwiLFxuICBjb2xvcl9kYXJrX3RhYl9pbmRpY2F0b3I6IHJnYmEodmFycy5jb2xvcl9wcmltYXJ5KSxcbiAgY29sb3JfZGFya19pY29uOiB2YXJzJDEuY29sb3JfZGFyayAvLyBob3ZlciBjb2xvcnMgbWF5IGJlIHNldCBpbiB0aGVtZTsgZGlzYWJsZWQgYnkgZGVmYXVsdFxuICAvLyBjb2xvcl9saWdodF9ob3ZlcjogICAgICAgICAgICAgICAgICAgIHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfcHJpbWFyeSksXG4gIC8vIGNvbG9yX2xpZ2h0X2hvdmVyX2JhY2tncm91bmQ6ICAgICAgICAgXCJ0cmFuc3BhcmVudFwiLFxuICAvL1xuICAvLyBjb2xvcl9kYXJrX2hvdmVyOiAgICAgICAgICAgICAgICAgICAgIHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X3ByaW1hcnkpLFxuICAvLyBjb2xvcl9kYXJrX2hvdmVyX2JhY2tncm91bmQ6ICAgICAgICAgIFwidHJhbnNwYXJlbnRcIixcblxufTtcblxuLy8gQHRzLWNoZWNrXG52YXIgdGFic0ZucyA9IFt0YWJzTGF5b3V0LCB0YWJzQ29sb3JdO1xudmFyIHRhYkZucyA9IFt0YWJMYXlvdXQsIHRhYkNvbG9yXTtcbnZhciB0YWJzU2VsZWN0b3IgPSBcIi5cIi5jb25jYXQoY2xhc3Nlcy5jb21wb25lbnQpO1xudmFyIHRhYkNsYXNzID0gXCJcIi5jb25jYXQoY2xhc3Nlcy50YWIsIFwiIHBlLXRleHQtYnV0dG9uIHBlLWJ1dHRvblwiKTtcbnZhciB0YWJTZWxlY3RvciA9IFwiIC5cIi5jb25jYXQodGFiQ2xhc3MucmVwbGFjZSgvIC9nLCBcIi5cIikpO1xuXG52YXIgYWRkU3R5bGUgPSBmdW5jdGlvbiBhZGRTdHlsZShjdXN0b21TZWxlY3RvciwgY3VzdG9tVmFycykge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge30sXG4gICAgICBfcmVmJG1lZGlhUXVlcnkgPSBfcmVmLm1lZGlhUXVlcnksXG4gICAgICBtZWRpYVF1ZXJ5ID0gX3JlZiRtZWRpYVF1ZXJ5ID09PSB2b2lkIDAgPyBcIlwiIDogX3JlZiRtZWRpYVF1ZXJ5LFxuICAgICAgX3JlZiRzY29wZSA9IF9yZWYuc2NvcGUsXG4gICAgICBzY29wZSA9IF9yZWYkc2NvcGUgPT09IHZvaWQgMCA/IFwiXCIgOiBfcmVmJHNjb3BlO1xuXG4gIGN1c3RvbVNlbGVjdG9yICYmIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbY3VzdG9tU2VsZWN0b3IsIHRhYnNTZWxlY3Rvcl0sXG4gICAgZm5zOiB0YWJzRm5zLFxuICAgIHZhcnM6IHRhYnNWYXJzLFxuICAgIGN1c3RvbVZhcnM6IGN1c3RvbVZhcnMsXG4gICAgbWVkaWFRdWVyeTogbWVkaWFRdWVyeSxcbiAgICBzY29wZTogc2NvcGVcbiAgfSk7XG4gIGN1c3RvbVNlbGVjdG9yICYmIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgc2VsZWN0b3JzOiBbY3VzdG9tU2VsZWN0b3IsIHRhYlNlbGVjdG9yXSxcbiAgICBmbnM6IHRhYkZucyxcbiAgICB2YXJzOiB0YWJzVmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzLFxuICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0pO1xufTtcblxudmFyIGdldFN0eWxlID0gZnVuY3Rpb24gZ2V0U3R5bGUoKSB7XG4gIHZhciBjdXN0b21TZWxlY3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCJcIjtcbiAgdmFyIGN1c3RvbVZhcnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9LFxuICAgICAgX3JlZjIkbWVkaWFRdWVyeSA9IF9yZWYyLm1lZGlhUXVlcnksXG4gICAgICBtZWRpYVF1ZXJ5ID0gX3JlZjIkbWVkaWFRdWVyeSA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYyJG1lZGlhUXVlcnksXG4gICAgICBfcmVmMiRzY29wZSA9IF9yZWYyLnNjb3BlLFxuICAgICAgc2NvcGUgPSBfcmVmMiRzY29wZSA9PT0gdm9pZCAwID8gXCJcIiA6IF9yZWYyJHNjb3BlO1xuXG4gIHJldHVybiBzdHlsZXIuZ2V0U3R5bGUoe1xuICAgIHNlbGVjdG9yczogW2N1c3RvbVNlbGVjdG9yLCB0YWJzU2VsZWN0b3JdLFxuICAgIGZuczogdGFic0ZucyxcbiAgICB2YXJzOiB0YWJzVmFycyxcbiAgICBjdXN0b21WYXJzOiBjdXN0b21WYXJzLFxuICAgIG1lZGlhUXVlcnk6IG1lZGlhUXVlcnksXG4gICAgc2NvcGU6IHNjb3BlXG4gIH0pLmNvbmNhdChzdHlsZXIuZ2V0U3R5bGUoe1xuICAgIHNlbGVjdG9yczogW2N1c3RvbVNlbGVjdG9yLCB0YWJTZWxlY3Rvcl0sXG4gICAgZm5zOiB0YWJGbnMsXG4gICAgdmFyczogdGFic1ZhcnMsXG4gICAgY3VzdG9tVmFyczogY3VzdG9tVmFycyxcbiAgICBtZWRpYVF1ZXJ5OiBtZWRpYVF1ZXJ5LFxuICAgIHNjb3BlOiBzY29wZVxuICB9KSk7XG59O1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW3RhYnNTZWxlY3Rvcl0sXG4gICAgZm5zOiB0YWJzRm5zLFxuICAgIHZhcnM6IHRhYnNWYXJzXG4gIH0pO1xuICBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW3RhYlNlbGVjdG9yXSxcbiAgICBmbnM6IHRhYkZucyxcbiAgICB2YXJzOiB0YWJzVmFyc1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IGFkZEdlbmVyYWxTdHlsZVRvSGVhZCwgYWRkU3R5bGUsIGdldFN0eWxlLCB0YWJDb2xvciwgdGFiTGF5b3V0LCB0YWJzQ29sb3IsIHRhYnNMYXlvdXQsIHRhYnNWYXJzIGFzIHZhcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbG9yLCBzZWwsIGNyZWF0ZUxheW91dCwgbWl4aW4sIHJnYmEsIHN0eWxlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNzcyc7XG5pbXBvcnQgeyB2YXJzIH0gZnJvbSAncG9seXRoZW5lLXRoZW1lJztcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS10ZXh0ZmllbGRcIixcbiAgLy8gZWxlbWVudHNcbiAgY291bnRlcjogXCJwZS10ZXh0ZmllbGRfX2NvdW50ZXJcIixcbiAgZXJyb3I6IFwicGUtdGV4dGZpZWxkX19lcnJvclwiLFxuICBlcnJvclBsYWNlaG9sZGVyOiBcInBlLXRleHRmaWVsZF9fZXJyb3ItcGxhY2Vob2xkZXJcIixcbiAgZm9jdXNIZWxwOiBcInBlLXRleHRmaWVsZF9faGVscC1mb2N1c1wiLFxuICBoZWxwOiBcInBlLXRleHRmaWVsZF9faGVscFwiLFxuICBpbnB1dDogXCJwZS10ZXh0ZmllbGRfX2lucHV0XCIsXG4gIGlucHV0QXJlYTogXCJwZS10ZXh0ZmllbGRfX2lucHV0LWFyZWFcIixcbiAgbGFiZWw6IFwicGUtdGV4dGZpZWxkX19sYWJlbFwiLFxuICBvcHRpb25hbEluZGljYXRvcjogXCJwZS10ZXh0ZmllbGRfX29wdGlvbmFsLWluZGljYXRvclwiLFxuICByZXF1aXJlZEluZGljYXRvcjogXCJwZS10ZXh0ZmllbGRfX3JlcXVpcmVkLWluZGljYXRvclwiLFxuICAvLyBzdGF0ZXNcbiAgaGFzQ291bnRlcjogXCJwZS10ZXh0ZmllbGQtLWNvdW50ZXJcIixcbiAgaGFzRmxvYXRpbmdMYWJlbDogXCJwZS10ZXh0ZmllbGQtLWZsb2F0aW5nLWxhYmVsXCIsXG4gIGhhc0Z1bGxXaWR0aDogXCJwZS10ZXh0ZmllbGQtLWZ1bGwtd2lkdGhcIixcbiAgaGlkZUNsZWFyOiBcInBlLXRleHRmaWVsZC0taGlkZS1jbGVhclwiLFxuICBoaWRlU3Bpbm5lcjogXCJwZS10ZXh0ZmllbGQtLWhpZGUtc3Bpbm5lclwiLFxuICBoaWRlVmFsaWRhdGlvbjogXCJwZS10ZXh0ZmllbGQtLWhpZGUtdmFsaWRhdGlvblwiLFxuICBpc0RlbnNlOiBcInBlLXRleHRmaWVsZC0tZGVuc2VcIixcbiAgaXNSZXF1aXJlZDogXCJwZS10ZXh0ZmllbGQtLXJlcXVpcmVkXCIsXG4gIHN0YXRlRGlydHk6IFwicGUtdGV4dGZpZWxkLS1kaXJ0eVwiLFxuICBzdGF0ZURpc2FibGVkOiBcInBlLXRleHRmaWVsZC0tZGlzYWJsZWRcIixcbiAgc3RhdGVGb2N1c2VkOiBcInBlLXRleHRmaWVsZC0tZm9jdXNlZFwiLFxuICBzdGF0ZUludmFsaWQ6IFwicGUtdGV4dGZpZWxkLS1pbnZhbGlkXCIsXG4gIHN0YXRlUmVhZG9ubHk6IFwicGUtdGV4dGZpZWxkLS1yZWFkb25seVwiXG59O1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxudmFyIGdlbmVyYWxGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dC1hcmVhXCI6IHtcbiAgICAgICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgICBcIiY6YWZ0ZXJcIjoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJjdXJyZW50Y29sb3JcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIucGUtdGV4dGZpZWxkLS1kaXNhYmxlZCwgJi5wZS10ZXh0ZmllbGQtLXJlYWRvbmx5XCI6IHtcbiAgICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQtYXJlYTphZnRlclwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcInRyYW5zcGFyZW50XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiLnBlLXRleHRmaWVsZC0taW52YWxpZDpub3QoLnBlLXRleHRmaWVsZC0taGlkZS12YWxpZGF0aW9uKVwiOiB7XG4gICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0XCI6IHtcbiAgICAgICAgICBib3hTaGFkb3c6IFwibm9uZVwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG5cbnZhciB0aW50Rm5zID0gZnVuY3Rpb24gdGludEZucyh0aW50KSB7XG4gIHZhciBfcmVmO1xuXG4gIHJldHVybiBfcmVmID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2ZvY3VzX2JvcmRlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9mb2N1c19ib3JkZXJcIl0gLy8gb3ZlcnJpZGUgYnkgc3BlY2lmeWluZyBcImNvbG9yXCJcblxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2lucHV0X2JhY2tncm91bmRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0LWFyZWFcIjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9pbnB1dF9iYWNrZ3JvdW5kXCJdXG4gICAgICB9LFxuICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQ6LXdlYmtpdC1hdXRvZmlsbFwiOiB7XG4gICAgICAgIFwiLXdlYmtpdC1ib3gtc2hhZG93XCI6IFwiMCAwIDBweCAxMDAwcHggXCIgKyB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaW5wdXRfYmFja2dyb3VuZFwiXSArIFwiIGluc2V0XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9pbnB1dF90ZXh0XCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dFwiOiB7XG4gICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaW5wdXRfdGV4dFwiXVxuICAgICAgfSxcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0Oi13ZWJraXQtYXV0b2ZpbGxcIjoge1xuICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2lucHV0X3RleHRcIl0gKyBcIiAhaW1wb3J0YW50XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9jb3VudGVyX29rX2JvcmRlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGV4dGZpZWxkLS1jb3VudGVyIFwiOiB7XG4gICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0LWFyZWE6YWZ0ZXJcIjoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2NvdW50ZXJfb2tfYm9yZGVyXCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9pbnB1dF9ib3R0b21fYm9yZGVyXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dFwiOiB7XG4gICAgICAgIGJvcmRlckNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaW5wdXRfYm90dG9tX2JvcmRlclwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2xhYmVsX3RleHRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9sYWJlbF90ZXh0XCJdXG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfZGlzYWJsZWRfbGFiZWxfdGV4dFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGV4dGZpZWxkLS1kaXNhYmxlZCwgJi5wZS10ZXh0ZmllbGQtLXJlYWRvbmx5XCI6IHtcbiAgICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQtYXJlYTphZnRlclwiOiB7XG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBcImxpbmVhci1ncmFkaWVudCh0byByaWdodCwgXCIgKyB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfZGlzYWJsZWRfbGFiZWxfdGV4dFwiXSArIFwiIDIwJSwgcmdiYSgyNTUsIDI1NSwgMjU1LCAwKSAwJSlcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIucGUtdGV4dGZpZWxkLS1kaXNhYmxlZFwiOiB7XG4gICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0LCAucGUtdGV4dGZpZWxkX19sYWJlbFwiOiB7XG4gICAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9kaXNhYmxlZF9sYWJlbF90ZXh0XCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9yZWFkb25seV9sYWJlbF90ZXh0XCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS10ZXh0ZmllbGQtLXJlYWRvbmx5XCI6IHtcbiAgICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQsIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX3JlYWRvbmx5X2xhYmVsX3RleHRcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2hpZ2hsaWdodF90ZXh0XCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS10ZXh0ZmllbGQtLWZvY3VzZWRcIjoge1xuICAgICAgICAvLyBub3RlOiBub3Qgd2hlbiB0ZXh0ZmllbGQtLWRpcnR5IGFuZCBub3QgdGV4dGZpZWxkLS1mb2N1c2VkXG4gICAgICAgIFwiLnBlLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWwgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaGlnaGxpZ2h0X3RleHRcIl1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX3JlcXVpcmVkX3N5bWJvbFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGV4dGZpZWxkLS1mb2N1c2VkXCI6IHtcbiAgICAgICAgXCIucGUtdGV4dGZpZWxkLS1yZXF1aXJlZC5wZS10ZXh0ZmllbGQtLWZsb2F0aW5nLWxhYmVsXCI6IHtcbiAgICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19yZXF1aXJlZC1pbmRpY2F0b3JcIjoge1xuICAgICAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9yZXF1aXJlZF9zeW1ib2xcIl1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9oZWxwX3RleHRcIiwgZnVuY3Rpb24gKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2hlbHAsIC5wZS10ZXh0ZmllbGRfX2NvdW50ZXJcIjoge1xuICAgICAgICBjb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2hlbHBfdGV4dFwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBcImNvbG9yX1wiICsgdGludCArIFwiX2lucHV0X2Vycm9yX2JvcmRlclwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGV4dGZpZWxkLS1pbnZhbGlkOm5vdCgucGUtdGV4dGZpZWxkLS1oaWRlLXZhbGlkYXRpb24pXCI6IHtcbiAgICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXRcIjoge1xuICAgICAgICAgIGJvcmRlckNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaW5wdXRfZXJyb3JfYm9yZGVyXCJdXG4gICAgICAgIH0sXG4gICAgICAgIFwiJiwgJi5wZS10ZXh0ZmllbGQtLWNvdW50ZXJcIjoge1xuICAgICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0LWFyZWE6YWZ0ZXJcIjoge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaW5wdXRfZXJyb3JfYm9yZGVyXCJdXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfaW5wdXRfZXJyb3JfdGV4dFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGV4dGZpZWxkLS1pbnZhbGlkOm5vdCgucGUtdGV4dGZpZWxkLS1oaWRlLXZhbGlkYXRpb24pXCI6IHtcbiAgICAgICAgXCIgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaW5wdXRfZXJyb3JfdGV4dFwiXVxuICAgICAgICB9LFxuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19lcnJvciwgLnBlLXRleHRmaWVsZF9fY291bnRlciwgLnBlLXRleHRmaWVsZF9faGVscFwiOiB7XG4gICAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9pbnB1dF9lcnJvcl90ZXh0XCJdXG4gICAgICAgIH0sXG4gICAgICAgIFwiLnBlLXRleHRmaWVsZC0tcmVxdWlyZWQgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIGNvbG9yOiB2YXJzW1wiY29sb3JfXCIgKyB0aW50ICsgXCJfaW5wdXRfZXJyb3JfdGV4dFwiXVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9KSwgX3JlZjtcbn07XG5cbnZhciBsaWdodFRpbnRGbnMgPSBfZXh0ZW5kcyh7fSwgZ2VuZXJhbEZucywgdGludEZucyhcImxpZ2h0XCIpKTtcblxudmFyIGRhcmtUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJkYXJrXCIpKTtcblxudmFyIGNvbG9yID0gY3JlYXRlQ29sb3Ioe1xuICB2YXJGbnM6IHtcbiAgICBsaWdodFRpbnRGbnM6IGxpZ2h0VGludEZucyxcbiAgICBkYXJrVGludEZuczogZGFya1RpbnRGbnNcbiAgfVxufSk7XG5cbnZhciBhbGlnblNpZGUgPSBmdW5jdGlvbiBhbGlnblNpZGUoaXNSVEwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCIgLnBlLXRleHRmaWVsZF9fY291bnRlclwiOiB7XG4gICAgICAgIHRleHRBbGlnbjogaXNSVEwgPyBcImxlZnRcIiA6IFwicmlnaHRcIixcbiAgICAgICAgXCJmbG9hdFwiOiBpc1JUTCA/IFwibGVmdFwiIDogXCJyaWdodFwiLFxuICAgICAgICBwYWRkaW5nOiBpc1JUTCA/IFwiMCAxNnB4IDAgMFwiIDogXCIwIDAgMCAxNnB4XCJcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufTtcblxudmFyIGFsaWduTGVmdCA9IGFsaWduU2lkZShmYWxzZSk7XG52YXIgYWxpZ25SaWdodCA9IGFsaWduU2lkZSh0cnVlKTtcblxudmFyIHZlcnRpY2FsX3NwYWNpbmdfdG9wX2lucHV0X3BhZGRpbmdfdiA9IGZ1bmN0aW9uIHZlcnRpY2FsX3NwYWNpbmdfdG9wX2lucHV0X3BhZGRpbmdfdihzZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gc2VsKHNlbGVjdG9yLCB7XG4gICAgXCIgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgdG9wOiB2YXJzLnZlcnRpY2FsX3NwYWNpbmdfdG9wICsgdmFycy5pbnB1dF9wYWRkaW5nX3YgKyBcInB4XCJcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGZsb2F0aW5nX2xhYmVsX3ZlcnRpY2FsX3NwYWNpbmdfdG9wX2lucHV0X3BhZGRpbmdfdiA9IGZ1bmN0aW9uIGZsb2F0aW5nX2xhYmVsX3ZlcnRpY2FsX3NwYWNpbmdfdG9wX2lucHV0X3BhZGRpbmdfdihzZWxlY3RvciwgdmFycykge1xuICByZXR1cm4gc2VsKHNlbGVjdG9yLCB7XG4gICAgXCIucGUtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbCAucGUtdGV4dGZpZWxkX19sYWJlbFwiOiB7XG4gICAgICB0b3A6IHZhcnMuZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3AgKyB2YXJzLmlucHV0X3BhZGRpbmdfdiArIFwicHhcIlxuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgZGVuc2VfZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3BfaW5wdXRfcGFkZGluZ192ID0gZnVuY3Rpb24gZGVuc2VfZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3BfaW5wdXRfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIi5wZS10ZXh0ZmllbGQtLWZsb2F0aW5nLWxhYmVsLnBlLXRleHRmaWVsZC0tZGVuc2UgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgdG9wOiB2YXJzLmRlbnNlX2Zsb2F0aW5nX2xhYmVsX3ZlcnRpY2FsX3NwYWNpbmdfdG9wICsgdmFycy5pbnB1dF9wYWRkaW5nX3YgKyBcInB4XCJcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlucHV0X3BhZGRpbmdfdl9pbnB1dF9wYWRkaW5nX2ggPSBmdW5jdGlvbiBpbnB1dF9wYWRkaW5nX3ZfaW5wdXRfcGFkZGluZ19oKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dFwiOiB7XG4gICAgICBwYWRkaW5nOiB2YXJzLmlucHV0X3BhZGRpbmdfdiArIFwicHggXCIgKyB2YXJzLmlucHV0X3BhZGRpbmdfaCArIFwicHhcIlxuICAgIH0sXG4gICAgXCIgdGV4dGFyZWEucGUtdGV4dGZpZWxkX19pbnB1dFwiOiB7XG4gICAgICBtYXJnaW46IHZhcnMuaW5wdXRfcGFkZGluZ192ICsgXCJweCBcIiArIHZhcnMuaW5wdXRfcGFkZGluZ19oICsgXCJweFwiXG4gICAgfVxuICB9KTtcbn07XG5cbnZhciBmdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfdl9mdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfaCA9IGZ1bmN0aW9uIGZ1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ192X2Z1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ19oKHNlbGVjdG9yLCB2YXJzKSB7XG4gIHJldHVybiBzZWwoc2VsZWN0b3IsIHtcbiAgICBcIi5wZS10ZXh0ZmllbGQtLWZ1bGwtd2lkdGhcIjoge1xuICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXRcIjoge1xuICAgICAgICBwYWRkaW5nOiB2YXJzLmZ1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ192ICsgXCJweCBcIiArIHZhcnMuZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX2ggKyBcInB4XCJcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGRlbnNlX2Z1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ192X2RlbnNlX2Z1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ19oID0gZnVuY3Rpb24gZGVuc2VfZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX3ZfZGVuc2VfZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX2goc2VsZWN0b3IsIHZhcnMpIHtcbiAgcmV0dXJuIHNlbChzZWxlY3Rvciwge1xuICAgIFwiLnBlLXRleHRmaWVsZC0tZnVsbC13aWR0aC5wZS10ZXh0ZmllbGQtLWRlbnNlXCI6IHtcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0XCI6IHtcbiAgICAgICAgcGFkZGluZzogdmFycy5kZW5zZV9mdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfdiArIFwicHggXCIgKyB2YXJzLmRlbnNlX2Z1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ19oICsgXCJweFwiXG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbnZhciB2YXJGbnMgPSB7XG4gIGdlbmVyYWxfc3R5bGVzOiBmdW5jdGlvbiBnZW5lcmFsX3N0eWxlcyhzZWxlY3Rvcikge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCBbYWxpZ25MZWZ0KCksIG1peGluLmNsZWFyZml4KCksIHtcbiAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXG4gICAgICBsaW5lSGVpZ2h0OiB2YXJzLmxpbmVfaGVpZ2h0LFxuICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBvdmVyZmxvdzogXCJ2aXNpYmxlXCIsXG4gICAgICAvLyBGaXJlZm94IG5lZWRzIHRoaXNcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIG1heFdpZHRoOiBcIjEwMCVcIixcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0LWFyZWFcIjoge1xuICAgICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgICBcIiY6YWZ0ZXJcIjoge1xuICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgICAgY29udGVudDogXCJcXFwiXFxcIlwiLFxuICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIi5wZS10ZXh0ZmllbGQtLWZvY3VzZWQgLnBlLXRleHRmaWVsZF9faW5wdXQtYXJlYTphZnRlclwiOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dFwiOiB7XG4gICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIixcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBiYWNrZ3JvdW5kOiBcIm5vbmVcIixcbiAgICAgICAgY29sb3I6IFwiaW5oZXJpdFwiLFxuICAgICAgICBib3JkZXJTdHlsZTogXCJub25lIG5vbmUgc29saWQgbm9uZVwiLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgLy8gZGlzYWJsZSBnbG93IG9uIHRleHRmaWVsZC0taW52YWxpZCBmaWVsZHNcbiAgICAgICAgXCImOnRleHRmaWVsZC0taW52YWxpZFwiOiB7XG4gICAgICAgICAgYm94U2hhZG93OiBcIm5vbmVcIlxuICAgICAgICB9LFxuICAgICAgICBcIjppbnZhbGlkXCI6IHtcbiAgICAgICAgICBib3hTaGFkb3c6IFwibm9uZVwiXG4gICAgICAgIH0sXG4gICAgICAgIC8vIFJlbW92ZSBjbGVhciBjcm9zcyBpY29uIGZyb20gSUVcbiAgICAgICAgXCI6Oi1tcy1jbGVhclwiOiB7XG4gICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgaGVpZ2h0OiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcIiB0ZXh0YXJlYS5wZS10ZXh0ZmllbGRfX2lucHV0XCI6IHtcbiAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgICB9LFxuICAgICAgLy8gZm9jdXMgYm9yZGVyXG4gICAgICBcIi5wZS10ZXh0ZmllbGQtLWZvY3VzZWQgLnBlLXRleHRmaWVsZF9faW5wdXRcIjoge1xuICAgICAgICBvdXRsaW5lOiBcIm5vbmVcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIixcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6IFwibm9uZVwiLFxuICAgICAgICB3aGl0ZVNwYWNlOiBcIm5vd3JhcFwiLFxuICAgICAgICBjdXJzb3I6IFwidGV4dFwiXG4gICAgICB9LFxuICAgICAgXCIucGUtdGV4dGZpZWxkLS1kaXJ0eSAucGUtdGV4dGZpZWxkX19sYWJlbFwiOiB7XG4gICAgICAgIHZpc2liaWxpdHk6IFwiaGlkZGVuXCJcbiAgICAgIH0sXG4gICAgICBcIiY6bm90KC5wZS10ZXh0ZmllbGQtLW5vLWNoYXIpXCI6IHtcbiAgICAgICAgXCIgLnBlLXRleHRmaWVsZF9fcmVxdWlyZWQtaW5kaWNhdG9yLCAucGUtdGV4dGZpZWxkX19vcHRpb25hbC1pbmRpY2F0b3JcIjoge1xuICAgICAgICAgIHBhZGRpbmc6IFwiMCAwIDAgLjI1ZW1cIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIucGUtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbFwiOiB7XG4gICAgICAgIFwiLnBlLXRleHRmaWVsZC0tZm9jdXNlZCwgJi5wZS10ZXh0ZmllbGQtLWRpcnR5XCI6IHtcbiAgICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19sYWJlbFwiOiB7XG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBcInZpc2libGVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiLnBlLXRleHRmaWVsZC0tZGlzYWJsZWQsICYucGUtdGV4dGZpZWxkLS1yZWFkb25seVwiOiB7XG4gICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgICBjdXJzb3I6IFwiYXV0b1wiXG4gICAgICAgIH0sXG4gICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0XCI6IHtcbiAgICAgICAgICBcImJvcmRlci1ib3R0b21cIjogXCJub25lXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQtYXJlYTphZnRlclwiOiB7XG4gICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICBoZWlnaHQ6IFwiMXB4XCIsXG4gICAgICAgICAgYm90dG9tOiBcIi0xcHhcIixcbiAgICAgICAgICBiYWNrZ3JvdW5kUG9zaXRpb246IFwidG9wXCIsXG4gICAgICAgICAgYmFja2dyb3VuZFNpemU6IFwiNHB4IDFweFwiLFxuICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6IFwicmVwZWF0LXhcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIgLnBlLXRleHRmaWVsZF9fZXJyb3IsIC5wZS10ZXh0ZmllbGRfX2Vycm9yLXBsYWNlaG9sZGVyLCAucGUtdGV4dGZpZWxkX19oZWxwLCAucGUtdGV4dGZpZWxkX19jb3VudGVyXCI6IHtcbiAgICAgICAgbGluZUhlaWdodDogdmFycy5saW5lX2hlaWdodFxuICAgICAgfSxcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2hlbHAtZm9jdXNcIjogW21peGluLmRlZmF1bHRUcmFuc2l0aW9uKFwib3BhY2l0eVwiKSwge1xuICAgICAgICBvcGFjaXR5OiAwXG4gICAgICB9XSxcbiAgICAgIFwiLnBlLXRleHRmaWVsZC0tZm9jdXNlZCAucGUtdGV4dGZpZWxkX19oZWxwLWZvY3VzLCAmLnBlLXRleHRmaWVsZC0tZGlydHkgLnBlLXRleHRmaWVsZF9faGVscC1mb2N1c1wiOiB7XG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH0sXG4gICAgICBcIi5wZS10ZXh0ZmllbGQtLWhpZGUtY2xlYXJcIjoge1xuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dDo6LW1zLWNsZWFyXCI6IHtcbiAgICAgICAgICBkaXNwbGF5OiBcIm5vbmVcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIucGUtdGV4dGZpZWxkLS1oaWRlLXNwaW5uZXJcIjoge1xuICAgICAgICBcIiBpbnB1dFt0eXBlPW51bWJlcl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sIGlucHV0W3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvblwiOiB7XG4gICAgICAgICAgXCItd2Via2l0LWFwcGVhcmFuY2VcIjogXCJub25lXCIsXG4gICAgICAgICAgbWFyZ2luOiAwXG4gICAgICAgIH0sXG4gICAgICAgIFwiIGlucHV0W3R5cGU9bnVtYmVyXVwiOiB7XG4gICAgICAgICAgXCItbW96LWFwcGVhcmFuY2VcIjogXCJ0ZXh0ZmllbGRcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgXCIucGUtdGV4dGZpZWxkLS1mdWxsLXdpZHRoXCI6IHtcbiAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dC1hcmVhXCI6IHtcbiAgICAgICAgICBwYWRkaW5nOiAwXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XSksIF9kZWZpbmVQcm9wZXJ0eSh7fSwgXCIqW2Rpcj1ydGxdIFwiLmNvbmNhdChzZWxlY3RvciwgXCIsIC5wZS1ydGwgXCIpLmNvbmNhdChzZWxlY3RvciksIFthbGlnblJpZ2h0KCldKV07XG4gIH0sXG4gIHZlcnRpY2FsX3NwYWNpbmdfYm90dG9tOiBmdW5jdGlvbiB2ZXJ0aWNhbF9zcGFjaW5nX2JvdHRvbShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBwYWRkaW5nQm90dG9tOiB2YXJzLnZlcnRpY2FsX3NwYWNpbmdfYm90dG9tICsgXCJweFwiXG4gICAgfSldO1xuICB9LFxuICBmbG9hdGluZ19sYWJlbF92ZXJ0aWNhbF9zcGFjaW5nX2JvdHRvbTogZnVuY3Rpb24gZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ19ib3R0b20oc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbFwiOiB7XG4gICAgICAgIHBhZGRpbmdCb3R0b206IHZhcnMuZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ19ib3R0b20gKyBcInB4XCJcbiAgICAgIH0sXG4gICAgICBcIi5wZS10ZXh0ZmllbGQtLWRlbnNlXCI6IHtcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogdmFycy5kZW5zZV9mbG9hdGluZ19sYWJlbF92ZXJ0aWNhbF9zcGFjaW5nX2JvdHRvbSArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgdmVydGljYWxfc3BhY2luZ190b3A6IGZ1bmN0aW9uIHZlcnRpY2FsX3NwYWNpbmdfdG9wKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0LWFyZWFcIjoge1xuICAgICAgICBwYWRkaW5nVG9wOiB2YXJzLnZlcnRpY2FsX3NwYWNpbmdfdG9wICsgXCJweFwiXG4gICAgICB9XG4gICAgfSksIHZlcnRpY2FsX3NwYWNpbmdfdG9wX2lucHV0X3BhZGRpbmdfdihzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBpbnB1dF9wYWRkaW5nX3Y6IGZ1bmN0aW9uIGlucHV0X3BhZGRpbmdfdihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbdmVydGljYWxfc3BhY2luZ190b3BfaW5wdXRfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSwgZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3BfaW5wdXRfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSwgZGVuc2VfZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3BfaW5wdXRfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSwgaW5wdXRfcGFkZGluZ192X2lucHV0X3BhZGRpbmdfaChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBpbnB1dF9wYWRkaW5nX2g6IGZ1bmN0aW9uIGlucHV0X3BhZGRpbmdfaChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtdGV4dGZpZWxkX19sYWJlbFwiOiB7XG4gICAgICAgIGxlZnQ6IHZhcnMuaW5wdXRfcGFkZGluZ19oICsgXCJweFwiLFxuICAgICAgICByaWdodDogdmFycy5pbnB1dF9wYWRkaW5nX2ggKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KSwgaW5wdXRfcGFkZGluZ192X2lucHV0X3BhZGRpbmdfaChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBmbG9hdGluZ19sYWJlbF92ZXJ0aWNhbF9zcGFjaW5nX3RvcDogZnVuY3Rpb24gZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3Aoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbFwiOiB7XG4gICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0LWFyZWFcIjoge1xuICAgICAgICAgIHBhZGRpbmdUb3A6IHZhcnMuZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3AgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLCBmbG9hdGluZ19sYWJlbF92ZXJ0aWNhbF9zcGFjaW5nX3RvcF9pbnB1dF9wYWRkaW5nX3Yoc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgZGVuc2VfZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3A6IGZ1bmN0aW9uIGRlbnNlX2Zsb2F0aW5nX2xhYmVsX3ZlcnRpY2FsX3NwYWNpbmdfdG9wKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWwucGUtdGV4dGZpZWxkLS1kZW5zZVwiOiB7XG4gICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0LWFyZWFcIjoge1xuICAgICAgICAgIHBhZGRpbmdUb3A6IHZhcnMuZGVuc2VfZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3AgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLCBkZW5zZV9mbG9hdGluZ19sYWJlbF92ZXJ0aWNhbF9zcGFjaW5nX3RvcF9pbnB1dF9wYWRkaW5nX3Yoc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgaW5wdXRfZm9jdXNfYm9yZGVyX2FuaW1hdGlvbl9kdXJhdGlvbjogZnVuY3Rpb24gaW5wdXRfZm9jdXNfYm9yZGVyX2FuaW1hdGlvbl9kdXJhdGlvbihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dC1hcmVhOmFmdGVyXCI6IG1peGluLmRlZmF1bHRUcmFuc2l0aW9uKFwib3BhY2l0eVwiLCB2YXJzLmlucHV0X2ZvY3VzX2JvcmRlcl9hbmltYXRpb25fZHVyYXRpb24pXG4gICAgfSldO1xuICB9LFxuICBpbnB1dF9mb2N1c19ib3JkZXJfd2lkdGg6IGZ1bmN0aW9uIGlucHV0X2ZvY3VzX2JvcmRlcl93aWR0aChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtdGV4dGZpZWxkX19pbnB1dC1hcmVhOmFmdGVyXCI6IHtcbiAgICAgICAgaGVpZ2h0OiB2YXJzLmlucHV0X2ZvY3VzX2JvcmRlcl93aWR0aCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgZm9udF9zaXplX2Vycm9yOiBmdW5jdGlvbiBmb250X3NpemVfZXJyb3Ioc2VsZWN0b3IsIHZhcnMkMSkge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIiAucGUtdGV4dGZpZWxkX19lcnJvciwgLnBlLXRleHRmaWVsZF9fZXJyb3ItcGxhY2Vob2xkZXIsIC5wZS10ZXh0ZmllbGRfX2hlbHAsIC5wZS10ZXh0ZmllbGRfX2NvdW50ZXJcIjoge1xuICAgICAgICBmb250U2l6ZTogdmFycyQxLmZvbnRfc2l6ZV9lcnJvciArIFwicHhcIixcbiAgICAgICAgbWluSGVpZ2h0OiB2YXJzJDEuZm9udF9zaXplX2Vycm9yICogdmFycy5saW5lX2hlaWdodCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgZm9udF9zaXplX2lucHV0OiBmdW5jdGlvbiBmb250X3NpemVfaW5wdXQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQsIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgZm9udFNpemU6IHZhcnMuZm9udF9zaXplX2lucHV0ICsgXCJweFwiXG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBsaW5lX2hlaWdodF9pbnB1dDogZnVuY3Rpb24gbGluZV9oZWlnaHRfaW5wdXQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXQsIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgbGluZUhlaWdodDogdmFycy5saW5lX2hlaWdodF9pbnB1dCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgaW5wdXRfYm9yZGVyX3dpZHRoOiBmdW5jdGlvbiBpbnB1dF9ib3JkZXJfd2lkdGgoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXRleHRmaWVsZF9faW5wdXRcIjoge1xuICAgICAgICBib3JkZXJXaWR0aDogdmFycy5pbnB1dF9ib3JkZXJfd2lkdGggKyBcInB4XCJcbiAgICAgIH0sXG4gICAgICAvLyBmb2N1cyBib3JkZXJcbiAgICAgIFwiLnBlLXRleHRmaWVsZC0tZm9jdXNlZCAucGUtdGV4dGZpZWxkX19pbnB1dFwiOiB7XG4gICAgICAgIGJvcmRlcldpZHRoOiB2YXJzLmlucHV0X2JvcmRlcl93aWR0aCArIFwicHhcIixcbiAgICAgICAgb3V0bGluZTogXCJub25lXCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGZ1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ192OiBmdW5jdGlvbiBmdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfdihzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS10ZXh0ZmllbGQtLWZ1bGwtd2lkdGhcIjoge1xuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19sYWJlbFwiOiB7XG4gICAgICAgICAgdG9wOiB2YXJzLmZ1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ192ICsgXCJweFwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSwgZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX3ZfZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX2goc2VsZWN0b3IsIHZhcnMpXTtcbiAgfSxcbiAgZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX2g6IGZ1bmN0aW9uIGZ1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ19oKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXRleHRmaWVsZC0tZnVsbC13aWR0aFwiOiB7XG4gICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2Vycm9yLCAucGUtdGV4dGZpZWxkX19oZWxwLCAucGUtdGV4dGZpZWxkX19jb3VudGVyXCI6IHtcbiAgICAgICAgICBwYWRkaW5nTGVmdDogdmFycy5mdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfaCArIFwicHhcIixcbiAgICAgICAgICBwYWRkaW5nUmlnaHQ6IHZhcnMuZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX2ggKyBcInB4XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCIgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIGxlZnQ6IHZhcnMuZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX2ggKyBcInB4XCIsXG4gICAgICAgICAgcmlnaHQ6IHZhcnMuZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX2ggKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLCBmdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfdl9mdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfaChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBkZW5zZV9mb250X3NpemVfaW5wdXQ6IGZ1bmN0aW9uIGRlbnNlX2ZvbnRfc2l6ZV9pbnB1dChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS10ZXh0ZmllbGQtLWRlbnNlXCI6IHtcbiAgICAgICAgXCImLCAucGUtdGV4dGZpZWxkX19pbnB1dCwgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgIGZvbnRTaXplOiB2YXJzLmRlbnNlX2ZvbnRfc2l6ZV9pbnB1dCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSldO1xuICB9LFxuICBkZW5zZV9mdWxsX3dpZHRoX2ZvbnRfc2l6ZV9pbnB1dDogZnVuY3Rpb24gZGVuc2VfZnVsbF93aWR0aF9mb250X3NpemVfaW5wdXQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGV4dGZpZWxkLS1kZW5zZVwiOiB7XG4gICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2lucHV0XCI6IHtcbiAgICAgICAgICBmb250U2l6ZTogdmFycy5kZW5zZV9mdWxsX3dpZHRoX2ZvbnRfc2l6ZV9pbnB1dCArIFwicHhcIlxuICAgICAgICB9LFxuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19sYWJlbFwiOiB7XG4gICAgICAgICAgZm9udFNpemU6IHZhcnMuZGVuc2VfZnVsbF93aWR0aF9mb250X3NpemVfaW5wdXQgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgZGVuc2VfZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX3Y6IGZ1bmN0aW9uIGRlbnNlX2Z1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ192KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXRleHRmaWVsZC0tZnVsbC13aWR0aFwiOiB7XG4gICAgICAgIFwiLnBlLXRleHRmaWVsZC0tZGVuc2VcIjoge1xuICAgICAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2xhYmVsXCI6IHtcbiAgICAgICAgICAgIHRvcDogdmFycy5kZW5zZV9mdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfdiArIFwicHhcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pLCBkZW5zZV9mdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfdl9kZW5zZV9mdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfaChzZWxlY3RvciwgdmFycyldO1xuICB9LFxuICBkZW5zZV9mdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfaDogZnVuY3Rpb24gZGVuc2VfZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX2goc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGV4dGZpZWxkLS1mdWxsLXdpZHRoXCI6IHtcbiAgICAgICAgXCIucGUtdGV4dGZpZWxkLS1kZW5zZVwiOiB7XG4gICAgICAgICAgXCIgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgICAgbGVmdDogdmFycy5kZW5zZV9mdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfaCArIFwicHhcIixcbiAgICAgICAgICAgIHJpZ2h0OiB2YXJzLmRlbnNlX2Z1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ19oICsgXCJweFwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSksIGRlbnNlX2Z1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ192X2RlbnNlX2Z1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ19oKHNlbGVjdG9yLCB2YXJzKV07XG4gIH0sXG4gIG1hcmdpbl90b3BfZXJyb3JfbWVzc2FnZTogZnVuY3Rpb24gbWFyZ2luX3RvcF9lcnJvcl9tZXNzYWdlKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiIC5wZS10ZXh0ZmllbGRfX2Vycm9yLCAucGUtdGV4dGZpZWxkX19lcnJvci1wbGFjZWhvbGRlciwgLnBlLXRleHRmaWVsZF9faGVscCwgLnBlLXRleHRmaWVsZF9fY291bnRlclwiOiB7XG4gICAgICAgIG1hcmdpblRvcDogdmFycy5tYXJnaW5fdG9wX2Vycm9yX21lc3NhZ2UgKyBcInB4XCJcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGZsb2F0aW5nX2xhYmVsX2FuaW1hdGlvbl9kdXJhdGlvbjogZnVuY3Rpb24gZmxvYXRpbmdfbGFiZWxfYW5pbWF0aW9uX2R1cmF0aW9uKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWxcIjoge1xuICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19sYWJlbFwiOiBtaXhpbi5kZWZhdWx0VHJhbnNpdGlvbihcImFsbFwiLCB2YXJzLmZsb2F0aW5nX2xhYmVsX2FuaW1hdGlvbl9kdXJhdGlvbilcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGRlbnNlX2ZvbnRfc2l6ZV9mbG9hdGluZ19sYWJlbDogZnVuY3Rpb24gZGVuc2VfZm9udF9zaXplX2Zsb2F0aW5nX2xhYmVsKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWxcIjoge1xuICAgICAgICBcIi5wZS10ZXh0ZmllbGQtLWRlbnNlXCI6IHtcbiAgICAgICAgICBcIi5wZS10ZXh0ZmllbGQtLWZvY3VzZWQsICYucGUtdGV4dGZpZWxkLS1kaXJ0eVwiOiB7XG4gICAgICAgICAgICBmb250U2l6ZTogdmFycy5kZW5zZV9mb250X3NpemVfZmxvYXRpbmdfbGFiZWwgKyBcInB4XCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGRlbnNlX2Zsb2F0aW5nX2xhYmVsX3RvcDogZnVuY3Rpb24gZGVuc2VfZmxvYXRpbmdfbGFiZWxfdG9wKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWxcIjoge1xuICAgICAgICBcIi5wZS10ZXh0ZmllbGQtLWRlbnNlXCI6IHtcbiAgICAgICAgICBcIi5wZS10ZXh0ZmllbGQtLWZvY3VzZWQsICYucGUtdGV4dGZpZWxkLS1kaXJ0eVwiOiB7XG4gICAgICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19sYWJlbFwiOiB7XG4gICAgICAgICAgICAgIHRvcDogdmFycy5kZW5zZV9mbG9hdGluZ19sYWJlbF90b3AgKyBcInB4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGZsb2F0aW5nX2xhYmVsX3RvcDogZnVuY3Rpb24gZmxvYXRpbmdfbGFiZWxfdG9wKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiLnBlLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWxcIjoge1xuICAgICAgICBcIi5wZS10ZXh0ZmllbGQtLWZvY3VzZWQsICYucGUtdGV4dGZpZWxkLS1kaXJ0eVwiOiB7XG4gICAgICAgICAgXCIgLnBlLXRleHRmaWVsZF9fbGFiZWxcIjoge1xuICAgICAgICAgICAgdG9wOiB2YXJzLmZsb2F0aW5nX2xhYmVsX3RvcCArIFwicHhcIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgZm9udF9zaXplX2Zsb2F0aW5nX2xhYmVsOiBmdW5jdGlvbiBmb250X3NpemVfZmxvYXRpbmdfbGFiZWwoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdGV4dGZpZWxkLS1mbG9hdGluZy1sYWJlbFwiOiB7XG4gICAgICAgIFwiLnBlLXRleHRmaWVsZC0tZm9jdXNlZCwgJi5wZS10ZXh0ZmllbGQtLWRpcnR5XCI6IHtcbiAgICAgICAgICBcIiAucGUtdGV4dGZpZWxkX19sYWJlbFwiOiB7XG4gICAgICAgICAgICBmb250U2l6ZTogdmFycy5mb250X3NpemVfZmxvYXRpbmdfbGFiZWwgKyBcInB4XCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH1cbn07XG52YXIgbGF5b3V0ID0gY3JlYXRlTGF5b3V0KHtcbiAgdmFyRm5zOiB2YXJGbnNcbn0pO1xuXG4vLyBAdHMtY2hlY2tcbi8qKlxuICogQHR5cGUge1RleHRmaWVsZFZhcnN9IHRleHRmaWVsZFZhcnNcbiAqL1xuXG52YXIgdGV4dGZpZWxkVmFycyA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICBkZW5zZV9mbG9hdGluZ19sYWJlbF90b3A6IDEwLFxuICBkZW5zZV9mbG9hdGluZ19sYWJlbF92ZXJ0aWNhbF9zcGFjaW5nX2JvdHRvbTogNCxcbiAgLy8gOCBtaW51cyBuYXR1cmFsIGxhYmVsIGhlaWdodCBwYWRkaW5nICgxKVxuICBkZW5zZV9mbG9hdGluZ19sYWJlbF92ZXJ0aWNhbF9zcGFjaW5nX3RvcDogMjMsXG4gIC8vIDEyICsgOCArIDQgbWludXMgbmF0dXJhbCBsYWJlbCBoZWlnaHQgcGFkZGluZyAoMSlcbiAgZGVuc2VfZm9udF9zaXplX2Zsb2F0aW5nX2xhYmVsOiAxMyxcbiAgZGVuc2VfZm9udF9zaXplX2lucHV0OiAxMyxcbiAgZGVuc2VfZnVsbF93aWR0aF9mb250X3NpemVfaW5wdXQ6IDEzLFxuICBkZW5zZV9mdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfaDogMTYsXG4gIGRlbnNlX2Z1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ192OiAxNSxcbiAgLy8gMTYgbWludXMgbmF0dXJhbCBsYWJlbCBoZWlnaHQgcGFkZGluZyAoMSlcbiAgZmxvYXRpbmdfbGFiZWxfYW5pbWF0aW9uX2R1cmF0aW9uOiBcIi4xMnNcIixcblxuICAvKipcbiAgICogVG9wIHBvc2l0aW9uIGluIHBpeGVsc1xuICAgKi9cbiAgZmxvYXRpbmdfbGFiZWxfdG9wOiAxNCxcbiAgZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ19ib3R0b206IDcsXG4gIC8vIDggbWludXMgbmF0dXJhbCBsYWJlbCBoZWlnaHQgcGFkZGluZyAoMSlcbiAgZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3A6IDMwLFxuICAvLyAxNiArIDggKyA4IG1pbnVzIG5hdHVyYWwgbGFiZWwgaGVpZ2h0IHBhZGRpbmcgKDIpXG4gIGZvbnRfc2l6ZV9lcnJvcjogMTIsXG4gIGZvbnRfc2l6ZV9mbG9hdGluZ19sYWJlbDogMTIsXG4gIGZvbnRfc2l6ZV9pbnB1dDogMTYsXG4gIGZ1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ19oOiAyMCxcbiAgZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX3Y6IDE4LFxuICAvLyAyMCBtaW51cyBuYXR1cmFsIGxhYmVsIGhlaWdodCBwYWRkaW5nICgyKVxuICBpbnB1dF9ib3JkZXJfd2lkdGg6IDEsXG4gIGlucHV0X2ZvY3VzX2JvcmRlcl9hbmltYXRpb25fZHVyYXRpb246IHZhcnMuYW5pbWF0aW9uX2R1cmF0aW9uLFxuICBpbnB1dF9mb2N1c19ib3JkZXJfd2lkdGg6IDIsXG4gIGlucHV0X3BhZGRpbmdfaDogMCxcbiAgaW5wdXRfcGFkZGluZ192OiA3LFxuICBsaW5lX2hlaWdodF9pbnB1dDogMjAsXG4gIG1hcmdpbl90b3BfZXJyb3JfbWVzc2FnZTogNixcbiAgdmVydGljYWxfc3BhY2luZ19ib3R0b206IDcsXG4gIC8vIDggbWludXMgbmF0dXJhbCBsYWJlbCBoZWlnaHQgcGFkZGluZyAoMSlcbiAgdmVydGljYWxfc3BhY2luZ190b3A6IDYsXG4gIC8vIDggbWludXMgbmF0dXJhbCBsYWJlbCBoZWlnaHQgcGFkZGluZyAoMSlcbiAgY29sb3JfbGlnaHRfaW5wdXRfdGV4dDogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfdGV4dF9wcmltYXJ5KSxcbiAgY29sb3JfbGlnaHRfaW5wdXRfYmFja2dyb3VuZDogXCJ0cmFuc3BhcmVudFwiLFxuICAvLyBvbmx5IHVzZWQgdG8gXCJyZW1vdmVcIiBhdXRvZmlsbCBjb2xvclxuICBjb2xvcl9saWdodF9oaWdobGlnaHRfdGV4dDogcmdiYSh2YXJzLmNvbG9yX3ByaW1hcnksIHZhcnMuYmxlbmRfbGlnaHRfdGV4dF9wcmltYXJ5KSxcbiAgY29sb3JfbGlnaHRfaW5wdXRfYm90dG9tX2JvcmRlcjogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfYm9yZGVyX2xpZ2h0KSxcbiAgY29sb3JfbGlnaHRfaW5wdXRfZXJyb3JfdGV4dDogcmdiYShcIjIyMSwgNDQsIDBcIiksXG4gIGNvbG9yX2xpZ2h0X2lucHV0X2Vycm9yX2JvcmRlcjogcmdiYShcIjIyMSwgNDQsIDBcIiksXG4gIGNvbG9yX2xpZ2h0X2lucHV0X3BsYWNlaG9sZGVyOiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3RlcnRpYXJ5KSxcbiAgY29sb3JfbGlnaHRfbGFiZWxfdGV4dDogcmdiYSh2YXJzLmNvbG9yX2xpZ2h0X2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfbGlnaHRfdGV4dF90ZXJ0aWFyeSksXG4gIGNvbG9yX2xpZ2h0X2Rpc2FibGVkX2xhYmVsX3RleHQ6IHJnYmEodmFycy5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2xpZ2h0X3RleHRfZGlzYWJsZWQpLFxuICBjb2xvcl9saWdodF9yZWFkb25seV9sYWJlbF90ZXh0OiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3RlcnRpYXJ5KSxcbiAgY29sb3JfbGlnaHRfaGVscF90ZXh0OiByZ2JhKHZhcnMuY29sb3JfbGlnaHRfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9saWdodF90ZXh0X3RlcnRpYXJ5KSxcbiAgY29sb3JfbGlnaHRfcmVxdWlyZWRfc3ltYm9sOiByZ2JhKFwiMjIxLCA0NCwgMFwiKSxcbiAgY29sb3JfbGlnaHRfZm9jdXNfYm9yZGVyOiByZ2JhKHZhcnMuY29sb3JfcHJpbWFyeSksXG4gIGNvbG9yX2xpZ2h0X2NvdW50ZXJfb2tfYm9yZGVyOiByZ2JhKHZhcnMuY29sb3JfcHJpbWFyeSksXG4gIGNvbG9yX2RhcmtfaW5wdXRfdGV4dDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX3RleHRfcHJpbWFyeSksXG4gIGNvbG9yX2RhcmtfaW5wdXRfYmFja2dyb3VuZDogXCJ0cmFuc3BhcmVudFwiLFxuICAvLyBvbmx5IHVzZWQgdG8gXCJyZW1vdmVcIiBhdXRvZmlsbCBjb2xvclxuICBjb2xvcl9kYXJrX2hpZ2hsaWdodF90ZXh0OiByZ2JhKHZhcnMuY29sb3JfcHJpbWFyeSwgdmFycy5ibGVuZF9kYXJrX3RleHRfcHJpbWFyeSksXG4gIGNvbG9yX2RhcmtfaW5wdXRfYm90dG9tX2JvcmRlcjogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX2JvcmRlcl9saWdodCksXG4gIGNvbG9yX2RhcmtfaW5wdXRfZXJyb3JfdGV4dDogcmdiYShcIjIyMiwgNTAsIDM4XCIpLFxuICBjb2xvcl9kYXJrX2lucHV0X2Vycm9yX2JvcmRlcjogcmdiYShcIjIyMiwgNTAsIDM4XCIpLFxuICBjb2xvcl9kYXJrX2lucHV0X3BsYWNlaG9sZGVyOiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfdGV4dF90ZXJ0aWFyeSksXG4gIGNvbG9yX2RhcmtfbGFiZWxfdGV4dDogcmdiYSh2YXJzLmNvbG9yX2RhcmtfZm9yZWdyb3VuZCwgdmFycy5ibGVuZF9kYXJrX3RleHRfdGVydGlhcnkpLFxuICBjb2xvcl9kYXJrX2Rpc2FibGVkX2xhYmVsX3RleHQ6IHJnYmEodmFycy5jb2xvcl9kYXJrX2ZvcmVncm91bmQsIHZhcnMuYmxlbmRfZGFya190ZXh0X2Rpc2FibGVkKSxcbiAgY29sb3JfZGFya19yZWFkb25seV9sYWJlbF90ZXh0OiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfdGV4dF90ZXJ0aWFyeSksXG4gIGNvbG9yX2RhcmtfaGVscF90ZXh0OiByZ2JhKHZhcnMuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzLmJsZW5kX2RhcmtfdGV4dF90ZXJ0aWFyeSksXG4gIGNvbG9yX2RhcmtfcmVxdWlyZWRfc3ltYm9sOiByZ2JhKFwiMjIxLCA0NCwgMFwiKSxcbiAgY29sb3JfZGFya19mb2N1c19ib3JkZXI6IHJnYmEodmFycy5jb2xvcl9wcmltYXJ5KSxcbiAgY29sb3JfZGFya19jb3VudGVyX29rX2JvcmRlcjogcmdiYSh2YXJzLmNvbG9yX3ByaW1hcnkpXG59O1xuXG4vLyBAdHMtY2hlY2tcbnZhciBmbnMgPSBbbGF5b3V0LCBjb2xvcl07XG52YXIgc2VsZWN0b3IgPSBcIi5cIi5jb25jYXQoY2xhc3Nlcy5jb21wb25lbnQpO1xudmFyIGFkZFN0eWxlID0gc3R5bGVyLmNyZWF0ZUFkZFN0eWxlKHNlbGVjdG9yLCBmbnMsIHRleHRmaWVsZFZhcnMpO1xudmFyIGdldFN0eWxlID0gc3R5bGVyLmNyZWF0ZUdldFN0eWxlKHNlbGVjdG9yLCBmbnMsIHRleHRmaWVsZFZhcnMpO1xuXG52YXIgYWRkR2VuZXJhbFN0eWxlVG9IZWFkID0gZnVuY3Rpb24gYWRkR2VuZXJhbFN0eWxlVG9IZWFkKCkge1xuICByZXR1cm4gc3R5bGVyLmFkZFN0eWxlKHtcbiAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnMsXG4gICAgdmFyczogdGV4dGZpZWxkVmFyc1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IGFkZEdlbmVyYWxTdHlsZVRvSGVhZCwgYWRkU3R5bGUsIGNvbG9yLCBnZXRTdHlsZSwgbGF5b3V0LCB0ZXh0ZmllbGRWYXJzIGFzIHZhcnMgfTtcbiIsImltcG9ydCB7IGNyZWF0ZUNvbG9yLCBzZWwsIGNyZWF0ZUxheW91dCwgZmxleCwgbWl4aW4sIHNlbGVjdG9yUlRMLCByZ2JhLCBzdHlsZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1jc3MnO1xuaW1wb3J0IHsgdmFycyBhcyB2YXJzJDEgfSBmcm9tICdwb2x5dGhlbmUtdGhlbWUnO1xuXG52YXIgY2xhc3NlcyA9IHtcbiAgLy8gVG9vbGJhclxuICBjb21wb25lbnQ6IFwicGUtdG9vbGJhclwiLFxuICAvLyBzdGF0ZXNcbiAgY29tcGFjdDogXCJwZS10b29sYmFyLS1jb21wYWN0XCIsXG4gIGFwcEJhcjogXCJwZS10b29sYmFyLS1hcHAtYmFyXCIsXG4gIC8vIFRvb2xiYXIgdGl0bGVcbiAgLy8gZWxlbWVudHNcbiAgdGl0bGU6IFwicGUtdG9vbGJhcl9fdGl0bGVcIixcbiAgLy8gc3RhdGVzXG4gIGNlbnRlcmVkVGl0bGU6IFwicGUtdG9vbGJhcl9fdGl0bGUtLWNlbnRlclwiLFxuICBpbmRlbnRlZFRpdGxlOiBcInBlLXRvb2xiYXJfX3RpdGxlLS1pbmRlbnRcIixcbiAgZnVsbGJsZWVkOiBcInBlLXRvb2xiYXItLWZ1bGxibGVlZFwiLFxuICBib3JkZXI6IFwicGUtdG9vbGJhci0tYm9yZGVyXCJcbn07XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgZ2VuZXJhbEZucyA9IHtcbiAgZ2VuZXJhbF9zdHlsZXM6IGZ1bmN0aW9uIGdlbmVyYWxfc3R5bGVzKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxufTtcblxudmFyIHRpbnRGbnMgPSBmdW5jdGlvbiB0aW50Rm5zKHRpbnQpIHtcbiAgdmFyIF9yZWY7XG5cbiAgcmV0dXJuIF9yZWYgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfdGV4dFwiLCBmdW5jdGlvbiAoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIgLnBlLXRvb2xiYXJfX3RpdGxlXCI6IHtcbiAgICAgICAgXCImLCBhOmxpbmssIGE6dmlzaXRlZFwiOiB7XG4gICAgICAgICAgY29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl90ZXh0XCJdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KV07XG4gIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZ3JvdW5kXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHZhcnNbXCJjb2xvcl9cIiArIHRpbnQgKyBcIl9iYWNrZ3JvdW5kXCJdXG4gICAgfSldO1xuICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIFwiY29sb3JfXCIgKyB0aW50ICsgXCJfYm9yZGVyXCIsIGZ1bmN0aW9uIChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBcIi5wZS10b29sYmFyLS1ib3JkZXJcIjoge1xuICAgICAgICBib3JkZXJDb2xvcjogdmFyc1tcImNvbG9yX1wiICsgdGludCArIFwiX2JvcmRlclwiXVxuICAgICAgfVxuICAgIH0pXTtcbiAgfSksIF9yZWY7XG59O1xuXG52YXIgbGlnaHRUaW50Rm5zID0gX2V4dGVuZHMoe30sIGdlbmVyYWxGbnMsIHRpbnRGbnMoXCJsaWdodFwiKSk7XG5cbnZhciBkYXJrVGludEZucyA9IF9leHRlbmRzKHt9LCBnZW5lcmFsRm5zLCB0aW50Rm5zKFwiZGFya1wiKSk7XG5cbnZhciBjb2xvciA9IGNyZWF0ZUNvbG9yKHtcbiAgdmFyRm5zOiB7XG4gICAgbGlnaHRUaW50Rm5zOiBsaWdodFRpbnRGbnMsXG4gICAgZGFya1RpbnRGbnM6IGRhcmtUaW50Rm5zXG4gIH1cbn0pO1xuXG4vKipcbiAqIFxuICogQHBhcmFtIHtzdHJpbmd9IGJyZWFrcG9pbnRTZWwgXG4gKi9cblxudmFyIGJyZWFrcG9pbnQgPSBmdW5jdGlvbiBicmVha3BvaW50KGJyZWFrcG9pbnRTZWwpIHtcbiAgcmV0dXJuIChcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIChzZWxlY3Rvciwgbykge1xuICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgYnJlYWtwb2ludFNlbCwgX2RlZmluZVByb3BlcnR5KHt9LCBzZWxlY3RvciwgbykpO1xuICAgIH1cbiAgKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbXMuc2VsZWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMudmFyc1xuICogQHBhcmFtIHtib29sZWFufSBbcGFyYW1zLmlzUlRMXVxuICogQHBhcmFtIHtib29sZWFufSBbcGFyYW1zLmlzTGFyZ2VdXG4gKi9cblxuXG52YXIgaW5kZW50X3BhZGRpbmdfc2lkZSA9IGZ1bmN0aW9uIGluZGVudF9wYWRkaW5nX3NpZGUoX3JlZjIpIHtcbiAgdmFyIF9wZVRvb2xiYXJfX3RpdGxlO1xuXG4gIHZhciBzZWxlY3RvciA9IF9yZWYyLnNlbGVjdG9yLFxuICAgICAgdmFycyA9IF9yZWYyLnZhcnMsXG4gICAgICBpc1JUTCA9IF9yZWYyLmlzUlRMLFxuICAgICAgaXNMYXJnZSA9IF9yZWYyLmlzTGFyZ2U7XG4gIHZhciBpbmRlbnQgPSBpc0xhcmdlID8gdmFycy5pbmRlbnRfbGFyZ2UgOiB2YXJzLmluZGVudDtcbiAgdmFyIGZuID0gaXNMYXJnZSA/IGJyZWFrcG9pbnRUYWJsZXRQb3J0cmFpdFVwIDogc2VsO1xuICByZXR1cm4gZm4oc2VsZWN0b3IsIHtcbiAgICBcIiAucGUtdG9vbGJhcl9fdGl0bGUtLWluZGVudCwgLnBlLXRvb2xiYXJfX3RpdGxlLnBlLXRvb2xiYXJfX3RpdGxlLS1pbmRlbnRcIjogKF9wZVRvb2xiYXJfX3RpdGxlID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfcGVUb29sYmFyX190aXRsZSwgaXNSVEwgPyBcIm1hcmdpbkxlZnRcIiA6IFwibWFyZ2luUmlnaHRcIiwgMCksIF9kZWZpbmVQcm9wZXJ0eShfcGVUb29sYmFyX190aXRsZSwgaXNSVEwgPyBcIm1hcmdpblJpZ2h0XCIgOiBcIm1hcmdpbkxlZnRcIiwgaW5kZW50ICsgXCJweFwiKSwgX3BlVG9vbGJhcl9fdGl0bGUpXG4gIH0pO1xufTtcbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtc1xuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtcy5zZWxlY3RvclxuICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcy52YXJzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXJhbXMuaXNSVExdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwYXJhbXMuaXNMYXJnZV1cbiAqL1xuXG5cbnZhciBfdGl0bGVfcGFkZGluZyA9IGZ1bmN0aW9uIHRpdGxlX3BhZGRpbmcoX3JlZjMpIHtcbiAgdmFyIF9zcGFuUGVUb29sYmFyO1xuXG4gIHZhciBzZWxlY3RvciA9IF9yZWYzLnNlbGVjdG9yLFxuICAgICAgdmFycyA9IF9yZWYzLnZhcnMsXG4gICAgICBpc1JUTCA9IF9yZWYzLmlzUlRMLFxuICAgICAgaXNMYXJnZSA9IF9yZWYzLmlzTGFyZ2U7XG4gIHZhciB0aXRsZV9wYWRkaW5nID0gaXNMYXJnZSA/IHZhcnMudGl0bGVfcGFkZGluZ19sYXJnZSA6IHZhcnMudGl0bGVfcGFkZGluZztcbiAgdmFyIGZuID0gaXNMYXJnZSA/IGJyZWFrcG9pbnRUYWJsZXRQb3J0cmFpdFVwIDogc2VsO1xuICByZXR1cm4gZm4oc2VsZWN0b3IsIHtcbiAgICBcIiA+IHNwYW4sIC5wZS10b29sYmFyX190aXRsZVwiOiAoX3NwYW5QZVRvb2xiYXIgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9zcGFuUGVUb29sYmFyLCBpc1JUTCA/IFwibWFyZ2luTGVmdFwiIDogXCJtYXJnaW5SaWdodFwiLCAwKSwgX2RlZmluZVByb3BlcnR5KF9zcGFuUGVUb29sYmFyLCBpc1JUTCA/IFwibWFyZ2luUmlnaHRcIiA6IFwibWFyZ2luTGVmdFwiLCB0aXRsZV9wYWRkaW5nICsgXCJweFwiKSwgX3NwYW5QZVRvb2xiYXIpLFxuICAgIFwiIC5wZS10b29sYmFyX190aXRsZS0tY2VudGVyXCI6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IHRpdGxlX3BhZGRpbmcgKyBcInB4XCIsXG4gICAgICBtYXJnaW5SaWdodDogdGl0bGVfcGFkZGluZyArIFwicHhcIlxuICAgIH1cbiAgfSk7XG59O1xuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1zLnNlbGVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zLnZhcnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtcy5pc1JUTF1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3BhcmFtcy5pc0xhcmdlXVxuICovXG5cblxudmFyIHRpdGxlX3BhZGRpbmdfdGl0bGVfYWZ0ZXJfaWNvbl9wYWRkaW5nID0gZnVuY3Rpb24gdGl0bGVfcGFkZGluZ190aXRsZV9hZnRlcl9pY29uX3BhZGRpbmcoX3JlZjQpIHtcbiAgdmFyIF9ub3RQZVRvb2xiYXJfO1xuXG4gIHZhciBzZWxlY3RvciA9IF9yZWY0LnNlbGVjdG9yLFxuICAgICAgdmFycyA9IF9yZWY0LnZhcnMsXG4gICAgICBpc1JUTCA9IF9yZWY0LmlzUlRMLFxuICAgICAgaXNMYXJnZSA9IF9yZWY0LmlzTGFyZ2U7XG4gIHZhciBwYWRkaW5nID0gaXNMYXJnZSA/IHZhcnMudGl0bGVfYWZ0ZXJfaWNvbl9wYWRkaW5nX2xhcmdlIDogdmFycy50aXRsZV9hZnRlcl9pY29uX3BhZGRpbmc7XG4gIHZhciBmbiA9IGlzTGFyZ2UgPyBicmVha3BvaW50VGFibGV0UG9ydHJhaXRVcCA6IHNlbDtcbiAgcmV0dXJuIGZuKHNlbGVjdG9yLCB7XG4gICAgXCIgPiA6bm90KC5wZS10b29sYmFyX190aXRsZSk6Zmlyc3QtY2hpbGQ6bm90KC5wZS10b29sYmFyX190aXRsZS0taW5kZW50KTpmaXJzdC1jaGlsZFwiOiAoX25vdFBlVG9vbGJhcl8gPSB7fSwgX2RlZmluZVByb3BlcnR5KF9ub3RQZVRvb2xiYXJfLCBpc1JUTCA/IFwibWFyZ2luUmlnaHRcIiA6IFwibWFyZ2luTGVmdFwiLCAwKSwgX2RlZmluZVByb3BlcnR5KF9ub3RQZVRvb2xiYXJfLCBpc1JUTCA/IFwibWFyZ2luTGVmdFwiIDogXCJtYXJnaW5SaWdodFwiLCBwYWRkaW5nICsgXCJweFwiKSwgX25vdFBlVG9vbGJhcl8pXG4gIH0pO1xufTtcblxudmFyIGJyZWFrcG9pbnRQaG9uZU9ubHkgPSBicmVha3BvaW50KFwiQG1lZGlhIChtaW4td2lkdGg6IFwiLmNvbmNhdCh2YXJzJDEuYnJlYWtwb2ludF9mb3JfcGhvbmVfb25seSwgXCJweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVwiKSk7XG52YXIgYnJlYWtwb2ludFRhYmxldFBvcnRyYWl0VXAgPSBicmVha3BvaW50KFwiQG1lZGlhIChtaW4td2lkdGg6IFwiLmNvbmNhdCh2YXJzJDEuYnJlYWtwb2ludF9mb3JfdGFibGV0X3BvcnRyYWl0X3VwLCBcInB4KVwiKSk7XG52YXIgdmFyRm5zID0ge1xuICBnZW5lcmFsX3N0eWxlczogZnVuY3Rpb24gZ2VuZXJhbF9zdHlsZXMoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3RvciwgW2ZsZXgubGF5b3V0LCBmbGV4LmxheW91dEhvcml6b250YWwsIGZsZXgubGF5b3V0Q2VudGVyLCB7XG4gICAgICBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiLFxuICAgICAgekluZGV4OiB2YXJzJDEuel90b29sYmFyLFxuICAgICAgXCIgPiBhXCI6IHtcbiAgICAgICAgdGV4dERlY29yYXRpb246IFwibm9uZVwiXG4gICAgICB9LFxuICAgICAgXCIucGUtdG9vbGJhci0tZnVsbGJsZWVkXCI6IHtcbiAgICAgICAgcGFkZGluZzogMFxuICAgICAgfSxcbiAgICAgIFwiLnBlLXRvb2xiYXItLWJvcmRlclwiOiB7XG4gICAgICAgIGJvcmRlcldpZHRoOiBcIjFweFwiLFxuICAgICAgICBib3JkZXJTdHlsZTogXCJub25lIG5vbmUgc29saWQgbm9uZVwiXG4gICAgICB9LFxuICAgICAgXCIgPiAqXCI6IHtcbiAgICAgICAgZmxleFNocmluazogMFxuICAgICAgfSxcbiAgICAgIFwiID4gc3BhbiwgLnBlLXRvb2xiYXJfX3RpdGxlLCAucGUtdG9vbGJhcl9fdGl0bGUtLWluZGVudFwiOiB7XG4gICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiLFxuICAgICAgICB3b3JkQnJlYWs6IFwiYnJlYWstYWxsXCIsXG4gICAgICAgIG92ZXJmbG93OiBcImhpZGRlblwiLFxuICAgICAgICB0ZXh0T3ZlcmZsb3c6IFwiZWxsaXBzaXNcIixcbiAgICAgICAgd2hpdGVTcGFjZTogXCJub3dyYXBcIixcbiAgICAgICAgZmxleFNocmluazogMVxuICAgICAgfSxcbiAgICAgIFwiIC5wZS10b29sYmFyX190aXRsZS0tY2VudGVyXCI6IHtcbiAgICAgICAgdGV4dEFsaWduOiBcImNlbnRlclwiLFxuICAgICAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIlxuICAgICAgfSxcbiAgICAgIFwiID4gLnBlLWFjdGlvblwiOiB7XG4gICAgICAgIHBhZGRpbmdMZWZ0OiBcIjEycHhcIixcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBcIjEycHhcIlxuICAgICAgfSxcbiAgICAgIFwiIC5wZS1maXRcIjogW21peGluLmZpdCgpLCB7XG4gICAgICAgIG1hcmdpbjogMFxuICAgICAgfV1cbiAgICB9XSldO1xuICB9LFxuICBoZWlnaHQ6IGZ1bmN0aW9uIGhlaWdodChzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbc2VsKHNlbGVjdG9yLCB7XG4gICAgICBoZWlnaHQ6IHZhcnMuaGVpZ2h0ICsgXCJweFwiXG4gICAgfSldO1xuICB9LFxuICBoZWlnaHRfY29tcGFjdDogZnVuY3Rpb24gaGVpZ2h0X2NvbXBhY3Qoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgXCIucGUtdG9vbGJhci0tY29tcGFjdFwiOiB7XG4gICAgICAgIGhlaWdodDogdmFycy5oZWlnaHRfY29tcGFjdCArIFwicHhcIlxuICAgICAgfVxuICAgIH0pLCBicmVha3BvaW50UGhvbmVPbmx5KHNlbGVjdG9yLCB7XG4gICAgICBoZWlnaHQ6IHZhcnMuaGVpZ2h0ICsgXCJweFwiXG4gICAgfSldO1xuICB9LFxuICBsaW5lX2hlaWdodDogZnVuY3Rpb24gbGluZV9oZWlnaHQoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW3NlbChzZWxlY3Rvciwge1xuICAgICAgbGluZUhlaWdodDogdmFycy5saW5lX2hlaWdodCArIFwiZW1cIixcbiAgICAgIFwiID4gc3BhbiwgLnBlLXRvb2xiYXJfX3RpdGxlLCAucGUtdG9vbGJhcl9fdGl0bGUtLWluZGVudFwiOiB7XG4gICAgICAgIGxpbmVIZWlnaHQ6IHZhcnMubGluZV9oZWlnaHRcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIGZvbnRfc2l6ZTogZnVuY3Rpb24gZm9udF9zaXplKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiID4gc3BhbiwgLnBlLXRvb2xiYXJfX3RpdGxlLCAucGUtdG9vbGJhcl9fdGl0bGUtLWluZGVudCwgLnBlLWFjdGlvblwiOiB7XG4gICAgICAgIGZvbnRTaXplOiB2YXJzLmZvbnRfc2l6ZSArIFwicHhcIlxuICAgICAgfVxuICAgIH0pXTtcbiAgfSxcbiAgZm9udF93ZWlnaHQ6IGZ1bmN0aW9uIGZvbnRfd2VpZ2h0KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIFwiID4gc3BhbiwgLnBlLXRvb2xiYXJfX3RpdGxlLCAucGUtdG9vbGJhcl9fdGl0bGUtLWluZGVudFwiOiB7XG4gICAgICAgIGZvbnRXZWlnaHQ6IHZhcnMuZm9udF93ZWlnaHRcbiAgICAgIH1cbiAgICB9KV07XG4gIH0sXG4gIHBhZGRpbmdfc2lkZTogZnVuY3Rpb24gcGFkZGluZ19zaWRlKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtzZWwoc2VsZWN0b3IsIHtcbiAgICAgIHBhZGRpbmc6IFwiMCBcIiArIHZhcnMucGFkZGluZ19zaWRlICsgXCJweFwiXG4gICAgfSksIGluZGVudF9wYWRkaW5nX3NpZGUoe1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgICAgdmFyczogdmFyc1xuICAgIH0pLCBpbmRlbnRfcGFkZGluZ19zaWRlKHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclJUTChzZWxlY3RvciksXG4gICAgICB2YXJzOiB2YXJzLFxuICAgICAgaXNSVEw6IHRydWVcbiAgICB9KV07XG4gIH0sXG4gIGluZGVudDogZnVuY3Rpb24gaW5kZW50KHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtpbmRlbnRfcGFkZGluZ19zaWRlKHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICAgIHZhcnM6IHZhcnNcbiAgICB9KSwgaW5kZW50X3BhZGRpbmdfc2lkZSh7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JSVEwoc2VsZWN0b3IpLFxuICAgICAgdmFyczogdmFycyxcbiAgICAgIGlzUlRMOiB0cnVlXG4gICAgfSldO1xuICB9LFxuICBpbmRlbnRfbGFyZ2U6IGZ1bmN0aW9uIGluZGVudF9sYXJnZShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbaW5kZW50X3BhZGRpbmdfc2lkZSh7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgICB2YXJzOiB2YXJzLFxuICAgICAgaXNMYXJnZTogdHJ1ZVxuICAgIH0pLCBpbmRlbnRfcGFkZGluZ19zaWRlKHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclJUTChzZWxlY3RvciksXG4gICAgICB2YXJzOiB2YXJzLFxuICAgICAgaXNSVEw6IHRydWUsXG4gICAgICBpc0xhcmdlOiB0cnVlXG4gICAgfSldO1xuICB9LFxuICB0aXRsZV9wYWRkaW5nOiBmdW5jdGlvbiB0aXRsZV9wYWRkaW5nKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFtfdGl0bGVfcGFkZGluZyh7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3IsXG4gICAgICB2YXJzOiB2YXJzXG4gICAgfSksIF90aXRsZV9wYWRkaW5nKHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclJUTChzZWxlY3RvciksXG4gICAgICB2YXJzOiB2YXJzLFxuICAgICAgaXNSVEw6IHRydWVcbiAgICB9KV07XG4gIH0sXG4gIHRpdGxlX3BhZGRpbmdfbGFyZ2U6IGZ1bmN0aW9uIHRpdGxlX3BhZGRpbmdfbGFyZ2Uoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW190aXRsZV9wYWRkaW5nKHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICAgIHZhcnM6IHZhcnMsXG4gICAgICBpc0xhcmdlOiB0cnVlXG4gICAgfSksIF90aXRsZV9wYWRkaW5nKHtcbiAgICAgIHNlbGVjdG9yOiBzZWxlY3RvclJUTChzZWxlY3RvciksXG4gICAgICB2YXJzOiB2YXJzLFxuICAgICAgaXNSVEw6IHRydWUsXG4gICAgICBpc0xhcmdlOiB0cnVlXG4gICAgfSldO1xuICB9LFxuICB0aXRsZV9hZnRlcl9pY29uX3BhZGRpbmc6IGZ1bmN0aW9uIHRpdGxlX2FmdGVyX2ljb25fcGFkZGluZyhzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbdGl0bGVfcGFkZGluZ190aXRsZV9hZnRlcl9pY29uX3BhZGRpbmcoe1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgICAgdmFyczogdmFyc1xuICAgIH0pLCB0aXRsZV9wYWRkaW5nX3RpdGxlX2FmdGVyX2ljb25fcGFkZGluZyh7XG4gICAgICBzZWxlY3Rvcjogc2VsZWN0b3JSVEwoc2VsZWN0b3IpLFxuICAgICAgdmFyczogdmFycyxcbiAgICAgIGlzUlRMOiB0cnVlXG4gICAgfSldO1xuICB9LFxuICB0aXRsZV9hZnRlcl9pY29uX3BhZGRpbmdfbGFyZ2U6IGZ1bmN0aW9uIHRpdGxlX2FmdGVyX2ljb25fcGFkZGluZ19sYXJnZShzZWxlY3RvciwgdmFycykge1xuICAgIHJldHVybiBbdGl0bGVfcGFkZGluZ190aXRsZV9hZnRlcl9pY29uX3BhZGRpbmcoe1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yLFxuICAgICAgdmFyczogdmFycyxcbiAgICAgIGlzTGFyZ2U6IHRydWVcbiAgICB9KSwgdGl0bGVfcGFkZGluZ190aXRsZV9hZnRlcl9pY29uX3BhZGRpbmcoe1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yUlRMKHNlbGVjdG9yKSxcbiAgICAgIHZhcnM6IHZhcnMsXG4gICAgICBpc1JUTDogdHJ1ZSxcbiAgICAgIGlzTGFyZ2U6IHRydWVcbiAgICB9KV07XG4gIH0sXG4gIGhlaWdodF9sYXJnZTogZnVuY3Rpb24gaGVpZ2h0X2xhcmdlKHNlbGVjdG9yLCB2YXJzKSB7XG4gICAgcmV0dXJuIFticmVha3BvaW50VGFibGV0UG9ydHJhaXRVcChzZWxlY3Rvciwge1xuICAgICAgaGVpZ2h0OiB2YXJzLmhlaWdodF9sYXJnZSArIFwicHhcIlxuICAgIH0pXTtcbiAgfSxcbiAgcGFkZGluZ19zaWRlX2xhcmdlOiBmdW5jdGlvbiBwYWRkaW5nX3NpZGVfbGFyZ2Uoc2VsZWN0b3IsIHZhcnMpIHtcbiAgICByZXR1cm4gW2JyZWFrcG9pbnRUYWJsZXRQb3J0cmFpdFVwKHNlbGVjdG9yLCB7XG4gICAgICBwYWRkaW5nOiBcIjAgXCIgKyB2YXJzLnBhZGRpbmdfc2lkZV9sYXJnZSArIFwicHhcIlxuICAgIH0pXTtcbiAgfVxufTtcbnZhciBsYXlvdXQgPSBjcmVhdGVMYXlvdXQoe1xuICB2YXJGbnM6IHZhckZuc1xufSk7XG5cbi8vIEB0cy1jaGVja1xudmFyIHBhZGRpbmdfc2lkZSA9IHZhcnMkMS5ncmlkX3VuaXRfY29tcG9uZW50ICogMiAtIDEyOyAvLyAxNiAtIDEyID0gNFxuXG52YXIgcGFkZGluZ19zaWRlX2xhcmdlID0gdmFycyQxLmdyaWRfdW5pdF9jb21wb25lbnQgKiAzIC0gMTI7IC8vIDI0IC0gMTIgPSAxMlxuXG52YXIgdmFycyA9IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGdlbmVyYWwgc3R5bGVzLCBub3QgZGVmaW5lZCBieSB2YXJpYWJsZXNcbiAgICovXG4gIGdlbmVyYWxfc3R5bGVzOiB0cnVlLFxuICBmb250X3NpemU6IDIwLFxuICBmb250X3dlaWdodDogNDAwLFxuICBoZWlnaHQ6IHZhcnMkMS5ncmlkX3VuaXRfY29tcG9uZW50ICogNyxcbiAgLy8gNTZcbiAgaGVpZ2h0X2NvbXBhY3Q6IHZhcnMkMS5ncmlkX3VuaXRfY29tcG9uZW50ICogNixcbiAgLy8gNDhcbiAgaGVpZ2h0X2xhcmdlOiB2YXJzJDEuZ3JpZF91bml0X2NvbXBvbmVudCAqIDgsXG4gIC8vIDY0XG4gIGxpbmVfaGVpZ2h0OiB2YXJzJDEubGluZV9oZWlnaHQsXG4gIHBhZGRpbmdfc2lkZTogcGFkZGluZ19zaWRlLFxuICBwYWRkaW5nX3NpZGVfbGFyZ2U6IHBhZGRpbmdfc2lkZV9sYXJnZSxcbiAgaW5kZW50OiB2YXJzJDEudW5pdF9pbmRlbnQgLSBwYWRkaW5nX3NpZGUsXG4gIGluZGVudF9sYXJnZTogdmFycyQxLnVuaXRfaW5kZW50X2xhcmdlIC0gcGFkZGluZ19zaWRlX2xhcmdlLFxuICB0aXRsZV9hZnRlcl9pY29uX3BhZGRpbmc6IDQsXG4gIHRpdGxlX2FmdGVyX2ljb25fcGFkZGluZ19sYXJnZTogMTIsXG4gIHRpdGxlX3BhZGRpbmc6IDE2LFxuICB0aXRsZV9wYWRkaW5nX2xhcmdlOiA4LFxuICBjb2xvcl9saWdodF90ZXh0OiByZ2JhKHZhcnMkMS5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzJDEuYmxlbmRfbGlnaHRfdGV4dF9wcmltYXJ5KSxcbiAgY29sb3JfbGlnaHRfYm9yZGVyOiByZ2JhKHZhcnMkMS5jb2xvcl9saWdodF9mb3JlZ3JvdW5kLCB2YXJzJDEuYmxlbmRfbGlnaHRfYm9yZGVyX2xpZ2h0KSxcbiAgY29sb3JfbGlnaHRfYmFja2dyb3VuZDogcmdiYSh2YXJzJDEuY29sb3JfbGlnaHRfYmFja2dyb3VuZCksXG4gIGNvbG9yX2RhcmtfdGV4dDogcmdiYSh2YXJzJDEuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzJDEuYmxlbmRfZGFya190ZXh0X3ByaW1hcnkpLFxuICBjb2xvcl9kYXJrX2JvcmRlcjogcmdiYSh2YXJzJDEuY29sb3JfZGFya19mb3JlZ3JvdW5kLCB2YXJzJDEuYmxlbmRfZGFya19ib3JkZXJfbGlnaHQpLFxuICBjb2xvcl9kYXJrX2JhY2tncm91bmQ6IHJnYmEodmFycyQxLmNvbG9yX2RhcmtfYmFja2dyb3VuZClcbn07XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtsYXlvdXQsIGNvbG9yXTtcbnZhciBzZWxlY3RvciA9IFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbXBvbmVudCk7XG52YXIgYWRkU3R5bGUgPSBzdHlsZXIuY3JlYXRlQWRkU3R5bGUoc2VsZWN0b3IsIGZucywgdmFycyk7XG52YXIgZ2V0U3R5bGUgPSBzdHlsZXIuY3JlYXRlR2V0U3R5bGUoc2VsZWN0b3IsIGZucywgdmFycyk7XG5cbnZhciBhZGRHZW5lcmFsU3R5bGVUb0hlYWQgPSBmdW5jdGlvbiBhZGRHZW5lcmFsU3R5bGVUb0hlYWQoKSB7XG4gIHJldHVybiBzdHlsZXIuYWRkU3R5bGUoe1xuICAgIHNlbGVjdG9yczogW3NlbGVjdG9yXSxcbiAgICBmbnM6IGZucyxcbiAgICB2YXJzOiB2YXJzXG4gIH0pO1xufTtcblxuZXhwb3J0IHsgYWRkR2VuZXJhbFN0eWxlVG9IZWFkLCBhZGRTdHlsZSwgY29sb3IsIGdldFN0eWxlLCBsYXlvdXQsIHZhcnMgfTtcbiIsImltcG9ydCB7IHN0eWxlciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNzcyc7XG5cbi8vIEB0cy1jaGVja1xudmFyIHJlc2V0ID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFt7XG4gICAgLy8gYXBwbHkgYSBuYXR1cmFsIGJveCBsYXlvdXQgbW9kZWwgdG8gYWxsIGVsZW1lbnRzLCBidXQgYWxsb3cgZWxlbWVudHMgdG8gY2hhbmdlXG4gICAgXCIgaHRtbFwiOiB7XG4gICAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcbiAgICB9LFxuICAgIFwiICosICo6YmVmb3JlLCAqOmFmdGVyXCI6IHtcbiAgICAgIFwiYm94LXNpemluZ1wiOiBcImluaGVyaXRcIlxuICAgIH0sXG4gICAgXCIgKlwiOiBbLy8gcmVtb3ZlIHRhcCBoaWdobGlnaHQgaW4gbW9iaWxlIFNhZmFyaVxuICAgIHtcbiAgICAgIFwiLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yXCI6IFwicmdiYSgwLDAsMCwwKVwiXG4gICAgfSwge1xuICAgICAgXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIjogXCJ0cmFuc3BhcmVudFwiIC8vIEZvciBzb21lIEFuZHJvaWRzXG5cbiAgICB9XSxcbiAgICAvLyBSZW1vdmUgZG90dGVkIGxpbmsgYm9yZGVycyBpbiBGaXJlZm94XG4gICAgXCIgYSwgYTphY3RpdmUsIGE6Zm9jdXMsIGlucHV0OmFjdGl2ZSwgKjpmb2N1c1wiOiB7XG4gICAgICBvdXRsaW5lOiAwXG4gICAgfSxcbiAgICAvLyBNb2JpbGUgU2FmYXJpOiBvdmVycmlkZSBkZWZhdWx0IGZhZGluZyBvZiBkaXNhYmxlZCBlbGVtZW50c1xuICAgIFwiIGlucHV0OmRpc2FibGVkXCI6IHtcbiAgICAgIG9wYWNpdHk6IDFcbiAgICB9XG4gIH1dO1xufSk7XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtyZXNldF07XG52YXIgc2VsZWN0b3IgPSBcIlwiO1xudmFyIHZhcnMgPSB7fTtcbnZhciBhZGRTdHlsZSA9IHN0eWxlci5jcmVhdGVBZGRTdHlsZShzZWxlY3RvciwgZm5zLCB2YXJzKTtcbnZhciBnZXRTdHlsZSA9IHN0eWxlci5jcmVhdGVHZXRTdHlsZShzZWxlY3RvciwgZm5zLCB2YXJzKTtcblxudmFyIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCA9IGZ1bmN0aW9uIGFkZEdlbmVyYWxTdHlsZVRvSGVhZCgpIHtcbiAgcmV0dXJuIHN0eWxlci5hZGRTdHlsZSh7XG4gICAgaWRlbnRpZmllcjogXCJwZS1jb3JlXCIsXG4gICAgc2VsZWN0b3JzOiBbc2VsZWN0b3JdLFxuICAgIGZuczogZm5zLFxuICAgIHZhcnM6IHZhcnNcbiAgfSk7XG59O1xuXG5leHBvcnQgeyBhZGRHZW5lcmFsU3R5bGVUb0hlYWQsIGFkZFN0eWxlLCBnZXRTdHlsZSwgcmVzZXQsIHZhcnMgfTtcbiIsImltcG9ydCB7IGlzU2VydmVyLCBlbWl0LCBpc0NsaWVudCB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxudmFyIGFkZFdlYkZvbnQgPSBmdW5jdGlvbiBhZGRXZWJGb250KHZlbmRvciwgY29uZmlnKSB7XG4gIGlmIChpc1NlcnZlcikgcmV0dXJuO1xuXG4gIGlmICghd2luZG93W1wiV2ViRm9udENvbmZpZ1wiXSkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3BhcmFtcy5uYW1lXVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcGFyYW1zLmZhbWlseU5hbWVdXG4gICAgICogQHBhcmFtIHthbnl9IFtwYXJhbXMuZnZkXVxuICAgICAqL1xuICAgIHZhciBlbWl0RXZlbnQgPSBmdW5jdGlvbiBlbWl0RXZlbnQoX3JlZikge1xuICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICAgICAgZmFtaWx5TmFtZSA9IF9yZWYuZmFtaWx5TmFtZSxcbiAgICAgICAgICBmdmQgPSBfcmVmLmZ2ZDtcbiAgICAgIHJldHVybiBlbWl0KFwid2ViZm9udGxvYWRlclwiLCB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIGZhbWlseU5hbWU6IGZhbWlseU5hbWUsXG4gICAgICAgIGZ2ZDogZnZkLFxuICAgICAgICB2ZW5kb3I6IHZlbmRvcixcbiAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB3aW5kb3dbXCJXZWJGb250Q29uZmlnXCJdID0ge1xuICAgICAgbG9hZGluZzogZnVuY3Rpb24gbG9hZGluZygpIHtcbiAgICAgICAgcmV0dXJuIGVtaXRFdmVudCh7XG4gICAgICAgICAgbmFtZTogXCJsb2FkaW5nXCJcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgYWN0aXZlOiBmdW5jdGlvbiBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiBlbWl0RXZlbnQoe1xuICAgICAgICAgIG5hbWU6IFwiYWN0aXZlXCJcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgaW5hY3RpdmU6IGZ1bmN0aW9uIGluYWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gZW1pdEV2ZW50KHtcbiAgICAgICAgICBuYW1lOiBcImluYWN0aXZlXCJcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZm9udGxvYWRpbmc6IGZ1bmN0aW9uIGZvbnRsb2FkaW5nKGZhbWlseU5hbWUsIGZ2ZCkge1xuICAgICAgICByZXR1cm4gZW1pdEV2ZW50KHtcbiAgICAgICAgICBuYW1lOiBcImZvbnRsb2FkaW5nXCIsXG4gICAgICAgICAgZmFtaWx5TmFtZTogZmFtaWx5TmFtZSxcbiAgICAgICAgICBmdmQ6IGZ2ZFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmb250YWN0aXZlOiBmdW5jdGlvbiBmb250YWN0aXZlKGZhbWlseU5hbWUsIGZ2ZCkge1xuICAgICAgICByZXR1cm4gZW1pdEV2ZW50KHtcbiAgICAgICAgICBuYW1lOiBcImZvbnRhY3RpdmVcIixcbiAgICAgICAgICBmYW1pbHlOYW1lOiBmYW1pbHlOYW1lLFxuICAgICAgICAgIGZ2ZDogZnZkXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZvbnRpbmFjdGl2ZTogZnVuY3Rpb24gZm9udGluYWN0aXZlKGZhbWlseU5hbWUsIGZ2ZCkge1xuICAgICAgICByZXR1cm4gZW1pdEV2ZW50KHtcbiAgICAgICAgICBuYW1lOiBcImZvbnRpbmFjdGl2ZVwiLFxuICAgICAgICAgIGZhbWlseU5hbWU6IGZhbWlseU5hbWUsXG4gICAgICAgICAgZnZkOiBmdmRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgd2YgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgd2Yuc3JjID0gKGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID09PSBcImh0dHBzOlwiID8gXCJodHRwc1wiIDogXCJodHRwXCIpICsgXCI6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy93ZWJmb250LzEvd2ViZm9udC5qc1wiO1xuICAgICAgd2YudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG4gICAgICB3Zi5hc3luYyA9IHRydWU7XG4gICAgICB2YXIgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpWzBdO1xuXG4gICAgICBpZiAocyAmJiBzLnBhcmVudE5vZGUpIHtcbiAgICAgICAgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3Ziwgcyk7XG4gICAgICB9XG4gICAgfSkoKTtcbiAgfVxuXG4gIHZhciB2ZW5kb3JDZmcgPSB3aW5kb3dbXCJXZWJGb250Q29uZmlnXCJdW3ZlbmRvcl0gfHwge307XG5cbiAgaWYgKGNvbmZpZykge1xuICAgIF9leHRlbmRzKHZlbmRvckNmZywgY29uZmlnKTtcbiAgfVxuXG4gIHdpbmRvd1tcIldlYkZvbnRDb25maWdcIl1bdmVuZG9yXSA9IHZlbmRvckNmZztcbn07XG5cbi8qXG5odHRwczovL2dpc3QuZ2l0aHViLmNvbS9ncmUvMTY1MDI5NFxuRWFzaW5nIEZ1bmN0aW9ucyAtIGluc3BpcmVkIGZyb20gaHR0cDovL2dpem1hLmNvbS9lYXNpbmcvXG5Pbmx5IGNvbnNpZGVyaW5nIHRoZSB0IHZhbHVlIGZvciB0aGUgcmFuZ2UgWzAsIDFdID0+IFswLCAxXVxuKi9cbnZhciBlYXNpbmcgPSB7XG4gIC8vIG5vIGVhc2luZywgbm8gYWNjZWxlcmF0aW9uXG4gIGxpbmVhcjogZnVuY3Rpb24gbGluZWFyKHQpIHtcbiAgICByZXR1cm4gdDtcbiAgfSxcbiAgLy8gYWNjZWxlcmF0aW5nIGZyb20gemVybyB2ZWxvY2l0eVxuICBlYXNlSW5RdWFkOiBmdW5jdGlvbiBlYXNlSW5RdWFkKHQpIHtcbiAgICByZXR1cm4gdCAqIHQ7XG4gIH0sXG4gIC8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG4gIGVhc2VPdXRRdWFkOiBmdW5jdGlvbiBlYXNlT3V0UXVhZCh0KSB7XG4gICAgcmV0dXJuIHQgKiAoMiAtIHQpO1xuICB9LFxuICAvLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cbiAgZWFzZUluT3V0UXVhZDogZnVuY3Rpb24gZWFzZUluT3V0UXVhZCh0KSB7XG4gICAgcmV0dXJuIHQgPCAuNSA/IDIgKiB0ICogdCA6IC0xICsgKDQgLSAyICogdCkgKiB0O1xuICB9LFxuICAvLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG4gIGVhc2VJbkN1YmljOiBmdW5jdGlvbiBlYXNlSW5DdWJpYyh0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogdDtcbiAgfSxcbiAgLy8gZGVjZWxlcmF0aW5nIHRvIHplcm8gdmVsb2NpdHlcbiAgZWFzZU91dEN1YmljOiBmdW5jdGlvbiBlYXNlT3V0Q3ViaWModCkge1xuICAgIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG4gIH0sXG4gIC8vIGFjY2VsZXJhdGlvbiB1bnRpbCBoYWxmd2F5LCB0aGVuIGRlY2VsZXJhdGlvblxuICBlYXNlSW5PdXRDdWJpYzogZnVuY3Rpb24gZWFzZUluT3V0Q3ViaWModCkge1xuICAgIHJldHVybiB0IDwgLjUgPyA0ICogdCAqIHQgKiB0IDogKHQgLSAxKSAqICgyICogdCAtIDIpICogKDIgKiB0IC0gMikgKyAxO1xuICB9LFxuICAvLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG4gIGVhc2VJblF1YXJ0OiBmdW5jdGlvbiBlYXNlSW5RdWFydCh0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogdCAqIHQ7XG4gIH0sXG4gIC8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG4gIGVhc2VPdXRRdWFydDogZnVuY3Rpb24gZWFzZU91dFF1YXJ0KHQpIHtcbiAgICByZXR1cm4gMSAtIC0tdCAqIHQgKiB0ICogdDtcbiAgfSxcbiAgLy8gYWNjZWxlcmF0aW9uIHVudGlsIGhhbGZ3YXksIHRoZW4gZGVjZWxlcmF0aW9uXG4gIGVhc2VJbk91dFF1YXJ0OiBmdW5jdGlvbiBlYXNlSW5PdXRRdWFydCh0KSB7XG4gICAgcmV0dXJuIHQgPCAuNSA/IDggKiB0ICogdCAqIHQgKiB0IDogMSAtIDggKiAtLXQgKiB0ICogdCAqIHQ7XG4gIH0sXG4gIC8vIGFjY2VsZXJhdGluZyBmcm9tIHplcm8gdmVsb2NpdHlcbiAgZWFzZUluUXVpbnQ6IGZ1bmN0aW9uIGVhc2VJblF1aW50KHQpIHtcbiAgICByZXR1cm4gdCAqIHQgKiB0ICogdCAqIHQ7XG4gIH0sXG4gIC8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG4gIGVhc2VPdXRRdWludDogZnVuY3Rpb24gZWFzZU91dFF1aW50KHQpIHtcbiAgICByZXR1cm4gMSArIC0tdCAqIHQgKiB0ICogdCAqIHQ7XG4gIH0sXG4gIC8vIGFjY2VsZXJhdGlvbiB1bnRpbCBoYWxmd2F5LCB0aGVuIGRlY2VsZXJhdGlvblxuICBlYXNlSW5PdXRRdWludDogZnVuY3Rpb24gZWFzZUluT3V0UXVpbnQodCkge1xuICAgIHJldHVybiB0IDwgLjUgPyAxNiAqIHQgKiB0ICogdCAqIHQgKiB0IDogMSArIDE2ICogLS10ICogdCAqIHQgKiB0ICogdDtcbiAgfVxufTtcblxuLypcbiBBbmltYXRlZCBzY3JvbGwgdG8gYSBwb3NpdGlvbi5cbiBEZXJpdmVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hZGVieXNvdXJjZS9hbmltYXRlZC1zY3JvbGx0b1xuIEFkYXB0ZWQgdG8gTWl0aHJpbCBhbmQgcmV3cml0dGVuIHRvIGVzNi5cbiovXG52YXIgc2Nyb2xsVG8gPSBmdW5jdGlvbiBzY3JvbGxUbyhvcHRzKSB7XG4gIGlmIChpc1NlcnZlcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBlbGVtZW50ID0gb3B0cy5lbGVtZW50O1xuICB2YXIgd2hpY2ggPSBvcHRzLmRpcmVjdGlvbiA9PT0gXCJob3Jpem9udGFsXCIgPyBcInNjcm9sbExlZnRcIiA6IFwic2Nyb2xsVG9wXCI7XG4gIHZhciB0byA9IG9wdHMudG87XG4gIHZhciBkdXJhdGlvbiA9IG9wdHMuZHVyYXRpb24gKiAxMDAwO1xuICB2YXIgZWFzaW5nRm4gPSBvcHRzLmVhc2luZyB8fCBlYXNpbmcuZWFzZUluT3V0Q3ViaWM7XG4gIHZhciBzdGFydCA9IGVsZW1lbnRbd2hpY2hdO1xuICB2YXIgY2hhbmdlID0gdG8gLSBzdGFydDtcbiAgdmFyIGFuaW1hdGlvblN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIHZhciBhbmltYXRpbmcgPSB0cnVlO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICB2YXIgYW5pbWF0ZVNjcm9sbCA9IGZ1bmN0aW9uIGFuaW1hdGVTY3JvbGwoKSB7XG4gICAgICBpZiAoIWFuaW1hdGluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlcXVlc3RBbmltRnJhbWUoYW5pbWF0ZVNjcm9sbCk7XG4gICAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB2YXIgcGVyY2VudGFnZSA9IChub3cgLSBhbmltYXRpb25TdGFydCkgLyBkdXJhdGlvbjtcbiAgICAgIHZhciB2YWwgPSBzdGFydCArIGNoYW5nZSAqIGVhc2luZ0ZuKHBlcmNlbnRhZ2UpO1xuICAgICAgZWxlbWVudFt3aGljaF0gPSB2YWw7XG5cbiAgICAgIGlmIChwZXJjZW50YWdlID49IDEpIHtcbiAgICAgICAgZWxlbWVudFt3aGljaF0gPSB0bztcbiAgICAgICAgYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVxdWVzdEFuaW1GcmFtZShhbmltYXRlU2Nyb2xsKTtcbiAgfSk7XG59O1xudmFyIHJlcXVlc3RBbmltRnJhbWUgPSBpc1NlcnZlciA/IGZ1bmN0aW9uICgpIHt9IDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvd1tcIm1velJlcXVlc3RBbmltYXRpb25GcmFtZVwiXSB8fCBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XG4gIH07XG59KCk7XG5cbi8vIEB0cy1jaGVja1xudmFyIFRpbWVyID0gZnVuY3Rpb24gVGltZXIoKSB7XG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICB2YXIgdGltZXJJZDtcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgdmFyIHN0YXJ0VGltZTtcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5cbiAgdmFyIHJlbWFpbmluZztcbiAgLyoqIEB0eXBlIHsoKSA9PiBhbnl9ICovXG5cbiAgdmFyIGNiO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBpZiAoaXNDbGllbnQpIHtcbiAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBwYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIHJldHVybiBzdG9wKCksIHJlbWFpbmluZyAtPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcbiAgfTtcblxuICB2YXIgc3RhcnRUaW1lciA9IGZ1bmN0aW9uIHN0YXJ0VGltZXIoKSB7XG4gICAgaWYgKGlzQ2xpZW50KSB7XG4gICAgICBzdG9wKCk7XG4gICAgICBzdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIHRpbWVySWQgPSB3aW5kb3cuc2V0VGltZW91dChjYiwgcmVtYWluaW5nKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24gc3RhcnQoY2FsbGJhY2ssIGR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIGNiID0gY2FsbGJhY2ssIHJlbWFpbmluZyA9IGR1cmF0aW9uICogMTAwMCwgc3RhcnRUaW1lcigpO1xuICB9O1xuXG4gIHZhciByZXN1bWUgPSBmdW5jdGlvbiByZXN1bWUoKSB7XG4gICAgcmV0dXJuIHN0YXJ0VGltZXIoKTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBwYXVzZTogcGF1c2UsXG4gICAgcmVzdW1lOiByZXN1bWUsXG4gICAgc3RvcDogc3RvcFxuICB9O1xufTtcblxuZXhwb3J0IHsgVGltZXIsIGFkZFdlYkZvbnQsIGVhc2luZywgc2Nyb2xsVG8gfTtcbiIsImltcG9ydCB7IHZhcnMgfSBmcm9tICdwb2x5dGhlbmUtc3R5bGUnO1xuaW1wb3J0IHsgYWRkV2ViRm9udCB9IGZyb20gJ3BvbHl0aGVuZS11dGlsaXRpZXMnO1xuaW1wb3J0IHsgc3R5bGVyIH0gZnJvbSAncG9seXRoZW5lLWNvcmUtY3NzJztcblxuLy8gQHRzLWNoZWNrXG52YXIgcm9ib3RvU3R5bGUgPSBmdW5jdGlvbiByb2JvdG9TdHlsZSgpIHtcbiAgcmV0dXJuIFt7XG4gICAgXCJodG1sLCBib2R5LCBidXR0b24sIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhXCI6IHtcbiAgICAgIGZvbnRGYW1pbHk6IFwiUm9ib3RvLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmXCJcbiAgICB9XG4gIH1dO1xufTtcbnZhciBsb2FkUm9ib3RvID0gZnVuY3Rpb24gbG9hZFJvYm90bygpIHtcbiAgcmV0dXJuIFt7XG4gICAgXCJAaW1wb3J0XCI6IFwidXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9Um9ib3RvOjQwMCw0MDBpLDUwMCw3MDAnKVwiXG4gIH1dO1xufTtcblxuLy8gQHRzLWNoZWNrXG52YXIgZm9udFNpemUgPSAxNDtcbnZhciB0eXBvZ3JhcGh5ID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFt7XG4gICAgXCIgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcFwiOiB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICBwYWRkaW5nOiAwXG4gICAgfVxuICB9LCB7XG4gICAgXCIgaDEsIGgyLCBoMywgaDQsIGg1LCBoNlwiOiB7XG4gICAgICBcIiBzbWFsbFwiOiB7XG4gICAgICAgIFwiZm9udC13ZWlnaHRcIjogdmFycy5mb250X3dlaWdodF9ub3JtYWwsXG4gICAgICAgIFwibGluZS1oZWlnaHRcIjogdmFycy5saW5lX2hlaWdodCxcbiAgICAgICAgXCJsZXR0ZXItc3BhY2luZ1wiOiBcIi0wLjAyZW1cIixcbiAgICAgICAgXCJmb250LXNpemVcIjogXCIwLjZlbVwiXG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAgXCIgaDFcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCI1NnB4XCIsXG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IHZhcnMuZm9udF93ZWlnaHRfbm9ybWFsLFxuICAgICAgXCJsaW5lLWhlaWdodFwiOiB2YXJzLmxpbmVfaGVpZ2h0LFxuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwiMjRweFwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwiMjRweFwiXG4gICAgfVxuICB9LCB7XG4gICAgXCIgaDJcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCI0NXB4XCIsXG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IHZhcnMuZm9udF93ZWlnaHRfbm9ybWFsLFxuICAgICAgXCJsaW5lLWhlaWdodFwiOiB2YXJzLmxpbmVfaGVpZ2h0LFxuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwiMjRweFwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwiMjRweFwiXG4gICAgfVxuICB9LCB7XG4gICAgXCIgaDNcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCIzNHB4XCIsXG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IHZhcnMuZm9udF93ZWlnaHRfbm9ybWFsLFxuICAgICAgXCJsaW5lLWhlaWdodFwiOiB2YXJzLmxpbmVfaGVpZ2h0LFxuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwiMjRweFwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwiMjRweFwiXG4gICAgfVxuICB9LCB7XG4gICAgXCIgaDRcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCIyNHB4XCIsXG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IHZhcnMuZm9udF93ZWlnaHRfbm9ybWFsLFxuICAgICAgXCJsaW5lLWhlaWdodFwiOiB2YXJzLmxpbmVfaGVpZ2h0LFxuICAgICAgXCItbW96LW9zeC1mb250LXNtb290aGluZ1wiOiBcImdyYXlzY2FsZVwiLFxuICAgICAgXCJtYXJnaW4tdG9wXCI6IFwiMjRweFwiLFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCI6IFwiMTZweFwiXG4gICAgfVxuICB9LCB7XG4gICAgXCIgaDVcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogXCIyMHB4XCIsXG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IHZhcnMuZm9udF93ZWlnaHRfbWVkaXVtLFxuICAgICAgXCJsaW5lLWhlaWdodFwiOiB2YXJzLmxpbmVfaGVpZ2h0LFxuICAgICAgXCJsZXR0ZXItc3BhY2luZ1wiOiBcIi0wLjAyZW1cIixcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcIjI0cHhcIixcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcIjE2cHhcIlxuICAgIH1cbiAgfSwge1xuICAgIFwiIGg2XCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IFwiMTZweFwiLFxuICAgICAgXCJmb250LXdlaWdodFwiOiB2YXJzLmZvbnRfd2VpZ2h0X25vcm1hbCxcbiAgICAgIFwibGluZS1oZWlnaHRcIjogdmFycy5saW5lX2hlaWdodCxcbiAgICAgIFwibGV0dGVyLXNwYWNpbmdcIjogXCIwLjA0ZW1cIixcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcIjI0cHhcIixcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcIjE2cHhcIlxuICAgIH1cbiAgfSwge1xuICAgIFwiIGh0bWwsIGJvZHlcIjoge1xuICAgICAgXCJmb250LXNpemVcIjogZm9udFNpemUgKyBcInB4XCIsXG4gICAgICBcImxpbmUtaGVpZ2h0XCI6IHZhcnMubGluZV9oZWlnaHQsXG4gICAgICBcImZvbnQtd2VpZ2h0XCI6IHZhcnMuZm9udF93ZWlnaHRfbm9ybWFsXG4gICAgfSxcbiAgICBcIiBwXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IGZvbnRTaXplICsgXCJweFwiLFxuICAgICAgXCJmb250LXdlaWdodFwiOiB2YXJzLmZvbnRfd2VpZ2h0X25vcm1hbCxcbiAgICAgIFwibGluZS1oZWlnaHRcIjogdmFycy5saW5lX2hlaWdodCxcbiAgICAgIFwibGV0dGVyLXNwYWNpbmdcIjogXCIwXCIsXG4gICAgICBcIm1hcmdpbi1ib3R0b21cIjogXCIxNnB4XCJcbiAgICB9LFxuICAgIFwiIGJsb2NrcXVvdGVcIjoge1xuICAgICAgXCJwb3NpdGlvblwiOiBcInJlbGF0aXZlXCIsXG4gICAgICBcImZvbnQtc2l6ZVwiOiBcIjI0cHhcIixcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogdmFycy5mb250X3dlaWdodF9ub3JtYWwsXG4gICAgICBcImZvbnQtc3R5bGVcIjogXCJpdGFsaWNcIixcbiAgICAgIFwibGluZS1oZWlnaHRcIjogdmFycy5saW5lX2hlaWdodCxcbiAgICAgIFwibGV0dGVyLXNwYWNpbmdcIjogXCIwLjA4ZW1cIixcbiAgICAgIFwibWFyZ2luLXRvcFwiOiBcIjI0cHhcIixcbiAgICAgIFwibWFyZ2luLWJvdHRvbVwiOiBcIjE2cHhcIlxuICAgIH0sXG4gICAgXCIgdWwsIG9sXCI6IHtcbiAgICAgIFwiZm9udC1zaXplXCI6IGZvbnRTaXplICsgXCJweFwiLFxuICAgICAgXCJmb250LXdlaWdodFwiOiB2YXJzLmZvbnRfd2VpZ2h0X25vcm1hbCxcbiAgICAgIFwibGluZS1oZWlnaHRcIjogdmFycy5saW5lX2hlaWdodCxcbiAgICAgIFwibGV0dGVyLXNwYWNpbmdcIjogMFxuICAgIH0sXG4gICAgXCIgYiwgc3Ryb25nXCI6IHtcbiAgICAgIFwiZm9udC13ZWlnaHRcIjogdmFycy5mb250X3dlaWdodF9tZWRpdW1cbiAgICB9XG4gIH1dO1xufSk7XG5cbi8vIEB0cy1jaGVja1xudmFyIGZucyA9IFtyb2JvdG9TdHlsZSwgdHlwb2dyYXBoeV07XG52YXIgZm5zV2l0aExvYWRSb2JvdG8gPSBbbG9hZFJvYm90bywgcm9ib3RvU3R5bGUsIHR5cG9ncmFwaHldOyAvLyBhZGRzIGZvbnQgaW1wb3J0IGZvciB3cml0dGVuIENTU1xuXG52YXIgc2VsZWN0b3IgPSBcIlwiO1xudmFyIGFkZFN0eWxlID0gc3R5bGVyLmNyZWF0ZUFkZFN0eWxlKHNlbGVjdG9yLCBmbnMsIHZhcnMpO1xuXG52YXIgZ2V0U3R5bGUgPSBmdW5jdGlvbiBnZXRTdHlsZShjdXN0b21TZWxlY3RvciwgY3VzdG9tVmFycykge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge30sXG4gICAgICBfcmVmJG1lZGlhUXVlcnkgPSBfcmVmLm1lZGlhUXVlcnksXG4gICAgICBtZWRpYVF1ZXJ5ID0gX3JlZiRtZWRpYVF1ZXJ5ID09PSB2b2lkIDAgPyBcIlwiIDogX3JlZiRtZWRpYVF1ZXJ5LFxuICAgICAgX3JlZiRzY29wZSA9IF9yZWYuc2NvcGUsXG4gICAgICBzY29wZSA9IF9yZWYkc2NvcGUgPT09IHZvaWQgMCA/IFwiXCIgOiBfcmVmJHNjb3BlO1xuXG4gIHJldHVybiBzdHlsZXIuZ2V0U3R5bGUoe1xuICAgIHNlbGVjdG9yczogW2N1c3RvbVNlbGVjdG9yLCBzZWxlY3Rvcl0sXG4gICAgZm5zOiBmbnNXaXRoTG9hZFJvYm90byxcbiAgICB2YXJzOiB2YXJzLFxuICAgIGN1c3RvbVZhcnM6IGN1c3RvbVZhcnMsXG4gICAgbWVkaWFRdWVyeTogbWVkaWFRdWVyeSxcbiAgICBzY29wZTogc2NvcGVcbiAgfSk7XG59O1xuXG52YXIgYWRkUm9ib3RvID0gZnVuY3Rpb24gYWRkUm9ib3RvKCkge1xuICBhZGRXZWJGb250KFwiZ29vZ2xlXCIsIHtcbiAgICBmYW1pbGllczogW1wiUm9ib3RvOjQwMCw1MDAsNzAwLDQwMGl0YWxpYzpsYXRpblwiXVxuICB9KTtcbn07XG5cbnZhciBhZGRUeXBvZ3JhcGh5ID0gZnVuY3Rpb24gYWRkVHlwb2dyYXBoeSgpIHtcbiAgYWRkUm9ib3RvKCk7XG4gIHN0eWxlci5hZGQoXCJwZS1tYXRlcmlhbC1kZXNpZ24tdHlwb2dyYXBoeVwiLCBmbnMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMoKTtcbiAgfSkpO1xufTtcblxuZXhwb3J0IHsgYWRkUm9ib3RvLCBhZGRTdHlsZSwgYWRkVHlwb2dyYXBoeSwgZ2V0U3R5bGUgfTtcbiIsImltcG9ydCB7IHRyYW5zaXRpb25TdGF0ZVJlZHVjZXIsIGluaXRpYWxUcmFuc2l0aW9uU3RhdGUsIHN1YnNjcmliZSwgdHJhbnNpdGlvbkNvbXBvbmVudCwgdW5zdWJzY3JpYmUsIGZpbHRlclN1cHBvcnRlZEF0dHJpYnV0ZXMsIGlzU2VydmVyLCBzdHlsZVByb3BDb21wYXJlLCBwb2ludGVyRW5kRG93bkV2ZW50IH0gZnJvbSAncG9seXRoZW5lLWNvcmUnO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG5cbiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuXG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxudmFyIGxpc3RUaWxlQ2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLWxpc3QtdGlsZVwiLFxuICAvLyBlbGVtZW50c1xuICBjb250ZW50OiBcInBlLWxpc3QtdGlsZV9fY29udGVudFwiLFxuICBoaWdoU3VidGl0bGU6IFwicGUtbGlzdC10aWxlX19oaWdoLXN1YnRpdGxlXCIsXG4gIHByaW1hcnk6IFwicGUtbGlzdC10aWxlX19wcmltYXJ5XCIsXG4gIHNlY29uZGFyeTogXCJwZS1saXN0LXRpbGVfX3NlY29uZGFyeVwiLFxuICBzdWJ0aXRsZTogXCJwZS1saXN0LXRpbGVfX3N1YnRpdGxlXCIsXG4gIHRpdGxlOiBcInBlLWxpc3QtdGlsZV9fdGl0bGVcIixcbiAgY29udGVudEZyb250OiBcInBlLWxpc3QtdGlsZV9fY29udGVudC1mcm9udFwiLFxuICAvLyBzdGF0ZXMgIFxuICBjb21wYWN0OiBcInBlLWxpc3QtdGlsZS0tY29tcGFjdFwiLFxuICBjb21wYWN0RnJvbnQ6IFwicGUtbGlzdC10aWxlLS1jb21wYWN0LWZyb250XCIsXG4gIGRpc2FibGVkOiBcInBlLWxpc3QtdGlsZS0tZGlzYWJsZWRcIixcbiAgaGFzRnJvbnQ6IFwicGUtbGlzdC10aWxlLS1mcm9udFwiLFxuICBoYXNIaWdoU3VidGl0bGU6IFwicGUtbGlzdC10aWxlLS1oaWdoLXN1YnRpdGxlXCIsXG4gIGhhc1N1YnRpdGxlOiBcInBlLWxpc3QtdGlsZS0tc3VidGl0bGVcIixcbiAgaGVhZGVyOiBcInBlLWxpc3QtdGlsZS0taGVhZGVyXCIsXG4gIGhvdmVyYWJsZTogXCJwZS1saXN0LXRpbGUtLWhvdmVyYWJsZVwiLFxuICBpbnNldEg6IFwicGUtbGlzdC10aWxlLS1pbnNldC1oXCIsXG4gIGluc2V0VjogXCJwZS1saXN0LXRpbGUtLWluc2V0LXZcIixcbiAgc2VsZWN0YWJsZTogXCJwZS1saXN0LXRpbGUtLXNlbGVjdGFibGVcIixcbiAgc2VsZWN0ZWQ6IFwicGUtbGlzdC10aWxlLS1zZWxlY3RlZFwiLFxuICByb3VuZGVkOiBcInBlLWxpc3QtdGlsZS0tcm91bmRlZFwiLFxuICBoaWdobGlnaHQ6IFwicGUtbGlzdC10aWxlLS1oaWdobGlnaHRcIixcbiAgc3RpY2t5OiBcInBlLWxpc3QtdGlsZS0tc3RpY2t5XCIsXG4gIG5hdmlnYXRpb246IFwicGUtbGlzdC10aWxlLS1uYXZpZ2F0aW9uXCJcbn07XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtbWVudVwiLFxuICAvLyBlbGVtZW50c1xuICBwYW5lbDogXCJwZS1tZW51X19wYW5lbFwiLFxuICBjb250ZW50OiBcInBlLW1lbnVfX2NvbnRlbnRcIixcbiAgcGxhY2Vob2xkZXI6IFwicGUtbWVudV9fcGxhY2Vob2xkZXJcIixcbiAgYmFja2Ryb3A6IFwicGUtbWVudV9fYmFja2Ryb3BcIixcbiAgLy8gc3RhdGVzXG4gIGZsb2F0aW5nOiBcInBlLW1lbnUtLWZsb2F0aW5nXCIsXG4gIG9yaWdpbjogXCJwZS1tZW51LS1vcmlnaW5cIixcbiAgcGVybWFuZW50OiBcInBlLW1lbnUtLXBlcm1hbmVudFwiLFxuICBzaG93QmFja2Ryb3A6IFwicGUtbWVudS0tYmFja2Ryb3BcIixcbiAgdmlzaWJsZTogXCJwZS1tZW51LS12aXNpYmxlXCIsXG4gIHdpZHRoX2F1dG86IFwicGUtbWVudS0td2lkdGgtYXV0b1wiLFxuICB3aWR0aF9uOiBcInBlLW1lbnUtLXdpZHRoLVwiLFxuICBpc1RvcE1lbnU6IFwicGUtbWVudS0tdG9wLW1lbnVcIixcbiAgLy8gbG9va3VwXG4gIGxpc3RUaWxlOiBsaXN0VGlsZUNsYXNzZXMuY29tcG9uZW50LFxuICBzZWxlY3RlZExpc3RUaWxlOiBsaXN0VGlsZUNsYXNzZXMuc2VsZWN0ZWRcbn07XG5cbnZhciBERUZBVUxUX09GRlNFVF9IID0gMDtcbnZhciBERUZBVUxUX09GRlNFVF9WID0gXCI3OSVcIjtcbnZhciBERUZBVUxUX1RZUEUgPSBcImZsb2F0aW5nXCI7XG52YXIgTUlOX1dJRFRIID0gMS41O1xudmFyIERFRkFVTFRfU0hBRE9XX0RFUFRIID0gMTtcblxudmFyIHVuaWZ5V2lkdGggPSBmdW5jdGlvbiB1bmlmeVdpZHRoKHdpZHRoKSB7XG4gIHJldHVybiB3aWR0aCA8IE1JTl9XSURUSCA/IE1JTl9XSURUSCA6IHdpZHRoO1xufTtcblxudmFyIHdpZHRoQ2xhc3MgPSBmdW5jdGlvbiB3aWR0aENsYXNzKHNpemUpIHtcbiAgcmV0dXJuIGNsYXNzZXMud2lkdGhfbiArIHNpemUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBcIi1cIik7XG59O1xuXG52YXIgX01lbnUgPSBmdW5jdGlvbiBfTWVudShfcmVmKSB7XG4gIHZhciBoID0gX3JlZi5oLFxuICAgICAgYSA9IF9yZWYuYSxcbiAgICAgIHVzZVJlZHVjZXIgPSBfcmVmLnVzZVJlZHVjZXIsXG4gICAgICB1c2VTdGF0ZSA9IF9yZWYudXNlU3RhdGUsXG4gICAgICB1c2VFZmZlY3QgPSBfcmVmLnVzZUVmZmVjdCxcbiAgICAgIHVzZVJlZiA9IF9yZWYudXNlUmVmLFxuICAgICAgZ2V0UmVmID0gX3JlZi5nZXRSZWYsXG4gICAgICBTaGFkb3cgPSBfcmVmLlNoYWRvdyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImhcIiwgXCJhXCIsIFwidXNlUmVkdWNlclwiLCBcInVzZVN0YXRlXCIsIFwidXNlRWZmZWN0XCIsIFwidXNlUmVmXCIsIFwiZ2V0UmVmXCIsIFwiU2hhZG93XCJdKTtcblxuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHRyYW5zaXRpb25TdGF0ZVJlZHVjZXIsIGluaXRpYWxUcmFuc2l0aW9uU3RhdGUpLFxuICAgICAgX3VzZVJlZHVjZXIyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVJlZHVjZXIsIDIpLFxuICAgICAgZGlzcGF0Y2hUcmFuc2l0aW9uU3RhdGUgPSBfdXNlUmVkdWNlcjJbMV07XG5cbiAgdmFyIF91c2VTdGF0ZSA9IHVzZVN0YXRlKCksXG4gICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSxcbiAgICAgIGRvbUVsZW1lbnQgPSBfdXNlU3RhdGUyWzBdLFxuICAgICAgc2V0RG9tRWxlbWVudCA9IF91c2VTdGF0ZTJbMV07XG5cbiAgdmFyIF91c2VTdGF0ZTMgPSB1c2VTdGF0ZSghIXByb3BzLnBlcm1hbmVudCksXG4gICAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksXG4gICAgICBzZXRJc1Zpc2libGUgPSBfdXNlU3RhdGU0WzFdO1xuXG4gIHZhciBwYW5lbEVsUmVmID0gdXNlUmVmKCk7XG4gIHZhciBjb250ZW50RWxSZWYgPSB1c2VSZWYoKTtcblxuICB2YXIgdXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHBvc2l0aW9uTWVudSgpO1xuICAgIHNjcm9sbENvbnRlbnQoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk9wdGlvbnMgPSBmdW5jdGlvbiB0cmFuc2l0aW9uT3B0aW9ucyhfcmVmMikge1xuICAgIHZhciBpc1Nob3cgPSBfcmVmMi5pc1Nob3csXG4gICAgICAgIF9yZWYyJGhpZGVEZWxheSA9IF9yZWYyLmhpZGVEZWxheSxcbiAgICAgICAgaGlkZURlbGF5ID0gX3JlZjIkaGlkZURlbGF5ID09PSB2b2lkIDAgPyBwcm9wcy5oaWRlRGVsYXkgOiBfcmVmMiRoaWRlRGVsYXk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoVHJhbnNpdGlvblN0YXRlOiBkaXNwYXRjaFRyYW5zaXRpb25TdGF0ZSxcbiAgICAgIHNldElzVmlzaWJsZTogc2V0SXNWaXNpYmxlLFxuICAgICAgcHJvcHM6IF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICBoaWRlRGVsYXk6IGhpZGVEZWxheVxuICAgICAgfSksXG4gICAgICBpc1Nob3c6IGlzU2hvdyxcbiAgICAgIGJlZm9yZVRyYW5zaXRpb246IGlzU2hvdyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZSgpO1xuICAgICAgfSA6IG51bGwsXG4gICAgICBkb21FbGVtZW50czoge1xuICAgICAgICBlbDogcGFuZWxFbFJlZi5jdXJyZW50LFxuICAgICAgICBzaG93Q2xhc3NFbGVtZW50OiBkb21FbGVtZW50XG4gICAgICB9LFxuICAgICAgc2hvd0NsYXNzOiBjbGFzc2VzLnZpc2libGVcbiAgICB9O1xuICB9O1xuXG4gIHZhciBpc1RvcE1lbnUgPSBmdW5jdGlvbiBpc1RvcE1lbnUoKSB7XG4gICAgcmV0dXJuIHByb3BzLnRvcE1lbnUgfHwgc3R5bGVQcm9wQ29tcGFyZSh7XG4gICAgICBlbGVtZW50OiBkb21FbGVtZW50LFxuICAgICAgcHNldWRvU2VsZWN0b3I6IFwiOmJlZm9yZVwiLFxuICAgICAgcHJvcDogXCJjb250ZW50XCIsXG4gICAgICBjb250YWluczogXCJcXFwiXCIuY29uY2F0KFwidG9wX21lbnVcIiwgXCJcXFwiXCIpXG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHBvc2l0aW9uTWVudSA9IGZ1bmN0aW9uIHBvc2l0aW9uTWVudSgpIHtcbiAgICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXByb3BzLnRhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwYW5lbEVsID0gcGFuZWxFbFJlZi5jdXJyZW50O1xuICAgIHZhciBjb250ZW50RWwgPSBjb250ZW50RWxSZWYuY3VycmVudDtcbiAgICB2YXIgdGFyZ2V0RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHByb3BzLnRhcmdldCk7XG5cbiAgICBpZiAoIXRhcmdldEVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFwYW5lbEVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBEb24ndCBzZXQgdGhlIHBvc2l0aW9uIG9yIHRvcCBvZmZzZXQgaWYgdGhlIG1lbnUgcG9zaXRpb24gaXMgZml4ZWRcblxuXG4gICAgdmFyIGhhc1N0eWxlUG9zaXRpb25GaXhlZCA9IHN0eWxlUHJvcENvbXBhcmUoe1xuICAgICAgZWxlbWVudDogcGFuZWxFbCxcbiAgICAgIHByb3A6IFwicG9zaXRpb25cIixcbiAgICAgIGVxdWFsczogXCJmaXhlZFwiXG4gICAgfSk7XG5cbiAgICBpZiAoaGFzU3R5bGVQb3NpdGlvbkZpeGVkICYmICFpc1RvcE1lbnUoKSkge1xuICAgICAgX2V4dGVuZHMocGFuZWxFbC5zdHlsZSwge30pO1xuXG4gICAgICBwYW5lbEVsLm9mZnNldEhlaWdodDsgLy8gZm9yY2UgcmVmbG93XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50UmVjdCA9IHBhbmVsRWwucGFyZW50Tm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB2YXIgdGFyZ2V0UmVjdCA9IHRhcmdldEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHZhciBhdHRyc09mZnNldEggPSBwcm9wcy5vZmZzZXRIICE9PSB1bmRlZmluZWQgPyBwcm9wcy5vZmZzZXRIIDogcHJvcHMub2Zmc2V0ICE9PSB1bmRlZmluZWQgPyBwcm9wcy5vZmZzZXQgLy8gZGVwcmVjYXRlZFxuICAgIDogREVGQVVMVF9PRkZTRVRfSDtcbiAgICB2YXIgYXR0cnNPZmZzZXRWID0gcHJvcHMub2Zmc2V0ViAhPT0gdW5kZWZpbmVkID8gcHJvcHMub2Zmc2V0ViA6IERFRkFVTFRfT0ZGU0VUX1Y7XG4gICAgdmFyIG9mZnNldEggPSBhdHRyc09mZnNldEgudG9TdHJpbmcoKS5pbmRleE9mKFwiJVwiKSAhPT0gLTEgPyBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoYXR0cnNPZmZzZXRIKSAqIDAuMDEgKiB0YXJnZXRSZWN0LndpZHRoKSA6IE1hdGgucm91bmQocGFyc2VGbG9hdChhdHRyc09mZnNldEgpKTtcbiAgICB2YXIgb2Zmc2V0ViA9IGF0dHJzT2Zmc2V0Vi50b1N0cmluZygpLmluZGV4T2YoXCIlXCIpICE9PSAtMSA/IE1hdGgucm91bmQocGFyc2VGbG9hdChhdHRyc09mZnNldFYpICogMC4wMSAqIHRhcmdldFJlY3QuaGVpZ2h0KSA6IE1hdGgucm91bmQocGFyc2VGbG9hdChhdHRyc09mZnNldFYpKTtcbiAgICB2YXIgcG9zaXRpb25PZmZzZXRWID0gb2Zmc2V0VjtcbiAgICB2YXIgYXR0cnNPcmlnaW4gPSBwcm9wcy5vcmlnaW4gfHwgXCJ0b3BcIjtcbiAgICB2YXIgb3JpZ2luID0gYXR0cnNPcmlnaW4uc3BsaXQoL1xcVysvKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3Vycikge1xuICAgICAgcmV0dXJuIGFjY1tjdXJyXSA9IHRydWUsIGFjYztcbiAgICB9LCB7fSk7XG4gICAgdmFyIGZpcnN0SXRlbSA9IGNvbnRlbnRFbC5xdWVyeVNlbGVjdG9yQWxsKFwiLlwiICsgY2xhc3Nlcy5saXN0VGlsZSlbMF07XG5cbiAgICBpZiAocHJvcHMucmVwb3NpdGlvbikge1xuICAgICAgLy8gZ2V0IHRoZSBmaXJzdCBMaXN0IFRpbGUgdG8gY2FsY3VsYXRlIHRoZSB0b3AgcG9zaXRpb24gIFxuICAgICAgdmFyIHNlbGVjdGVkSXRlbSA9IGNvbnRlbnRFbC5xdWVyeVNlbGVjdG9yKFwiLlwiICsgY2xhc3Nlcy5zZWxlY3RlZExpc3RUaWxlKTtcblxuICAgICAgaWYgKGZpcnN0SXRlbSAmJiBzZWxlY3RlZEl0ZW0pIHtcbiAgICAgICAgLy8gY2FsY3VsYXRlIHYgcG9zaXRpb246IG1lbnUgc2hvdWxkIHNoaWZ0IHVwd2FyZCByZWxhdGl2ZSB0byB0aGUgZmlyc3QgaXRlbVxuICAgICAgICB2YXIgZmlyc3RJdGVtUmVjdCA9IGZpcnN0SXRlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIHNlbGVjdGVkSXRlbVJlY3QgPSBzZWxlY3RlZEl0ZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHBvc2l0aW9uT2Zmc2V0ViA9IGZpcnN0SXRlbVJlY3QudG9wIC0gc2VsZWN0ZWRJdGVtUmVjdC50b3A7XG4gICAgICB9IC8vIGFsaWduIHRvIG1pZGRsZSBvZiB0YXJnZXRcblxuXG4gICAgICB2YXIgYWxpZ25FbCA9IHNlbGVjdGVkSXRlbSB8fCBmaXJzdEl0ZW07XG4gICAgICB2YXIgYWxpZ25SZWN0ID0gYWxpZ25FbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgdmFyIF90YXJnZXRSZWN0ID0gdGFyZ2V0RWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgIHZhciBoZWlnaHREaWZmID0gX3RhcmdldFJlY3QuaGVpZ2h0IC0gYWxpZ25SZWN0LmhlaWdodDtcbiAgICAgIHBvc2l0aW9uT2Zmc2V0ViArPSBNYXRoLmFicyhoZWlnaHREaWZmKSAvIDI7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5vcmlnaW4gJiYgIWhhc1N0eWxlUG9zaXRpb25GaXhlZCkge1xuICAgICAgaWYgKG9yaWdpbi50b3ApIHtcbiAgICAgICAgcG9zaXRpb25PZmZzZXRWICs9IHRhcmdldFJlY3QudG9wIC0gcGFyZW50UmVjdC50b3A7XG4gICAgICB9IGVsc2UgaWYgKG9yaWdpbi5ib3R0b20pIHtcbiAgICAgICAgcG9zaXRpb25PZmZzZXRWICs9IHRhcmdldFJlY3QudG9wIC0gcGFyZW50UmVjdC5ib3R0b207XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLmhlaWdodCkge1xuICAgICAgdmFyIGZpcnN0SXRlbUhlaWdodCA9IGZpcnN0SXRlbSA/IGZpcnN0SXRlbS5jbGllbnRIZWlnaHQgOiA0ODsgLy8gZGVmYXVsdCBMaXN0IFRpbGUgaGVpZ2h0XG5cbiAgICAgIGlmIChwcm9wcy5oZWlnaHQgPT09IFwibWF4XCIpIHtcbiAgICAgICAgdmFyIHRvcE1hcmdpbiA9IHBvc2l0aW9uT2Zmc2V0VjtcbiAgICAgICAgdmFyIGJvdHRvbU1hcmdpbiA9IGZpcnN0SXRlbUhlaWdodDtcbiAgICAgICAgcGFuZWxFbC5zdHlsZS5oZWlnaHQgPSBcImNhbGMoMTAwJSAtIFwiLmNvbmNhdCh0b3BNYXJnaW4gKyBib3R0b21NYXJnaW4sIFwicHgpXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGhlaWdodCA9IC9eXFxkKyQvLnRlc3QocHJvcHMuaGVpZ2h0LnRvU3RyaW5nKCkpID8gXCJcIi5jb25jYXQocHJvcHMuaGVpZ2h0LCBcInB4XCIpIDogcHJvcHMuaGVpZ2h0O1xuICAgICAgICBwYW5lbEVsLnN0eWxlLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIH1cbiAgICB9IC8vIHByZXZlbnQgYW5pbWF0ZWQgY2hhbmdlc1xuXG5cbiAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gcGFuZWxFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb247XG4gICAgcGFuZWxFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBcIjBtc1wiO1xuXG4gICAgaWYgKHBhbmVsRWwucGFyZW50Tm9kZSAmJiAhaGFzU3R5bGVQb3NpdGlvbkZpeGVkKSB7XG4gICAgICBpZiAob3JpZ2luLnJpZ2h0KSB7XG4gICAgICAgIHBhbmVsRWwuc3R5bGUucmlnaHQgPSB0YXJnZXRSZWN0LnJpZ2h0IC0gcGFyZW50UmVjdC5yaWdodCArIG9mZnNldEggKyBcInB4XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYW5lbEVsLnN0eWxlLmxlZnQgPSB0YXJnZXRSZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgKyBvZmZzZXRIICsgXCJweFwiO1xuICAgICAgfVxuXG4gICAgICBpZiAob3JpZ2luLmJvdHRvbSkge1xuICAgICAgICBwYW5lbEVsLnN0eWxlLmJvdHRvbSA9IHBvc2l0aW9uT2Zmc2V0ViArIFwicHhcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhbmVsRWwuc3R5bGUudG9wID0gcG9zaXRpb25PZmZzZXRWICsgXCJweFwiO1xuICAgICAgfVxuXG4gICAgICBwYW5lbEVsLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGF0dHJzT3JpZ2luLnNwbGl0KC9cXFcrLykuam9pbihcIiBcIik7XG4gICAgfVxuXG4gICAgcGFuZWxFbC5vZmZzZXRIZWlnaHQ7IC8vIGZvcmNlIHJlZmxvd1xuXG4gICAgcGFuZWxFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb247XG4gIH07XG5cbiAgdmFyIHNjcm9sbENvbnRlbnQgPSBmdW5jdGlvbiBzY3JvbGxDb250ZW50KCkge1xuICAgIGlmIChpc1NlcnZlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghcHJvcHMuc2Nyb2xsVGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNjcm9sbFRhcmdldEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9wcy5zY3JvbGxUYXJnZXQpO1xuXG4gICAgaWYgKCFzY3JvbGxUYXJnZXRFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnRlbnRFbFJlZi5jdXJyZW50LnNjcm9sbFRvcCA9IHNjcm9sbFRhcmdldEVsLm9mZnNldFRvcDtcbiAgfTtcblxuICB2YXIgc2hvd01lbnUgPSBmdW5jdGlvbiBzaG93TWVudSgpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbkNvbXBvbmVudCh0cmFuc2l0aW9uT3B0aW9ucyh7XG4gICAgICBpc1Nob3c6IHRydWVcbiAgICB9KSk7XG4gIH07XG5cbiAgdmFyIGhpZGVNZW51ID0gZnVuY3Rpb24gaGlkZU1lbnUoKSB7XG4gICAgdmFyIF9yZWYzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgaGlkZURlbGF5ID0gX3JlZjMuaGlkZURlbGF5O1xuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25Db21wb25lbnQodHJhbnNpdGlvbk9wdGlvbnMoe1xuICAgICAgaXNTaG93OiBmYWxzZSxcbiAgICAgIGhpZGVEZWxheTogaGlkZURlbGF5XG4gICAgfSkpO1xuICB9O1xuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkb21FbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGFuZWxFbFJlZi5jdXJyZW50ID0gZG9tRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChjbGFzc2VzLnBhbmVsKSk7XG5cbiAgICBfZXh0ZW5kcyhwYW5lbEVsUmVmLmN1cnJlbnQuc3R5bGUsIHByb3BzLnN0eWxlKTtcblxuICAgIGNvbnRlbnRFbFJlZi5jdXJyZW50ID0gZG9tRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLlwiLmNvbmNhdChjbGFzc2VzLmNvbnRlbnQpKTtcblxuICAgIHZhciBoYW5kbGVFc2NhcGUgPSBmdW5jdGlvbiBoYW5kbGVFc2NhcGUoZSkge1xuICAgICAgaWYgKGUua2V5ID09PSBcIkVzY2FwZVwiIHx8IGUua2V5ID09PSBcIkVzY1wiKSB7XG4gICAgICAgIGhpZGVNZW51KHtcbiAgICAgICAgICBoaWRlRGVsYXk6IDBcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBoYW5kbGVEaXNtaXNzVGFwID0gZnVuY3Rpb24gaGFuZGxlRGlzbWlzc1RhcChlKSB7XG4gICAgICBpZiAoZS50YXJnZXQgPT09IHBhbmVsRWxSZWYuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGhpZGVNZW51KCk7XG4gICAgfTtcblxuICAgIHZhciBhY3RpdmF0ZURpc21pc3NUYXAgPSBmdW5jdGlvbiBhY3RpdmF0ZURpc21pc3NUYXAoKSB7XG4gICAgICBwb2ludGVyRW5kRG93bkV2ZW50LmZvckVhY2goZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldnQsIGhhbmRsZURpc21pc3NUYXApO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBkZUFjdGl2YXRlRGlzbWlzc1RhcCA9IGZ1bmN0aW9uIGRlQWN0aXZhdGVEaXNtaXNzVGFwKCkge1xuICAgICAgcG9pbnRlckVuZERvd25FdmVudC5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0LCBoYW5kbGVEaXNtaXNzVGFwKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoIXByb3BzLnBlcm1hbmVudCkge1xuICAgICAgc3Vic2NyaWJlKFwicmVzaXplXCIsIHVwZGF0ZSk7XG4gICAgICBzdWJzY3JpYmUoXCJrZXlkb3duXCIsIGhhbmRsZUVzY2FwZSk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWN0aXZhdGVEaXNtaXNzVGFwKCk7XG4gICAgICAgIHNob3dNZW51KCk7XG4gICAgICB9LCAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFwcm9wcy5wZXJtYW5lbnQpIHtcbiAgICAgICAgdW5zdWJzY3JpYmUoXCJyZXNpemVcIiwgdXBkYXRlKTtcbiAgICAgICAgdW5zdWJzY3JpYmUoXCJrZXlkb3duXCIsIGhhbmRsZUVzY2FwZSk7XG4gICAgICAgIGRlQWN0aXZhdGVEaXNtaXNzVGFwKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2RvbUVsZW1lbnRdKTtcbiAgdmFyIHR5cGUgPSBwcm9wcy50eXBlIHx8IERFRkFVTFRfVFlQRTtcblxuICB2YXIgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7fSwgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyhwcm9wcywge1xuICAgIHJlbW92ZTogW1wic3R5bGVcIl1cbiAgfSksIHByb3BzLnRlc3RJZCAmJiB7XG4gICAgXCJkYXRhLXRlc3QtaWRcIjogcHJvcHMudGVzdElkXG4gIH0sIGdldFJlZihmdW5jdGlvbiAoZG9tKSB7XG4gICAgcmV0dXJuIGRvbSAmJiAhZG9tRWxlbWVudCAmJiAoc2V0RG9tRWxlbWVudChkb20pLCBwcm9wcy5nZXRSZWYgJiYgcHJvcHMuZ2V0UmVmKGRvbSkpO1xuICB9KSwge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMuY29tcG9uZW50LCBwcm9wcy5wZXJtYW5lbnQgPyBjbGFzc2VzLnBlcm1hbmVudCA6IG51bGwsIHByb3BzLm9yaWdpbiA/IGNsYXNzZXMub3JpZ2luIDogbnVsbCwgcHJvcHMuYmFja2Ryb3AgPyBjbGFzc2VzLnNob3dCYWNrZHJvcCA6IG51bGwsIHByb3BzLnRvcE1lbnUgPyBjbGFzc2VzLmlzVG9wTWVudSA6IG51bGwsIHR5cGUgPT09IFwiZmxvYXRpbmdcIiAmJiAhcHJvcHMucGVybWFuZW50ID8gY2xhc3Nlcy5mbG9hdGluZyA6IG51bGwsIHByb3BzLndpZHRoIHx8IHByb3BzLnNpemUgPyB3aWR0aENsYXNzKHVuaWZ5V2lkdGgocHJvcHMud2lkdGggfHwgcHJvcHMuc2l6ZSkpIDogbnVsbCwgcHJvcHMudG9uZSA9PT0gXCJkYXJrXCIgPyBcInBlLWRhcmstdG9uZVwiIDogbnVsbCwgcHJvcHMudG9uZSA9PT0gXCJsaWdodFwiID8gXCJwZS1saWdodC10b25lXCIgOiBudWxsLCBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHNbYVtcImNsYXNzXCJdXV0uam9pbihcIiBcIilcbiAgfSk7XG5cbiAgdmFyIHNoYWRvd0RlcHRoID0gcHJvcHMuc2hhZG93RGVwdGggIT09IHVuZGVmaW5lZCA/IHByb3BzLnNoYWRvd0RlcHRoIDogREVGQVVMVF9TSEFET1dfREVQVEg7XG4gIHZhciBjb21wb25lbnRDb250ZW50ID0gW2goXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5iYWNrZHJvcFxuICB9KSwgaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnBhbmVsXG4gIH0sIFtoKFNoYWRvdywge1xuICAgIHNoYWRvd0RlcHRoOiBzaGFkb3dEZXB0aCxcbiAgICBhbmltYXRlZDogdHJ1ZVxuICB9KSwgaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNvbnRlbnRcbiAgfSwgcHJvcHMuY29udGVudCB8fCBwcm9wcy5jaGlsZHJlbildKV07XG4gIHZhciBjb250ZW50ID0gW3Byb3BzLmJlZm9yZV0uY29uY2F0KGNvbXBvbmVudENvbnRlbnQsIFtwcm9wcy5hZnRlcl0pO1xuICByZXR1cm4gaChwcm9wcy5lbGVtZW50IHx8IFwiZGl2XCIsIGNvbXBvbmVudFByb3BzLCBjb250ZW50KTtcbn07XG5cbmV4cG9ydCB7IF9NZW51IH07XG4iLCJpbXBvcnQgeyBfQ29uZGl0aW9uYWwgfSBmcm9tICdwb2x5dGhlbmUtY29yZSc7XG5pbXBvcnQgeyBjYXN0LCBoLCBhLCB1c2VSZWR1Y2VyLCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYsIGdldFJlZiB9IGZyb20gJ2N5YW5vLW1pdGhyaWwnO1xuaW1wb3J0IHsgX01lbnUgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1tZW51JztcbmltcG9ydCB7IFNoYWRvdyB9IGZyb20gJ3BvbHl0aGVuZS1taXRocmlsLXNoYWRvdyc7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbnZhciBsaXN0VGlsZUNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1saXN0LXRpbGVcIixcbiAgLy8gZWxlbWVudHNcbiAgY29udGVudDogXCJwZS1saXN0LXRpbGVfX2NvbnRlbnRcIixcbiAgaGlnaFN1YnRpdGxlOiBcInBlLWxpc3QtdGlsZV9faGlnaC1zdWJ0aXRsZVwiLFxuICBwcmltYXJ5OiBcInBlLWxpc3QtdGlsZV9fcHJpbWFyeVwiLFxuICBzZWNvbmRhcnk6IFwicGUtbGlzdC10aWxlX19zZWNvbmRhcnlcIixcbiAgc3VidGl0bGU6IFwicGUtbGlzdC10aWxlX19zdWJ0aXRsZVwiLFxuICB0aXRsZTogXCJwZS1saXN0LXRpbGVfX3RpdGxlXCIsXG4gIGNvbnRlbnRGcm9udDogXCJwZS1saXN0LXRpbGVfX2NvbnRlbnQtZnJvbnRcIixcbiAgLy8gc3RhdGVzICBcbiAgY29tcGFjdDogXCJwZS1saXN0LXRpbGUtLWNvbXBhY3RcIixcbiAgY29tcGFjdEZyb250OiBcInBlLWxpc3QtdGlsZS0tY29tcGFjdC1mcm9udFwiLFxuICBkaXNhYmxlZDogXCJwZS1saXN0LXRpbGUtLWRpc2FibGVkXCIsXG4gIGhhc0Zyb250OiBcInBlLWxpc3QtdGlsZS0tZnJvbnRcIixcbiAgaGFzSGlnaFN1YnRpdGxlOiBcInBlLWxpc3QtdGlsZS0taGlnaC1zdWJ0aXRsZVwiLFxuICBoYXNTdWJ0aXRsZTogXCJwZS1saXN0LXRpbGUtLXN1YnRpdGxlXCIsXG4gIGhlYWRlcjogXCJwZS1saXN0LXRpbGUtLWhlYWRlclwiLFxuICBob3ZlcmFibGU6IFwicGUtbGlzdC10aWxlLS1ob3ZlcmFibGVcIixcbiAgaW5zZXRIOiBcInBlLWxpc3QtdGlsZS0taW5zZXQtaFwiLFxuICBpbnNldFY6IFwicGUtbGlzdC10aWxlLS1pbnNldC12XCIsXG4gIHNlbGVjdGFibGU6IFwicGUtbGlzdC10aWxlLS1zZWxlY3RhYmxlXCIsXG4gIHNlbGVjdGVkOiBcInBlLWxpc3QtdGlsZS0tc2VsZWN0ZWRcIixcbiAgcm91bmRlZDogXCJwZS1saXN0LXRpbGUtLXJvdW5kZWRcIixcbiAgaGlnaGxpZ2h0OiBcInBlLWxpc3QtdGlsZS0taGlnaGxpZ2h0XCIsXG4gIHN0aWNreTogXCJwZS1saXN0LXRpbGUtLXN0aWNreVwiLFxuICBuYXZpZ2F0aW9uOiBcInBlLWxpc3QtdGlsZS0tbmF2aWdhdGlvblwiXG59O1xuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLW1lbnVcIixcbiAgLy8gZWxlbWVudHNcbiAgcGFuZWw6IFwicGUtbWVudV9fcGFuZWxcIixcbiAgY29udGVudDogXCJwZS1tZW51X19jb250ZW50XCIsXG4gIHBsYWNlaG9sZGVyOiBcInBlLW1lbnVfX3BsYWNlaG9sZGVyXCIsXG4gIGJhY2tkcm9wOiBcInBlLW1lbnVfX2JhY2tkcm9wXCIsXG4gIC8vIHN0YXRlc1xuICBmbG9hdGluZzogXCJwZS1tZW51LS1mbG9hdGluZ1wiLFxuICBvcmlnaW46IFwicGUtbWVudS0tb3JpZ2luXCIsXG4gIHBlcm1hbmVudDogXCJwZS1tZW51LS1wZXJtYW5lbnRcIixcbiAgc2hvd0JhY2tkcm9wOiBcInBlLW1lbnUtLWJhY2tkcm9wXCIsXG4gIHZpc2libGU6IFwicGUtbWVudS0tdmlzaWJsZVwiLFxuICB3aWR0aF9hdXRvOiBcInBlLW1lbnUtLXdpZHRoLWF1dG9cIixcbiAgd2lkdGhfbjogXCJwZS1tZW51LS13aWR0aC1cIixcbiAgaXNUb3BNZW51OiBcInBlLW1lbnUtLXRvcC1tZW51XCIsXG4gIC8vIGxvb2t1cFxuICBsaXN0VGlsZTogbGlzdFRpbGVDbGFzc2VzLmNvbXBvbmVudCxcbiAgc2VsZWN0ZWRMaXN0VGlsZTogbGlzdFRpbGVDbGFzc2VzLnNlbGVjdGVkXG59O1xuXG52YXIgTWVudUluc3RhbmNlID0gY2FzdChfTWVudSwge1xuICBoOiBoLFxuICBhOiBhLFxuICB1c2VSZWR1Y2VyOiB1c2VSZWR1Y2VyLFxuICB1c2VTdGF0ZTogdXNlU3RhdGUsXG4gIHVzZUVmZmVjdDogdXNlRWZmZWN0LFxuICB1c2VSZWY6IHVzZVJlZixcbiAgZ2V0UmVmOiBnZXRSZWYsXG4gIFNoYWRvdzogU2hhZG93XG59KTtcbnZhciBNZW51VG9nZ2xlID0gY2FzdChfQ29uZGl0aW9uYWwsIHtcbiAgaDogaCxcbiAgdXNlU3RhdGU6IHVzZVN0YXRlLFxuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdFxufSk7XG5NZW51VG9nZ2xlW1wiZGlzcGxheU5hbWVcIl0gPSBcIk1lbnVUb2dnbGVcIjtcbnZhciBNZW51ID0ge1xuICB2aWV3OiBmdW5jdGlvbiB2aWV3KHZub2RlKSB7XG4gICAgcmV0dXJuIGgoTWVudVRvZ2dsZSwgX29iamVjdFNwcmVhZDIoe30sIHZub2RlLmF0dHJzLCB7XG4gICAgICBwbGFjZWhvbGRlckNsYXNzTmFtZTogY2xhc3Nlcy5wbGFjZWhvbGRlcixcbiAgICAgIGluc3RhbmNlOiBNZW51SW5zdGFuY2VcbiAgICB9KSk7XG4gIH1cbn07XG5NZW51W1wiZGlzcGxheU5hbWVcIl0gPSBcIk1lbnVcIjtcblxuZXhwb3J0IHsgTWVudSB9O1xuIiwiaW1wb3J0IHsgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlJztcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KTtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG52YXIgbGlzdFRpbGVDbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtbGlzdC10aWxlXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGNvbnRlbnQ6IFwicGUtbGlzdC10aWxlX19jb250ZW50XCIsXG4gIGhpZ2hTdWJ0aXRsZTogXCJwZS1saXN0LXRpbGVfX2hpZ2gtc3VidGl0bGVcIixcbiAgcHJpbWFyeTogXCJwZS1saXN0LXRpbGVfX3ByaW1hcnlcIixcbiAgc2Vjb25kYXJ5OiBcInBlLWxpc3QtdGlsZV9fc2Vjb25kYXJ5XCIsXG4gIHN1YnRpdGxlOiBcInBlLWxpc3QtdGlsZV9fc3VidGl0bGVcIixcbiAgdGl0bGU6IFwicGUtbGlzdC10aWxlX190aXRsZVwiLFxuICBjb250ZW50RnJvbnQ6IFwicGUtbGlzdC10aWxlX19jb250ZW50LWZyb250XCIsXG4gIC8vIHN0YXRlcyAgXG4gIGNvbXBhY3Q6IFwicGUtbGlzdC10aWxlLS1jb21wYWN0XCIsXG4gIGNvbXBhY3RGcm9udDogXCJwZS1saXN0LXRpbGUtLWNvbXBhY3QtZnJvbnRcIixcbiAgZGlzYWJsZWQ6IFwicGUtbGlzdC10aWxlLS1kaXNhYmxlZFwiLFxuICBoYXNGcm9udDogXCJwZS1saXN0LXRpbGUtLWZyb250XCIsXG4gIGhhc0hpZ2hTdWJ0aXRsZTogXCJwZS1saXN0LXRpbGUtLWhpZ2gtc3VidGl0bGVcIixcbiAgaGFzU3VidGl0bGU6IFwicGUtbGlzdC10aWxlLS1zdWJ0aXRsZVwiLFxuICBoZWFkZXI6IFwicGUtbGlzdC10aWxlLS1oZWFkZXJcIixcbiAgaG92ZXJhYmxlOiBcInBlLWxpc3QtdGlsZS0taG92ZXJhYmxlXCIsXG4gIGluc2V0SDogXCJwZS1saXN0LXRpbGUtLWluc2V0LWhcIixcbiAgaW5zZXRWOiBcInBlLWxpc3QtdGlsZS0taW5zZXQtdlwiLFxuICBzZWxlY3RhYmxlOiBcInBlLWxpc3QtdGlsZS0tc2VsZWN0YWJsZVwiLFxuICBzZWxlY3RlZDogXCJwZS1saXN0LXRpbGUtLXNlbGVjdGVkXCIsXG4gIHJvdW5kZWQ6IFwicGUtbGlzdC10aWxlLS1yb3VuZGVkXCIsXG4gIGhpZ2hsaWdodDogXCJwZS1saXN0LXRpbGUtLWhpZ2hsaWdodFwiLFxuICBzdGlja3k6IFwicGUtbGlzdC10aWxlLS1zdGlja3lcIixcbiAgbmF2aWdhdGlvbjogXCJwZS1saXN0LXRpbGUtLW5hdmlnYXRpb25cIlxufTtcblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1saXN0XCIsXG4gIC8vIHN0YXRlc1xuICBib3JkZXI6IFwicGUtbGlzdC0tYm9yZGVyXCIsXG4gIGNvbXBhY3Q6IFwicGUtbGlzdC0tY29tcGFjdFwiLFxuICBoYXNIZWFkZXI6IFwicGUtbGlzdC0taGVhZGVyXCIsXG4gIGluZGVudGVkQm9yZGVyOiBcInBlLWxpc3QtLWluZGVudGVkLWJvcmRlclwiLFxuICBwYWRkaW5nOiBcInBlLWxpc3QtLXBhZGRpbmdcIixcbiAgcGFkZGluZ1RvcDogXCJwZS1saXN0LS1wYWRkaW5nLXRvcFwiLFxuICBwYWRkaW5nQm90dG9tOiBcInBlLWxpc3QtLXBhZGRpbmctYm90dG9tXCIsXG4gIC8vIGxvb2t1cFxuICBoZWFkZXI6IGxpc3RUaWxlQ2xhc3Nlcy5oZWFkZXJcbn07XG5cbnZhciBwYWRkaW5nQ2xhc3NlcyA9IHtcbiAgYm90aDogY2xhc3Nlcy5wYWRkaW5nLFxuICBib3R0b206IGNsYXNzZXMucGFkZGluZ0JvdHRvbSxcbiAgdG9wOiBjbGFzc2VzLnBhZGRpbmdUb3AsXG4gIG5vbmU6IG51bGxcbn07XG5cbnZhciBwYWRkaW5nQ2xhc3MgPSBmdW5jdGlvbiBwYWRkaW5nQ2xhc3MoKSB7XG4gIHZhciBhdHRyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBcImJvdGhcIjtcbiAgcmV0dXJuIHBhZGRpbmdDbGFzc2VzW2F0dHJdO1xufTtcblxudmFyIF9MaXN0ID0gZnVuY3Rpb24gX0xpc3QoX3JlZikge1xuICB2YXIgaCA9IF9yZWYuaCxcbiAgICAgIGEgPSBfcmVmLmEsXG4gICAgICBMaXN0VGlsZSA9IF9yZWYuTGlzdFRpbGUsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJoXCIsIFwiYVwiLCBcIkxpc3RUaWxlXCJdKTtcblxuICAvLyBSZW1vdmUgdW51c2VkIHByb3BzXG4gIGRlbGV0ZSBwcm9wcy5rZXk7XG5cbiAgdmFyIGNvbXBvbmVudFByb3BzID0gX2V4dGVuZHMoe30sIGZpbHRlclN1cHBvcnRlZEF0dHJpYnV0ZXMocHJvcHMpLCBwcm9wcy50ZXN0SWQgJiYge1xuICAgIFwiZGF0YS10ZXN0LWlkXCI6IHByb3BzLnRlc3RJZFxuICB9LCB7XG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5jb21wb25lbnQsIHByb3BzLmJvcmRlciB8fCBwcm9wcy5ib3JkZXJzID8gY2xhc3Nlcy5ib3JkZXIgOiBudWxsLCBwcm9wcy5pbmRlbnRlZEJvcmRlciB8fCBwcm9wcy5pbmRlbnRlZEJvcmRlcnMgPyBjbGFzc2VzLmluZGVudGVkQm9yZGVyIDogbnVsbCwgcHJvcHMuaGVhZGVyID8gY2xhc3Nlcy5oYXNIZWFkZXIgOiBudWxsLCBwcm9wcy5jb21wYWN0ID8gY2xhc3Nlcy5jb21wYWN0IDogbnVsbCwgcGFkZGluZ0NsYXNzKHByb3BzLnBhZGRpbmcpLCBwcm9wcy50b25lID09PSBcImRhcmtcIiA/IFwicGUtZGFyay10b25lXCIgOiBudWxsLCBwcm9wcy50b25lID09PSBcImxpZ2h0XCIgPyBcInBlLWxpZ2h0LXRvbmVcIiA6IG51bGwsIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wc1thW1wiY2xhc3NcIl1dXS5qb2luKFwiIFwiKVxuICB9KTtcblxuICB2YXIgaGVhZGVyT3B0cztcblxuICBpZiAocHJvcHMuaGVhZGVyKSB7XG4gICAgaGVhZGVyT3B0cyA9IF9leHRlbmRzKHt9LCBwcm9wcy5oZWFkZXIpO1xuICAgIGhlYWRlck9wdHNbYVtcImNsYXNzXCJdXSA9IFtjbGFzc2VzLmhlYWRlciwgaGVhZGVyT3B0c1thW1wiY2xhc3NcIl1dIHx8IG51bGxdLmpvaW4oXCIgXCIpO1xuICB9XG5cbiAgdmFyIHRpbGVzID0gcHJvcHMudGlsZXMgPyBwcm9wcy50aWxlcyA6IHByb3BzLmNvbnRlbnQgPyBwcm9wcy5jb250ZW50IDogcHJvcHMuY2hpbGRyZW47XG4gIHZhciBjb21wb25lbnRDb250ZW50ID0gW2hlYWRlck9wdHMgPyBoKExpc3RUaWxlLCBfb2JqZWN0U3ByZWFkMih7fSwgcHJvcHMuYWxsLCB7fSwgaGVhZGVyT3B0cywge1xuICAgIGhlYWRlcjogdHJ1ZVxuICB9KSkgOiB1bmRlZmluZWRdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocHJvcHMuYWxsID8gdGlsZXMubWFwKGZ1bmN0aW9uICh0aWxlT3B0cykge1xuICAgIHJldHVybiBoKExpc3RUaWxlLCBfb2JqZWN0U3ByZWFkMih7fSwgcHJvcHMuYWxsLCB7fSwgdGlsZU9wdHMpKTtcbiAgfSkgOiB0aWxlcykpO1xuICB2YXIgY29udGVudCA9IFtwcm9wcy5iZWZvcmVdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY29tcG9uZW50Q29udGVudCksIFtwcm9wcy5hZnRlcl0pO1xuICByZXR1cm4gaChwcm9wcy5lbGVtZW50IHx8IFwiZGl2XCIsIGNvbXBvbmVudFByb3BzLCBjb250ZW50KTtcbn07XG5cbmV4cG9ydCB7IF9MaXN0IH07XG4iLCJpbXBvcnQgeyBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzIH0gZnJvbSAncG9seXRoZW5lLWNvcmUnO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLWxpc3QtdGlsZVwiLFxuICAvLyBlbGVtZW50c1xuICBjb250ZW50OiBcInBlLWxpc3QtdGlsZV9fY29udGVudFwiLFxuICBoaWdoU3VidGl0bGU6IFwicGUtbGlzdC10aWxlX19oaWdoLXN1YnRpdGxlXCIsXG4gIHByaW1hcnk6IFwicGUtbGlzdC10aWxlX19wcmltYXJ5XCIsXG4gIHNlY29uZGFyeTogXCJwZS1saXN0LXRpbGVfX3NlY29uZGFyeVwiLFxuICBzdWJ0aXRsZTogXCJwZS1saXN0LXRpbGVfX3N1YnRpdGxlXCIsXG4gIHRpdGxlOiBcInBlLWxpc3QtdGlsZV9fdGl0bGVcIixcbiAgY29udGVudEZyb250OiBcInBlLWxpc3QtdGlsZV9fY29udGVudC1mcm9udFwiLFxuICAvLyBzdGF0ZXMgIFxuICBjb21wYWN0OiBcInBlLWxpc3QtdGlsZS0tY29tcGFjdFwiLFxuICBjb21wYWN0RnJvbnQ6IFwicGUtbGlzdC10aWxlLS1jb21wYWN0LWZyb250XCIsXG4gIGRpc2FibGVkOiBcInBlLWxpc3QtdGlsZS0tZGlzYWJsZWRcIixcbiAgaGFzRnJvbnQ6IFwicGUtbGlzdC10aWxlLS1mcm9udFwiLFxuICBoYXNIaWdoU3VidGl0bGU6IFwicGUtbGlzdC10aWxlLS1oaWdoLXN1YnRpdGxlXCIsXG4gIGhhc1N1YnRpdGxlOiBcInBlLWxpc3QtdGlsZS0tc3VidGl0bGVcIixcbiAgaGVhZGVyOiBcInBlLWxpc3QtdGlsZS0taGVhZGVyXCIsXG4gIGhvdmVyYWJsZTogXCJwZS1saXN0LXRpbGUtLWhvdmVyYWJsZVwiLFxuICBpbnNldEg6IFwicGUtbGlzdC10aWxlLS1pbnNldC1oXCIsXG4gIGluc2V0VjogXCJwZS1saXN0LXRpbGUtLWluc2V0LXZcIixcbiAgc2VsZWN0YWJsZTogXCJwZS1saXN0LXRpbGUtLXNlbGVjdGFibGVcIixcbiAgc2VsZWN0ZWQ6IFwicGUtbGlzdC10aWxlLS1zZWxlY3RlZFwiLFxuICByb3VuZGVkOiBcInBlLWxpc3QtdGlsZS0tcm91bmRlZFwiLFxuICBoaWdobGlnaHQ6IFwicGUtbGlzdC10aWxlLS1oaWdobGlnaHRcIixcbiAgc3RpY2t5OiBcInBlLWxpc3QtdGlsZS0tc3RpY2t5XCIsXG4gIG5hdmlnYXRpb246IFwicGUtbGlzdC10aWxlLS1uYXZpZ2F0aW9uXCJcbn07XG5cbnZhciBfTGlzdFRpbGUgPSBmdW5jdGlvbiBfTGlzdFRpbGUoX3JlZikge1xuICB2YXIgaCA9IF9yZWYuaCxcbiAgICAgIGEgPSBfcmVmLmEsXG4gICAgICBSaXBwbGUgPSBfcmVmLlJpcHBsZSxcbiAgICAgIEljb24gPSBfcmVmLkljb24sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJoXCIsIFwiYVwiLCBcIlJpcHBsZVwiLCBcIkljb25cIl0pO1xuXG4gIC8vIFJlbW92ZSB1bnVzZWQgcHJvcHNcbiAgZGVsZXRlIHByb3BzLmtleTtcbiAgdmFyIGhhc1RhYkluZGV4ID0gIXByb3BzLmhlYWRlciAmJiAhcHJvcHMudXJsICYmICEocHJvcHMuc2Vjb25kYXJ5ICYmIHByb3BzLnNlY29uZGFyeS51cmwpO1xuICB2YXIgaGVpZ2h0Q2xhc3MgPSBwcm9wcy5zdWJ0aXRsZSA/IGNsYXNzZXMuaGFzU3VidGl0bGUgOiBwcm9wcy5oaWdoU3VidGl0bGUgPyBjbGFzc2VzLmhhc0hpZ2hTdWJ0aXRsZSA6IHByb3BzLmZyb250IHx8IHByb3BzLmluZGVudCA/IGNsYXNzZXMuaGFzRnJvbnQgOiBudWxsO1xuXG4gIHZhciBjb21wb25lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzKHByb3BzLCB7XG4gICAgcmVtb3ZlOiBbXCJ0YWJpbmRleFwiLCBcInRhYkluZGV4XCJdXG4gIH0pLCAvLyB0YWJpbmRleCBpcyBzZXQgZWxzZXdoZXJlXG4gIHByb3BzLnRlc3RJZCAmJiB7XG4gICAgXCJkYXRhLXRlc3QtaWRcIjogcHJvcHMudGVzdElkXG4gIH0sIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLmNvbXBvbmVudCwgcHJvcHMuc2VsZWN0ZWQgPyBjbGFzc2VzLnNlbGVjdGVkIDogbnVsbCwgcHJvcHMuZGlzYWJsZWQgPyBjbGFzc2VzLmRpc2FibGVkIDogbnVsbCwgcHJvcHMuc3RpY2t5ID8gY2xhc3Nlcy5zdGlja3kgOiBudWxsLCBwcm9wcy5jb21wYWN0ID8gY2xhc3Nlcy5jb21wYWN0IDogbnVsbCwgcHJvcHMuaG92ZXJhYmxlID8gY2xhc3Nlcy5ob3ZlcmFibGUgOiBudWxsLCBwcm9wcy5zZWxlY3RhYmxlID8gY2xhc3Nlcy5zZWxlY3RhYmxlIDogbnVsbCwgcHJvcHMuaGlnaGxpZ2h0ID8gY2xhc3Nlcy5oaWdobGlnaHQgOiBudWxsLCBwcm9wcy5yb3VuZGVkID8gY2xhc3Nlcy5yb3VuZGVkIDogbnVsbCwgcHJvcHMuaGVhZGVyID8gY2xhc3Nlcy5oZWFkZXIgOiBudWxsLCBwcm9wcy5pbnNldCB8fCBwcm9wcy5pbnNldEggPyBjbGFzc2VzLmluc2V0SCA6IG51bGwsIHByb3BzLmluc2V0IHx8IHByb3BzLmluc2V0ViA/IGNsYXNzZXMuaW5zZXRWIDogbnVsbCwgcHJvcHMubmF2aWdhdGlvbiA/IGNsYXNzZXMubmF2aWdhdGlvbiA6IG51bGwsIHByb3BzLnRvbmUgPT09IFwiZGFya1wiID8gXCJwZS1kYXJrLXRvbmVcIiA6IG51bGwsIHByb3BzLnRvbmUgPT09IFwibGlnaHRcIiA/IFwicGUtbGlnaHQtdG9uZVwiIDogbnVsbCwgaGVpZ2h0Q2xhc3MsIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wc1thW1wiY2xhc3NcIl1dXS5qb2luKFwiIFwiKVxuICB9LCBoYXNUYWJJbmRleCAmJiBfZGVmaW5lUHJvcGVydHkoe30sIGEudGFiaW5kZXgsIHByb3BzW2EudGFiaW5kZXhdIHx8IDApIC8vIGV2ZW50cyBhbmQgdXJsIGFyZSBhdHRhY2hlZCB0byBwcmltYXJ5IGNvbnRlbnQgdG8gbm90IGludGVyZmVyZSB3aXRoIGNvbnRyb2xzXG4gICk7XG5cbiAgdmFyIHByaW1hcnlQcm9wcyA9IHByb3BzO1xuICBkZWxldGUgcHJpbWFyeVByb3BzLmlkO1xuICBkZWxldGUgcHJpbWFyeVByb3BzW2FbXCJjbGFzc1wiXV07XG4gIHZhciBjb21wb25lbnRDb250ZW50ID0gW3Byb3BzLmluayAmJiAhcHJvcHMuZGlzYWJsZWQgPyBoKFJpcHBsZSwgX2V4dGVuZHMoe30sIHByb3BzLnJpcHBsZSkpIDogbnVsbCwgcHJpbWFyeUNvbnRlbnQoe1xuICAgIGg6IGgsXG4gICAgYTogYSxcbiAgICBwcm9wczogcHJpbWFyeVByb3BzXG4gIH0pLCBwcm9wcy5zZWNvbmRhcnkgPyBzZWNvbmRhcnlDb250ZW50KHtcbiAgICBoOiBoLFxuICAgIGE6IGEsXG4gICAgSWNvbjogSWNvbixcbiAgICBwcm9wczogcHJvcHMuc2Vjb25kYXJ5XG4gIH0pIDogbnVsbF07XG4gIHZhciBjb250ZW50ID0gW3Byb3BzLmJlZm9yZV0uY29uY2F0KGNvbXBvbmVudENvbnRlbnQsIFtwcm9wcy5hZnRlcl0pO1xuICByZXR1cm4gaChcImRpdlwiLCAvLyBiZWNhdXNlIHByaW1hcnkgb3Igc2Vjb25kYXJ5IGNvbnRlbnQgY2FuIGJlIGFuIFwiYVwiLCB0aGUgY29udGFpbmVyIGlzIGFsd2F5cyBkZWZpbmVkIGFzIFwiZGl2XCIsIGFuZCBvcHRpb24gYGVsZW1lbnRgIGlzIHBhc3NlZCB0byBwcmltYXJ5IGNvbnRlbnRcbiAgY29tcG9uZW50UHJvcHMsIGNvbnRlbnQpO1xufTtcblxudmFyIHByaW1hcnlDb250ZW50ID0gZnVuY3Rpb24gcHJpbWFyeUNvbnRlbnQoX3JlZjMpIHtcbiAgdmFyIGggPSBfcmVmMy5oLFxuICAgICAgYSA9IF9yZWYzLmEsXG4gICAgICBwcm9wcyA9IF9yZWYzLnByb3BzO1xuICB2YXIgdXJsID0gcHJvcHMua2V5Ym9hcmRDb250cm9sID8gbnVsbCA6IHByb3BzLnVybDtcbiAgdmFyIGVsZW1lbnQgPSBwcm9wcy5lbGVtZW50ID8gcHJvcHMuZWxlbWVudCA6IHVybCA/IFwiYVwiIDogXCJkaXZcIjtcbiAgdmFyIGNvbnRlbnRGcm9udENsYXNzID0gW2NsYXNzZXMuY29udGVudCwgY2xhc3Nlcy5jb250ZW50RnJvbnQsIHByb3BzLmNvbXBhY3RGcm9udCA/IGNsYXNzZXMuY29tcGFjdEZyb250IDogbnVsbF0uam9pbihcIiBcIik7XG4gIHZhciBmcm9udENvbXAgPSBwcm9wcy5mcm9udCB8fCBwcm9wcy5pbmRlbnQgPyBoKFwiZGl2XCIsIF9leHRlbmRzKHt9LCB7XG4gICAgY2xhc3NOYW1lOiBjb250ZW50RnJvbnRDbGFzc1xuICB9KSwgcHJvcHMuZnJvbnQpIDogbnVsbDtcbiAgdmFyIGhhc1RhYkluZGV4ID0gIXByb3BzLmhlYWRlciAmJiBwcm9wcy51cmw7XG5cbiAgdmFyIGVsZW1lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzKHByb3BzKSwgcHJvcHMuZXZlbnRzLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnByaW1hcnksXG4gICAgc3R5bGU6IG51bGxcbiAgfSwgaGFzVGFiSW5kZXggJiYgX2RlZmluZVByb3BlcnR5KHt9LCBhLnRhYmluZGV4LCBwcm9wc1thLnRhYmluZGV4XSB8fCAwKSwgdXJsKTtcblxuICB2YXIgY29udGVudCA9IHByb3BzLmNvbnRlbnQgPyBwcm9wcy5jb250ZW50IDogW2Zyb250Q29tcCwgaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNvbnRlbnQsXG4gICAgc3R5bGU6IHByb3BzLnN0eWxlXG4gIH0sIFtwcm9wcy50aXRsZSAmJiAhcHJvcHMuY29udGVudCA/IGgoXCJkaXZcIiwgX2V4dGVuZHMoe30sIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMudGl0bGVcbiAgfSksIHByb3BzLnRpdGxlKSA6IG51bGwsIHByb3BzLnN1YnRpdGxlID8gaChcImRpdlwiLCBfZXh0ZW5kcyh7fSwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdWJ0aXRsZVxuICB9KSwgcHJvcHMuc3VidGl0bGUpIDogbnVsbCwgcHJvcHMuaGlnaFN1YnRpdGxlID8gaChcImRpdlwiLCBfZXh0ZW5kcyh7fSwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdWJ0aXRsZSArIFwiIFwiICsgY2xhc3Nlcy5oaWdoU3VidGl0bGVcbiAgfSksIHByb3BzLmhpZ2hTdWJ0aXRsZSkgOiBudWxsLCBwcm9wcy5zdWJDb250ZW50ID8gaChcImRpdlwiLCBfZXh0ZW5kcyh7fSwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdWJDb250ZW50XG4gIH0pLCBwcm9wcy5zdWJDb250ZW50KSA6IG51bGwsIHByb3BzLmNoaWxkcmVuXSldO1xuICByZXR1cm4gaChlbGVtZW50LCBlbGVtZW50UHJvcHMsIGNvbnRlbnQpO1xufTtcblxudmFyIHNlY29uZGFyeUNvbnRlbnQgPSBmdW5jdGlvbiBzZWNvbmRhcnlDb250ZW50KF9yZWY1KSB7XG4gIHZhciBoID0gX3JlZjUuaCxcbiAgICAgIGEgPSBfcmVmNS5hLFxuICAgICAgSWNvbiA9IF9yZWY1Lkljb24sXG4gICAgICBfcmVmNSRwcm9wcyA9IF9yZWY1LnByb3BzLFxuICAgICAgcHJvcHMgPSBfcmVmNSRwcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcmVmNSRwcm9wcztcbiAgdmFyIHVybCA9IHByb3BzLmtleWJvYXJkQ29udHJvbCA/IG51bGwgOiBwcm9wcy51cmw7XG4gIHZhciBlbGVtZW50ID0gcHJvcHMuZWxlbWVudCA/IHByb3BzLmVsZW1lbnQgOiB1cmwgPyBcImFcIiA6IFwiZGl2XCI7XG4gIHZhciBoYXNUYWJJbmRleCA9IHByb3BzLnVybDtcbiAgcmV0dXJuIGgoZWxlbWVudCwgX2V4dGVuZHMoe30sIHVybCwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zZWNvbmRhcnlcbiAgfSwgcHJvcHMuZXZlbnRzLCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzKHByb3BzKSwgaGFzVGFiSW5kZXggJiYgX2RlZmluZVByb3BlcnR5KHt9LCBhLnRhYmluZGV4LCBwcm9wc1thLnRhYmluZGV4XSB8fCAwKSksIGgoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5jb250ZW50XG4gIH0sIFtwcm9wcy5pY29uID8gaChJY29uLCBwcm9wcy5pY29uKSA6IG51bGwsIHByb3BzLmNvbnRlbnQgPyBwcm9wcy5jb250ZW50IDogbnVsbF0pKTtcbn07XG5cbmV4cG9ydCB7IF9MaXN0VGlsZSB9O1xuIiwiaW1wb3J0IHsgX0xpc3RUaWxlIH0gZnJvbSAncG9seXRoZW5lLWNvcmUtbGlzdC10aWxlJztcbmltcG9ydCB7IEljb24gfSBmcm9tICdwb2x5dGhlbmUtbWl0aHJpbC1pY29uJztcbmltcG9ydCB7IFJpcHBsZSB9IGZyb20gJ3BvbHl0aGVuZS1taXRocmlsLXJpcHBsZSc7XG5pbXBvcnQgeyBjYXN0LCBoLCBhIH0gZnJvbSAnY3lhbm8tbWl0aHJpbCc7XG5cbnZhciBMaXN0VGlsZSA9IGNhc3QoX0xpc3RUaWxlLCB7XG4gIGg6IGgsXG4gIGE6IGEsXG4gIEljb246IEljb24sXG4gIFJpcHBsZTogUmlwcGxlXG59KTtcbkxpc3RUaWxlW1wiZGlzcGxheU5hbWVcIl0gPSBcIkxpc3RUaWxlXCI7XG5cbmV4cG9ydCB7IExpc3RUaWxlIH07XG4iLCJpbXBvcnQgeyBfTGlzdCB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWxpc3QnO1xuaW1wb3J0IHsgTGlzdFRpbGUgfSBmcm9tICdwb2x5dGhlbmUtbWl0aHJpbC1saXN0LXRpbGUnO1xuaW1wb3J0IHsgY2FzdCwgaCwgYSB9IGZyb20gJ2N5YW5vLW1pdGhyaWwnO1xuXG52YXIgTGlzdCA9IGNhc3QoX0xpc3QsIHtcbiAgaDogaCxcbiAgYTogYSxcbiAgTGlzdFRpbGU6IExpc3RUaWxlXG59KTtcbkxpc3RbXCJkaXNwbGF5TmFtZVwiXSA9IFwiTGlzdFwiO1xuXG5leHBvcnQgeyBMaXN0IH07XG4iLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG5cbiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuXG4gIHZhciBrZXksIGk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtYnV0dG9uIHBlLWljb24tYnV0dG9uXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGNvbnRlbnQ6IFwicGUtaWNvbi1idXR0b25fX2NvbnRlbnRcIixcbiAgbGFiZWw6IFwicGUtaWNvbi1idXR0b25fX2xhYmVsXCIsXG4gIC8vIHN0YXRlc1xuICBjb21wYWN0OiBcInBlLWljb24tYnV0dG9uLS1jb21wYWN0XCJcbn07XG5cbnZhciBfSWNvbkJ1dHRvbiA9IGZ1bmN0aW9uIF9JY29uQnV0dG9uKF9yZWYpIHtcbiAgdmFyIGggPSBfcmVmLmgsXG4gICAgICBJY29uID0gX3JlZi5JY29uLFxuICAgICAgQnV0dG9uID0gX3JlZi5CdXR0b24sXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJoXCIsIFwiSWNvblwiLCBcIkJ1dHRvblwiXSk7XG5cbiAgdmFyIGNvbnRlbnQgPSBwcm9wcy5jb250ZW50ID8gcHJvcHMuY29udGVudCA6IHByb3BzLmljb24gPyBoKEljb24sIHByb3BzLmljb24pIDogcHJvcHMuY2hpbGRyZW47XG5cbiAgdmFyIGJ1dHRvblByb3BzID0gX2V4dGVuZHMoe30sIHtcbiAgICBjb250ZW50OiBoKFwiZGl2XCIsIHtcbiAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5jb250ZW50XG4gICAgfSwgY29udGVudCksXG4gICAgYWZ0ZXI6IHByb3BzLmxhYmVsICYmIGgoXCJkaXZcIiwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsXG4gICAgfSwgcHJvcHMubGFiZWwpLFxuICAgIHBhcmVudENsYXNzTmFtZTogW3Byb3BzLnBhcmVudENsYXNzTmFtZSB8fCBjbGFzc2VzLmNvbXBvbmVudCwgcHJvcHMuY29tcGFjdCA/IGNsYXNzZXMuY29tcGFjdCA6IG51bGxdLmpvaW4oXCIgXCIpLFxuICAgIC8vIGRlZmF1bHRzXG4gICAgd2FzaDogZmFsc2UsXG4gICAgYW5pbWF0ZU9uVGFwOiBmYWxzZVxuICB9LCBwcm9wcyk7XG5cbiAgcmV0dXJuIGgoQnV0dG9uLCBidXR0b25Qcm9wcyk7XG59O1xuXG5leHBvcnQgeyBfSWNvbkJ1dHRvbiB9O1xuIiwiaW1wb3J0IHsgX0ljb25CdXR0b24gfSBmcm9tICdwb2x5dGhlbmUtY29yZS1pY29uLWJ1dHRvbic7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAncG9seXRoZW5lLW1pdGhyaWwtaWNvbic7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICdwb2x5dGhlbmUtbWl0aHJpbC1idXR0b24nO1xuaW1wb3J0IHsgY2FzdCwgaCwgYSB9IGZyb20gJ2N5YW5vLW1pdGhyaWwnO1xuXG52YXIgSWNvbkJ1dHRvbiA9IGNhc3QoX0ljb25CdXR0b24sIHtcbiAgaDogaCxcbiAgYTogYSxcbiAgSWNvbjogSWNvbixcbiAgQnV0dG9uOiBCdXR0b25cbn0pO1xuXG5leHBvcnQgeyBJY29uQnV0dG9uIH07XG4iLCJpbXBvcnQgbSBmcm9tIFwibWl0aHJpbFwiO1xuaW1wb3J0IHsgTGlzdFRpbGUgfSBmcm9tIFwicG9seXRoZW5lLW1pdGhyaWxcIjtcblxuaW50ZXJmYWNlIEZpbGVJbnB1dEF0dHJzIHtcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGV2ZW50cz86IHsgb25jaGFuZ2U/KGU6IEV2ZW50KTogdm9pZDsgb25jYW5jZWw/KGU6IEV2ZW50KTogdm9pZCB9O1xufVxuXG5jb25zdCBGaWxlSW5wdXQ6IG0uQ29tcG9uZW50PEZpbGVJbnB1dEF0dHJzPiA9IHtcbiAgdmlldyh2bm9kZSkge1xuICAgIHJldHVybiBtKExpc3RUaWxlLCB7XG4gICAgICB0aXRsZTogdm5vZGUuYXR0cnMudGl0bGUsXG4gICAgICBldmVudHM6IHtcbiAgICAgICAgb25jbGljazogKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgY29uc3QgdGlsZUVsID0gKGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5jbG9zZXN0KFwiZGl2LnBlLWxpc3QtdGlsZVwiKTtcbiAgICAgICAgICBpZiAodGlsZUVsKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9ICh0aWxlRWwgYXMgSFRNTEVsZW1lbnQpLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgIGlmIChlbCAmJiBlbCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgKGVsIGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNsaWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGJlZm9yZTogbShcImlucHV0LnBlLWhpZGRlblwiLCB7XG4gICAgICAgIHR5cGU6IFwiZmlsZVwiLFxuICAgICAgICBhY2NlcHQ6IFwiLmNpblwiLFxuICAgICAgICBvbmNoYW5nZTogdm5vZGUuYXR0cnMuZXZlbnRzPy5vbmNoYW5nZSA/PyAoKCkgPT4ge30pLFxuICAgICAgICBvbmNhbmNlbDogdm5vZGUuYXR0cnMuZXZlbnRzPy5vbmNhbmNlbCA/PyAoKCkgPT4ge30pLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH0sXG59O1xuXG5leHBvcnQgeyBGaWxlSW5wdXQgfTtcbiIsImltcG9ydCB7IGZpbHRlclN1cHBvcnRlZEF0dHJpYnV0ZXMgfSBmcm9tICdwb2x5dGhlbmUtY29yZSc7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLXRleHRmaWVsZFwiLFxuICAvLyBlbGVtZW50c1xuICBjb3VudGVyOiBcInBlLXRleHRmaWVsZF9fY291bnRlclwiLFxuICBlcnJvcjogXCJwZS10ZXh0ZmllbGRfX2Vycm9yXCIsXG4gIGVycm9yUGxhY2Vob2xkZXI6IFwicGUtdGV4dGZpZWxkX19lcnJvci1wbGFjZWhvbGRlclwiLFxuICBmb2N1c0hlbHA6IFwicGUtdGV4dGZpZWxkX19oZWxwLWZvY3VzXCIsXG4gIGhlbHA6IFwicGUtdGV4dGZpZWxkX19oZWxwXCIsXG4gIGlucHV0OiBcInBlLXRleHRmaWVsZF9faW5wdXRcIixcbiAgaW5wdXRBcmVhOiBcInBlLXRleHRmaWVsZF9faW5wdXQtYXJlYVwiLFxuICBsYWJlbDogXCJwZS10ZXh0ZmllbGRfX2xhYmVsXCIsXG4gIG9wdGlvbmFsSW5kaWNhdG9yOiBcInBlLXRleHRmaWVsZF9fb3B0aW9uYWwtaW5kaWNhdG9yXCIsXG4gIHJlcXVpcmVkSW5kaWNhdG9yOiBcInBlLXRleHRmaWVsZF9fcmVxdWlyZWQtaW5kaWNhdG9yXCIsXG4gIC8vIHN0YXRlc1xuICBoYXNDb3VudGVyOiBcInBlLXRleHRmaWVsZC0tY291bnRlclwiLFxuICBoYXNGbG9hdGluZ0xhYmVsOiBcInBlLXRleHRmaWVsZC0tZmxvYXRpbmctbGFiZWxcIixcbiAgaGFzRnVsbFdpZHRoOiBcInBlLXRleHRmaWVsZC0tZnVsbC13aWR0aFwiLFxuICBoaWRlQ2xlYXI6IFwicGUtdGV4dGZpZWxkLS1oaWRlLWNsZWFyXCIsXG4gIGhpZGVTcGlubmVyOiBcInBlLXRleHRmaWVsZC0taGlkZS1zcGlubmVyXCIsXG4gIGhpZGVWYWxpZGF0aW9uOiBcInBlLXRleHRmaWVsZC0taGlkZS12YWxpZGF0aW9uXCIsXG4gIGlzRGVuc2U6IFwicGUtdGV4dGZpZWxkLS1kZW5zZVwiLFxuICBpc1JlcXVpcmVkOiBcInBlLXRleHRmaWVsZC0tcmVxdWlyZWRcIixcbiAgc3RhdGVEaXJ0eTogXCJwZS10ZXh0ZmllbGQtLWRpcnR5XCIsXG4gIHN0YXRlRGlzYWJsZWQ6IFwicGUtdGV4dGZpZWxkLS1kaXNhYmxlZFwiLFxuICBzdGF0ZUZvY3VzZWQ6IFwicGUtdGV4dGZpZWxkLS1mb2N1c2VkXCIsXG4gIHN0YXRlSW52YWxpZDogXCJwZS10ZXh0ZmllbGQtLWludmFsaWRcIixcbiAgc3RhdGVSZWFkb25seTogXCJwZS10ZXh0ZmllbGQtLXJlYWRvbmx5XCJcbn07XG5cbnZhciBERUZBVUxUX1ZBTElEX1NUQVRFID0ge1xuICBpbnZhbGlkOiBmYWxzZSxcbiAgbWVzc2FnZTogdW5kZWZpbmVkXG59O1xuXG52YXIgaWdub3JlRXZlbnQgPSBmdW5jdGlvbiBpZ25vcmVFdmVudChwcm9wcywgbmFtZSkge1xuICByZXR1cm4gcHJvcHMuaWdub3JlRXZlbnRzICYmIHByb3BzLmlnbm9yZUV2ZW50cy5pbmRleE9mKG5hbWUpICE9PSAtMTtcbn07XG5cbnZhciBfVGV4dEZpZWxkID0gZnVuY3Rpb24gX1RleHRGaWVsZChfcmVmKSB7XG4gIHZhciBoID0gX3JlZi5oLFxuICAgICAgYSA9IF9yZWYuYSxcbiAgICAgIHVzZVN0YXRlID0gX3JlZi51c2VTdGF0ZSxcbiAgICAgIHVzZUVmZmVjdCA9IF9yZWYudXNlRWZmZWN0LFxuICAgICAgdXNlUmVmID0gX3JlZi51c2VSZWYsXG4gICAgICBnZXRSZWYgPSBfcmVmLmdldFJlZixcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImhcIiwgXCJhXCIsIFwidXNlU3RhdGVcIiwgXCJ1c2VFZmZlY3RcIiwgXCJ1c2VSZWZcIiwgXCJnZXRSZWZcIl0pO1xuXG4gIHZhciBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IG51bGwgPyBwcm9wcy5kZWZhdWx0VmFsdWUudG9TdHJpbmcoKSA6IHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMudmFsdWUgIT09IG51bGwgPyBwcm9wcy52YWx1ZS50b1N0cmluZygpIDogXCJcIjtcblxuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoKSxcbiAgICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgICAgZG9tRWxlbWVudCA9IF91c2VTdGF0ZTJbMF0sXG4gICAgICBzZXREb21FbGVtZW50ID0gX3VzZVN0YXRlMlsxXTtcblxuICB2YXIgX3VzZVN0YXRlMyA9IHVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSxcbiAgICAgIGlzSW52YWxpZCA9IF91c2VTdGF0ZTRbMF0sXG4gICAgICBzZXRJc0ludmFsaWQgPSBfdXNlU3RhdGU0WzFdO1xuXG4gIHZhciBfdXNlU3RhdGU1ID0gdXNlU3RhdGUoZGVmYXVsdFZhbHVlKSxcbiAgICAgIF91c2VTdGF0ZTYgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGU1LCAyKSxcbiAgICAgIHZhbHVlID0gX3VzZVN0YXRlNlswXSxcbiAgICAgIHNldFZhbHVlID0gX3VzZVN0YXRlNlsxXTtcblxuICB2YXIgaW5wdXRFbFJlZiA9IHVzZVJlZigpO1xuICB2YXIgcHJldmlvdXNWYWx1ZVJlZiA9IHVzZVJlZigpO1xuICB2YXIgcHJldmlvdXNTdGF0dXNSZWYgPSB1c2VSZWYoKTtcbiAgdmFyIGlzRGlydHlSZWYgPSB1c2VSZWYoKTtcbiAgdmFyIGhhc0ZvY3VzUmVmID0gdXNlUmVmKCk7XG4gIHZhciBpc1RvdWNoZWRSZWYgPSB1c2VSZWYoKTtcbiAgdmFyIGVycm9yUmVmID0gdXNlUmVmKCk7XG4gIHZhciBpbnB1dFR5cGUgPSBwcm9wcy5tdWx0aUxpbmUgPyBcInRleHRhcmVhXCIgOiBcImlucHV0XCI7XG4gIHZhciBzaG93RXJyb3JQbGFjZWhvbGRlciA9ICEhKHByb3BzLnZhbGlkICE9PSB1bmRlZmluZWQgfHwgcHJvcHMudmFsaWRhdGUgfHwgcHJvcHMubWluIHx8IHByb3BzLm1heCB8fCBwcm9wc1thLm1pbmxlbmd0aF0gfHwgcHJvcHNbYS5tYXhsZW5ndGhdIHx8IHByb3BzLnJlcXVpcmVkIHx8IHByb3BzLnBhdHRlcm4pO1xuXG4gIHZhciBoYW5kbGVTdGF0ZVVwZGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVN0YXRlVXBkYXRlKCkge1xuICAgIHZhciBfcmVmMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgIHR5cGUgPSBfcmVmMi50eXBlLFxuICAgICAgICBmb2N1cyA9IF9yZWYyLmZvY3VzLFxuICAgICAgICB2YWx1ZSA9IF9yZWYyLnZhbHVlO1xuXG4gICAgaWYgKCFpbnB1dEVsUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaW5wdXRFbFJlZi5jdXJyZW50LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGZvY3VzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGhhc0ZvY3VzUmVmLmN1cnJlbnQgPSBmb2N1cztcblxuICAgICAgaWYgKGZvY3VzKSB7XG4gICAgICAgIGlucHV0RWxSZWYuY3VycmVudC5mb2N1cygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5wdXRFbFJlZi5jdXJyZW50LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gXCJpbnB1dFwiICYmIChwcm9wcy52YWxpZGF0ZU9uSW5wdXQgfHwgcHJvcHMuY291bnRlcikpIHtcbiAgICAgIGlzVG91Y2hlZFJlZi5jdXJyZW50ID0gaW5wdXRFbFJlZi5jdXJyZW50LnZhbHVlICE9PSBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgIT09IFwiaW5wdXRcIikge1xuICAgICAgaXNUb3VjaGVkUmVmLmN1cnJlbnQgPSBpbnB1dEVsUmVmLmN1cnJlbnQudmFsdWUgIT09IGRlZmF1bHRWYWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gXCJvbmJsdXJcIikge1xuICAgICAgaXNUb3VjaGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlzRGlydHlSZWYuY3VycmVudCA9IGlucHV0RWxSZWYuY3VycmVudC52YWx1ZSAhPT0gXCJcIjtcbiAgICBjaGVja1ZhbGlkaXR5KCk7XG4gICAgbm90aWZ5U3RhdGUoKTtcblxuICAgIGlmIChwcmV2aW91c1ZhbHVlUmVmLmN1cnJlbnQgIT09IGlucHV0RWxSZWYuY3VycmVudC52YWx1ZSkge1xuICAgICAgc2V0VmFsdWUoaW5wdXRFbFJlZi5jdXJyZW50LnZhbHVlKTsgLy8gZm9yY2UgdXBkYXRlXG4gICAgfVxuICB9O1xuXG4gIHZhciB2YWxpZGF0ZUN1c3RvbSA9IGZ1bmN0aW9uIHZhbGlkYXRlQ3VzdG9tKCkge1xuICAgIGlmICghaW5wdXRFbFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm4gREVGQVVMVF9WQUxJRF9TVEFURTtcbiAgICB9XG5cbiAgICB2YXIgdmFsaWRTdGF0ZSA9IHByb3BzLnZhbGlkYXRlKGlucHV0RWxSZWYuY3VycmVudC52YWx1ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGludmFsaWQ6IHZhbGlkU3RhdGUgJiYgIXZhbGlkU3RhdGUudmFsaWQsXG4gICAgICBtZXNzYWdlOiB2YWxpZFN0YXRlICYmIHZhbGlkU3RhdGUuZXJyb3JcbiAgICB9O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZUNvdW50ZXIgPSBmdW5jdGlvbiB2YWxpZGF0ZUNvdW50ZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGludmFsaWQ6IGlucHV0RWxSZWYuY3VycmVudC52YWx1ZS5sZW5ndGggPiBwcm9wcy5jb3VudGVyLFxuICAgICAgbWVzc2FnZTogcHJvcHMuZXJyb3JcbiAgICB9O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZUhUTUwgPSBmdW5jdGlvbiB2YWxpZGF0ZUhUTUwoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGludmFsaWQ6ICFpbnB1dEVsUmVmLmN1cnJlbnQuY2hlY2tWYWxpZGl0eSgpLFxuICAgICAgbWVzc2FnZTogcHJvcHMuZXJyb3JcbiAgICB9O1xuICB9O1xuXG4gIHZhciBnZXRWYWxpZFN0YXR1cyA9IGZ1bmN0aW9uIGdldFZhbGlkU3RhdHVzKCkge1xuICAgIHZhciBzdGF0dXMgPSBERUZBVUxUX1ZBTElEX1NUQVRFOyAvLyBwcm9wcy52YWxpZGF0ZVJlc2V0T25DbGVhcjogcmVzZXQgdmFsaWRhdGlvbiB3aGVuIGZpZWxkIGlzIGNsZWFyZWRcblxuICAgIGlmIChpc1RvdWNoZWRSZWYuY3VycmVudCAmJiBpc0ludmFsaWQgJiYgaW5wdXRFbFJlZi5jdXJyZW50LnZhbHVlLmxlbmd0aCA9PT0gMCAmJiBwcm9wcy52YWxpZGF0ZVJlc2V0T25DbGVhcikge1xuICAgICAgaXNUb3VjaGVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHNldElzSW52YWxpZChmYWxzZSk7XG4gICAgICBlcnJvclJlZi5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChwcm9wcy5jb3VudGVyKSB7XG4gICAgICBzdGF0dXMgPSB2YWxpZGF0ZUNvdW50ZXIoKTtcbiAgICB9XG5cbiAgICBpZiAoIXN0YXR1cy5pbnZhbGlkICYmIGlucHV0RWxSZWYuY3VycmVudC5jaGVja1ZhbGlkaXR5KSB7XG4gICAgICBzdGF0dXMgPSB2YWxpZGF0ZUhUTUwoKTtcbiAgICB9XG5cbiAgICBpZiAoIXN0YXR1cy5pbnZhbGlkICYmIHByb3BzLnZhbGlkYXRlKSB7XG4gICAgICBzdGF0dXMgPSB2YWxpZGF0ZUN1c3RvbSgpO1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0dXM7XG4gIH07XG5cbiAgdmFyIGNoZWNrVmFsaWRpdHkgPSBmdW5jdGlvbiBjaGVja1ZhbGlkaXR5KCkge1xuICAgIC8vIGRlZmF1bHRcbiAgICB2YXIgc3RhdHVzID0gcHJvcHMudmFsaWQgIT09IHVuZGVmaW5lZCA/IHtcbiAgICAgIGludmFsaWQ6ICFwcm9wcy52YWxpZCxcbiAgICAgIG1lc3NhZ2U6IHByb3BzLmVycm9yXG4gICAgfSA6ICFpc1RvdWNoZWRSZWYuY3VycmVudCAmJiAhcHJvcHMudmFsaWRhdGVBdFN0YXJ0ID8gREVGQVVMVF9WQUxJRF9TVEFURSA6IGdldFZhbGlkU3RhdHVzKCk7XG4gICAgdmFyIHByZXZpb3VzSW52YWxpZCA9IGlzSW52YWxpZDtcbiAgICBlcnJvclJlZi5jdXJyZW50ID0gc3RhdHVzLm1lc3NhZ2U7XG5cbiAgICBpZiAoc3RhdHVzLmludmFsaWQgIT09IHByZXZpb3VzSW52YWxpZCkge1xuICAgICAgc2V0SXNJbnZhbGlkKHN0YXR1cy5pbnZhbGlkKTtcbiAgICB9XG5cbiAgICBpZiAoIXN0YXR1cy5pbnZhbGlkKSB7XG4gICAgICBlcnJvclJlZi5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbm90aWZ5U3RhdGUgPSBmdW5jdGlvbiBub3RpZnlTdGF0ZSgpIHtcbiAgICBpZiAocHJvcHMub25DaGFuZ2UpIHtcbiAgICAgIHZhciB2YWxpZFN0YXR1cyA9IGdldFZhbGlkU3RhdHVzKCk7XG4gICAgICB2YXIgc3RhdHVzID0ge1xuICAgICAgICBmb2N1czogaGFzRm9jdXNSZWYuY3VycmVudCxcbiAgICAgICAgZGlydHk6IGlzRGlydHlSZWYuY3VycmVudCxcbiAgICAgICAgaW52YWxpZDogdmFsaWRTdGF0dXMuaW52YWxpZCxcbiAgICAgICAgZXJyb3I6IHZhbGlkU3RhdHVzLmVycm9yLFxuICAgICAgICB2YWx1ZTogaW5wdXRFbFJlZi5jdXJyZW50LnZhbHVlXG4gICAgICB9O1xuXG4gICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoc3RhdHVzKSAhPT0gSlNPTi5zdHJpbmdpZnkocHJldmlvdXNTdGF0dXNSZWYuY3VycmVudCkpIHtcbiAgICAgICAgcHJvcHMub25DaGFuZ2UoX29iamVjdFNwcmVhZDIoe30sIHN0YXR1cywge1xuICAgICAgICAgIGVsOiBpbnB1dEVsUmVmLmN1cnJlbnQsXG4gICAgICAgICAgc2V0SW5wdXRTdGF0ZTogZnVuY3Rpb24gc2V0SW5wdXRTdGF0ZShuZXdTdGF0ZSkge1xuICAgICAgICAgICAgdmFyIGhhc05ld1ZhbHVlID0gbmV3U3RhdGUudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBuZXdTdGF0ZS52YWx1ZSAhPT0gaW5wdXRFbFJlZi5jdXJyZW50LnZhbHVlO1xuICAgICAgICAgICAgdmFyIGhhc05ld0ZvY3VzID0gbmV3U3RhdGUuZm9jdXMgIT09IHVuZGVmaW5lZCAmJiBuZXdTdGF0ZS5mb2N1cyAhPT0gaGFzRm9jdXNSZWYuY3VycmVudDtcblxuICAgICAgICAgICAgaWYgKGhhc05ld1ZhbHVlIHx8IGhhc05ld0ZvY3VzKSB7XG4gICAgICAgICAgICAgIGhhbmRsZVN0YXRlVXBkYXRlKG5ld1N0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgcHJldmlvdXNTdGF0dXNSZWYuY3VycmVudCA9IHN0YXR1cztcbiAgICAgIH1cbiAgICB9XG4gIH07IC8vIFN0YXRlIHJlZnNcblxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaXNEaXJ0eVJlZi5jdXJyZW50ID0gZGVmYXVsdFZhbHVlICE9PSBcIlwiO1xuICAgIGhhc0ZvY3VzUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICBpc1RvdWNoZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIGVycm9yUmVmLmN1cnJlbnQgPSBwcm9wcy5lcnJvcjtcbiAgfSwgW10pOyAvLyBJbnB1dCBET00gZWxlbWVudFxuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkb21FbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW5wdXRFbFJlZi5jdXJyZW50ID0gZG9tRWxlbWVudC5xdWVyeVNlbGVjdG9yKGlucHV0VHlwZSk7XG4gICAgaW5wdXRFbFJlZi5jdXJyZW50LnZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgIGhhbmRsZVN0YXRlVXBkYXRlKCk7XG4gICAgY2hlY2tWYWxpZGl0eSgpOyAvLyBoYW5kbGUgYHZhbGlkYXRlQXRTdGFydGBcblxuICAgIG5vdGlmeVN0YXRlKCk7XG4gIH0sIFtkb21FbGVtZW50XSk7IC8vIEhhbmRsZSB2YWx1ZSB1cGRhdGVzXG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWlucHV0RWxSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMudmFsdWUgIT09IG51bGwgPyBwcm9wcy52YWx1ZSA6IGlucHV0RWxSZWYuY3VycmVudCA/IGlucHV0RWxSZWYuY3VycmVudC52YWx1ZSA6IHByZXZpb3VzVmFsdWVSZWYuY3VycmVudDtcbiAgICB2YXIgdmFsdWVTdHIgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsID8gXCJcIiA6IHZhbHVlLnRvU3RyaW5nKCk7XG5cbiAgICBpZiAoaW5wdXRFbFJlZi5jdXJyZW50ICYmIHByZXZpb3VzVmFsdWVSZWYuY3VycmVudCAhPT0gdmFsdWVTdHIpIHtcbiAgICAgIGlucHV0RWxSZWYuY3VycmVudC52YWx1ZSA9IHZhbHVlU3RyO1xuICAgICAgcHJldmlvdXNWYWx1ZVJlZi5jdXJyZW50ID0gdmFsdWVTdHI7XG4gICAgICBoYW5kbGVTdGF0ZVVwZGF0ZSh7XG4gICAgICAgIHR5cGU6IFwiaW5wdXRcIlxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbaW5wdXRFbFJlZi5jdXJyZW50LCBwcm9wcy52YWx1ZV0pOyAvLyBIYW5kbGUgZXJyb3Igc3RhdGUgdXBkYXRlc1xuXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpbnB1dEVsUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjaGVja1ZhbGlkaXR5KCk7XG4gICAgbm90aWZ5U3RhdGUoKTtcbiAgfSwgW3Byb3BzLCBpbnB1dEVsUmVmLmN1cnJlbnQgJiYgaW5wdXRFbFJlZi5jdXJyZW50LnZhbHVlXSk7XG5cbiAgdmFyIGNvbXBvbmVudFByb3BzID0gX2V4dGVuZHMoe30sIGZpbHRlclN1cHBvcnRlZEF0dHJpYnV0ZXMocHJvcHMpLCBwcm9wcy50ZXN0SWQgJiYge1xuICAgIFwiZGF0YS10ZXN0LWlkXCI6IHByb3BzLnRlc3RJZFxuICB9LCBnZXRSZWYoZnVuY3Rpb24gKGRvbSkge1xuICAgIHJldHVybiBkb20gJiYgIWRvbUVsZW1lbnQgJiYgKHNldERvbUVsZW1lbnQoZG9tKSwgcHJvcHMucmVmICYmIHByb3BzLnJlZihkb20pKTtcbiAgfSksIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLmNvbXBvbmVudCwgaXNJbnZhbGlkID8gY2xhc3Nlcy5zdGF0ZUludmFsaWQgOiBcIlwiLCBoYXNGb2N1c1JlZi5jdXJyZW50ID8gY2xhc3Nlcy5zdGF0ZUZvY3VzZWQgOiBcIlwiLCBpc0RpcnR5UmVmLmN1cnJlbnQgPyBjbGFzc2VzLnN0YXRlRGlydHkgOiBcIlwiLCBwcm9wcy5mbG9hdGluZ0xhYmVsID8gY2xhc3Nlcy5oYXNGbG9hdGluZ0xhYmVsIDogXCJcIiwgcHJvcHMuZGlzYWJsZWQgPyBjbGFzc2VzLnN0YXRlRGlzYWJsZWQgOiBcIlwiLCBwcm9wcy5yZWFkb25seSA/IGNsYXNzZXMuc3RhdGVSZWFkb25seSA6IFwiXCIsIHByb3BzLmRlbnNlID8gY2xhc3Nlcy5pc0RlbnNlIDogXCJcIiwgcHJvcHMucmVxdWlyZWQgPyBjbGFzc2VzLmlzUmVxdWlyZWQgOiBcIlwiLCBwcm9wcy5mdWxsV2lkdGggPyBjbGFzc2VzLmhhc0Z1bGxXaWR0aCA6IFwiXCIsIHByb3BzLmNvdW50ZXIgPyBjbGFzc2VzLmhhc0NvdW50ZXIgOiBcIlwiLCBwcm9wcy5oaWRlU3Bpbm5lciAhPT0gZmFsc2UgJiYgcHJvcHMuaGlkZVNwaW5uZXIgIT09IHVuZGVmaW5lZCA/IGNsYXNzZXMuaGlkZVNwaW5uZXIgOiBcIlwiLCBwcm9wcy5oaWRlQ2xlYXIgIT09IGZhbHNlICYmIHByb3BzLmhpZGVDbGVhciAhPT0gdW5kZWZpbmVkID8gY2xhc3Nlcy5oaWRlQ2xlYXIgOiBcIlwiLCBwcm9wcy5oaWRlVmFsaWRhdGlvbiA/IGNsYXNzZXMuaGlkZVZhbGlkYXRpb24gOiBcIlwiLCBwcm9wcy50b25lID09PSBcImRhcmtcIiA/IFwicGUtZGFyay10b25lXCIgOiBudWxsLCBwcm9wcy50b25lID09PSBcImxpZ2h0XCIgPyBcInBlLWxpZ2h0LXRvbmVcIiA6IG51bGwsIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wc1thW1wiY2xhc3NcIl1dXS5qb2luKFwiIFwiKVxuICB9KTtcblxuICB2YXIgYWxsUHJvcHMgPSBfb2JqZWN0U3ByZWFkMih7fSwgcHJvcHMsIHt9LCBwcm9wcy5kb21BdHRyaWJ1dGVzKTtcblxuICB2YXIgZXJyb3JNZXNzYWdlID0gcHJvcHMuZXJyb3IgfHwgZXJyb3JSZWYuY3VycmVudDtcbiAgdmFyIHR5cGUgPSBhbGxQcm9wcy5tdWx0aUxpbmUgPyBudWxsIDogIWFsbFByb3BzLnR5cGUgfHwgYWxsUHJvcHMudHlwZSA9PT0gXCJzdWJtaXRcIiB8fCBhbGxQcm9wcy50eXBlID09PSBcInNlYXJjaFwiID8gXCJ0ZXh0XCIgOiBhbGxQcm9wcy50eXBlO1xuICB2YXIgc2hvd0Vycm9yID0gaXNJbnZhbGlkICYmIGVycm9yTWVzc2FnZSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgaW5hY3RpdmUgPSBhbGxQcm9wcy5kaXNhYmxlZCB8fCBhbGxQcm9wc1thLnJlYWRvbmx5XTtcbiAgdmFyIHJlcXVpcmVkSW5kaWNhdG9yID0gYWxsUHJvcHMucmVxdWlyZWQgJiYgYWxsUHJvcHMucmVxdWlyZWRJbmRpY2F0b3IgIT09IFwiXCIgPyBoKFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLnJlcXVpcmVkSW5kaWNhdG9yXG4gIH0sIGFsbFByb3BzLnJlcXVpcmVkSW5kaWNhdG9yIHx8IFwiKlwiKSA6IG51bGw7XG4gIHZhciBvcHRpb25hbEluZGljYXRvciA9ICFhbGxQcm9wcy5yZXF1aXJlZCAmJiBhbGxQcm9wcy5vcHRpb25hbEluZGljYXRvciA/IGgoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMub3B0aW9uYWxJbmRpY2F0b3JcbiAgfSwgYWxsUHJvcHMub3B0aW9uYWxJbmRpY2F0b3IpIDogbnVsbDtcbiAgdmFyIGxhYmVsID0gYWxsUHJvcHMubGFiZWwgPyBbYWxsUHJvcHMubGFiZWwsIHJlcXVpcmVkSW5kaWNhdG9yLCBvcHRpb25hbEluZGljYXRvcl0gOiBudWxsO1xuICB2YXIgZXZlbnRzID0gYWxsUHJvcHMuZXZlbnRzIHx8IHt9O1xuICB2YXIgY29tcG9uZW50Q29udGVudCA9IFtoKFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuaW5wdXRBcmVhXG4gIH0sIFtsYWJlbCA/IGgoXCJsYWJlbFwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmxhYmVsXG4gIH0sIGxhYmVsKSA6IG51bGwsIGgoaW5wdXRUeXBlLCBfZXh0ZW5kcyh7fSwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5pbnB1dCxcbiAgICBkaXNhYmxlZDogYWxsUHJvcHMuZGlzYWJsZWRcbiAgfSwgdHlwZSA/IHtcbiAgICB0eXBlOiB0eXBlXG4gIH0gOiBudWxsLCBhbGxQcm9wcy5uYW1lID8ge1xuICAgIG5hbWU6IGFsbFByb3BzLm5hbWVcbiAgfSA6IG51bGwsIGV2ZW50cywgIWlnbm9yZUV2ZW50KGFsbFByb3BzLCBhLm9uY2xpY2spID8gX2RlZmluZVByb3BlcnR5KHt9LCBhLm9uY2xpY2ssIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGluYWN0aXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBpbiBjYXNlIHRoZSBicm93c2VyIGRvZXMgbm90IGdpdmUgdGhlIGZpZWxkIGZvY3VzLFxuICAgIC8vIGZvciBpbnN0YW5jZSB3aGVuIHRoZSB1c2VyIHRhcHBlZCB0byB0aGUgY3VycmVudCBmaWVsZCBvZmYgc2NyZWVuXG5cblxuICAgIGhhbmRsZVN0YXRlVXBkYXRlKHtcbiAgICAgIGZvY3VzOiB0cnVlXG4gICAgfSk7XG4gICAgZXZlbnRzW2Eub25jbGlja10gJiYgZXZlbnRzW2Eub25jbGlja10oZSk7XG4gIH0pIDogbnVsbCwgIWlnbm9yZUV2ZW50KGFsbFByb3BzLCBhLm9uZm9jdXMpID8gX2RlZmluZVByb3BlcnR5KHt9LCBhLm9uZm9jdXMsIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGluYWN0aXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaGFuZGxlU3RhdGVVcGRhdGUoe1xuICAgICAgZm9jdXM6IHRydWVcbiAgICB9KTsgLy8gc2V0IENTUyBjbGFzcyBtYW51YWxseSBpbiBjYXNlIGZpZWxkIGdldHMgZm9jdXMgYnV0IGlzIG9mZiBzY3JlZW5cbiAgICAvLyBhbmQgbm8gcmVkcmF3IGlzIHRyaWdnZXJlZFxuICAgIC8vIGF0IHRoZSBuZXh0IHJlZHJhdyBgaGFzRm9jdXNSZWYuY3VycmVudGAgd2lsbCBiZSByZWFkIGFuZCB0aGUgZm9jdXMgY2xhc3MgYmUgc2V0XG4gICAgLy8gaW4gdGhlIHByb3BzLmNsYXNzIHN0YXRlbWVudFxuXG4gICAgaWYgKGRvbUVsZW1lbnQpIHtcbiAgICAgIGRvbUVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc2VzLnN0YXRlRm9jdXNlZCk7XG4gICAgfVxuXG4gICAgZXZlbnRzW2Eub25mb2N1c10gJiYgZXZlbnRzW2Eub25mb2N1c10oZSk7XG4gIH0pIDogbnVsbCwgIWlnbm9yZUV2ZW50KGFsbFByb3BzLCBhLm9uYmx1cikgPyBfZGVmaW5lUHJvcGVydHkoe30sIGEub25ibHVyLCBmdW5jdGlvbiAoZSkge1xuICAgIGhhbmRsZVN0YXRlVXBkYXRlKHtcbiAgICAgIHR5cGU6IFwib25ibHVyXCIsXG4gICAgICBmb2N1czogZmFsc2VcbiAgICB9KTsgLy8gc2FtZSBwcmluY2lwbGUgYXMgb25mb2N1c1xuXG4gICAgZG9tRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXMuc3RhdGVGb2N1c2VkKTtcbiAgICBldmVudHNbYS5vbmJsdXJdICYmIGV2ZW50c1thLm9uYmx1cl0oZSk7XG4gIH0pIDogbnVsbCwgIWlnbm9yZUV2ZW50KGFsbFByb3BzLCBhLm9uaW5wdXQpID8gX2RlZmluZVByb3BlcnR5KHt9LCBhLm9uaW5wdXQsIGZ1bmN0aW9uIChlKSB7XG4gICAgLy8gZGVmYXVsdCBpbnB1dCBldmVudFxuICAgIC8vIG1heSBiZSBvdmVyd3JpdHRlbiBieSBwcm9wcy5ldmVudHNcbiAgICBoYW5kbGVTdGF0ZVVwZGF0ZSh7XG4gICAgICB0eXBlOiBcImlucHV0XCJcbiAgICB9KTtcbiAgICBldmVudHNbYS5vbmlucHV0XSAmJiBldmVudHNbYS5vbmlucHV0XShlKTtcbiAgfSkgOiBudWxsLCAhaWdub3JlRXZlbnQoYWxsUHJvcHMsIGEub25rZXlkb3duKSA/IF9kZWZpbmVQcm9wZXJ0eSh7fSwgYS5vbmtleWRvd24sIGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgIGlzVG91Y2hlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGUua2V5ID09PSBcIkVzY2FwZVwiIHx8IGUua2V5ID09PSBcIkVzY1wiKSB7XG4gICAgICBoYW5kbGVTdGF0ZVVwZGF0ZSh7XG4gICAgICAgIGZvY3VzOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZXZlbnRzW2Eub25rZXlkb3duXSAmJiBldmVudHNbYS5vbmtleWRvd25dKGUpO1xuICB9KSA6IG51bGwsIGFsbFByb3BzLnJlcXVpcmVkICE9PSB1bmRlZmluZWQgJiYgISFhbGxQcm9wcy5yZXF1aXJlZCA/IHtcbiAgICByZXF1aXJlZDogdHJ1ZVxuICB9IDogbnVsbCwgYWxsUHJvcHNbYS5yZWFkb25seV0gIT09IHVuZGVmaW5lZCAmJiAhIWFsbFByb3BzW2EucmVhZG9ubHldID8gX2RlZmluZVByb3BlcnR5KHt9LCBhLnJlYWRvbmx5LCB0cnVlKSA6IG51bGwsIGFsbFByb3BzLnBhdHRlcm4gIT09IHVuZGVmaW5lZCA/IHtcbiAgICBwYXR0ZXJuOiBhbGxQcm9wcy5wYXR0ZXJuXG4gIH0gOiBudWxsLCBhbGxQcm9wc1thLm1heGxlbmd0aF0gIT09IHVuZGVmaW5lZCA/IF9kZWZpbmVQcm9wZXJ0eSh7fSwgYS5tYXhsZW5ndGgsIGFsbFByb3BzW2EubWF4bGVuZ3RoXSkgOiBudWxsLCBhbGxQcm9wc1thLm1pbmxlbmd0aF0gIT09IHVuZGVmaW5lZCA/IF9kZWZpbmVQcm9wZXJ0eSh7fSwgYS5taW5sZW5ndGgsIGFsbFByb3BzW2EubWlubGVuZ3RoXSkgOiBudWxsLCBhbGxQcm9wcy5tYXggIT09IHVuZGVmaW5lZCA/IHtcbiAgICBtYXg6IGFsbFByb3BzLm1heFxuICB9IDogbnVsbCwgYWxsUHJvcHMubWluICE9PSB1bmRlZmluZWQgPyB7XG4gICAgbWluOiBhbGxQcm9wcy5taW5cbiAgfSA6IG51bGwsIGFsbFByb3BzW2EuYXV0b2ZvY3VzXSAhPT0gdW5kZWZpbmVkID8gX2RlZmluZVByb3BlcnR5KHt9LCBhLmF1dG9mb2N1cywgYWxsUHJvcHNbYS5hdXRvZm9jdXNdKSA6IG51bGwsIGFsbFByb3BzW2EudGFiaW5kZXhdICE9PSB1bmRlZmluZWQgPyBfZGVmaW5lUHJvcGVydHkoe30sIGEudGFiaW5kZXgsIGFsbFByb3BzW2EudGFiaW5kZXhdKSA6IG51bGwsIGFsbFByb3BzLnJvd3MgIT09IHVuZGVmaW5lZCA/IHtcbiAgICByb3dzOiBhbGxQcm9wcy5yb3dzXG4gIH0gOiBudWxsLCBhbGxQcm9wcy5wbGFjZWhvbGRlciAhPT0gdW5kZWZpbmVkID8ge1xuICAgIHBsYWNlaG9sZGVyOiBhbGxQcm9wcy5wbGFjZWhvbGRlclxuICB9IDogbnVsbCwgYWxsUHJvcHMuZG9tQXR0cmlidXRlcyAhPT0gdW5kZWZpbmVkID8gX29iamVjdFNwcmVhZDIoe30sIGFsbFByb3BzLmRvbUF0dHJpYnV0ZXMpIDogbnVsbCkpXSksIGFsbFByb3BzLmNvdW50ZXIgPyBoKFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuY291bnRlclxuICB9LCAodmFsdWUubGVuZ3RoIHx8IDApICsgXCIgLyBcIiArIGFsbFByb3BzLmNvdW50ZXIpIDogbnVsbCwgYWxsUHJvcHMuaGVscCAmJiAhc2hvd0Vycm9yID8gaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5oZWxwLCBhbGxQcm9wcy5mb2N1c0hlbHAgPyBjbGFzc2VzLmZvY3VzSGVscCA6IG51bGxdLmpvaW4oXCIgXCIpXG4gIH0sIGFsbFByb3BzLmhlbHApIDogbnVsbCwgc2hvd0Vycm9yID8gaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmVycm9yXG4gIH0sIGVycm9yTWVzc2FnZSkgOiBzaG93RXJyb3JQbGFjZWhvbGRlciAmJiAhYWxsUHJvcHMuaGVscCA/IGgoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5lcnJvclBsYWNlaG9sZGVyXG4gIH0pIDogbnVsbF07XG4gIHZhciBjb250ZW50ID0gW3Byb3BzLmJlZm9yZV0uY29uY2F0KGNvbXBvbmVudENvbnRlbnQsIFtwcm9wcy5hZnRlcl0pO1xuICByZXR1cm4gaChwcm9wcy5lbGVtZW50IHx8IFwiZGl2XCIsIGNvbXBvbmVudFByb3BzLCBjb250ZW50KTtcbn07XG5cbmV4cG9ydCB7IF9UZXh0RmllbGQgfTtcbiIsImltcG9ydCB7IF9UZXh0RmllbGQgfSBmcm9tICdwb2x5dGhlbmUtY29yZS10ZXh0ZmllbGQnO1xuaW1wb3J0IHsgY2FzdCwgaCwgYSwgdXNlRWZmZWN0LCB1c2VTdGF0ZSwgdXNlUmVmLCBnZXRSZWYgfSBmcm9tICdjeWFuby1taXRocmlsJztcblxudmFyIFRleHRGaWVsZCA9IGNhc3QoX1RleHRGaWVsZCwge1xuICBoOiBoLFxuICBhOiBhLFxuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdCxcbiAgdXNlU3RhdGU6IHVzZVN0YXRlLFxuICB1c2VSZWY6IHVzZVJlZixcbiAgZ2V0UmVmOiBnZXRSZWZcbn0pO1xuVGV4dEZpZWxkW1wiZGlzcGxheU5hbWVcIl0gPSBcIlRleHRGaWVsZFwiO1xuXG5leHBvcnQgeyBUZXh0RmllbGQgfTtcbiIsImltcG9ydCBtIGZyb20gXCJtaXRocmlsXCI7XG5pbXBvcnQgeyBCdXR0b24sIERpYWxvZywgTGlzdFRpbGUsIFRleHRGaWVsZCB9IGZyb20gXCJwb2x5dGhlbmUtbWl0aHJpbFwiO1xuXG5pbnRlcmZhY2UgVVJMQ2hhbmdlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICB1cmw6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFVSTElucHV0QXR0cnMge1xuICB0aXRsZT86IHN0cmluZztcbiAgdGV4dEZpZWxkTGFiZWw/OiBzdHJpbmc7XG4gIHBhdHRlcm4/OiBzdHJpbmc7XG4gIGVycm9yPzogc3RyaW5nO1xuICBtYXBwaW5ncz86IHsgcGF0dGVybjogc3RyaW5nOyByZXBsYWNlbWVudDogc3RyaW5nIH1bXTtcbiAgZXZlbnRzPzogeyBvbmNoYW5nZT8oZTogVVJMQ2hhbmdlZEV2ZW50KTogdm9pZDsgb25jYW5jZWw/KGU6IEV2ZW50KTogdm9pZCB9O1xufVxuXG5pbnRlcmZhY2UgVVJMSW5wdXRTdGF0ZSB7XG4gIHVwbG9hZFVSTDogeyB2YWx1ZTogc3RyaW5nOyB2YWxpZDogYm9vbGVhbiB9O1xufVxuXG5jb25zdCBVUkxJbnB1dDogbS5Db21wb25lbnQ8VVJMSW5wdXRBdHRycywgVVJMSW5wdXRTdGF0ZT4gPSB7XG4gIG9uaW5pdCh2bm9kZSkge1xuICAgIHZub2RlLnN0YXRlLnVwbG9hZFVSTCA9IHsgdmFsdWU6IFwiXCIsIHZhbGlkOiBmYWxzZSB9O1xuICB9LFxuICB2aWV3KHZub2RlKSB7XG4gICAgcmV0dXJuIG0oTGlzdFRpbGUsIHtcbiAgICAgIHRpdGxlOiB2bm9kZS5hdHRycy50aXRsZSxcbiAgICAgIGV2ZW50czoge1xuICAgICAgICBvbmNsaWNrOiAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgdm5vZGUuc3RhdGUudXBsb2FkVVJMID0geyB2YWx1ZTogXCJcIiwgdmFsaWQ6IGZhbHNlIH07XG4gICAgICAgICAgRGlhbG9nLnNob3coKCkgPT4gKHtcbiAgICAgICAgICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgICAgICAgICAgYm9keTogbShUZXh0RmllbGQsIHtcbiAgICAgICAgICAgICAgbGFiZWw6IHZub2RlLmF0dHJzLnRleHRGaWVsZExhYmVsLFxuICAgICAgICAgICAgICBmbG9hdGluZ0xhYmVsOiB0cnVlLFxuICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgdHlwZTogXCJ1cmxcIixcbiAgICAgICAgICAgICAgcGF0dGVybjogdm5vZGUuYXR0cnMucGF0dGVybixcbiAgICAgICAgICAgICAgZXJyb3I6IHZub2RlLmF0dHJzLmVycm9yLFxuICAgICAgICAgICAgICBvbkNoYW5nZTogKG5ld1N0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgdm5vZGUuc3RhdGUudXBsb2FkVVJMID0ge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ld1N0YXRlLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgdmFsaWQ6ICFuZXdTdGF0ZS5pbnZhbGlkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGZvb3RlckJ1dHRvbnM6IFtcbiAgICAgICAgICAgICAgbShCdXR0b24sIHtcbiAgICAgICAgICAgICAgICBsYWJlbDogXCLlj5bmtohcIixcbiAgICAgICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IChlOiBFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBEaWFsb2cuaGlkZSgpLnRoZW4oKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAodm5vZGUuYXR0cnMuZXZlbnRzPy5vbmNhbmNlbCA/PyAoKGU6IEV2ZW50KSA9PiB7fSkpKGUpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBtKEJ1dHRvbiwge1xuICAgICAgICAgICAgICAgIGxhYmVsOiBcIuWMr+WFpVwiLFxuICAgICAgICAgICAgICAgIGRpc2FibGVkOiAhdm5vZGUuc3RhdGUudXBsb2FkVVJMLnZhbGlkLFxuICAgICAgICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgICAgICAgb25jbGljazogKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2bm9kZS5zdGF0ZS51cGxvYWRVUkwudmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBEaWFsb2cuaGlkZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZub2RlLmF0dHJzLmV2ZW50cz8ub25jaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IHZub2RlLnN0YXRlLnVwbG9hZFVSTC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZub2RlLmF0dHJzLm1hcHBpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWFwcGluZyBvZiB2bm9kZS5hdHRycy5tYXBwaW5ncyA/PyBbXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdm5vZGUuc3RhdGUudXBsb2FkVVJMLnZhbHVlLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAobWFwcGluZy5wYXR0ZXJuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZy5yZXBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cmwgIT0gdm5vZGUuc3RhdGUudXBsb2FkVVJMLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1Y2U6IFVSTENoYW5nZWRFdmVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUuYXR0cnMuZXZlbnRzPy5vbmNoYW5nZSh1Y2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxufTtcblxuZXhwb3J0IHsgVVJMSW5wdXQgfTtcbiIsImltcG9ydCB7IHRyYW5zaXRpb25TdGF0ZVJlZHVjZXIsIHRyYW5zaXRpb25Db21wb25lbnQsIGZpbHRlclN1cHBvcnRlZEF0dHJpYnV0ZXMsIGNsYXNzRm9yU2l6ZSB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlJztcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KTtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuXG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcblxuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtc3Bpbm5lclwiLFxuICAvLyBlbGVtZW50c1xuICBhbmltYXRpb246IFwicGUtc3Bpbm5lcl9fYW5pbWF0aW9uXCIsXG4gIHBsYWNlaG9sZGVyOiBcInBlLXNwaW5uZXJfX3BsYWNlaG9sZGVyXCIsXG4gIC8vIHN0YXRlc1xuICBhbmltYXRlZDogXCJwZS1zcGlubmVyLS1hbmltYXRlZFwiLFxuICBmYWI6IFwicGUtc3Bpbm5lci0tZmFiXCIsXG4gIGxhcmdlOiBcInBlLXNwaW5uZXItLWxhcmdlXCIsXG4gIG1lZGl1bTogXCJwZS1zcGlubmVyLS1tZWRpdW1cIixcbiAgcGVybWFuZW50OiBcInBlLXNwaW5uZXItLXBlcm1hbmVudFwiLFxuICByYWlzZWQ6IFwicGUtc3Bpbm5lci0tcmFpc2VkXCIsXG4gIHJlZ3VsYXI6IFwicGUtc3Bpbm5lci0tcmVndWxhclwiLFxuICBzaW5nbGVDb2xvcjogXCJwZS1zcGlubmVyLS1zaW5nbGUtY29sb3JcIixcbiAgc21hbGw6IFwicGUtc3Bpbm5lci0tc21hbGxcIixcbiAgdmlzaWJsZTogXCJwZS1zcGlubmVyLS12aXNpYmxlXCJcbn07XG5cbnZhciBzaG93U3Bpbm5lciA9IGZ1bmN0aW9uIHNob3dTcGlubmVyKG9wdHMpIHtcbiAgcmV0dXJuIHRyYW5zaXRpb25Db21wb25lbnQoX29iamVjdFNwcmVhZDIoe30sIG9wdHMsIHtcbiAgICBpc1Nob3c6IHRydWVcbiAgfSkpO1xufTsgLy8gY29uc3QgaGlkZVNwaW5uZXIgPSBvcHRzID0+XG4vLyAgIHRyYW5zaXRpb25Db21wb25lbnQoe1xuLy8gICAgIC4uLm9wdHMsXG4vLyAgICAgaXNTaG93OiBmYWxzZVxuLy8gICB9KTtcblxuXG52YXIgaW5pdGlhbFRyYW5zaXRpb25TdGF0ZSA9IHtcbiAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgaXNUcmFuc2l0aW9uaW5nOiBmYWxzZSxcbiAgaXNIaWRpbmc6IGZhbHNlXG59O1xudmFyIF9CYXNlU3Bpbm5lciA9IGZ1bmN0aW9uIF9CYXNlU3Bpbm5lcihfcmVmKSB7XG4gIHZhciBoID0gX3JlZi5oLFxuICAgICAgYSA9IF9yZWYuYSxcbiAgICAgIHVzZVJlZHVjZXIgPSBfcmVmLnVzZVJlZHVjZXIsXG4gICAgICB1c2VTdGF0ZSA9IF9yZWYudXNlU3RhdGUsXG4gICAgICB1c2VFZmZlY3QgPSBfcmVmLnVzZUVmZmVjdCxcbiAgICAgIGdldFJlZiA9IF9yZWYuZ2V0UmVmLFxuICAgICAgU2hhZG93ID0gX3JlZi5TaGFkb3csXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJoXCIsIFwiYVwiLCBcInVzZVJlZHVjZXJcIiwgXCJ1c2VTdGF0ZVwiLCBcInVzZUVmZmVjdFwiLCBcImdldFJlZlwiLCBcIlNoYWRvd1wiXSk7XG5cbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcih0cmFuc2l0aW9uU3RhdGVSZWR1Y2VyLCBpbml0aWFsVHJhbnNpdGlvblN0YXRlKSxcbiAgICAgIF91c2VSZWR1Y2VyMiA9IF9zbGljZWRUb0FycmF5KF91c2VSZWR1Y2VyLCAyKSxcbiAgICAgIHRyYW5zaXRpb25TdGF0ZSA9IF91c2VSZWR1Y2VyMlswXSxcbiAgICAgIGRpc3BhdGNoVHJhbnNpdGlvblN0YXRlID0gX3VzZVJlZHVjZXIyWzFdO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSgpLFxuICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgICBkb21FbGVtZW50ID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldERvbUVsZW1lbnQgPSBfdXNlU3RhdGUyWzFdO1xuXG4gIHZhciBpc1Zpc2libGUgPSAodHJhbnNpdGlvblN0YXRlIHx8IGluaXRpYWxUcmFuc2l0aW9uU3RhdGUpLmlzVmlzaWJsZTtcbiAgdmFyIHRyYW5zaXRpb25PcHRpb25zID0ge1xuICAgIGRpc3BhdGNoVHJhbnNpdGlvblN0YXRlOiBkaXNwYXRjaFRyYW5zaXRpb25TdGF0ZSxcbiAgICBwcm9wczogcHJvcHMsXG4gICAgZG9tRWxlbWVudHM6IHtcbiAgICAgIGVsOiBkb21FbGVtZW50XG4gICAgfSxcbiAgICBzaG93Q2xhc3M6IGNsYXNzZXMudmlzaWJsZVxuICB9O1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghZG9tRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghcHJvcHMucGVybWFuZW50KSB7XG4gICAgICBzaG93U3Bpbm5lcih0cmFuc2l0aW9uT3B0aW9ucyk7XG4gICAgfVxuICB9LCBbZG9tRWxlbWVudF0pO1xuXG4gIHZhciBjb21wb25lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzKHByb3BzKSwgZ2V0UmVmKGZ1bmN0aW9uIChkb20pIHtcbiAgICByZXR1cm4gZG9tICYmICFkb21FbGVtZW50ICYmIChzZXREb21FbGVtZW50KGRvbSksIHByb3BzLnJlZiAmJiBwcm9wcy5yZWYoZG9tKSk7XG4gIH0pLCBwcm9wcy50ZXN0SWQgJiYge1xuICAgIFwiZGF0YS10ZXN0LWlkXCI6IHByb3BzLnRlc3RJZFxuICB9LCB7XG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5jb21wb25lbnQsIHByb3BzLmluc3RhbmNlQ2xhc3MsIGNsYXNzRm9yU2l6ZShjbGFzc2VzLCBwcm9wcy5zaXplKSwgcHJvcHMuc2luZ2xlQ29sb3IgPyBjbGFzc2VzLnNpbmdsZUNvbG9yIDogbnVsbCwgcHJvcHMucmFpc2VkID8gY2xhc3Nlcy5yYWlzZWQgOiBudWxsLCBwcm9wcy5hbmltYXRlZCA/IGNsYXNzZXMuYW5pbWF0ZWQgOiBudWxsLCBwcm9wcy5wZXJtYW5lbnQgPyBjbGFzc2VzLnBlcm1hbmVudCA6IG51bGwsIGlzVmlzaWJsZSA/IGNsYXNzZXMudmlzaWJsZSA6IG51bGwsIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wc1thW1wiY2xhc3NcIl1dXS5qb2luKFwiIFwiKVxuICB9LCBwcm9wcy5ldmVudHMpO1xuXG4gIHZhciBjb250ZW50ID0gW3Byb3BzLmJlZm9yZSwgcHJvcHMuY29udGVudCwgcHJvcHMuYWZ0ZXJdO1xuXG4gIGlmIChwcm9wcy5yYWlzZWQgJiYgY29udGVudC5sZW5ndGggPiAwKSB7XG4gICAgY29udGVudC5wdXNoKGgoU2hhZG93LCB7XG4gICAgICBzaGFkb3dEZXB0aDogcHJvcHMuc2hhZG93RGVwdGhcbiAgICB9KSk7XG4gIH1cblxuICByZXR1cm4gaChcImRpdlwiLCBjb21wb25lbnRQcm9wcywgY29udGVudCk7XG59O1xuXG5leHBvcnQgeyBfQmFzZVNwaW5uZXIgfTtcbiIsImltcG9ydCB7IF9CYXNlU3Bpbm5lciB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWJhc2Utc3Bpbm5lcic7XG5pbXBvcnQgeyBTaGFkb3cgfSBmcm9tICdwb2x5dGhlbmUtbWl0aHJpbC1zaGFkb3cnO1xuaW1wb3J0IHsgY2FzdCwgaCwgYSwgdXNlUmVkdWNlciwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgZ2V0UmVmIH0gZnJvbSAnY3lhbm8tbWl0aHJpbCc7XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtc3Bpbm5lclwiLFxuICAvLyBlbGVtZW50c1xuICBhbmltYXRpb246IFwicGUtc3Bpbm5lcl9fYW5pbWF0aW9uXCIsXG4gIHBsYWNlaG9sZGVyOiBcInBlLXNwaW5uZXJfX3BsYWNlaG9sZGVyXCIsXG4gIC8vIHN0YXRlc1xuICBhbmltYXRlZDogXCJwZS1zcGlubmVyLS1hbmltYXRlZFwiLFxuICBmYWI6IFwicGUtc3Bpbm5lci0tZmFiXCIsXG4gIGxhcmdlOiBcInBlLXNwaW5uZXItLWxhcmdlXCIsXG4gIG1lZGl1bTogXCJwZS1zcGlubmVyLS1tZWRpdW1cIixcbiAgcGVybWFuZW50OiBcInBlLXNwaW5uZXItLXBlcm1hbmVudFwiLFxuICByYWlzZWQ6IFwicGUtc3Bpbm5lci0tcmFpc2VkXCIsXG4gIHJlZ3VsYXI6IFwicGUtc3Bpbm5lci0tcmVndWxhclwiLFxuICBzaW5nbGVDb2xvcjogXCJwZS1zcGlubmVyLS1zaW5nbGUtY29sb3JcIixcbiAgc21hbGw6IFwicGUtc3Bpbm5lci0tc21hbGxcIixcbiAgdmlzaWJsZTogXCJwZS1zcGlubmVyLS12aXNpYmxlXCJcbn07XG5cbnZhciBCYXNlU3Bpbm5lciA9IGNhc3QoX0Jhc2VTcGlubmVyLCB7XG4gIGg6IGgsXG4gIGE6IGEsXG4gIHVzZVJlZHVjZXI6IHVzZVJlZHVjZXIsXG4gIHVzZVN0YXRlOiB1c2VTdGF0ZSxcbiAgdXNlRWZmZWN0OiB1c2VFZmZlY3QsXG4gIGdldFJlZjogZ2V0UmVmLFxuICBTaGFkb3c6IFNoYWRvd1xufSk7XG5CYXNlU3Bpbm5lcltcImRpc3BsYXlOYW1lXCJdID0gXCJCYXNlU3Bpbm5lclwiO1xuQmFzZVNwaW5uZXJbXCJjbGFzc2VzXCJdID0gY2xhc3NlcztcblxuZXhwb3J0IHsgQmFzZVNwaW5uZXIgfTtcbiIsImZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxudmFyIGNsYXNzZXMgPSB7XG4gIGNvbXBvbmVudDogXCJwZS1tZC1zcGlubmVyXCIsXG4gIC8vIGVsZW1lbnRzXG4gIGFuaW1hdGlvbjogXCJwZS1tZC1zcGlubmVyX19hbmltYXRpb25cIixcbiAgY2lyY2xlOiBcInBlLW1kLXNwaW5uZXJfX2NpcmNsZVwiLFxuICBjaXJjbGVDbGlwcGVyOiBcInBlLW1kLXNwaW5uZXJfX2NpcmNsZS1jbGlwcGVyXCIsXG4gIGNpcmNsZUNsaXBwZXJMZWZ0OiBcInBlLW1kLXNwaW5uZXJfX2NpcmNsZS1jbGlwcGVyLWxlZnRcIixcbiAgY2lyY2xlQ2xpcHBlclJpZ2h0OiBcInBlLW1kLXNwaW5uZXJfX2NpcmNsZS1jbGlwcGVyLXJpZ2h0XCIsXG4gIGdhcFBhdGNoOiBcInBlLW1kLXNwaW5uZXJfX2dhcC1wYXRjaFwiLFxuICBsYXllcjogXCJwZS1tZC1zcGlubmVyX19sYXllclwiLFxuICBsYXllck46IFwicGUtbWQtc3Bpbm5lcl9fbGF5ZXItXCJcbn07XG5cbnZhciBsYXllciA9IGZ1bmN0aW9uIGxheWVyKG51bSwgaCkge1xuICByZXR1cm4gaChcImRpdlwiLCB7XG4gICAga2V5OiBudW0sXG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5sYXllciwgY2xhc3Nlcy5sYXllck4gKyBudW1dLmpvaW4oXCIgXCIpXG4gIH0sIFtoKFwiZGl2XCIsIHtcbiAgICAvLyBrZXk6IFwiY2xpcHBlci1sZWZ0XCIsXG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5jaXJjbGVDbGlwcGVyLCBjbGFzc2VzLmNpcmNsZUNsaXBwZXJMZWZ0XS5qb2luKFwiIFwiKVxuICB9LCBoKFwiZGl2XCIsIHtcbiAgICAvLyBrZXk6IFwiY2lyY2xlXCIsXG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNpcmNsZVxuICB9KSksIGgoXCJkaXZcIiwge1xuICAgIC8vIGtleTogXCJnYXAtcGF0Y2hcIixcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuZ2FwUGF0Y2hcbiAgfSwgaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNpcmNsZVxuICB9KSksIGgoXCJkaXZcIiwge1xuICAgIC8vIGtleTogXCJjbGlwcGVyLXJpZ2h0XCIsXG4gICAgY2xhc3NOYW1lOiBbY2xhc3Nlcy5jaXJjbGVDbGlwcGVyLCBjbGFzc2VzLmNpcmNsZUNsaXBwZXJSaWdodF0uam9pbihcIiBcIilcbiAgfSwgaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLmNpcmNsZVxuICB9KSldKTtcbn07XG5cbnZhciBfU3Bpbm5lciA9IGZ1bmN0aW9uIF9TcGlubmVyKF9yZWYpIHtcbiAgdmFyIGggPSBfcmVmLmgsXG4gICAgICBCYXNlU3Bpbm5lciA9IF9yZWYuQmFzZVNwaW5uZXIsXG4gICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbXCJoXCIsIFwiQmFzZVNwaW5uZXJcIl0pO1xuXG4gIHZhciBjb250ZW50ID0gcHJvcHMuY29udGVudCB8fCBoKFwiZGl2XCIsIHtcbiAgICAvLyBrZXk6IFwiY29udGVudFwiLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5hbmltYXRpb25cbiAgfSwgWzEsIDIsIDMsIDRdLm1hcChmdW5jdGlvbiAobnVtKSB7XG4gICAgcmV0dXJuIGxheWVyKG51bSwgaCk7XG4gIH0pKTtcblxuICB2YXIgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLmNvbXBvbmVudCwgcHJvcHMuY2xhc3NOYW1lXS5qb2luKFwiIFwiKSxcbiAgICBjb250ZW50OiBjb250ZW50XG4gIH0pO1xuXG4gIHJldHVybiBoKEJhc2VTcGlubmVyLCBjb21wb25lbnRQcm9wcyk7XG59O1xuXG5leHBvcnQgeyBfU3Bpbm5lciB9O1xuIiwiaW1wb3J0IHsgQmFzZVNwaW5uZXIgfSBmcm9tICdwb2x5dGhlbmUtbWl0aHJpbC1iYXNlLXNwaW5uZXInO1xuaW1wb3J0IHsgX1NwaW5uZXIgfSBmcm9tICdwb2x5dGhlbmUtY29yZS1tYXRlcmlhbC1kZXNpZ24tc3Bpbm5lcic7XG5pbXBvcnQgeyBjYXN0LCBoLCB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAnY3lhbm8tbWl0aHJpbCc7XG5pbXBvcnQgeyBfQ29uZGl0aW9uYWwgfSBmcm9tICdwb2x5dGhlbmUtY29yZSc7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gICAgfSk7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuXG4gICAgaWYgKGkgJSAyKSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbnZhciBjbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtbWQtc3Bpbm5lclwiLFxuICAvLyBlbGVtZW50c1xuICBhbmltYXRpb246IFwicGUtbWQtc3Bpbm5lcl9fYW5pbWF0aW9uXCIsXG4gIGNpcmNsZTogXCJwZS1tZC1zcGlubmVyX19jaXJjbGVcIixcbiAgY2lyY2xlQ2xpcHBlcjogXCJwZS1tZC1zcGlubmVyX19jaXJjbGUtY2xpcHBlclwiLFxuICBjaXJjbGVDbGlwcGVyTGVmdDogXCJwZS1tZC1zcGlubmVyX19jaXJjbGUtY2xpcHBlci1sZWZ0XCIsXG4gIGNpcmNsZUNsaXBwZXJSaWdodDogXCJwZS1tZC1zcGlubmVyX19jaXJjbGUtY2xpcHBlci1yaWdodFwiLFxuICBnYXBQYXRjaDogXCJwZS1tZC1zcGlubmVyX19nYXAtcGF0Y2hcIixcbiAgbGF5ZXI6IFwicGUtbWQtc3Bpbm5lcl9fbGF5ZXJcIixcbiAgbGF5ZXJOOiBcInBlLW1kLXNwaW5uZXJfX2xheWVyLVwiXG59O1xuXG52YXIgYmFzZVNwaW5uZXJDbGFzc2VzID0ge1xuICBjb21wb25lbnQ6IFwicGUtc3Bpbm5lclwiLFxuICAvLyBlbGVtZW50c1xuICBhbmltYXRpb246IFwicGUtc3Bpbm5lcl9fYW5pbWF0aW9uXCIsXG4gIHBsYWNlaG9sZGVyOiBcInBlLXNwaW5uZXJfX3BsYWNlaG9sZGVyXCIsXG4gIC8vIHN0YXRlc1xuICBhbmltYXRlZDogXCJwZS1zcGlubmVyLS1hbmltYXRlZFwiLFxuICBmYWI6IFwicGUtc3Bpbm5lci0tZmFiXCIsXG4gIGxhcmdlOiBcInBlLXNwaW5uZXItLWxhcmdlXCIsXG4gIG1lZGl1bTogXCJwZS1zcGlubmVyLS1tZWRpdW1cIixcbiAgcGVybWFuZW50OiBcInBlLXNwaW5uZXItLXBlcm1hbmVudFwiLFxuICByYWlzZWQ6IFwicGUtc3Bpbm5lci0tcmFpc2VkXCIsXG4gIHJlZ3VsYXI6IFwicGUtc3Bpbm5lci0tcmVndWxhclwiLFxuICBzaW5nbGVDb2xvcjogXCJwZS1zcGlubmVyLS1zaW5nbGUtY29sb3JcIixcbiAgc21hbGw6IFwicGUtc3Bpbm5lci0tc21hbGxcIixcbiAgdmlzaWJsZTogXCJwZS1zcGlubmVyLS12aXNpYmxlXCJcbn07XG5cbnZhciBTcGlubmVyID0gY2FzdChfU3Bpbm5lciwge1xuICBoOiBoLFxuICBCYXNlU3Bpbm5lcjogQmFzZVNwaW5uZXJcbn0pO1xudmFyIFNwaW5uZXJUb2dnbGUgPSBjYXN0KF9Db25kaXRpb25hbCwge1xuICBoOiBoLFxuICB1c2VTdGF0ZTogdXNlU3RhdGUsXG4gIHVzZUVmZmVjdDogdXNlRWZmZWN0XG59KTtcblNwaW5uZXJUb2dnbGVbXCJkaXNwbGF5TmFtZVwiXSA9IFwiTWF0ZXJpYWxEZXNpZ25TcGlubmVyVG9nZ2xlXCI7XG52YXIgTWF0ZXJpYWxEZXNpZ25TcGlubmVyID0ge1xuICB2aWV3OiBmdW5jdGlvbiB2aWV3KHZub2RlKSB7XG4gICAgcmV0dXJuIGgoU3Bpbm5lclRvZ2dsZSwgX29iamVjdFNwcmVhZDIoe30sIHZub2RlLmF0dHJzLCB7XG4gICAgICBwbGFjZWhvbGRlckNsYXNzTmFtZTogYmFzZVNwaW5uZXJDbGFzc2VzLnBsYWNlaG9sZGVyLFxuICAgICAgaW5zdGFuY2U6IFNwaW5uZXJcbiAgICB9KSk7XG4gIH1cbn07XG5NYXRlcmlhbERlc2lnblNwaW5uZXJbXCJjbGFzc2VzXCJdID0gY2xhc3Nlcztcbk1hdGVyaWFsRGVzaWduU3Bpbm5lcltcImRpc3BsYXlOYW1lXCJdID0gXCJNYXRlcmlhbERlc2lnblNwaW5uZXJcIjtcblxuZXhwb3J0IHsgTWF0ZXJpYWxEZXNpZ25TcGlubmVyIH07XG4iLCJpbXBvcnQgbSBmcm9tIFwibWl0aHJpbFwiO1xuaW1wb3J0IHtcbiAgQnV0dG9uLFxuICBEaWFsb2csXG4gIE1hdGVyaWFsRGVzaWduU3Bpbm5lciBhcyBTcGlubmVyLFxuICBUZXh0RmllbGQsXG59IGZyb20gXCJwb2x5dGhlbmUtbWl0aHJpbFwiO1xuXG5mdW5jdGlvbiBzaG93TWVzc2FnZURpYWxvZyhtZXNzYWdlOiBzdHJpbmcpIHtcbiAgRGlhbG9nLnNob3coe1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGJvZHk6IG1lc3NhZ2UsXG4gICAgZm9vdGVyQnV0dG9uczogbShCdXR0b24sIHtcbiAgICAgIGxhYmVsOiBcIumXnOmWiVwiLFxuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIG9uY2xpY2s6ICgpID0+IERpYWxvZy5oaWRlKCksXG4gICAgICB9LFxuICAgIH0pLFxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2hvd1dhaXRpbmdEaWFsb2coKSB7XG4gIERpYWxvZy5zaG93KHtcbiAgICBiYWNrZHJvcDogdHJ1ZSxcbiAgICBtb2RhbDogdHJ1ZSxcbiAgICBkaXNhYmxlRXNjYXBlOiB0cnVlLFxuICAgIHRpdGxlOiBcIui8ieWFpeS4re+8jOiri+etieWAmeKAplwiLFxuICAgIGJvZHk6IG0oXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdHlsZTogeyBoZWlnaHQ6IFwiNjBweFwiIH0gfSxcbiAgICAgIG0oU3Bpbm5lciwge1xuICAgICAgICBzdHlsZTogeyBtYXJnaW46IFwiYXV0b1wiIH0sXG4gICAgICAgIHBlcm1hbmVudDogdHJ1ZSxcbiAgICAgICAgc2l6ZTogXCJsYXJnZVwiLFxuICAgICAgfSlcbiAgICApLFxuICB9KTtcbn1cblxuZXhwb3J0IHsgc2hvd01lc3NhZ2VEaWFsb2csIHNob3dXYWl0aW5nRGlhbG9nIH07XG4iLCJpbXBvcnQgbSBmcm9tIFwibWl0aHJpbFwiO1xuaW1wb3J0IGljb25EZWxldGUgZnJvbSBcIm1tc3ZnL2dvb2dsZS9tc3ZnL2FjdGlvbi9kZWxldGVcIjtcbmltcG9ydCB7XG4gIEJ1dHRvbixcbiAgRGlhbG9nLFxuICBJY29uQnV0dG9uLFxuICBMaXN0LFxuICBMaXN0VGlsZSxcbiAgTWVudSxcbn0gZnJvbSBcInBvbHl0aGVuZS1taXRocmlsXCI7XG5pbXBvcnQgeyBJY29uQnV0dG9uQ1NTIH0gZnJvbSBcInBvbHl0aGVuZS1jc3NcIjtcbmltcG9ydCB7IENpbiB9IGZyb20gXCIuLi9jaW4vY2luXCI7XG5pbXBvcnQgeyBGaWxlSW5wdXQgfSBmcm9tIFwiLi9maWxlaW5wdXRcIjtcbmltcG9ydCB7IFVSTElucHV0IH0gZnJvbSBcIi4vdXJsaW5wdXRcIjtcbmltcG9ydCB7IHNob3dNZXNzYWdlRGlhbG9nLCBzaG93V2FpdGluZ0RpYWxvZyB9IGZyb20gXCIuL2RpYWxvZ1wiO1xuXG5jb25zdCBBVFRSX0NJTlNfREVGQVVMVCA9IFtdIGFzIENpbltdO1xuXG5pbnRlcmZhY2UgQ2luU2VsZWN0ZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgY2luOiBDaW47XG59XG5cbmludGVyZmFjZSBDaW5EZWxldGVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIGNpbjogQ2luO1xufVxuXG5pbnRlcmZhY2UgQ2luSW1wb3J0ZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgY2luSUQ6IHN0cmluZztcbiAgc3RyZWFtOiBSZWFkYWJsZVN0cmVhbTtcbn1cblxuaW50ZXJmYWNlIENpbnNEcm9wRG93bkF0dHJzIHtcbiAgYWN0aXZlQ2luPzogQ2luO1xuICBjaW5zPzogQ2luW107XG4gIGV2ZW50cz86IHtcbiAgICBvbmNpbnNlbGVjdGVkPyhlOiBDaW5TZWxlY3RlZEV2ZW50KTogdm9pZDtcbiAgICBvbmNpbmRlbGV0ZWQ/KGU6IENpbkRlbGV0ZWRFdmVudCk6IHZvaWQ7XG4gICAgb25jaW5pbXBvcnRlZD8oZTogQ2luSW1wb3J0ZWRFdmVudCk6IHZvaWQ7XG4gIH07XG59XG5cbmludGVyZmFjZSBDaW5zRHJvcERvd25TdGF0ZSB7XG4gIG9wZW46IGJvb2xlYW47XG4gIGJ1dHRvbklkOiBzdHJpbmc7XG59XG5cbkljb25CdXR0b25DU1MuYWRkU3R5bGUoXCIuY2luc2Ryb3Bkb3duLWRlbGV0ZS1idXR0b25cIiwge1xuICBwYWRkaW5nX2NvbXBhY3Q6IDIsXG59KTtcblxubGV0IGJ1dHRvbkNudDogbnVtYmVyID0gMDtcblxuY29uc3QgQ2luc0Ryb3BEb3duOiBtLkNvbXBvbmVudDxDaW5zRHJvcERvd25BdHRycywgQ2luc0Ryb3BEb3duU3RhdGU+ID0ge1xuICBvbmluaXQodm5vZGUpIHtcbiAgICB2bm9kZS5zdGF0ZS5vcGVuID0gZmFsc2U7XG4gICAgdm5vZGUuc3RhdGUuYnV0dG9uSWQgPSBgY2lucy1kcm9wLWRvd24tYnV0dG9uLSR7KytidXR0b25DbnR9YDtcbiAgfSxcbiAgdmlldyh2bm9kZSkge1xuICAgIHJldHVybiBtKFwiZGl2XCIsIHsgc3R5bGU6IHsgcG9zaXRpb246IFwicmVsYXRpdmVcIiB9IH0sIFtcbiAgICAgIG0oTWVudSwge1xuICAgICAgICB0YXJnZXQ6IGAjJHt2bm9kZS5zdGF0ZS5idXR0b25JZH1gLFxuICAgICAgICBzaG93OiB2bm9kZS5zdGF0ZS5vcGVuLFxuICAgICAgICBkaWRIaWRlOiAoaWQ6IHN0cmluZykgPT4gKHZub2RlLnN0YXRlLm9wZW4gPSBmYWxzZSksXG4gICAgICAgIG9yaWdpbjogXCJ0b3BcIixcbiAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgIGNvbnRlbnQ6IG0oTGlzdCwge1xuICAgICAgICAgIHRpbGVzOiAoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0VGlsZXMgPSAodm5vZGUuYXR0cnMuY2lucyA/PyBBVFRSX0NJTlNfREVGQVVMVCkubWFwKFxuICAgICAgICAgICAgICAoY2luKSA9PlxuICAgICAgICAgICAgICAgIG0oTGlzdFRpbGUsIHtcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBjaW4uY25hbWUsXG4gICAgICAgICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazogKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHZub2RlLmF0dHJzLmV2ZW50cz8ub25jaW5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3NlOiBDaW5TZWxlY3RlZEV2ZW50ID0geyAuLi5lLCBjaW4gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmF0dHJzLmV2ZW50cz8ub25jaW5zZWxlY3RlZChjc2UpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBzZWNvbmRhcnk6IHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogbShJY29uQnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImNpbnNkcm9wZG93bi1kZWxldGUtYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgaWNvbjogeyBzdmc6IHsgY29udGVudDogaWNvbkRlbGV0ZSB9LCBzaXplOiBcInNtYWxsXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICBjb21wYWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazogKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2bm9kZS5hdHRycy5ldmVudHM/Lm9uY2luZGVsZXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNkZTogQ2luRGVsZXRlZEV2ZW50ID0geyAuLi5lLCBjaW4gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS5hdHRycy5ldmVudHM/Lm9uY2luZGVsZXRlZChjZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlc3VsdFRpbGVzLnB1c2goXG4gICAgICAgICAgICAgIG0oRmlsZUlucHV0LCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IFwi5Yyv5YWlQ0lO5qqU5qGI4oCmXCIsXG4gICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICBvbmNoYW5nZTogKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ0bkxvYWRFbCA9IGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidG5Mb2FkRWwuZmlsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlcyA9IGJ0bkxvYWRFbC5maWxlcyBhcyBGaWxlTGlzdDtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaW5GaWxlOiBGaWxlID0gZmlsZXNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2luRmlsZS5zaXplID4gMmU2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDJNQiBmaWxlIHNpemUgbGltaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd01lc3NhZ2VEaWFsb2coXCLkuI3og73kuIrlgrPotoXpgY4yTULnmoTmqpTmoYhcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1dhaXRpbmdEaWFsb2coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVSZWFkU3RyZWFtOiBSZWFkYWJsZVN0cmVhbSA9IGNpbkZpbGUuc3RyZWFtKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodm5vZGUuYXR0cnMuZXZlbnRzPy5vbmNpbmltcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNpZTogQ2luSW1wb3J0ZWRFdmVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpbklEOiBjaW5GaWxlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBmaWxlUmVhZFN0cmVhbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUuYXR0cnMuZXZlbnRzPy5vbmNpbmltcG9ydGVkKGNpZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmVzdWx0VGlsZXMucHVzaChcbiAgICAgICAgICAgICAgbShVUkxJbnB1dCwge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIuW+nlVSTOWMr+WFpeKAplwiLFxuICAgICAgICAgICAgICAgIHRleHRGaWVsZExhYmVsOiBcIkNJTuaqlOahiOeahFVSTFwiLFxuICAgICAgICAgICAgICAgIHBhdHRlcm46IFwiaHR0cHN7MCwxfTovLy4rLy4rXFxcXC5jaW5cIixcbiAgICAgICAgICAgICAgICBlcnJvcjogXCLlv4XpoIjovLjlhaXmnInmlYhVUkwoW2h0dHB8aHR0cHNdOi8vW+S4u+apn10vW+i3r+W+kV0vKi5jaW4pXCIsXG4gICAgICAgICAgICAgICAgbWFwcGluZ3M6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgICAgICAgICAgICBcIl5odHRwczovL2dpdGh1Yi5jb20vKC4rKS8oLispL2Jsb2IvKC4rLy4rKVxcXFwuY2luJFwiLFxuICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvJDEvJDJAJDMuY2luXCIsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICBvbmNoYW5nZTogKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvd1dhaXRpbmdEaWFsb2coKTtcbiAgICAgICAgICAgICAgICAgICAgZmV0Y2goZS51cmwpXG4gICAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZub2RlLmF0dHJzLmV2ZW50cz8ub25jaW5pbXBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNpZTogQ2luSW1wb3J0ZWRFdmVudCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLihlIGFzIEV2ZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpbklEOiBlLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbTogcmVzcG9uc2UuYm9keSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmF0dHJzLmV2ZW50cz8ub25jaW5pbXBvcnRlZChjaWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJNc2cgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1cyA9PSA0MDRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gXCLos4fmupDkuI3lrZjlnKhcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBg57ay57Wh5Zue5oeJ6Yyv6Kqk44CC54uA5oWL56K8OiAke3Jlc3BvbnNlLnN0YXR1c31gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBEaWFsb2cuaGlkZSgpLnRoZW4oKCkgPT4gc2hvd01lc3NhZ2VEaWFsb2coZXJyTXNnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yOiBFcnJvcikgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIERpYWxvZy5oaWRlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TWVzc2FnZURpYWxvZyhlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0VGlsZXM7XG4gICAgICAgICAgfSkoKSxcbiAgICAgICAgfSksXG4gICAgICB9KSxcbiAgICAgIG0oQnV0dG9uLCB7XG4gICAgICAgIGlkOiB2bm9kZS5zdGF0ZS5idXR0b25JZCxcbiAgICAgICAgbGFiZWw6IHZub2RlLmF0dHJzLmFjdGl2ZUNpbj8uY25hbWUgPz8gXCLoq4vpgbjmk4fovLjlhaXms5XigKZcIixcbiAgICAgICAgZHJvcGRvd246IHsgb3Blbjogdm5vZGUuc3RhdGUub3BlbiB9LFxuICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICBvbmNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICB2bm9kZS5zdGF0ZS5vcGVuID0gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgXSk7XG4gIH0sXG59O1xuXG5leHBvcnQgeyBDaW5zRHJvcERvd24gfTtcbiIsImltcG9ydCB7IGZpbHRlclN1cHBvcnRlZEF0dHJpYnV0ZXMgfSBmcm9tICdwb2x5dGhlbmUtY29yZSc7XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG52YXIgY2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLWNhcmRcIixcbiAgLy8gZWxlbWVudHNcbiAgYWN0aW9uczogXCJwZS1jYXJkX19hY3Rpb25zXCIsXG4gIGFueTogXCJwZS1jYXJkX19hbnlcIixcbiAgY29udGVudDogXCJwZS1jYXJkX19jb250ZW50XCIsXG4gIGhlYWRlcjogXCJwZS1jYXJkX19oZWFkZXJcIixcbiAgaGVhZGVyVGl0bGU6IFwicGUtY2FyZF9faGVhZGVyLXRpdGxlXCIsXG4gIG1lZGlhOiBcInBlLWNhcmRfX21lZGlhXCIsXG4gIG1lZGlhRGltbWVyOiBcInBlLWNhcmRfX21lZGlhX19kaW1tZXJcIixcbiAgb3ZlcmxheTogXCJwZS1jYXJkX19vdmVybGF5XCIsXG4gIG92ZXJsYXlDb250ZW50OiBcInBlLWNhcmRfX292ZXJsYXlfX2NvbnRlbnRcIixcbiAgcHJpbWFyeTogXCJwZS1jYXJkX19wcmltYXJ5XCIsXG4gIHByaW1hcnlNZWRpYTogXCJwZS1jYXJkX19wcmltYXJ5LW1lZGlhXCIsXG4gIHN1YnRpdGxlOiBcInBlLWNhcmRfX3N1YnRpdGxlXCIsXG4gIHRleHQ6IFwicGUtY2FyZF9fdGV4dFwiLFxuICB0aXRsZTogXCJwZS1jYXJkX190aXRsZVwiLFxuICAvLyBzdGF0ZXNcbiAgYWN0aW9uc0JvcmRlcjogXCJwZS1jYXJkX19hY3Rpb25zLS1ib3JkZXJcIixcbiAgYWN0aW9uc0hvcml6b250YWw6IFwicGUtY2FyZF9fYWN0aW9ucy0taG9yaXpvbnRhbFwiLFxuICBhY3Rpb25zSnVzdGlmaWVkOiBcInBlLWNhcmRfX2FjdGlvbnMtLWp1c3RpZmllZFwiLFxuICBhY3Rpb25zVGlnaHQ6IFwicGUtY2FyZF9fYWN0aW9ucy0tdGlnaHRcIixcbiAgYWN0aW9uc1ZlcnRpY2FsOiBcInBlLWNhcmRfX2FjdGlvbnMtLXZlcnRpY2FsXCIsXG4gIG1lZGlhQ3JvcFg6IFwicGUtY2FyZF9fbWVkaWEtLWNyb3AteFwiLFxuICBtZWRpYUNyb3BZOiBcInBlLWNhcmRfX21lZGlhLS1jcm9wLXlcIixcbiAgbWVkaWFPcmlnaW5TdGFydDogXCJwZS1jYXJkX19tZWRpYS0tb3JpZ2luLXN0YXJ0XCIsXG4gIG1lZGlhT3JpZ2luQ2VudGVyOiBcInBlLWNhcmRfX21lZGlhLS1vcmlnaW4tY2VudGVyXCIsXG4gIG1lZGlhT3JpZ2luRW5kOiBcInBlLWNhcmRfX21lZGlhLS1vcmlnaW4tZW5kXCIsXG4gIG1lZGlhTGFyZ2U6IFwicGUtY2FyZF9fbWVkaWEtLWxhcmdlXCIsXG4gIG1lZGlhTWVkaXVtOiBcInBlLWNhcmRfX21lZGlhLS1tZWRpdW1cIixcbiAgbWVkaWFSYXRpb0xhbmRzY2FwZTogXCJwZS1jYXJkX19tZWRpYS0tbGFuZHNjYXBlXCIsXG4gIG1lZGlhUmF0aW9TcXVhcmU6IFwicGUtY2FyZF9fbWVkaWEtLXNxdWFyZVwiLFxuICBtZWRpYVJlZ3VsYXI6IFwicGUtY2FyZF9fbWVkaWEtLXJlZ3VsYXJcIixcbiAgbWVkaWFTbWFsbDogXCJwZS1jYXJkX19tZWRpYS0tc21hbGxcIixcbiAgb3ZlcmxheVNoZWV0OiBcInBlLWNhcmRfX292ZXJsYXktLXNoZWV0XCIsXG4gIHByaW1hcnlIYXNNZWRpYTogXCJwZS1jYXJkX19wcmltYXJ5LS1tZWRpYVwiLFxuICBwcmltYXJ5VGlnaHQ6IFwicGUtY2FyZF9fcHJpbWFyeS0tdGlnaHRcIixcbiAgdGV4dFRpZ2h0OiBcInBlLWNhcmRfX3RleHQtLXRpZ2h0XCJcbn07XG5cbnZhciBjcmVhdGVPdmVybGF5ID0gZnVuY3Rpb24gY3JlYXRlT3ZlcmxheShfcmVmKSB7XG4gIHZhciBkaXNwYXRjaGVyID0gX3JlZi5kaXNwYXRjaGVyLFxuICAgICAgcHJvcHMgPSBfcmVmLnByb3BzLFxuICAgICAgaCA9IF9yZWYuaCxcbiAgICAgIGEgPSBfcmVmLmE7XG4gIHZhciBlbGVtZW50ID0gcHJvcHMuZWxlbWVudCB8fCBcImRpdlwiO1xuICB2YXIgY29udGVudCA9IHByb3BzLmNvbnRlbnQubWFwKGRpc3BhdGNoZXIpO1xuICByZXR1cm4gaChcImRpdlwiLCB7XG4gICAgc3R5bGU6IHByb3BzLnN0eWxlLFxuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMub3ZlcmxheSwgcHJvcHMuc2hlZXQgPyBjbGFzc2VzLm92ZXJsYXlTaGVldCA6IG51bGwsIHByb3BzLnRvbmUgPT09IFwibGlnaHRcIiA/IG51bGwgOiBcInBlLWRhcmstdG9uZVwiLCAvLyBkZWZhdWx0IGRhcmsgdG9uZVxuICAgIHByb3BzLnRvbmUgPT09IFwibGlnaHRcIiA/IFwicGUtbGlnaHQtdG9uZVwiIDogbnVsbF0uam9pbihcIiBcIilcbiAgfSwgW2goZWxlbWVudCwge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMub3ZlcmxheUNvbnRlbnQsIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wc1thW1wiY2xhc3NcIl1dXS5qb2luKFwiIFwiKVxuICB9LCBjb250ZW50KSwgaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLm1lZGlhRGltbWVyXG4gIH0pXSk7XG59O1xuXG52YXIgY3JlYXRlQW55ID0gZnVuY3Rpb24gY3JlYXRlQW55KF9yZWYyKSB7XG4gIHZhciBwcm9wcyA9IF9yZWYyLnByb3BzLFxuICAgICAgaCA9IF9yZWYyLmgsXG4gICAgICBhID0gX3JlZjIuYTtcbiAgdmFyIGVsZW1lbnQgPSBwcm9wcy5lbGVtZW50IHx8IFwiZGl2XCI7XG4gIHJldHVybiBoKGVsZW1lbnQsIF9leHRlbmRzKHt9LCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzKHByb3BzKSwge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMuYW55LCBwcm9wcy50aWdodCA/IGNsYXNzZXMudGV4dFRpZ2h0IDogbnVsbCwgcHJvcHMuY2xhc3NOYW1lIHx8IHByb3BzW2FbXCJjbGFzc1wiXV1dLmpvaW4oXCIgXCIpXG4gIH0pLCBwcm9wcy5jb250ZW50KTtcbn07XG5cbnZhciBjcmVhdGVUZXh0ID0gZnVuY3Rpb24gY3JlYXRlVGV4dChfcmVmMykge1xuICB2YXIgcHJvcHMgPSBfcmVmMy5wcm9wcyxcbiAgICAgIGggPSBfcmVmMy5oLFxuICAgICAgYSA9IF9yZWYzLmE7XG4gIHZhciBlbGVtZW50ID0gcHJvcHMuZWxlbWVudCB8fCBcImRpdlwiO1xuICByZXR1cm4gaChlbGVtZW50LCBfZXh0ZW5kcyh7fSwgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyhwcm9wcyksIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLnRleHQsIHByb3BzLnRpZ2h0ID8gY2xhc3Nlcy50ZXh0VGlnaHQgOiBudWxsLCBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHNbYVtcImNsYXNzXCJdXV0uam9pbihcIiBcIilcbiAgfSwgcHJvcHMuZXZlbnRzKSwgcHJvcHMuY29udGVudCk7XG59O1xuXG52YXIgY3JlYXRlSGVhZGVyID0gZnVuY3Rpb24gY3JlYXRlSGVhZGVyKF9yZWY0KSB7XG4gIHZhciBwcm9wcyA9IF9yZWY0LnByb3BzLFxuICAgICAgaCA9IF9yZWY0LmgsXG4gICAgICBhID0gX3JlZjQuYSxcbiAgICAgIEljb24gPSBfcmVmNC5JY29uLFxuICAgICAgTGlzdFRpbGUgPSBfcmVmNC5MaXN0VGlsZTtcbiAgcmV0dXJuIGgoTGlzdFRpbGUsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMuaGVhZGVyLCBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHNbYVtcImNsYXNzXCJdXV0uam9pbihcIiBcIilcbiAgfSwgcHJvcHMuaWNvbiA/IHtcbiAgICBmcm9udDogaChJY29uLCBwcm9wcy5pY29uKVxuICB9IDogbnVsbCkpO1xufTtcblxudmFyIF9DYXJkID0gZnVuY3Rpb24gX0NhcmQoX3JlZjUpIHtcbiAgdmFyIGggPSBfcmVmNS5oLFxuICAgICAgYSA9IF9yZWY1LmEsXG4gICAgICBDYXJkQWN0aW9ucyA9IF9yZWY1LkNhcmRBY3Rpb25zLFxuICAgICAgQ2FyZE1lZGlhID0gX3JlZjUuQ2FyZE1lZGlhLFxuICAgICAgQ2FyZFByaW1hcnkgPSBfcmVmNS5DYXJkUHJpbWFyeSxcbiAgICAgIEljb24gPSBfcmVmNS5JY29uLFxuICAgICAgTGlzdFRpbGUgPSBfcmVmNS5MaXN0VGlsZSxcbiAgICAgIFNoYWRvdyA9IF9yZWY1LlNoYWRvdyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWY1LCBbXCJoXCIsIFwiYVwiLCBcIkNhcmRBY3Rpb25zXCIsIFwiQ2FyZE1lZGlhXCIsIFwiQ2FyZFByaW1hcnlcIiwgXCJJY29uXCIsIFwiTGlzdFRpbGVcIiwgXCJTaGFkb3dcIl0pO1xuXG4gIHZhciBjb21wb25lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzKHByb3BzKSwgcHJvcHMudGVzdElkICYmIHtcbiAgICBcImRhdGEtdGVzdC1pZFwiOiBwcm9wcy50ZXN0SWRcbiAgfSwge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMuY29tcG9uZW50LCBwcm9wcy50b25lID09PSBcImRhcmtcIiA/IFwicGUtZGFyay10b25lXCIgOiBudWxsLCBwcm9wcy50b25lID09PSBcImxpZ2h0XCIgPyBcInBlLWxpZ2h0LXRvbmVcIiA6IG51bGwsIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wc1thW1wiY2xhc3NcIl1dXS5qb2luKFwiIFwiKVxuICB9LCBwcm9wcy51cmwsIHByb3BzLmV2ZW50cyk7XG5cbiAgdmFyIGRpc3BhdGNoZXIgPSBmdW5jdGlvbiBkaXNwYXRjaGVyKGJsb2NrKSB7XG4gICAgdmFyIGJsb2NrTmFtZSA9IE9iamVjdC5rZXlzKGJsb2NrKVswXTtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCBibG9ja1tibG9ja05hbWVdLCB7XG4gICAgICBkaXNwYXRjaGVyOiBkaXNwYXRjaGVyLFxuICAgICAga2V5OiB1bmRlZmluZWRcbiAgICB9KTtcblxuICAgIHN3aXRjaCAoYmxvY2tOYW1lKSB7XG4gICAgICBjYXNlIFwiYWN0aW9uc1wiOlxuICAgICAgICByZXR1cm4gaChDYXJkQWN0aW9ucywgcHJvcHMpO1xuXG4gICAgICBjYXNlIFwiaGVhZGVyXCI6XG4gICAgICAgIHJldHVybiBjcmVhdGVIZWFkZXIoe1xuICAgICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgICBoOiBoLFxuICAgICAgICAgIGE6IGEsXG4gICAgICAgICAgSWNvbjogSWNvbixcbiAgICAgICAgICBMaXN0VGlsZTogTGlzdFRpbGVcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgXCJtZWRpYVwiOlxuICAgICAgICByZXR1cm4gaChDYXJkTWVkaWEsIHByb3BzKTtcblxuICAgICAgY2FzZSBcIm92ZXJsYXlcIjpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU92ZXJsYXkoe1xuICAgICAgICAgIGRpc3BhdGNoZXI6IGRpc3BhdGNoZXIsXG4gICAgICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgICAgIGg6IGgsXG4gICAgICAgICAgYTogYVxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSBcInByaW1hcnlcIjpcbiAgICAgICAgcmV0dXJuIGgoQ2FyZFByaW1hcnksIHByb3BzKTtcblxuICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRleHQoe1xuICAgICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgICBoOiBoLFxuICAgICAgICAgIGE6IGFcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgXCJhbnlcIjpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUFueSh7XG4gICAgICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgICAgIGg6IGgsXG4gICAgICAgICAgYTogYVxuICAgICAgICB9KTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgXCJDb250ZW50IHR5cGUgXFxcIlwiLmNvbmNhdChibG9ja05hbWUsIFwiXFxcIiBkb2VzIG5vdCBleGlzdFwiKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGJsb2NrcyA9IEFycmF5LmlzQXJyYXkocHJvcHMuY29udGVudCkgPyBwcm9wcy5jb250ZW50Lm1hcChkaXNwYXRjaGVyKSA6IFtwcm9wcy5jb250ZW50XTsgLy8gZGVwcmVjYXRlZDtcblxuICB2YXIgY29tcG9uZW50Q29udGVudCA9IFtwcm9wcy5iZWZvcmVdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYmxvY2tzKSwgW3Byb3BzLmFmdGVyXSk7XG4gIHZhciBzaGFkb3dEZXB0aCA9IHByb3BzLnNoYWRvd0RlcHRoICE9PSB1bmRlZmluZWQgPyBwcm9wcy5zaGFkb3dEZXB0aCA6IHByb3BzLno7IC8vIGRlcHJlY2F0ZWRcblxuICB2YXIgY29udGVudCA9IFtoKFNoYWRvdywge1xuICAgIHNoYWRvd0RlcHRoOiBzaGFkb3dEZXB0aCAhPT0gdW5kZWZpbmVkID8gc2hhZG93RGVwdGggOiAxLFxuICAgIGFuaW1hdGVkOiB0cnVlXG4gIH0pLCBoKFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXMuY29udGVudFxuICB9LCBjb21wb25lbnRDb250ZW50KSwgcHJvcHMuY2hpbGRyZW5dO1xuICB2YXIgZWxlbWVudCA9IHByb3BzLmVsZW1lbnQgfHwgcHJvcHMudXJsID8gXCJhXCIgOiBcImRpdlwiO1xuICByZXR1cm4gaChlbGVtZW50LCBjb21wb25lbnRQcm9wcywgY29udGVudCk7XG59O1xuXG52YXIgaW1hZ2VSYXRpb3MgPSB7XG4gIGxhbmRzY2FwZTogMTYgLyA5LFxuICBzcXVhcmU6IDFcbn07XG52YXIgbWVkaWFTaXplQ2xhc3NlcyA9IHtcbiAgc21hbGw6IGNsYXNzZXMubWVkaWFTbWFsbCxcbiAgcmVndWxhcjogY2xhc3Nlcy5tZWRpYVJlZ3VsYXIsXG4gIG1lZGl1bTogY2xhc3Nlcy5tZWRpYU1lZGl1bSxcbiAgbGFyZ2U6IGNsYXNzZXMubWVkaWFMYXJnZVxufTtcblxudmFyIG1lZGlhU2l6ZUNsYXNzID0gZnVuY3Rpb24gbWVkaWFTaXplQ2xhc3MoKSB7XG4gIHZhciBzaXplID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBcInJlZ3VsYXJcIjtcbiAgcmV0dXJuIG1lZGlhU2l6ZUNsYXNzZXNbc2l6ZV07XG59O1xuXG52YXIgaW5pdEltYWdlID0gZnVuY3Rpb24gaW5pdEltYWdlKF9yZWYpIHtcbiAgdmFyIGRvbSA9IF9yZWYuZG9tLFxuICAgICAgc3JjID0gX3JlZi5zcmMsXG4gICAgICByYXRpbyA9IF9yZWYucmF0aW8sXG4gICAgICBvcmlnaW4gPSBfcmVmLm9yaWdpbjtcbiAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuXG4gIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gdXNlIGEgYmFja2dyb3VuZCBpbWFnZSBvbiB0aGUgaW1hZ2UgY29udGFpbmVyXG4gICAgaWYgKGltZy50YWdOYW1lID09PSBcIklNR1wiKSB7XG4gICAgICBkb20uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoXCIuY29uY2F0KGltZy5zcmMsIFwiKVwiKTtcbiAgICB9XG5cbiAgICB2YXIgbmF0dXJhbFJhdGlvID0gdGhpcy5uYXR1cmFsV2lkdGggLyB0aGlzLm5hdHVyYWxIZWlnaHQ7IC8vIGNyb3AteDogY3JvcCBvdmVyIHggYXhpc1xuICAgIC8vIGNyb3AteTogY3JvcCBvdmVyIHkgYXhpc1xuXG4gICAgdmFyIGNyb3BDbGFzcyA9IG5hdHVyYWxSYXRpbyA8IGltYWdlUmF0aW9zW3JhdGlvXSA/IGNsYXNzZXMubWVkaWFDcm9wWCA6IGNsYXNzZXMubWVkaWFDcm9wWTtcbiAgICBkb20uY2xhc3NMaXN0LmFkZChjcm9wQ2xhc3MpO1xuICAgIHZhciBvcmlnaW5DbGFzcyA9IG9yaWdpbiA9PT0gXCJzdGFydFwiID8gY2xhc3Nlcy5tZWRpYU9yaWdpblN0YXJ0IDogb3JpZ2luID09PSBcImVuZFwiID8gY2xhc3Nlcy5tZWRpYU9yaWdpbkVuZCA6IGNsYXNzZXMubWVkaWFPcmlnaW5DZW50ZXI7XG4gICAgZG9tLmNsYXNzTGlzdC5hZGQob3JpZ2luQ2xhc3MpO1xuICB9O1xuXG4gIGltZy5zcmMgPSBzcmM7XG59O1xuXG52YXIgX0NhcmRNZWRpYSA9IGZ1bmN0aW9uIF9DYXJkTWVkaWEoX3JlZjIpIHtcbiAgdmFyIGggPSBfcmVmMi5oLFxuICAgICAgYSA9IF9yZWYyLmEsXG4gICAgICB1c2VFZmZlY3QgPSBfcmVmMi51c2VFZmZlY3QsXG4gICAgICB1c2VTdGF0ZSA9IF9yZWYyLnVzZVN0YXRlLFxuICAgICAgZ2V0UmVmID0gX3JlZjIuZ2V0UmVmLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZjIsIFtcImhcIiwgXCJhXCIsIFwidXNlRWZmZWN0XCIsIFwidXNlU3RhdGVcIiwgXCJnZXRSZWZcIl0pO1xuXG4gIHZhciBfdXNlU3RhdGUgPSB1c2VTdGF0ZSgpLFxuICAgICAgX3VzZVN0YXRlMiA9IF9zbGljZWRUb0FycmF5KF91c2VTdGF0ZSwgMiksXG4gICAgICBkb21FbGVtZW50ID0gX3VzZVN0YXRlMlswXSxcbiAgICAgIHNldERvbUVsZW1lbnQgPSBfdXNlU3RhdGUyWzFdO1xuXG4gIHZhciByYXRpbyA9IHByb3BzLnJhdGlvIHx8IFwibGFuZHNjYXBlXCI7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkb21FbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJhdGlvID0gcHJvcHMucmF0aW8gfHwgXCJsYW5kc2NhcGVcIjtcbiAgICB2YXIgb3JpZ2luID0gcHJvcHMub3JpZ2luIHx8IFwiY2VudGVyXCI7XG4gICAgdmFyIGltZyA9IGRvbUVsZW1lbnQucXVlcnlTZWxlY3RvcihcImltZ1wiKSB8fCBkb21FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpZnJhbWVcIik7XG4gICAgaW5pdEltYWdlKHtcbiAgICAgIGRvbTogZG9tRWxlbWVudCxcbiAgICAgIHNyYzogaW1nLnNyYyxcbiAgICAgIHJhdGlvOiByYXRpbyxcbiAgICAgIG9yaWdpbjogb3JpZ2luXG4gICAgfSk7XG4gIH0sIFtkb21FbGVtZW50XSk7XG5cbiAgdmFyIGNvbXBvbmVudFByb3BzID0gX2V4dGVuZHMoe30sIGZpbHRlclN1cHBvcnRlZEF0dHJpYnV0ZXMocHJvcHMpLCBnZXRSZWYoZnVuY3Rpb24gKGRvbSkge1xuICAgIHJldHVybiBkb20gJiYgIWRvbUVsZW1lbnQgJiYgc2V0RG9tRWxlbWVudChkb20pO1xuICB9KSwgcHJvcHMudGVzdElkICYmIHtcbiAgICBcImRhdGEtdGVzdC1pZFwiOiBwcm9wcy50ZXN0SWRcbiAgfSwge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMubWVkaWEsIG1lZGlhU2l6ZUNsYXNzKHByb3BzLnNpemUpLCByYXRpbyA9PT0gXCJsYW5kc2NhcGVcIiA/IGNsYXNzZXMubWVkaWFSYXRpb0xhbmRzY2FwZSA6IGNsYXNzZXMubWVkaWFSYXRpb1NxdWFyZSwgcHJvcHMuY2xhc3NOYW1lIHx8IHByb3BzW2FbXCJjbGFzc1wiXV1dLmpvaW4oXCIgXCIpXG4gIH0sIHByb3BzLmV2ZW50cyk7XG5cbiAgdmFyIGRpc3BhdGNoZXIgPSBwcm9wcy5kaXNwYXRjaGVyO1xuICB2YXIgY29udGVudCA9IFtwcm9wcy5jb250ZW50LCBwcm9wcy5vdmVybGF5ID8gZGlzcGF0Y2hlcih7XG4gICAgb3ZlcmxheTogcHJvcHMub3ZlcmxheVxuICB9KSA6IHByb3BzLnNob3dEaW1tZXIgJiYgaChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLm1lZGlhRGltbWVyXG4gIH0pXTtcbiAgcmV0dXJuIGgocHJvcHMuZWxlbWVudCB8fCBcImRpdlwiLCBjb21wb25lbnRQcm9wcywgY29udGVudCk7XG59O1xuXG52YXIgYnV0dG9uQ2xhc3NlcyA9IHtcbiAgY29tcG9uZW50OiBcInBlLXRleHQtYnV0dG9uXCIsXG4gIFwic3VwZXJcIjogXCJwZS1idXR0b25cIixcbiAgcm93OiBcInBlLWJ1dHRvbi1yb3dcIixcbiAgLy8gZWxlbWVudHMgICAgICBcbiAgY29udGVudDogXCJwZS1idXR0b25fX2NvbnRlbnRcIixcbiAgbGFiZWw6IFwicGUtYnV0dG9uX19sYWJlbFwiLFxuICB0ZXh0TGFiZWw6IFwicGUtYnV0dG9uX190ZXh0LWxhYmVsXCIsXG4gIHdhc2g6IFwicGUtYnV0dG9uX193YXNoXCIsXG4gIHdhc2hDb2xvcjogXCJwZS1idXR0b25fX3dhc2gtY29sb3JcIixcbiAgZHJvcGRvd246IFwicGUtYnV0dG9uX19kcm9wZG93blwiLFxuICAvLyBzdGF0ZXMgICAgICBcbiAgYm9yZGVyOiBcInBlLWJ1dHRvbi0tYm9yZGVyXCIsXG4gIGNvbnRhaW5lZDogXCJwZS1idXR0b24tLWNvbnRhaW5lZFwiLFxuICBkaXNhYmxlZDogXCJwZS1idXR0b24tLWRpc2FibGVkXCIsXG4gIGRyb3Bkb3duQ2xvc2VkOiBcInBlLWJ1dHRvbi0tZHJvcGRvd24tY2xvc2VkXCIsXG4gIGRyb3Bkb3duT3BlbjogXCJwZS1idXR0b24tLWRyb3Bkb3duLW9wZW5cIixcbiAgZXh0cmFXaWRlOiBcInBlLWJ1dHRvbi0tZXh0cmEtd2lkZVwiLFxuICBoYXNEcm9wZG93bjogXCJwZS1idXR0b24tLWRyb3Bkb3duXCIsXG4gIGhpZ2hMYWJlbDogXCJwZS1idXR0b24tLWhpZ2gtbGFiZWxcIixcbiAgaW5hY3RpdmU6IFwicGUtYnV0dG9uLS1pbmFjdGl2ZVwiLFxuICByYWlzZWQ6IFwicGUtYnV0dG9uLS1yYWlzZWRcIixcbiAgc2VsZWN0ZWQ6IFwicGUtYnV0dG9uLS1zZWxlY3RlZFwiLFxuICBzZXBhcmF0b3JBdFN0YXJ0OiBcInBlLWJ1dHRvbi0tc2VwYXJhdG9yLXN0YXJ0XCIsXG4gIGhhc0hvdmVyOiBcInBlLWJ1dHRvbi0taGFzLWhvdmVyXCJcbn07XG5cbnZhciBhY3Rpb25MYXlvdXRDbGFzc2VzID0ge1xuICBob3Jpem9udGFsOiBjbGFzc2VzLmFjdGlvbnNIb3Jpem9udGFsLFxuICB2ZXJ0aWNhbDogY2xhc3Nlcy5hY3Rpb25zVmVydGljYWwsXG4gIGp1c3RpZmllZDogY2xhc3Nlcy5hY3Rpb25zSnVzdGlmaWVkXG59O1xuXG52YXIgYWN0aW9uQ2xhc3NGb3JMYXlvdXQgPSBmdW5jdGlvbiBhY3Rpb25DbGFzc0ZvckxheW91dCgpIHtcbiAgdmFyIGxheW91dCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogXCJob3Jpem9udGFsXCI7XG4gIHJldHVybiBhY3Rpb25MYXlvdXRDbGFzc2VzW2xheW91dF07XG59O1xuXG52YXIgX0NhcmRBY3Rpb25zID0gZnVuY3Rpb24gX0NhcmRBY3Rpb25zKF9yZWYpIHtcbiAgdmFyIGggPSBfcmVmLmgsXG4gICAgICBhID0gX3JlZi5hLFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgW1wiaFwiLCBcImFcIl0pO1xuXG4gIHZhciBjb21wb25lbnRQcm9wcyA9IF9leHRlbmRzKHt9LCBmaWx0ZXJTdXBwb3J0ZWRBdHRyaWJ1dGVzKHByb3BzKSwgcHJvcHMudGVzdElkICYmIHtcbiAgICBcImRhdGEtdGVzdC1pZFwiOiBwcm9wcy50ZXN0SWRcbiAgfSwge1xuICAgIGNsYXNzTmFtZTogW2NsYXNzZXMuYWN0aW9ucywgcHJvcHMubGF5b3V0ICE9PSBcInZlcnRpY2FsXCIgPyBidXR0b25DbGFzc2VzLnJvdyA6IG51bGwsIGFjdGlvbkNsYXNzRm9yTGF5b3V0KHByb3BzLmxheW91dCksIHByb3BzLmJvcmRlciB8fCBwcm9wcy5ib3JkZXJlZCA/IGNsYXNzZXMuYWN0aW9uc0JvcmRlciA6IG51bGwsIHByb3BzLnRpZ2h0ID8gY2xhc3Nlcy5hY3Rpb25zVGlnaHQgOiBudWxsLCBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHNbYVtcImNsYXNzXCJdXV0uam9pbihcIiBcIilcbiAgfSwgcHJvcHMuZXZlbnRzKTtcblxuICB2YXIgY29udGVudCA9IHByb3BzLmNvbnRlbnQgfHwgcHJvcHMuY2hpbGRyZW47XG4gIHJldHVybiBoKHByb3BzLmVsZW1lbnQgfHwgXCJkaXZcIiwgY29tcG9uZW50UHJvcHMsIGNvbnRlbnQpO1xufTtcblxudmFyIF9DYXJkUHJpbWFyeSA9IGZ1bmN0aW9uIF9DYXJkUHJpbWFyeShfcmVmKSB7XG4gIHZhciBoID0gX3JlZi5oLFxuICAgICAgYSA9IF9yZWYuYSxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImhcIiwgXCJhXCJdKTtcblxuICB2YXIgcHJpbWFyeUhhc01lZGlhID0gQXJyYXkuaXNBcnJheShwcm9wcy5jb250ZW50KSA/IHByb3BzLmNvbnRlbnQucmVkdWNlKGZ1bmN0aW9uICh0b3RhbCwgY3VycmVudCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhjdXJyZW50KVswXSA9PT0gXCJtZWRpYVwiID8gdHJ1ZSA6IHRvdGFsO1xuICB9LCBmYWxzZSkgOiBwcm9wcy5tZWRpYSB8fCBmYWxzZTtcblxuICB2YXIgY29tcG9uZW50UHJvcHMgPSBfZXh0ZW5kcyh7fSwgZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyhwcm9wcyksIHByb3BzLnRlc3RJZCAmJiB7XG4gICAgXCJkYXRhLXRlc3QtaWRcIjogcHJvcHMudGVzdElkXG4gIH0sIHtcbiAgICBjbGFzc05hbWU6IFtjbGFzc2VzLnByaW1hcnksIHByb3BzLnRpZ2h0ID8gY2xhc3Nlcy5wcmltYXJ5VGlnaHQgOiBudWxsLCBwcmltYXJ5SGFzTWVkaWEgPyBjbGFzc2VzLnByaW1hcnlIYXNNZWRpYSA6IG51bGwsIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wc1thW1wiY2xhc3NcIl1dXS5qb2luKFwiIFwiKVxuICB9LCBwcm9wcy5ldmVudHMpO1xuXG4gIHZhciBkaXNwYXRjaGVyID0gcHJvcHMuZGlzcGF0Y2hlcjtcbiAgdmFyIHByaW1hcnlEaXNwYXRjaCA9IHtcbiAgICB0aXRsZTogZnVuY3Rpb24gdGl0bGUocEF0dHJzKSB7XG4gICAgICByZXR1cm4gcEF0dHJzLmF0dHJzIC8vIE1pdGhyaWxcbiAgICAgIHx8IHBBdHRycy5wcm9wcyAvLyBSZWFjdFxuICAgICAgPyBwQXR0cnMgfHwgcEF0dHJzLnByb3BzIDogaChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy50aXRsZSxcbiAgICAgICAgc3R5bGU6IHBBdHRycy5zdHlsZVxuICAgICAgfSwgW3BBdHRycy50aXRsZSwgcEF0dHJzLnN1YnRpdGxlID8gaChcImRpdlwiLCB7XG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5zdWJ0aXRsZVxuICAgICAgfSwgcEF0dHJzLnN1YnRpdGxlKSA6IG51bGxdKTtcbiAgICB9LFxuICAgIG1lZGlhOiBmdW5jdGlvbiBtZWRpYShwQXR0cnMpIHtcbiAgICAgIHJldHVybiBoKFwiZGl2XCIsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLnByaW1hcnlNZWRpYSxcbiAgICAgICAgc3R5bGU6IHBBdHRycy5zdHlsZVxuICAgICAgfSwgZGlzcGF0Y2hlcih7XG4gICAgICAgIG1lZGlhOiBwQXR0cnNcbiAgICAgIH0pKTtcbiAgICB9LFxuICAgIGFjdGlvbnM6IGZ1bmN0aW9uIGFjdGlvbnMocEF0dHJzKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2hlcih7XG4gICAgICAgIGFjdGlvbnM6IHBBdHRyc1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICB2YXIgY29udGVudCA9IEFycmF5LmlzQXJyYXkocHJvcHMuY29udGVudCkgPyBwcm9wcy5jb250ZW50Lm1hcChmdW5jdGlvbiAoYmxvY2spIHtcbiAgICB2YXIga2V5ID0gT2JqZWN0LmtleXMoYmxvY2spWzBdO1xuICAgIHZhciBwQXR0cnMgPSBibG9ja1trZXldO1xuICAgIHJldHVybiBwcmltYXJ5RGlzcGF0Y2hba2V5XSA/IHByaW1hcnlEaXNwYXRjaFtrZXldKHBBdHRycykgOiBibG9jaztcbiAgfSkgOiBbcHJvcHMudGl0bGUgPyBwcmltYXJ5RGlzcGF0Y2gudGl0bGUoe1xuICAgIHRpdGxlOiBwcm9wcy50aXRsZSxcbiAgICBzdWJ0aXRsZTogcHJvcHMuc3VidGl0bGVcbiAgfSkgOiBudWxsLCBwcm9wcy5tZWRpYSA/IHByaW1hcnlEaXNwYXRjaC5tZWRpYShwcm9wcy5tZWRpYSkgOiBudWxsLCBwcm9wcy5hY3Rpb25zID8gcHJpbWFyeURpc3BhdGNoLmFjdGlvbnMocHJvcHMuYWN0aW9ucykgOiBudWxsLCBwcm9wcy5jb250ZW50XTtcbiAgcmV0dXJuIGgocHJvcHMuZWxlbWVudCB8fCBcImRpdlwiLCBjb21wb25lbnRQcm9wcywgY29udGVudCk7XG59O1xuXG5leHBvcnQgeyBfQ2FyZCwgX0NhcmRBY3Rpb25zLCBfQ2FyZE1lZGlhLCBfQ2FyZFByaW1hcnkgfTtcbiIsImltcG9ydCB7IF9DYXJkQWN0aW9ucywgX0NhcmRNZWRpYSwgX0NhcmRQcmltYXJ5LCBfQ2FyZCB9IGZyb20gJ3BvbHl0aGVuZS1jb3JlLWNhcmQnO1xuaW1wb3J0IHsgY2FzdCwgaCwgYSwgdXNlU3RhdGUsIHVzZUVmZmVjdCwgZ2V0UmVmIH0gZnJvbSAnY3lhbm8tbWl0aHJpbCc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAncG9seXRoZW5lLW1pdGhyaWwtaWNvbic7XG5pbXBvcnQgeyBMaXN0VGlsZSB9IGZyb20gJ3BvbHl0aGVuZS1taXRocmlsLWxpc3QtdGlsZSc7XG5pbXBvcnQgeyBTaGFkb3cgfSBmcm9tICdwb2x5dGhlbmUtbWl0aHJpbC1zaGFkb3cnO1xuXG52YXIgQ2FyZEFjdGlvbnMgPSBjYXN0KF9DYXJkQWN0aW9ucywge1xuICBoOiBoLFxuICBhOiBhXG59KTtcbkNhcmRBY3Rpb25zW1wiZGlzcGxheU5hbWVcIl0gPSBcIkNhcmRBY3Rpb25zXCI7XG5cbnZhciBDYXJkTWVkaWEgPSBjYXN0KF9DYXJkTWVkaWEsIHtcbiAgaDogaCxcbiAgYTogYSxcbiAgdXNlU3RhdGU6IHVzZVN0YXRlLFxuICB1c2VFZmZlY3Q6IHVzZUVmZmVjdCxcbiAgZ2V0UmVmOiBnZXRSZWZcbn0pO1xuQ2FyZE1lZGlhW1wiZGlzcGxheU5hbWVcIl0gPSBcIkNhcmRNZWRpYVwiO1xuXG52YXIgQ2FyZFByaW1hcnkgPSBjYXN0KF9DYXJkUHJpbWFyeSwge1xuICBoOiBoLFxuICBhOiBhXG59KTtcbkNhcmRQcmltYXJ5W1wiZGlzcGxheU5hbWVcIl0gPSBcIkNhcmRQcmltYXJ5XCI7XG5cbnZhciBDYXJkID0gY2FzdChfQ2FyZCwge1xuICBoOiBoLFxuICBhOiBhLFxuICBDYXJkQWN0aW9uczogQ2FyZEFjdGlvbnMsXG4gIENhcmRNZWRpYTogQ2FyZE1lZGlhLFxuICBDYXJkUHJpbWFyeTogQ2FyZFByaW1hcnksXG4gIEljb246IEljb24sXG4gIExpc3RUaWxlOiBMaXN0VGlsZSxcbiAgU2hhZG93OiBTaGFkb3dcbn0pO1xuQ2FyZFtcImRpc3BsYXlOYW1lXCJdID0gXCJDYXJkXCI7XG5cbmV4cG9ydCB7IENhcmQgfTtcbiIsImltcG9ydCBtIGZyb20gXCJtaXRocmlsXCI7XG5pbXBvcnQgeyB2YXJzIH0gZnJvbSBcInBvbHl0aGVuZS10aGVtZVwiO1xuaW1wb3J0IGljb25LZXlib2FyZEFycm93VXAgZnJvbSBcIm1tc3ZnL2dvb2dsZS9tc3ZnL2hhcmR3YXJlL2tleWJvYXJkLWFycm93LXVwXCI7XG5pbXBvcnQgaWNvbktleWJvYXJkQXJyb3dEb3duIGZyb20gXCJtbXN2Zy9nb29nbGUvbXN2Zy9oYXJkd2FyZS9rZXlib2FyZC1hcnJvdy1kb3duXCI7XG5pbXBvcnQgeyBCdXR0b24sIENhcmQsIEljb24sIFNWRyB9IGZyb20gXCJwb2x5dGhlbmUtbWl0aHJpbFwiO1xuaW1wb3J0IHsgQnV0dG9uQ1NTIH0gZnJvbSBcInBvbHl0aGVuZS1jc3NcIjtcblxudHlwZSBDYW5kaWRhdGVSZWNvcmQgPSB7IHNlbGtleTogc3RyaW5nOyBjYW5kaWRhdGU6IHN0cmluZyB9O1xuXG5jb25zdCBBVFRSX09GRlNFVF9IX0RFRkFVTFQ6IHN0cmluZyA9IFwiMHB4XCI7XG5jb25zdCBBVFRSX09GRlNFVF9WX0RFRkFVTFQ6IHN0cmluZyA9IFwiMHB4XCI7XG5jb25zdCBBVFRSX1NIT1dfREVGQVVMVDogYm9vbGVhbiA9IGZhbHNlO1xuY29uc3QgQVRUUl9WRVJUSUNBTF9TRUxFQ1RJT05fREVGQVVMVDogYm9vbGVhbiA9IGZhbHNlO1xuY29uc3QgQVRUUl9JTUVfTkFNRV9ERUZBVUxUOiBzdHJpbmcgPSBcIlwiO1xuY29uc3QgQVRUUl9LRVlOQU1FU19ERUZBVUxUOiBzdHJpbmcgPSBcIlwiO1xuY29uc3QgQVRUUl9DQU5ESURBVEVTX0RFRkFVTFQgPSBbXSBhcyBDYW5kaWRhdGVSZWNvcmRbXTtcbmNvbnN0IEFUVFJfQ1VSUkVOVF9QQUdFX0RFRkFVTFQ6IG51bWJlciA9IDE7XG5jb25zdCBBVFRSX1RPVEFMX1BBR0VTX0RFRkFVTFQ6IG51bWJlciA9IDE7XG5cbmludGVyZmFjZSBDYW5kaWRhdGVTZWxlY3RlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICBzZWxrZXk6IHN0cmluZztcbiAgY2FuZGlkYXRlOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBDYW5kaWRhdGVzQXR0cnMge1xuICBvZmZzZXRIPzogc3RyaW5nO1xuICBvZmZzZXRWPzogc3RyaW5nO1xuICBzaG93PzogYm9vbGVhbjtcbiAgdmVydGljYWxTZWxlY3Rpb24/OiBib29sZWFuO1xuICBpbWVOYW1lPzogc3RyaW5nO1xuICBrZXluYW1lcz86IHN0cmluZztcbiAgY2FuZGlkYXRlcz86IENhbmRpZGF0ZVJlY29yZFtdO1xuICBjdXJyZW50UGFnZT86IG51bWJlcjtcbiAgdG90YWxQYWdlcz86IG51bWJlcjtcbiAgZXZlbnRzPzoge1xuICAgIG9uY2FuZGlkYXRlc2VsZWN0ZWQ/KGU6IENhbmRpZGF0ZVNlbGVjdGVkRXZlbnQpOiB2b2lkO1xuICAgIG9ucHJldnBhZ2U/KGU6IEV2ZW50KTogdm9pZDtcbiAgICBvbm5leHRwYWdlPyhlOiBFdmVudCk6IHZvaWQ7XG4gIH07XG59XG5cbkJ1dHRvbkNTUy5hZGRTdHlsZShcIi5jaW5vdGVwYWQtY2FuZGlkYXRlcy1idXR0b25cIiwge1xuICBtaW5fd2lkdGg6IDIgKiB2YXJzLmdyaWRfdW5pdF9jb21wb25lbnQsXG4gIHBhZGRpbmdfaDogMC41ICogdmFycy5ncmlkX3VuaXQsXG4gIHRleHRfdHJhbnNmb3JtOiBcIm5vbmVcIixcbiAgb3V0ZXJfcGFkZGluZ192OiAxLFxufSk7XG5cbmNvbnN0IENhbmRpZGF0ZXM6IG0uQ29tcG9uZW50PENhbmRpZGF0ZXNBdHRycz4gPSB7XG4gIHZpZXcodm5vZGUpIHtcbiAgICByZXR1cm4gbShcbiAgICAgIFwiLnBlLWFic29sdXRlXCIgK1xuICAgICAgICAodm5vZGUuYXR0cnMuc2hvdyA/PyBBVFRSX1NIT1dfREVGQVVMVCA/IFwiXCIgOiBcIi5wZS1oaWRkZW5cIiksXG4gICAgICB7XG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgXCJ6LWluZGV4XCI6IFwiOTk5XCIsXG4gICAgICAgICAgdG9wOiB2bm9kZS5hdHRycy5vZmZzZXRWID8/IEFUVFJfT0ZGU0VUX1ZfREVGQVVMVCxcbiAgICAgICAgICBsZWZ0OiB2bm9kZS5hdHRycy5vZmZzZXRIID8/IEFUVFJfT0ZGU0VUX0hfREVGQVVMVCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBtKENhcmQsIHtcbiAgICAgICAgY29udGVudDogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgY29udGVudDogbShcImRpdlwiLCB7IHN0eWxlOiB7IFwibWluLWhlaWdodFwiOiBcIjNlbVwiIH0gfSwgW1xuICAgICAgICAgICAgICAgIG0oXCJkaXYubGF5b3V0XCIsIFtcbiAgICAgICAgICAgICAgICAgIG0oXCJzcGFuXCIsIHZub2RlLmF0dHJzLmltZU5hbWUgPz8gQVRUUl9JTUVfTkFNRV9ERUZBVUxUKSxcbiAgICAgICAgICAgICAgICAgIG0oXCJzcGFuLnBlLWlubGluZS1ibG9ja1wiLCB7IHN0eWxlOiB7IHdpZHRoOiBcIjFlbVwiIH0gfSksXG4gICAgICAgICAgICAgICAgICBtKFxuICAgICAgICAgICAgICAgICAgICBcInNwYW4uZmxleC5vbmVcIixcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuYXR0cnMua2V5bmFtZXMgPz8gQVRUUl9LRVlOQU1FU19ERUZBVUxUXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgbShcInNwYW4ucGUtaW5saW5lLWJsb2NrXCIsIHsgc3R5bGU6IHsgd2lkdGg6IFwiMWVtXCIgfSB9KSxcbiAgICAgICAgICAgICAgICAgIG0oXG4gICAgICAgICAgICAgICAgICAgIFwic3BhblwiLFxuICAgICAgICAgICAgICAgICAgICB2bm9kZS5hdHRycy50b3RhbFBhZ2VzID4gMVxuICAgICAgICAgICAgICAgICAgICAgID8gYCgke3Zub2RlLmF0dHJzLmN1cnJlbnRQYWdlfS8ke3Zub2RlLmF0dHJzLnRvdGFsUGFnZXN9KWBcbiAgICAgICAgICAgICAgICAgICAgICA6IFwiXCJcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgbShcbiAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB2bm9kZS5hdHRycy5jYW5kaWRhdGVzLm1hcCgodikgPT5cbiAgICAgICAgICAgICAgICAgICAgICBtKFxuICAgICAgICAgICAgICAgICAgICAgICAgQnV0dG9uLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjaW5vdGVwYWQtY2FuZGlkYXRlcy1idXR0b24gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh2bm9kZS5hdHRycy52ZXJ0aWNhbFNlbGVjdGlvbiA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFUVFJfVkVSVElDQUxfU0VMRUNUSU9OX0RFRkFVTFRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gXCJwZS1ibG9ja1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwicGUtaW5saW5lXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2bm9kZS5hdHRycy5ldmVudHM/Lm9uY2FuZGlkYXRlc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3NlOiBDYW5kaWRhdGVTZWxlY3RlZEV2ZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vsa2V5OiB2LnNlbGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGU6IHYuY2FuZGlkYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS5hdHRycy5ldmVudHM/Lm9uY2FuZGlkYXRlc2VsZWN0ZWQoY3NlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNwYW4ucGUtaW5saW5lLWJsb2NrXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IFwiMWVtXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dC1hbGlnblwiOiBcInJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImRhcmtncmV5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdi5zZWxrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbShcInNwYW5cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdm5vZGUuYXR0cnMudmVydGljYWxTZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcIjFlbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJhdXRvXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG0oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzcGFuLmZsZXgub25lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdHlsZTogeyBcInRleHQtYWxpZ25cIjogXCJsZWZ0XCIgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYuY2FuZGlkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgKHZub2RlLmF0dHJzLnRvdGFsUGFnZXMgPz8gQVRUUl9UT1RBTF9QQUdFU19ERUZBVUxUKSA+IDFcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBtKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBCdXR0b24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiY2lub3RlcGFkLWNhbmRpZGF0ZXMtYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS5hdHRycy5ldmVudHM/Lm9ucHJldnBhZ2UgPz8gKCgpID0+IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEljb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzaXplOiBcInNtYWxsXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFNWRywgaWNvbktleWJvYXJkQXJyb3dVcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBtKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBCdXR0b24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiY2lub3RlcGFkLWNhbmRpZGF0ZXMtYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS5hdHRycy5ldmVudHM/Lm9ubmV4dHBhZ2UgPz8gKCgpID0+IHt9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEljb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzaXplOiBcInNtYWxsXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFNWRywgaWNvbktleWJvYXJkQXJyb3dEb3duKVxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgfSkoKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSlcbiAgICApO1xuICB9LFxufTtcblxuZXhwb3J0IHsgQ2FuZGlkYXRlcywgQ2FuZGlkYXRlUmVjb3JkIH07XG4iLCJpbXBvcnQgeyBDaW4gfSBmcm9tIFwiLi4vY2luL2NpblwiO1xuaW1wb3J0IG0gZnJvbSBcIm1pdGhyaWxcIjtcbmltcG9ydCB7IFRleHRGaWVsZCwgb25DaGFuZ2VUZXh0RmllbGRTdGF0ZSB9IGZyb20gXCJwb2x5dGhlbmUtbWl0aHJpbFwiO1xuaW1wb3J0IHsgT3B0aW9ucyBhcyBUZXh0RmllbGRPcHRpb25zIH0gZnJvbSBcInBvbHl0aGVuZS1jb3JlLXRleHRmaWVsZFwiO1xuaW1wb3J0IGdldENhcmV0Q29vcmRpbmF0ZXMgZnJvbSBcInRleHRhcmVhLWNhcmV0XCI7XG5pbXBvcnQgeyBDYW5kaWRhdGVzLCBDYW5kaWRhdGVSZWNvcmQgfSBmcm9tIFwiLi9jYW5kaWRhdGVzXCI7XG5cbmNvbnN0IEFUVFJfS0VZTkFNRVNfREVGQVVMVDogc3RyaW5nID0gXCJcIjtcbmNvbnN0IEFUVFJfQ0FORElEQVRFU19ERUZBVUxUOiBzdHJpbmdbXSA9IFtdIGFzIHN0cmluZ1tdO1xuXG5pbnRlcmZhY2UgQ2luVGV4dEFyZWFBdHRycyB7XG4gIGFjdGl2ZUNpbj86IENpbjtcbiAga2V5bmFtZXM/OiBzdHJpbmc7XG4gIGNhbmRpZGF0ZXM/OiBzdHJpbmdbXTtcbiAgbmVlZENhbmRpZGF0ZXNTaXplQ2hlY2tpbmc/OiBib29sZWFuO1xuICBvbkNoYW5nZT8oc3RhdGU6IG9uQ2hhbmdlVGV4dEZpZWxkU3RhdGUpOiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgQ2luVGV4dEFyZWFTdGF0ZSB7XG4gIGNhbmRpZGF0ZXNXaWR0aDogbnVtYmVyO1xuICBjYW5kaWRhdGVzSGVpZ2h0OiBudW1iZXI7XG4gIG9uQ2hhbmdlVGV4dEZpZWxkU3RhdGU/OiBvbkNoYW5nZVRleHRGaWVsZFN0YXRlO1xuICBwcmV2S2V5bmFtZXM6IHN0cmluZztcbiAgcHJldkNhbmRpZGF0ZXM6IHN0cmluZ1tdO1xuICBwcmV2Q3VycmVudFBhZ2U6IG51bWJlcjtcbiAgcHJldlRvdGFsUGFnZXM6IG51bWJlcjtcbiAgcHJldkNhbmRpZGF0ZXNPZmZzZXRIOiBudW1iZXI7XG4gIHByZXZDYW5kaWRhdGVzT2Zmc2V0VjogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBnZXRDYW5kaWRhdGVzTGlzdE9mZnNldHMoXG4gIGNhbmRpZGF0ZXNXaWR0aDogbnVtYmVyLFxuICBjYW5kaWRhdGVzSGVpZ2h0OiBudW1iZXIsXG4gIGtleW5hbWVzOiBzdHJpbmcsXG4gIHRleHRBcmVhRWw/OiBIVE1MRWxlbWVudCxcbiAgbmVlZENhbmRpZGF0ZXNTaXplQ2hlY2tpbmc6IGJvb2xlYW4gPSBmYWxzZVxuKTogeyBvZmZzZXRIOiBudW1iZXI7IG9mZnNldFY6IG51bWJlciB9IHtcbiAgbGV0IG9mZnNldEgsIG9mZnNldFY7XG5cbiAgaWYgKFxuICAgICFuZWVkQ2FuZGlkYXRlc1NpemVDaGVja2luZyAmJlxuICAgIGtleW5hbWVzLmxlbmd0aCA+IDAgJiZcbiAgICB0ZXh0QXJlYUVsICYmXG4gICAgdGV4dEFyZWFFbCBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnRcbiAgKSB7XG4gICAgY29uc3QgdGFFbCA9IHRleHRBcmVhRWwgYXMgSFRNTFRleHRBcmVhRWxlbWVudDtcblxuICAgIGNvbnN0IHsgdG9wOiB0YVRvcCwgd2lkdGg6IHRhV2lkdGggfSA9IHRhRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgeyB0b3A6IGNhcmV0VG9wLCBsZWZ0OiBjYXJldExlZnQgfSA9IGdldENhcmV0Q29vcmRpbmF0ZXMoXG4gICAgICB0YUVsLFxuICAgICAgdGFFbC5zZWxlY3Rpb25FbmRcbiAgICApO1xuICAgIGNvbnN0IHsgc2Nyb2xsVG9wLCBzY3JvbGxMZWZ0IH0gPSB0YUVsO1xuXG4gICAgb2Zmc2V0SCA9IGNhcmV0TGVmdCAtIHNjcm9sbExlZnQ7XG4gICAgb2Zmc2V0ViA9IGNhcmV0VG9wICsgMzYgLSBzY3JvbGxUb3A7XG5cbiAgICBpZiAob2Zmc2V0SCAtIHNjcm9sbExlZnQgKyBjYW5kaWRhdGVzV2lkdGggPiB0YVdpZHRoIC0gNSkge1xuICAgICAgb2Zmc2V0SCA9IHNjcm9sbExlZnQgKyB0YVdpZHRoIC0gY2FuZGlkYXRlc1dpZHRoIC0gNTtcbiAgICB9XG4gICAgaWYgKHRhVG9wICsgb2Zmc2V0ViArIGNhbmRpZGF0ZXNIZWlnaHQgPiB3aW5kb3cuaW5uZXJIZWlnaHQgKyAxMikge1xuICAgICAgb2Zmc2V0ViA9IGNhcmV0VG9wIC0gc2Nyb2xsVG9wIC0gY2FuZGlkYXRlc0hlaWdodCArIDEyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRIID0gMDtcbiAgICBvZmZzZXRWID0gMDtcbiAgfVxuICByZXR1cm4geyBvZmZzZXRILCBvZmZzZXRWIH07XG59XG5cbmNvbnN0IENpblRleHRBcmVhOiBtLkNvbXBvbmVudDxDaW5UZXh0QXJlYUF0dHJzLCBDaW5UZXh0QXJlYVN0YXRlPiA9IHtcbiAgb25pbml0KHZub2RlKSB7XG4gICAgdm5vZGUuc3RhdGUuY2FuZGlkYXRlc1dpZHRoID0gMDtcbiAgICB2bm9kZS5zdGF0ZS5jYW5kaWRhdGVzSGVpZ2h0ID0gMDtcbiAgICB2bm9kZS5zdGF0ZS5wcmV2S2V5bmFtZXMgPSBcIlwiO1xuICAgIHZub2RlLnN0YXRlLnByZXZDYW5kaWRhdGVzID0gW10gYXMgc3RyaW5nW107XG4gICAgdm5vZGUuc3RhdGUucHJldkN1cnJlbnRQYWdlID0gMDtcbiAgICB2bm9kZS5zdGF0ZS5wcmV2VG90YWxQYWdlcyA9IDA7XG4gICAgdm5vZGUuc3RhdGUucHJldkNhbmRpZGF0ZXNPZmZzZXRIID0gMDtcbiAgICB2bm9kZS5zdGF0ZS5wcmV2Q2FuZGlkYXRlc09mZnNldFYgPSAwO1xuICB9LFxuICBvbnVwZGF0ZSh2bm9kZSkge1xuICAgIGlmICh2bm9kZS5hdHRycy5uZWVkQ2FuZGlkYXRlc1NpemVDaGVja2luZykge1xuICAgICAgaWYgKHZub2RlLmRvbSkge1xuICAgICAgICBjb25zdCBkb20gPSB2bm9kZS5kb20gYXMgRWxlbWVudDtcbiAgICAgICAgY29uc3QgY2FyZEVsID0gZG9tLnF1ZXJ5U2VsZWN0b3IoXCIuY2FuZGlkYXRlcy10ZW1wbGF0ZSAucGUtY2FyZFwiKTtcbiAgICAgICAgaWYgKGNhcmRFbCAmJiBjYXJkRWwgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gKFxuICAgICAgICAgICAgY2FyZEVsIGFzIEhUTUxFbGVtZW50XG4gICAgICAgICAgKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICB2bm9kZS5zdGF0ZS5jYW5kaWRhdGVzV2lkdGggPSB3aWR0aDtcbiAgICAgICAgICB2bm9kZS5zdGF0ZS5jYW5kaWRhdGVzSGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBtLnJlZHJhdygpO1xuICAgIH1cbiAgfSxcbiAgdmlldyh2bm9kZSkge1xuICAgIGNvbnN0IHsgb2Zmc2V0SCwgb2Zmc2V0ViB9ID0gZ2V0Q2FuZGlkYXRlc0xpc3RPZmZzZXRzKFxuICAgICAgdm5vZGUuc3RhdGUuY2FuZGlkYXRlc1dpZHRoLFxuICAgICAgdm5vZGUuc3RhdGUuY2FuZGlkYXRlc0hlaWdodCxcbiAgICAgIHZub2RlLmF0dHJzLmtleW5hbWVzID8/IEFUVFJfS0VZTkFNRVNfREVGQVVMVCxcbiAgICAgIHZub2RlLnN0YXRlLm9uQ2hhbmdlVGV4dEZpZWxkU3RhdGU/LmVsLFxuICAgICAgdm5vZGUuYXR0cnMubmVlZENhbmRpZGF0ZXNTaXplQ2hlY2tpbmdcbiAgICApO1xuXG4gICAgLy8gY29uc3RydWN0IHRoZSByZXN1bHQgVm5vZGVcbiAgICBsZXQgdGV4dEZpZWxkQXR0cnM6IFRleHRGaWVsZE9wdGlvbnMgPSB7XG4gICAgICBpZDogXCJ0YV9jaW5vdGVwYWRcIixcbiAgICAgIGxhYmVsOiBcIuiri+i8uOWFpeKAplwiLFxuICAgICAgbXVsdGlMaW5lOiB0cnVlLFxuICAgICAgcm93czogMjAsXG4gICAgICBvbkNoYW5nZTogKHN0YXRlOiBvbkNoYW5nZVRleHRGaWVsZFN0YXRlKSA9PiB7XG4gICAgICAgIHZub2RlLnN0YXRlLm9uQ2hhbmdlVGV4dEZpZWxkU3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgaWYgKHZub2RlLmF0dHJzLm9uQ2hhbmdlKSB7XG4gICAgICAgICAgdm5vZGUuYXR0cnMub25DaGFuZ2Uoc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBsZXQgY2hpbGRFbGVtZW50czogbS5Wbm9kZTxhbnksIGFueT5bXSA9IFttKFRleHRGaWVsZCwgdGV4dEZpZWxkQXR0cnMpXTtcblxuICAgIGlmICh2bm9kZS5hdHRycy5hY3RpdmVDaW4pIHtcbiAgICAgIGNvbnN0IGNpbiA9IHZub2RlLmF0dHJzLmFjdGl2ZUNpbiBhcyBDaW47XG5cbiAgICAgIGNvbnN0IGtleW5hbWVzID0gdm5vZGUuYXR0cnMua2V5bmFtZXMgPz8gQVRUUl9LRVlOQU1FU19ERUZBVUxUO1xuICAgICAgY29uc3QgY2FuZGlkYXRlcyA9IHZub2RlLmF0dHJzLmNhbmRpZGF0ZXMgPz8gQVRUUl9DQU5ESURBVEVTX0RFRkFVTFQ7XG4gICAgICBjb25zdCBjdXJyZW50UGFnZSA9IGNpbi5jdXJyZW50UGFnZTtcbiAgICAgIGNvbnN0IHRvdGFsUGFnZXMgPSBjaW4udG90YWxQYWdlO1xuXG4gICAgICBjb25zdCBkaXNwbGF5S2V5bmFtZXMgPSB2bm9kZS5hdHRycy5uZWVkQ2FuZGlkYXRlc1NpemVDaGVja2luZ1xuICAgICAgICA/IHZub2RlLnN0YXRlLnByZXZLZXluYW1lc1xuICAgICAgICA6IGtleW5hbWVzO1xuICAgICAgY29uc3QgZGlzcGxheUNhbmRpZGF0ZXMgPSB2bm9kZS5hdHRycy5uZWVkQ2FuZGlkYXRlc1NpemVDaGVja2luZ1xuICAgICAgICA/IHZub2RlLnN0YXRlLnByZXZDYW5kaWRhdGVzXG4gICAgICAgIDogY2FuZGlkYXRlcztcbiAgICAgIGNvbnN0IGRpc3BsYXlDdXJyZW50UGFnZSA9IHZub2RlLmF0dHJzLm5lZWRDYW5kaWRhdGVzU2l6ZUNoZWNraW5nXG4gICAgICAgID8gdm5vZGUuc3RhdGUucHJldkN1cnJlbnRQYWdlXG4gICAgICAgIDogY3VycmVudFBhZ2U7XG4gICAgICBjb25zdCBkaXNwbGF5VG90YWxQYWdlcyA9IHZub2RlLmF0dHJzLm5lZWRDYW5kaWRhdGVzU2l6ZUNoZWNraW5nXG4gICAgICAgID8gdm5vZGUuc3RhdGUucHJldlRvdGFsUGFnZXNcbiAgICAgICAgOiB0b3RhbFBhZ2VzO1xuICAgICAgY29uc3QgZGlzcGxheU9mZnNldEggPSB2bm9kZS5hdHRycy5uZWVkQ2FuZGlkYXRlc1NpemVDaGVja2luZ1xuICAgICAgICA/IHZub2RlLnN0YXRlLnByZXZDYW5kaWRhdGVzT2Zmc2V0SFxuICAgICAgICA6IG9mZnNldEg7XG4gICAgICBjb25zdCBkaXNwbGF5T2Zmc2V0ViA9IHZub2RlLmF0dHJzLm5lZWRDYW5kaWRhdGVzU2l6ZUNoZWNraW5nXG4gICAgICAgID8gdm5vZGUuc3RhdGUucHJldkNhbmRpZGF0ZXNPZmZzZXRWXG4gICAgICAgIDogb2Zmc2V0VjtcblxuICAgICAgdGV4dEZpZWxkQXR0cnMuZXZlbnRzID0ge1xuICAgICAgICBvbmJlZm9yZWlucHV0OiAoZTogSW5wdXRFdmVudCkgPT4ge1xuICAgICAgICAgIGlmIChlLmlucHV0VHlwZSA9PSBcImluc2VydFRleHRcIikge1xuICAgICAgICAgICAgY2luLnB1c2hLZXkoZS5kYXRhIGFzIHN0cmluZyk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlLmlucHV0VHlwZSA9PSBcImRlbGV0ZUNvbnRlbnRCYWNrd2FyZFwiKSB7XG4gICAgICAgICAgICBpZiAoY2luLmRlbGV0ZUNvbnRlbnRCYWNrd2FyZCgpKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9ua2V5ZG93bjogKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICBpZiAoZS5rZXkgPT0gXCJFc2NhcGVcIikge1xuICAgICAgICAgICAgY2luLnJlc2V0S2V5cygpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT0gXCJQYWdlVXBcIikge1xuICAgICAgICAgICAgaWYgKGNpbi5wcmV2aW91c0NhbmRpZGF0ZUxpc3QoKSkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChlLmtleSA9PSBcIlBhZ2VEb3duXCIpIHtcbiAgICAgICAgICAgIGlmIChjaW4ubmV4dENhbmRpZGF0ZUxpc3QoKSkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY2hpbGRFbGVtZW50cy5wdXNoKFxuICAgICAgICBtKENhbmRpZGF0ZXMsIHtcbiAgICAgICAgICBvZmZzZXRIOiBTdHJpbmcoZGlzcGxheU9mZnNldEgpICsgXCJweFwiLFxuICAgICAgICAgIG9mZnNldFY6IFN0cmluZyhkaXNwbGF5T2Zmc2V0VikgKyBcInB4XCIsXG4gICAgICAgICAgc2hvdzogZGlzcGxheUNhbmRpZGF0ZXMubGVuZ3RoID4gMCB8fCBkaXNwbGF5S2V5bmFtZXMubGVuZ3RoID4gMCxcbiAgICAgICAgICB2ZXJ0aWNhbFNlbGVjdGlvbjogY2luLmZsYWdWZXJ0aWNhbFNlbGVjdGlvbixcbiAgICAgICAgICBpbWVOYW1lOiBjaW4uY25hbWUsXG4gICAgICAgICAga2V5bmFtZXM6IGRpc3BsYXlLZXluYW1lcyxcbiAgICAgICAgICBjYW5kaWRhdGVzOiAoKHNlbGtleSwgdmFsdWVzLCBwcmVwZW5kU3BhY2UpOiBDYW5kaWRhdGVSZWNvcmRbXSA9PlxuICAgICAgICAgICAgdmFsdWVzLm1hcCgodiwgaSkgPT4gKHtcbiAgICAgICAgICAgICAgc2Vsa2V5OlxuICAgICAgICAgICAgICAgIHByZXBlbmRTcGFjZSAmJiBpID09IDAgPyBcIiBcIiA6IHNlbGtleVtwcmVwZW5kU3BhY2UgPyBpIC0gMSA6IGldLFxuICAgICAgICAgICAgICBjYW5kaWRhdGU6IHYsXG4gICAgICAgICAgICB9KSkpKGNpbi5zZWxrZXksIGRpc3BsYXlDYW5kaWRhdGVzLCBjaW4uc3BhY2VTdHlsZSA9PSAxKSxcbiAgICAgICAgICBjdXJyZW50UGFnZTogZGlzcGxheUN1cnJlbnRQYWdlLFxuICAgICAgICAgIHRvdGFsUGFnZXM6IGRpc3BsYXlUb3RhbFBhZ2VzLFxuICAgICAgICAgIGV2ZW50czoge1xuICAgICAgICAgICAgb25jYW5kaWRhdGVzZWxlY3RlZDogKGUpID0+IGNpbi5wdXNoS2V5KGUuc2Vsa2V5KSxcbiAgICAgICAgICAgIG9ucHJldnBhZ2U6ICgpID0+IGNpbi5wcmV2aW91c0NhbmRpZGF0ZUxpc3QoKSxcbiAgICAgICAgICAgIG9ubmV4dHBhZ2U6ICgpID0+IGNpbi5uZXh0Q2FuZGlkYXRlTGlzdCgpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBjaGlsZEVsZW1lbnRzLnB1c2goXG4gICAgICAgIG0oXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwiY2FuZGlkYXRlcy10ZW1wbGF0ZVwiLFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgdmlzaWJpbGl0eTogXCJoaWRkZW5cIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtKENhbmRpZGF0ZXMsIHtcbiAgICAgICAgICAgIG9mZnNldEg6IFwiMHB4XCIsXG4gICAgICAgICAgICBvZmZzZXRWOiBcIjBweFwiLFxuICAgICAgICAgICAgc2hvdzogY2FuZGlkYXRlcy5sZW5ndGggPiAwIHx8IGtleW5hbWVzLmxlbmd0aCA+IDAsXG4gICAgICAgICAgICB2ZXJ0aWNhbFNlbGVjdGlvbjogY2luLmZsYWdWZXJ0aWNhbFNlbGVjdGlvbixcbiAgICAgICAgICAgIGltZU5hbWU6IGNpbi5jbmFtZSxcbiAgICAgICAgICAgIGtleW5hbWVzOiBrZXluYW1lcyxcbiAgICAgICAgICAgIGNhbmRpZGF0ZXM6ICgoc2Vsa2V5LCB2YWx1ZXMsIHByZXBlbmRTcGFjZSk6IENhbmRpZGF0ZVJlY29yZFtdID0+XG4gICAgICAgICAgICAgIHZhbHVlcy5tYXAoKHYsIGkpID0+ICh7XG4gICAgICAgICAgICAgICAgc2Vsa2V5OlxuICAgICAgICAgICAgICAgICAgcHJlcGVuZFNwYWNlICYmIGkgPT0gMFxuICAgICAgICAgICAgICAgICAgICA/IFwiIFwiXG4gICAgICAgICAgICAgICAgICAgIDogc2Vsa2V5W3ByZXBlbmRTcGFjZSA/IGkgLSAxIDogaV0sXG4gICAgICAgICAgICAgICAgY2FuZGlkYXRlOiB2LFxuICAgICAgICAgICAgICB9KSkpKGNpbi5zZWxrZXksIGNhbmRpZGF0ZXMsIGNpbi5zcGFjZVN0eWxlID09IDEpLFxuICAgICAgICAgICAgY3VycmVudFBhZ2U6IGN1cnJlbnRQYWdlLFxuICAgICAgICAgICAgdG90YWxQYWdlczogdG90YWxQYWdlcyxcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICApO1xuXG4gICAgICB2bm9kZS5zdGF0ZS5wcmV2S2V5bmFtZXMgPSBrZXluYW1lcztcbiAgICAgIHZub2RlLnN0YXRlLnByZXZDYW5kaWRhdGVzID0gY2FuZGlkYXRlcztcbiAgICAgIHZub2RlLnN0YXRlLnByZXZDdXJyZW50UGFnZSA9IGN1cnJlbnRQYWdlO1xuICAgICAgdm5vZGUuc3RhdGUucHJldlRvdGFsUGFnZXMgPSB0b3RhbFBhZ2VzO1xuICAgICAgdm5vZGUuc3RhdGUucHJldkNhbmRpZGF0ZXNPZmZzZXRIID0gb2Zmc2V0SDtcbiAgICAgIHZub2RlLnN0YXRlLnByZXZDYW5kaWRhdGVzT2Zmc2V0ViA9IG9mZnNldFY7XG4gICAgfVxuXG4gICAgcmV0dXJuIG0oXCJkaXZcIiwgeyBzdHlsZTogeyBwb3NpdGlvbjogXCJyZWxhdGl2ZVwiIH0gfSwgY2hpbGRFbGVtZW50cyk7XG4gIH0sXG59O1xuXG5leHBvcnQgeyBDaW5UZXh0QXJlYSB9O1xuIiwiaW1wb3J0IFwiLi9zdHlsZS50c1wiO1xuaW1wb3J0IHsgQ2luIH0gZnJvbSBcIi4vY2luL2NpblwiO1xuaW1wb3J0IHsgbG9hZEFsbEZyb21EQiwgbG9hZEZyb21TdHJlYW0sIGRlbGV0ZUZyb21EQiB9IGZyb20gXCIuL2Npbi9jaW5sb2FkZXJcIjtcbmltcG9ydCBtIGZyb20gXCJtaXRocmlsXCI7XG5pbXBvcnQge1xuICBUb29sYmFyLFxuICBUb29sYmFyVGl0bGUsXG4gIEJ1dHRvbixcbiAgRGlhbG9nLFxuICBvbkNoYW5nZVRleHRGaWVsZFN0YXRlLFxufSBmcm9tIFwicG9seXRoZW5lLW1pdGhyaWxcIjtcbmltcG9ydCB7IGFkZExheW91dFN0eWxlcywgYWRkVHlwb2dyYXBoeSB9IGZyb20gXCJwb2x5dGhlbmUtY3NzXCI7XG5pbXBvcnQgeyBDaW5zRHJvcERvd24gfSBmcm9tIFwiLi9ndWkvY2luc2Ryb3Bkb3duXCI7XG5pbXBvcnQgeyBDaW5UZXh0QXJlYSB9IGZyb20gXCIuL2d1aS9jaW50ZXh0YXJlYVwiO1xuaW1wb3J0IHsgc2hvd01lc3NhZ2VEaWFsb2cgfSBmcm9tIFwiLi9ndWkvZGlhbG9nXCI7XG5cbmFkZExheW91dFN0eWxlcygpO1xuYWRkVHlwb2dyYXBoeSgpO1xuXG5pbnRlcmZhY2UgQXBwQXR0cnMge31cblxuaW50ZXJmYWNlIEFwcFN0YXRlIHtcbiAgYWN0aXZlQ2luPzogQ2luO1xuICBjaW5zOiBDaW5bXTtcbiAgY2luRW5hYmxlOiBib29sZWFuO1xuICBrZXluYW1lczogc3RyaW5nO1xuICBjYW5kaWRhdGVzOiBzdHJpbmdbXTtcbiAgbmVlZENhbmRpZGF0ZXNTaXplQ2hlY2tpbmc6IGJvb2xlYW47XG4gIG9uQ2hhbmdlVGV4dEZpZWxkU3RhdGU/OiBvbkNoYW5nZVRleHRGaWVsZFN0YXRlO1xufVxuXG5mdW5jdGlvbiBpbml0Q2luRXZlbnRIYW5kbGVycyhcbiAgY2luOiBDaW4sXG4gIHZub2RlOiBtLlZub2RlPEFwcEF0dHJzLCBBcHBTdGF0ZT5cbik6IHZvaWQge1xuICBjaW4ub25LZXluYW1lc0NoYW5nZSA9IGZ1bmN0aW9uIChrZXluYW1lczogc3RyaW5nKSB7XG4gICAgdm5vZGUuc3RhdGUua2V5bmFtZXMgPSBrZXluYW1lcztcbiAgICB2bm9kZS5zdGF0ZS5uZWVkQ2FuZGlkYXRlc1NpemVDaGVja2luZyA9IHRydWU7XG4gICAgbS5yZWRyYXcoKTtcbiAgfTtcblxuICBjaW4ub25DdXJyZW50Q2FuZGlkYXRlc0NoYW5nZSA9IGZ1bmN0aW9uIChjYW5kaWRhdGVzOiBzdHJpbmdbXSkge1xuICAgIHZub2RlLnN0YXRlLmNhbmRpZGF0ZXMgPSBjYW5kaWRhdGVzO1xuICAgIHZub2RlLnN0YXRlLm5lZWRDYW5kaWRhdGVzU2l6ZUNoZWNraW5nID0gdHJ1ZTtcbiAgICBtLnJlZHJhdygpO1xuICB9O1xuXG4gIGNpbi5vbkNvbW1pdCA9IGZ1bmN0aW9uICh0ZXh0OiBzdHJpbmcpIHtcbiAgICBpZiAodm5vZGUuc3RhdGUub25DaGFuZ2VUZXh0RmllbGRTdGF0ZSkge1xuICAgICAgY29uc3QgeyBzZXRJbnB1dFN0YXRlLCBlbDogZWxlbWVudCB9ID0gdm5vZGUuc3RhdGVcbiAgICAgICAgLm9uQ2hhbmdlVGV4dEZpZWxkU3RhdGUgYXMgb25DaGFuZ2VUZXh0RmllbGRTdGF0ZTtcbiAgICAgIGNvbnN0IGVsID0gZWxlbWVudCBhcyBIVE1MVGV4dEFyZWFFbGVtZW50O1xuICAgICAgY29uc3QgbmV3U2VsZWN0aW9uUG9zOiBudW1iZXIgPSBlbC5zZWxlY3Rpb25TdGFydCArIHRleHQubGVuZ3RoO1xuICAgICAgY29uc3QgbGVmdFRleHQ6IHN0cmluZyA9IGVsLnZhbHVlLnN1YnN0cmluZygwLCBlbC5zZWxlY3Rpb25TdGFydCk7XG4gICAgICBjb25zdCByaWdodFRleHQ6IHN0cmluZyA9IGVsLnZhbHVlLnN1YnN0cmluZyhlbC5zZWxlY3Rpb25FbmQpO1xuICAgICAgc2V0SW5wdXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzOiB0cnVlLFxuICAgICAgICB2YWx1ZTogbGVmdFRleHQgKyB0ZXh0ICsgcmlnaHRUZXh0LFxuICAgICAgfSk7XG4gICAgICBlbC5zZXRTZWxlY3Rpb25SYW5nZShuZXdTZWxlY3Rpb25Qb3MsIG5ld1NlbGVjdGlvblBvcyk7XG4gICAgfVxuICAgIG0ucmVkcmF3KCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvY3VzVGV4dEZpZWxkKHZub2RlOiBtLlZub2RlPEFwcEF0dHJzLCBBcHBTdGF0ZT4pIHtcbiAgaWYgKHZub2RlLnN0YXRlLm9uQ2hhbmdlVGV4dEZpZWxkU3RhdGUpIHtcbiAgICBjb25zdCB7IHNldElucHV0U3RhdGUsIHZhbHVlIH0gPSB2bm9kZS5zdGF0ZVxuICAgICAgLm9uQ2hhbmdlVGV4dEZpZWxkU3RhdGUgYXMgb25DaGFuZ2VUZXh0RmllbGRTdGF0ZTtcbiAgICBzZXRJbnB1dFN0YXRlKHsgZm9jdXM6IHRydWUsIHZhbHVlIH0pO1xuICB9XG59XG5cbmNvbnN0IEFwcDogbS5Db21wb25lbnQ8QXBwQXR0cnMsIEFwcFN0YXRlPiA9IHtcbiAgb25pbml0KHZub2RlKSB7XG4gICAgdm5vZGUuc3RhdGUuY2lucyA9IFtdIGFzIENpbltdO1xuICAgIHZub2RlLnN0YXRlLmNpbkVuYWJsZSA9IHRydWU7XG4gICAgdm5vZGUuc3RhdGUua2V5bmFtZXMgPSBcIlwiO1xuICAgIHZub2RlLnN0YXRlLmNhbmRpZGF0ZXMgPSBbXTtcbiAgICB2bm9kZS5zdGF0ZS5uZWVkQ2FuZGlkYXRlc1NpemVDaGVja2luZyA9IGZhbHNlO1xuICAgIGxvYWRBbGxGcm9tREIoKS50aGVuKChjaW5zKSA9PiB7XG4gICAgICB2bm9kZS5zdGF0ZS5jaW5zID0gY2lucztcbiAgICAgIGZvciAobGV0IGNpbiBvZiBjaW5zKSB7XG4gICAgICAgIGluaXRDaW5FdmVudEhhbmRsZXJzKGNpbiwgdm5vZGUpO1xuICAgICAgICBjaW4uZW5hYmxlID0gdm5vZGUuc3RhdGUuY2luRW5hYmxlO1xuICAgICAgfVxuICAgICAgbS5yZWRyYXcoKTtcbiAgICB9KTtcbiAgfSxcbiAgdmlldyh2bm9kZSkge1xuICAgIGxldCBuZWVkQ2FuZGlkYXRlc1NpemVDaGVja2luZyA9IHZub2RlLnN0YXRlLm5lZWRDYW5kaWRhdGVzU2l6ZUNoZWNraW5nO1xuICAgIHZub2RlLnN0YXRlLm5lZWRDYW5kaWRhdGVzU2l6ZUNoZWNraW5nID0gZmFsc2U7XG4gICAgcmV0dXJuIFtcbiAgICAgIG0oVG9vbGJhciwgeyBib3JkZXI6IHRydWUgfSwgW1xuICAgICAgICBtKFRvb2xiYXJUaXRsZSwgeyB0ZXh0OiBcIkNJTm90ZXBhZFwiIH0pLFxuICAgICAgICBtKENpbnNEcm9wRG93biwge1xuICAgICAgICAgIGFjdGl2ZUNpbjogdm5vZGUuc3RhdGUuYWN0aXZlQ2luLFxuICAgICAgICAgIGNpbnM6IHZub2RlLnN0YXRlLmNpbnMsXG4gICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICBvbmNpbnNlbGVjdGVkOiAoZSkgPT4ge1xuICAgICAgICAgICAgICB2bm9kZS5zdGF0ZS5hY3RpdmVDaW4gPSBlLmNpbjtcbiAgICAgICAgICAgICAgdm5vZGUuc3RhdGUuYWN0aXZlQ2luLmVuYWJsZSA9IHZub2RlLnN0YXRlLmNpbkVuYWJsZTtcbiAgICAgICAgICAgICAgZm9jdXNUZXh0RmllbGQodm5vZGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uY2luZGVsZXRlZDogKGUpID0+IHtcbiAgICAgICAgICAgICAgZGVsZXRlRnJvbURCKGUuY2luKS5jYXRjaCgoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHNob3dNZXNzYWdlRGlhbG9nKGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB2bm9kZS5zdGF0ZS5jaW5zLnNwbGljZSh2bm9kZS5zdGF0ZS5jaW5zLmluZGV4T2YoZS5jaW4pLCAxKTtcbiAgICAgICAgICAgICAgaWYgKHZub2RlLnN0YXRlLmFjdGl2ZUNpbiA9PSBlLmNpbikge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB2bm9kZS5zdGF0ZS5hY3RpdmVDaW47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9jdXNUZXh0RmllbGQodm5vZGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uY2luaW1wb3J0ZWQ6IChlKSA9PiB7XG4gICAgICAgICAgICAgIGxvYWRGcm9tU3RyZWFtKGUuY2luSUQsIGUuc3RyZWFtKVxuICAgICAgICAgICAgICAgIC50aGVuKChjaW4pID0+IHtcbiAgICAgICAgICAgICAgICAgIERpYWxvZy5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICAgIHZub2RlLnN0YXRlLmFjdGl2ZUNpbiA9IGNpbjtcbiAgICAgICAgICAgICAgICAgIHZub2RlLnN0YXRlLmNpbnMucHVzaChjaW4pO1xuXG4gICAgICAgICAgICAgICAgICBpbml0Q2luRXZlbnRIYW5kbGVycyhjaW4sIHZub2RlKTtcblxuICAgICAgICAgICAgICAgICAgY2luLmVuYWJsZSA9IHZub2RlLnN0YXRlLmNpbkVuYWJsZTtcblxuICAgICAgICAgICAgICAgICAgZm9jdXNUZXh0RmllbGQodm5vZGUpO1xuXG4gICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICBEaWFsb2cuaGlkZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzaG93TWVzc2FnZURpYWxvZyhlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgICAgbShCdXR0b24sIHtcbiAgICAgICAgICBsYWJlbDogdm5vZGUuc3RhdGUuY2luRW5hYmxlID8gXCLkuK1cIiA6IFwi6IuxXCIsXG4gICAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgICBvbmNsaWNrOiAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgdm5vZGUuc3RhdGUuY2luRW5hYmxlID0gIXZub2RlLnN0YXRlLmNpbkVuYWJsZTtcbiAgICAgICAgICAgICAgaWYgKHZub2RlLnN0YXRlLmFjdGl2ZUNpbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpbiA9IHZub2RlLnN0YXRlLmFjdGl2ZUNpbiBhcyBDaW47XG4gICAgICAgICAgICAgICAgY2luLmVuYWJsZSA9IHZub2RlLnN0YXRlLmNpbkVuYWJsZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmb2N1c1RleHRGaWVsZCh2bm9kZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgXSksXG4gICAgICBtKENpblRleHRBcmVhLCB7XG4gICAgICAgIGFjdGl2ZUNpbjogdm5vZGUuc3RhdGUuYWN0aXZlQ2luLFxuICAgICAgICBrZXluYW1lczogdm5vZGUuc3RhdGUua2V5bmFtZXMsXG4gICAgICAgIGNhbmRpZGF0ZXM6IHZub2RlLnN0YXRlLmNhbmRpZGF0ZXMsXG4gICAgICAgIG5lZWRDYW5kaWRhdGVzU2l6ZUNoZWNraW5nLFxuICAgICAgICBvbkNoYW5nZTogKHN0YXRlOiBvbkNoYW5nZVRleHRGaWVsZFN0YXRlKSA9PiB7XG4gICAgICAgICAgdm5vZGUuc3RhdGUub25DaGFuZ2VUZXh0RmllbGRTdGF0ZSA9IHN0YXRlO1xuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgICBtKERpYWxvZyksXG4gICAgXTtcbiAgfSxcbn07XG5cbm0ubW91bnQoKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKSBhcyBIVE1MQ29sbGVjdGlvbilbMF0sIEFwcCk7XG5cbi8vIFJlZ2lzdGVyIHNlcnZpY2Ugd29ya2VyXG5pZiAoXCJzZXJ2aWNlV29ya2VyXCIgaW4gbmF2aWdhdG9yKSB7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXJcbiAgICAgIC5yZWdpc3RlcihcIi4vc2VydmljZS13b3JrZXIuanNcIilcbiAgICAgIC50aGVuKChyZWdpc3RyYXRpb24pID0+IGNvbnNvbGUubG9nKFwiU1cgcmVnaXN0ZXJlZC5cIikpXG4gICAgICAuY2F0Y2goKHJlZ2lzdHJhdGlvbkVycm9yKSA9PlxuICAgICAgICBjb25zb2xlLmVycm9yKFwiU1cgcmVnaXN0cmF0aW9uIGZhaWxlZDogXCIsIHJlZ2lzdHJhdGlvbkVycm9yKVxuICAgICAgKTtcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsicHJvcGVydGllcyIsImlzQnJvd3NlciIsIndpbmRvdyIsImlzRmlyZWZveCIsIm1veklubmVyU2NyZWVuWCIsImdldENhcmV0Q29vcmRpbmF0ZXMiLCJlbGVtZW50IiwicG9zaXRpb24iLCJvcHRpb25zIiwiRXJyb3IiLCJkZWJ1ZyIsImVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImlkIiwiYm9keSIsImFwcGVuZENoaWxkIiwic3R5bGUiLCJjb21wdXRlZCIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJpc0lucHV0Iiwibm9kZU5hbWUiLCJ3aGl0ZVNwYWNlIiwid29yZFdyYXAiLCJ2aXNpYmlsaXR5IiwiZm9yRWFjaCIsInByb3AiLCJsaW5lSGVpZ2h0IiwiaGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwicGFyc2VJbnQiLCJvdmVyZmxvd1kiLCJvdmVyZmxvdyIsInRleHRDb250ZW50IiwidmFsdWUiLCJzdWJzdHJpbmciLCJyZXBsYWNlIiwic3BhbiIsImNvb3JkaW5hdGVzIiwidG9wIiwib2Zmc2V0VG9wIiwibGVmdCIsIm9mZnNldExlZnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiVm5vZGUiLCJkZiIsImRlbGF5ZWRSZW1vdmFsIiwiZG9tRm9yIiwiY3VycmVudFJlZHJhdyIsImN1cnJlbnRSZW5kZXIiLCJuYW1lU3BhY2UiLCJzdmciLCJtYXRoIiwiZ2V0RG9jdW1lbnQiLCJkb20iLCJvd25lckRvY3VtZW50IiwiZ2V0TmFtZVNwYWNlIiwidm5vZGUiLCJhdHRycyIsInhtbG5zIiwidGFnIiwiY2hlY2tTdGF0ZSIsIm9yaWdpbmFsIiwic3RhdGUiLCJjYWxsSG9vayIsInRoaXMiLCJhcHBseSIsImFyZ3VtZW50cyIsImFjdGl2ZUVsZW1lbnQiLCJlIiwiY3JlYXRlTm9kZXMiLCJwYXJlbnQiLCJ2bm9kZXMiLCJzdGFydCIsImVuZCIsImhvb2tzIiwibmV4dFNpYmxpbmciLCJucyIsImkiLCJjcmVhdGVOb2RlIiwiaW5pdExpZmVjeWNsZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGRyZW4iLCJpbnNlcnRET00iLCJjcmVhdGVUZXh0IiwiY3JlYXRlSFRNTCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImxlbmd0aCIsImZpcnN0Q2hpbGQiLCJkb21TaXplIiwiY2hpbGROb2RlcyIsImNyZWF0ZUZyYWdtZW50IiwiaXMiLCJjcmVhdGVFbGVtZW50TlMiLCJrZXkiLCJzZXRBdHRyIiwic2V0QXR0cnMiLCJtYXliZVNldENvbnRlbnRFZGl0YWJsZSIsInNlbGVjdGVkSW5kZXgiLCJub3JtYWxpemVkIiwidW5kZWZpbmVkIiwic2V0TGF0ZVNlbGVjdEF0dHJzIiwic2VudGluZWwiLCJ2aWV3IiwiT2JqZWN0IiwiY3JlYXRlIiwiJCRyZWVudHJhbnRMb2NrJCQiLCJwcm90b3R5cGUiLCJpbnN0YW5jZSIsIm5vcm1hbGl6ZSIsImNhbGwiLCJpbml0Q29tcG9uZW50IiwiY3JlYXRlQ29tcG9uZW50IiwicG9zc2libGVQYXJlbnRzIiwiY2FwdGlvbiIsInRoZWFkIiwidGJvZHkiLCJ0Zm9vdCIsInRyIiwidGgiLCJ0ZCIsImNvbGdyb3VwIiwiY29sIiwibWF0Y2giLCJ0ZW1wIiwiaW5uZXJIVE1MIiwiY2hpbGQiLCJ1cGRhdGVOb2RlcyIsIm9sZCIsInJlbW92ZU5vZGVzIiwiaXNPbGRLZXllZCIsImlzS2V5ZWQiLCJvbGRTdGFydCIsIm8iLCJ2Iiwib2UiLCJ2ZSIsInRvcFNpYmxpbmciLCJvbGRFbmQiLCJ1cGRhdGVOb2RlIiwiZ2V0TmV4dFNpYmxpbmciLCJtb3ZlRE9NIiwibWFwIiwibGlzSW5kaWNlcyIsIm9yaWdpbmFsTmV4dFNpYmxpbmciLCJ2bm9kZXNMZW5ndGgiLCJvbGRJbmRpY2VzIiwiQXJyYXkiLCJsaSIsInBvcyIsIm1hdGNoZWQiLCJnZXRLZXlNYXAiLCJvbGRJbmRleCIsImEiLCJyZXN1bHQiLCJ1IiwiaWwiLCJsaXNUZW1wIiwiaiIsInB1c2giLCJjIiwibWFrZUxpc0luZGljZXMiLCJjb21tb25MZW5ndGgiLCJyZW1vdmVOb2RlIiwib2xkVGFnIiwiZXZlbnRzIiwiZm9yY2UiLCJvbmJlZm9yZXVwZGF0ZSIsInRleHQiLCJzaG91bGROb3RVcGRhdGUiLCJ1cGRhdGVMaWZlY3ljbGUiLCJ0b1N0cmluZyIsIm5vZGVWYWx1ZSIsInVwZGF0ZVRleHQiLCJyZW1vdmVET00iLCJ1cGRhdGVIVE1MIiwidXBkYXRlRnJhZ21lbnQiLCJ2YWwiLCJjb25zb2xlIiwid2FybiIsInJlbW92ZUF0dHIiLCJ1cGRhdGVBdHRycyIsInVwZGF0ZUVsZW1lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJjdXJyZW50RE9NIiwidGFyZ2V0IiwiaW5zZXJ0QmVmb3JlIiwiY29udGVudGVkaXRhYmxlIiwiY29udGVudEVkaXRhYmxlIiwiY29udGVudCIsInRyeUJsb2NrUmVtb3ZlIiwic291cmNlIiwiY291bnRlciIsIm9uYmVmb3JlcmVtb3ZlIiwiZ2VuZXJhdGlvbiIsInNldCIsIlByb21pc2UiLCJyZXNvbHZlIiwiZmluYWxseSIsInRyeVJlc3VtZVJlbW92ZSIsIm9ucmVtb3ZlIiwiXyIsImlzQXJyYXkiLCJpc0xpZmVjeWNsZU1ldGhvZCIsImF0dHIiLCJpc0Zvcm1BdHRyaWJ1dGUiLCJ1cGRhdGVFdmVudCIsInNsaWNlIiwic2V0QXR0cmlidXRlTlMiLCJ1cGRhdGVTdHlsZSIsImhhc1Byb3BlcnR5S2V5IiwidHlwZSIsImVycm9yIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwibnNMYXN0SW5kZXgiLCJpbmRleE9mIiwiaW5jbHVkZXMiLCJzZXRQcm9wZXJ0eSIsIlN0cmluZyIsInJlbW92ZVByb3BlcnR5IiwiRXZlbnREaWN0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbmluaXQiLCJvbmNyZWF0ZSIsImJpbmQiLCJvbnVwZGF0ZSIsImhhbmRsZUV2ZW50IiwiZXYiLCJoYW5kbGVyIiwiY3VycmVudFRhcmdldCIsInNlbGYiLCJyZWRyYXciLCJ0aGVuIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJUeXBlRXJyb3IiLCJjb250YWlucyIsInByZXZSZWRyYXciLCJwcmV2RE9NIiwiYWN0aXZlIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJmb2N1cyIsIm5vZGUiLCJpbnB1dCIsInJlbmRlciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9iamVjdCIsImFyZ3MiLCJkZXN0cnVjdHVyZSIsImpvaW4iLCJlbmNvZGVVUklDb21wb25lbnQiLCJtIiwidHJ1c3QiLCJoYXNPd24iLCJtYWdpYyIsIlJlZ0V4cCIsImV4dHJhcyIsInRlc3QiLCJidWlsZFBhdGhuYW1lIiwiJHdpbmRvdyIsIm9uY29tcGxldGlvbiIsIlByb21pc2VQcm94eSIsImV4ZWN1dG9yIiwiaGFzSGVhZGVyIiwibmFtZSIsImhlYWRlcnMiLCJ0b0xvd2VyQ2FzZSIsIl9fcHJvdG9fXyIsInJlcXVlc3QiLCJ1cmwiLCJwcm9taXNlIiwicmVqZWN0IiwicGFyYW1zIiwicmVwbGFjZWRBYm9ydCIsIm1ldGhvZCIsInRvVXBwZXJDYXNlIiwiYXNzdW1lSlNPTiIsInNlcmlhbGl6ZSIsIkpTT04iLCJGb3JtRGF0YSIsIlVSTFNlYXJjaFBhcmFtcyIsInJlc3BvbnNlVHlwZSIsImV4dHJhY3QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0ZWQiLCJpc1RpbWVvdXQiLCJhYm9ydCIsIm9wZW4iLCJhc3luYyIsInVzZXIiLCJwYXNzd29yZCIsInNldFJlcXVlc3RIZWFkZXIiLCJkZXNlcmlhbGl6ZSIsIndpdGhDcmVkZW50aWFscyIsInRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwibWVzc2FnZSIsInN1Y2Nlc3MiLCJzdGF0dXMiLCJyZXNwb25zZSIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiY29tcGxldGVFcnJvclJlc3BvbnNlIiwiY29kZSIsInNldFRpbWVvdXQiLCJvbnRpbWVvdXQiLCJjb25maWciLCJzZW5kIiwic3RyaW5naWZ5IiwibWFrZVJlcXVlc3QiLCJiYWNrZ3JvdW5kIiwiY291bnQiLCJjb21wbGV0ZSIsIndyYXAiLCJjb25zdHJ1Y3RvciIsIm5leHQiLCJoeXBlcnNjcmlwdCIsImVtcHR5QXJyYXkiLCJlbXB0eU9iamVjdCIsIkFSUkFZIiwiT0JKRUNUIiwiU1RSSU5HIiwiRlVOQ1RJT04iLCJvd24iLCJoYXNPd25Qcm9wZXJ0eSIsImZyZWV6ZSIsImRlZmF1bHRzIiwiayIsImNhcnRlc2lhbiIsImIiLCJyZXMiLCJzZWxlY3RvclRva2VuaXplciIsInNwbGl0U2VsZWN0b3IiLCJzZWxlY3RvciIsImluZGljZXMiLCJpblBhcmVuIiwiZXhlYyIsImluZGV4IiwidW5zaGlmdCIsImFtcGVyc2FuZFRva2VuaXplciIsImFtcGVyc2FuZCIsInBhcmVudHMiLCJzcGxpdCIsImZsYXRJdGVyIiwiZiIsIml0ZXIiLCJhcmciLCJkZWNhbWVsaXplIiwiZGVjbGFyYXRpb25zIiwiZW1pdCIsInByZWZpeCIsImxvY2FsIiwia2siLCJ2YWx1ZU9mIiwibG9jYWxpemVSZXBsYWNlciIsImRlY2wiLCJhdFJ1bGVzIiwibmVzdGluZ0RlcHRoIiwiJGF0SGFuZGxlcnMiLCJydWxlcyIsImVyciIsImFkb3B0ZWUiLCJhc1N0cmluZyIsImxvY2FsaXplIiwibmFtZXMiLCJhdHJ1bGUiLCJfYXRydWxlIiwidHJlZSIsImluRGVjbGFyYXRpb24iLCJydWxlIiwiY2xvc2VTZWxlY3RvcnMiLCJpbmxpbmUiLCJsYXN0U2VsZWN0b3IiLCJpbml0IiwiZG9uZSIsInJhdyIsIl9ydWxlIiwia2luZCIsInBhcmFtIiwidGFrZXNCbG9jayIsImdsb2JhbCIsIngiLCJrdiIsImF0IiwiYmxvY2siLCJfYXQiLCJjb25jYXQiLCJidWYiLCIkc2luayIsIm1zZyIsIl9pbnN0YW5jZSIsImVuZGxpbmUiLCIkZmlsdGVycyIsInN1ZmZpeCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsIiRwbHVnaW5zIiwic2hlZXQiLCJfY3JlYXRlT3JSZXRyaWV2ZVN0cmVhbSIsIl93YWxrZXJzIiwiX2xvY2FsaXplUmVwbGFjZXIiLCJfbG9jYWxpemUiLCJfdXNlIiwicGx1Z2luIiwiZmlsdGVyIiwiJGZpbHRlciIsIiRhdCIsIiRuYW1lcyIsIl9zdHJlYW1zIiwiaWdub3JlIiwiZ2xvYmFsJCQxIiwiZG90IiwicGFyc2VRdWVyeVN0cmluZyIsInF1ZXJ5SW5kZXgiLCJoYXNoSW5kZXgiLCJxdWVyeUVuZCIsInBhdGhFbmQiLCJwYXRoIiwicGFyc2VQYXRobmFtZSIsInRlbXBsYXRlIiwidGVtcGxhdGVEYXRhIiwidGVtcGxhdGVLZXlzIiwia2V5cyIsInJlZ2V4cCIsImV4dHJhIiwiciIsImRhdGEiLCJ2YWx1ZXMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJidWlsZFF1ZXJ5U3RyaW5nIiwiU3ludGF4RXJyb3IiLCJxdWVyeSIsImFzc2lnbiIsInJlc29sdmVkIiwidmFyaWFkaWMiLCJuZXdRdWVyeUluZGV4IiwibmV3SGFzaEluZGV4IiwibmV3UXVlcnlFbmQiLCJuZXdQYXRoRW5kIiwicXVlcnlzdHJpbmciLCJodG1sIiwic2NoZWR1bGUiLCJzdWJzY3JpcHRpb25zIiwicGVuZGluZyIsIm9mZnNldCIsInN5bmMiLCJtb3VudCIsInJvb3QiLCJjb21wb25lbnQiLCJzcGxpY2UiLCJoeXBlcnNjcmlwdFZub2RlIiwic2VsZWN0b3JQYXJzZXIiLCJzZWxlY3RvckNhY2hlIiwiaGFzQ2xhc3MiLCJjbGFzc05hbWUiLCJjbGFzcyIsImV4ZWNTZWxlY3RvciIsImNsYXNzZXMiLCJhdHRyVmFsdWUiLCJpc0VtcHR5IiwiY29tcGlsZVNlbGVjdG9yIiwiZGVjb2RlVVJJQ29tcG9uZW50U2F2ZSIsInN0ciIsInN0cmluZyIsImNoYXJBdCIsImVudHJpZXMiLCJjb3VudGVycyIsImVudHJ5IiwibGV2ZWxzIiwiY3Vyc29yIiwicG9wIiwibGV2ZWwiLCJuZXh0TGV2ZWwiLCJpc051bWJlciIsImlzTmFOIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIldlYWtNYXAiLCJnZXQiLCJjb21waWxlVGVtcGxhdGUiLCJjZW5zb3IiLCJtb3VudFJlZHJhdyIsImNvbXBpbGVkIiwiZmFsbGJhY2tSb3V0ZSIsImN1cnJlbnRSZXNvbHZlciIsImN1cnJlbnRQYXRoIiwibGFzdFVwZGF0ZSIsImNhbGxBc3luYyIsInNldEltbWVkaWF0ZSIsInAiLCJzY2hlZHVsZWQiLCJyZWFkeSIsImhhc0JlZW5SZXNvbHZlZCIsIlJvdXRlclJvb3QiLCJmaXJlQXN5bmMiLCJTS0lQIiwicm91dGUiLCJyZXNvbHZlUm91dGUiLCJsb2NhdGlvbiIsImhhc2giLCJzZWFyY2giLCJwYXRobmFtZSIsImhpc3RvcnkiLCJsb29wIiwiY2hlY2siLCJwYXlsb2FkIiwibWF0Y2hlZFJvdXRlIiwibG9jYWxDb21wIiwidXBkYXRlIiwiY29tcCIsIm9ubWF0Y2giLCJkZWZhdWx0Um91dGUiLCJyb3V0ZXMiLCJkZWZhdWx0RGF0YSIsInNvbWUiLCJSZWZlcmVuY2VFcnJvciIsInRpdGxlIiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiaHJlZiIsIkxpbmsiLCJvbmNsaWNrIiwiZGlzYWJsZWQiLCJCb29sZWFuIiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsIndoaWNoIiwiY3RybEtleSIsIm1ldGFLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIkZyYWdtZW50IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJvYmoiLCJfZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VTeW1ib2xLZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfc2xpY2VkVG9BcnJheSIsImFyciIsIl9hcnJheVdpdGhIb2xlcyIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfbm9uSXRlcmFibGVSZXN0IiwibW9kZXMiLCJfQ29uZGl0aW9uYWwiLCJfcmVmIiwiaCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwicHJvcHMiLCJfdXNlU3RhdGUyIiwicGVybWFuZW50Iiwic2hvdyIsIm1vZGUiLCJzZXRNb2RlIiwibmV3TW9kZSIsInBsYWNlaG9sZGVyIiwicGxhY2Vob2xkZXJDbGFzc05hbWUiLCJkaWRIaWRlIiwiaGlkZSIsImluYWN0aXZlIiwiYWNjIiwiZGVmYXVsdEF0dHJzIiwiZmlsdGVyU3VwcG9ydGVkQXR0cmlidXRlcyIsImFkZCIsInJlbW92ZSIsInJlbW92ZUxvb2t1cCIsInJlZHVjZSIsInN1cHBvcnRlZCIsIml0ZW0iLCJ1bnBhY2tBdHRycyIsImNsYXNzRm9yU2l6ZSIsInNpemUiLCJzbWFsbCIsInJlZ3VsYXIiLCJtZWRpdW0iLCJsYXJnZSIsImZhYiIsInNpemVDbGFzc2VzIiwiZXZ0cyIsInN0eWxlUHJvcENvbXBhcmUiLCJfcmVmMiIsInBzZXVkb1NlbGVjdG9yIiwiZXF1YWxzIiwiZGVmYXVsdFZpZXciLCJnZXRQcm9wZXJ0eVZhbHVlIiwic3R5bGVEdXJhdGlvblRvTXMiLCJkdXJhdGlvblN0ciIsInBhcnNlZCIsInBhcnNlRmxvYXQiLCJpc1RvdWNoIiwiZG9jdW1lbnRFbGVtZW50IiwicG9pbnRlckVuZEV2ZW50IiwicG9pbnRlckVuZERvd25FdmVudCIsImh0bWxFbGVtZW50IiwiY2xhc3NMaXN0IiwibGlzdGVuZXJzIiwic3Vic2NyaWJlIiwiZXZlbnROYW1lIiwibGlzdGVuZXIiLCJkZWxheSIsImZ1bmMiLCJzIiwiY29udGV4dCIsIndhaXQiLCJfbGVuIiwiX2tleSIsInRocm90dGxlIiwidW5zdWJzY3JpYmUiLCJldmVudCIsIk11bHRpIiwibU9wdGlvbnMiLCJpdGVtcyIsIm9uQ2hhbmdlIiwiaXRlbUluZGV4IiwiZmluZEl0ZW0iLCJpbnN0YW5jZUlkIiwiZGVmYXVsdElkIiwicXVldWUiLCJzaGlmdCIsInNldFBhdXNlU3RhdGUiLCJwYXVzZSIsInVucGF1c2UiLCJjbGVhciIsImhpZGVQcm9taXNlIiwibmV3SXRlbSIsInNwYXduT3B0cyIsIml0ZW1BdHRycyIsInNwYXduIiwicmVzb2x2ZVNob3ciLCJyZXNvbHZlSGlkZSIsInNob3dQcm9taXNlIiwiZGlkU2hvdyIsImNyZWF0ZUl0ZW0iLCJzZXRDdXJyZW50IiwiY2FuZGlkYXRlcyIsImh0bWxTaG93Q2xhc3MiLCJob2xkZXJTZWxlY3RvciIsIml0ZW1EYXRhIiwiZnJvbU11bHRpcGxlQ2xlYXIiLCJzcGF3bklkIiwiZnJvbU11bHRpcGxlQ2xhc3NOYW1lIiwidHJhbnNpdGlvbnMiLCJmcm9tTXVsdGlwbGVEaWRIaWRlIiwiZnJvbU11bHRpcGxlRGlkU2hvdyIsImtleUlkIiwiVFJBTlNJVElPTl9UWVBFUyIsImluaXRpYWxUcmFuc2l0aW9uU3RhdGUiLCJpc1Zpc2libGUiLCJpc1RyYW5zaXRpb25pbmciLCJ0cmFuc2l0aW9uU3RhdGVSZWR1Y2VyIiwib3B0cyIsInRyYW5zaXRpb24iLCJjb21wdXRlZFN0eWxlIiwiZHVyYXRpb24iLCJoYXNEdXJhdGlvbiIsInRyYW5zaXRpb25EdXJhdGlvbiIsImhhc0RlbGF5IiwidHJhbnNpdGlvbkRlbGF5IiwidGltaW5nRnVuY3Rpb24iLCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24iLCJ0cmFuc2l0aW9uQ2xhc3MiLCJtYXliZUJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwiZG9UcmFuc2l0aW9uIiwic2hvd0NsYXNzIiwic2hvd0NsYXNzRWxlbWVudCIsIm9mZnNldEhlaWdodCIsIm1heWJlRGVsYXlUcmFuc2l0aW9uIiwidHJhbnNpdGlvbkNvbXBvbmVudCIsImRpc3BhdGNoVHJhbnNpdGlvblN0YXRlIiwiaXNTaG93IiwiZG9tRWxlbWVudHMiLCJiZWZvcmVUcmFuc2l0aW9uIiwiYWZ0ZXJUcmFuc2l0aW9uIiwicmVmZXJyZXIiLCJzaG93RHVyYXRpb24iLCJoaWRlRHVyYXRpb24iLCJzaG93RGVsYXkiLCJoaWRlRGVsYXkiLCJzaG93VGltaW5nRnVuY3Rpb24iLCJoaWRlVGltaW5nRnVuY3Rpb24iLCJmbiIsIm9wdHMxIiwib3B0czIiLCJsYXlvdXQiLCJsYXlvdXRDZW50ZXIiLCJsYXlvdXRDZW50ZXJKdXN0aWZpZWQiLCJmbGV4JDEiLCJmbGV4IiwibnVtIiwiZmxleEF1dG8iLCJmbGV4QXV0b1ZlcnRpY2FsIiwiZmxleEluZGV4IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGF5b3V0QXJvdW5kSnVzdGlmaWVkIiwibGF5b3V0Q2VudGVyQ2VudGVyIiwibGF5b3V0RW5kIiwibGF5b3V0RW5kSnVzdGlmaWVkIiwibGF5b3V0SG9yaXpvbnRhbCIsImxheW91dEhvcml6b250YWxSZXZlcnNlIiwibGF5b3V0SW5saW5lIiwibGF5b3V0SnVzdGlmaWVkIiwibGF5b3V0U3RhcnQiLCJsYXlvdXRTdGFydEp1c3RpZmllZCIsImxheW91dFZlcnRpY2FsIiwibGF5b3V0VmVydGljYWxSZXZlcnNlIiwibGF5b3V0V3JhcCIsImxheW91dFdyYXBSZXZlcnNlIiwic2VsZkNlbnRlciIsInNlbGZFbmQiLCJzZWxmU3RhcnQiLCJzZWxmU3RyZXRjaCIsIm1peGluIiwidHJhbnNpdGlvblByb3BlcnR5IiwibGluZXMiLCJ0ZXh0T3ZlcmZsb3ciLCJkaXNwbGF5IiwibWF4SGVpZ2h0Iiwid29yZEJyZWFrIiwidGV4dFJlbmRlcmluZyIsIm9mZnNldFB4IiwicmlnaHQiLCJib3R0b20iLCJ6SW5kZXgiLCJqMmNQbHVnaW5QcmVmaXhCcm93c2VyX2NvbW1vbmpzIiwiYWxsU3R5bGVzIiwic3R5bGVBdHRyIiwic3R5bGVFbGVtZW50Iiwic3VwcG9ydGVkUHJvcGVydHkiLCJzdXBwb3J0ZWREZWNsIiwiY2FtZWxDYXNlIiwiJDAiLCIkMSIsImRlQ2FtZWxDYXNlIiwiX3N1cHBvcnRlZERlY2wiLCJwcm9wZXJ0eSIsInN1cHBvcnRlZE1lZGlhIiwiY3NzUnVsZXMiLCJjc3NUZXh0IiwiX3N1cHBvcnRlZFByb3BlcnR5Iiwic3VwcG9ydGVkUnVsZSIsImtleXdvcmRzIiwiZmxleDIwMDlQcm9wcyIsImZsZXgyMDA5VmFsdWVzIiwiZmxleDIwMTJQcm9wcyIsImZsZXgyMDEyVmFsdWVzIiwiY29tbW9uRml4ZXJzIiwiZml4ZXJzIiwiZW1wdHlTZXQiLCJ2YWx1ZVRva2VuaXplciIsIm1ha2VEZXRlY3RvciIsInRhcmdldHMiLCJtYWtlTGV4ZXIiLCJmaXhEZWNsIiwiZml4UHJvcGVydHkiLCJqc0ZsZXgiLCJmbGV4Ym94MjAwOSIsIldrQkNUeHQiLCJmaXhWYWx1ZSIsImZpbmFsaXplRml4ZXJzIiwicHJlZml4ZWQiLCJzZWxlY3RvckRldGVjdG9yIiwic2VsZWN0b3JMaXN0Iiwic2VsZWN0b3JNYXRjaGVyIiwic2VsZWN0b3JSZXBsYWNlciIsInNlbGVjdG9yTWFwIiwiZml4U2VsZWN0b3IiLCJoYXNHcmFkaWVudHMiLCJmdW5jdGlvbnMiLCJncmFkaWVudERldGVjdG9yIiwiZ3JhZGllbnRNYXRjaGVyIiwiZ3JhZGllbnRSZXBsYWNlciIsImRlbGltIiwiZ3JhZGllbnQiLCJkZWciLCJoYXNGdW5jdGlvbnMiLCJmdW5jdGlvbnNEZXRlY3RvciIsImZ1bmN0aW9uc01hdGNoZXIiLCJmdW5jdGlvblJlcGxhY2VyIiwiJDIiLCJ2YWx1ZVByb3BlcnRpZXNNYXRjaGVyIiwidmFsdWVQcm9wZXJ0aWVzUmVwbGFjZXIiLCJpbml0aWFsIiwiaGFzS2V5d29yZHMiLCJ2YWx1ZVByb3BlcnRpZXMiLCJzcGxpdFZhbHVlIiwic3VwcG9ydHNQcm9wIiwic3VwcG9ydHNWYWx1ZSIsInJlc29sdXRpb25NYXRjaGVyIiwicmVzb2x1dGlvblJlcGxhY2VyIiwiaGFzUGl4ZWxSYXRpbyIsImhhc1BpeGVsUmF0aW9GcmFjdGlvbiIsInJvdW5kIiwiZml4QXRNZWRpYVBhcmFtcyIsImhhc0RwcHgiLCJhdFN1cHBvcnRzUGFyYW1zRml4ZXIiLCJhdFN1cHBvcnRzUGFyYW1zTWF0Y2hlciIsImF0U3VwcG9ydHNQYXJhbXNSZXBsYWNlciIsImZpeEF0U3VwcG9ydHNQYXJhbXMiLCJhdHJ1bGVzIiwiaGFzQXRydWxlcyIsImhhc1NlbGVjdG9ycyIsImhhc1ZhbHVlcyIsImZsZXhib3gyMDEyIiwicHJlZml4ZXMiLCJQcmVmaXgiLCJwcmVmaXhDb3VudGVycyIsIml0ZXJhdGlvbiIsInNvcnQiLCJkZXRlY3RQcmVmaXgiLCJwcmVmaXhTZWxlY3RvciIsInNlbGVjdG9ycyIsImRldGVjdFNlbGVjdG9ycyIsImRldGVjdEF0cnVsZXMiLCJrZXl3b3JkIiwiZmxleGJveCIsImJveCIsImRldGVjdEtleXdvcmRzIiwiZGV0ZWN0RnVuY3Rpb25zIiwiZGV0ZWN0V2Via2l0Q29tcGF0IiwicHJlZml4UGx1Z2luIiwiY2FjaGUiLCJzZXRQcmVmaXhEYiIsImhhc0Jsb2NrIiwiajJjIiwiSURfUkVHRVgiLCJzdHlsZXMiLCJhZGRUb0RvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJzYWZlSWQiLCJkb2N1bWVudFJlZiIsInN0eWxlRWwiLCJfbGVuMiIsIl9rZXkyIiwic2NvcGVkIiwiaGVhZCIsIndyYXBJblNjb3BlIiwic2NvcGUiLCJhZGRTdHlsZSIsIl9yZWY0Iiwic3R5bGVGbnMiLCJmbnMiLCJ2YXJzIiwiY3VzdG9tVmFycyIsIm1lZGlhUXVlcnkiLCJpZGVudGlmaWVyIiwibGlzdCIsInRyaW0iLCJfcmVmNSIsImN1c3RvbVNlbGVjdG9yIiwiX3JlZjYiLCJfcmVmNyIsInNlbCIsInNlbGVjdG9yUlRMIiwicmdiYSIsImNvbG9yU3RyIiwib3BhY2l0eSIsImNyZWF0ZVN0eWxlIiwidmFyRm5zIiwiY3VzdG9tVmFyRm5zIiwic3VwZXJTdHlsZSIsInZhck1peGluIiwic2NvcGVkU2VsZWN0b3IiLCJfcmVmMiRjb21wb25lbnRWYXJzIiwiY29tcG9uZW50VmFycyIsImFsbFZhcnMiLCJjdXJyZW50VmFycyIsIm90aGVyVmFycyIsImdlbmVyYWxfc3R5bGVzIiwiYmFzZUxheW91dCIsImNyZWF0ZUxheW91dCIsIl9yZWYzIiwic3VwZXJMYXlvdXQiLCJfcmVmMyR2YXJNaXhpbiIsImNyZWF0ZVNjb3BlZFNlbGVjdG9yIiwic2NvcGVzIiwiX3JlZjYkaXNOb1RvdWNoIiwiaXNOb1RvdWNoIiwiYXBwZW5kUHNldWRvQ2xhc3MiLCJjb2xvclNjb3BlcyIsInZhckZuTmFtZSIsImNyZWF0ZUNvbG9yIiwiX3JlZjckdmFyRm5zIiwic3VwZXJDb2xvciIsIl9yZWY3JHZhck1peGluIiwiX3JlZjgiLCJjcmVhdGVNYXJrZXIiLCJiZWhhdmlvclZhcnMiLCJtYXJrZXIiLCJidmFyIiwiY3JlYXRlTWFya2VyVmFsdWUiLCJwYWRkaW5nIiwibWFyZ2luIiwidGRzIiwiZGVjb2RlciIsIlRleHREZWNvZGVyIiwiZW5jb2RpbmciLCJ0cmFuc2Zvcm0iLCJjaHVuayIsImNvbnRyb2xsZXIiLCJlbnF1ZXVlIiwiZGVjb2RlIiwic3RyZWFtIiwiSlNUZXh0RGVjb2RlclN0cmVhbSIsIlRyYW5zZm9ybVN0cmVhbSIsInQiLCJzdXBlciIsImZhdGFsIiwiaWdub3JlQk9NIiwibHMiLCJlbmRJbmRleCIsInN0YXJ0SW5kZXgiLCJsaW5lIiwicmVtYWluQ2h1bmsiLCJmbHVzaCIsIkpTTGluZVN0cmVhbSIsIlN0YXR1cyIsIkNpbiIsImtleW5hbWUiLCJjYW5kaWRhdGVMaXN0IiwiY3VycmVudFBhZ2UiLCJtYXhOdW1PZktleXMiLCJlbmFtZSIsImNuYW1lIiwicHJvbXB0Iiwic2Vsa2V5IiwiZHVwc2VsIiwiZW5ka2V5Iiwic3BhY2VTdHlsZSIsImtlZXBLZXlDYXNlIiwic3ltYm9sS2JtIiwicGhhc2VBdXRvU2tpcEVuZEtleSIsImZsYWdBdXRvU2VsZWN0QnlQaGFzZSIsImZsYWdEaXNwUGFydGlhbE1hdGNoIiwiZmxhZ0Rpc3BGdWxsTWF0Y2giLCJmbGFnVmVydGljYWxTZWxlY3Rpb24iLCJmbGFnUHJlc3NGdWxsQXV0b1NlbmQiLCJmbGFnVW5pcXVlQXV0b1NlbmQiLCJfZW5hYmxlIiwiX3N0YXR1cyIsIklOUFVUIiwiX2tleXMiLCJlbmFibGUiLCJyZXNldEtleXMiLCJ0b3RhbFBhZ2UiLCJsaXN0U2l6ZSIsImNlaWwiLCJjdXJyZW50Q2FuZGlkYXRlTGlzdCIsIm1pbiIsIl9maXJlQ2FuZGlkYXRlQ2hhbmdlIiwib25DdXJyZW50Q2FuZGlkYXRlc0NoYW5nZSIsIm9uQ2FuZGlkYXRlc0NoYW5nZSIsIm9uS2V5bmFtZXNDaGFuZ2UiLCJkZWxldGVDb250ZW50QmFja3dhcmQiLCJ0aGVMYXN0S2V5IiwicHVzaEtleSIsIlNFTEVDVCIsImNpbiIsImNvbW1pdFRleHQiLCJvbkNvbW1pdCIsImRiIiwibG9nIiwidHJhbnNhY3Rpb24iLCJpc1NwYWNlIiwiaXNFbmRLZXkiLCJpc1NlbEtleSIsImlzS2V5bmFtZSIsImdldENhbmRpZGF0ZXNGcm9tQ2hhcmRlZiIsIm9iamVjdFN0b3JlIiwib3BlbkN1cnNvciIsIklEQktleVJhbmdlIiwib25seSIsIm9uc3VjY2VzcyIsImNhbmRpZGF0ZSIsImNvbnRpbnVlIiwib3JpZ2luYWxLZXlzIiwib3JpZ2luYWxDYW5kaWRhdGVMaXN0IiwicXVpY2tDYW5kaWRhdGVMaXN0IiwiY2hhcmRlZkNhbmRpZGF0ZUxpc3QiLCJjYW5kaWRhdGVzU3RyIiwiZ2V0Q2FuZGlkYXRlc0Zyb21RdWljayIsIm9uRW5kS2V5Iiwic2VsZWN0SW5kZXgiLCJuZXh0Q2FuZGlkYXRlTGlzdCIsInByZXZpb3VzQ2FuZGlkYXRlTGlzdCIsImtleW5hbWVzIiwiaW5kZXhPZldoaXRlU3BhY2UiLCJ3c3BJZHgiLCJzcElkeCIsInRhYklkeCIsImhhbmRsZUtleW5hbWVTZWN0aW9uIiwicmVhZGVyIiwicmVhZCIsInN0YXJ0c1dpdGgiLCJ3aGl0ZXNwYWNlSW5kZXgiLCJoYW5kbGVRdWlja1NlY3Rpb24iLCJrZXljb2RlIiwidW53cml0dGVuUXVpY2tMaXN0IiwibWF4IiwiaGFuZGxlQ2hhckRlZlNlY3Rpb24iLCJ1bndyaXR0ZW5DaGFyRGVmTGlzdCIsImhhbmRsZVNlY3Rpb24iLCJvbGRLZXluYW1lIiwiaGFuZGxlQ29tbWVudCIsIl9leHRlbmRzIiwiY29tcGFjdCIsImFwcEJhciIsImNlbnRlcmVkVGl0bGUiLCJpbmRlbnRlZFRpdGxlIiwiZnVsbGJsZWVkIiwiYm9yZGVyIiwiYm90dG9tU2hhZG93IiwidG9wU2hhZG93IiwiYW5pbWF0ZWQiLCJkZXB0aF9uIiwid2l0aF9hY3RpdmVfc2hhZG93IiwiZ2V0RGVwdGhDbGFzcyIsInNoYWRvd0RlcHRoIiwiX3R5cGVvZiIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiZnJvbSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImxlbiIsImFycjIiLCJjdXJyZW50U3RhdGUiLCIkc3RyaW5naWZ5IiwiUHJpbWl0aXZlIiwibm9vcCIsImtub3duIiwicmVwbGFjZXIiLCJzcGFjZSIsIiQiLCJNYXAiLCJvdXRwdXQiLCJmaXJzdFJ1biIsIkZ1bmN0aW9uIiwic2NoZWR1bGVSZW5kZXIiLCJlZmZlY3QiLCJpc0FzeW5jIiwiZGVwcyIsImRlcHNJbmRleCIsInByZXZEZXBzIiwiZGVwc1N0YXRlcyIsInNob3VsZFJlY29tcHV0ZSIsImV2ZXJ5Iiwic2V0dXAiLCJ1cGRhdGVEZXBzIiwicnVuQ2FsbGJhY2tGbiIsInRlYXJkb3duIiwidGVhcmRvd25zIiwidXBkYXRlcyIsInVwZGF0ZVN0YXRlIiwiaW5pdGlhbFN0YXRlIiwibmV3VmFsdWVGbiIsInN0YXRlc0luZGV4Iiwic3RhdGVzIiwicHJldmlvdXNWYWx1ZSIsIm5ld1ZhbHVlIiwidXNlUmVkdWNlciIsInJlZHVjZXIiLCJpbml0Rm4iLCJfdXBkYXRlU3RhdGUyIiwic2V0VmFsdWUiLCJpbml0VmFsdWUiLCJhY3Rpb24iLCJ1c2VSZWYiLCJpbml0aWFsVmFsdWUiLCJjdXJyZW50IiwiYWNjZXB0IiwiYWNjZXB0Y2hhcnNldCIsImFjY2Vzc2tleSIsImFsbG93ZnVsbHNjcmVlbiIsImFsbG93dHJhbnNwYXJlbmN5IiwiYWx0IiwiYXV0b2NvbXBsZXRlIiwiYXV0b2ZvY3VzIiwiYXV0b3BsYXkiLCJjYXB0dXJlIiwiY2VsbHBhZGRpbmciLCJjZWxsc3BhY2luZyIsImNoYWxsZW5nZSIsImNoYXJzZXQiLCJjaGVja2VkIiwiY2xhc3NpZCIsImNsYXNzbmFtZSIsImNvbHNwYW4iLCJjb2xzIiwiY29udGV4dG1lbnUiLCJjb250cm9scyIsImNvb3JkcyIsImNyb3Nzb3JpZ2luIiwiZGF0ZXRpbWUiLCJkZWZlciIsImRpciIsImRvd25sb2FkIiwiZHJhZ2dhYmxlIiwiZW5jdHlwZSIsImZvcm0iLCJmb3JtYWN0aW9uIiwiZm9ybWVuY3R5cGUiLCJmb3JtbWV0aG9kIiwiZm9ybW5vdmFsaWRhdGUiLCJmb3JtdGFyZ2V0IiwiZnJhbWVib3JkZXIiLCJoaWRkZW4iLCJoaWdoIiwiaHJlZmxhbmciLCJodG1sZm9yIiwiaHR0cGVxdWl2IiwiaWNvbiIsImlucHV0bW9kZSIsImludGVncml0eSIsImtleXBhcmFtcyIsImtleXR5cGUiLCJsYWJlbCIsImxhbmciLCJsb3ciLCJtYW5pZmVzdCIsIm1hcmdpbmhlaWdodCIsIm1hcmdpbndpZHRoIiwibWF4bGVuZ3RoIiwibWVkaWEiLCJtZWRpYWdyb3VwIiwibWlubGVuZ3RoIiwibXVsdGlwbGUiLCJtdXRlZCIsIm5vdmFsaWRhdGUiLCJub25jZSIsIm9uYmx1ciIsIm9uY2hhbmdlIiwib25mb2N1cyIsIm9uaW5wdXQiLCJvbmtleWRvd24iLCJvbmtleXVwIiwib25tb3VzZWRvd24iLCJvbm1vdXNlb3V0Iiwib25tb3VzZW92ZXIiLCJvbm1vdXNldXAiLCJvbnNjcm9sbCIsIm9uc3VibWl0Iiwib250b3VjaGVuZCIsIm9udG91Y2htb3ZlIiwib250b3VjaHN0YXJ0Iiwib3B0aW11bSIsInBhdHRlcm4iLCJwb3N0ZXIiLCJwcmVsb2FkIiwicmFkaW9ncm91cCIsInJlYWRvbmx5IiwicmVsIiwicmVxdWlyZWQiLCJyZXZlcnNlZCIsInJvbGUiLCJyb3dzcGFuIiwicm93cyIsInNhbmRib3giLCJzY3JvbGxpbmciLCJzZWFtbGVzcyIsInNlbGVjdGVkIiwic2hhcGUiLCJzaXplcyIsInNwZWxsY2hlY2siLCJzcmMiLCJzcmNkb2MiLCJzcmNsYW5nIiwic3Jjc2V0Iiwic3RlcCIsInN1bW1hcnkiLCJ0YWJpbmRleCIsInVzZW1hcCIsIndpZHRoIiwid21vZGUiLCJ3cmFwcGVyIiwiZGlzcGxheU5hbWUiLCJnZXRSZWYiLCJjYXN0IiwicmVuZGVyRnVuY3Rpb24iLCJpbml0aWFsQXR0cnMiLCJwcmV2U3RhdGUiLCJjbGVhbnVwcyIsIlNoYWRvdyIsImRlcHRoQ2xhc3MiLCJjb21wb25lbnRQcm9wcyIsInRlc3RJZCIsIlRvb2xiYXIiLCJ0b25lIiwiY29tcG9uZW50Q29udGVudCIsInNoYWRvdyIsIlRvb2xiYXJUaXRsZSIsImluZGVudCIsImNlbnRlciIsImhvbGRlciIsImJhY2tkcm9wIiwidG91Y2giLCJmdWxsU2NyZWVuIiwibW9kYWwiLCJ2aXNpYmxlIiwic2hvd0JhY2tkcm9wIiwibWVudUNvbnRlbnQiLCJvcGVuRGlhbG9nc1NlbGVjdG9yIiwiYWN0aW9ucyIsImZvb3RlciIsImhlYWRlciIsIndpdGhIZWFkZXIiLCJ3aXRoRm9vdGVyIiwiaGVhZGVyV2l0aFRpdGxlIiwiZm9vdGVyV2l0aEJ1dHRvbnMiLCJmb290ZXJIaWdoIiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyVG9wIiwiZnVsbEJsZWVkIiwiYnV0dG9uQ2xhc3NlcyIsInJvdyIsInRleHRMYWJlbCIsIndhc2giLCJ3YXNoQ29sb3IiLCJkcm9wZG93biIsImNvbnRhaW5lZCIsImRyb3Bkb3duQ2xvc2VkIiwiZHJvcGRvd25PcGVuIiwiZXh0cmFXaWRlIiwiaGFzRHJvcGRvd24iLCJoaWdoTGFiZWwiLCJyYWlzZWQiLCJzZXBhcmF0b3JBdFN0YXJ0IiwiaGFzSG92ZXIiLCJEaWFsb2dQYW5lIiwidW5wYWNrZWRQcm9wcyIsImRvbUVsZW1lbnQiLCJzZXREb21FbGVtZW50IiwiX3VzZVN0YXRlNCIsImlzU2Nyb2xsaW5nIiwic2V0SXNTY3JvbGxpbmciLCJfdXNlU3RhdGU2IiwiaGFzVG9wT3ZlcmZsb3ciLCJzZXRIYXNUb3BPdmVyZmxvdyIsIl91c2VTdGF0ZTgiLCJoYXNCb3R0b21PdmVyZmxvdyIsInNldEhhc0JvdHRvbU92ZXJmbG93IiwiaGVhZGVyRWxSZWYiLCJmb290ZXJFbFJlZiIsInNjcm9sbEVsUmVmIiwic2Nyb2xsV2F0Y2hJZFJlZiIsInVwZGF0ZVNjcm9sbE92ZXJmbG93U3RhdGUiLCJzY3JvbGxlciIsInNjcm9sbFRvcCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImZvb3RlckJ1dHRvbnMiLCJib3JkZXJzIiwic2hvd1RvcEJvcmRlciIsInNob3dCb3R0b21Cb3JkZXIiLCJyZWYiLCJmb3JtT3B0aW9ucyIsIm1lbnUiLCJjbGVhclRpbWVvdXQiLCJEaWFsb2dJbnN0YW5jZSIsIlBhbmUiLCJfdXNlUmVkdWNlcjIiLCJ0cmFuc2l0aW9uU3RhdGUiLCJiYWNrZHJvcEVsUmVmIiwidG91Y2hFbFJlZiIsImNvbnRlbnRFbFJlZiIsInRyYW5zaXRpb25PcHRpb25zIiwiX3JlZjMkaGlkZURlbGF5IiwiY29udGVudEVsIiwiYmFja2Ryb3BFbCIsImhpZGVEaWFsb2ciLCJpc01vZGFsIiwiaGFuZGxlRXNjYXBlIiwiZGlzYWJsZUVzY2FwZSIsIm9wZW5EaWFsb2dzIiwicXVlcnlTZWxlY3RvckFsbCIsInBhcmVudENsYXNzTmFtZSIsInBhbmUiLCJwYW5lc09wdGlvbnMiLCJwYW5lcyIsImNyZWF0ZVBhbmUiLCJNdWx0aXBsZUluc3RhbmNlIiwiRGlhbG9nIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdyaWRfdW5pdCIsImdyaWRfdW5pdF9jb21wb25lbnQiLCJpbmNyZW1lbnQiLCJpbmNyZW1lbnRfbGFyZ2UiLCJncmlkX3VuaXRfbWVudSIsImdyaWRfdW5pdF9pY29uX2J1dHRvbiIsInVuaXRfYmxvY2tfYm9yZGVyX3JhZGl1cyIsInVuaXRfaXRlbV9ib3JkZXJfcmFkaXVzIiwidW5pdF9pbmRlbnQiLCJ1bml0X2luZGVudF9sYXJnZSIsInVuaXRfc2lkZV9wYWRkaW5nIiwidW5pdF90b3VjaF9oZWlnaHQiLCJ1bml0X2ljb25fc2l6ZV9zbWFsbCIsInVuaXRfaWNvbl9zaXplIiwidW5pdF9pY29uX3NpemVfbWVkaXVtIiwidW5pdF9pY29uX3NpemVfbGFyZ2UiLCJ1bml0X3NjcmVlbl9zaXplX2V4dHJhX2xhcmdlIiwidW5pdF9zY3JlZW5fc2l6ZV9sYXJnZSIsInVuaXRfc2NyZWVuX3NpemVfbWVkaXVtIiwidW5pdF9zY3JlZW5fc2l6ZV9zbWFsbCIsImFuaW1hdGlvbl9kdXJhdGlvbiIsImFuaW1hdGlvbl9jdXJ2ZV9zbG93X2luX2Zhc3Rfb3V0IiwiYW5pbWF0aW9uX2N1cnZlX3Nsb3dfaW5fbGluZWFyX291dCIsImFuaW1hdGlvbl9jdXJ2ZV9saW5lYXJfaW5fZmFzdF9vdXQiLCJhbmltYXRpb25fY3VydmVfZGVmYXVsdCIsImZvbnRfd2VpZ2h0X2xpZ2h0IiwiZm9udF93ZWlnaHRfbm9ybWFsIiwiZm9udF93ZWlnaHRfbWVkaXVtIiwiZm9udF93ZWlnaHRfYm9sZCIsImZvbnRfc2l6ZV90aXRsZSIsImxpbmVfaGVpZ2h0IiwiY29sb3JfcHJpbWFyeSIsImNvbG9yX3ByaW1hcnlfYWN0aXZlIiwiY29sb3JfcHJpbWFyeV9kYXJrIiwiY29sb3JfcHJpbWFyeV9mYWRlZCIsImNvbG9yX3ByaW1hcnlfZm9yZWdyb3VuZCIsImNvbG9yX2xpZ2h0X2JhY2tncm91bmQiLCJjb2xvcl9saWdodF9mb3JlZ3JvdW5kIiwiY29sb3JfZGFya19iYWNrZ3JvdW5kIiwiY29sb3JfZGFya19mb3JlZ3JvdW5kIiwiYmxlbmRfbGlnaHRfdGV4dF9wcmltYXJ5IiwiYmxlbmRfbGlnaHRfdGV4dF9yZWd1bGFyIiwiYmxlbmRfbGlnaHRfdGV4dF9zZWNvbmRhcnkiLCJibGVuZF9saWdodF90ZXh0X3RlcnRpYXJ5IiwiYmxlbmRfbGlnaHRfdGV4dF9kaXNhYmxlZCIsImJsZW5kX2xpZ2h0X2JvcmRlcl9tZWRpdW0iLCJibGVuZF9saWdodF9ib3JkZXJfbGlnaHQiLCJibGVuZF9saWdodF9iYWNrZ3JvdW5kX2FjdGl2ZSIsImJsZW5kX2xpZ2h0X2JhY2tncm91bmRfaG92ZXIiLCJibGVuZF9saWdodF9iYWNrZ3JvdW5kX2hvdmVyX21lZGl1bSIsImJsZW5kX2xpZ2h0X2JhY2tncm91bmRfZGlzYWJsZWQiLCJibGVuZF9saWdodF9vdmVybGF5X2JhY2tncm91bmQiLCJibGVuZF9kYXJrX3RleHRfcHJpbWFyeSIsImJsZW5kX2RhcmtfdGV4dF9yZWd1bGFyIiwiYmxlbmRfZGFya190ZXh0X3NlY29uZGFyeSIsImJsZW5kX2RhcmtfdGV4dF90ZXJ0aWFyeSIsImJsZW5kX2RhcmtfdGV4dF9kaXNhYmxlZCIsImJsZW5kX2RhcmtfYm9yZGVyX21lZGl1bSIsImJsZW5kX2RhcmtfYm9yZGVyX2xpZ2h0IiwiYmxlbmRfZGFya19iYWNrZ3JvdW5kX2FjdGl2ZSIsImJsZW5kX2RhcmtfYmFja2dyb3VuZF9ob3ZlciIsImJsZW5kX2RhcmtfYmFja2dyb3VuZF9ob3Zlck1lZGl1bSIsImJsZW5kX2RhcmtfYmFja2dyb3VuZF9kaXNhYmxlZCIsImJsZW5kX2Rhcmtfb3ZlcmxheV9iYWNrZ3JvdW5kIiwiYnJlYWtwb2ludF9mb3JfcGhvbmVfb25seSIsImJyZWFrcG9pbnRfZm9yX3RhYmxldF9wb3J0cmFpdF91cCIsImJyZWFrcG9pbnRfZm9yX3RhYmxldF9sYW5kc2NhcGVfdXAiLCJicmVha3BvaW50X2Zvcl9kZXNrdG9wX3VwIiwiYnJlYWtwb2ludF9mb3JfYmlnX2Rlc2t0b3BfdXAiLCJicmVha3BvaW50X2Zvcl90dl91cCIsInpfdG9vbGJhciIsInpfbWVudSIsInpfYXBwX2JhciIsInpfZHJhd2VyIiwiel9ub3RpZmljYXRpb24iLCJ6X2RpYWxvZyIsIkFOSU1BVElPTl9FTkRfRVZFTlQiLCJnZXRBbmltYXRpb25FbmRFdmVudCIsIm1hc2siLCJ3YXZlcyIsInVuY29uc3RyYWluZWQiLCJ3YXZlc0FuaW1hdGluZyIsIlJpcHBsZSIsImFuaW1hdGlvbkNvdW50UmVmIiwidHJpZ2dlckVsIiwicGFyZW50RWxlbWVudCIsInRhcCIsIm11bHRpIiwiY29udGFpbmVyIiwicmVjdCIsInRvdWNoZXMiLCJwYWdlWCIsImNsaWVudFgiLCJ5IiwicGFnZVkiLCJjbGllbnRZIiwidyIsIm9mZnNldFdpZHRoIiwid2F2ZVJhZGl1cyIsInNxcnQiLCJteCIsIm15IiwicngiLCJyeSIsInN0YXJ0T3BhY2l0eSIsIm9wYWNpdHlEZWNheVZlbG9jaXR5IiwiZW5kT3BhY2l0eSIsInN0YXJ0U2NhbGUiLCJlbmRTY2FsZSIsImNvbG9yIiwiYW5pbWF0aW9uTmFtZSIsImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uIiwicmlwcGxlU3R5bGVTaGVldCIsInN0eWxlc2hlZXQiLCJhZGRTdHlsZVRvSGVhZCIsImFuaW1hdGlvbkRvbmUiLCJldnQiLCJyZW1vdmVTdHlsZUZyb21IZWFkIiwicGVyc2lzdGVudCIsInJpcHBsZUFuaW1hdGlvbiIsIkRhdGUiLCJnZXRUaW1lIiwiYXZhdGFyIiwiU1ZHIiwic3ZnRWxlbWVudCIsIkljb24iLCJCdXR0b24iLCJfb2JqZWN0U3ByZWFkMyIsImlzSW5hY3RpdmUiLCJzZXRJc0luYWN0aXZlIiwib25DbGlja0hhbmRsZXIiLCJvbktleVVwSGFuZGxlciIsImFuaW1hdGVPblRhcCIsImhhbmRsZU1vdXNlTGVhdmUiLCJibHVyIiwiaW5hY3RpdmF0ZSIsImtleUNvZGUiLCJub2luayIsImluayIsImJ1dHRvbkNvbnRlbnQiLCJ0ZXh0U3R5bGUiLCJyaXBwbGUiLCJnZW5lcmFsRm5zIiwidGludEZucyIsInRpbnQiLCJsaWdodFRpbnRGbnMiLCJkYXJrVGludEZucyIsInJhaXNlZFNpemUiLCJwYWRkZWRTaXplIiwiYm9yZGVyUmFkaXVzIiwiYW5pbWF0aW9uX3Nob3dfY3NzIiwiYW5pbWF0aW9uX2hpZGVfY3NzIiwiYW5pbWF0aW9uX2RlbGF5IiwiYW5pbWF0aW9uX3RpbWluZ19mdW5jdGlvbiIsInNpemVfc21hbGwiLCJzaXplX3JlZ3VsYXIiLCJzaXplX21lZGl1bSIsInNpemVfbGFyZ2UiLCJzaXplX2ZhYiIsImJhc2VTcGlubmVyVmFycyIsImNvbG9yX2xpZ2h0X3JhaXNlZF9iYWNrZ3JvdW5kIiwiY29sb3JfZGFya19yYWlzZWRfYmFja2dyb3VuZCIsIl9jcmVhdGVTaGFkb3dGb3JTZWxlY3RvciIsImRlcHRoIiwiX2NyZWF0ZVJlZ3VsYXJTaGFkb3dGb3JTZWxlY3RvciIsIl9jcmVhdGVBY3RpdmVTaGFkb3dGb3JTZWxlY3RvciIsImJveFNoYWRvdyIsImhvdmVyRGVwdGgiLCJob3ZlclNlbGVjdG9yIiwiX2NyZWF0ZUFjdGl2ZVNoYWRvd1RyYW5zaXRpb24iLCJfY3JlYXRlU2hhZG93Iiwic2hhZG93X2RlcHRoIiwic2hhcmVkVmFyRm5zIiwicG9pbnRlckV2ZW50cyIsInNoYXJlZFZhcnMiLCJzaGFkb3dfdG9wX2RlcHRoXzAiLCJzaGFkb3dfYm90dG9tX2RlcHRoXzAiLCJzaGFkb3dfdG9wX2RlcHRoXzEiLCJzaGFkb3dfYm90dG9tX2RlcHRoXzEiLCJzaGFkb3dfdG9wX2RlcHRoXzIiLCJzaGFkb3dfYm90dG9tX2RlcHRoXzIiLCJzaGFkb3dfdG9wX2RlcHRoXzMiLCJzaGFkb3dfYm90dG9tX2RlcHRoXzMiLCJzaGFkb3dfdG9wX2RlcHRoXzQiLCJzaGFkb3dfYm90dG9tX2RlcHRoXzQiLCJzaGFkb3dfdG9wX2RlcHRoXzUiLCJzaGFkb3dfYm90dG9tX2RlcHRoXzUiLCJ1c2VyU2VsZWN0Iiwib3V0bGluZSIsInRleHREZWNvcmF0aW9uIiwidGV4dEFsaWduIiwiZm9udFNpemUiLCJyb3dfbWFyZ2luX2giLCJfYm9yZGVyIiwiYm9yZGVyQ29sb3IiLCJob3ZlclRpbnRGbnMiLCJsaWdodFRpbnRIb3ZlckZucyIsImRhcmtUaW50SG92ZXJGbnMiLCJhbGlnblNpZGUiLCJpc1JUTCIsImJvcmRlclN0eWxlIiwiYWxpZ25MZWZ0IiwiYWxpZ25SaWdodCIsImxpbmVfaGVpZ2h0X2xhYmVsX3BhZGRpbmdfdiIsIm1pbkhlaWdodCIsImxhYmVsX3BhZGRpbmdfdiIsIm91dGVyX3BhZGRpbmdfdl9sYWJlbF9wYWRkaW5nX3YiLCJvdXRlcl9wYWRkaW5nX3YiLCJsaW5lX2hlaWdodF9vdXRlcl9wYWRkaW5nX3ZfbGFiZWxfcGFkZGluZ192IiwiYm9yZGVyX3JhZGl1c19idXR0b25fZ3JvdXAiLCJfcGVCdXR0b25fX2NvbnRlbnQiLCJfcGVCdXR0b25fX2NvbnRlbnQyIiwiYm9yZGVyX3JhZGl1cyIsIl9ib3JkZXIkMSIsIl9ib3JkZXJfd2lkdGgiLCJib3JkZXJXaWR0aCIsImJvcmRlcl93aWR0aCIsIm1hcmdpbkxlZnQiLCJ2YXJGbnMkMSIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwibWluV2lkdGgiLCJtaW5fd2lkdGgiLCJwYWRkaW5nX2giLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsIm1hcmdpblJpZ2h0IiwicGFkZGluZ19oX2V4dHJhX3dpZGUiLCJmb250X3dlaWdodCIsImZvbnRXZWlnaHQiLCJ0ZXh0X3RyYW5zZm9ybSIsInRleHRUcmFuc2Zvcm0iLCJmb250X3NpemUiLCJkcm9wZG93bl9pY29uX3NpemUiLCJtYXJnaW5Ub3AiLCJzZXBhcmF0b3Jfd2lkdGgiLCJsZXR0ZXJfc3BhY2luZyIsImxldHRlclNwYWNpbmciLCJfY29udGFpbmVkIiwic3VwZXJMYXlvdXQkMSIsInRvdWNoX2hlaWdodCIsInRoZW1lVmFycyIsImJvcmRlclZhcnMiLCJjb2xvcl9saWdodF9ib3JkZXIiLCJjb2xvcl9saWdodF9kaXNhYmxlZF9ib3JkZXIiLCJjb2xvcl9kYXJrX2JvcmRlciIsImNvbG9yX2RhcmtfZGlzYWJsZWRfYm9yZGVyIiwidGV4dEJ1dHRvblZhcnMiLCJjb2xvcl9saWdodF90ZXh0IiwiY29sb3JfbGlnaHRfd2FzaF9iYWNrZ3JvdW5kIiwiY29sb3JfbGlnaHRfd2FzaF9vcGFjaXR5IiwiY29sb3JfbGlnaHRfYWN0aXZlX2JhY2tncm91bmQiLCJjb2xvcl9saWdodF9kaXNhYmxlZF9iYWNrZ3JvdW5kIiwiY29sb3JfbGlnaHRfZGlzYWJsZWRfdGV4dCIsImNvbG9yX2xpZ2h0X2ljb24iLCJjb2xvcl9saWdodF9zZXBhcmF0b3IiLCJjb2xvcl9kYXJrX3RleHQiLCJjb2xvcl9kYXJrX3dhc2hfYmFja2dyb3VuZCIsImNvbG9yX2Rhcmtfd2FzaF9vcGFjaXR5IiwiY29sb3JfZGFya19hY3RpdmVfYmFja2dyb3VuZCIsImNvbG9yX2RhcmtfZGlzYWJsZWRfYmFja2dyb3VuZCIsImNvbG9yX2RhcmtfZGlzYWJsZWRfdGV4dCIsImNvbG9yX2RhcmtfaWNvbiIsImNvbG9yX2Rhcmtfc2VwYXJhdG9yIiwidGhlbWVWYXJzJDEiLCJjb250YWluZWRCdXR0b25WYXJzIiwic3VwZXJGbnMiLCJzdXBlclNlbGVjdG9yIiwiZm5zJDEiLCJzZWxlY3RvciQxIiwidGV4dEJ1dHRvblZhcnMkMSIsImJ1dHRvbkdyb3VwVmFycyIsImdlbmVyYWxGbnMkMSIsInRpbnRGbnMkMSIsImNvbnRlbnRDb2xvciIsInRpZ2h0X3RpdGxlX3BhZGRpbmdfYm90dG9tX3N1YnRpdGxlX2xpbmVfaGVpZ2h0X3BhZGRpbmdfYm90dG9tIiwidGlnaHRfdGl0bGVfcGFkZGluZ19ib3R0b20iLCJzdWJ0aXRsZV9saW5lX2hlaWdodF9wYWRkaW5nX2JvdHRvbSIsInRpdGxlX3BhZGRpbmdfdl90aXRsZV9wYWRkaW5nX2hfc3VidGl0bGVfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20iLCJ0aXRsZV9wYWRkaW5nX3YiLCJ0aXRsZV9wYWRkaW5nX2giLCJ0ZXh0X3BhZGRpbmdfdl90ZXh0X2xpbmVfaGVpZ2h0X3BhZGRpbmdfdG9wIiwidGV4dF9wYWRkaW5nX3YiLCJ0ZXh0X2xpbmVfaGVpZ2h0X3BhZGRpbmdfdG9wIiwidGV4dF9wYWRkaW5nX2JvdHRvbV90ZXh0X2xpbmVfaGVpZ2h0X3BhZGRpbmdfYm90dG9tIiwidGV4dF9wYWRkaW5nX2JvdHRvbSIsInRleHRfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20iLCJ0aWdodF90ZXh0X3BhZGRpbmdfYm90dG9tX3RleHRfbGluZV9oZWlnaHRfcGFkZGluZ19ib3R0b20iLCJ0aWdodF90ZXh0X3BhZGRpbmdfYm90dG9tIiwidmFycyQxIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiYmFja2dyb3VuZFNpemUiLCJiYWNrZ3JvdW5kUmVwZWF0IiwiYmFja2dyb3VuZFBvc2l0aW9uIiwiYmFja2dyb3VuZFBvc2l0aW9uWSIsImJhY2tncm91bmRQb3NpdGlvblgiLCJtYXhXaWR0aCIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsImltYWdlX3NpemVfc21hbGwiLCJpbWFnZV9zaXplX3JlZ3VsYXIiLCJpbWFnZV9zaXplX21lZGl1bSIsImltYWdlX3NpemVfbGFyZ2UiLCJvbmVfbGluZV9oZWlnaHRfd2l0aF9pY29uIiwiYWN0aW9uc19idXR0b25fbWFyZ2luX2giLCJhY3Rpb25zX3BhZGRpbmdfdiIsImFjdGlvbnNfcGFkZGluZ19oIiwiYWN0aW9uc19idXR0b25fbWFyZ2luX3YiLCJtYXJnaW5Cb3R0b20iLCJhY3Rpb25zX3ZlcnRpY2FsX3BhZGRpbmdfdiIsIm9mZnNldF9zbWFsbF9wYWRkaW5nX3YiLCJ0ZXh0X3BhZGRpbmdfaCIsImdlbmVyYWxGbnMkMiIsInRpbnRGbnMkMiIsIm92ZXJsYXlDb2xvciIsImNhcmRWYXJzIiwicGFkZGluZ19hY3Rpb25zX3YiLCJpY29uX2VsZW1lbnRfd2lkdGgiLCJwYWRkaW5nX3YiLCJvbmVfbGluZV9wYWRkaW5nX3YiLCJjb2xvcl9saWdodF9tYWluX2JhY2tncm91bmQiLCJjb2xvcl9saWdodF90aXRsZV90ZXh0IiwiY29sb3JfbGlnaHRfc3VidGl0bGVfdGV4dCIsImNvbG9yX2xpZ2h0X2FjdGlvbnNfYm9yZGVyIiwiY29sb3JfbGlnaHRfb3ZlcmxheV9iYWNrZ3JvdW5kIiwiY29sb3JfZGFya19tYWluX2JhY2tncm91bmQiLCJjb2xvcl9kYXJrX3RpdGxlX3RleHQiLCJjb2xvcl9kYXJrX3N1YnRpdGxlX3RleHQiLCJjb2xvcl9kYXJrX2FjdGlvbnNfYm9yZGVyIiwiY29sb3JfZGFya19vdmVybGF5X2JhY2tncm91bmQiLCJjb250ZW50U2VsZWN0b3IiLCJvdmVybGF5U2hlZXRTZWxlY3RvciIsIm92ZXJsYXlDb250ZW50U2VsZWN0b3IiLCJiYXNlRm5zIiwib3ZlcmxheUNvbG9yRm5zIiwiY29udGVudENvbG9yRm5zIiwibWFrZVNpemUiLCJpY29uU2l6ZSIsImxhYmVsU2l6ZSIsImxhYmVsX2hlaWdodCIsImJ1dHRvbl9zaXplX2ljb25fc2l6ZSIsIl9wZUJ1dHRvblBlQ29udHIiLCJidXR0b25fc2l6ZSIsImljb25fc2l6ZSIsIl9sYWJlbF9wYWRkaW5nX2JlZm9yZSIsImxhYmVsX3BhZGRpbmdfYmVmb3JlIiwiX2xhYmVsX3BhZGRpbmdfYWZ0ZXIiLCJsYWJlbF9wYWRkaW5nX2FmdGVyIiwiYm94U2l6aW5nIiwiYWxpZ25TZWxmIiwibGFiZWxfZm9udF9zaXplIiwic2VsZWN0aW9uQ29udHJvbFZhcnMiLCJjb2xvcl9saWdodF9vbiIsImNvbG9yX2xpZ2h0X29mZiIsImNvbG9yX2xpZ2h0X2xhYmVsIiwiY29sb3JfbGlnaHRfZGlzYWJsZWQiLCJjb2xvcl9saWdodF9vbl9pY29uIiwiY29sb3JfbGlnaHRfb2ZmX2ljb24iLCJjb2xvcl9saWdodF9vbl9sYWJlbCIsImNvbG9yX2xpZ2h0X29mZl9sYWJlbCIsImNvbG9yX2Rhcmtfb24iLCJjb2xvcl9kYXJrX29mZiIsImNvbG9yX2RhcmtfbGFiZWwiLCJjb2xvcl9kYXJrX2Rpc2FibGVkIiwiY29sb3JfZGFya19vbl9pY29uIiwiY29sb3JfZGFya19vZmZfaWNvbiIsImNvbG9yX2Rhcmtfb25fbGFiZWwiLCJjb2xvcl9kYXJrX29mZl9sYWJlbCIsImNoZWNrYm94VmFycyIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyQm90dG9tU3R5bGUiLCJib3JkZXJCb3R0b21Db2xvciIsIm1heF93aWR0aF9zaWRlX3BhZGRpbmdfbW9iaWxlIiwibWF4V2lkdGhCcmVha3BvaW50TW9iaWxlIiwibWF4X3dpZHRoIiwic2lkZV9wYWRkaW5nX21vYmlsZSIsInBhZGRpbmdfaGVhZGVyX2JvdHRvbSIsImhlYWRlcl9ib3R0b20iLCJoZWFkZXJfaGVpZ2h0X2Zvb3Rlcl9oZWlnaHRfbWFyZ2luX3ZlcnRpY2FsIiwiaGVhZGVyX2hlaWdodCIsImZvb3Rlcl9oZWlnaHQiLCJtYXJnaW5fdmVydGljYWwiLCJib3JkZXJUb3BTdHlsZSIsImZsZXhEaXJlY3Rpb24iLCJsaW5lX2hlaWdodF90aXRsZSIsImRpYWxvZ1BhbmVWYXJzIiwibWF4X2hlaWdodCIsImNvbG9yX2xpZ2h0X2JvZHlfdGV4dCIsImNvbG9yX2xpZ2h0X2JvZHlfYm9yZGVyIiwiY29sb3JfZGFya19ib2R5X3RleHQiLCJjb2xvcl9kYXJrX2JvZHlfYm9yZGVyIiwiZnVsbF9zY3JlZW4iLCJ6X2luZGV4IiwiZGlhbG9nVmFycyIsImNvbG9yX2xpZ2h0X2JhY2tkcm9wX2JhY2tncm91bmQiLCJjb2xvcl9kYXJrX2JhY2tkcm9wX2JhY2tncm91bmQiLCJfYmFja2Ryb3AiLCJfbW9kYWwiLCJjb3ZlciIsIm1pbmkiLCJmbG9hdGluZyIsImZpeGVkIiwiYW5jaG9yRW5kIiwiX2JvcmRlcjIiLCJfcGVEcmF3ZXJGaXhlZCIsInNlbGVjdG9yQW5jaG9yRW5kIiwiX2NvbnRlbnRfd2lkdGhfbWluaV9jb2xsYXBzZWQiLCJtaW5pU2VsZWN0b3IiLCJjb250ZW50X3dpZHRoX21pbmlfY29sbGFwc2VkIiwiX2NvdmVyX2NvbnRlbnRfbWF4X3dpZHRoIiwiY292ZXJTZWxlY3RvciIsIl9wZURpYWxvZ19fY29udGVudCIsIl9wZURpYWxvZ1Zpc2libGUiLCJjb250ZW50X21heF93aWR0aCIsImNvdmVyX2NvbnRlbnRfbWF4X3dpZHRoIiwiX2NvbnRlbnRfd2lkdGgiLCJjb250ZW50X3dpZHRoIiwiX3B1c2hfY29udGVudF93aWR0aCIsInB1c2hTZWxlY3RvciIsIl9wZURpYWxvZ19fY29udGVudDIiLCJfcGVEaWFsb2dWaXNpYmxlMiIsInB1c2hfY29udGVudF93aWR0aCIsIl9jb3ZlciIsIl9taW5pIiwiX3Blcm1hbmVudCIsInBlcm1hbmVudFNlbGVjdG9yIiwiX3B1c2giLCJfZmxvYXRpbmciLCJvdmVyZmxvd1giLCJkcmF3ZXJWYXJzIiwic2l6ZV9taW5pIiwiY29sb3JfbGlnaHQiLCJjb2xvcl9kYXJrIiwidmVydGljYWxBbGlnbiIsInNpemVEaXJlY3RpdmUiLCJpY29uVmFycyIsImNvbG9yX2xpZ2h0X2F2YXRhcl9iYWNrZ3JvdW5kIiwiY29sb3JfZGFya19hdmF0YXJfYmFja2dyb3VuZCIsInBhZGRpbmdfY29tcGFjdCIsImxhYmVsX2xpbmVfaGVpZ2h0IiwibGFiZWxfZm9udF93ZWlnaHQiLCJsYWJlbF90ZXh0X3RyYW5zZm9ybSIsImljb25CdXR0b25WYXJzIiwibGFiZWxfdG9wX21hcmdpbl9mYWN0b3IiLCJjb2xvcl9iYWNrZ3JvdW5kIiwicG9zaXRpb25CbGFkZXMiLCJyb3RhdGlvbl9hbmltYXRpb25fZHVyYXRpb24iLCJhbmltYXRpb24iLCJibGFkZVdpZHRoIiwiYmxhZGVIZWlnaHQiLCJpT1NTcGlubmVyVmFycyIsIl9zZWwiLCJib3JkZXJfd2lkdGhfYm9yZGVyZWQiLCJib3JkZXJfd2lkdGhfc3RhY2tlZCIsImxpc3RWYXJzIiwiX3NlbGVjdGVkIiwic2VsZWN0ZWRUZXh0Q29sb3IiLCJ0aGVtZUZucyIsInBhZGRpbmdIIiwicGFkZGluZ1YiLCJ0aXRsZV9saW5lX2NvdW50X3NpbmdsZV9saW5lX2hlaWdodCIsInNpbmdsZV9saW5lX2hlaWdodCIsInRpdGxlX2xpbmVfY291bnQiLCJ1blNlbGVjdGFibGUiLCJfaW5zZXQiLCJpbnNldEgiLCJpbnNldFYiLCJpbnNldF9oX3NpemUiLCJpbnNldF92X3NpemUiLCJfcm91bmRlZCIsInJvdW5kZWRfYm9yZGVyX3JhZGl1cyIsInN1YnRpdGxlX2xpbmVfY291bnQiLCJsaW5lX2hlaWdodF9zdWJ0aXRsZSIsImZvbnRfc2l6ZV9zdWJ0aXRsZSIsImZvbnRfd2VpZ2h0X3N1YnRpdGxlIiwiaGlnaF9zdWJ0aXRsZV9saW5lX2NvdW50IiwiZm9udF93ZWlnaHRfdGl0bGUiLCJmb250X3NpemVfbmF2aWdhdGlvbl90aXRsZSIsImZvbnRfd2VpZ2h0X25hdmlnYXRpb25fdGl0bGUiLCJzaWRlX3BhZGRpbmciLCJpbnNldF9zaXplIiwiY29tcGFjdF9mcm9udF9pdGVtX3dpZHRoIiwiZnJvbnRfaXRlbV93aWR0aCIsImZvbnRfc2l6ZV9zbWFsbCIsImhhc19oaWdoX3N1YnRpdGxlX3BhZGRpbmciLCJoYXNfc3VidGl0bGVfcGFkZGluZyIsInNpbmdsZV9oZWlnaHQiLCJmb250X3NpemVfbGlzdF9oZWFkZXIiLCJmb250X3dlaWdodF9saXN0X2hlYWRlciIsImNvbXBhY3RfcGFkZGluZyIsImluc2V0IiwiaW5zZXRfaCIsImluc2V0X3YiLCJyb3VuZGVkIiwibGlzdFRpbGVWYXJzIiwiY29tcGFjdF9zaWRlX3BhZGRpbmciLCJzaW5nbGVfd2l0aF9pY29uX2hlaWdodCIsInNpbmdsZV93aXRoX2ljb25fbGluZV9oZWlnaHQiLCJjb2xvcl9saWdodF90aXRsZSIsImNvbG9yX2xpZ2h0X3N1YnRpdGxlIiwiY29sb3JfbGlnaHRfaW5mbyIsImNvbG9yX2xpZ2h0X2Zyb250IiwiY29sb3JfbGlnaHRfdGV4dF9kaXNhYmxlZCIsImNvbG9yX2xpZ2h0X2xpc3RfaGVhZGVyIiwiY29sb3JfbGlnaHRfc2Vjb25kYXJ5IiwiY29sb3JfbGlnaHRfaG92ZXIiLCJjb2xvcl9saWdodF9ob3Zlcl9mcm9udCIsImNvbG9yX2xpZ2h0X2hvdmVyX2JhY2tncm91bmQiLCJjb2xvcl9saWdodF9mb2N1c19iYWNrZ3JvdW5kIiwiY29sb3JfbGlnaHRfc2VsZWN0ZWRfdGV4dCIsImNvbG9yX2xpZ2h0X3NlbGVjdGVkX2JhY2tncm91bmQiLCJjb2xvcl9saWdodF9oaWdobGlnaHRfYmFja2dyb3VuZCIsImNvbG9yX2RhcmtfdGl0bGUiLCJjb2xvcl9kYXJrX3N1YnRpdGxlIiwiY29sb3JfZGFya19pbmZvIiwiY29sb3JfZGFya19mcm9udCIsImNvbG9yX2RhcmtfdGV4dF9kaXNhYmxlZCIsImNvbG9yX2RhcmtfbGlzdF9oZWFkZXIiLCJjb2xvcl9kYXJrX3NlY29uZGFyeSIsImNvbG9yX2RhcmtfaG92ZXIiLCJjb2xvcl9kYXJrX2hvdmVyX2Zyb250IiwiY29sb3JfZGFya19ob3Zlcl9iYWNrZ3JvdW5kIiwiY29sb3JfZGFya19zZWxlY3RlZF90ZXh0IiwiY29sb3JfZGFya19zZWxlY3RlZF9iYWNrZ3JvdW5kIiwiY29sb3JfZGFya19oaWdobGlnaHRfYmFja2dyb3VuZCIsIk9QQUNJVFlfTUFYIiwiQ1VSVkVfSU5GSU5JVEUiLCJrZlNwaW4iLCJkaXJlY3Rpb24iLCJib3JkZXJSaWdodENvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiYXJjX3RpbWUiLCJsYXllckFuaW1hdGlvbiIsInJvdGF0aW9uX2R1cmF0aW9uIiwiYm9yZGVyX3dpZHRoX3NtYWxsIiwiYm9yZGVyX3dpZHRoX3JlZ3VsYXIiLCJib3JkZXJfd2lkdGhfbWVkaXVtIiwiYm9yZGVyX3dpZHRoX2xhcmdlIiwiYm9yZGVyX3dpZHRoX2ZhYiIsImFyY19zaXplIiwiYXJjU2l6ZSIsImJsdWU0MDAiLCJyZWQ1MDAiLCJ5ZWxsb3c2MDAiLCJncmVlbjUwMCIsIm1hdGVyaWFsRGVzaWduU3Bpbm5lclZhcnMiLCJhcmNfc3RhcnRfZGVncmVlcyIsImNvbG9yX2xpZ2h0X3NpbmdsZSIsImNvbG9yX2xpZ2h0XzEiLCJjb2xvcl9saWdodF8yIiwiY29sb3JfbGlnaHRfMyIsImNvbG9yX2xpZ2h0XzQiLCJjb2xvcl9kYXJrX3NpbmdsZSIsImNvbG9yX2RhcmtfMSIsImNvbG9yX2RhcmtfMiIsImNvbG9yX2RhcmtfMyIsImNvbG9yX2RhcmtfNCIsImNsaXAiLCJwcm9ncmVzc19hbmltYXRpb25fZHVyYXRpb24iLCJhbmltYXRpb25EdXJhdGlvbiIsIm1hdGVyaWFsRGVzaWduUHJvZ3Jlc3NTcGlubmVyVmFycyIsInRvcF9tZW51IiwieiIsIm1lbnVWYXJzIiwiYW5pbWF0aW9uX2hpZGVfb3JpZ2luX2VmZmVjdF9jc3MiLCJhbmltYXRpb25fc2hvd19vcmlnaW5fZWZmZWN0X2NzcyIsIndpZHRoX2ZhY3RvciIsIndpZHRocyIsIndpZHRoU3R5bGUiLCJ1bmlmeVdpZHRoIiwid2lkdGhDbGFzcyIsIndpZHRoc19taW5fd2lkdGhfd2lkdGhfZmFjdG9yIiwiX3RvcF9tZW51IiwiX3oiLCJob2xkZXJMYXlvdXQiLCJ0aXRsZV9zaW5nbGVfcGFkZGluZ192X3RpdGxlX3BhZGRpbmdfaCIsInRpdGxlX3NpbmdsZV9wYWRkaW5nX3YiLCJjdXN0b21MYXlvdXRGbnMiLCJ0aXRsZV9tdWx0aV9wYWRkaW5nX3YiLCJub3RpZmljYXRpb25WYXJzIiwibWluX2hlaWdodCIsImJsZW5kX2xpZ2h0X2RhcmtfcHJpbWFyeSIsImhvbGRlckZucyIsInJhZGlvQnV0dG9uVmFycyIsInJpcHBsZVZhcnMiLCJpbnNldF9oZWlnaHRfbGluZV9oZWlnaHRfaW5wdXQiLCJpbnNldF9pbnB1dF9wYWRkaW5nX3YiLCJpbnNldF9oZWlnaHQiLCJsaW5lX2hlaWdodF9pbnB1dCIsImZ1bGxfd2lkdGhfaGVpZ2h0X2xpbmVfaGVpZ2h0X2lucHV0IiwiZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX3YiLCJmdWxsX3dpZHRoX2hlaWdodCIsImZvbnRfc2l6ZV9pbnB1dCIsImluc2V0X2JvcmRlcl9yYWRpdXMiLCJpbnNldF9zaWRlX3BhZGRpbmciLCJpbnNldF9pbnB1dF9pbmRlbnQiLCJpbnNldF9pbnB1dF9yaWdodF9wYWRkaW5nIiwiZnVsbF93aWR0aF9zaWRlX3BhZGRpbmciLCJmdWxsX3dpZHRoX2lucHV0X2luZGVudCIsImZ1bGxfd2lkdGhfYm9yZGVyX3JhZGl1cyIsImZ1bGxfd2lkdGhfaW5wdXRfcmlnaHRfcGFkZGluZyIsInNlYXJjaFZhcnMiLCJmdWxsX3dpZHRoX3NpZGVfbWFyZ2luIiwiY29sb3JfbGlnaHRfbGFiZWxfdGV4dCIsImNvbG9yX2xpZ2h0X2lucHV0X3RleHQiLCJjb2xvcl9kYXJrX2xhYmVsX3RleHQiLCJjb2xvcl9kYXJrX2lucHV0X3RleHQiLCJnZXRUaHVtYlNpemUiLCJ0aHVtYlNpemUiLCJ0aHVtYl9zaXplIiwidGh1bWJfYm9yZGVyX3dpZHRoIiwiYmFyT2Zmc2V0Iiwic3RlcHNPZmZzZXQiLCJub3JtYWxUaHVtYlNpemUiLCJkaXNhYmxlZFRodW1iU2l6ZSIsImdldEJvcmRlcldpZHRoIiwic2NhbGVkQm9yZGVyV2lkdGgiLCJhY3RpdmVfdGh1bWJfc2NhbGUiLCJub3JtYWxCb3JkZXJXaWR0aCIsImRpc2FibGVkQm9yZGVyV2lkdGgiLCJkaXNhYmxlZF90aHVtYl9zY2FsZSIsInRodW1iX3NpemVfdGh1bWJfYm9yZGVyX3dpZHRoX2Rpc2FibGVkX3RodW1iX3NjYWxlIiwiX2dldFRodW1iU2l6ZSIsIl9nZXRCb3JkZXJXaWR0aCIsImhlaWdodF90cmFja19oZWlnaHQiLCJ0cmFja19oZWlnaHQiLCJ0cmFja19oZWlnaHRfYmFyX2hlaWdodCIsImJhcl9oZWlnaHQiLCJ0aHVtYl9zaXplX3RodW1iX3RvdWNoX3NpemUiLCJ0aHVtYl90b3VjaF9zaXplIiwidGh1bWJfc2l6ZV9hY3RpdmVfdGh1bWJfc2NhbGUiLCJzY2FsZWRUaHVtYkRpZmYiLCJ0aHVtYl9zaXplX3Bpbl93aWR0aCIsInBpbl93aWR0aCIsInRyYW5zZm9ybU9yaWdpbiIsIl9nZXRUaHVtYlNpemU1IiwiYWN0aXZlX3Bpbl90aHVtYl9zY2FsZSIsInNpZGVfc3BhY2luZyIsImhvcml6b250YWxfbGF5b3V0X3NpZGVfc3BhY2luZyIsInN0ZXBfd2lkdGgiLCJwaW5faGVpZ2h0IiwicGluX2ZvbnRfc2l6ZSIsImxpZ2h0Rm9yZWdyb3VuZCIsImRhcmtGb3JlZ3JvdW5kIiwiYWN0aXZlQ29sb3IiLCJsYXJnZXN0RWxlbWVudCIsImNvbG9yX2xpZ2h0X3RyYWNrX2FjdGl2ZSIsImNvbG9yX2xpZ2h0X3RyYWNrX2luYWN0aXZlIiwiY29sb3JfbGlnaHRfdHJhY2tfdmFsdWUiLCJjb2xvcl9saWdodF90aHVtYl9vZmYiLCJjb2xvcl9saWdodF90aHVtYl9vZmZfZm9jdXMiLCJjb2xvcl9saWdodF90aHVtYl9vZmZfZm9jdXNfb3BhY2l0eSIsImNvbG9yX2xpZ2h0X3RodW1iX29uIiwiY29sb3JfbGlnaHRfdGh1bWJfb25fZm9jdXNfb3BhY2l0eSIsImNvbG9yX2xpZ2h0X3RodW1iX2luYWN0aXZlIiwiY29sb3JfbGlnaHRfdGljayIsImNvbG9yX2xpZ2h0X3RpY2tfdmFsdWUiLCJjb2xvcl9saWdodF9kaXNhYmxlZF9pY29uIiwiY29sb3JfbGlnaHRfZGlzYWJsZWRfbGFiZWwiLCJjb2xvcl9saWdodF9waW5fbGFiZWwiLCJjb2xvcl9saWdodF9waW5fYmFja2dyb3VuZCIsImNvbG9yX2RhcmtfdHJhY2tfYWN0aXZlIiwiY29sb3JfZGFya190cmFja19pbmFjdGl2ZSIsImNvbG9yX2RhcmtfdHJhY2tfdmFsdWUiLCJjb2xvcl9kYXJrX3RodW1iX29mZiIsImNvbG9yX2RhcmtfdGh1bWJfb2ZmX2ZvY3VzIiwiY29sb3JfZGFya190aHVtYl9vZmZfZm9jdXNfb3BhY2l0eSIsImNvbG9yX2RhcmtfdGh1bWJfb24iLCJjb2xvcl9kYXJrX3RodW1iX29uX2ZvY3VzX29wYWNpdHkiLCJjb2xvcl9kYXJrX3RodW1iX2luYWN0aXZlIiwiY29sb3JfZGFya190aWNrIiwiY29sb3JfZGFya190aWNrX3ZhbHVlIiwiY29sb3JfZGFya19kaXNhYmxlZF9pY29uIiwiY29sb3JfZGFya19kaXNhYmxlZF9sYWJlbCIsImNvbG9yX2RhcmtfcGluX2xhYmVsIiwiY29sb3JfZGFya19waW5fYmFja2dyb3VuZCIsImJyZWFrcG9pbnRTZWwiLCJoYXNDb250YWluZXIiLCJob3Jpem9udGFsIiwibXVsdGlsaW5lVGl0bGUiLCJ2ZXJ0aWNhbCIsImJyZWFrcG9pbnRUYWJsZXRQb3J0cmFpdFVwIiwic25hY2tiYXJWYXJzIiwiZmlsbCIsInN2Z1ZhcnMiLCJnZXRTaXplRGF0YSIsImZhY3RvciIsInNjYWxlZFRyYWNrSGVpZ2h0Iiwic2NhbGVkVHJhY2tXaWR0aCIsInRyYWNrX2xlbmd0aCIsInNjYWxlZFRodW1iU2l6ZSIsInRyYWNrVG9wIiwidGh1bWJQYWRkaW5nIiwiaWNvbl9idXR0b25fcGFkZGluZyIsInRodW1iTWFyZ2luIiwidGh1bWJPZmZzZXRNaW4iLCJ0aHVtYk9mZnNldE1heCIsInRodW1iT2Zmc2V0WSIsInRyYWNrVmlzdWFsT2Zmc2V0IiwiY3VzdG9tU2l6ZSIsImN1c3RvbVNwYWNpbmciLCJfcGVDb250cm9sX19sYWJlbCIsIl9wZVN3aXRjaENvbnRyb2xfIiwiX3BlU3dpdGNoQ29udHJvbF8yIiwiX3BlU3dpdGNoQ29udHJvbF8zIiwiX3BlU3dpdGNoQ29udHJvbF80IiwiY3JlYXRlU2l6ZSIsInNpemVEYXRhIiwic3dpdGNoVmFycyIsImhpdF9hcmVhX3BhZGRpbmciLCJjb2xvcl9saWdodF90aHVtYl9kaXNhYmxlZCIsImNvbG9yX2xpZ2h0X3dhc2hfb24iLCJjb2xvcl9saWdodF93YXNoX29mZiIsImNvbG9yX2xpZ2h0X3RyYWNrX29uIiwiY29sb3JfbGlnaHRfdHJhY2tfb25fb3BhY2l0eSIsImNvbG9yX2xpZ2h0X3RyYWNrX29mZiIsImNvbG9yX2xpZ2h0X3RyYWNrX29mZl9vcGFjaXR5IiwiY29sb3JfbGlnaHRfdHJhY2tfZGlzYWJsZWQiLCJjb2xvcl9saWdodF90cmFja19kaXNhYmxlZF9vcGFjaXR5IiwiY29sb3JfZGFya190aHVtYl9kaXNhYmxlZCIsImNvbG9yX2Rhcmtfd2FzaF9vbiIsImNvbG9yX2Rhcmtfd2FzaF9vZmYiLCJjb2xvcl9kYXJrX3RyYWNrX29uIiwiY29sb3JfZGFya190cmFja19vbl9vcGFjaXR5IiwiY29sb3JfZGFya190cmFja19vZmYiLCJjb2xvcl9kYXJrX3RyYWNrX29mZl9vcGFjaXR5IiwiY29sb3JfZGFya190cmFja19kaXNhYmxlZCIsImNvbG9yX2RhcmtfdHJhY2tfZGlzYWJsZWRfb3BhY2l0eSIsInRhYkNvbG9yIiwidGFiX2xhYmVsX3RyYW5zaXRpb25fcHJvcGVydHlfYW5pbWF0aW9uX2R1cmF0aW9uIiwidGFiX2xhYmVsX3RyYW5zaXRpb25fcHJvcGVydHkiLCJ0YWJfaGVpZ2h0IiwidGFiX21pbl93aWR0aCIsInRhYl9tYXhfd2lkdGgiLCJ0YWJfbWluX3dpZHRoX3RhYmxldCIsInRhYl9pY29uX2xhYmVsX2hlaWdodCIsInRhYl9jb250ZW50X3BhZGRpbmdfdiIsImxhYmVsX21heF93aWR0aCIsInRhYl9sYWJlbF9saW5lX2hlaWdodCIsInRhYl9sYWJlbF92ZXJ0aWNhbF9vZmZzZXQiLCJ0YWJfaWNvbl9sYWJlbF9pY29uX3NwYWNpbmciLCJtZW51X3RhYl9oZWlnaHQiLCJtZW51X3RhYl9pY29uX2xhYmVsX2hlaWdodCIsInRhYl9tZW51X2NvbnRlbnRfcGFkZGluZ192IiwidGFiTGF5b3V0IiwidGFic0NvbG9yIiwiX3RhYnNfaW5kZW50IiwidGFic19pbmRlbnQiLCJzY3JvbGxiYXJfb2Zmc2V0Iiwic2Nyb2xsX2J1dHRvbl9zaXplIiwic2Nyb2xsX2J1dHRvbl9mYWRlX2R1cmF0aW9uIiwic2Nyb2xsX2J1dHRvbl9mYWRlX2RlbGF5Iiwic2Nyb2xsX2J1dHRvbl9vcGFjaXR5IiwidGFiX2luZGljYXRvcl9oZWlnaHQiLCJ0YWJzTGF5b3V0IiwidGFic1ZhcnMiLCJpbmRpY2F0b3Jfc2xpZGVfc3BlZWQiLCJjb2xvcl9saWdodF9zZWxlY3RlZCIsImNvbG9yX2xpZ2h0X3RhYl9pbmRpY2F0b3IiLCJjb2xvcl9kYXJrX3NlbGVjdGVkIiwiY29sb3JfZGFya190YWJfaW5kaWNhdG9yIiwidGFic0ZucyIsInRhYkZucyIsInRhYnNTZWxlY3RvciIsInRhYkNsYXNzIiwidGFiU2VsZWN0b3IiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJ2ZXJ0aWNhbF9zcGFjaW5nX3RvcF9pbnB1dF9wYWRkaW5nX3YiLCJ2ZXJ0aWNhbF9zcGFjaW5nX3RvcCIsImlucHV0X3BhZGRpbmdfdiIsImZsb2F0aW5nX2xhYmVsX3ZlcnRpY2FsX3NwYWNpbmdfdG9wX2lucHV0X3BhZGRpbmdfdiIsImZsb2F0aW5nX2xhYmVsX3ZlcnRpY2FsX3NwYWNpbmdfdG9wIiwiZGVuc2VfZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3BfaW5wdXRfcGFkZGluZ192IiwiZGVuc2VfZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ190b3AiLCJpbnB1dF9wYWRkaW5nX3ZfaW5wdXRfcGFkZGluZ19oIiwiaW5wdXRfcGFkZGluZ19oIiwiZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX3ZfZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX2giLCJmdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfaCIsImRlbnNlX2Z1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ192X2RlbnNlX2Z1bGxfd2lkdGhfaW5wdXRfcGFkZGluZ19oIiwiZGVuc2VfZnVsbF93aWR0aF9pbnB1dF9wYWRkaW5nX3YiLCJkZW5zZV9mdWxsX3dpZHRoX2lucHV0X3BhZGRpbmdfaCIsInZlcnRpY2FsX3NwYWNpbmdfYm90dG9tIiwiZmxvYXRpbmdfbGFiZWxfdmVydGljYWxfc3BhY2luZ19ib3R0b20iLCJkZW5zZV9mbG9hdGluZ19sYWJlbF92ZXJ0aWNhbF9zcGFjaW5nX2JvdHRvbSIsImlucHV0X2ZvY3VzX2JvcmRlcl9hbmltYXRpb25fZHVyYXRpb24iLCJpbnB1dF9mb2N1c19ib3JkZXJfd2lkdGgiLCJmb250X3NpemVfZXJyb3IiLCJpbnB1dF9ib3JkZXJfd2lkdGgiLCJkZW5zZV9mb250X3NpemVfaW5wdXQiLCJkZW5zZV9mdWxsX3dpZHRoX2ZvbnRfc2l6ZV9pbnB1dCIsIm1hcmdpbl90b3BfZXJyb3JfbWVzc2FnZSIsImZsb2F0aW5nX2xhYmVsX2FuaW1hdGlvbl9kdXJhdGlvbiIsImRlbnNlX2ZvbnRfc2l6ZV9mbG9hdGluZ19sYWJlbCIsImRlbnNlX2Zsb2F0aW5nX2xhYmVsX3RvcCIsImZsb2F0aW5nX2xhYmVsX3RvcCIsImZvbnRfc2l6ZV9mbG9hdGluZ19sYWJlbCIsInRleHRmaWVsZFZhcnMiLCJjb2xvcl9saWdodF9pbnB1dF9iYWNrZ3JvdW5kIiwiY29sb3JfbGlnaHRfaGlnaGxpZ2h0X3RleHQiLCJjb2xvcl9saWdodF9pbnB1dF9ib3R0b21fYm9yZGVyIiwiY29sb3JfbGlnaHRfaW5wdXRfZXJyb3JfdGV4dCIsImNvbG9yX2xpZ2h0X2lucHV0X2Vycm9yX2JvcmRlciIsImNvbG9yX2xpZ2h0X2lucHV0X3BsYWNlaG9sZGVyIiwiY29sb3JfbGlnaHRfZGlzYWJsZWRfbGFiZWxfdGV4dCIsImNvbG9yX2xpZ2h0X3JlYWRvbmx5X2xhYmVsX3RleHQiLCJjb2xvcl9saWdodF9oZWxwX3RleHQiLCJjb2xvcl9saWdodF9yZXF1aXJlZF9zeW1ib2wiLCJjb2xvcl9saWdodF9mb2N1c19ib3JkZXIiLCJjb2xvcl9saWdodF9jb3VudGVyX29rX2JvcmRlciIsImNvbG9yX2RhcmtfaW5wdXRfYmFja2dyb3VuZCIsImNvbG9yX2RhcmtfaGlnaGxpZ2h0X3RleHQiLCJjb2xvcl9kYXJrX2lucHV0X2JvdHRvbV9ib3JkZXIiLCJjb2xvcl9kYXJrX2lucHV0X2Vycm9yX3RleHQiLCJjb2xvcl9kYXJrX2lucHV0X2Vycm9yX2JvcmRlciIsImNvbG9yX2RhcmtfaW5wdXRfcGxhY2Vob2xkZXIiLCJjb2xvcl9kYXJrX2Rpc2FibGVkX2xhYmVsX3RleHQiLCJjb2xvcl9kYXJrX3JlYWRvbmx5X2xhYmVsX3RleHQiLCJjb2xvcl9kYXJrX2hlbHBfdGV4dCIsImNvbG9yX2RhcmtfcmVxdWlyZWRfc3ltYm9sIiwiY29sb3JfZGFya19mb2N1c19ib3JkZXIiLCJjb2xvcl9kYXJrX2NvdW50ZXJfb2tfYm9yZGVyIiwiaW5kZW50X3BhZGRpbmdfc2lkZSIsIl9wZVRvb2xiYXJfX3RpdGxlIiwiaXNMYXJnZSIsImluZGVudF9sYXJnZSIsIl90aXRsZV9wYWRkaW5nIiwiX3NwYW5QZVRvb2xiYXIiLCJ0aXRsZV9wYWRkaW5nIiwidGl0bGVfcGFkZGluZ19sYXJnZSIsInRpdGxlX3BhZGRpbmdfdGl0bGVfYWZ0ZXJfaWNvbl9wYWRkaW5nIiwiX25vdFBlVG9vbGJhcl8iLCJ0aXRsZV9hZnRlcl9pY29uX3BhZGRpbmdfbGFyZ2UiLCJ0aXRsZV9hZnRlcl9pY29uX3BhZGRpbmciLCJicmVha3BvaW50UGhvbmVPbmx5IiwiaGVpZ2h0X2NvbXBhY3QiLCJwYWRkaW5nX3NpZGUiLCJoZWlnaHRfbGFyZ2UiLCJwYWRkaW5nX3NpZGVfbGFyZ2UiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmb250RmFtaWx5IiwiYWRkUm9ib3RvIiwidmVuZG9yIiwiZW1pdEV2ZW50IiwiZmFtaWx5TmFtZSIsImZ2ZCIsImxvYWRpbmciLCJmb250bG9hZGluZyIsImZvbnRhY3RpdmUiLCJmb250aW5hY3RpdmUiLCJ3ZiIsInByb3RvY29sIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ2ZW5kb3JDZmciLCJhZGRXZWJGb250IiwiZmFtaWxpZXMiLCJwYW5lbCIsIm9yaWdpbiIsIndpZHRoX2F1dG8iLCJ3aWR0aF9uIiwiaXNUb3BNZW51IiwibGlzdFRpbGUiLCJzZWxlY3RlZExpc3RUaWxlIiwiTWVudUluc3RhbmNlIiwic2V0SXNWaXNpYmxlIiwicGFuZWxFbFJlZiIsInBvc2l0aW9uTWVudSIsInNjcm9sbENvbnRlbnQiLCJfcmVmMiRoaWRlRGVsYXkiLCJwYW5lbEVsIiwidGFyZ2V0RWwiLCJoYXNTdHlsZVBvc2l0aW9uRml4ZWQiLCJ0b3BNZW51IiwicGFyZW50UmVjdCIsInRhcmdldFJlY3QiLCJhdHRyc09mZnNldEgiLCJvZmZzZXRIIiwiYXR0cnNPZmZzZXRWIiwib2Zmc2V0ViIsInBvc2l0aW9uT2Zmc2V0ViIsImF0dHJzT3JpZ2luIiwiY3VyciIsImZpcnN0SXRlbSIsInJlcG9zaXRpb24iLCJzZWxlY3RlZEl0ZW0iLCJmaXJzdEl0ZW1SZWN0Iiwic2VsZWN0ZWRJdGVtUmVjdCIsImFsaWduUmVjdCIsImhlaWdodERpZmYiLCJhYnMiLCJmaXJzdEl0ZW1IZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJ0b3BNYXJnaW4iLCJib3R0b21NYXJnaW4iLCJzY3JvbGxUYXJnZXQiLCJzY3JvbGxUYXJnZXRFbCIsImhpZGVNZW51IiwiaGFuZGxlRGlzbWlzc1RhcCIsIk1lbnVUb2dnbGUiLCJNZW51IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsImluZGVudGVkQm9yZGVyIiwicGFkZGluZ0NsYXNzZXMiLCJib3RoIiwibm9uZSIsInBhZGRpbmdDbGFzcyIsImhpZ2hTdWJ0aXRsZSIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJzdWJ0aXRsZSIsImNvbnRlbnRGcm9udCIsImNvbXBhY3RGcm9udCIsImhhc0Zyb250IiwiaGFzSGlnaFN1YnRpdGxlIiwiaGFzU3VidGl0bGUiLCJob3ZlcmFibGUiLCJzZWxlY3RhYmxlIiwiaGlnaGxpZ2h0Iiwic3RpY2t5IiwibmF2aWdhdGlvbiIsInByaW1hcnlDb250ZW50Iiwia2V5Ym9hcmRDb250cm9sIiwiY29udGVudEZyb250Q2xhc3MiLCJmcm9udENvbXAiLCJmcm9udCIsImhhc1RhYkluZGV4IiwiZWxlbWVudFByb3BzIiwic3ViQ29udGVudCIsInNlY29uZGFyeUNvbnRlbnQiLCJfcmVmNSRwcm9wcyIsIkxpc3RUaWxlIiwiaGVpZ2h0Q2xhc3MiLCJwcmltYXJ5UHJvcHMiLCJMaXN0IiwiaGVhZGVyT3B0cyIsImluZGVudGVkQm9yZGVycyIsInRpbGVzIiwiYWxsIiwidGlsZU9wdHMiLCJJY29uQnV0dG9uIiwiYnV0dG9uUHJvcHMiLCJGaWxlSW5wdXQiLCJ0aWxlRWwiLCJjbG9zZXN0IiwiSFRNTElucHV0RWxlbWVudCIsImNsaWNrIiwib25jYW5jZWwiLCJlcnJvclBsYWNlaG9sZGVyIiwiZm9jdXNIZWxwIiwiaGVscCIsImlucHV0QXJlYSIsIm9wdGlvbmFsSW5kaWNhdG9yIiwicmVxdWlyZWRJbmRpY2F0b3IiLCJoYXNDb3VudGVyIiwiaGFzRmxvYXRpbmdMYWJlbCIsImhhc0Z1bGxXaWR0aCIsImhpZGVDbGVhciIsImhpZGVTcGlubmVyIiwiaGlkZVZhbGlkYXRpb24iLCJpc0RlbnNlIiwiaXNSZXF1aXJlZCIsInN0YXRlRGlydHkiLCJzdGF0ZURpc2FibGVkIiwic3RhdGVGb2N1c2VkIiwic3RhdGVJbnZhbGlkIiwic3RhdGVSZWFkb25seSIsIkRFRkFVTFRfVkFMSURfU1RBVEUiLCJpbnZhbGlkIiwiaWdub3JlRXZlbnQiLCJpZ25vcmVFdmVudHMiLCJUZXh0RmllbGQiLCJkZWZhdWx0VmFsdWUiLCJpc0ludmFsaWQiLCJzZXRJc0ludmFsaWQiLCJpbnB1dEVsUmVmIiwicHJldmlvdXNWYWx1ZVJlZiIsInByZXZpb3VzU3RhdHVzUmVmIiwiaXNEaXJ0eVJlZiIsImhhc0ZvY3VzUmVmIiwiaXNUb3VjaGVkUmVmIiwiZXJyb3JSZWYiLCJpbnB1dFR5cGUiLCJtdWx0aUxpbmUiLCJzaG93RXJyb3JQbGFjZWhvbGRlciIsInZhbGlkIiwidmFsaWRhdGUiLCJoYW5kbGVTdGF0ZVVwZGF0ZSIsInZhbGlkYXRlT25JbnB1dCIsImNoZWNrVmFsaWRpdHkiLCJub3RpZnlTdGF0ZSIsImdldFZhbGlkU3RhdHVzIiwidmFsaWRhdGVSZXNldE9uQ2xlYXIiLCJ2YWxpZFN0YXRlIiwidmFsaWRhdGVDdXN0b20iLCJ2YWxpZGF0ZUF0U3RhcnQiLCJwcmV2aW91c0ludmFsaWQiLCJ2YWxpZFN0YXR1cyIsImRpcnR5Iiwic2V0SW5wdXRTdGF0ZSIsIm5ld1N0YXRlIiwiaGFzTmV3VmFsdWUiLCJoYXNOZXdGb2N1cyIsInZhbHVlU3RyIiwiZmxvYXRpbmdMYWJlbCIsImRlbnNlIiwiZnVsbFdpZHRoIiwiYWxsUHJvcHMiLCJkb21BdHRyaWJ1dGVzIiwiZXJyb3JNZXNzYWdlIiwic2hvd0Vycm9yIiwiVVJMSW5wdXQiLCJ1cGxvYWRVUkwiLCJ0ZXh0RmllbGRMYWJlbCIsIm1hcHBpbmdzIiwibWFwcGluZyIsInJlcGxhY2VtZW50IiwidWNlIiwic2luZ2xlQ29sb3IiLCJpc0hpZGluZyIsIkJhc2VTcGlubmVyIiwiaW5zdGFuY2VDbGFzcyIsImNpcmNsZSIsImNpcmNsZUNsaXBwZXIiLCJjaXJjbGVDbGlwcGVyTGVmdCIsImNpcmNsZUNsaXBwZXJSaWdodCIsImdhcFBhdGNoIiwibGF5ZXIiLCJsYXllck4iLCJTcGlubmVyIiwiU3Bpbm5lclRvZ2dsZSIsIk1hdGVyaWFsRGVzaWduU3Bpbm5lciIsInNob3dNZXNzYWdlRGlhbG9nIiwic2hvd1dhaXRpbmdEaWFsb2ciLCJBVFRSX0NJTlNfREVGQVVMVCIsImJ1dHRvbkNudCIsIkNpbnNEcm9wRG93biIsImJ1dHRvbklkIiwicmVzdWx0VGlsZXMiLCJjaW5zIiwib25jaW5zZWxlY3RlZCIsImNzZSIsIm9uY2luZGVsZXRlZCIsImNkZSIsImJ0bkxvYWRFbCIsImZpbGVzIiwiY2luRmlsZSIsImZpbGVSZWFkU3RyZWFtIiwib25jaW5pbXBvcnRlZCIsImNpZSIsImNpbklEIiwiZmV0Y2giLCJvayIsImVyck1zZyIsImNhdGNoIiwiYWN0aXZlQ2luIiwiYW55IiwiaGVhZGVyVGl0bGUiLCJtZWRpYURpbW1lciIsIm92ZXJsYXkiLCJvdmVybGF5Q29udGVudCIsInByaW1hcnlNZWRpYSIsImFjdGlvbnNCb3JkZXIiLCJhY3Rpb25zSG9yaXpvbnRhbCIsImFjdGlvbnNKdXN0aWZpZWQiLCJhY3Rpb25zVGlnaHQiLCJhY3Rpb25zVmVydGljYWwiLCJtZWRpYUNyb3BYIiwibWVkaWFDcm9wWSIsIm1lZGlhT3JpZ2luU3RhcnQiLCJtZWRpYU9yaWdpbkNlbnRlciIsIm1lZGlhT3JpZ2luRW5kIiwibWVkaWFMYXJnZSIsIm1lZGlhTWVkaXVtIiwibWVkaWFSYXRpb0xhbmRzY2FwZSIsIm1lZGlhUmF0aW9TcXVhcmUiLCJtZWRpYVJlZ3VsYXIiLCJtZWRpYVNtYWxsIiwib3ZlcmxheVNoZWV0IiwicHJpbWFyeUhhc01lZGlhIiwicHJpbWFyeVRpZ2h0IiwidGV4dFRpZ2h0IiwiaW1hZ2VSYXRpb3MiLCJsYW5kc2NhcGUiLCJzcXVhcmUiLCJtZWRpYVNpemVDbGFzc2VzIiwibWVkaWFTaXplQ2xhc3MiLCJhY3Rpb25MYXlvdXRDbGFzc2VzIiwianVzdGlmaWVkIiwiYWN0aW9uQ2xhc3NGb3JMYXlvdXQiLCJDYXJkQWN0aW9ucyIsImJvcmRlcmVkIiwidGlnaHQiLCJDYXJkTWVkaWEiLCJyYXRpbyIsImltZyIsIkltYWdlIiwib25sb2FkIiwidGFnTmFtZSIsImNyb3BDbGFzcyIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJvcmlnaW5DbGFzcyIsImluaXRJbWFnZSIsImRpc3BhdGNoZXIiLCJzaG93RGltbWVyIiwiQ2FyZFByaW1hcnkiLCJ0b3RhbCIsInByaW1hcnlEaXNwYXRjaCIsInBBdHRycyIsIkNhcmQiLCJibG9ja3MiLCJibG9ja05hbWUiLCJjcmVhdGVIZWFkZXIiLCJjcmVhdGVPdmVybGF5IiwiY3JlYXRlQW55IiwiX3JlZiRtZWRpYVF1ZXJ5IiwiX3JlZiRzY29wZSIsImZpbmFsVmFycyIsIkNhbmRpZGF0ZXMiLCJpbWVOYW1lIiwidG90YWxQYWdlcyIsInZlcnRpY2FsU2VsZWN0aW9uIiwib25jYW5kaWRhdGVzZWxlY3RlZCIsIm9ucHJldnBhZ2UiLCJvbm5leHRwYWdlIiwiQ2luVGV4dEFyZWEiLCJjYW5kaWRhdGVzV2lkdGgiLCJjYW5kaWRhdGVzSGVpZ2h0IiwicHJldktleW5hbWVzIiwicHJldkNhbmRpZGF0ZXMiLCJwcmV2Q3VycmVudFBhZ2UiLCJwcmV2VG90YWxQYWdlcyIsInByZXZDYW5kaWRhdGVzT2Zmc2V0SCIsInByZXZDYW5kaWRhdGVzT2Zmc2V0ViIsIm5lZWRDYW5kaWRhdGVzU2l6ZUNoZWNraW5nIiwiY2FyZEVsIiwiSFRNTEVsZW1lbnQiLCJ0ZXh0QXJlYUVsIiwiSFRNTFRleHRBcmVhRWxlbWVudCIsInRhRWwiLCJ0YVRvcCIsInRhV2lkdGgiLCJjYXJldFRvcCIsImNhcmV0TGVmdCIsInNlbGVjdGlvbkVuZCIsInNjcm9sbExlZnQiLCJpbm5lckhlaWdodCIsImdldENhbmRpZGF0ZXNMaXN0T2Zmc2V0cyIsIm9uQ2hhbmdlVGV4dEZpZWxkU3RhdGUiLCJ0ZXh0RmllbGRBdHRycyIsImNoaWxkRWxlbWVudHMiLCJkaXNwbGF5S2V5bmFtZXMiLCJkaXNwbGF5Q2FuZGlkYXRlcyIsImRpc3BsYXlDdXJyZW50UGFnZSIsImRpc3BsYXlUb3RhbFBhZ2VzIiwiZGlzcGxheU9mZnNldEgiLCJkaXNwbGF5T2Zmc2V0ViIsIm9uYmVmb3JlaW5wdXQiLCJwcmVwZW5kU3BhY2UiLCJpbml0Q2luRXZlbnRIYW5kbGVycyIsIm5ld1NlbGVjdGlvblBvcyIsInNlbGVjdGlvblN0YXJ0Iiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJmb2N1c1RleHRGaWVsZCIsIkFwcCIsImNpbkVuYWJsZSIsImRicyIsImluZGV4ZWREQiIsImRhdGFiYXNlcyIsImVuZHNXaXRoIiwiZGJOYW1lIiwib3BlblJlcSIsIm9uZXJyb3IiLCJwcm9taXNlU2V0dGluZ3MiLCJnZXRBbGwiLCJyZWNvcmRMaXN0IiwicmVjb3JkIiwicHJvbWlzZUtleW5hbWUiLCJsb2FkRnJvbURCIiwibG9hZEFsbEZyb21EQiIsImNsb3NlIiwiZGVsZXRlUmVxIiwiZGVsZXRlRGF0YWJhc2UiLCJkZWxldGVGcm9tREIiLCJyZWFkU3RyZWFtIiwicGlwZVRocm91Z2giLCJnZXRSZWFkZXIiLCJ2YWxpZGF0ZUNpbiIsIm9udXBncmFkZW5lZWRlZCIsIm9ialMiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJhdXRvSW5jcmVtZW50IiwiY3JlYXRlSW5kZXgiLCJ1bmlxdWUiLCJvbmNvbXBsZXRlIiwicHJvbWlzZVF1aWNrIiwicHJvbWlzZUNoYXJEZWYiLCJ3cml0ZVRvREIiLCJsb2FkRnJvbVN0cmVhbSIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJyZWdpc3RlciIsInJlZ2lzdHJhdGlvbiIsInJlZ2lzdHJhdGlvbkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==